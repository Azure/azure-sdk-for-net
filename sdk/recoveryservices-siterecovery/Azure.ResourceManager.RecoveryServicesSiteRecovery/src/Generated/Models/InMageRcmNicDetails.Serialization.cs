// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Net;
using System.Text;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.RecoveryServicesSiteRecovery.Models
{
    public partial class InMageRcmNicDetails : IUtf8JsonSerializable, IJsonModel<InMageRcmNicDetails>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<InMageRcmNicDetails>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<InMageRcmNicDetails>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<InMageRcmNicDetails>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(InMageRcmNicDetails)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (options.Format != "W" && Optional.IsDefined(NicId))
            {
                writer.WritePropertyName("nicId"u8);
                writer.WriteStringValue(NicId);
            }
            if (Optional.IsDefined(IsPrimaryNic))
            {
                writer.WritePropertyName("isPrimaryNic"u8);
                writer.WriteStringValue(IsPrimaryNic);
            }
            if (Optional.IsDefined(IsSelectedForFailover))
            {
                writer.WritePropertyName("isSelectedForFailover"u8);
                writer.WriteStringValue(IsSelectedForFailover);
            }
            if (options.Format != "W" && Optional.IsDefined(SourceIPAddress))
            {
                writer.WritePropertyName("sourceIPAddress"u8);
                writer.WriteStringValue(SourceIPAddress.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(SourceIPAddressType))
            {
                writer.WritePropertyName("sourceIPAddressType"u8);
                writer.WriteStringValue(SourceIPAddressType.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(SourceNetworkId))
            {
                writer.WritePropertyName("sourceNetworkId"u8);
                writer.WriteStringValue(SourceNetworkId);
            }
            if (options.Format != "W" && Optional.IsDefined(SourceSubnetName))
            {
                writer.WritePropertyName("sourceSubnetName"u8);
                writer.WriteStringValue(SourceSubnetName);
            }
            if (Optional.IsDefined(TargetIPAddress))
            {
                writer.WritePropertyName("targetIPAddress"u8);
                writer.WriteStringValue(TargetIPAddress.ToString());
            }
            if (Optional.IsDefined(TargetIPAddressType))
            {
                writer.WritePropertyName("targetIPAddressType"u8);
                writer.WriteStringValue(TargetIPAddressType.Value.ToString());
            }
            if (Optional.IsDefined(TargetSubnetName))
            {
                writer.WritePropertyName("targetSubnetName"u8);
                writer.WriteStringValue(TargetSubnetName);
            }
            if (Optional.IsDefined(TestSubnetName))
            {
                writer.WritePropertyName("testSubnetName"u8);
                writer.WriteStringValue(TestSubnetName);
            }
            if (Optional.IsDefined(TestIPAddress))
            {
                writer.WritePropertyName("testIPAddress"u8);
                writer.WriteStringValue(TestIPAddress.ToString());
            }
            if (Optional.IsDefined(TestIPAddressType))
            {
                writer.WritePropertyName("testIPAddressType"u8);
                writer.WriteStringValue(TestIPAddressType.Value.ToString());
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        InMageRcmNicDetails IJsonModel<InMageRcmNicDetails>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<InMageRcmNicDetails>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(InMageRcmNicDetails)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeInMageRcmNicDetails(document.RootElement, options);
        }

        internal static InMageRcmNicDetails DeserializeInMageRcmNicDetails(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> nicId = default;
            Optional<string> isPrimaryNic = default;
            Optional<string> isSelectedForFailover = default;
            Optional<IPAddress> sourceIPAddress = default;
            Optional<SiteRecoveryEthernetAddressType> sourceIPAddressType = default;
            Optional<ResourceIdentifier> sourceNetworkId = default;
            Optional<string> sourceSubnetName = default;
            Optional<IPAddress> targetIPAddress = default;
            Optional<SiteRecoveryEthernetAddressType> targetIPAddressType = default;
            Optional<string> targetSubnetName = default;
            Optional<string> testSubnetName = default;
            Optional<IPAddress> testIPAddress = default;
            Optional<SiteRecoveryEthernetAddressType> testIPAddressType = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("nicId"u8))
                {
                    nicId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("isPrimaryNic"u8))
                {
                    isPrimaryNic = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("isSelectedForFailover"u8))
                {
                    isSelectedForFailover = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sourceIPAddress"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sourceIPAddress = IPAddress.Parse(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("sourceIPAddressType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sourceIPAddressType = new SiteRecoveryEthernetAddressType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("sourceNetworkId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sourceNetworkId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("sourceSubnetName"u8))
                {
                    sourceSubnetName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("targetIPAddress"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    targetIPAddress = IPAddress.Parse(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("targetIPAddressType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    targetIPAddressType = new SiteRecoveryEthernetAddressType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("targetSubnetName"u8))
                {
                    targetSubnetName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("testSubnetName"u8))
                {
                    testSubnetName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("testIPAddress"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    testIPAddress = IPAddress.Parse(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("testIPAddressType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    testIPAddressType = new SiteRecoveryEthernetAddressType(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new InMageRcmNicDetails(nicId.Value, isPrimaryNic.Value, isSelectedForFailover.Value, sourceIPAddress.Value, Optional.ToNullable(sourceIPAddressType), sourceNetworkId.Value, sourceSubnetName.Value, targetIPAddress.Value, Optional.ToNullable(targetIPAddressType), targetSubnetName.Value, testSubnetName.Value, testIPAddress.Value, Optional.ToNullable(testIPAddressType), serializedAdditionalRawData);
        }

        private BinaryData SerializeBicep(ModelReaderWriterOptions options)
        {
            StringBuilder builder = new StringBuilder();
            builder.AppendLine("{");

            if (Optional.IsDefined(NicId))
            {
                builder.Append("  nicId:");
                if (NicId.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{NicId}'''");
                }
                else
                {
                    builder.AppendLine($" '{NicId}'");
                }
            }

            if (Optional.IsDefined(IsPrimaryNic))
            {
                builder.Append("  isPrimaryNic:");
                if (IsPrimaryNic.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{IsPrimaryNic}'''");
                }
                else
                {
                    builder.AppendLine($" '{IsPrimaryNic}'");
                }
            }

            if (Optional.IsDefined(IsSelectedForFailover))
            {
                builder.Append("  isSelectedForFailover:");
                if (IsSelectedForFailover.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{IsSelectedForFailover}'''");
                }
                else
                {
                    builder.AppendLine($" '{IsSelectedForFailover}'");
                }
            }

            if (Optional.IsDefined(SourceIPAddress))
            {
                builder.Append("  sourceIPAddress:");
                builder.AppendLine($" '{SourceIPAddress.ToString()}'");
            }

            if (Optional.IsDefined(SourceIPAddressType))
            {
                builder.Append("  sourceIPAddressType:");
                builder.AppendLine($" '{SourceIPAddressType.Value.ToString()}'");
            }

            if (Optional.IsDefined(SourceNetworkId))
            {
                builder.Append("  sourceNetworkId:");
                builder.AppendLine($" '{SourceNetworkId.ToString()}'");
            }

            if (Optional.IsDefined(SourceSubnetName))
            {
                builder.Append("  sourceSubnetName:");
                if (SourceSubnetName.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{SourceSubnetName}'''");
                }
                else
                {
                    builder.AppendLine($" '{SourceSubnetName}'");
                }
            }

            if (Optional.IsDefined(TargetIPAddress))
            {
                builder.Append("  targetIPAddress:");
                builder.AppendLine($" '{TargetIPAddress.ToString()}'");
            }

            if (Optional.IsDefined(TargetIPAddressType))
            {
                builder.Append("  targetIPAddressType:");
                builder.AppendLine($" '{TargetIPAddressType.Value.ToString()}'");
            }

            if (Optional.IsDefined(TargetSubnetName))
            {
                builder.Append("  targetSubnetName:");
                if (TargetSubnetName.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{TargetSubnetName}'''");
                }
                else
                {
                    builder.AppendLine($" '{TargetSubnetName}'");
                }
            }

            if (Optional.IsDefined(TestSubnetName))
            {
                builder.Append("  testSubnetName:");
                if (TestSubnetName.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{TestSubnetName}'''");
                }
                else
                {
                    builder.AppendLine($" '{TestSubnetName}'");
                }
            }

            if (Optional.IsDefined(TestIPAddress))
            {
                builder.Append("  testIPAddress:");
                builder.AppendLine($" '{TestIPAddress.ToString()}'");
            }

            if (Optional.IsDefined(TestIPAddressType))
            {
                builder.Append("  testIPAddressType:");
                builder.AppendLine($" '{TestIPAddressType.Value.ToString()}'");
            }

            builder.AppendLine("}");
            return BinaryData.FromString(builder.ToString());
        }

        private void AppendChildObject(StringBuilder stringBuilder, object childObject, ModelReaderWriterOptions options, int spaces, bool indentFirstLine)
        {
            string indent = new string(' ', spaces);
            BinaryData data = ModelReaderWriter.Write(childObject, options);
            string[] lines = data.ToString().Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries);
            bool inMultilineString = false;
            for (int i = 0; i < lines.Length; i++)
            {
                string line = lines[i];
                if (inMultilineString)
                {
                    if (line.Contains("'''"))
                    {
                        inMultilineString = false;
                    }
                    stringBuilder.AppendLine(line);
                    continue;
                }
                if (line.Contains("'''"))
                {
                    inMultilineString = true;
                    stringBuilder.AppendLine($"{indent}{line}");
                    continue;
                }
                if (i == 0 && !indentFirstLine)
                {
                    stringBuilder.AppendLine($" {line}");
                }
                else
                {
                    stringBuilder.AppendLine($"{indent}{line}");
                }
            }
        }

        BinaryData IPersistableModel<InMageRcmNicDetails>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<InMageRcmNicDetails>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                case "B":
                    return SerializeBicep(options);
                default:
                    throw new FormatException($"The model {nameof(InMageRcmNicDetails)} does not support '{options.Format}' format.");
            }
        }

        InMageRcmNicDetails IPersistableModel<InMageRcmNicDetails>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<InMageRcmNicDetails>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeInMageRcmNicDetails(document.RootElement, options);
                    }
                case "B":
                    throw new InvalidOperationException("Bicep deserialization is not supported for this type.");
                default:
                    throw new FormatException($"The model {nameof(InMageRcmNicDetails)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<InMageRcmNicDetails>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
