// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.RecoveryServicesSiteRecovery.Models
{
    public partial class VmNicDetails : IUtf8JsonSerializable, IJsonModel<VmNicDetails>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<VmNicDetails>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<VmNicDetails>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<VmNicDetails>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(VmNicDetails)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (Optional.IsDefined(NicId))
            {
                writer.WritePropertyName("nicId"u8);
                writer.WriteStringValue(NicId);
            }
            if (Optional.IsDefined(ReplicaNicId))
            {
                writer.WritePropertyName("replicaNicId"u8);
                writer.WriteStringValue(ReplicaNicId);
            }
            if (Optional.IsDefined(SourceNicArmId))
            {
                writer.WritePropertyName("sourceNicArmId"u8);
                writer.WriteStringValue(SourceNicArmId);
            }
            if (Optional.IsDefined(VmNetworkName))
            {
                writer.WritePropertyName("vMNetworkName"u8);
                writer.WriteStringValue(VmNetworkName);
            }
            if (Optional.IsDefined(RecoveryVmNetworkId))
            {
                writer.WritePropertyName("recoveryVMNetworkId"u8);
                writer.WriteStringValue(RecoveryVmNetworkId);
            }
            if (Optional.IsCollectionDefined(IPConfigs))
            {
                writer.WritePropertyName("ipConfigs"u8);
                writer.WriteStartArray();
                foreach (var item in IPConfigs)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(SelectionType))
            {
                writer.WritePropertyName("selectionType"u8);
                writer.WriteStringValue(SelectionType);
            }
            if (Optional.IsDefined(RecoveryNetworkSecurityGroupId))
            {
                writer.WritePropertyName("recoveryNetworkSecurityGroupId"u8);
                writer.WriteStringValue(RecoveryNetworkSecurityGroupId);
            }
            if (Optional.IsDefined(IsAcceleratedNetworkingOnRecoveryEnabled))
            {
                writer.WritePropertyName("enableAcceleratedNetworkingOnRecovery"u8);
                writer.WriteBooleanValue(IsAcceleratedNetworkingOnRecoveryEnabled.Value);
            }
            if (Optional.IsDefined(TfoVmNetworkId))
            {
                writer.WritePropertyName("tfoVMNetworkId"u8);
                writer.WriteStringValue(TfoVmNetworkId);
            }
            if (Optional.IsDefined(TfoNetworkSecurityGroupId))
            {
                writer.WritePropertyName("tfoNetworkSecurityGroupId"u8);
                writer.WriteStringValue(TfoNetworkSecurityGroupId);
            }
            if (Optional.IsDefined(IsAcceleratedNetworkingOnTfoEnabled))
            {
                writer.WritePropertyName("enableAcceleratedNetworkingOnTfo"u8);
                writer.WriteBooleanValue(IsAcceleratedNetworkingOnTfoEnabled.Value);
            }
            if (Optional.IsDefined(RecoveryNicName))
            {
                writer.WritePropertyName("recoveryNicName"u8);
                writer.WriteStringValue(RecoveryNicName);
            }
            if (Optional.IsDefined(RecoveryNicResourceGroupName))
            {
                writer.WritePropertyName("recoveryNicResourceGroupName"u8);
                writer.WriteStringValue(RecoveryNicResourceGroupName);
            }
            if (Optional.IsDefined(IsReuseExistingNicAllowed))
            {
                writer.WritePropertyName("reuseExistingNic"u8);
                writer.WriteBooleanValue(IsReuseExistingNicAllowed.Value);
            }
            if (Optional.IsDefined(TfoRecoveryNicName))
            {
                writer.WritePropertyName("tfoRecoveryNicName"u8);
                writer.WriteStringValue(TfoRecoveryNicName);
            }
            if (Optional.IsDefined(TfoRecoveryNicResourceGroupName))
            {
                writer.WritePropertyName("tfoRecoveryNicResourceGroupName"u8);
                writer.WriteStringValue(TfoRecoveryNicResourceGroupName);
            }
            if (Optional.IsDefined(IsTfoReuseExistingNicAllowed))
            {
                writer.WritePropertyName("tfoReuseExistingNic"u8);
                writer.WriteBooleanValue(IsTfoReuseExistingNicAllowed.Value);
            }
            if (Optional.IsDefined(TargetNicName))
            {
                writer.WritePropertyName("targetNicName"u8);
                writer.WriteStringValue(TargetNicName);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        VmNicDetails IJsonModel<VmNicDetails>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<VmNicDetails>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(VmNicDetails)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeVmNicDetails(document.RootElement, options);
        }

        internal static VmNicDetails DeserializeVmNicDetails(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> nicId = default;
            Optional<string> replicaNicId = default;
            Optional<ResourceIdentifier> sourceNicArmId = default;
            Optional<string> vmNetworkName = default;
            Optional<ResourceIdentifier> recoveryVmNetworkId = default;
            Optional<IReadOnlyList<HyperVIPConfigDetails>> ipConfigs = default;
            Optional<string> selectionType = default;
            Optional<string> recoveryNetworkSecurityGroupId = default;
            Optional<bool> enableAcceleratedNetworkingOnRecovery = default;
            Optional<ResourceIdentifier> tfoVmNetworkId = default;
            Optional<string> tfoNetworkSecurityGroupId = default;
            Optional<bool> enableAcceleratedNetworkingOnTfo = default;
            Optional<string> recoveryNicName = default;
            Optional<string> recoveryNicResourceGroupName = default;
            Optional<bool> reuseExistingNic = default;
            Optional<string> tfoRecoveryNicName = default;
            Optional<string> tfoRecoveryNicResourceGroupName = default;
            Optional<bool> tfoReuseExistingNic = default;
            Optional<string> targetNicName = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("nicId"u8))
                {
                    nicId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("replicaNicId"u8))
                {
                    replicaNicId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sourceNicArmId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sourceNicArmId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("vMNetworkName"u8))
                {
                    vmNetworkName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("recoveryVMNetworkId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    recoveryVmNetworkId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("ipConfigs"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<HyperVIPConfigDetails> array = new List<HyperVIPConfigDetails>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(HyperVIPConfigDetails.DeserializeHyperVIPConfigDetails(item));
                    }
                    ipConfigs = array;
                    continue;
                }
                if (property.NameEquals("selectionType"u8))
                {
                    selectionType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("recoveryNetworkSecurityGroupId"u8))
                {
                    recoveryNetworkSecurityGroupId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("enableAcceleratedNetworkingOnRecovery"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enableAcceleratedNetworkingOnRecovery = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("tfoVMNetworkId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    tfoVmNetworkId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("tfoNetworkSecurityGroupId"u8))
                {
                    tfoNetworkSecurityGroupId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("enableAcceleratedNetworkingOnTfo"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enableAcceleratedNetworkingOnTfo = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("recoveryNicName"u8))
                {
                    recoveryNicName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("recoveryNicResourceGroupName"u8))
                {
                    recoveryNicResourceGroupName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("reuseExistingNic"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    reuseExistingNic = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("tfoRecoveryNicName"u8))
                {
                    tfoRecoveryNicName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("tfoRecoveryNicResourceGroupName"u8))
                {
                    tfoRecoveryNicResourceGroupName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("tfoReuseExistingNic"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    tfoReuseExistingNic = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("targetNicName"u8))
                {
                    targetNicName = property.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new VmNicDetails(nicId.Value, replicaNicId.Value, sourceNicArmId.Value, vmNetworkName.Value, recoveryVmNetworkId.Value, Optional.ToList(ipConfigs), selectionType.Value, recoveryNetworkSecurityGroupId.Value, Optional.ToNullable(enableAcceleratedNetworkingOnRecovery), tfoVmNetworkId.Value, tfoNetworkSecurityGroupId.Value, Optional.ToNullable(enableAcceleratedNetworkingOnTfo), recoveryNicName.Value, recoveryNicResourceGroupName.Value, Optional.ToNullable(reuseExistingNic), tfoRecoveryNicName.Value, tfoRecoveryNicResourceGroupName.Value, Optional.ToNullable(tfoReuseExistingNic), targetNicName.Value, serializedAdditionalRawData);
        }

        private BinaryData SerializeBicep(ModelReaderWriterOptions options)
        {
            StringBuilder builder = new StringBuilder();
            builder.AppendLine("{");

            if (Optional.IsDefined(NicId))
            {
                builder.Append("  nicId:");
                if (NicId.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{NicId}'''");
                }
                else
                {
                    builder.AppendLine($" '{NicId}'");
                }
            }

            if (Optional.IsDefined(ReplicaNicId))
            {
                builder.Append("  replicaNicId:");
                if (ReplicaNicId.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{ReplicaNicId}'''");
                }
                else
                {
                    builder.AppendLine($" '{ReplicaNicId}'");
                }
            }

            if (Optional.IsDefined(SourceNicArmId))
            {
                builder.Append("  sourceNicArmId:");
                builder.AppendLine($" '{SourceNicArmId.ToString()}'");
            }

            if (Optional.IsDefined(VmNetworkName))
            {
                builder.Append("  vMNetworkName:");
                if (VmNetworkName.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{VmNetworkName}'''");
                }
                else
                {
                    builder.AppendLine($" '{VmNetworkName}'");
                }
            }

            if (Optional.IsDefined(RecoveryVmNetworkId))
            {
                builder.Append("  recoveryVMNetworkId:");
                builder.AppendLine($" '{RecoveryVmNetworkId.ToString()}'");
            }

            if (Optional.IsCollectionDefined(IPConfigs))
            {
                if (IPConfigs.Any())
                {
                    builder.Append("  ipConfigs:");
                    builder.AppendLine(" [");
                    foreach (var item in IPConfigs)
                    {
                        AppendChildObject(builder, item, options, 4, true);
                    }
                    builder.AppendLine("  ]");
                }
            }

            if (Optional.IsDefined(SelectionType))
            {
                builder.Append("  selectionType:");
                if (SelectionType.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{SelectionType}'''");
                }
                else
                {
                    builder.AppendLine($" '{SelectionType}'");
                }
            }

            if (Optional.IsDefined(RecoveryNetworkSecurityGroupId))
            {
                builder.Append("  recoveryNetworkSecurityGroupId:");
                if (RecoveryNetworkSecurityGroupId.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{RecoveryNetworkSecurityGroupId}'''");
                }
                else
                {
                    builder.AppendLine($" '{RecoveryNetworkSecurityGroupId}'");
                }
            }

            if (Optional.IsDefined(IsAcceleratedNetworkingOnRecoveryEnabled))
            {
                builder.Append("  enableAcceleratedNetworkingOnRecovery:");
                var boolValue = IsAcceleratedNetworkingOnRecoveryEnabled.Value == true ? "true" : "false";
                builder.AppendLine($" {boolValue}");
            }

            if (Optional.IsDefined(TfoVmNetworkId))
            {
                builder.Append("  tfoVMNetworkId:");
                builder.AppendLine($" '{TfoVmNetworkId.ToString()}'");
            }

            if (Optional.IsDefined(TfoNetworkSecurityGroupId))
            {
                builder.Append("  tfoNetworkSecurityGroupId:");
                if (TfoNetworkSecurityGroupId.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{TfoNetworkSecurityGroupId}'''");
                }
                else
                {
                    builder.AppendLine($" '{TfoNetworkSecurityGroupId}'");
                }
            }

            if (Optional.IsDefined(IsAcceleratedNetworkingOnTfoEnabled))
            {
                builder.Append("  enableAcceleratedNetworkingOnTfo:");
                var boolValue = IsAcceleratedNetworkingOnTfoEnabled.Value == true ? "true" : "false";
                builder.AppendLine($" {boolValue}");
            }

            if (Optional.IsDefined(RecoveryNicName))
            {
                builder.Append("  recoveryNicName:");
                if (RecoveryNicName.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{RecoveryNicName}'''");
                }
                else
                {
                    builder.AppendLine($" '{RecoveryNicName}'");
                }
            }

            if (Optional.IsDefined(RecoveryNicResourceGroupName))
            {
                builder.Append("  recoveryNicResourceGroupName:");
                if (RecoveryNicResourceGroupName.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{RecoveryNicResourceGroupName}'''");
                }
                else
                {
                    builder.AppendLine($" '{RecoveryNicResourceGroupName}'");
                }
            }

            if (Optional.IsDefined(IsReuseExistingNicAllowed))
            {
                builder.Append("  reuseExistingNic:");
                var boolValue = IsReuseExistingNicAllowed.Value == true ? "true" : "false";
                builder.AppendLine($" {boolValue}");
            }

            if (Optional.IsDefined(TfoRecoveryNicName))
            {
                builder.Append("  tfoRecoveryNicName:");
                if (TfoRecoveryNicName.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{TfoRecoveryNicName}'''");
                }
                else
                {
                    builder.AppendLine($" '{TfoRecoveryNicName}'");
                }
            }

            if (Optional.IsDefined(TfoRecoveryNicResourceGroupName))
            {
                builder.Append("  tfoRecoveryNicResourceGroupName:");
                if (TfoRecoveryNicResourceGroupName.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{TfoRecoveryNicResourceGroupName}'''");
                }
                else
                {
                    builder.AppendLine($" '{TfoRecoveryNicResourceGroupName}'");
                }
            }

            if (Optional.IsDefined(IsTfoReuseExistingNicAllowed))
            {
                builder.Append("  tfoReuseExistingNic:");
                var boolValue = IsTfoReuseExistingNicAllowed.Value == true ? "true" : "false";
                builder.AppendLine($" {boolValue}");
            }

            if (Optional.IsDefined(TargetNicName))
            {
                builder.Append("  targetNicName:");
                if (TargetNicName.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{TargetNicName}'''");
                }
                else
                {
                    builder.AppendLine($" '{TargetNicName}'");
                }
            }

            builder.AppendLine("}");
            return BinaryData.FromString(builder.ToString());
        }

        private void AppendChildObject(StringBuilder stringBuilder, object childObject, ModelReaderWriterOptions options, int spaces, bool indentFirstLine)
        {
            string indent = new string(' ', spaces);
            BinaryData data = ModelReaderWriter.Write(childObject, options);
            string[] lines = data.ToString().Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries);
            bool inMultilineString = false;
            for (int i = 0; i < lines.Length; i++)
            {
                string line = lines[i];
                if (inMultilineString)
                {
                    if (line.Contains("'''"))
                    {
                        inMultilineString = false;
                    }
                    stringBuilder.AppendLine(line);
                    continue;
                }
                if (line.Contains("'''"))
                {
                    inMultilineString = true;
                    stringBuilder.AppendLine($"{indent}{line}");
                    continue;
                }
                if (i == 0 && !indentFirstLine)
                {
                    stringBuilder.AppendLine($" {line}");
                }
                else
                {
                    stringBuilder.AppendLine($"{indent}{line}");
                }
            }
        }

        BinaryData IPersistableModel<VmNicDetails>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<VmNicDetails>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                case "B":
                    return SerializeBicep(options);
                default:
                    throw new FormatException($"The model {nameof(VmNicDetails)} does not support '{options.Format}' format.");
            }
        }

        VmNicDetails IPersistableModel<VmNicDetails>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<VmNicDetails>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeVmNicDetails(document.RootElement, options);
                    }
                case "B":
                    throw new InvalidOperationException("Bicep deserialization is not supported for this type.");
                default:
                    throw new FormatException($"The model {nameof(VmNicDetails)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<VmNicDetails>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
