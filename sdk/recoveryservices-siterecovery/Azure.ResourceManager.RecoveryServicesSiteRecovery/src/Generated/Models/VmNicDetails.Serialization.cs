// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.RecoveryServicesSiteRecovery.Models
{
    public partial class VmNicDetails : IUtf8JsonSerializable, IJsonModel<VmNicDetails>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<VmNicDetails>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<VmNicDetails>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<VmNicDetails>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(VmNicDetails)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (NicId != null)
            {
                writer.WritePropertyName("nicId"u8);
                writer.WriteStringValue(NicId);
            }
            if (ReplicaNicId != null)
            {
                writer.WritePropertyName("replicaNicId"u8);
                writer.WriteStringValue(ReplicaNicId);
            }
            if (SourceNicArmId != null)
            {
                writer.WritePropertyName("sourceNicArmId"u8);
                writer.WriteStringValue(SourceNicArmId);
            }
            if (VmNetworkName != null)
            {
                writer.WritePropertyName("vMNetworkName"u8);
                writer.WriteStringValue(VmNetworkName);
            }
            if (RecoveryVmNetworkId != null)
            {
                writer.WritePropertyName("recoveryVMNetworkId"u8);
                writer.WriteStringValue(RecoveryVmNetworkId);
            }
            if (!(IPConfigs is ChangeTrackingList<HyperVIPConfigDetails> collection && collection.IsUndefined))
            {
                writer.WritePropertyName("ipConfigs"u8);
                writer.WriteStartArray();
                foreach (var item in IPConfigs)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (SelectionType != null)
            {
                writer.WritePropertyName("selectionType"u8);
                writer.WriteStringValue(SelectionType);
            }
            if (RecoveryNetworkSecurityGroupId != null)
            {
                writer.WritePropertyName("recoveryNetworkSecurityGroupId"u8);
                writer.WriteStringValue(RecoveryNetworkSecurityGroupId);
            }
            if (IsAcceleratedNetworkingOnRecoveryEnabled.HasValue)
            {
                writer.WritePropertyName("enableAcceleratedNetworkingOnRecovery"u8);
                writer.WriteBooleanValue(IsAcceleratedNetworkingOnRecoveryEnabled.Value);
            }
            if (TfoVmNetworkId != null)
            {
                writer.WritePropertyName("tfoVMNetworkId"u8);
                writer.WriteStringValue(TfoVmNetworkId);
            }
            if (TfoNetworkSecurityGroupId != null)
            {
                writer.WritePropertyName("tfoNetworkSecurityGroupId"u8);
                writer.WriteStringValue(TfoNetworkSecurityGroupId);
            }
            if (IsAcceleratedNetworkingOnTfoEnabled.HasValue)
            {
                writer.WritePropertyName("enableAcceleratedNetworkingOnTfo"u8);
                writer.WriteBooleanValue(IsAcceleratedNetworkingOnTfoEnabled.Value);
            }
            if (RecoveryNicName != null)
            {
                writer.WritePropertyName("recoveryNicName"u8);
                writer.WriteStringValue(RecoveryNicName);
            }
            if (RecoveryNicResourceGroupName != null)
            {
                writer.WritePropertyName("recoveryNicResourceGroupName"u8);
                writer.WriteStringValue(RecoveryNicResourceGroupName);
            }
            if (IsReuseExistingNicAllowed.HasValue)
            {
                writer.WritePropertyName("reuseExistingNic"u8);
                writer.WriteBooleanValue(IsReuseExistingNicAllowed.Value);
            }
            if (TfoRecoveryNicName != null)
            {
                writer.WritePropertyName("tfoRecoveryNicName"u8);
                writer.WriteStringValue(TfoRecoveryNicName);
            }
            if (TfoRecoveryNicResourceGroupName != null)
            {
                writer.WritePropertyName("tfoRecoveryNicResourceGroupName"u8);
                writer.WriteStringValue(TfoRecoveryNicResourceGroupName);
            }
            if (IsTfoReuseExistingNicAllowed.HasValue)
            {
                writer.WritePropertyName("tfoReuseExistingNic"u8);
                writer.WriteBooleanValue(IsTfoReuseExistingNicAllowed.Value);
            }
            if (TargetNicName != null)
            {
                writer.WritePropertyName("targetNicName"u8);
                writer.WriteStringValue(TargetNicName);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        VmNicDetails IJsonModel<VmNicDetails>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<VmNicDetails>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(VmNicDetails)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeVmNicDetails(document.RootElement, options);
        }

        internal static VmNicDetails DeserializeVmNicDetails(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> nicId = default;
            Optional<string> replicaNicId = default;
            Optional<ResourceIdentifier> sourceNicArmId = default;
            Optional<string> vmNetworkName = default;
            Optional<ResourceIdentifier> recoveryVmNetworkId = default;
            IReadOnlyList<HyperVIPConfigDetails> ipConfigs = default;
            Optional<string> selectionType = default;
            Optional<string> recoveryNetworkSecurityGroupId = default;
            Optional<bool> enableAcceleratedNetworkingOnRecovery = default;
            Optional<ResourceIdentifier> tfoVmNetworkId = default;
            Optional<string> tfoNetworkSecurityGroupId = default;
            Optional<bool> enableAcceleratedNetworkingOnTfo = default;
            Optional<string> recoveryNicName = default;
            Optional<string> recoveryNicResourceGroupName = default;
            Optional<bool> reuseExistingNic = default;
            Optional<string> tfoRecoveryNicName = default;
            Optional<string> tfoRecoveryNicResourceGroupName = default;
            Optional<bool> tfoReuseExistingNic = default;
            Optional<string> targetNicName = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("nicId"u8))
                {
                    nicId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("replicaNicId"u8))
                {
                    replicaNicId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sourceNicArmId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sourceNicArmId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("vMNetworkName"u8))
                {
                    vmNetworkName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("recoveryVMNetworkId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    recoveryVmNetworkId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("ipConfigs"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<HyperVIPConfigDetails> array = new List<HyperVIPConfigDetails>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(HyperVIPConfigDetails.DeserializeHyperVIPConfigDetails(item, options));
                    }
                    ipConfigs = array;
                    continue;
                }
                if (property.NameEquals("selectionType"u8))
                {
                    selectionType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("recoveryNetworkSecurityGroupId"u8))
                {
                    recoveryNetworkSecurityGroupId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("enableAcceleratedNetworkingOnRecovery"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enableAcceleratedNetworkingOnRecovery = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("tfoVMNetworkId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    tfoVmNetworkId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("tfoNetworkSecurityGroupId"u8))
                {
                    tfoNetworkSecurityGroupId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("enableAcceleratedNetworkingOnTfo"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enableAcceleratedNetworkingOnTfo = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("recoveryNicName"u8))
                {
                    recoveryNicName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("recoveryNicResourceGroupName"u8))
                {
                    recoveryNicResourceGroupName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("reuseExistingNic"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    reuseExistingNic = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("tfoRecoveryNicName"u8))
                {
                    tfoRecoveryNicName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("tfoRecoveryNicResourceGroupName"u8))
                {
                    tfoRecoveryNicResourceGroupName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("tfoReuseExistingNic"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    tfoReuseExistingNic = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("targetNicName"u8))
                {
                    targetNicName = property.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new VmNicDetails(
                nicId.Value,
                replicaNicId.Value,
                sourceNicArmId.Value,
                vmNetworkName.Value,
                recoveryVmNetworkId.Value,
                ipConfigs ?? new ChangeTrackingList<HyperVIPConfigDetails>(),
                selectionType.Value,
                recoveryNetworkSecurityGroupId.Value,
                Optional.ToNullable(enableAcceleratedNetworkingOnRecovery),
                tfoVmNetworkId.Value,
                tfoNetworkSecurityGroupId.Value,
                Optional.ToNullable(enableAcceleratedNetworkingOnTfo),
                recoveryNicName.Value,
                recoveryNicResourceGroupName.Value,
                Optional.ToNullable(reuseExistingNic),
                tfoRecoveryNicName.Value,
                tfoRecoveryNicResourceGroupName.Value,
                Optional.ToNullable(tfoReuseExistingNic),
                targetNicName.Value,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<VmNicDetails>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<VmNicDetails>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(VmNicDetails)} does not support '{options.Format}' format.");
            }
        }

        VmNicDetails IPersistableModel<VmNicDetails>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<VmNicDetails>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeVmNicDetails(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(VmNicDetails)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<VmNicDetails>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
