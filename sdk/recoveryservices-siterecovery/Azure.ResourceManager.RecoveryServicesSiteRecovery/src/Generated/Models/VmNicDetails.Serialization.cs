// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.RecoveryServicesSiteRecovery.Models
{
    public partial class VmNicDetails
    {
        internal static VmNicDetails DeserializeVmNicDetails(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<string> nicId = default;
            Core.Optional<string> replicaNicId = default;
            Core.Optional<ResourceIdentifier> sourceNicArmId = default;
            Core.Optional<string> vmNetworkName = default;
            Core.Optional<ResourceIdentifier> recoveryVmNetworkId = default;
            Core.Optional<IReadOnlyList<HyperVIPConfigDetails>> ipConfigs = default;
            Core.Optional<string> selectionType = default;
            Core.Optional<string> recoveryNetworkSecurityGroupId = default;
            Core.Optional<bool> enableAcceleratedNetworkingOnRecovery = default;
            Core.Optional<ResourceIdentifier> tfoVmNetworkId = default;
            Core.Optional<string> tfoNetworkSecurityGroupId = default;
            Core.Optional<bool> enableAcceleratedNetworkingOnTfo = default;
            Core.Optional<string> recoveryNicName = default;
            Core.Optional<string> recoveryNicResourceGroupName = default;
            Core.Optional<bool> reuseExistingNic = default;
            Core.Optional<string> tfoRecoveryNicName = default;
            Core.Optional<string> tfoRecoveryNicResourceGroupName = default;
            Core.Optional<bool> tfoReuseExistingNic = default;
            Core.Optional<string> targetNicName = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("nicId"u8))
                {
                    nicId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("replicaNicId"u8))
                {
                    replicaNicId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sourceNicArmId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sourceNicArmId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("vMNetworkName"u8))
                {
                    vmNetworkName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("recoveryVMNetworkId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    recoveryVmNetworkId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("ipConfigs"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<HyperVIPConfigDetails> array = new List<HyperVIPConfigDetails>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(HyperVIPConfigDetails.DeserializeHyperVIPConfigDetails(item));
                    }
                    ipConfigs = array;
                    continue;
                }
                if (property.NameEquals("selectionType"u8))
                {
                    selectionType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("recoveryNetworkSecurityGroupId"u8))
                {
                    recoveryNetworkSecurityGroupId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("enableAcceleratedNetworkingOnRecovery"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enableAcceleratedNetworkingOnRecovery = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("tfoVMNetworkId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    tfoVmNetworkId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("tfoNetworkSecurityGroupId"u8))
                {
                    tfoNetworkSecurityGroupId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("enableAcceleratedNetworkingOnTfo"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enableAcceleratedNetworkingOnTfo = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("recoveryNicName"u8))
                {
                    recoveryNicName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("recoveryNicResourceGroupName"u8))
                {
                    recoveryNicResourceGroupName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("reuseExistingNic"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    reuseExistingNic = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("tfoRecoveryNicName"u8))
                {
                    tfoRecoveryNicName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("tfoRecoveryNicResourceGroupName"u8))
                {
                    tfoRecoveryNicResourceGroupName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("tfoReuseExistingNic"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    tfoReuseExistingNic = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("targetNicName"u8))
                {
                    targetNicName = property.Value.GetString();
                    continue;
                }
            }
            return new VmNicDetails(nicId.Value, replicaNicId.Value, sourceNicArmId.Value, vmNetworkName.Value, recoveryVmNetworkId.Value, Core.Optional.ToList(ipConfigs), selectionType.Value, recoveryNetworkSecurityGroupId.Value, Core.Optional.ToNullable(enableAcceleratedNetworkingOnRecovery), tfoVmNetworkId.Value, tfoNetworkSecurityGroupId.Value, Core.Optional.ToNullable(enableAcceleratedNetworkingOnTfo), recoveryNicName.Value, recoveryNicResourceGroupName.Value, Core.Optional.ToNullable(reuseExistingNic), tfoRecoveryNicName.Value, tfoRecoveryNicResourceGroupName.Value, Core.Optional.ToNullable(tfoReuseExistingNic), targetNicName.Value);
        }
    }
}
