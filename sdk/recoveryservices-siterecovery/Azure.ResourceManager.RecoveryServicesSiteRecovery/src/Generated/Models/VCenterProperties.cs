// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using Azure.Core;

namespace Azure.ResourceManager.RecoveryServicesSiteRecovery.Models
{
    /// <summary>
    /// vCenter properties.
    /// Serialized Name: VCenterProperties
    /// </summary>
    public partial class VCenterProperties
    {
        /// <summary> Initializes a new instance of VCenterProperties. </summary>
        internal VCenterProperties()
        {
            HealthErrors = new ChangeTrackingList<SiteRecoveryHealthError>();
        }

        /// <summary> Initializes a new instance of VCenterProperties. </summary>
        /// <param name="friendlyName">
        /// Friendly name of the vCenter.
        /// Serialized Name: VCenterProperties.friendlyName
        /// </param>
        /// <param name="internalId">
        /// VCenter internal ID.
        /// Serialized Name: VCenterProperties.internalId
        /// </param>
        /// <param name="lastHeartbeat">
        /// The time when the last heartbeat was received by vCenter.
        /// Serialized Name: VCenterProperties.lastHeartbeat
        /// </param>
        /// <param name="discoveryStatus">
        /// The VCenter discovery status.
        /// Serialized Name: VCenterProperties.discoveryStatus
        /// </param>
        /// <param name="processServerId">
        /// The process server Id.
        /// Serialized Name: VCenterProperties.processServerId
        /// </param>
        /// <param name="ipAddress">
        /// The IP address of the vCenter.
        /// Serialized Name: VCenterProperties.ipAddress
        /// </param>
        /// <param name="infrastructureId">
        /// The infrastructure Id of vCenter.
        /// Serialized Name: VCenterProperties.infrastructureId
        /// </param>
        /// <param name="port">
        /// The port number for discovery.
        /// Serialized Name: VCenterProperties.port
        /// </param>
        /// <param name="runAsAccountId">
        /// The account Id which has privileges to discover the vCenter.
        /// Serialized Name: VCenterProperties.runAsAccountId
        /// </param>
        /// <param name="fabricArmResourceName">
        /// The ARM resource name of the fabric containing this VCenter.
        /// Serialized Name: VCenterProperties.fabricArmResourceName
        /// </param>
        /// <param name="healthErrors">
        /// The health errors for this VCenter.
        /// Serialized Name: VCenterProperties.healthErrors
        /// </param>
        internal VCenterProperties(string friendlyName, string internalId, DateTimeOffset? lastHeartbeat, string discoveryStatus, string processServerId, IPAddress ipAddress, string infrastructureId, string port, string runAsAccountId, string fabricArmResourceName, IReadOnlyList<SiteRecoveryHealthError> healthErrors)
        {
            FriendlyName = friendlyName;
            InternalId = internalId;
            LastHeartbeat = lastHeartbeat;
            DiscoveryStatus = discoveryStatus;
            ProcessServerId = processServerId;
            IPAddress = ipAddress;
            InfrastructureId = infrastructureId;
            Port = port;
            RunAsAccountId = runAsAccountId;
            FabricArmResourceName = fabricArmResourceName;
            HealthErrors = healthErrors;
        }

        /// <summary>
        /// Friendly name of the vCenter.
        /// Serialized Name: VCenterProperties.friendlyName
        /// </summary>
        public string FriendlyName { get; }
        /// <summary>
        /// VCenter internal ID.
        /// Serialized Name: VCenterProperties.internalId
        /// </summary>
        public string InternalId { get; }
        /// <summary>
        /// The time when the last heartbeat was received by vCenter.
        /// Serialized Name: VCenterProperties.lastHeartbeat
        /// </summary>
        public DateTimeOffset? LastHeartbeat { get; }
        /// <summary>
        /// The VCenter discovery status.
        /// Serialized Name: VCenterProperties.discoveryStatus
        /// </summary>
        public string DiscoveryStatus { get; }
        /// <summary>
        /// The process server Id.
        /// Serialized Name: VCenterProperties.processServerId
        /// </summary>
        public string ProcessServerId { get; }
        /// <summary>
        /// The IP address of the vCenter.
        /// Serialized Name: VCenterProperties.ipAddress
        /// </summary>
        public IPAddress IPAddress { get; }
        /// <summary>
        /// The infrastructure Id of vCenter.
        /// Serialized Name: VCenterProperties.infrastructureId
        /// </summary>
        public string InfrastructureId { get; }
        /// <summary>
        /// The port number for discovery.
        /// Serialized Name: VCenterProperties.port
        /// </summary>
        public string Port { get; }
        /// <summary>
        /// The account Id which has privileges to discover the vCenter.
        /// Serialized Name: VCenterProperties.runAsAccountId
        /// </summary>
        public string RunAsAccountId { get; }
        /// <summary>
        /// The ARM resource name of the fabric containing this VCenter.
        /// Serialized Name: VCenterProperties.fabricArmResourceName
        /// </summary>
        public string FabricArmResourceName { get; }
        /// <summary>
        /// The health errors for this VCenter.
        /// Serialized Name: VCenterProperties.healthErrors
        /// </summary>
        public IReadOnlyList<SiteRecoveryHealthError> HealthErrors { get; }
    }
}
