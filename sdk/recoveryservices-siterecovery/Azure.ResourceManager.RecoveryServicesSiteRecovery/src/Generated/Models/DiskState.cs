// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.RecoveryServicesSiteRecovery.Models
{
    /// <summary> The disk state. </summary>
    public readonly partial struct DiskState : IEquatable<DiskState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DiskState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DiskState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnavailableValue = "Unavailable";
        private const string InitialReplicationPendingValue = "InitialReplicationPending";
        private const string InitialReplicationFailedValue = "InitialReplicationFailed";
        private const string ProtectedValue = "Protected";

        /// <summary> Unavailable. </summary>
        public static DiskState Unavailable { get; } = new DiskState(UnavailableValue);
        /// <summary> InitialReplicationPending. </summary>
        public static DiskState InitialReplicationPending { get; } = new DiskState(InitialReplicationPendingValue);
        /// <summary> InitialReplicationFailed. </summary>
        public static DiskState InitialReplicationFailed { get; } = new DiskState(InitialReplicationFailedValue);
        /// <summary> Protected. </summary>
        public static DiskState Protected { get; } = new DiskState(ProtectedValue);
        /// <summary> Determines if two <see cref="DiskState"/> values are the same. </summary>
        public static bool operator ==(DiskState left, DiskState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DiskState"/> values are not the same. </summary>
        public static bool operator !=(DiskState left, DiskState right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="DiskState"/>. </summary>
        public static implicit operator DiskState(string value) => new DiskState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DiskState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DiskState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
