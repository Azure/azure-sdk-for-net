// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net.ClientModel;
using System.Net.ClientModel.Core;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.RecoveryServicesSiteRecovery.Models
{
    public partial class InMageRcmFailbackProtectedDiskDetails : IUtf8JsonSerializable, IJsonModel<InMageRcmFailbackProtectedDiskDetails>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<InMageRcmFailbackProtectedDiskDetails>)this).Write(writer, ModelReaderWriterOptions.Wire);

        void IJsonModel<InMageRcmFailbackProtectedDiskDetails>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            if ((options.Format != "W" || ((IPersistableModel<InMageRcmFailbackProtectedDiskDetails>)this).GetWireFormat(options) != "J") && options.Format != "J")
            {
                throw new InvalidOperationException($"Must use 'J' format when calling the {nameof(IJsonModel<InMageRcmFailbackProtectedDiskDetails>)} interface");
            }

            writer.WriteStartObject();
            if (options.Format == "J")
            {
                if (Optional.IsDefined(DiskId))
                {
                    writer.WritePropertyName("diskId"u8);
                    writer.WriteStringValue(DiskId);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(DiskName))
                {
                    writer.WritePropertyName("diskName"u8);
                    writer.WriteStringValue(DiskName);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(IsOSDisk))
                {
                    writer.WritePropertyName("isOSDisk"u8);
                    writer.WriteStringValue(IsOSDisk);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(CapacityInBytes))
                {
                    writer.WritePropertyName("capacityInBytes"u8);
                    writer.WriteNumberValue(CapacityInBytes.Value);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(DiskUuid))
                {
                    writer.WritePropertyName("diskUuid"u8);
                    writer.WriteStringValue(DiskUuid);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(DataPendingInLogDataStoreInMB))
                {
                    writer.WritePropertyName("dataPendingInLogDataStoreInMB"u8);
                    writer.WriteNumberValue(DataPendingInLogDataStoreInMB.Value);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(DataPendingAtSourceAgentInMB))
                {
                    writer.WritePropertyName("dataPendingAtSourceAgentInMB"u8);
                    writer.WriteNumberValue(DataPendingAtSourceAgentInMB.Value);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(IsInitialReplicationComplete))
                {
                    writer.WritePropertyName("isInitialReplicationComplete"u8);
                    writer.WriteStringValue(IsInitialReplicationComplete);
                }
            }
            if (Optional.IsDefined(IrDetails))
            {
                writer.WritePropertyName("irDetails"u8);
                writer.WriteObjectValue(IrDetails);
            }
            if (Optional.IsDefined(ResyncDetails))
            {
                writer.WritePropertyName("resyncDetails"u8);
                writer.WriteObjectValue(ResyncDetails);
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(LastSyncedOn))
                {
                    writer.WritePropertyName("lastSyncTime"u8);
                    writer.WriteStringValue(LastSyncedOn.Value, "O");
                }
            }
            if (_serializedAdditionalRawData != null && options.Format == "J")
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        InMageRcmFailbackProtectedDiskDetails IJsonModel<InMageRcmFailbackProtectedDiskDetails>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(InMageRcmFailbackProtectedDiskDetails)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeInMageRcmFailbackProtectedDiskDetails(document.RootElement, options);
        }

        internal static InMageRcmFailbackProtectedDiskDetails DeserializeInMageRcmFailbackProtectedDiskDetails(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelReaderWriterOptions.Wire;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> diskId = default;
            Optional<string> diskName = default;
            Optional<string> isOSDisk = default;
            Optional<long> capacityInBytes = default;
            Optional<string> diskUuid = default;
            Optional<double> dataPendingInLogDataStoreInMB = default;
            Optional<double> dataPendingAtSourceAgentInMB = default;
            Optional<string> isInitialReplicationComplete = default;
            Optional<InMageRcmFailbackSyncDetails> irDetails = default;
            Optional<InMageRcmFailbackSyncDetails> resyncDetails = default;
            Optional<DateTimeOffset> lastSyncTime = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("diskId"u8))
                {
                    diskId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("diskName"u8))
                {
                    diskName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("isOSDisk"u8))
                {
                    isOSDisk = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("capacityInBytes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    capacityInBytes = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("diskUuid"u8))
                {
                    diskUuid = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("dataPendingInLogDataStoreInMB"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dataPendingInLogDataStoreInMB = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("dataPendingAtSourceAgentInMB"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dataPendingAtSourceAgentInMB = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("isInitialReplicationComplete"u8))
                {
                    isInitialReplicationComplete = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("irDetails"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    irDetails = InMageRcmFailbackSyncDetails.DeserializeInMageRcmFailbackSyncDetails(property.Value);
                    continue;
                }
                if (property.NameEquals("resyncDetails"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    resyncDetails = InMageRcmFailbackSyncDetails.DeserializeInMageRcmFailbackSyncDetails(property.Value);
                    continue;
                }
                if (property.NameEquals("lastSyncTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastSyncTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (options.Format == "J")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new InMageRcmFailbackProtectedDiskDetails(diskId.Value, diskName.Value, isOSDisk.Value, Optional.ToNullable(capacityInBytes), diskUuid.Value, Optional.ToNullable(dataPendingInLogDataStoreInMB), Optional.ToNullable(dataPendingAtSourceAgentInMB), isInitialReplicationComplete.Value, irDetails.Value, resyncDetails.Value, Optional.ToNullable(lastSyncTime), serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<InMageRcmFailbackProtectedDiskDetails>.Write(ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(InMageRcmFailbackProtectedDiskDetails)} does not support '{options.Format}' format.");
            }

            return ModelReaderWriter.Write(this, options);
        }

        InMageRcmFailbackProtectedDiskDetails IPersistableModel<InMageRcmFailbackProtectedDiskDetails>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(InMageRcmFailbackProtectedDiskDetails)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.Parse(data);
            return DeserializeInMageRcmFailbackProtectedDiskDetails(document.RootElement, options);
        }

        string IPersistableModel<InMageRcmFailbackProtectedDiskDetails>.GetWireFormat(ModelReaderWriterOptions options) => "J";
    }
}
