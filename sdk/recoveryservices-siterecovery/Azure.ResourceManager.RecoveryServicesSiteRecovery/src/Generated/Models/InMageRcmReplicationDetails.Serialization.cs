// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.RecoveryServicesSiteRecovery.Models
{
    public partial class InMageRcmReplicationDetails
    {
        internal static InMageRcmReplicationDetails DeserializeInMageRcmReplicationDetails(JsonElement element)
        {
            Optional<string> internalIdentifier = default;
            Optional<string> fabricDiscoveryMachineId = default;
            Optional<string> multiVmGroupName = default;
            Optional<string> discoveryType = default;
            Optional<string> processServerId = default;
            Optional<int> processorCoreCount = default;
            Optional<double> allocatedMemoryInMB = default;
            Optional<string> processServerName = default;
            Optional<string> runAsAccountId = default;
            Optional<string> osType = default;
            Optional<string> firmwareType = default;
            Optional<string> primaryNicIPAddress = default;
            Optional<string> targetGeneration = default;
            Optional<string> licenseType = default;
            Optional<string> storageAccountId = default;
            Optional<string> targetVmName = default;
            Optional<string> targetVmSize = default;
            Optional<string> targetResourceGroupId = default;
            Optional<string> targetLocation = default;
            Optional<string> targetAvailabilitySetId = default;
            Optional<string> targetAvailabilityZone = default;
            Optional<string> targetProximityPlacementGroupId = default;
            Optional<string> targetBootDiagnosticsStorageAccountId = default;
            Optional<string> targetNetworkId = default;
            Optional<string> testNetworkId = default;
            Optional<string> failoverRecoveryPointId = default;
            Optional<DateTimeOffset> lastRecoveryPointReceived = default;
            Optional<long> lastRpoInSeconds = default;
            Optional<DateTimeOffset> lastRpoCalculatedTime = default;
            Optional<string> lastRecoveryPointId = default;
            Optional<int> initialReplicationProgressPercentage = default;
            Optional<long> initialReplicationProcessedBytes = default;
            Optional<long> initialReplicationTransferredBytes = default;
            Optional<VmReplicationProgressHealth> initialReplicationProgressHealth = default;
            Optional<int> resyncProgressPercentage = default;
            Optional<long> resyncProcessedBytes = default;
            Optional<long> resyncTransferredBytes = default;
            Optional<VmReplicationProgressHealth> resyncProgressHealth = default;
            Optional<string> resyncRequired = default;
            Optional<ResyncState> resyncState = default;
            Optional<MobilityAgentUpgradeState> agentUpgradeState = default;
            Optional<string> lastAgentUpgradeType = default;
            Optional<string> agentUpgradeJobId = default;
            Optional<string> agentUpgradeAttemptToVersion = default;
            Optional<IReadOnlyList<InMageRcmProtectedDiskDetails>> protectedDisks = default;
            Optional<string> isLastUpgradeSuccessful = default;
            Optional<bool> isAgentRegistrationSuccessfulAfterFailover = default;
            Optional<InMageRcmMobilityAgentDetails> mobilityAgentDetails = default;
            Optional<IReadOnlyList<InMageRcmLastAgentUpgradeErrorDetails>> lastAgentUpgradeErrorDetails = default;
            Optional<IReadOnlyList<InMageRcmAgentUpgradeBlockingErrorDetails>> agentUpgradeBlockingErrorDetails = default;
            Optional<IReadOnlyList<InMageRcmNicDetails>> vmNics = default;
            Optional<InMageRcmDiscoveredProtectedVmDetails> discoveredVmDetails = default;
            string instanceType = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("internalIdentifier"))
                {
                    internalIdentifier = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("fabricDiscoveryMachineId"))
                {
                    fabricDiscoveryMachineId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("multiVmGroupName"))
                {
                    multiVmGroupName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("discoveryType"))
                {
                    discoveryType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("processServerId"))
                {
                    processServerId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("processorCoreCount"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    processorCoreCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("allocatedMemoryInMB"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    allocatedMemoryInMB = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("processServerName"))
                {
                    processServerName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("runAsAccountId"))
                {
                    runAsAccountId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("osType"))
                {
                    osType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("firmwareType"))
                {
                    firmwareType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("primaryNicIpAddress"))
                {
                    primaryNicIPAddress = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("targetGeneration"))
                {
                    targetGeneration = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("licenseType"))
                {
                    licenseType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("storageAccountId"))
                {
                    storageAccountId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("targetVmName"))
                {
                    targetVmName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("targetVmSize"))
                {
                    targetVmSize = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("targetResourceGroupId"))
                {
                    targetResourceGroupId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("targetLocation"))
                {
                    targetLocation = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("targetAvailabilitySetId"))
                {
                    targetAvailabilitySetId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("targetAvailabilityZone"))
                {
                    targetAvailabilityZone = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("targetProximityPlacementGroupId"))
                {
                    targetProximityPlacementGroupId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("targetBootDiagnosticsStorageAccountId"))
                {
                    targetBootDiagnosticsStorageAccountId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("targetNetworkId"))
                {
                    targetNetworkId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("testNetworkId"))
                {
                    testNetworkId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("failoverRecoveryPointId"))
                {
                    failoverRecoveryPointId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("lastRecoveryPointReceived"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    lastRecoveryPointReceived = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("lastRpoInSeconds"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    lastRpoInSeconds = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("lastRpoCalculatedTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    lastRpoCalculatedTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("lastRecoveryPointId"))
                {
                    lastRecoveryPointId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("initialReplicationProgressPercentage"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    initialReplicationProgressPercentage = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("initialReplicationProcessedBytes"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    initialReplicationProcessedBytes = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("initialReplicationTransferredBytes"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    initialReplicationTransferredBytes = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("initialReplicationProgressHealth"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    initialReplicationProgressHealth = new VmReplicationProgressHealth(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("resyncProgressPercentage"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    resyncProgressPercentage = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("resyncProcessedBytes"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    resyncProcessedBytes = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("resyncTransferredBytes"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    resyncTransferredBytes = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("resyncProgressHealth"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    resyncProgressHealth = new VmReplicationProgressHealth(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("resyncRequired"))
                {
                    resyncRequired = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("resyncState"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    resyncState = new ResyncState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("agentUpgradeState"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    agentUpgradeState = new MobilityAgentUpgradeState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("lastAgentUpgradeType"))
                {
                    lastAgentUpgradeType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("agentUpgradeJobId"))
                {
                    agentUpgradeJobId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("agentUpgradeAttemptToVersion"))
                {
                    agentUpgradeAttemptToVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("protectedDisks"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<InMageRcmProtectedDiskDetails> array = new List<InMageRcmProtectedDiskDetails>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(InMageRcmProtectedDiskDetails.DeserializeInMageRcmProtectedDiskDetails(item));
                    }
                    protectedDisks = array;
                    continue;
                }
                if (property.NameEquals("isLastUpgradeSuccessful"))
                {
                    isLastUpgradeSuccessful = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("isAgentRegistrationSuccessfulAfterFailover"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isAgentRegistrationSuccessfulAfterFailover = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("mobilityAgentDetails"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    mobilityAgentDetails = InMageRcmMobilityAgentDetails.DeserializeInMageRcmMobilityAgentDetails(property.Value);
                    continue;
                }
                if (property.NameEquals("lastAgentUpgradeErrorDetails"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<InMageRcmLastAgentUpgradeErrorDetails> array = new List<InMageRcmLastAgentUpgradeErrorDetails>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(InMageRcmLastAgentUpgradeErrorDetails.DeserializeInMageRcmLastAgentUpgradeErrorDetails(item));
                    }
                    lastAgentUpgradeErrorDetails = array;
                    continue;
                }
                if (property.NameEquals("agentUpgradeBlockingErrorDetails"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<InMageRcmAgentUpgradeBlockingErrorDetails> array = new List<InMageRcmAgentUpgradeBlockingErrorDetails>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(InMageRcmAgentUpgradeBlockingErrorDetails.DeserializeInMageRcmAgentUpgradeBlockingErrorDetails(item));
                    }
                    agentUpgradeBlockingErrorDetails = array;
                    continue;
                }
                if (property.NameEquals("vmNics"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<InMageRcmNicDetails> array = new List<InMageRcmNicDetails>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(InMageRcmNicDetails.DeserializeInMageRcmNicDetails(item));
                    }
                    vmNics = array;
                    continue;
                }
                if (property.NameEquals("discoveredVmDetails"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    discoveredVmDetails = InMageRcmDiscoveredProtectedVmDetails.DeserializeInMageRcmDiscoveredProtectedVmDetails(property.Value);
                    continue;
                }
                if (property.NameEquals("instanceType"))
                {
                    instanceType = property.Value.GetString();
                    continue;
                }
            }
            return new InMageRcmReplicationDetails(instanceType, internalIdentifier.Value, fabricDiscoveryMachineId.Value, multiVmGroupName.Value, discoveryType.Value, processServerId.Value, Optional.ToNullable(processorCoreCount), Optional.ToNullable(allocatedMemoryInMB), processServerName.Value, runAsAccountId.Value, osType.Value, firmwareType.Value, primaryNicIPAddress.Value, targetGeneration.Value, licenseType.Value, storageAccountId.Value, targetVmName.Value, targetVmSize.Value, targetResourceGroupId.Value, targetLocation.Value, targetAvailabilitySetId.Value, targetAvailabilityZone.Value, targetProximityPlacementGroupId.Value, targetBootDiagnosticsStorageAccountId.Value, targetNetworkId.Value, testNetworkId.Value, failoverRecoveryPointId.Value, Optional.ToNullable(lastRecoveryPointReceived), Optional.ToNullable(lastRpoInSeconds), Optional.ToNullable(lastRpoCalculatedTime), lastRecoveryPointId.Value, Optional.ToNullable(initialReplicationProgressPercentage), Optional.ToNullable(initialReplicationProcessedBytes), Optional.ToNullable(initialReplicationTransferredBytes), Optional.ToNullable(initialReplicationProgressHealth), Optional.ToNullable(resyncProgressPercentage), Optional.ToNullable(resyncProcessedBytes), Optional.ToNullable(resyncTransferredBytes), Optional.ToNullable(resyncProgressHealth), resyncRequired.Value, Optional.ToNullable(resyncState), Optional.ToNullable(agentUpgradeState), lastAgentUpgradeType.Value, agentUpgradeJobId.Value, agentUpgradeAttemptToVersion.Value, Optional.ToList(protectedDisks), isLastUpgradeSuccessful.Value, Optional.ToNullable(isAgentRegistrationSuccessfulAfterFailover), mobilityAgentDetails.Value, Optional.ToList(lastAgentUpgradeErrorDetails), Optional.ToList(agentUpgradeBlockingErrorDetails), Optional.ToList(vmNics), discoveredVmDetails.Value);
        }
    }
}
