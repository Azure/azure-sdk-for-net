// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.RecoveryServicesSiteRecovery.Models
{
    public partial class MasterTargetServer
    {
        internal static MasterTargetServer DeserializeMasterTargetServer(JsonElement element)
        {
            Optional<string> id = default;
            Optional<string> ipAddress = default;
            Optional<string> name = default;
            Optional<string> osType = default;
            Optional<string> agentVersion = default;
            Optional<DateTimeOffset> lastHeartbeat = default;
            Optional<string> versionStatus = default;
            Optional<IReadOnlyList<RetentionVolume>> retentionVolumes = default;
            Optional<IReadOnlyList<DataStore>> dataStores = default;
            Optional<IReadOnlyList<HealthError>> validationErrors = default;
            Optional<IReadOnlyList<HealthError>> healthErrors = default;
            Optional<int> diskCount = default;
            Optional<string> osVersion = default;
            Optional<DateTimeOffset> agentExpiryDate = default;
            Optional<string> marsAgentVersion = default;
            Optional<DateTimeOffset> marsAgentExpiryDate = default;
            Optional<VersionDetails> agentVersionDetails = default;
            Optional<VersionDetails> marsAgentVersionDetails = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ipAddress"))
                {
                    ipAddress = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("osType"))
                {
                    osType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("agentVersion"))
                {
                    agentVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("lastHeartbeat"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    lastHeartbeat = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("versionStatus"))
                {
                    versionStatus = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("retentionVolumes"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<RetentionVolume> array = new List<RetentionVolume>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(RetentionVolume.DeserializeRetentionVolume(item));
                    }
                    retentionVolumes = array;
                    continue;
                }
                if (property.NameEquals("dataStores"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<DataStore> array = new List<DataStore>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DataStore.DeserializeDataStore(item));
                    }
                    dataStores = array;
                    continue;
                }
                if (property.NameEquals("validationErrors"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<HealthError> array = new List<HealthError>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(HealthError.DeserializeHealthError(item));
                    }
                    validationErrors = array;
                    continue;
                }
                if (property.NameEquals("healthErrors"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<HealthError> array = new List<HealthError>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(HealthError.DeserializeHealthError(item));
                    }
                    healthErrors = array;
                    continue;
                }
                if (property.NameEquals("diskCount"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    diskCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("osVersion"))
                {
                    osVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("agentExpiryDate"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    agentExpiryDate = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("marsAgentVersion"))
                {
                    marsAgentVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("marsAgentExpiryDate"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    marsAgentExpiryDate = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("agentVersionDetails"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    agentVersionDetails = VersionDetails.DeserializeVersionDetails(property.Value);
                    continue;
                }
                if (property.NameEquals("marsAgentVersionDetails"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    marsAgentVersionDetails = VersionDetails.DeserializeVersionDetails(property.Value);
                    continue;
                }
            }
            return new MasterTargetServer(id.Value, ipAddress.Value, name.Value, osType.Value, agentVersion.Value, Optional.ToNullable(lastHeartbeat), versionStatus.Value, Optional.ToList(retentionVolumes), Optional.ToList(dataStores), Optional.ToList(validationErrors), Optional.ToList(healthErrors), Optional.ToNullable(diskCount), osVersion.Value, Optional.ToNullable(agentExpiryDate), marsAgentVersion.Value, Optional.ToNullable(marsAgentExpiryDate), agentVersionDetails.Value, marsAgentVersionDetails.Value);
        }
    }
}
