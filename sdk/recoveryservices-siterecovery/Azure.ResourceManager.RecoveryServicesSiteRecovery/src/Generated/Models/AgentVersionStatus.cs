// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.RecoveryServicesSiteRecovery.Models
{
    /// <summary> A value indicating whether security update required. </summary>
    public readonly partial struct AgentVersionStatus : IEquatable<AgentVersionStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AgentVersionStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AgentVersionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SupportedValue = "Supported";
        private const string NotSupportedValue = "NotSupported";
        private const string DeprecatedValue = "Deprecated";
        private const string UpdateRequiredValue = "UpdateRequired";
        private const string SecurityUpdateRequiredValue = "SecurityUpdateRequired";

        /// <summary> Supported. </summary>
        public static AgentVersionStatus Supported { get; } = new AgentVersionStatus(SupportedValue);
        /// <summary> NotSupported. </summary>
        public static AgentVersionStatus NotSupported { get; } = new AgentVersionStatus(NotSupportedValue);
        /// <summary> Deprecated. </summary>
        public static AgentVersionStatus Deprecated { get; } = new AgentVersionStatus(DeprecatedValue);
        /// <summary> UpdateRequired. </summary>
        public static AgentVersionStatus UpdateRequired { get; } = new AgentVersionStatus(UpdateRequiredValue);
        /// <summary> SecurityUpdateRequired. </summary>
        public static AgentVersionStatus SecurityUpdateRequired { get; } = new AgentVersionStatus(SecurityUpdateRequiredValue);
        /// <summary> Determines if two <see cref="AgentVersionStatus"/> values are the same. </summary>
        public static bool operator ==(AgentVersionStatus left, AgentVersionStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AgentVersionStatus"/> values are not the same. </summary>
        public static bool operator !=(AgentVersionStatus left, AgentVersionStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AgentVersionStatus"/>. </summary>
        public static implicit operator AgentVersionStatus(string value) => new AgentVersionStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AgentVersionStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AgentVersionStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
