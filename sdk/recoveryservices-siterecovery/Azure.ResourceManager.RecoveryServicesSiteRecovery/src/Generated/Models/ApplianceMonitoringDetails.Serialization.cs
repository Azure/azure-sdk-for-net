// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.RecoveryServicesSiteRecovery.Models
{
    public partial class ApplianceMonitoringDetails : IUtf8JsonSerializable, IJsonModel<ApplianceMonitoringDetails>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<ApplianceMonitoringDetails>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<ApplianceMonitoringDetails>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            if ((options.Format != "W" || ((IPersistableModel<ApplianceMonitoringDetails>)this).GetFormatFromOptions(options) != "J") && options.Format != "J")
            {
                throw new InvalidOperationException($"Must use 'J' format when calling the {nameof(IJsonModel<ApplianceMonitoringDetails>)} interface");
            }

            writer.WriteStartObject();
            if (options.Format == "J")
            {
                if (Optional.IsDefined(CpuDetails))
                {
                    writer.WritePropertyName("cpuDetails"u8);
                    writer.WriteObjectValue(CpuDetails);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(RamDetails))
                {
                    writer.WritePropertyName("ramDetails"u8);
                    writer.WriteObjectValue(RamDetails);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsCollectionDefined(DatastoreSnapshot))
                {
                    writer.WritePropertyName("datastoreSnapshot"u8);
                    writer.WriteStartArray();
                    foreach (var item in DatastoreSnapshot)
                    {
                        writer.WriteObjectValue(item);
                    }
                    writer.WriteEndArray();
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(DisksReplicationDetails))
                {
                    writer.WritePropertyName("disksReplicationDetails"u8);
                    writer.WriteObjectValue(DisksReplicationDetails);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(EsxiNfcBuffer))
                {
                    writer.WritePropertyName("esxiNfcBuffer"u8);
                    writer.WriteObjectValue(EsxiNfcBuffer);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(NetworkBandwidth))
                {
                    writer.WritePropertyName("networkBandwidth"u8);
                    writer.WriteObjectValue(NetworkBandwidth);
                }
            }
            if (_serializedAdditionalRawData != null && options.Format == "J")
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        ApplianceMonitoringDetails IJsonModel<ApplianceMonitoringDetails>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(ApplianceMonitoringDetails)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeApplianceMonitoringDetails(document.RootElement, options);
        }

        internal static ApplianceMonitoringDetails DeserializeApplianceMonitoringDetails(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<ApplianceResourceDetails> cpuDetails = default;
            Optional<ApplianceResourceDetails> ramDetails = default;
            Optional<IReadOnlyList<DataStoreUtilizationDetails>> datastoreSnapshot = default;
            Optional<ApplianceResourceDetails> disksReplicationDetails = default;
            Optional<ApplianceResourceDetails> esxiNfcBuffer = default;
            Optional<ApplianceResourceDetails> networkBandwidth = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("cpuDetails"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    cpuDetails = ApplianceResourceDetails.DeserializeApplianceResourceDetails(property.Value);
                    continue;
                }
                if (property.NameEquals("ramDetails"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    ramDetails = ApplianceResourceDetails.DeserializeApplianceResourceDetails(property.Value);
                    continue;
                }
                if (property.NameEquals("datastoreSnapshot"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<DataStoreUtilizationDetails> array = new List<DataStoreUtilizationDetails>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DataStoreUtilizationDetails.DeserializeDataStoreUtilizationDetails(item));
                    }
                    datastoreSnapshot = array;
                    continue;
                }
                if (property.NameEquals("disksReplicationDetails"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    disksReplicationDetails = ApplianceResourceDetails.DeserializeApplianceResourceDetails(property.Value);
                    continue;
                }
                if (property.NameEquals("esxiNfcBuffer"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    esxiNfcBuffer = ApplianceResourceDetails.DeserializeApplianceResourceDetails(property.Value);
                    continue;
                }
                if (property.NameEquals("networkBandwidth"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    networkBandwidth = ApplianceResourceDetails.DeserializeApplianceResourceDetails(property.Value);
                    continue;
                }
                if (options.Format == "J")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new ApplianceMonitoringDetails(cpuDetails.Value, ramDetails.Value, Optional.ToList(datastoreSnapshot), disksReplicationDetails.Value, esxiNfcBuffer.Value, networkBandwidth.Value, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<ApplianceMonitoringDetails>.Write(ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(ApplianceMonitoringDetails)} does not support '{options.Format}' format.");
            }

            return ModelReaderWriter.Write(this, options);
        }

        ApplianceMonitoringDetails IPersistableModel<ApplianceMonitoringDetails>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(ApplianceMonitoringDetails)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.Parse(data);
            return DeserializeApplianceMonitoringDetails(document.RootElement, options);
        }

        string IPersistableModel<ApplianceMonitoringDetails>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
