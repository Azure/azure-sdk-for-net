// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.RecoveryServicesSiteRecovery.Models
{
    /// <summary> A2A protected managed disk details. </summary>
    public partial class A2AProtectedManagedDiskDetails
    {
        /// <summary> Initializes a new instance of <see cref="A2AProtectedManagedDiskDetails"/>. </summary>
        internal A2AProtectedManagedDiskDetails()
        {
            AllowedDiskLevelOperation = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="A2AProtectedManagedDiskDetails"/>. </summary>
        /// <param name="diskId"> The managed disk Arm id. </param>
        /// <param name="recoveryResourceGroupId"> The recovery disk resource group Arm Id. </param>
        /// <param name="recoveryTargetDiskId"> Recovery target disk Arm Id. </param>
        /// <param name="recoveryReplicaDiskId"> Recovery replica disk Arm Id. </param>
        /// <param name="recoveryOrignalTargetDiskId"> Recovery original target disk Arm Id. </param>
        /// <param name="recoveryReplicaDiskAccountType"> The replica disk type. Its an optional value and will be same as source disk type if not user provided. </param>
        /// <param name="recoveryTargetDiskAccountType"> The target disk type after failover. Its an optional value and will be same as source disk type if not user provided. </param>
        /// <param name="recoveryDiskEncryptionSetId"> The recovery disk encryption set Id. </param>
        /// <param name="primaryDiskEncryptionSetId"> The primary disk encryption set Id. </param>
        /// <param name="diskName"> The disk name. </param>
        /// <param name="diskCapacityInBytes"> The disk capacity in bytes. </param>
        /// <param name="primaryStagingAzureStorageAccountId"> The primary staging storage account. </param>
        /// <param name="diskType"> The type of disk. </param>
        /// <param name="isResyncRequired"> A value indicating whether resync is required for this disk. </param>
        /// <param name="monitoringPercentageCompletion"> The percentage of the monitoring job. The type of the monitoring job is defined by MonitoringJobType property. </param>
        /// <param name="monitoringJobType"> The type of the monitoring job. The progress is contained in MonitoringPercentageCompletion property. </param>
        /// <param name="dataPendingInStagingStorageAccountInMB"> The data pending for replication in MB at staging account. </param>
        /// <param name="dataPendingAtSourceAgentInMB"> The data pending at source virtual machine in MB. </param>
        /// <param name="diskState"> The disk state. </param>
        /// <param name="allowedDiskLevelOperation"> The disk level operations list. </param>
        /// <param name="isDiskEncrypted"> A value indicating whether vm has encrypted os disk or not. </param>
        /// <param name="secretIdentifier"> The secret URL / identifier (BEK). </param>
        /// <param name="dekKeyVaultArmId"> The KeyVault resource id for secret (BEK). </param>
        /// <param name="isDiskKeyEncrypted"> A value indicating whether disk key got encrypted or not. </param>
        /// <param name="keyIdentifier"> The key URL / identifier (KEK). </param>
        /// <param name="kekKeyVaultArmId"> The KeyVault resource id for key (KEK). </param>
        /// <param name="failoverDiskName"> The failover name for the managed disk. </param>
        /// <param name="tfoDiskName"> The test failover name for the managed disk. </param>
        internal A2AProtectedManagedDiskDetails(string diskId, ResourceIdentifier recoveryResourceGroupId, ResourceIdentifier recoveryTargetDiskId, ResourceIdentifier recoveryReplicaDiskId, ResourceIdentifier recoveryOrignalTargetDiskId, string recoveryReplicaDiskAccountType, string recoveryTargetDiskAccountType, ResourceIdentifier recoveryDiskEncryptionSetId, ResourceIdentifier primaryDiskEncryptionSetId, string diskName, long? diskCapacityInBytes, ResourceIdentifier primaryStagingAzureStorageAccountId, string diskType, bool? isResyncRequired, int? monitoringPercentageCompletion, string monitoringJobType, double? dataPendingInStagingStorageAccountInMB, double? dataPendingAtSourceAgentInMB, string diskState, IReadOnlyList<string> allowedDiskLevelOperation, bool? isDiskEncrypted, string secretIdentifier, ResourceIdentifier dekKeyVaultArmId, bool? isDiskKeyEncrypted, string keyIdentifier, ResourceIdentifier kekKeyVaultArmId, string failoverDiskName, string tfoDiskName)
        {
            DiskId = diskId;
            RecoveryResourceGroupId = recoveryResourceGroupId;
            RecoveryTargetDiskId = recoveryTargetDiskId;
            RecoveryReplicaDiskId = recoveryReplicaDiskId;
            RecoveryOrignalTargetDiskId = recoveryOrignalTargetDiskId;
            RecoveryReplicaDiskAccountType = recoveryReplicaDiskAccountType;
            RecoveryTargetDiskAccountType = recoveryTargetDiskAccountType;
            RecoveryDiskEncryptionSetId = recoveryDiskEncryptionSetId;
            PrimaryDiskEncryptionSetId = primaryDiskEncryptionSetId;
            DiskName = diskName;
            DiskCapacityInBytes = diskCapacityInBytes;
            PrimaryStagingAzureStorageAccountId = primaryStagingAzureStorageAccountId;
            DiskType = diskType;
            IsResyncRequired = isResyncRequired;
            MonitoringPercentageCompletion = monitoringPercentageCompletion;
            MonitoringJobType = monitoringJobType;
            DataPendingInStagingStorageAccountInMB = dataPendingInStagingStorageAccountInMB;
            DataPendingAtSourceAgentInMB = dataPendingAtSourceAgentInMB;
            DiskState = diskState;
            AllowedDiskLevelOperation = allowedDiskLevelOperation;
            IsDiskEncrypted = isDiskEncrypted;
            SecretIdentifier = secretIdentifier;
            DekKeyVaultArmId = dekKeyVaultArmId;
            IsDiskKeyEncrypted = isDiskKeyEncrypted;
            KeyIdentifier = keyIdentifier;
            KekKeyVaultArmId = kekKeyVaultArmId;
            FailoverDiskName = failoverDiskName;
            TfoDiskName = tfoDiskName;
        }

        /// <summary> The managed disk Arm id. </summary>
        public string DiskId { get; }
        /// <summary> The recovery disk resource group Arm Id. </summary>
        public ResourceIdentifier RecoveryResourceGroupId { get; }
        /// <summary> Recovery target disk Arm Id. </summary>
        public ResourceIdentifier RecoveryTargetDiskId { get; }
        /// <summary> Recovery replica disk Arm Id. </summary>
        public ResourceIdentifier RecoveryReplicaDiskId { get; }
        /// <summary> Recovery original target disk Arm Id. </summary>
        public ResourceIdentifier RecoveryOrignalTargetDiskId { get; }
        /// <summary> The replica disk type. Its an optional value and will be same as source disk type if not user provided. </summary>
        public string RecoveryReplicaDiskAccountType { get; }
        /// <summary> The target disk type after failover. Its an optional value and will be same as source disk type if not user provided. </summary>
        public string RecoveryTargetDiskAccountType { get; }
        /// <summary> The recovery disk encryption set Id. </summary>
        public ResourceIdentifier RecoveryDiskEncryptionSetId { get; }
        /// <summary> The primary disk encryption set Id. </summary>
        public ResourceIdentifier PrimaryDiskEncryptionSetId { get; }
        /// <summary> The disk name. </summary>
        public string DiskName { get; }
        /// <summary> The disk capacity in bytes. </summary>
        public long? DiskCapacityInBytes { get; }
        /// <summary> The primary staging storage account. </summary>
        public ResourceIdentifier PrimaryStagingAzureStorageAccountId { get; }
        /// <summary> The type of disk. </summary>
        public string DiskType { get; }
        /// <summary> A value indicating whether resync is required for this disk. </summary>
        public bool? IsResyncRequired { get; }
        /// <summary> The percentage of the monitoring job. The type of the monitoring job is defined by MonitoringJobType property. </summary>
        public int? MonitoringPercentageCompletion { get; }
        /// <summary> The type of the monitoring job. The progress is contained in MonitoringPercentageCompletion property. </summary>
        public string MonitoringJobType { get; }
        /// <summary> The data pending for replication in MB at staging account. </summary>
        public double? DataPendingInStagingStorageAccountInMB { get; }
        /// <summary> The data pending at source virtual machine in MB. </summary>
        public double? DataPendingAtSourceAgentInMB { get; }
        /// <summary> The disk state. </summary>
        public string DiskState { get; }
        /// <summary> The disk level operations list. </summary>
        public IReadOnlyList<string> AllowedDiskLevelOperation { get; }
        /// <summary> A value indicating whether vm has encrypted os disk or not. </summary>
        public bool? IsDiskEncrypted { get; }
        /// <summary> The secret URL / identifier (BEK). </summary>
        public string SecretIdentifier { get; }
        /// <summary> The KeyVault resource id for secret (BEK). </summary>
        public ResourceIdentifier DekKeyVaultArmId { get; }
        /// <summary> A value indicating whether disk key got encrypted or not. </summary>
        public bool? IsDiskKeyEncrypted { get; }
        /// <summary> The key URL / identifier (KEK). </summary>
        public string KeyIdentifier { get; }
        /// <summary> The KeyVault resource id for key (KEK). </summary>
        public ResourceIdentifier KekKeyVaultArmId { get; }
        /// <summary> The failover name for the managed disk. </summary>
        public string FailoverDiskName { get; }
        /// <summary> The test failover name for the managed disk. </summary>
        public string TfoDiskName { get; }
    }
}
