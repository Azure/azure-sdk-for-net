// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.RecoveryServicesSiteRecovery.Models
{
    public partial class DiskEncryptionInfo : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IUtf8JsonSerializable)this).Write(writer, new SerializableOptions());

        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer, SerializableOptions options)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(DiskEncryptionKeyInfo))
            {
                writer.WritePropertyName("diskEncryptionKeyInfo"u8);
                writer.WriteObjectValue(DiskEncryptionKeyInfo);
            }
            if (Optional.IsDefined(KeyEncryptionKeyInfo))
            {
                writer.WritePropertyName("keyEncryptionKeyInfo"u8);
                writer.WriteObjectValue(KeyEncryptionKeyInfo);
            }
            writer.WriteEndObject();
        }

        internal static DiskEncryptionInfo DeserializeDiskEncryptionInfo(JsonElement element, SerializableOptions options = default)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<DiskEncryptionKeyInfo> diskEncryptionKeyInfo = default;
            Optional<KeyEncryptionKeyInfo> keyEncryptionKeyInfo = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("diskEncryptionKeyInfo"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    diskEncryptionKeyInfo = DiskEncryptionKeyInfo.DeserializeDiskEncryptionKeyInfo(property.Value);
                    continue;
                }
                if (property.NameEquals("keyEncryptionKeyInfo"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    keyEncryptionKeyInfo = KeyEncryptionKeyInfo.DeserializeKeyEncryptionKeyInfo(property.Value);
                    continue;
                }
            }
            return new DiskEncryptionInfo(diskEncryptionKeyInfo.Value, keyEncryptionKeyInfo.Value);
        }
    }
}
