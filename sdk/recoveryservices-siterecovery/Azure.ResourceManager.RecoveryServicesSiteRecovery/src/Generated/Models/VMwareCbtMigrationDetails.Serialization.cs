// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.RecoveryServicesSiteRecovery.Models
{
    public partial class VMwareCbtMigrationDetails : IUtf8JsonSerializable, IJsonModel<VMwareCbtMigrationDetails>, IPersistableModel<VMwareCbtMigrationDetails>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<VMwareCbtMigrationDetails>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<VMwareCbtMigrationDetails>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<VMwareCbtMigrationDetails>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(VMwareCbtMigrationDetails)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (options.Format != "W" && Optional.IsDefined(VMwareMachineId))
            {
                writer.WritePropertyName("vmwareMachineId"u8);
                writer.WriteStringValue(VMwareMachineId);
            }
            if (options.Format != "W" && Optional.IsDefined(OSType))
            {
                writer.WritePropertyName("osType"u8);
                writer.WriteStringValue(OSType);
            }
            if (options.Format != "W" && Optional.IsDefined(OSName))
            {
                writer.WritePropertyName("osName"u8);
                writer.WriteStringValue(OSName);
            }
            if (options.Format != "W" && Optional.IsDefined(FirmwareType))
            {
                writer.WritePropertyName("firmwareType"u8);
                writer.WriteStringValue(FirmwareType);
            }
            if (options.Format != "W" && Optional.IsDefined(TargetGeneration))
            {
                writer.WritePropertyName("targetGeneration"u8);
                writer.WriteStringValue(TargetGeneration);
            }
            if (Optional.IsDefined(LicenseType))
            {
                writer.WritePropertyName("licenseType"u8);
                writer.WriteStringValue(LicenseType);
            }
            if (Optional.IsDefined(SqlServerLicenseType))
            {
                writer.WritePropertyName("sqlServerLicenseType"u8);
                writer.WriteStringValue(SqlServerLicenseType);
            }
            if (options.Format != "W" && Optional.IsDefined(DataMoverRunAsAccountId))
            {
                writer.WritePropertyName("dataMoverRunAsAccountId"u8);
                writer.WriteStringValue(DataMoverRunAsAccountId);
            }
            if (options.Format != "W" && Optional.IsDefined(SnapshotRunAsAccountId))
            {
                writer.WritePropertyName("snapshotRunAsAccountId"u8);
                writer.WriteStringValue(SnapshotRunAsAccountId);
            }
            if (options.Format != "W" && Optional.IsDefined(StorageAccountId))
            {
                writer.WritePropertyName("storageAccountId"u8);
                writer.WriteStringValue(StorageAccountId);
            }
            if (Optional.IsDefined(TargetVmName))
            {
                writer.WritePropertyName("targetVmName"u8);
                writer.WriteStringValue(TargetVmName);
            }
            if (Optional.IsDefined(TargetVmSize))
            {
                writer.WritePropertyName("targetVmSize"u8);
                writer.WriteStringValue(TargetVmSize);
            }
            if (options.Format != "W" && Optional.IsDefined(TargetLocation))
            {
                writer.WritePropertyName("targetLocation"u8);
                writer.WriteStringValue(TargetLocation);
            }
            if (Optional.IsDefined(TargetResourceGroupId))
            {
                writer.WritePropertyName("targetResourceGroupId"u8);
                writer.WriteStringValue(TargetResourceGroupId);
            }
            if (Optional.IsDefined(TargetAvailabilitySetId))
            {
                writer.WritePropertyName("targetAvailabilitySetId"u8);
                writer.WriteStringValue(TargetAvailabilitySetId);
            }
            if (Optional.IsDefined(TargetAvailabilityZone))
            {
                writer.WritePropertyName("targetAvailabilityZone"u8);
                writer.WriteStringValue(TargetAvailabilityZone);
            }
            if (Optional.IsDefined(TargetProximityPlacementGroupId))
            {
                writer.WritePropertyName("targetProximityPlacementGroupId"u8);
                writer.WriteStringValue(TargetProximityPlacementGroupId);
            }
            if (Optional.IsDefined(ConfidentialVmKeyVaultId))
            {
                writer.WritePropertyName("confidentialVmKeyVaultId"u8);
                writer.WriteStringValue(ConfidentialVmKeyVaultId);
            }
            if (Optional.IsDefined(TargetVmSecurityProfile))
            {
                writer.WritePropertyName("targetVmSecurityProfile"u8);
                writer.WriteObjectValue(TargetVmSecurityProfile);
            }
            if (Optional.IsDefined(TargetBootDiagnosticsStorageAccountId))
            {
                writer.WritePropertyName("targetBootDiagnosticsStorageAccountId"u8);
                writer.WriteStringValue(TargetBootDiagnosticsStorageAccountId);
            }
            if (Optional.IsCollectionDefined(TargetVmTags))
            {
                writer.WritePropertyName("targetVmTags"u8);
                writer.WriteStartObject();
                foreach (var item in TargetVmTags)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsCollectionDefined(ProtectedDisks))
            {
                writer.WritePropertyName("protectedDisks"u8);
                writer.WriteStartArray();
                foreach (var item in ProtectedDisks)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(TargetNetworkId))
            {
                writer.WritePropertyName("targetNetworkId"u8);
                writer.WriteStringValue(TargetNetworkId);
            }
            if (Optional.IsDefined(TestNetworkId))
            {
                writer.WritePropertyName("testNetworkId"u8);
                writer.WriteStringValue(TestNetworkId);
            }
            if (Optional.IsCollectionDefined(VmNics))
            {
                writer.WritePropertyName("vmNics"u8);
                writer.WriteStartArray();
                foreach (var item in VmNics)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(TargetNicTags))
            {
                writer.WritePropertyName("targetNicTags"u8);
                writer.WriteStartObject();
                foreach (var item in TargetNicTags)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (options.Format != "W" && Optional.IsDefined(MigrationRecoveryPointId))
            {
                writer.WritePropertyName("migrationRecoveryPointId"u8);
                writer.WriteStringValue(MigrationRecoveryPointId);
            }
            if (options.Format != "W" && Optional.IsDefined(LastRecoveryPointReceived))
            {
                writer.WritePropertyName("lastRecoveryPointReceived"u8);
                writer.WriteStringValue(LastRecoveryPointReceived.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(LastRecoveryPointId))
            {
                writer.WritePropertyName("lastRecoveryPointId"u8);
                writer.WriteStringValue(LastRecoveryPointId);
            }
            if (options.Format != "W" && Optional.IsDefined(InitialSeedingProgressPercentage))
            {
                writer.WritePropertyName("initialSeedingProgressPercentage"u8);
                writer.WriteNumberValue(InitialSeedingProgressPercentage.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(MigrationProgressPercentage))
            {
                writer.WritePropertyName("migrationProgressPercentage"u8);
                writer.WriteNumberValue(MigrationProgressPercentage.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(ResyncProgressPercentage))
            {
                writer.WritePropertyName("resyncProgressPercentage"u8);
                writer.WriteNumberValue(ResyncProgressPercentage.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(ResumeProgressPercentage))
            {
                writer.WritePropertyName("resumeProgressPercentage"u8);
                writer.WriteNumberValue(ResumeProgressPercentage.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(DeltaSyncProgressPercentage))
            {
                writer.WritePropertyName("deltaSyncProgressPercentage"u8);
                writer.WriteNumberValue(DeltaSyncProgressPercentage.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(IsCheckSumResyncCycle))
            {
                writer.WritePropertyName("isCheckSumResyncCycle"u8);
                writer.WriteStringValue(IsCheckSumResyncCycle);
            }
            if (options.Format != "W" && Optional.IsDefined(InitialSeedingRetryCount))
            {
                writer.WritePropertyName("initialSeedingRetryCount"u8);
                writer.WriteNumberValue(InitialSeedingRetryCount.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(ResyncRetryCount))
            {
                writer.WritePropertyName("resyncRetryCount"u8);
                writer.WriteNumberValue(ResyncRetryCount.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(ResumeRetryCount))
            {
                writer.WritePropertyName("resumeRetryCount"u8);
                writer.WriteNumberValue(ResumeRetryCount.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(DeltaSyncRetryCount))
            {
                writer.WritePropertyName("deltaSyncRetryCount"u8);
                writer.WriteNumberValue(DeltaSyncRetryCount.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(ResyncRequired))
            {
                writer.WritePropertyName("resyncRequired"u8);
                writer.WriteStringValue(ResyncRequired);
            }
            if (options.Format != "W" && Optional.IsDefined(ResyncState))
            {
                writer.WritePropertyName("resyncState"u8);
                writer.WriteStringValue(ResyncState.Value.ToString());
            }
            if (Optional.IsDefined(PerformAutoResync))
            {
                writer.WritePropertyName("performAutoResync"u8);
                writer.WriteStringValue(PerformAutoResync);
            }
            if (Optional.IsCollectionDefined(SeedDiskTags))
            {
                writer.WritePropertyName("seedDiskTags"u8);
                writer.WriteStartObject();
                foreach (var item in SeedDiskTags)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsCollectionDefined(TargetDiskTags))
            {
                writer.WritePropertyName("targetDiskTags"u8);
                writer.WriteStartObject();
                foreach (var item in TargetDiskTags)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            if (Optional.IsCollectionDefined(SupportedOSVersions))
            {
                writer.WritePropertyName("supportedOSVersions"u8);
                writer.WriteStartArray();
                foreach (var item in SupportedOSVersions)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsDefined(ApplianceMonitoringDetails))
            {
                writer.WritePropertyName("applianceMonitoringDetails"u8);
                writer.WriteObjectValue(ApplianceMonitoringDetails);
            }
            if (options.Format != "W" && Optional.IsDefined(GatewayOperationDetails))
            {
                writer.WritePropertyName("gatewayOperationDetails"u8);
                writer.WriteObjectValue(GatewayOperationDetails);
            }
            if (options.Format != "W" && Optional.IsDefined(OperationName))
            {
                writer.WritePropertyName("operationName"u8);
                writer.WriteStringValue(OperationName);
            }
            writer.WritePropertyName("instanceType"u8);
            writer.WriteStringValue(InstanceType);
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        VMwareCbtMigrationDetails IJsonModel<VMwareCbtMigrationDetails>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<VMwareCbtMigrationDetails>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(VMwareCbtMigrationDetails)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeVMwareCbtMigrationDetails(document.RootElement, options);
        }

        internal static VMwareCbtMigrationDetails DeserializeVMwareCbtMigrationDetails(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<ResourceIdentifier> vmwareMachineId = default;
            Optional<string> osType = default;
            Optional<string> osName = default;
            Optional<string> firmwareType = default;
            Optional<string> targetGeneration = default;
            Optional<string> licenseType = default;
            Optional<string> sqlServerLicenseType = default;
            Optional<ResourceIdentifier> dataMoverRunAsAccountId = default;
            Optional<ResourceIdentifier> snapshotRunAsAccountId = default;
            Optional<ResourceIdentifier> storageAccountId = default;
            Optional<string> targetVmName = default;
            Optional<string> targetVmSize = default;
            Optional<string> targetLocation = default;
            Optional<ResourceIdentifier> targetResourceGroupId = default;
            Optional<ResourceIdentifier> targetAvailabilitySetId = default;
            Optional<string> targetAvailabilityZone = default;
            Optional<ResourceIdentifier> targetProximityPlacementGroupId = default;
            Optional<ResourceIdentifier> confidentialVmKeyVaultId = default;
            Optional<VMwareCbtSecurityProfileProperties> targetVmSecurityProfile = default;
            Optional<ResourceIdentifier> targetBootDiagnosticsStorageAccountId = default;
            Optional<IReadOnlyDictionary<string, string>> targetVmTags = default;
            Optional<IReadOnlyList<VMwareCbtProtectedDiskDetails>> protectedDisks = default;
            Optional<ResourceIdentifier> targetNetworkId = default;
            Optional<ResourceIdentifier> testNetworkId = default;
            Optional<IReadOnlyList<VMwareCbtNicDetails>> vmNics = default;
            Optional<IReadOnlyDictionary<string, string>> targetNicTags = default;
            Optional<ResourceIdentifier> migrationRecoveryPointId = default;
            Optional<DateTimeOffset> lastRecoveryPointReceived = default;
            Optional<ResourceIdentifier> lastRecoveryPointId = default;
            Optional<int> initialSeedingProgressPercentage = default;
            Optional<int> migrationProgressPercentage = default;
            Optional<int> resyncProgressPercentage = default;
            Optional<int> resumeProgressPercentage = default;
            Optional<int> deltaSyncProgressPercentage = default;
            Optional<string> isCheckSumResyncCycle = default;
            Optional<long> initialSeedingRetryCount = default;
            Optional<long> resyncRetryCount = default;
            Optional<long> resumeRetryCount = default;
            Optional<long> deltaSyncRetryCount = default;
            Optional<string> resyncRequired = default;
            Optional<SiteRecoveryResyncState> resyncState = default;
            Optional<string> performAutoResync = default;
            Optional<IReadOnlyDictionary<string, string>> seedDiskTags = default;
            Optional<IReadOnlyDictionary<string, string>> targetDiskTags = default;
            Optional<IReadOnlyList<string>> supportedOSVersions = default;
            Optional<ApplianceMonitoringDetails> applianceMonitoringDetails = default;
            Optional<GatewayOperationDetails> gatewayOperationDetails = default;
            Optional<string> operationName = default;
            string instanceType = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("vmwareMachineId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    vmwareMachineId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("osType"u8))
                {
                    osType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("osName"u8))
                {
                    osName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("firmwareType"u8))
                {
                    firmwareType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("targetGeneration"u8))
                {
                    targetGeneration = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("licenseType"u8))
                {
                    licenseType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sqlServerLicenseType"u8))
                {
                    sqlServerLicenseType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("dataMoverRunAsAccountId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dataMoverRunAsAccountId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("snapshotRunAsAccountId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    snapshotRunAsAccountId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("storageAccountId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    storageAccountId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("targetVmName"u8))
                {
                    targetVmName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("targetVmSize"u8))
                {
                    targetVmSize = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("targetLocation"u8))
                {
                    targetLocation = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("targetResourceGroupId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    targetResourceGroupId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("targetAvailabilitySetId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    targetAvailabilitySetId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("targetAvailabilityZone"u8))
                {
                    targetAvailabilityZone = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("targetProximityPlacementGroupId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    targetProximityPlacementGroupId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("confidentialVmKeyVaultId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    confidentialVmKeyVaultId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("targetVmSecurityProfile"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    targetVmSecurityProfile = VMwareCbtSecurityProfileProperties.DeserializeVMwareCbtSecurityProfileProperties(property.Value);
                    continue;
                }
                if (property.NameEquals("targetBootDiagnosticsStorageAccountId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    targetBootDiagnosticsStorageAccountId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("targetVmTags"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    targetVmTags = dictionary;
                    continue;
                }
                if (property.NameEquals("protectedDisks"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<VMwareCbtProtectedDiskDetails> array = new List<VMwareCbtProtectedDiskDetails>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(VMwareCbtProtectedDiskDetails.DeserializeVMwareCbtProtectedDiskDetails(item));
                    }
                    protectedDisks = array;
                    continue;
                }
                if (property.NameEquals("targetNetworkId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    targetNetworkId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("testNetworkId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    testNetworkId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("vmNics"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<VMwareCbtNicDetails> array = new List<VMwareCbtNicDetails>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(VMwareCbtNicDetails.DeserializeVMwareCbtNicDetails(item));
                    }
                    vmNics = array;
                    continue;
                }
                if (property.NameEquals("targetNicTags"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    targetNicTags = dictionary;
                    continue;
                }
                if (property.NameEquals("migrationRecoveryPointId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    migrationRecoveryPointId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("lastRecoveryPointReceived"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastRecoveryPointReceived = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("lastRecoveryPointId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastRecoveryPointId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("initialSeedingProgressPercentage"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    initialSeedingProgressPercentage = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("migrationProgressPercentage"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    migrationProgressPercentage = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("resyncProgressPercentage"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    resyncProgressPercentage = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("resumeProgressPercentage"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    resumeProgressPercentage = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("deltaSyncProgressPercentage"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    deltaSyncProgressPercentage = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("isCheckSumResyncCycle"u8))
                {
                    isCheckSumResyncCycle = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("initialSeedingRetryCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    initialSeedingRetryCount = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("resyncRetryCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    resyncRetryCount = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("resumeRetryCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    resumeRetryCount = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("deltaSyncRetryCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    deltaSyncRetryCount = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("resyncRequired"u8))
                {
                    resyncRequired = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("resyncState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    resyncState = new SiteRecoveryResyncState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("performAutoResync"u8))
                {
                    performAutoResync = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("seedDiskTags"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    seedDiskTags = dictionary;
                    continue;
                }
                if (property.NameEquals("targetDiskTags"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    targetDiskTags = dictionary;
                    continue;
                }
                if (property.NameEquals("supportedOSVersions"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    supportedOSVersions = array;
                    continue;
                }
                if (property.NameEquals("applianceMonitoringDetails"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    applianceMonitoringDetails = ApplianceMonitoringDetails.DeserializeApplianceMonitoringDetails(property.Value);
                    continue;
                }
                if (property.NameEquals("gatewayOperationDetails"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    gatewayOperationDetails = GatewayOperationDetails.DeserializeGatewayOperationDetails(property.Value);
                    continue;
                }
                if (property.NameEquals("operationName"u8))
                {
                    operationName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("instanceType"u8))
                {
                    instanceType = property.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new VMwareCbtMigrationDetails(instanceType, serializedAdditionalRawData, vmwareMachineId.Value, osType.Value, osName.Value, firmwareType.Value, targetGeneration.Value, licenseType.Value, sqlServerLicenseType.Value, dataMoverRunAsAccountId.Value, snapshotRunAsAccountId.Value, storageAccountId.Value, targetVmName.Value, targetVmSize.Value, targetLocation.Value, targetResourceGroupId.Value, targetAvailabilitySetId.Value, targetAvailabilityZone.Value, targetProximityPlacementGroupId.Value, confidentialVmKeyVaultId.Value, targetVmSecurityProfile.Value, targetBootDiagnosticsStorageAccountId.Value, Optional.ToDictionary(targetVmTags), Optional.ToList(protectedDisks), targetNetworkId.Value, testNetworkId.Value, Optional.ToList(vmNics), Optional.ToDictionary(targetNicTags), migrationRecoveryPointId.Value, Optional.ToNullable(lastRecoveryPointReceived), lastRecoveryPointId.Value, Optional.ToNullable(initialSeedingProgressPercentage), Optional.ToNullable(migrationProgressPercentage), Optional.ToNullable(resyncProgressPercentage), Optional.ToNullable(resumeProgressPercentage), Optional.ToNullable(deltaSyncProgressPercentage), isCheckSumResyncCycle.Value, Optional.ToNullable(initialSeedingRetryCount), Optional.ToNullable(resyncRetryCount), Optional.ToNullable(resumeRetryCount), Optional.ToNullable(deltaSyncRetryCount), resyncRequired.Value, Optional.ToNullable(resyncState), performAutoResync.Value, Optional.ToDictionary(seedDiskTags), Optional.ToDictionary(targetDiskTags), Optional.ToList(supportedOSVersions), applianceMonitoringDetails.Value, gatewayOperationDetails.Value, operationName.Value);
        }

        private BinaryData SerializeBicep(ModelReaderWriterOptions options)
        {
            StringBuilder builder = new StringBuilder();
            builder.AppendLine("{");

            if (Optional.IsDefined(VMwareMachineId))
            {
                builder.Append("  vmwareMachineId:");
                builder.AppendLine($" '{VMwareMachineId.ToString()}'");
            }

            if (Optional.IsDefined(OSType))
            {
                builder.Append("  osType:");
                builder.AppendLine($" '{OSType}'");
            }

            if (Optional.IsDefined(OSName))
            {
                builder.Append("  osName:");
                builder.AppendLine($" '{OSName}'");
            }

            if (Optional.IsDefined(FirmwareType))
            {
                builder.Append("  firmwareType:");
                builder.AppendLine($" '{FirmwareType}'");
            }

            if (Optional.IsDefined(TargetGeneration))
            {
                builder.Append("  targetGeneration:");
                builder.AppendLine($" '{TargetGeneration}'");
            }

            if (Optional.IsDefined(LicenseType))
            {
                builder.Append("  licenseType:");
                builder.AppendLine($" '{LicenseType}'");
            }

            if (Optional.IsDefined(SqlServerLicenseType))
            {
                builder.Append("  sqlServerLicenseType:");
                builder.AppendLine($" '{SqlServerLicenseType}'");
            }

            if (Optional.IsDefined(DataMoverRunAsAccountId))
            {
                builder.Append("  dataMoverRunAsAccountId:");
                builder.AppendLine($" '{DataMoverRunAsAccountId.ToString()}'");
            }

            if (Optional.IsDefined(SnapshotRunAsAccountId))
            {
                builder.Append("  snapshotRunAsAccountId:");
                builder.AppendLine($" '{SnapshotRunAsAccountId.ToString()}'");
            }

            if (Optional.IsDefined(StorageAccountId))
            {
                builder.Append("  storageAccountId:");
                builder.AppendLine($" '{StorageAccountId.ToString()}'");
            }

            if (Optional.IsDefined(TargetVmName))
            {
                builder.Append("  targetVmName:");
                builder.AppendLine($" '{TargetVmName}'");
            }

            if (Optional.IsDefined(TargetVmSize))
            {
                builder.Append("  targetVmSize:");
                builder.AppendLine($" '{TargetVmSize}'");
            }

            if (Optional.IsDefined(TargetLocation))
            {
                builder.Append("  targetLocation:");
                builder.AppendLine($" '{TargetLocation}'");
            }

            if (Optional.IsDefined(TargetResourceGroupId))
            {
                builder.Append("  targetResourceGroupId:");
                builder.AppendLine($" '{TargetResourceGroupId.ToString()}'");
            }

            if (Optional.IsDefined(TargetAvailabilitySetId))
            {
                builder.Append("  targetAvailabilitySetId:");
                builder.AppendLine($" '{TargetAvailabilitySetId.ToString()}'");
            }

            if (Optional.IsDefined(TargetAvailabilityZone))
            {
                builder.Append("  targetAvailabilityZone:");
                builder.AppendLine($" '{TargetAvailabilityZone}'");
            }

            if (Optional.IsDefined(TargetProximityPlacementGroupId))
            {
                builder.Append("  targetProximityPlacementGroupId:");
                builder.AppendLine($" '{TargetProximityPlacementGroupId.ToString()}'");
            }

            if (Optional.IsDefined(ConfidentialVmKeyVaultId))
            {
                builder.Append("  confidentialVmKeyVaultId:");
                builder.AppendLine($" '{ConfidentialVmKeyVaultId.ToString()}'");
            }

            if (Optional.IsDefined(TargetVmSecurityProfile))
            {
                builder.Append("  targetVmSecurityProfile:");
                AppendChildObject(builder, TargetVmSecurityProfile, options, 2);
            }

            if (Optional.IsDefined(TargetBootDiagnosticsStorageAccountId))
            {
                builder.Append("  targetBootDiagnosticsStorageAccountId:");
                builder.AppendLine($" '{TargetBootDiagnosticsStorageAccountId.ToString()}'");
            }

            if (Optional.IsCollectionDefined(TargetVmTags))
            {
                builder.Append("  targetVmTags:");
                builder.AppendLine(" {");
                foreach (var item in TargetVmTags)
                {
                    builder.Append($"    {item.Key}: ");
                    if (item.Value == null)
                    {
                        builder.Append("null");
                        continue;
                    }
                    builder.AppendLine($" '{item.Value}'");
                }
                builder.AppendLine("  }");
            }

            if (Optional.IsCollectionDefined(ProtectedDisks))
            {
                builder.Append("  protectedDisks:");
                builder.AppendLine(" [");
                foreach (var item in ProtectedDisks)
                {
                    AppendChildObject(builder, item, options, 4);
                }
                builder.AppendLine("  ]");
            }

            if (Optional.IsDefined(TargetNetworkId))
            {
                builder.Append("  targetNetworkId:");
                builder.AppendLine($" '{TargetNetworkId.ToString()}'");
            }

            if (Optional.IsDefined(TestNetworkId))
            {
                builder.Append("  testNetworkId:");
                builder.AppendLine($" '{TestNetworkId.ToString()}'");
            }

            if (Optional.IsCollectionDefined(VmNics))
            {
                builder.Append("  vmNics:");
                builder.AppendLine(" [");
                foreach (var item in VmNics)
                {
                    AppendChildObject(builder, item, options, 4);
                }
                builder.AppendLine("  ]");
            }

            if (Optional.IsCollectionDefined(TargetNicTags))
            {
                builder.Append("  targetNicTags:");
                builder.AppendLine(" {");
                foreach (var item in TargetNicTags)
                {
                    builder.Append($"    {item.Key}: ");
                    if (item.Value == null)
                    {
                        builder.Append("null");
                        continue;
                    }
                    builder.AppendLine($" '{item.Value}'");
                }
                builder.AppendLine("  }");
            }

            if (Optional.IsDefined(MigrationRecoveryPointId))
            {
                builder.Append("  migrationRecoveryPointId:");
                builder.AppendLine($" '{MigrationRecoveryPointId.ToString()}'");
            }

            if (Optional.IsDefined(LastRecoveryPointReceived))
            {
                builder.Append("  lastRecoveryPointReceived:");
                builder.AppendLine($" '{LastRecoveryPointReceived.Value.ToString()}'");
            }

            if (Optional.IsDefined(LastRecoveryPointId))
            {
                builder.Append("  lastRecoveryPointId:");
                builder.AppendLine($" '{LastRecoveryPointId.ToString()}'");
            }

            if (Optional.IsDefined(InitialSeedingProgressPercentage))
            {
                builder.Append("  initialSeedingProgressPercentage:");
                builder.AppendLine($" '{InitialSeedingProgressPercentage.Value.ToString()}'");
            }

            if (Optional.IsDefined(MigrationProgressPercentage))
            {
                builder.Append("  migrationProgressPercentage:");
                builder.AppendLine($" '{MigrationProgressPercentage.Value.ToString()}'");
            }

            if (Optional.IsDefined(ResyncProgressPercentage))
            {
                builder.Append("  resyncProgressPercentage:");
                builder.AppendLine($" '{ResyncProgressPercentage.Value.ToString()}'");
            }

            if (Optional.IsDefined(ResumeProgressPercentage))
            {
                builder.Append("  resumeProgressPercentage:");
                builder.AppendLine($" '{ResumeProgressPercentage.Value.ToString()}'");
            }

            if (Optional.IsDefined(DeltaSyncProgressPercentage))
            {
                builder.Append("  deltaSyncProgressPercentage:");
                builder.AppendLine($" '{DeltaSyncProgressPercentage.Value.ToString()}'");
            }

            if (Optional.IsDefined(IsCheckSumResyncCycle))
            {
                builder.Append("  isCheckSumResyncCycle:");
                builder.AppendLine($" '{IsCheckSumResyncCycle}'");
            }

            if (Optional.IsDefined(InitialSeedingRetryCount))
            {
                builder.Append("  initialSeedingRetryCount:");
                builder.AppendLine($" '{InitialSeedingRetryCount.Value.ToString()}'");
            }

            if (Optional.IsDefined(ResyncRetryCount))
            {
                builder.Append("  resyncRetryCount:");
                builder.AppendLine($" '{ResyncRetryCount.Value.ToString()}'");
            }

            if (Optional.IsDefined(ResumeRetryCount))
            {
                builder.Append("  resumeRetryCount:");
                builder.AppendLine($" '{ResumeRetryCount.Value.ToString()}'");
            }

            if (Optional.IsDefined(DeltaSyncRetryCount))
            {
                builder.Append("  deltaSyncRetryCount:");
                builder.AppendLine($" '{DeltaSyncRetryCount.Value.ToString()}'");
            }

            if (Optional.IsDefined(ResyncRequired))
            {
                builder.Append("  resyncRequired:");
                builder.AppendLine($" '{ResyncRequired}'");
            }

            if (Optional.IsDefined(ResyncState))
            {
                builder.Append("  resyncState:");
                builder.AppendLine($" '{ResyncState.ToString()}'");
            }

            if (Optional.IsDefined(PerformAutoResync))
            {
                builder.Append("  performAutoResync:");
                builder.AppendLine($" '{PerformAutoResync}'");
            }

            if (Optional.IsCollectionDefined(SeedDiskTags))
            {
                builder.Append("  seedDiskTags:");
                builder.AppendLine(" {");
                foreach (var item in SeedDiskTags)
                {
                    builder.Append($"    {item.Key}: ");
                    if (item.Value == null)
                    {
                        builder.Append("null");
                        continue;
                    }
                    builder.AppendLine($" '{item.Value}'");
                }
                builder.AppendLine("  }");
            }

            if (Optional.IsCollectionDefined(TargetDiskTags))
            {
                builder.Append("  targetDiskTags:");
                builder.AppendLine(" {");
                foreach (var item in TargetDiskTags)
                {
                    builder.Append($"    {item.Key}: ");
                    if (item.Value == null)
                    {
                        builder.Append("null");
                        continue;
                    }
                    builder.AppendLine($" '{item.Value}'");
                }
                builder.AppendLine("  }");
            }

            if (Optional.IsCollectionDefined(SupportedOSVersions))
            {
                builder.Append("  supportedOSVersions:");
                builder.AppendLine(" [");
                foreach (var item in SupportedOSVersions)
                {
                    if (item == null)
                    {
                        builder.Append("null");
                        continue;
                    }
                    builder.AppendLine($"    '{item}'");
                }
                builder.AppendLine("  ]");
            }

            if (Optional.IsDefined(ApplianceMonitoringDetails))
            {
                builder.Append("  applianceMonitoringDetails:");
                AppendChildObject(builder, ApplianceMonitoringDetails, options, 2);
            }

            if (Optional.IsDefined(GatewayOperationDetails))
            {
                builder.Append("  gatewayOperationDetails:");
                AppendChildObject(builder, GatewayOperationDetails, options, 2);
            }

            if (Optional.IsDefined(OperationName))
            {
                builder.Append("  operationName:");
                builder.AppendLine($" '{OperationName}'");
            }

            if (Optional.IsDefined(InstanceType))
            {
                builder.Append("  instanceType:");
                builder.AppendLine($" '{InstanceType}'");
            }

            builder.AppendLine("}");
            return BinaryData.FromString(builder.ToString());
        }

        private void AppendChildObject(StringBuilder stringBuilder, object childObject, ModelReaderWriterOptions options, int spaces)
        {
            string indent = new string(' ', spaces);
            BinaryData data = ModelReaderWriter.Write(childObject, options);
            string[] lines = data.ToString().Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries);
            foreach (var line in lines)
            {
                stringBuilder.AppendLine($"{indent}{line}");
            }
        }

        BinaryData IPersistableModel<VMwareCbtMigrationDetails>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<VMwareCbtMigrationDetails>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                case "B":
                    return SerializeBicep(options);
                default:
                    throw new FormatException($"The model {nameof(VMwareCbtMigrationDetails)} does not support '{options.Format}' format.");
            }
        }

        VMwareCbtMigrationDetails IPersistableModel<VMwareCbtMigrationDetails>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<VMwareCbtMigrationDetails>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeVMwareCbtMigrationDetails(document.RootElement, options);
                    }
                case "B":
                    throw new InvalidOperationException("Bicep deserialization is not supported for this type.");
                default:
                    throw new FormatException($"The model {nameof(VMwareCbtMigrationDetails)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<VMwareCbtMigrationDetails>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
