// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Net;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.RecoveryServicesSiteRecovery.Models
{
    public partial class VMwareDetails : IUtf8JsonSerializable, IJsonModel<VMwareDetails>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<VMwareDetails>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<VMwareDetails>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<VMwareDetails>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(VMwareDetails)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(ProcessServers))
            {
                writer.WritePropertyName("processServers"u8);
                writer.WriteStartArray();
                foreach (var item in ProcessServers)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(MasterTargetServers))
            {
                writer.WritePropertyName("masterTargetServers"u8);
                writer.WriteStartArray();
                foreach (var item in MasterTargetServers)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(RunAsAccounts))
            {
                writer.WritePropertyName("runAsAccounts"u8);
                writer.WriteStartArray();
                foreach (var item in RunAsAccounts)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(ReplicationPairCount))
            {
                writer.WritePropertyName("replicationPairCount"u8);
                writer.WriteStringValue(ReplicationPairCount);
            }
            if (Optional.IsDefined(ProcessServerCount))
            {
                writer.WritePropertyName("processServerCount"u8);
                writer.WriteStringValue(ProcessServerCount);
            }
            if (Optional.IsDefined(AgentCount))
            {
                writer.WritePropertyName("agentCount"u8);
                writer.WriteStringValue(AgentCount);
            }
            if (Optional.IsDefined(ProtectedServers))
            {
                writer.WritePropertyName("protectedServers"u8);
                writer.WriteStringValue(ProtectedServers);
            }
            if (Optional.IsDefined(SystemLoad))
            {
                writer.WritePropertyName("systemLoad"u8);
                writer.WriteStringValue(SystemLoad);
            }
            if (Optional.IsDefined(SystemLoadStatus))
            {
                writer.WritePropertyName("systemLoadStatus"u8);
                writer.WriteStringValue(SystemLoadStatus);
            }
            if (Optional.IsDefined(CpuLoad))
            {
                writer.WritePropertyName("cpuLoad"u8);
                writer.WriteStringValue(CpuLoad);
            }
            if (Optional.IsDefined(CpuLoadStatus))
            {
                writer.WritePropertyName("cpuLoadStatus"u8);
                writer.WriteStringValue(CpuLoadStatus);
            }
            if (Optional.IsDefined(TotalMemoryInBytes))
            {
                writer.WritePropertyName("totalMemoryInBytes"u8);
                writer.WriteNumberValue(TotalMemoryInBytes.Value);
            }
            if (Optional.IsDefined(AvailableMemoryInBytes))
            {
                writer.WritePropertyName("availableMemoryInBytes"u8);
                writer.WriteNumberValue(AvailableMemoryInBytes.Value);
            }
            if (Optional.IsDefined(MemoryUsageStatus))
            {
                writer.WritePropertyName("memoryUsageStatus"u8);
                writer.WriteStringValue(MemoryUsageStatus);
            }
            if (Optional.IsDefined(TotalSpaceInBytes))
            {
                writer.WritePropertyName("totalSpaceInBytes"u8);
                writer.WriteNumberValue(TotalSpaceInBytes.Value);
            }
            if (Optional.IsDefined(AvailableSpaceInBytes))
            {
                writer.WritePropertyName("availableSpaceInBytes"u8);
                writer.WriteNumberValue(AvailableSpaceInBytes.Value);
            }
            if (Optional.IsDefined(SpaceUsageStatus))
            {
                writer.WritePropertyName("spaceUsageStatus"u8);
                writer.WriteStringValue(SpaceUsageStatus);
            }
            if (Optional.IsDefined(WebLoad))
            {
                writer.WritePropertyName("webLoad"u8);
                writer.WriteStringValue(WebLoad);
            }
            if (Optional.IsDefined(WebLoadStatus))
            {
                writer.WritePropertyName("webLoadStatus"u8);
                writer.WriteStringValue(WebLoadStatus);
            }
            if (Optional.IsDefined(DatabaseServerLoad))
            {
                writer.WritePropertyName("databaseServerLoad"u8);
                writer.WriteStringValue(DatabaseServerLoad);
            }
            if (Optional.IsDefined(DatabaseServerLoadStatus))
            {
                writer.WritePropertyName("databaseServerLoadStatus"u8);
                writer.WriteStringValue(DatabaseServerLoadStatus);
            }
            if (Optional.IsDefined(CsServiceStatus))
            {
                writer.WritePropertyName("csServiceStatus"u8);
                writer.WriteStringValue(CsServiceStatus);
            }
            if (Optional.IsDefined(IPAddress))
            {
                writer.WritePropertyName("ipAddress"u8);
                writer.WriteStringValue(IPAddress.ToString());
            }
            if (Optional.IsDefined(AgentVersion))
            {
                writer.WritePropertyName("agentVersion"u8);
                writer.WriteStringValue(AgentVersion);
            }
            if (Optional.IsDefined(HostName))
            {
                writer.WritePropertyName("hostName"u8);
                writer.WriteStringValue(HostName);
            }
            if (Optional.IsDefined(LastHeartbeat))
            {
                writer.WritePropertyName("lastHeartbeat"u8);
                writer.WriteStringValue(LastHeartbeat.Value, "O");
            }
            if (Optional.IsDefined(VersionStatus))
            {
                writer.WritePropertyName("versionStatus"u8);
                writer.WriteStringValue(VersionStatus);
            }
            if (Optional.IsDefined(SslCertExpireOn))
            {
                writer.WritePropertyName("sslCertExpiryDate"u8);
                writer.WriteStringValue(SslCertExpireOn.Value, "O");
            }
            if (Optional.IsDefined(SslCertExpiryRemainingDays))
            {
                writer.WritePropertyName("sslCertExpiryRemainingDays"u8);
                writer.WriteNumberValue(SslCertExpiryRemainingDays.Value);
            }
            if (Optional.IsDefined(PSTemplateVersion))
            {
                writer.WritePropertyName("psTemplateVersion"u8);
                writer.WriteStringValue(PSTemplateVersion);
            }
            if (Optional.IsDefined(AgentExpireOn))
            {
                writer.WritePropertyName("agentExpiryDate"u8);
                writer.WriteStringValue(AgentExpireOn.Value, "O");
            }
            if (Optional.IsDefined(AgentVersionDetails))
            {
                writer.WritePropertyName("agentVersionDetails"u8);
                writer.WriteObjectValue(AgentVersionDetails);
            }
            if (Optional.IsCollectionDefined(SwitchProviderBlockingErrorDetails))
            {
                writer.WritePropertyName("switchProviderBlockingErrorDetails"u8);
                writer.WriteStartArray();
                foreach (var item in SwitchProviderBlockingErrorDetails)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WritePropertyName("instanceType"u8);
            writer.WriteStringValue(InstanceType);
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        VMwareDetails IJsonModel<VMwareDetails>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<VMwareDetails>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(VMwareDetails)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeVMwareDetails(document.RootElement, options);
        }

        internal static VMwareDetails DeserializeVMwareDetails(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<IReadOnlyList<SiteRecoveryProcessServer>> processServers = default;
            Optional<IReadOnlyList<MasterTargetServer>> masterTargetServers = default;
            Optional<IReadOnlyList<SiteRecoveryRunAsAccount>> runAsAccounts = default;
            Optional<string> replicationPairCount = default;
            Optional<string> processServerCount = default;
            Optional<string> agentCount = default;
            Optional<string> protectedServers = default;
            Optional<string> systemLoad = default;
            Optional<string> systemLoadStatus = default;
            Optional<string> cpuLoad = default;
            Optional<string> cpuLoadStatus = default;
            Optional<long> totalMemoryInBytes = default;
            Optional<long> availableMemoryInBytes = default;
            Optional<string> memoryUsageStatus = default;
            Optional<long> totalSpaceInBytes = default;
            Optional<long> availableSpaceInBytes = default;
            Optional<string> spaceUsageStatus = default;
            Optional<string> webLoad = default;
            Optional<string> webLoadStatus = default;
            Optional<string> databaseServerLoad = default;
            Optional<string> databaseServerLoadStatus = default;
            Optional<string> csServiceStatus = default;
            Optional<IPAddress> ipAddress = default;
            Optional<string> agentVersion = default;
            Optional<string> hostName = default;
            Optional<DateTimeOffset> lastHeartbeat = default;
            Optional<string> versionStatus = default;
            Optional<DateTimeOffset> sslCertExpireOn = default;
            Optional<int> sslCertExpiryRemainingDays = default;
            Optional<string> psTemplateVersion = default;
            Optional<DateTimeOffset> agentExpireOn = default;
            Optional<SiteRecoveryVersionDetails> agentVersionDetails = default;
            Optional<IReadOnlyList<InMageFabricSwitchProviderBlockingErrorDetails>> switchProviderBlockingErrorDetails = default;
            string instanceType = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("processServers"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SiteRecoveryProcessServer> array = new List<SiteRecoveryProcessServer>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SiteRecoveryProcessServer.DeserializeSiteRecoveryProcessServer(item));
                    }
                    processServers = array;
                    continue;
                }
                if (property.NameEquals("masterTargetServers"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MasterTargetServer> array = new List<MasterTargetServer>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MasterTargetServer.DeserializeMasterTargetServer(item));
                    }
                    masterTargetServers = array;
                    continue;
                }
                if (property.NameEquals("runAsAccounts"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SiteRecoveryRunAsAccount> array = new List<SiteRecoveryRunAsAccount>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SiteRecoveryRunAsAccount.DeserializeSiteRecoveryRunAsAccount(item));
                    }
                    runAsAccounts = array;
                    continue;
                }
                if (property.NameEquals("replicationPairCount"u8))
                {
                    replicationPairCount = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("processServerCount"u8))
                {
                    processServerCount = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("agentCount"u8))
                {
                    agentCount = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("protectedServers"u8))
                {
                    protectedServers = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("systemLoad"u8))
                {
                    systemLoad = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("systemLoadStatus"u8))
                {
                    systemLoadStatus = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("cpuLoad"u8))
                {
                    cpuLoad = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("cpuLoadStatus"u8))
                {
                    cpuLoadStatus = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("totalMemoryInBytes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    totalMemoryInBytes = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("availableMemoryInBytes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    availableMemoryInBytes = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("memoryUsageStatus"u8))
                {
                    memoryUsageStatus = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("totalSpaceInBytes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    totalSpaceInBytes = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("availableSpaceInBytes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    availableSpaceInBytes = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("spaceUsageStatus"u8))
                {
                    spaceUsageStatus = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("webLoad"u8))
                {
                    webLoad = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("webLoadStatus"u8))
                {
                    webLoadStatus = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("databaseServerLoad"u8))
                {
                    databaseServerLoad = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("databaseServerLoadStatus"u8))
                {
                    databaseServerLoadStatus = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("csServiceStatus"u8))
                {
                    csServiceStatus = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ipAddress"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    ipAddress = IPAddress.Parse(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("agentVersion"u8))
                {
                    agentVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("hostName"u8))
                {
                    hostName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("lastHeartbeat"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastHeartbeat = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("versionStatus"u8))
                {
                    versionStatus = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sslCertExpiryDate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sslCertExpireOn = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("sslCertExpiryRemainingDays"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sslCertExpiryRemainingDays = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("psTemplateVersion"u8))
                {
                    psTemplateVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("agentExpiryDate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    agentExpireOn = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("agentVersionDetails"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    agentVersionDetails = SiteRecoveryVersionDetails.DeserializeSiteRecoveryVersionDetails(property.Value);
                    continue;
                }
                if (property.NameEquals("switchProviderBlockingErrorDetails"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<InMageFabricSwitchProviderBlockingErrorDetails> array = new List<InMageFabricSwitchProviderBlockingErrorDetails>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(InMageFabricSwitchProviderBlockingErrorDetails.DeserializeInMageFabricSwitchProviderBlockingErrorDetails(item));
                    }
                    switchProviderBlockingErrorDetails = array;
                    continue;
                }
                if (property.NameEquals("instanceType"u8))
                {
                    instanceType = property.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new VMwareDetails(instanceType, serializedAdditionalRawData, Optional.ToList(processServers), Optional.ToList(masterTargetServers), Optional.ToList(runAsAccounts), replicationPairCount.Value, processServerCount.Value, agentCount.Value, protectedServers.Value, systemLoad.Value, systemLoadStatus.Value, cpuLoad.Value, cpuLoadStatus.Value, Optional.ToNullable(totalMemoryInBytes), Optional.ToNullable(availableMemoryInBytes), memoryUsageStatus.Value, Optional.ToNullable(totalSpaceInBytes), Optional.ToNullable(availableSpaceInBytes), spaceUsageStatus.Value, webLoad.Value, webLoadStatus.Value, databaseServerLoad.Value, databaseServerLoadStatus.Value, csServiceStatus.Value, ipAddress.Value, agentVersion.Value, hostName.Value, Optional.ToNullable(lastHeartbeat), versionStatus.Value, Optional.ToNullable(sslCertExpireOn), Optional.ToNullable(sslCertExpiryRemainingDays), psTemplateVersion.Value, Optional.ToNullable(agentExpireOn), agentVersionDetails.Value, Optional.ToList(switchProviderBlockingErrorDetails));
        }

        BinaryData IPersistableModel<VMwareDetails>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<VMwareDetails>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(VMwareDetails)} does not support '{options.Format}' format.");
            }
        }

        VMwareDetails IPersistableModel<VMwareDetails>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<VMwareDetails>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeVMwareDetails(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(VMwareDetails)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<VMwareDetails>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
