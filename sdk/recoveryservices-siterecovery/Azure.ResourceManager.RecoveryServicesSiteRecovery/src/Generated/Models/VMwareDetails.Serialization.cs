// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.RecoveryServicesSiteRecovery.Models
{
    public partial class VMwareDetails
    {
        internal static VMwareDetails DeserializeVMwareDetails(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<IReadOnlyList<SiteRecoveryProcessServer>> processServers = default;
            Core.Optional<IReadOnlyList<MasterTargetServer>> masterTargetServers = default;
            Core.Optional<IReadOnlyList<SiteRecoveryRunAsAccount>> runAsAccounts = default;
            Core.Optional<string> replicationPairCount = default;
            Core.Optional<string> processServerCount = default;
            Core.Optional<string> agentCount = default;
            Core.Optional<string> protectedServers = default;
            Core.Optional<string> systemLoad = default;
            Core.Optional<string> systemLoadStatus = default;
            Core.Optional<string> cpuLoad = default;
            Core.Optional<string> cpuLoadStatus = default;
            Core.Optional<long> totalMemoryInBytes = default;
            Core.Optional<long> availableMemoryInBytes = default;
            Core.Optional<string> memoryUsageStatus = default;
            Core.Optional<long> totalSpaceInBytes = default;
            Core.Optional<long> availableSpaceInBytes = default;
            Core.Optional<string> spaceUsageStatus = default;
            Core.Optional<string> webLoad = default;
            Core.Optional<string> webLoadStatus = default;
            Core.Optional<string> databaseServerLoad = default;
            Core.Optional<string> databaseServerLoadStatus = default;
            Core.Optional<string> csServiceStatus = default;
            Core.Optional<IPAddress> ipAddress = default;
            Core.Optional<string> agentVersion = default;
            Core.Optional<string> hostName = default;
            Core.Optional<DateTimeOffset> lastHeartbeat = default;
            Core.Optional<string> versionStatus = default;
            Core.Optional<DateTimeOffset> sslCertExpireOn = default;
            Core.Optional<int> sslCertExpiryRemainingDays = default;
            Core.Optional<string> psTemplateVersion = default;
            Core.Optional<DateTimeOffset> agentExpireOn = default;
            Core.Optional<SiteRecoveryVersionDetails> agentVersionDetails = default;
            Core.Optional<IReadOnlyList<InMageFabricSwitchProviderBlockingErrorDetails>> switchProviderBlockingErrorDetails = default;
            string instanceType = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("processServers"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SiteRecoveryProcessServer> array = new List<SiteRecoveryProcessServer>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SiteRecoveryProcessServer.DeserializeSiteRecoveryProcessServer(item));
                    }
                    processServers = array;
                    continue;
                }
                if (property.NameEquals("masterTargetServers"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MasterTargetServer> array = new List<MasterTargetServer>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MasterTargetServer.DeserializeMasterTargetServer(item));
                    }
                    masterTargetServers = array;
                    continue;
                }
                if (property.NameEquals("runAsAccounts"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SiteRecoveryRunAsAccount> array = new List<SiteRecoveryRunAsAccount>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SiteRecoveryRunAsAccount.DeserializeSiteRecoveryRunAsAccount(item));
                    }
                    runAsAccounts = array;
                    continue;
                }
                if (property.NameEquals("replicationPairCount"u8))
                {
                    replicationPairCount = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("processServerCount"u8))
                {
                    processServerCount = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("agentCount"u8))
                {
                    agentCount = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("protectedServers"u8))
                {
                    protectedServers = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("systemLoad"u8))
                {
                    systemLoad = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("systemLoadStatus"u8))
                {
                    systemLoadStatus = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("cpuLoad"u8))
                {
                    cpuLoad = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("cpuLoadStatus"u8))
                {
                    cpuLoadStatus = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("totalMemoryInBytes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    totalMemoryInBytes = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("availableMemoryInBytes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    availableMemoryInBytes = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("memoryUsageStatus"u8))
                {
                    memoryUsageStatus = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("totalSpaceInBytes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    totalSpaceInBytes = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("availableSpaceInBytes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    availableSpaceInBytes = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("spaceUsageStatus"u8))
                {
                    spaceUsageStatus = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("webLoad"u8))
                {
                    webLoad = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("webLoadStatus"u8))
                {
                    webLoadStatus = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("databaseServerLoad"u8))
                {
                    databaseServerLoad = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("databaseServerLoadStatus"u8))
                {
                    databaseServerLoadStatus = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("csServiceStatus"u8))
                {
                    csServiceStatus = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ipAddress"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    ipAddress = IPAddress.Parse(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("agentVersion"u8))
                {
                    agentVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("hostName"u8))
                {
                    hostName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("lastHeartbeat"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastHeartbeat = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("versionStatus"u8))
                {
                    versionStatus = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sslCertExpiryDate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sslCertExpireOn = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("sslCertExpiryRemainingDays"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sslCertExpiryRemainingDays = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("psTemplateVersion"u8))
                {
                    psTemplateVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("agentExpiryDate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    agentExpireOn = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("agentVersionDetails"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    agentVersionDetails = SiteRecoveryVersionDetails.DeserializeSiteRecoveryVersionDetails(property.Value);
                    continue;
                }
                if (property.NameEquals("switchProviderBlockingErrorDetails"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<InMageFabricSwitchProviderBlockingErrorDetails> array = new List<InMageFabricSwitchProviderBlockingErrorDetails>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(InMageFabricSwitchProviderBlockingErrorDetails.DeserializeInMageFabricSwitchProviderBlockingErrorDetails(item));
                    }
                    switchProviderBlockingErrorDetails = array;
                    continue;
                }
                if (property.NameEquals("instanceType"u8))
                {
                    instanceType = property.Value.GetString();
                    continue;
                }
            }
            return new VMwareDetails(instanceType, Core.Optional.ToList(processServers), Core.Optional.ToList(masterTargetServers), Core.Optional.ToList(runAsAccounts), replicationPairCount.Value, processServerCount.Value, agentCount.Value, protectedServers.Value, systemLoad.Value, systemLoadStatus.Value, cpuLoad.Value, cpuLoadStatus.Value, Core.Optional.ToNullable(totalMemoryInBytes), Core.Optional.ToNullable(availableMemoryInBytes), memoryUsageStatus.Value, Core.Optional.ToNullable(totalSpaceInBytes), Core.Optional.ToNullable(availableSpaceInBytes), spaceUsageStatus.Value, webLoad.Value, webLoadStatus.Value, databaseServerLoad.Value, databaseServerLoadStatus.Value, csServiceStatus.Value, ipAddress.Value, agentVersion.Value, hostName.Value, Core.Optional.ToNullable(lastHeartbeat), versionStatus.Value, Core.Optional.ToNullable(sslCertExpireOn), Core.Optional.ToNullable(sslCertExpiryRemainingDays), psTemplateVersion.Value, Core.Optional.ToNullable(agentExpireOn), agentVersionDetails.Value, Core.Optional.ToList(switchProviderBlockingErrorDetails));
        }
    }
}
