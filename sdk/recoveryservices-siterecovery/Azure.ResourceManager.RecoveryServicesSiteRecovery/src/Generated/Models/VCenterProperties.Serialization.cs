// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.RecoveryServicesSiteRecovery.Models
{
    public partial class VCenterProperties
    {
        internal static VCenterProperties DeserializeVCenterProperties(JsonElement element)
        {
            Optional<string> friendlyName = default;
            Optional<string> internalId = default;
            Optional<DateTimeOffset> lastHeartbeat = default;
            Optional<string> discoveryStatus = default;
            Optional<string> processServerId = default;
            Optional<string> ipAddress = default;
            Optional<string> infrastructureId = default;
            Optional<string> port = default;
            Optional<string> runAsAccountId = default;
            Optional<string> fabricArmResourceName = default;
            Optional<IReadOnlyList<HealthError>> healthErrors = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("friendlyName"))
                {
                    friendlyName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("internalId"))
                {
                    internalId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("lastHeartbeat"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    lastHeartbeat = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("discoveryStatus"))
                {
                    discoveryStatus = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("processServerId"))
                {
                    processServerId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ipAddress"))
                {
                    ipAddress = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("infrastructureId"))
                {
                    infrastructureId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("port"))
                {
                    port = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("runAsAccountId"))
                {
                    runAsAccountId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("fabricArmResourceName"))
                {
                    fabricArmResourceName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("healthErrors"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<HealthError> array = new List<HealthError>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(HealthError.DeserializeHealthError(item));
                    }
                    healthErrors = array;
                    continue;
                }
            }
            return new VCenterProperties(friendlyName.Value, internalId.Value, Optional.ToNullable(lastHeartbeat), discoveryStatus.Value, processServerId.Value, ipAddress.Value, infrastructureId.Value, port.Value, runAsAccountId.Value, fabricArmResourceName.Value, Optional.ToList(healthErrors));
        }
    }
}
