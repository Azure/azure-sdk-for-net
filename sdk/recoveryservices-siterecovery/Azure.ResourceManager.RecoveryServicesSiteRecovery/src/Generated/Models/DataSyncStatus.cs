// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.RecoveryServicesSiteRecovery.Models
{
    /// <summary> The data sync option. </summary>
    public readonly partial struct DataSyncStatus : IEquatable<DataSyncStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DataSyncStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DataSyncStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ForDownTimeValue = "ForDownTime";
        private const string ForSynchronizationValue = "ForSynchronization";

        /// <summary> ForDownTime. </summary>
        public static DataSyncStatus ForDownTime { get; } = new DataSyncStatus(ForDownTimeValue);
        /// <summary> ForSynchronization. </summary>
        public static DataSyncStatus ForSynchronization { get; } = new DataSyncStatus(ForSynchronizationValue);
        /// <summary> Determines if two <see cref="DataSyncStatus"/> values are the same. </summary>
        public static bool operator ==(DataSyncStatus left, DataSyncStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DataSyncStatus"/> values are not the same. </summary>
        public static bool operator !=(DataSyncStatus left, DataSyncStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DataSyncStatus"/>. </summary>
        public static implicit operator DataSyncStatus(string value) => new DataSyncStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DataSyncStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DataSyncStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
