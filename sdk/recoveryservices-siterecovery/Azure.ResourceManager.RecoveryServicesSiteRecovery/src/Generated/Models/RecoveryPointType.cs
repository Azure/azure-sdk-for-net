// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.RecoveryServicesSiteRecovery.Models
{
    /// <summary> The recovery point type. Values from LatestTime, LatestTag or Custom. In the case of custom, the recovery point provided by RecoveryPointId will be used. In the other two cases, recovery point id will be ignored. </summary>
    public readonly partial struct RecoveryPointType : IEquatable<RecoveryPointType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="RecoveryPointType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public RecoveryPointType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string LatestTimeValue = "LatestTime";
        private const string LatestTagValue = "LatestTag";
        private const string CustomValue = "Custom";

        /// <summary> LatestTime. </summary>
        public static RecoveryPointType LatestTime { get; } = new RecoveryPointType(LatestTimeValue);
        /// <summary> LatestTag. </summary>
        public static RecoveryPointType LatestTag { get; } = new RecoveryPointType(LatestTagValue);
        /// <summary> Custom. </summary>
        public static RecoveryPointType Custom { get; } = new RecoveryPointType(CustomValue);
        /// <summary> Determines if two <see cref="RecoveryPointType"/> values are the same. </summary>
        public static bool operator ==(RecoveryPointType left, RecoveryPointType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="RecoveryPointType"/> values are not the same. </summary>
        public static bool operator !=(RecoveryPointType left, RecoveryPointType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="RecoveryPointType"/>. </summary>
        public static implicit operator RecoveryPointType(string value) => new RecoveryPointType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is RecoveryPointType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(RecoveryPointType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
