// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.RecoveryServicesSiteRecovery.Models
{
    public partial class SiteRecoveryRecoveryPlanProperties : IUtf8JsonSerializable, IJsonModel<SiteRecoveryRecoveryPlanProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<SiteRecoveryRecoveryPlanProperties>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<SiteRecoveryRecoveryPlanProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SiteRecoveryRecoveryPlanProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SiteRecoveryRecoveryPlanProperties)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (Optional.IsDefined(FriendlyName))
            {
                writer.WritePropertyName("friendlyName"u8);
                writer.WriteStringValue(FriendlyName);
            }
            if (Optional.IsDefined(PrimaryFabricId))
            {
                writer.WritePropertyName("primaryFabricId"u8);
                writer.WriteStringValue(PrimaryFabricId);
            }
            if (Optional.IsDefined(PrimaryFabricFriendlyName))
            {
                writer.WritePropertyName("primaryFabricFriendlyName"u8);
                writer.WriteStringValue(PrimaryFabricFriendlyName);
            }
            if (Optional.IsDefined(RecoveryFabricId))
            {
                writer.WritePropertyName("recoveryFabricId"u8);
                writer.WriteStringValue(RecoveryFabricId);
            }
            if (Optional.IsDefined(RecoveryFabricFriendlyName))
            {
                writer.WritePropertyName("recoveryFabricFriendlyName"u8);
                writer.WriteStringValue(RecoveryFabricFriendlyName);
            }
            if (Optional.IsDefined(FailoverDeploymentModel))
            {
                writer.WritePropertyName("failoverDeploymentModel"u8);
                writer.WriteStringValue(FailoverDeploymentModel);
            }
            if (Optional.IsCollectionDefined(ReplicationProviders))
            {
                writer.WritePropertyName("replicationProviders"u8);
                writer.WriteStartArray();
                foreach (var item in ReplicationProviders)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(AllowedOperations))
            {
                writer.WritePropertyName("allowedOperations"u8);
                writer.WriteStartArray();
                foreach (var item in AllowedOperations)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(LastPlannedFailoverOn))
            {
                writer.WritePropertyName("lastPlannedFailoverTime"u8);
                writer.WriteStringValue(LastPlannedFailoverOn.Value, "O");
            }
            if (Optional.IsDefined(LastUnplannedFailoverOn))
            {
                writer.WritePropertyName("lastUnplannedFailoverTime"u8);
                writer.WriteStringValue(LastUnplannedFailoverOn.Value, "O");
            }
            if (Optional.IsDefined(LastTestFailoverOn))
            {
                writer.WritePropertyName("lastTestFailoverTime"u8);
                writer.WriteStringValue(LastTestFailoverOn.Value, "O");
            }
            if (Optional.IsDefined(CurrentScenario))
            {
                writer.WritePropertyName("currentScenario"u8);
                writer.WriteObjectValue(CurrentScenario);
            }
            if (Optional.IsDefined(CurrentScenarioStatus))
            {
                writer.WritePropertyName("currentScenarioStatus"u8);
                writer.WriteStringValue(CurrentScenarioStatus);
            }
            if (Optional.IsDefined(CurrentScenarioStatusDescription))
            {
                writer.WritePropertyName("currentScenarioStatusDescription"u8);
                writer.WriteStringValue(CurrentScenarioStatusDescription);
            }
            if (Optional.IsCollectionDefined(Groups))
            {
                writer.WritePropertyName("groups"u8);
                writer.WriteStartArray();
                foreach (var item in Groups)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(ProviderSpecificDetails))
            {
                writer.WritePropertyName("providerSpecificDetails"u8);
                writer.WriteStartArray();
                foreach (var item in ProviderSpecificDetails)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        SiteRecoveryRecoveryPlanProperties IJsonModel<SiteRecoveryRecoveryPlanProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SiteRecoveryRecoveryPlanProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SiteRecoveryRecoveryPlanProperties)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeSiteRecoveryRecoveryPlanProperties(document.RootElement, options);
        }

        internal static SiteRecoveryRecoveryPlanProperties DeserializeSiteRecoveryRecoveryPlanProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> friendlyName = default;
            Optional<ResourceIdentifier> primaryFabricId = default;
            Optional<string> primaryFabricFriendlyName = default;
            Optional<ResourceIdentifier> recoveryFabricId = default;
            Optional<string> recoveryFabricFriendlyName = default;
            Optional<string> failoverDeploymentModel = default;
            Optional<IReadOnlyList<string>> replicationProviders = default;
            Optional<IReadOnlyList<string>> allowedOperations = default;
            Optional<DateTimeOffset> lastPlannedFailoverTime = default;
            Optional<DateTimeOffset> lastUnplannedFailoverTime = default;
            Optional<DateTimeOffset> lastTestFailoverTime = default;
            Optional<CurrentScenarioDetails> currentScenario = default;
            Optional<string> currentScenarioStatus = default;
            Optional<string> currentScenarioStatusDescription = default;
            Optional<IReadOnlyList<SiteRecoveryPlanGroup>> groups = default;
            Optional<IReadOnlyList<RecoveryPlanProviderSpecificDetails>> providerSpecificDetails = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("friendlyName"u8))
                {
                    friendlyName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("primaryFabricId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    primaryFabricId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("primaryFabricFriendlyName"u8))
                {
                    primaryFabricFriendlyName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("recoveryFabricId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    recoveryFabricId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("recoveryFabricFriendlyName"u8))
                {
                    recoveryFabricFriendlyName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("failoverDeploymentModel"u8))
                {
                    failoverDeploymentModel = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("replicationProviders"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    replicationProviders = array;
                    continue;
                }
                if (property.NameEquals("allowedOperations"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    allowedOperations = array;
                    continue;
                }
                if (property.NameEquals("lastPlannedFailoverTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastPlannedFailoverTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("lastUnplannedFailoverTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastUnplannedFailoverTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("lastTestFailoverTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastTestFailoverTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("currentScenario"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    currentScenario = CurrentScenarioDetails.DeserializeCurrentScenarioDetails(property.Value);
                    continue;
                }
                if (property.NameEquals("currentScenarioStatus"u8))
                {
                    currentScenarioStatus = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("currentScenarioStatusDescription"u8))
                {
                    currentScenarioStatusDescription = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("groups"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SiteRecoveryPlanGroup> array = new List<SiteRecoveryPlanGroup>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SiteRecoveryPlanGroup.DeserializeSiteRecoveryPlanGroup(item));
                    }
                    groups = array;
                    continue;
                }
                if (property.NameEquals("providerSpecificDetails"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<RecoveryPlanProviderSpecificDetails> array = new List<RecoveryPlanProviderSpecificDetails>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(RecoveryPlanProviderSpecificDetails.DeserializeRecoveryPlanProviderSpecificDetails(item));
                    }
                    providerSpecificDetails = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new SiteRecoveryRecoveryPlanProperties(friendlyName.Value, primaryFabricId.Value, primaryFabricFriendlyName.Value, recoveryFabricId.Value, recoveryFabricFriendlyName.Value, failoverDeploymentModel.Value, Optional.ToList(replicationProviders), Optional.ToList(allowedOperations), Optional.ToNullable(lastPlannedFailoverTime), Optional.ToNullable(lastUnplannedFailoverTime), Optional.ToNullable(lastTestFailoverTime), currentScenario.Value, currentScenarioStatus.Value, currentScenarioStatusDescription.Value, Optional.ToList(groups), Optional.ToList(providerSpecificDetails), serializedAdditionalRawData);
        }

        private BinaryData SerializeBicep(ModelReaderWriterOptions options)
        {
            StringBuilder builder = new StringBuilder();
            builder.AppendLine("{");

            if (Optional.IsDefined(FriendlyName))
            {
                builder.Append("  friendlyName:");
                if (FriendlyName.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{FriendlyName}'''");
                }
                else
                {
                    builder.AppendLine($" '{FriendlyName}'");
                }
            }

            if (Optional.IsDefined(PrimaryFabricId))
            {
                builder.Append("  primaryFabricId:");
                builder.AppendLine($" '{PrimaryFabricId.ToString()}'");
            }

            if (Optional.IsDefined(PrimaryFabricFriendlyName))
            {
                builder.Append("  primaryFabricFriendlyName:");
                if (PrimaryFabricFriendlyName.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{PrimaryFabricFriendlyName}'''");
                }
                else
                {
                    builder.AppendLine($" '{PrimaryFabricFriendlyName}'");
                }
            }

            if (Optional.IsDefined(RecoveryFabricId))
            {
                builder.Append("  recoveryFabricId:");
                builder.AppendLine($" '{RecoveryFabricId.ToString()}'");
            }

            if (Optional.IsDefined(RecoveryFabricFriendlyName))
            {
                builder.Append("  recoveryFabricFriendlyName:");
                if (RecoveryFabricFriendlyName.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{RecoveryFabricFriendlyName}'''");
                }
                else
                {
                    builder.AppendLine($" '{RecoveryFabricFriendlyName}'");
                }
            }

            if (Optional.IsDefined(FailoverDeploymentModel))
            {
                builder.Append("  failoverDeploymentModel:");
                if (FailoverDeploymentModel.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{FailoverDeploymentModel}'''");
                }
                else
                {
                    builder.AppendLine($" '{FailoverDeploymentModel}'");
                }
            }

            if (Optional.IsCollectionDefined(ReplicationProviders))
            {
                if (ReplicationProviders.Any())
                {
                    builder.Append("  replicationProviders:");
                    builder.AppendLine(" [");
                    foreach (var item in ReplicationProviders)
                    {
                        if (item == null)
                        {
                            builder.Append("null");
                            continue;
                        }
                        if (item.Contains(Environment.NewLine))
                        {
                            builder.AppendLine("    '''");
                            builder.AppendLine($"{item}'''");
                        }
                        else
                        {
                            builder.AppendLine($"    '{item}'");
                        }
                    }
                    builder.AppendLine("  ]");
                }
            }

            if (Optional.IsCollectionDefined(AllowedOperations))
            {
                if (AllowedOperations.Any())
                {
                    builder.Append("  allowedOperations:");
                    builder.AppendLine(" [");
                    foreach (var item in AllowedOperations)
                    {
                        if (item == null)
                        {
                            builder.Append("null");
                            continue;
                        }
                        if (item.Contains(Environment.NewLine))
                        {
                            builder.AppendLine("    '''");
                            builder.AppendLine($"{item}'''");
                        }
                        else
                        {
                            builder.AppendLine($"    '{item}'");
                        }
                    }
                    builder.AppendLine("  ]");
                }
            }

            if (Optional.IsDefined(LastPlannedFailoverOn))
            {
                builder.Append("  lastPlannedFailoverTime:");
                var formattedDateTimeString = TypeFormatters.ToString(LastPlannedFailoverOn.Value, "o");
                builder.AppendLine($" '{formattedDateTimeString}'");
            }

            if (Optional.IsDefined(LastUnplannedFailoverOn))
            {
                builder.Append("  lastUnplannedFailoverTime:");
                var formattedDateTimeString = TypeFormatters.ToString(LastUnplannedFailoverOn.Value, "o");
                builder.AppendLine($" '{formattedDateTimeString}'");
            }

            if (Optional.IsDefined(LastTestFailoverOn))
            {
                builder.Append("  lastTestFailoverTime:");
                var formattedDateTimeString = TypeFormatters.ToString(LastTestFailoverOn.Value, "o");
                builder.AppendLine($" '{formattedDateTimeString}'");
            }

            if (Optional.IsDefined(CurrentScenario))
            {
                builder.Append("  currentScenario:");
                AppendChildObject(builder, CurrentScenario, options, 2, false);
            }

            if (Optional.IsDefined(CurrentScenarioStatus))
            {
                builder.Append("  currentScenarioStatus:");
                if (CurrentScenarioStatus.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{CurrentScenarioStatus}'''");
                }
                else
                {
                    builder.AppendLine($" '{CurrentScenarioStatus}'");
                }
            }

            if (Optional.IsDefined(CurrentScenarioStatusDescription))
            {
                builder.Append("  currentScenarioStatusDescription:");
                if (CurrentScenarioStatusDescription.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{CurrentScenarioStatusDescription}'''");
                }
                else
                {
                    builder.AppendLine($" '{CurrentScenarioStatusDescription}'");
                }
            }

            if (Optional.IsCollectionDefined(Groups))
            {
                if (Groups.Any())
                {
                    builder.Append("  groups:");
                    builder.AppendLine(" [");
                    foreach (var item in Groups)
                    {
                        AppendChildObject(builder, item, options, 4, true);
                    }
                    builder.AppendLine("  ]");
                }
            }

            if (Optional.IsCollectionDefined(ProviderSpecificDetails))
            {
                if (ProviderSpecificDetails.Any())
                {
                    builder.Append("  providerSpecificDetails:");
                    builder.AppendLine(" [");
                    foreach (var item in ProviderSpecificDetails)
                    {
                        AppendChildObject(builder, item, options, 4, true);
                    }
                    builder.AppendLine("  ]");
                }
            }

            builder.AppendLine("}");
            return BinaryData.FromString(builder.ToString());
        }

        private void AppendChildObject(StringBuilder stringBuilder, object childObject, ModelReaderWriterOptions options, int spaces, bool indentFirstLine)
        {
            string indent = new string(' ', spaces);
            BinaryData data = ModelReaderWriter.Write(childObject, options);
            string[] lines = data.ToString().Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries);
            bool inMultilineString = false;
            for (int i = 0; i < lines.Length; i++)
            {
                string line = lines[i];
                if (inMultilineString)
                {
                    if (line.Contains("'''"))
                    {
                        inMultilineString = false;
                    }
                    stringBuilder.AppendLine(line);
                    continue;
                }
                if (line.Contains("'''"))
                {
                    inMultilineString = true;
                    stringBuilder.AppendLine($"{indent}{line}");
                    continue;
                }
                if (i == 0 && !indentFirstLine)
                {
                    stringBuilder.AppendLine($" {line}");
                }
                else
                {
                    stringBuilder.AppendLine($"{indent}{line}");
                }
            }
        }

        BinaryData IPersistableModel<SiteRecoveryRecoveryPlanProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SiteRecoveryRecoveryPlanProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                case "B":
                    return SerializeBicep(options);
                default:
                    throw new FormatException($"The model {nameof(SiteRecoveryRecoveryPlanProperties)} does not support '{options.Format}' format.");
            }
        }

        SiteRecoveryRecoveryPlanProperties IPersistableModel<SiteRecoveryRecoveryPlanProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SiteRecoveryRecoveryPlanProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeSiteRecoveryRecoveryPlanProperties(document.RootElement, options);
                    }
                case "B":
                    throw new InvalidOperationException("Bicep deserialization is not supported for this type.");
                default:
                    throw new FormatException($"The model {nameof(SiteRecoveryRecoveryPlanProperties)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<SiteRecoveryRecoveryPlanProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
