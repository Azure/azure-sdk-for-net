// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.RecoveryServicesSiteRecovery.Models
{
    /// <summary>
    /// The category of the health error.
    /// Serialized Name: HealthErrorCategory
    /// </summary>
    public readonly partial struct SiteRecoveryHealthErrorCategory : IEquatable<SiteRecoveryHealthErrorCategory>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SiteRecoveryHealthErrorCategory"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SiteRecoveryHealthErrorCategory(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NoneValue = "None";
        private const string ReplicationValue = "Replication";
        private const string TestFailoverValue = "TestFailover";
        private const string ConfigurationValue = "Configuration";
        private const string FabricInfrastructureValue = "FabricInfrastructure";
        private const string VersionExpiryValue = "VersionExpiry";
        private const string AgentAutoUpdateInfraValue = "AgentAutoUpdateInfra";
        private const string AgentAutoUpdateArtifactDeletedValue = "AgentAutoUpdateArtifactDeleted";
        private const string AgentAutoUpdateRunAsAccountValue = "AgentAutoUpdateRunAsAccount";
        private const string AgentAutoUpdateRunAsAccountExpiryValue = "AgentAutoUpdateRunAsAccountExpiry";
        private const string AgentAutoUpdateRunAsAccountExpiredValue = "AgentAutoUpdateRunAsAccountExpired";

        /// <summary>
        /// None
        /// Serialized Name: HealthErrorCategory.None
        /// </summary>
        public static SiteRecoveryHealthErrorCategory None { get; } = new SiteRecoveryHealthErrorCategory(NoneValue);
        /// <summary>
        /// Replication
        /// Serialized Name: HealthErrorCategory.Replication
        /// </summary>
        public static SiteRecoveryHealthErrorCategory Replication { get; } = new SiteRecoveryHealthErrorCategory(ReplicationValue);
        /// <summary>
        /// TestFailover
        /// Serialized Name: HealthErrorCategory.TestFailover
        /// </summary>
        public static SiteRecoveryHealthErrorCategory TestFailover { get; } = new SiteRecoveryHealthErrorCategory(TestFailoverValue);
        /// <summary>
        /// Configuration
        /// Serialized Name: HealthErrorCategory.Configuration
        /// </summary>
        public static SiteRecoveryHealthErrorCategory Configuration { get; } = new SiteRecoveryHealthErrorCategory(ConfigurationValue);
        /// <summary>
        /// FabricInfrastructure
        /// Serialized Name: HealthErrorCategory.FabricInfrastructure
        /// </summary>
        public static SiteRecoveryHealthErrorCategory FabricInfrastructure { get; } = new SiteRecoveryHealthErrorCategory(FabricInfrastructureValue);
        /// <summary>
        /// VersionExpiry
        /// Serialized Name: HealthErrorCategory.VersionExpiry
        /// </summary>
        public static SiteRecoveryHealthErrorCategory VersionExpiry { get; } = new SiteRecoveryHealthErrorCategory(VersionExpiryValue);
        /// <summary>
        /// AgentAutoUpdateInfra
        /// Serialized Name: HealthErrorCategory.AgentAutoUpdateInfra
        /// </summary>
        public static SiteRecoveryHealthErrorCategory AgentAutoUpdateInfra { get; } = new SiteRecoveryHealthErrorCategory(AgentAutoUpdateInfraValue);
        /// <summary>
        /// AgentAutoUpdateArtifactDeleted
        /// Serialized Name: HealthErrorCategory.AgentAutoUpdateArtifactDeleted
        /// </summary>
        public static SiteRecoveryHealthErrorCategory AgentAutoUpdateArtifactDeleted { get; } = new SiteRecoveryHealthErrorCategory(AgentAutoUpdateArtifactDeletedValue);
        /// <summary>
        /// AgentAutoUpdateRunAsAccount
        /// Serialized Name: HealthErrorCategory.AgentAutoUpdateRunAsAccount
        /// </summary>
        public static SiteRecoveryHealthErrorCategory AgentAutoUpdateRunAsAccount { get; } = new SiteRecoveryHealthErrorCategory(AgentAutoUpdateRunAsAccountValue);
        /// <summary>
        /// AgentAutoUpdateRunAsAccountExpiry
        /// Serialized Name: HealthErrorCategory.AgentAutoUpdateRunAsAccountExpiry
        /// </summary>
        public static SiteRecoveryHealthErrorCategory AgentAutoUpdateRunAsAccountExpiry { get; } = new SiteRecoveryHealthErrorCategory(AgentAutoUpdateRunAsAccountExpiryValue);
        /// <summary>
        /// AgentAutoUpdateRunAsAccountExpired
        /// Serialized Name: HealthErrorCategory.AgentAutoUpdateRunAsAccountExpired
        /// </summary>
        public static SiteRecoveryHealthErrorCategory AgentAutoUpdateRunAsAccountExpired { get; } = new SiteRecoveryHealthErrorCategory(AgentAutoUpdateRunAsAccountExpiredValue);
        /// <summary> Determines if two <see cref="SiteRecoveryHealthErrorCategory"/> values are the same. </summary>
        public static bool operator ==(SiteRecoveryHealthErrorCategory left, SiteRecoveryHealthErrorCategory right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SiteRecoveryHealthErrorCategory"/> values are not the same. </summary>
        public static bool operator !=(SiteRecoveryHealthErrorCategory left, SiteRecoveryHealthErrorCategory right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SiteRecoveryHealthErrorCategory"/>. </summary>
        public static implicit operator SiteRecoveryHealthErrorCategory(string value) => new SiteRecoveryHealthErrorCategory(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SiteRecoveryHealthErrorCategory other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SiteRecoveryHealthErrorCategory other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
