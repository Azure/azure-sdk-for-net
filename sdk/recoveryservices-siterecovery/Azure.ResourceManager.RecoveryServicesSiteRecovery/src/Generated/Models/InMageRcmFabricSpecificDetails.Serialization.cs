// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.RecoveryServicesSiteRecovery.Models
{
    public partial class InMageRcmFabricSpecificDetails : IUtf8JsonSerializable, IModelJsonSerializable<InMageRcmFabricSpecificDetails>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<InMageRcmFabricSpecificDetails>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<InMageRcmFabricSpecificDetails>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat<InMageRcmFabricSpecificDetails>(this, options.Format);

            writer.WriteStartObject();
            if (Optional.IsDefined(SourceAgentIdentityDetails))
            {
                writer.WritePropertyName("sourceAgentIdentityDetails"u8);
                if (SourceAgentIdentityDetails is null)
                {
                    writer.WriteNullValue();
                }
                else
                {
                    ((IModelJsonSerializable<IdentityProviderDetails>)SourceAgentIdentityDetails).Serialize(writer, options);
                }
            }
            writer.WritePropertyName("instanceType"u8);
            writer.WriteStringValue(InstanceType);
            if (_rawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _rawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static InMageRcmFabricSpecificDetails DeserializeInMageRcmFabricSpecificDetails(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<ResourceIdentifier> vmwareSiteId = default;
            Optional<ResourceIdentifier> physicalSiteId = default;
            Optional<string> serviceEndpoint = default;
            Optional<ResourceIdentifier> serviceResourceId = default;
            Optional<string> serviceContainerId = default;
            Optional<Uri> dataPlaneUri = default;
            Optional<Uri> controlPlaneUri = default;
            Optional<IdentityProviderDetails> sourceAgentIdentityDetails = default;
            Optional<IReadOnlyList<SiteRecoveryProcessServerDetails>> processServers = default;
            Optional<IReadOnlyList<RcmProxyDetails>> rcmProxies = default;
            Optional<IReadOnlyList<PushInstallerDetails>> pushInstallers = default;
            Optional<IReadOnlyList<ReplicationAgentDetails>> replicationAgents = default;
            Optional<IReadOnlyList<ReprotectAgentDetails>> reprotectAgents = default;
            Optional<IReadOnlyList<MarsAgentDetails>> marsAgents = default;
            Optional<IReadOnlyList<SiteRecoveryDraDetails>> dras = default;
            Optional<IReadOnlyList<SiteRecoveryAgentDetails>> agentDetails = default;
            string instanceType = default;
            Dictionary<string, BinaryData> rawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("vmwareSiteId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    vmwareSiteId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("physicalSiteId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    physicalSiteId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("serviceEndpoint"u8))
                {
                    serviceEndpoint = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("serviceResourceId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    serviceResourceId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("serviceContainerId"u8))
                {
                    serviceContainerId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("dataPlaneUri"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dataPlaneUri = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("controlPlaneUri"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    controlPlaneUri = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("sourceAgentIdentityDetails"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sourceAgentIdentityDetails = IdentityProviderDetails.DeserializeIdentityProviderDetails(property.Value);
                    continue;
                }
                if (property.NameEquals("processServers"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SiteRecoveryProcessServerDetails> array = new List<SiteRecoveryProcessServerDetails>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SiteRecoveryProcessServerDetails.DeserializeSiteRecoveryProcessServerDetails(item));
                    }
                    processServers = array;
                    continue;
                }
                if (property.NameEquals("rcmProxies"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<RcmProxyDetails> array = new List<RcmProxyDetails>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(RcmProxyDetails.DeserializeRcmProxyDetails(item));
                    }
                    rcmProxies = array;
                    continue;
                }
                if (property.NameEquals("pushInstallers"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<PushInstallerDetails> array = new List<PushInstallerDetails>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(PushInstallerDetails.DeserializePushInstallerDetails(item));
                    }
                    pushInstallers = array;
                    continue;
                }
                if (property.NameEquals("replicationAgents"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ReplicationAgentDetails> array = new List<ReplicationAgentDetails>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ReplicationAgentDetails.DeserializeReplicationAgentDetails(item));
                    }
                    replicationAgents = array;
                    continue;
                }
                if (property.NameEquals("reprotectAgents"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ReprotectAgentDetails> array = new List<ReprotectAgentDetails>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ReprotectAgentDetails.DeserializeReprotectAgentDetails(item));
                    }
                    reprotectAgents = array;
                    continue;
                }
                if (property.NameEquals("marsAgents"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MarsAgentDetails> array = new List<MarsAgentDetails>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MarsAgentDetails.DeserializeMarsAgentDetails(item));
                    }
                    marsAgents = array;
                    continue;
                }
                if (property.NameEquals("dras"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SiteRecoveryDraDetails> array = new List<SiteRecoveryDraDetails>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SiteRecoveryDraDetails.DeserializeSiteRecoveryDraDetails(item));
                    }
                    dras = array;
                    continue;
                }
                if (property.NameEquals("agentDetails"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SiteRecoveryAgentDetails> array = new List<SiteRecoveryAgentDetails>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SiteRecoveryAgentDetails.DeserializeSiteRecoveryAgentDetails(item));
                    }
                    agentDetails = array;
                    continue;
                }
                if (property.NameEquals("instanceType"u8))
                {
                    instanceType = property.Value.GetString();
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    rawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new InMageRcmFabricSpecificDetails(instanceType, vmwareSiteId.Value, physicalSiteId.Value, serviceEndpoint.Value, serviceResourceId.Value, serviceContainerId.Value, dataPlaneUri.Value, controlPlaneUri.Value, sourceAgentIdentityDetails.Value, Optional.ToList(processServers), Optional.ToList(rcmProxies), Optional.ToList(pushInstallers), Optional.ToList(replicationAgents), Optional.ToList(reprotectAgents), Optional.ToList(marsAgents), Optional.ToList(dras), Optional.ToList(agentDetails), rawData);
        }

        InMageRcmFabricSpecificDetails IModelJsonSerializable<InMageRcmFabricSpecificDetails>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat<InMageRcmFabricSpecificDetails>(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeInMageRcmFabricSpecificDetails(doc.RootElement, options);
        }

        BinaryData IModelSerializable<InMageRcmFabricSpecificDetails>.Serialize(ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat<InMageRcmFabricSpecificDetails>(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        InMageRcmFabricSpecificDetails IModelSerializable<InMageRcmFabricSpecificDetails>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            ModelSerializerHelper.ValidateFormat<InMageRcmFabricSpecificDetails>(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeInMageRcmFabricSpecificDetails(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="InMageRcmFabricSpecificDetails"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="InMageRcmFabricSpecificDetails"/> to convert. </param>
        public static implicit operator RequestContent(InMageRcmFabricSpecificDetails model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="InMageRcmFabricSpecificDetails"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator InMageRcmFabricSpecificDetails(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeInMageRcmFabricSpecificDetails(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
