// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.RecoveryServicesSiteRecovery.Models
{
    /// <summary> Details of the gateway operation. </summary>
    public partial class GatewayOperationDetails
    {
        /// <summary> Initializes a new instance of <see cref="GatewayOperationDetails"/>. </summary>
        internal GatewayOperationDetails()
        {
            DataStores = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="GatewayOperationDetails"/>. </summary>
        /// <param name="state"> A value indicating the state of gateway operation. </param>
        /// <param name="progressPercentage"> A value indicating the progress percentage of gateway operation. </param>
        /// <param name="timeElapsed"> A value indicating the time elapsed for the operation in milliseconds. </param>
        /// <param name="timeRemaining"> A value indicating the time remaining for the operation in milliseconds. </param>
        /// <param name="uploadSpeed"> A value indicating the upload speed in bytes per second. </param>
        /// <param name="hostName"> A value indicating the ESXi host name. </param>
        /// <param name="dataStores"> A value indicating the datastore collection. </param>
        /// <param name="vmwareReadThroughput"> A value indicating the VMware read throughput in bytes per second. </param>
        internal GatewayOperationDetails(string state, int? progressPercentage, long? timeElapsed, long? timeRemaining, long? uploadSpeed, string hostName, IReadOnlyList<string> dataStores, long? vmwareReadThroughput)
        {
            State = state;
            ProgressPercentage = progressPercentage;
            TimeElapsed = timeElapsed;
            TimeRemaining = timeRemaining;
            UploadSpeed = uploadSpeed;
            HostName = hostName;
            DataStores = dataStores;
            VMwareReadThroughput = vmwareReadThroughput;
        }

        /// <summary> A value indicating the state of gateway operation. </summary>
        public string State { get; }
        /// <summary> A value indicating the progress percentage of gateway operation. </summary>
        public int? ProgressPercentage { get; }
        /// <summary> A value indicating the time elapsed for the operation in milliseconds. </summary>
        public long? TimeElapsed { get; }
        /// <summary> A value indicating the time remaining for the operation in milliseconds. </summary>
        public long? TimeRemaining { get; }
        /// <summary> A value indicating the upload speed in bytes per second. </summary>
        public long? UploadSpeed { get; }
        /// <summary> A value indicating the ESXi host name. </summary>
        public string HostName { get; }
        /// <summary> A value indicating the datastore collection. </summary>
        public IReadOnlyList<string> DataStores { get; }
        /// <summary> A value indicating the VMware read throughput in bytes per second. </summary>
        public long? VMwareReadThroughput { get; }
    }
}
