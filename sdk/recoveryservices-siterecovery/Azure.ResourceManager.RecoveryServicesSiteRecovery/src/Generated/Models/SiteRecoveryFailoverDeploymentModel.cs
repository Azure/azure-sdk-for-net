// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.RecoveryServicesSiteRecovery.Models
{
    /// <summary>
    /// The failover deployment model.
    /// Serialized Name: FailoverDeploymentModel
    /// </summary>
    public readonly partial struct SiteRecoveryFailoverDeploymentModel : IEquatable<SiteRecoveryFailoverDeploymentModel>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SiteRecoveryFailoverDeploymentModel"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SiteRecoveryFailoverDeploymentModel(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NotApplicableValue = "NotApplicable";
        private const string ClassicValue = "Classic";
        private const string ResourceManagerValue = "ResourceManager";

        /// <summary>
        /// NotApplicable
        /// Serialized Name: FailoverDeploymentModel.NotApplicable
        /// </summary>
        public static SiteRecoveryFailoverDeploymentModel NotApplicable { get; } = new SiteRecoveryFailoverDeploymentModel(NotApplicableValue);
        /// <summary>
        /// Classic
        /// Serialized Name: FailoverDeploymentModel.Classic
        /// </summary>
        public static SiteRecoveryFailoverDeploymentModel Classic { get; } = new SiteRecoveryFailoverDeploymentModel(ClassicValue);
        /// <summary>
        /// ResourceManager
        /// Serialized Name: FailoverDeploymentModel.ResourceManager
        /// </summary>
        public static SiteRecoveryFailoverDeploymentModel ResourceManager { get; } = new SiteRecoveryFailoverDeploymentModel(ResourceManagerValue);
        /// <summary> Determines if two <see cref="SiteRecoveryFailoverDeploymentModel"/> values are the same. </summary>
        public static bool operator ==(SiteRecoveryFailoverDeploymentModel left, SiteRecoveryFailoverDeploymentModel right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SiteRecoveryFailoverDeploymentModel"/> values are not the same. </summary>
        public static bool operator !=(SiteRecoveryFailoverDeploymentModel left, SiteRecoveryFailoverDeploymentModel right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SiteRecoveryFailoverDeploymentModel"/>. </summary>
        public static implicit operator SiteRecoveryFailoverDeploymentModel(string value) => new SiteRecoveryFailoverDeploymentModel(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SiteRecoveryFailoverDeploymentModel other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SiteRecoveryFailoverDeploymentModel other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
