// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.RecoveryServicesSiteRecovery.Models
{
    public partial class RecoveryPlanProperties
    {
        internal static RecoveryPlanProperties DeserializeRecoveryPlanProperties(JsonElement element)
        {
            Optional<string> friendlyName = default;
            Optional<string> primaryFabricId = default;
            Optional<string> primaryFabricFriendlyName = default;
            Optional<string> recoveryFabricId = default;
            Optional<string> recoveryFabricFriendlyName = default;
            Optional<string> failoverDeploymentModel = default;
            Optional<IReadOnlyList<string>> replicationProviders = default;
            Optional<IReadOnlyList<string>> allowedOperations = default;
            Optional<DateTimeOffset> lastPlannedFailoverTime = default;
            Optional<DateTimeOffset> lastUnplannedFailoverTime = default;
            Optional<DateTimeOffset> lastTestFailoverTime = default;
            Optional<CurrentScenarioDetails> currentScenario = default;
            Optional<string> currentScenarioStatus = default;
            Optional<string> currentScenarioStatusDescription = default;
            Optional<IReadOnlyList<RecoveryPlanGroup>> groups = default;
            Optional<IReadOnlyList<RecoveryPlanProviderSpecificDetails>> providerSpecificDetails = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("friendlyName"))
                {
                    friendlyName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("primaryFabricId"))
                {
                    primaryFabricId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("primaryFabricFriendlyName"))
                {
                    primaryFabricFriendlyName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("recoveryFabricId"))
                {
                    recoveryFabricId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("recoveryFabricFriendlyName"))
                {
                    recoveryFabricFriendlyName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("failoverDeploymentModel"))
                {
                    failoverDeploymentModel = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("replicationProviders"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    replicationProviders = array;
                    continue;
                }
                if (property.NameEquals("allowedOperations"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    allowedOperations = array;
                    continue;
                }
                if (property.NameEquals("lastPlannedFailoverTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    lastPlannedFailoverTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("lastUnplannedFailoverTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    lastUnplannedFailoverTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("lastTestFailoverTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    lastTestFailoverTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("currentScenario"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    currentScenario = CurrentScenarioDetails.DeserializeCurrentScenarioDetails(property.Value);
                    continue;
                }
                if (property.NameEquals("currentScenarioStatus"))
                {
                    currentScenarioStatus = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("currentScenarioStatusDescription"))
                {
                    currentScenarioStatusDescription = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("groups"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<RecoveryPlanGroup> array = new List<RecoveryPlanGroup>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(RecoveryPlanGroup.DeserializeRecoveryPlanGroup(item));
                    }
                    groups = array;
                    continue;
                }
                if (property.NameEquals("providerSpecificDetails"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<RecoveryPlanProviderSpecificDetails> array = new List<RecoveryPlanProviderSpecificDetails>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(RecoveryPlanProviderSpecificDetails.DeserializeRecoveryPlanProviderSpecificDetails(item));
                    }
                    providerSpecificDetails = array;
                    continue;
                }
            }
            return new RecoveryPlanProperties(friendlyName.Value, primaryFabricId.Value, primaryFabricFriendlyName.Value, recoveryFabricId.Value, recoveryFabricFriendlyName.Value, failoverDeploymentModel.Value, Optional.ToList(replicationProviders), Optional.ToList(allowedOperations), Optional.ToNullable(lastPlannedFailoverTime), Optional.ToNullable(lastUnplannedFailoverTime), Optional.ToNullable(lastTestFailoverTime), currentScenario.Value, currentScenarioStatus.Value, currentScenarioStatusDescription.Value, Optional.ToList(groups), Optional.ToList(providerSpecificDetails));
        }
    }
}
