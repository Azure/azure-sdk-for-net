// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.RecoveryServicesSiteRecovery.Models
{
    /// <summary> The SQL Server license type. </summary>
    public readonly partial struct SqlServerLicenseType : IEquatable<SqlServerLicenseType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SqlServerLicenseType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SqlServerLicenseType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NotSpecifiedValue = "NotSpecified";
        private const string NoLicenseTypeValue = "NoLicenseType";
        private const string PaygValue = "PAYG";
        private const string AhubValue = "AHUB";

        /// <summary> NotSpecified. </summary>
        public static SqlServerLicenseType NotSpecified { get; } = new SqlServerLicenseType(NotSpecifiedValue);
        /// <summary> NoLicenseType. </summary>
        public static SqlServerLicenseType NoLicenseType { get; } = new SqlServerLicenseType(NoLicenseTypeValue);
        /// <summary> PAYG. </summary>
        public static SqlServerLicenseType Payg { get; } = new SqlServerLicenseType(PaygValue);
        /// <summary> AHUB. </summary>
        public static SqlServerLicenseType Ahub { get; } = new SqlServerLicenseType(AhubValue);
        /// <summary> Determines if two <see cref="SqlServerLicenseType"/> values are the same. </summary>
        public static bool operator ==(SqlServerLicenseType left, SqlServerLicenseType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SqlServerLicenseType"/> values are not the same. </summary>
        public static bool operator !=(SqlServerLicenseType left, SqlServerLicenseType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SqlServerLicenseType"/>. </summary>
        public static implicit operator SqlServerLicenseType(string value) => new SqlServerLicenseType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SqlServerLicenseType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SqlServerLicenseType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
