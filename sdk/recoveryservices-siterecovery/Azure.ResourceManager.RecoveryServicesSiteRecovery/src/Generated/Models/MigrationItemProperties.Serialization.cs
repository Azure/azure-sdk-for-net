// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.RecoveryServicesSiteRecovery.Models
{
    public partial class MigrationItemProperties
    {
        internal static MigrationItemProperties DeserializeMigrationItemProperties(JsonElement element)
        {
            Optional<string> machineName = default;
            Optional<string> policyId = default;
            Optional<string> policyFriendlyName = default;
            Optional<string> recoveryServicesProviderId = default;
            Optional<string> replicationStatus = default;
            Optional<MigrationState> migrationState = default;
            Optional<string> migrationStateDescription = default;
            Optional<DateTimeOffset> lastTestMigrationTime = default;
            Optional<string> lastTestMigrationStatus = default;
            Optional<DateTimeOffset> lastMigrationTime = default;
            Optional<string> lastMigrationStatus = default;
            Optional<TestMigrationState> testMigrateState = default;
            Optional<string> testMigrateStateDescription = default;
            Optional<ProtectionHealth> health = default;
            Optional<IReadOnlyList<HealthError>> healthErrors = default;
            Optional<IReadOnlyList<MigrationItemOperation>> allowedOperations = default;
            Optional<CurrentJobDetails> currentJob = default;
            Optional<IReadOnlyList<CriticalJobHistoryDetails>> criticalJobHistory = default;
            Optional<string> eventCorrelationId = default;
            Optional<MigrationProviderSpecificSettings> providerSpecificDetails = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("machineName"))
                {
                    machineName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("policyId"))
                {
                    policyId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("policyFriendlyName"))
                {
                    policyFriendlyName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("recoveryServicesProviderId"))
                {
                    recoveryServicesProviderId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("replicationStatus"))
                {
                    replicationStatus = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("migrationState"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    migrationState = new MigrationState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("migrationStateDescription"))
                {
                    migrationStateDescription = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("lastTestMigrationTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    lastTestMigrationTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("lastTestMigrationStatus"))
                {
                    lastTestMigrationStatus = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("lastMigrationTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    lastMigrationTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("lastMigrationStatus"))
                {
                    lastMigrationStatus = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("testMigrateState"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    testMigrateState = new TestMigrationState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("testMigrateStateDescription"))
                {
                    testMigrateStateDescription = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("health"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    health = new ProtectionHealth(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("healthErrors"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<HealthError> array = new List<HealthError>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(HealthError.DeserializeHealthError(item));
                    }
                    healthErrors = array;
                    continue;
                }
                if (property.NameEquals("allowedOperations"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<MigrationItemOperation> array = new List<MigrationItemOperation>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new MigrationItemOperation(item.GetString()));
                    }
                    allowedOperations = array;
                    continue;
                }
                if (property.NameEquals("currentJob"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    currentJob = CurrentJobDetails.DeserializeCurrentJobDetails(property.Value);
                    continue;
                }
                if (property.NameEquals("criticalJobHistory"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<CriticalJobHistoryDetails> array = new List<CriticalJobHistoryDetails>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(CriticalJobHistoryDetails.DeserializeCriticalJobHistoryDetails(item));
                    }
                    criticalJobHistory = array;
                    continue;
                }
                if (property.NameEquals("eventCorrelationId"))
                {
                    eventCorrelationId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("providerSpecificDetails"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    providerSpecificDetails = MigrationProviderSpecificSettings.DeserializeMigrationProviderSpecificSettings(property.Value);
                    continue;
                }
            }
            return new MigrationItemProperties(machineName.Value, policyId.Value, policyFriendlyName.Value, recoveryServicesProviderId.Value, replicationStatus.Value, Optional.ToNullable(migrationState), migrationStateDescription.Value, Optional.ToNullable(lastTestMigrationTime), lastTestMigrationStatus.Value, Optional.ToNullable(lastMigrationTime), lastMigrationStatus.Value, Optional.ToNullable(testMigrateState), testMigrateStateDescription.Value, Optional.ToNullable(health), Optional.ToList(healthErrors), Optional.ToList(allowedOperations), currentJob.Value, Optional.ToList(criticalJobHistory), eventCorrelationId.Value, providerSpecificDetails.Value);
        }
    }
}
