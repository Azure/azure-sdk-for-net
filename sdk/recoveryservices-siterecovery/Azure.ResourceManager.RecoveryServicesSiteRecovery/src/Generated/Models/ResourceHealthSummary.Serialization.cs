// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.RecoveryServicesSiteRecovery.Models
{
    public partial class ResourceHealthSummary
    {
        internal static ResourceHealthSummary DeserializeResourceHealthSummary(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<int> resourceCount = default;
            Core.Optional<IReadOnlyList<HealthErrorSummary>> issues = default;
            Core.Optional<IReadOnlyDictionary<string, int>> categorizedResourceCounts = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("resourceCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    resourceCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("issues"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<HealthErrorSummary> array = new List<HealthErrorSummary>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(HealthErrorSummary.DeserializeHealthErrorSummary(item));
                    }
                    issues = array;
                    continue;
                }
                if (property.NameEquals("categorizedResourceCounts"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, int> dictionary = new Dictionary<string, int>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetInt32());
                    }
                    categorizedResourceCounts = dictionary;
                    continue;
                }
            }
            return new ResourceHealthSummary(Core.Optional.ToNullable(resourceCount), Core.Optional.ToList(issues), Core.Optional.ToDictionary(categorizedResourceCounts));
        }
    }
}
