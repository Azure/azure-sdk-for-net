// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace Azure.ResourceManager.RecoveryServicesSiteRecovery
{
    /// <summary>
    /// A class representing a collection of <see cref="SiteRecoveryMigrationRecoveryPointResource" /> and their operations.
    /// Each <see cref="SiteRecoveryMigrationRecoveryPointResource" /> in the collection will belong to the same instance of <see cref="SiteRecoveryMigrationItemResource" />.
    /// To get a <see cref="SiteRecoveryMigrationRecoveryPointCollection" /> instance call the GetSiteRecoveryMigrationRecoveryPoints method from an instance of <see cref="SiteRecoveryMigrationItemResource" />.
    /// </summary>
    public partial class SiteRecoveryMigrationRecoveryPointCollection : ArmCollection, IEnumerable<SiteRecoveryMigrationRecoveryPointResource>, IAsyncEnumerable<SiteRecoveryMigrationRecoveryPointResource>
    {
        private readonly ClientDiagnostics _siteRecoveryMigrationRecoveryPointMigrationRecoveryPointsClientDiagnostics;
        private readonly MigrationRecoveryPointsRestOperations _siteRecoveryMigrationRecoveryPointMigrationRecoveryPointsRestClient;

        /// <summary> Initializes a new instance of the <see cref="SiteRecoveryMigrationRecoveryPointCollection"/> class for mocking. </summary>
        protected SiteRecoveryMigrationRecoveryPointCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="SiteRecoveryMigrationRecoveryPointCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal SiteRecoveryMigrationRecoveryPointCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _siteRecoveryMigrationRecoveryPointMigrationRecoveryPointsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.RecoveryServicesSiteRecovery", SiteRecoveryMigrationRecoveryPointResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(SiteRecoveryMigrationRecoveryPointResource.ResourceType, out string siteRecoveryMigrationRecoveryPointMigrationRecoveryPointsApiVersion);
            _siteRecoveryMigrationRecoveryPointMigrationRecoveryPointsRestClient = new MigrationRecoveryPointsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, siteRecoveryMigrationRecoveryPointMigrationRecoveryPointsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != SiteRecoveryMigrationItemResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, SiteRecoveryMigrationItemResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Gets a recovery point for a migration item.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}/migrationRecoveryPoints/{migrationRecoveryPointName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>MigrationRecoveryPoints_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="migrationRecoveryPointName"> The migration recovery point name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="migrationRecoveryPointName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="migrationRecoveryPointName"/> is null. </exception>
        public virtual async Task<Response<SiteRecoveryMigrationRecoveryPointResource>> GetAsync(string migrationRecoveryPointName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(migrationRecoveryPointName, nameof(migrationRecoveryPointName));

            using var scope = _siteRecoveryMigrationRecoveryPointMigrationRecoveryPointsClientDiagnostics.CreateScope("SiteRecoveryMigrationRecoveryPointCollection.Get");
            scope.Start();
            try
            {
                var response = await _siteRecoveryMigrationRecoveryPointMigrationRecoveryPointsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Parent.Name, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, migrationRecoveryPointName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new SiteRecoveryMigrationRecoveryPointResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets a recovery point for a migration item.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}/migrationRecoveryPoints/{migrationRecoveryPointName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>MigrationRecoveryPoints_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="migrationRecoveryPointName"> The migration recovery point name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="migrationRecoveryPointName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="migrationRecoveryPointName"/> is null. </exception>
        public virtual Response<SiteRecoveryMigrationRecoveryPointResource> Get(string migrationRecoveryPointName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(migrationRecoveryPointName, nameof(migrationRecoveryPointName));

            using var scope = _siteRecoveryMigrationRecoveryPointMigrationRecoveryPointsClientDiagnostics.CreateScope("SiteRecoveryMigrationRecoveryPointCollection.Get");
            scope.Start();
            try
            {
                var response = _siteRecoveryMigrationRecoveryPointMigrationRecoveryPointsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Parent.Name, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, migrationRecoveryPointName, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new SiteRecoveryMigrationRecoveryPointResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the recovery points for a migration item.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}/migrationRecoveryPoints</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>MigrationRecoveryPoints_ListByReplicationMigrationItems</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SiteRecoveryMigrationRecoveryPointResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<SiteRecoveryMigrationRecoveryPointResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _siteRecoveryMigrationRecoveryPointMigrationRecoveryPointsRestClient.CreateListByReplicationMigrationItemsRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Parent.Name, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _siteRecoveryMigrationRecoveryPointMigrationRecoveryPointsRestClient.CreateListByReplicationMigrationItemsNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Parent.Name, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, NextPageRequest, e => new SiteRecoveryMigrationRecoveryPointResource(Client, SiteRecoveryMigrationRecoveryPointData.DeserializeSiteRecoveryMigrationRecoveryPointData(e)), _siteRecoveryMigrationRecoveryPointMigrationRecoveryPointsClientDiagnostics, Pipeline, "SiteRecoveryMigrationRecoveryPointCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Gets the recovery points for a migration item.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}/migrationRecoveryPoints</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>MigrationRecoveryPoints_ListByReplicationMigrationItems</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SiteRecoveryMigrationRecoveryPointResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<SiteRecoveryMigrationRecoveryPointResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _siteRecoveryMigrationRecoveryPointMigrationRecoveryPointsRestClient.CreateListByReplicationMigrationItemsRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Parent.Name, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name);
            HttpMessage NextPageRequest(int? pageSizeHint, string nextLink) => _siteRecoveryMigrationRecoveryPointMigrationRecoveryPointsRestClient.CreateListByReplicationMigrationItemsNextPageRequest(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Parent.Name, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name);
            return PageableHelpers.CreatePageable(FirstPageRequest, NextPageRequest, e => new SiteRecoveryMigrationRecoveryPointResource(Client, SiteRecoveryMigrationRecoveryPointData.DeserializeSiteRecoveryMigrationRecoveryPointData(e)), _siteRecoveryMigrationRecoveryPointMigrationRecoveryPointsClientDiagnostics, Pipeline, "SiteRecoveryMigrationRecoveryPointCollection.GetAll", "value", "nextLink", cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}/migrationRecoveryPoints/{migrationRecoveryPointName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>MigrationRecoveryPoints_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="migrationRecoveryPointName"> The migration recovery point name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="migrationRecoveryPointName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="migrationRecoveryPointName"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string migrationRecoveryPointName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(migrationRecoveryPointName, nameof(migrationRecoveryPointName));

            using var scope = _siteRecoveryMigrationRecoveryPointMigrationRecoveryPointsClientDiagnostics.CreateScope("SiteRecoveryMigrationRecoveryPointCollection.Exists");
            scope.Start();
            try
            {
                var response = await _siteRecoveryMigrationRecoveryPointMigrationRecoveryPointsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Parent.Name, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, migrationRecoveryPointName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}/migrationRecoveryPoints/{migrationRecoveryPointName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>MigrationRecoveryPoints_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="migrationRecoveryPointName"> The migration recovery point name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="migrationRecoveryPointName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="migrationRecoveryPointName"/> is null. </exception>
        public virtual Response<bool> Exists(string migrationRecoveryPointName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(migrationRecoveryPointName, nameof(migrationRecoveryPointName));

            using var scope = _siteRecoveryMigrationRecoveryPointMigrationRecoveryPointsClientDiagnostics.CreateScope("SiteRecoveryMigrationRecoveryPointCollection.Exists");
            scope.Start();
            try
            {
                var response = _siteRecoveryMigrationRecoveryPointMigrationRecoveryPointsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Parent.Parent.Name, Id.Parent.Parent.Name, Id.Parent.Name, Id.Name, migrationRecoveryPointName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<SiteRecoveryMigrationRecoveryPointResource> IEnumerable<SiteRecoveryMigrationRecoveryPointResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<SiteRecoveryMigrationRecoveryPointResource> IAsyncEnumerable<SiteRecoveryMigrationRecoveryPointResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
