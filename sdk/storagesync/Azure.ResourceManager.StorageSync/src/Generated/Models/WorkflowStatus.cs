// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.StorageSync.Models
{
    /// <summary> Type of the Workflow Status. </summary>
    public readonly partial struct WorkflowStatus : IEquatable<WorkflowStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="WorkflowStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public WorkflowStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ActiveValue = "active";
        private const string ExpiredValue = "expired";
        private const string SucceededValue = "succeeded";
        private const string AbortedValue = "aborted";
        private const string FailedValue = "failed";

        /// <summary> active. </summary>
        public static WorkflowStatus Active { get; } = new WorkflowStatus(ActiveValue);
        /// <summary> expired. </summary>
        public static WorkflowStatus Expired { get; } = new WorkflowStatus(ExpiredValue);
        /// <summary> succeeded. </summary>
        public static WorkflowStatus Succeeded { get; } = new WorkflowStatus(SucceededValue);
        /// <summary> aborted. </summary>
        public static WorkflowStatus Aborted { get; } = new WorkflowStatus(AbortedValue);
        /// <summary> failed. </summary>
        public static WorkflowStatus Failed { get; } = new WorkflowStatus(FailedValue);
        /// <summary> Determines if two <see cref="WorkflowStatus"/> values are the same. </summary>
        public static bool operator ==(WorkflowStatus left, WorkflowStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="WorkflowStatus"/> values are not the same. </summary>
        public static bool operator !=(WorkflowStatus left, WorkflowStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="WorkflowStatus"/>. </summary>
        public static implicit operator WorkflowStatus(string value) => new WorkflowStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is WorkflowStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(WorkflowStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
