// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.StorageSync.Models;

namespace Azure.ResourceManager.StorageSync
{
    public partial class WorkflowData : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Optional.IsDefined(LastStepName))
            {
                writer.WritePropertyName("lastStepName");
                writer.WriteStringValue(LastStepName);
            }
            if (Optional.IsDefined(Status))
            {
                writer.WritePropertyName("status");
                writer.WriteStringValue(Status.Value.ToString());
            }
            if (Optional.IsDefined(Operation))
            {
                writer.WritePropertyName("operation");
                writer.WriteStringValue(Operation.Value.ToString());
            }
            if (Optional.IsDefined(Steps))
            {
                writer.WritePropertyName("steps");
                writer.WriteStringValue(Steps);
            }
            if (Optional.IsDefined(LastOperationId))
            {
                writer.WritePropertyName("lastOperationId");
                writer.WriteStringValue(LastOperationId);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static WorkflowData DeserializeWorkflowData(JsonElement element)
        {
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<string> lastStepName = default;
            Optional<WorkflowStatus> status = default;
            Optional<OperationDirection> operation = default;
            Optional<string> steps = default;
            Optional<string> lastOperationId = default;
            Optional<string> commandName = default;
            Optional<DateTimeOffset> createdTimestamp = default;
            Optional<DateTimeOffset> lastStatusTimestamp = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.ToString());
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("lastStepName"))
                        {
                            lastStepName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("status"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            status = new WorkflowStatus(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("operation"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            operation = new OperationDirection(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("steps"))
                        {
                            steps = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("lastOperationId"))
                        {
                            lastOperationId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("commandName"))
                        {
                            commandName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("createdTimestamp"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            createdTimestamp = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("lastStatusTimestamp"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            lastStatusTimestamp = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new WorkflowData(id, name, type, systemData.Value, lastStepName.Value, Optional.ToNullable(status), Optional.ToNullable(operation), steps.Value, lastOperationId.Value, commandName.Value, Optional.ToNullable(createdTimestamp), Optional.ToNullable(lastStatusTimestamp));
        }
    }
}
