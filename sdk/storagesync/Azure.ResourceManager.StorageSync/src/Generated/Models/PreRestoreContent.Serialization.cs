// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net.ClientModel;
using System.Net.ClientModel.Core;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.StorageSync.Models
{
    public partial class PreRestoreContent : IUtf8JsonSerializable, IJsonModel<PreRestoreContent>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<PreRestoreContent>)this).Write(writer, ModelReaderWriterOptions.DefaultWireOptions);

        void IJsonModel<PreRestoreContent>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Partition))
            {
                writer.WritePropertyName("partition"u8);
                writer.WriteStringValue(Partition);
            }
            if (Optional.IsDefined(ReplicaGroup))
            {
                writer.WritePropertyName("replicaGroup"u8);
                writer.WriteStringValue(ReplicaGroup);
            }
            if (Optional.IsDefined(RequestId))
            {
                writer.WritePropertyName("requestId"u8);
                writer.WriteStringValue(RequestId);
            }
            if (Optional.IsDefined(AzureFileShareUri))
            {
                writer.WritePropertyName("azureFileShareUri"u8);
                writer.WriteStringValue(AzureFileShareUri.AbsoluteUri);
            }
            if (Optional.IsDefined(Status))
            {
                writer.WritePropertyName("status"u8);
                writer.WriteStringValue(Status);
            }
            if (Optional.IsDefined(SourceAzureFileShareUri))
            {
                writer.WritePropertyName("sourceAzureFileShareUri"u8);
                writer.WriteStringValue(SourceAzureFileShareUri.AbsoluteUri);
            }
            if (Optional.IsDefined(BackupMetadataPropertyBag))
            {
                writer.WritePropertyName("backupMetadataPropertyBag"u8);
                writer.WriteStringValue(BackupMetadataPropertyBag);
            }
            if (Optional.IsCollectionDefined(RestoreFileSpec))
            {
                writer.WritePropertyName("restoreFileSpec"u8);
                writer.WriteStartArray();
                foreach (var item in RestoreFileSpec)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(PauseWaitForSyncDrainTimePeriodInSeconds))
            {
                writer.WritePropertyName("pauseWaitForSyncDrainTimePeriodInSeconds"u8);
                writer.WriteNumberValue(PauseWaitForSyncDrainTimePeriodInSeconds.Value);
            }
            if (_serializedAdditionalRawData != null && options.Format == ModelReaderWriterFormat.Json)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        PreRestoreContent IJsonModel<PreRestoreContent>.Read(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == ModelReaderWriterFormat.Json || options.Format == ModelReaderWriterFormat.Wire;
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(PreRestoreContent)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializePreRestoreContent(document.RootElement, options);
        }

        internal static PreRestoreContent DeserializePreRestoreContent(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelReaderWriterOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> partition = default;
            Optional<string> replicaGroup = default;
            Optional<string> requestId = default;
            Optional<Uri> azureFileShareUri = default;
            Optional<string> status = default;
            Optional<Uri> sourceAzureFileShareUri = default;
            Optional<string> backupMetadataPropertyBag = default;
            Optional<IList<RestoreFileSpec>> restoreFileSpec = default;
            Optional<int> pauseWaitForSyncDrainTimePeriodInSeconds = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("partition"u8))
                {
                    partition = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("replicaGroup"u8))
                {
                    replicaGroup = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("requestId"u8))
                {
                    requestId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("azureFileShareUri"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    azureFileShareUri = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("status"u8))
                {
                    status = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("sourceAzureFileShareUri"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sourceAzureFileShareUri = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("backupMetadataPropertyBag"u8))
                {
                    backupMetadataPropertyBag = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("restoreFileSpec"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<RestoreFileSpec> array = new List<RestoreFileSpec>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Models.RestoreFileSpec.DeserializeRestoreFileSpec(item));
                    }
                    restoreFileSpec = array;
                    continue;
                }
                if (property.NameEquals("pauseWaitForSyncDrainTimePeriodInSeconds"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    pauseWaitForSyncDrainTimePeriodInSeconds = property.Value.GetInt32();
                    continue;
                }
                if (options.Format == ModelReaderWriterFormat.Json)
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new PreRestoreContent(partition.Value, replicaGroup.Value, requestId.Value, azureFileShareUri.Value, status.Value, sourceAzureFileShareUri.Value, backupMetadataPropertyBag.Value, Optional.ToList(restoreFileSpec), Optional.ToNullable(pauseWaitForSyncDrainTimePeriodInSeconds), serializedAdditionalRawData);
        }

        BinaryData IModel<PreRestoreContent>.Write(ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == ModelReaderWriterFormat.Json || options.Format == ModelReaderWriterFormat.Wire;
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(PreRestoreContent)} does not support '{options.Format}' format.");
            }

            return ModelReaderWriter.Write(this, options);
        }

        PreRestoreContent IModel<PreRestoreContent>.Read(BinaryData data, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == ModelReaderWriterFormat.Json || options.Format == ModelReaderWriterFormat.Wire;
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(PreRestoreContent)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.Parse(data);
            return DeserializePreRestoreContent(document.RootElement, options);
        }

        ModelReaderWriterFormat IModel<PreRestoreContent>.GetWireFormat(ModelReaderWriterOptions options) => ModelReaderWriterFormat.Json;
    }
}
