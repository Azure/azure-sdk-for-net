// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.StorageSync.Models
{
    /// <summary> Type of the Server Auth type. </summary>
    public readonly partial struct ServerAuthType : IEquatable<ServerAuthType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ServerAuthType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ServerAuthType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string CertificateValue = "Certificate";
        private const string ManagedIdentityValue = "ManagedIdentity";

        /// <summary> Certificate. </summary>
        public static ServerAuthType Certificate { get; } = new ServerAuthType(CertificateValue);
        /// <summary> ManagedIdentity. </summary>
        public static ServerAuthType ManagedIdentity { get; } = new ServerAuthType(ManagedIdentityValue);
        /// <summary> Determines if two <see cref="ServerAuthType"/> values are the same. </summary>
        public static bool operator ==(ServerAuthType left, ServerAuthType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ServerAuthType"/> values are not the same. </summary>
        public static bool operator !=(ServerAuthType left, ServerAuthType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ServerAuthType"/>. </summary>
        public static implicit operator ServerAuthType(string value) => new ServerAuthType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ServerAuthType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ServerAuthType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
