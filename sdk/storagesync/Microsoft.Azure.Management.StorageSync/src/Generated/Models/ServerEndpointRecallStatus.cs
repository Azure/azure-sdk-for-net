// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.StorageSync.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Server endpoint recall status object.
    /// </summary>
    public partial class ServerEndpointRecallStatus
    {
        /// <summary>
        /// Initializes a new instance of the ServerEndpointRecallStatus class.
        /// </summary>
        public ServerEndpointRecallStatus()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ServerEndpointRecallStatus class.
        /// </summary>
        /// <param name="lastUpdatedTimestamp">Last updated timestamp</param>
        /// <param name="totalRecallErrorsCount">Total count of recall
        /// errors.</param>
        /// <param name="recallErrors">Array of recall errors</param>
        public ServerEndpointRecallStatus(System.DateTime? lastUpdatedTimestamp = default(System.DateTime?), long? totalRecallErrorsCount = default(long?), IList<ServerEndpointRecallError> recallErrors = default(IList<ServerEndpointRecallError>))
        {
            LastUpdatedTimestamp = lastUpdatedTimestamp;
            TotalRecallErrorsCount = totalRecallErrorsCount;
            RecallErrors = recallErrors;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets last updated timestamp
        /// </summary>
        [JsonProperty(PropertyName = "lastUpdatedTimestamp")]
        public System.DateTime? LastUpdatedTimestamp { get; private set; }

        /// <summary>
        /// Gets total count of recall errors.
        /// </summary>
        [JsonProperty(PropertyName = "totalRecallErrorsCount")]
        public long? TotalRecallErrorsCount { get; private set; }

        /// <summary>
        /// Gets array of recall errors
        /// </summary>
        [JsonProperty(PropertyName = "recallErrors")]
        public IList<ServerEndpointRecallError> RecallErrors { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (TotalRecallErrorsCount < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "TotalRecallErrorsCount", 0);
            }
            if (RecallErrors != null)
            {
                foreach (var element in RecallErrors)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
