// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.StorageSync.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Sync Session status object.
    /// </summary>
    public partial class ServerEndpointSyncSessionStatus
    {
        /// <summary>
        /// Initializes a new instance of the ServerEndpointSyncSessionStatus
        /// class.
        /// </summary>
        public ServerEndpointSyncSessionStatus()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ServerEndpointSyncSessionStatus
        /// class.
        /// </summary>
        /// <param name="lastSyncResult">Last sync result (HResult)</param>
        /// <param name="lastSyncTimestamp">Last sync timestamp</param>
        /// <param name="lastSyncSuccessTimestamp">Last sync success
        /// timestamp</param>
        /// <param name="lastSyncPerItemErrorCount">Last sync per item error
        /// count.</param>
        /// <param name="persistentFilesNotSyncingCount">Count of persistent
        /// files not syncing.</param>
        /// <param name="transientFilesNotSyncingCount">Count of transient
        /// files not syncing.</param>
        /// <param name="filesNotSyncingErrors">Array of per-item errors coming
        /// from the last sync session.</param>
        public ServerEndpointSyncSessionStatus(int? lastSyncResult = default(int?), System.DateTime? lastSyncTimestamp = default(System.DateTime?), System.DateTime? lastSyncSuccessTimestamp = default(System.DateTime?), long? lastSyncPerItemErrorCount = default(long?), long? persistentFilesNotSyncingCount = default(long?), long? transientFilesNotSyncingCount = default(long?), IList<ServerEndpointFilesNotSyncingError> filesNotSyncingErrors = default(IList<ServerEndpointFilesNotSyncingError>))
        {
            LastSyncResult = lastSyncResult;
            LastSyncTimestamp = lastSyncTimestamp;
            LastSyncSuccessTimestamp = lastSyncSuccessTimestamp;
            LastSyncPerItemErrorCount = lastSyncPerItemErrorCount;
            PersistentFilesNotSyncingCount = persistentFilesNotSyncingCount;
            TransientFilesNotSyncingCount = transientFilesNotSyncingCount;
            FilesNotSyncingErrors = filesNotSyncingErrors;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets last sync result (HResult)
        /// </summary>
        [JsonProperty(PropertyName = "lastSyncResult")]
        public int? LastSyncResult { get; private set; }

        /// <summary>
        /// Gets last sync timestamp
        /// </summary>
        [JsonProperty(PropertyName = "lastSyncTimestamp")]
        public System.DateTime? LastSyncTimestamp { get; private set; }

        /// <summary>
        /// Gets last sync success timestamp
        /// </summary>
        [JsonProperty(PropertyName = "lastSyncSuccessTimestamp")]
        public System.DateTime? LastSyncSuccessTimestamp { get; private set; }

        /// <summary>
        /// Gets last sync per item error count.
        /// </summary>
        [JsonProperty(PropertyName = "lastSyncPerItemErrorCount")]
        public long? LastSyncPerItemErrorCount { get; private set; }

        /// <summary>
        /// Gets count of persistent files not syncing.
        /// </summary>
        [JsonProperty(PropertyName = "persistentFilesNotSyncingCount")]
        public long? PersistentFilesNotSyncingCount { get; private set; }

        /// <summary>
        /// Gets count of transient files not syncing.
        /// </summary>
        [JsonProperty(PropertyName = "transientFilesNotSyncingCount")]
        public long? TransientFilesNotSyncingCount { get; private set; }

        /// <summary>
        /// Gets array of per-item errors coming from the last sync session.
        /// </summary>
        [JsonProperty(PropertyName = "filesNotSyncingErrors")]
        public IList<ServerEndpointFilesNotSyncingError> FilesNotSyncingErrors { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (LastSyncPerItemErrorCount < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "LastSyncPerItemErrorCount", 0);
            }
            if (PersistentFilesNotSyncingCount < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "PersistentFilesNotSyncingCount", 0);
            }
            if (TransientFilesNotSyncingCount < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "TransientFilesNotSyncingCount", 0);
            }
            if (FilesNotSyncingErrors != null)
            {
                foreach (var element in FilesNotSyncingErrors)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
