// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.StorageSync.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Registered Server resource.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class RegisteredServer : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the RegisteredServer class.
        /// </summary>
        public RegisteredServer()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RegisteredServer class.
        /// </summary>
        /// <param name="id">Fully qualified resource Id for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}</param>
        /// <param name="name">The name of the resource</param>
        /// <param name="type">The type of the resource. Ex-
        /// Microsoft.Compute/virtualMachines or
        /// Microsoft.Storage/storageAccounts.</param>
        /// <param name="serverCertificate">Registered Server
        /// Certificate</param>
        /// <param name="agentVersion">Registered Server Agent Version</param>
        /// <param name="serverOSVersion">Registered Server OS Version</param>
        /// <param name="serverManagementErrorCode">Registered Server
        /// Management Error Code</param>
        /// <param name="lastHeartBeat">Registered Server last heart
        /// beat</param>
        /// <param name="provisioningState">Registered Server Provisioning
        /// State</param>
        /// <param name="serverRole">Registered Server serverRole</param>
        /// <param name="clusterId">Registered Server clusterId</param>
        /// <param name="clusterName">Registered Server clusterName</param>
        /// <param name="serverId">Registered Server serverId</param>
        /// <param name="storageSyncServiceUid">Registered Server
        /// storageSyncServiceUid</param>
        /// <param name="lastWorkflowId">Registered Server
        /// lastWorkflowId</param>
        /// <param name="lastOperationName">Resource Last Operation
        /// Name</param>
        /// <param name="discoveryEndpointUri">Resource
        /// discoveryEndpointUri</param>
        /// <param name="resourceLocation">Resource Location</param>
        /// <param name="serviceLocation">Service Location</param>
        /// <param name="friendlyName">Friendly Name</param>
        /// <param name="managementEndpointUri">Management Endpoint Uri</param>
        /// <param name="monitoringEndpointUri">Telemetry Endpoint Uri</param>
        /// <param name="monitoringConfiguration">Monitoring
        /// Configuration</param>
        public RegisteredServer(string id = default(string), string name = default(string), string type = default(string), string serverCertificate = default(string), string agentVersion = default(string), string serverOSVersion = default(string), int? serverManagementErrorCode = default(int?), string lastHeartBeat = default(string), string provisioningState = default(string), string serverRole = default(string), string clusterId = default(string), string clusterName = default(string), string serverId = default(string), string storageSyncServiceUid = default(string), string lastWorkflowId = default(string), string lastOperationName = default(string), string discoveryEndpointUri = default(string), string resourceLocation = default(string), string serviceLocation = default(string), string friendlyName = default(string), string managementEndpointUri = default(string), string monitoringEndpointUri = default(string), string monitoringConfiguration = default(string))
            : base(id, name, type)
        {
            ServerCertificate = serverCertificate;
            AgentVersion = agentVersion;
            ServerOSVersion = serverOSVersion;
            ServerManagementErrorCode = serverManagementErrorCode;
            LastHeartBeat = lastHeartBeat;
            ProvisioningState = provisioningState;
            ServerRole = serverRole;
            ClusterId = clusterId;
            ClusterName = clusterName;
            ServerId = serverId;
            StorageSyncServiceUid = storageSyncServiceUid;
            LastWorkflowId = lastWorkflowId;
            LastOperationName = lastOperationName;
            DiscoveryEndpointUri = discoveryEndpointUri;
            ResourceLocation = resourceLocation;
            ServiceLocation = serviceLocation;
            FriendlyName = friendlyName;
            ManagementEndpointUri = managementEndpointUri;
            MonitoringEndpointUri = monitoringEndpointUri;
            MonitoringConfiguration = monitoringConfiguration;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets registered Server Certificate
        /// </summary>
        [JsonProperty(PropertyName = "properties.serverCertificate")]
        public string ServerCertificate { get; set; }

        /// <summary>
        /// Gets or sets registered Server Agent Version
        /// </summary>
        [JsonProperty(PropertyName = "properties.agentVersion")]
        public string AgentVersion { get; set; }

        /// <summary>
        /// Gets or sets registered Server OS Version
        /// </summary>
        [JsonProperty(PropertyName = "properties.serverOSVersion")]
        public string ServerOSVersion { get; set; }

        /// <summary>
        /// Gets or sets registered Server Management Error Code
        /// </summary>
        [JsonProperty(PropertyName = "properties.serverManagementErrorCode")]
        public int? ServerManagementErrorCode { get; set; }

        /// <summary>
        /// Gets or sets registered Server last heart beat
        /// </summary>
        [JsonProperty(PropertyName = "properties.lastHeartBeat")]
        public string LastHeartBeat { get; set; }

        /// <summary>
        /// Gets or sets registered Server Provisioning State
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; set; }

        /// <summary>
        /// Gets or sets registered Server serverRole
        /// </summary>
        [JsonProperty(PropertyName = "properties.serverRole")]
        public string ServerRole { get; set; }

        /// <summary>
        /// Gets or sets registered Server clusterId
        /// </summary>
        [JsonProperty(PropertyName = "properties.clusterId")]
        public string ClusterId { get; set; }

        /// <summary>
        /// Gets or sets registered Server clusterName
        /// </summary>
        [JsonProperty(PropertyName = "properties.clusterName")]
        public string ClusterName { get; set; }

        /// <summary>
        /// Gets or sets registered Server serverId
        /// </summary>
        [JsonProperty(PropertyName = "properties.serverId")]
        public string ServerId { get; set; }

        /// <summary>
        /// Gets or sets registered Server storageSyncServiceUid
        /// </summary>
        [JsonProperty(PropertyName = "properties.storageSyncServiceUid")]
        public string StorageSyncServiceUid { get; set; }

        /// <summary>
        /// Gets or sets registered Server lastWorkflowId
        /// </summary>
        [JsonProperty(PropertyName = "properties.lastWorkflowId")]
        public string LastWorkflowId { get; set; }

        /// <summary>
        /// Gets or sets resource Last Operation Name
        /// </summary>
        [JsonProperty(PropertyName = "properties.lastOperationName")]
        public string LastOperationName { get; set; }

        /// <summary>
        /// Gets or sets resource discoveryEndpointUri
        /// </summary>
        [JsonProperty(PropertyName = "properties.discoveryEndpointUri")]
        public string DiscoveryEndpointUri { get; set; }

        /// <summary>
        /// Gets or sets resource Location
        /// </summary>
        [JsonProperty(PropertyName = "properties.resourceLocation")]
        public string ResourceLocation { get; set; }

        /// <summary>
        /// Gets or sets service Location
        /// </summary>
        [JsonProperty(PropertyName = "properties.serviceLocation")]
        public string ServiceLocation { get; set; }

        /// <summary>
        /// Gets or sets friendly Name
        /// </summary>
        [JsonProperty(PropertyName = "properties.friendlyName")]
        public string FriendlyName { get; set; }

        /// <summary>
        /// Gets or sets management Endpoint Uri
        /// </summary>
        [JsonProperty(PropertyName = "properties.managementEndpointUri")]
        public string ManagementEndpointUri { get; set; }

        /// <summary>
        /// Gets or sets telemetry Endpoint Uri
        /// </summary>
        [JsonProperty(PropertyName = "properties.monitoringEndpointUri")]
        public string MonitoringEndpointUri { get; set; }

        /// <summary>
        /// Gets or sets monitoring Configuration
        /// </summary>
        [JsonProperty(PropertyName = "properties.monitoringConfiguration")]
        public string MonitoringConfiguration { get; set; }

    }
}
