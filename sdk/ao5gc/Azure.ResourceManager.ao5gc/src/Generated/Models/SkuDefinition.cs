// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ao5gc.Models
{
    /// <summary> SKU Definitions. </summary>
    public readonly partial struct SkuDefinition : IEquatable<SkuDefinition>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SkuDefinition"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SkuDefinition(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AzureLabValue = "AzureLab";
        private const string AzureProductionValue = "AzureProduction";
        private const string NexusLabValue = "NexusLab";
        private const string NexusProductionValue = "NexusProduction";

        /// <summary> Azure Lab SKU. </summary>
        public static SkuDefinition AzureLab { get; } = new SkuDefinition(AzureLabValue);
        /// <summary> Azure Production SKU. </summary>
        public static SkuDefinition AzureProduction { get; } = new SkuDefinition(AzureProductionValue);
        /// <summary> Nexus Lab SKU. </summary>
        public static SkuDefinition NexusLab { get; } = new SkuDefinition(NexusLabValue);
        /// <summary> Nexus Production SKU. </summary>
        public static SkuDefinition NexusProduction { get; } = new SkuDefinition(NexusProductionValue);
        /// <summary> Determines if two <see cref="SkuDefinition"/> values are the same. </summary>
        public static bool operator ==(SkuDefinition left, SkuDefinition right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SkuDefinition"/> values are not the same. </summary>
        public static bool operator !=(SkuDefinition left, SkuDefinition right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SkuDefinition"/>. </summary>
        public static implicit operator SkuDefinition(string value) => new SkuDefinition(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SkuDefinition other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SkuDefinition other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
