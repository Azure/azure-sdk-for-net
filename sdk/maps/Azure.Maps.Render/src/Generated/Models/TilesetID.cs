// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Maps.Render.Models
{
    /// <summary> The TilesetID. </summary>
    public readonly partial struct TilesetID : IEquatable<TilesetID>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="TilesetID"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TilesetID(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string MicrosoftBaseValue = "microsoft.base";
        private const string MicrosoftBaseLabelsValue = "microsoft.base.labels";
        private const string MicrosoftBaseHybridValue = "microsoft.base.hybrid";
        private const string MicrosoftTerraMainValue = "microsoft.terra.main";
        private const string MicrosoftBaseRoadValue = "microsoft.base.road";
        private const string MicrosoftBaseDarkgreyValue = "microsoft.base.darkgrey";
        private const string MicrosoftBaseLabelsRoadValue = "microsoft.base.labels.road";
        private const string MicrosoftBaseHybridRoadValue = "microsoft.base.hybrid.road";
        private const string MicrosoftImageryValue = "microsoft.imagery";
        private const string MicrosoftWeatherRadarMainValue = "microsoft.weather.radar.main";
        private const string MicrosoftWeatherInfraredMainValue = "microsoft.weather.infrared.main";
        private const string MicrosoftDemValue = "microsoft.dem";

        /// <summary>
        /// A base map is a standard map that displays roads, natural and artificial features along with the labels for those features in a vector tile.&lt;br&gt;
        /// 
        /// Supports zoom levels 0 through 22. Format: vector (pbf).
        /// </summary>
        public static TilesetID MicrosoftBase { get; } = new TilesetID(MicrosoftBaseValue);
        /// <summary>
        /// Displays labels for roads, natural and artificial features in a vector tile.&lt;br&gt;
        /// 
        /// Supports zoom levels 0 through 22. Format: vector (pbf).
        /// </summary>
        public static TilesetID MicrosoftBaseLabels { get; } = new TilesetID(MicrosoftBaseLabelsValue);
        /// <summary>
        /// Displays road, boundary and label data in a vector tile.&lt;br&gt;
        /// 
        /// Supports zoom levels 0 through 22. Format: vector (pbf).
        /// </summary>
        public static TilesetID MicrosoftBaseHybrid { get; } = new TilesetID(MicrosoftBaseHybridValue);
        /// <summary>
        /// Shaded relief and terra layers.&lt;br&gt;
        /// 
        /// Supports zoom levels 0 through 6. Format: raster (png).
        /// </summary>
        public static TilesetID MicrosoftTerraMain { get; } = new TilesetID(MicrosoftTerraMainValue);
        /// <summary>
        /// All layers with our main style.&lt;br&gt;
        /// 
        /// Supports zoom levels 0 through 22. Format: raster (png).
        /// </summary>
        public static TilesetID MicrosoftBaseRoad { get; } = new TilesetID(MicrosoftBaseRoadValue);
        /// <summary>
        /// All layers with our dark grey style.&lt;br&gt;
        /// 
        /// Supports zoom levels 0 through 22. Format: raster (png).
        /// </summary>
        public static TilesetID MicrosoftBaseDarkgrey { get; } = new TilesetID(MicrosoftBaseDarkgreyValue);
        /// <summary>
        /// Label data in our main style.&lt;br&gt;
        /// 
        /// Supports zoom levels 0 through 22. Format: raster (png).
        /// </summary>
        public static TilesetID MicrosoftBaseLabelsRoad { get; } = new TilesetID(MicrosoftBaseLabelsRoadValue);
        /// <summary>
        /// Road, boundary and label data in our main style.&lt;br&gt;
        /// 
        /// Supports zoom levels 0 through 22. Format: raster (png).
        /// </summary>
        public static TilesetID MicrosoftBaseHybridRoad { get; } = new TilesetID(MicrosoftBaseHybridRoadValue);
        /// <summary>
        /// A combination of satellite and aerial imagery. Only available in S1 pricing SKU.&lt;br&gt;
        /// 
        /// Supports zoom levels 1 through 19. Format: raster (jpeg).
        /// </summary>
        public static TilesetID MicrosoftImagery { get; } = new TilesetID(MicrosoftImageryValue);
        /// <summary>
        /// Weather radar tiles. Latest weather radar images including areas of rain, snow, ice and mixed conditions. Please see [coverage information](https://aka.ms/AzureMapsWeatherCoverage) for Azure Maps Weather service.  To learn more about the Radar data, please see [Weather concepts](https://aka.ms/AzureMapsWeatherConcepts).&lt;br&gt;
        /// 
        /// Supports zoom levels 0 through 15. Format: raster (png).
        /// </summary>
        public static TilesetID MicrosoftWeatherRadarMain { get; } = new TilesetID(MicrosoftWeatherRadarMainValue);
        /// <summary>
        /// Weather infrared tiles. Latest Infrared Satellite images shows clouds by their temperature.  Please see [coverage information](https://aka.ms/AzureMapsWeatherCoverage) for Azure Maps Weather service. To learn more about the returned Satellite data, please see [Weather concepts](https://aka.ms/AzureMapsWeatherConcepts).&lt;br&gt;
        /// 
        /// Supports zoom levels 0 through 15. Format: raster (png).
        /// </summary>
        public static TilesetID MicrosoftWeatherInfraredMain { get; } = new TilesetID(MicrosoftWeatherInfraredMainValue);
        /// <summary>
        /// Digital Elevation Model tiles. The tiles are in the GeoTIFF format with a single 32-bit floating point band. The tiles cover the whole landmass of Earth. Some small islands (e.g., atolls) might not be represented accurately.&lt;br&gt;
        /// * The vertical unit for measurement of elevation height is meters. An elevation value of -32767.0 is used for points that have no data value, most often returned where there isn&apos;t landmass (i.e. water).&lt;br&gt;
        /// * The horizontal reference datum is the World Geodetic System 1984 (WGS84-G1150) and the vertical reference datum is the Earth Gravitational Model 2008 (EGM2008).&lt;br&gt;
        /// * Tiles are 258x258 pixel squares rather than the standard 256 x 256. This is done to allow for accurate interpolation of values at the tile edges. As such adjacent tiles overlap by 1 pixel along all edges.&lt;br&gt;
        /// * Tile data comes from the [Airbus WorldDEM4Ortho product](https://www.intelligence-airbusds.com/worlddem-streaming/). Urban areas are approximately leveled down to ground level. All other areas are represented by the object surface level (e.g., trees). &lt;br&gt;
        /// 
        /// Supports zoom level 13 only. Format: raster (tiff).
        /// </summary>
        public static TilesetID MicrosoftDem { get; } = new TilesetID(MicrosoftDemValue);
        /// <summary> Determines if two <see cref="TilesetID"/> values are the same. </summary>
        public static bool operator ==(TilesetID left, TilesetID right) => left.Equals(right);
        /// <summary> Determines if two <see cref="TilesetID"/> values are not the same. </summary>
        public static bool operator !=(TilesetID left, TilesetID right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="TilesetID"/>. </summary>
        public static implicit operator TilesetID(string value) => new TilesetID(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TilesetID other && Equals(other);
        /// <inheritdoc />
        public bool Equals(TilesetID other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
