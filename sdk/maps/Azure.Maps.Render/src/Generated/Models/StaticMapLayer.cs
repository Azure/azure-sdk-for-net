// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Maps.Render.Models
{
    /// <summary> The StaticMapLayer. </summary>
    public readonly partial struct StaticMapLayer : IEquatable<StaticMapLayer>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="StaticMapLayer"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public StaticMapLayer(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string BasicValue = "basic";
        private const string HybridValue = "hybrid";
        private const string LabelsValue = "labels";

        /// <summary> Returns an image containing all map features including polygons, borders, roads and labels. </summary>
        public static StaticMapLayer Basic { get; } = new StaticMapLayer(BasicValue);
        /// <summary> Returns an image containing borders, roads, and labels, and can be overlaid on other tiles (such as satellite imagery) to produce hybrid tiles. </summary>
        public static StaticMapLayer Hybrid { get; } = new StaticMapLayer(HybridValue);
        /// <summary> Returns an image of just the map&apos;s label information. </summary>
        public static StaticMapLayer Labels { get; } = new StaticMapLayer(LabelsValue);
        /// <summary> Determines if two <see cref="StaticMapLayer"/> values are the same. </summary>
        public static bool operator ==(StaticMapLayer left, StaticMapLayer right) => left.Equals(right);
        /// <summary> Determines if two <see cref="StaticMapLayer"/> values are not the same. </summary>
        public static bool operator !=(StaticMapLayer left, StaticMapLayer right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="StaticMapLayer"/>. </summary>
        public static implicit operator StaticMapLayer(string value) => new StaticMapLayer(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is StaticMapLayer other && Equals(other);
        /// <inheritdoc />
        public bool Equals(StaticMapLayer other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
