// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Maps.Render.Models
{
    /// <summary> The TileSize. </summary>
    public readonly partial struct TileSize : IEquatable<TileSize>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="TileSize"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TileSize(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string TwoHundredFiftySixValue = "256";
        private const string FiveHundredTwelveValue = "512";

        /// <summary>
        /// Return a 256 by 256 pixel tile. Available for all tilesetIds except for
        /// * microsoft.terra.main.
        /// </summary>
        public static TileSize TwoHundredFiftySix { get; } = new TileSize(TwoHundredFiftySixValue);
        /// <summary>
        /// Return a 512 by 512 pixel tile.  Available for all tilesetIds except for
        /// * microsoft.weather.radar.main
        /// * microsoft.weather.infrared.main
        /// * microsoft.base.hybrid
        /// * microsoft.dem
        /// * microsoft.imagery.
        /// </summary>
        public static TileSize FiveHundredTwelve { get; } = new TileSize(FiveHundredTwelveValue);
        /// <summary> Determines if two <see cref="TileSize"/> values are the same. </summary>
        public static bool operator ==(TileSize left, TileSize right) => left.Equals(right);
        /// <summary> Determines if two <see cref="TileSize"/> values are not the same. </summary>
        public static bool operator !=(TileSize left, TileSize right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="TileSize"/>. </summary>
        public static implicit operator TileSize(string value) => new TileSize(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TileSize other && Equals(other);
        /// <inheritdoc />
        public bool Equals(TileSize other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
