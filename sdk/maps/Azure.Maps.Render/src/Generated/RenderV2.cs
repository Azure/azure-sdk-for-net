// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.Maps.Render
{
    using Microsoft.Rest;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// RenderV2 operations.
    /// </summary>
    public partial class RenderV2 : IServiceOperations<RenderClient>, IRenderV2
    {
        /// <summary>
        /// Initializes a new instance of the RenderV2 class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public RenderV2(RenderClient client)
        {
            if (client == null)
            {
                throw new System.ArgumentNullException("client");
            }
            Client = client;
        }

        /// <summary>
        /// Gets a reference to the RenderClient
        /// </summary>
        public RenderClient Client { get; private set; }

        /// <summary>
        /// **Applies to**: S0 and S1 pricing tiers.
        ///
        /// The Get Map Tiles API allows users to request map tiles in vector or raster
        /// formats typically to be integrated  into a map control or SDK. Some example
        /// tiles that can be requested are Azure Maps road tiles, real-time  Weather
        /// Radar tiles or the map tiles created using [Azure Maps
        /// Creator](https://aka.ms/amcreator). By default,  Azure Maps uses vector
        /// tiles for its web map control (Web SDK) and Android SDK.
        /// </summary>
        /// <param name='tilesetId'>
        /// A tileset is a collection of raster or vector data broken up into a uniform
        /// grid of square tiles at preset  zoom levels. Every tileset has a
        /// **tilesetId** to use when making requests. The **tilesetId** for tilesets
        /// created using [Azure Maps Creator](https://aka.ms/amcreator) are generated
        /// through the  [Tileset Create
        /// API](https://docs.microsoft.com/en-us/rest/api/maps/tileset). The
        /// ready-to-use tilesets supplied  by Azure Maps are listed below. For
        /// example, microsoft.base. Possible values include: 'microsoft.base',
        /// 'microsoft.base.labels', 'microsoft.base.hybrid', 'microsoft.terra.main',
        /// 'microsoft.base.road', 'microsoft.base.darkgrey',
        /// 'microsoft.base.labels.road', 'microsoft.base.hybrid.road',
        /// 'microsoft.imagery', 'microsoft.weather.radar.main',
        /// 'microsoft.weather.infrared.main', 'microsoft.dem'
        /// </param>
        /// <param name='zoom'>
        /// Zoom level for the desired tile. Please find TilesetID list below for more
        /// details on supported zoom level for each tilesetId.&lt;br&gt;
        ///
        /// Please see [Zoom Levels and Tile
        /// Grid](https://docs.microsoft.com/en-us/azure/location-based-services/zoom-levels-and-tile-grid)
        /// for details.
        /// </param>
        /// <param name='xTileIndex'>
        /// X coordinate of the tile on zoom grid. Value must be in the range [0,
        /// 2&lt;sup&gt;`zoom`&lt;/sup&gt; -1].
        ///
        /// Please see [Zoom Levels and Tile
        /// Grid](https://docs.microsoft.com/en-us/azure/location-based-services/zoom-levels-and-tile-grid)
        /// for details.
        /// </param>
        /// <param name='yTileIndex'>
        /// Y coordinate of the tile on zoom grid. Value must be in the range [0,
        /// 2&lt;sup&gt;`zoom`&lt;/sup&gt; -1].
        ///
        /// Please see [Zoom Levels and Tile
        /// Grid](https://docs.microsoft.com/en-us/azure/location-based-services/zoom-levels-and-tile-grid)
        /// for details.
        /// </param>
        /// <param name='timeStamp'>
        /// The desired date and time of the requested tile. This parameter must be
        /// specified in the standard date-time format (e.g.
        /// 2019-11-14T16:03:00-08:00), as defined by [ISO
        /// 8601](https://en.wikipedia.org/wiki/ISO_8601). This parameter is only
        /// supported when tilesetId parameter is set to one of the values below.
        ///
        /// * microsoft.weather.infrared.main: We provide tiles up to 3 hours in the
        /// past. Tiles are available in 10-minute intervals. We round the timeStamp
        /// value to the nearest 10-minute time frame.
        /// * microsoft.weather.radar.main: We provide tiles up to 1.5 hours in the
        /// past and up to 2 hours in the future. Tiles are available in 5-minute
        /// intervals. We round the timeStamp value to the nearest 5-minute time frame.
        /// </param>
        /// <param name='tileSize'>
        /// The size of the returned map tile in pixels. Possible values include:
        /// '256', '512'
        /// </param>
        /// <param name='language'>
        /// Language in which search results should be returned. Should be one of
        /// supported IETF language tags, case insensitive. When data in specified
        /// language is not available for a specific field, default language is used.
        ///
        /// Please refer to [Supported
        /// Languages](https://docs.microsoft.com/en-us/azure/azure-maps/supported-languages)
        /// for details.
        /// </param>
        /// <param name='view'>
        /// The View parameter specifies which set of geopolitically disputed content
        /// is returned via Azure Maps services, including  borders and labels
        /// displayed on the map. The View parameter (also referred to as “user region
        /// parameter”) will show the  correct maps for that country/region. By
        /// default, the View parameter is set to “Unified” even if you haven’t defined
        /// it in  the request. It is your responsibility to determine the location of
        /// your users, and then set the View parameter correctly  for that location.
        /// Alternatively, you have the option to set ‘View=Auto’, which will return
        /// the map data based on the IP  address of the request. The View parameter in
        /// Azure Maps must be used in compliance with applicable laws, including those
        /// regarding mapping, of the country where maps, images and other data and
        /// third party content that you are authorized to  access via Azure Maps is
        /// made available. Example: view=IN.
        ///
        /// Please refer to [Supported
        /// Views](https://aka.ms/AzureMapsLocalizationViews) for details and to see
        /// the available Views.
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async Task<HttpOperationResponse<Stream,RenderV2GetMapTilePreviewHeaders>> GetMapTilePreviewWithHttpMessagesAsync(string tilesetId, int zoom, int xTileIndex, int yTileIndex, string timeStamp = default(string), string tileSize = default(string), string language = default(string), string view = default(string), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken))
        {
            if (Client.Geography == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "this.Client.Geography");
            }
            if (tilesetId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "tilesetId");
            }
            string apiVersion = "2.0";
            // Tracing
            bool _shouldTrace = ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = ServiceClientTracing.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("apiVersion", apiVersion);
                tracingParameters.Add("tilesetId", tilesetId);
                tracingParameters.Add("zoom", zoom);
                tracingParameters.Add("xTileIndex", xTileIndex);
                tracingParameters.Add("yTileIndex", yTileIndex);
                tracingParameters.Add("timeStamp", timeStamp);
                tracingParameters.Add("tileSize", tileSize);
                tracingParameters.Add("language", language);
                tracingParameters.Add("view", view);
                tracingParameters.Add("cancellationToken", cancellationToken);
                ServiceClientTracing.Enter(_invocationId, this, "GetMapTilePreview", tracingParameters);
            }
            // Construct URL
            var _baseUrl = Client.BaseUri;
            var _url = _baseUrl + (_baseUrl.EndsWith("/") ? "" : "/") + "map/tile";
            _url = _url.Replace("{geography}", System.Uri.EscapeDataString(Client.Geography));
            List<string> _queryParameters = new List<string>();
            if (apiVersion != null)
            {
                _queryParameters.Add(string.Format("api-version={0}", System.Uri.EscapeDataString(apiVersion)));
            }
            if (tilesetId != null)
            {
                _queryParameters.Add(string.Format("tilesetId={0}", System.Uri.EscapeDataString(tilesetId)));
            }
            _queryParameters.Add(string.Format("zoom={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(zoom, Client.SerializationSettings).Trim('"'))));
            _queryParameters.Add(string.Format("x={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(xTileIndex, Client.SerializationSettings).Trim('"'))));
            _queryParameters.Add(string.Format("y={0}", System.Uri.EscapeDataString(Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(yTileIndex, Client.SerializationSettings).Trim('"'))));
            if (timeStamp != null)
            {
                _queryParameters.Add(string.Format("timeStamp={0}", System.Uri.EscapeDataString(timeStamp)));
            }
            if (tileSize != null)
            {
                _queryParameters.Add(string.Format("tileSize={0}", System.Uri.EscapeDataString(tileSize)));
            }
            if (language != null)
            {
                _queryParameters.Add(string.Format("language={0}", System.Uri.EscapeDataString(language)));
            }
            if (view != null)
            {
                _queryParameters.Add(string.Format("view={0}", System.Uri.EscapeDataString(view)));
            }
            if (_queryParameters.Count > 0)
            {
                _url += "?" + string.Join("&", _queryParameters);
            }
            // Create HTTP transport objects
            var _httpRequest = new HttpRequestMessage();
            HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers
            if (Client.XMsClientId != null)
            {
                if (_httpRequest.Headers.Contains("x-ms-client-id"))
                {
                    _httpRequest.Headers.Remove("x-ms-client-id");
                }
                _httpRequest.Headers.TryAddWithoutValidation("x-ms-client-id", Client.XMsClientId);
            }


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (Client.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await Client.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await Client.HttpClient.SendAsync(_httpRequest, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200)
            {
                var ex = new ErrorResponseException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                try
                {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                    ErrorResponse _errorBody =  Microsoft.Rest.Serialization.SafeJsonConvert.DeserializeObject<ErrorResponse>(_responseContent, Client.DeserializationSettings);
                    if (_errorBody != null)
                    {
                        ex.Body = _errorBody;
                    }
                }
                catch (JsonException)
                {
                    // Ignore the exception
                }
                ex.Request = new HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new HttpOperationResponse<Stream,RenderV2GetMapTilePreviewHeaders>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _result.Body = await _httpResponse.Content.ReadAsStreamAsync().ConfigureAwait(false);
            }
            try
            {
                _result.Headers = _httpResponse.GetHeadersAsJson().ToObject<RenderV2GetMapTilePreviewHeaders>(JsonSerializer.Create(Client.DeserializationSettings));
            }
            catch (JsonException ex)
            {
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw new SerializationException("Unable to deserialize the headers.", _httpResponse.GetHeadersAsJson().ToString(), ex);
            }
            if (_shouldTrace)
            {
                ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

    }
}
