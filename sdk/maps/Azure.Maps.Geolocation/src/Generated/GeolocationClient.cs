// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.Maps.Geolocation.Models;

namespace Azure.Maps.Geolocation
{
    /// <summary> The Geolocation service client. </summary>
    public partial class GeolocationClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal GeolocationRestClient RestClient { get; }

        /// <summary> Initializes a new instance of GeolocationClient for mocking. </summary>
        protected GeolocationClient()
        {
        }

        /// <summary> Initializes a new instance of GeolocationClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="xMsClientId"> Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public GeolocationClient(TokenCredential credential, Geography? geography = default, string xMsClientId = null, GeolocationClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new GeolocationClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            string[] scopes = { "https://atlas.microsoft.com/.default" };
            _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
            RestClient = new GeolocationRestClient(_clientDiagnostics, _pipeline, geography, xMsClientId, options.Version);
        }

        /// <summary> Initializes a new instance of GeolocationClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="xMsClientId"> Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public GeolocationClient(AzureKeyCredential credential, Geography? geography = default, string xMsClientId = null, GeolocationClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new GeolocationClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            _pipeline = HttpPipelineBuilder.Build(options, new AzureKeyCredentialPolicy(credential, "subscription-key"));
            RestClient = new GeolocationRestClient(_clientDiagnostics, _pipeline, geography, xMsClientId, options.Version);
        }

        /// <summary> Initializes a new instance of GeolocationClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="xMsClientId"> Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. </param>
        /// <param name="apiVersion"> Api Version. </param>
        internal GeolocationClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Geography? geography = default, string xMsClientId = null, string apiVersion = "1.0")
        {
            RestClient = new GeolocationRestClient(clientDiagnostics, pipeline, geography, xMsClientId, apiVersion);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary>
        /// 
        /// **Applies to**: S0 and S1 pricing tiers.
        /// 
        /// 
        /// This service will return the ISO country code for the provided IP address. Developers can use this information  to block or alter certain content based on geographical locations where the application is being viewed from.
        /// 
        /// 
        /// __Note:__ This service returns results from IANA and does not necessarily reflect the views of Microsoft  Corporation.
        /// </summary>
        /// <param name="format"> Desired format of the response. Only `json` format is supported. </param>
        /// <param name="ip"> The IP address. Both IPv4 and IPv6 are allowed. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<IpAddressToLocationResult>> GetIPToLocationPreviewAsync(ResponseFormat format, string ip, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GeolocationClient.GetIPToLocationPreview");
            scope.Start();
            try
            {
                return await RestClient.GetIPToLocationPreviewAsync(format, ip, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// 
        /// **Applies to**: S0 and S1 pricing tiers.
        /// 
        /// 
        /// This service will return the ISO country code for the provided IP address. Developers can use this information  to block or alter certain content based on geographical locations where the application is being viewed from.
        /// 
        /// 
        /// __Note:__ This service returns results from IANA and does not necessarily reflect the views of Microsoft  Corporation.
        /// </summary>
        /// <param name="format"> Desired format of the response. Only `json` format is supported. </param>
        /// <param name="ip"> The IP address. Both IPv4 and IPv6 are allowed. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<IpAddressToLocationResult> GetIPToLocationPreview(ResponseFormat format, string ip, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("GeolocationClient.GetIPToLocationPreview");
            scope.Start();
            try
            {
                return RestClient.GetIPToLocationPreview(format, ip, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
