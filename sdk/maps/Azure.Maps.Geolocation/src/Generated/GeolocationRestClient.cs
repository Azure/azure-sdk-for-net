// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.Maps.Geolocation.Models;

namespace Azure.Maps.Geolocation
{
    internal partial class GeolocationRestClient
    {
        private Geography? geography;
        private string xMsClientId;
        private string apiVersion;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of GeolocationRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="xMsClientId"> Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. </param>
        /// <param name="apiVersion"> Api Version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        public GeolocationRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Geography? geography = default, string xMsClientId = null, string apiVersion = "1.0")
        {
            geography ??= Geography.Us;
            if (apiVersion == null)
            {
                throw new ArgumentNullException(nameof(apiVersion));
            }

            this.geography = geography;
            this.xMsClientId = xMsClientId;
            this.apiVersion = apiVersion;
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        internal HttpMessage CreateGetIPToLocationPreviewRequest(ResponseFormat format, string ip)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(geography.Value, true);
            uri.AppendRaw(".atlas.microsoft.com", false);
            uri.AppendPath("/geolocation/ip/", false);
            uri.AppendPath(format.ToString(), true);
            uri.AppendQuery("api-version", apiVersion, true);
            uri.AppendQuery("ip", ip, true);
            request.Uri = uri;
            if (xMsClientId != null)
            {
                request.Headers.Add("x-ms-client-id", xMsClientId);
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// 
        /// **Applies to**: S0 and S1 pricing tiers.
        /// 
        /// 
        /// This service will return the ISO country code for the provided IP address. Developers can use this information  to block or alter certain content based on geographical locations where the application is being viewed from.
        /// 
        /// 
        /// __Note:__ This service returns results from IANA and does not necessarily reflect the views of Microsoft  Corporation.
        /// </summary>
        /// <param name="format"> Desired format of the response. Only `json` format is supported. </param>
        /// <param name="ip"> The IP address. Both IPv4 and IPv6 are allowed. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ip"/> is null. </exception>
        public async Task<Response<IpAddressToLocationResult>> GetIPToLocationPreviewAsync(ResponseFormat format, string ip, CancellationToken cancellationToken = default)
        {
            if (ip == null)
            {
                throw new ArgumentNullException(nameof(ip));
            }

            using var message = CreateGetIPToLocationPreviewRequest(format, ip);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IpAddressToLocationResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = IpAddressToLocationResult.DeserializeIpAddressToLocationResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// 
        /// **Applies to**: S0 and S1 pricing tiers.
        /// 
        /// 
        /// This service will return the ISO country code for the provided IP address. Developers can use this information  to block or alter certain content based on geographical locations where the application is being viewed from.
        /// 
        /// 
        /// __Note:__ This service returns results from IANA and does not necessarily reflect the views of Microsoft  Corporation.
        /// </summary>
        /// <param name="format"> Desired format of the response. Only `json` format is supported. </param>
        /// <param name="ip"> The IP address. Both IPv4 and IPv6 are allowed. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="ip"/> is null. </exception>
        public Response<IpAddressToLocationResult> GetIPToLocationPreview(ResponseFormat format, string ip, CancellationToken cancellationToken = default)
        {
            if (ip == null)
            {
                throw new ArgumentNullException(nameof(ip));
            }

            using var message = CreateGetIPToLocationPreviewRequest(format, ip);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IpAddressToLocationResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = IpAddressToLocationResult.DeserializeIpAddressToLocationResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
