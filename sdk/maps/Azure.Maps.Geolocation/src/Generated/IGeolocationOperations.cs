// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.Maps.Geolocation
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// GeolocationOperations operations.
    /// </summary>
    public partial interface IGeolocationOperations
    {
        /// <summary>
        ///
        /// **Applies to**: S0 and S1 pricing tiers.
        ///
        ///
        /// This service will return the ISO country code for the provided IP
        /// address. Developers can use this information  to block or alter
        /// certain content based on geographical locations where the
        /// application is being viewed from.
        ///
        ///
        /// __Note:__ This service returns results from IANA and does not
        /// necessarily reflect the views of Microsoft  Corporation.
        /// </summary>
        /// <param name='ip'>
        /// The IP address. Both IPv4 and IPv6 are allowed.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorResponseException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<IpAddressToLocationResult>> GetIPToLocationPreviewWithHttpMessagesAsync(string ip, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
