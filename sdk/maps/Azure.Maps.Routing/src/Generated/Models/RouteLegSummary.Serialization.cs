// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net.ClientModel;
using System.Net.ClientModel.Core;
using System.Text.Json;
using Azure.Core;

namespace Azure.Maps.Routing.Models
{
    public partial class RouteLegSummary : IUtf8JsonSerializable, IJsonModel<RouteLegSummary>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<RouteLegSummary>)this).Write(writer, ModelReaderWriterOptions.DefaultWireOptions);

        void IJsonModel<RouteLegSummary>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            if (options.Format == ModelReaderWriterFormat.Json)
            {
                if (Optional.IsDefined(LengthInMeters))
                {
                    writer.WritePropertyName("lengthInMeters"u8);
                    writer.WriteNumberValue(LengthInMeters.Value);
                }
            }
            if (options.Format == ModelReaderWriterFormat.Json)
            {
                if (Optional.IsDefined(TravelTimeInSeconds))
                {
                    writer.WritePropertyName("travelTimeInSeconds"u8);
                    writer.WriteNumberValue(TravelTimeInSeconds.Value);
                }
            }
            if (options.Format == ModelReaderWriterFormat.Json)
            {
                if (Optional.IsDefined(TrafficDelayInSeconds))
                {
                    writer.WritePropertyName("trafficDelayInSeconds"u8);
                    writer.WriteNumberValue(TrafficDelayInSeconds.Value);
                }
            }
            if (options.Format == ModelReaderWriterFormat.Json)
            {
                if (Optional.IsDefined(DepartureTime))
                {
                    writer.WritePropertyName("departureTime"u8);
                    writer.WriteStringValue(DepartureTime.Value, "O");
                }
            }
            if (options.Format == ModelReaderWriterFormat.Json)
            {
                if (Optional.IsDefined(ArrivalTime))
                {
                    writer.WritePropertyName("arrivalTime"u8);
                    writer.WriteStringValue(ArrivalTime.Value, "O");
                }
            }
            if (options.Format == ModelReaderWriterFormat.Json)
            {
                if (Optional.IsDefined(NoTrafficTravelTimeInSeconds))
                {
                    writer.WritePropertyName("noTrafficTravelTimeInSeconds"u8);
                    writer.WriteNumberValue(NoTrafficTravelTimeInSeconds.Value);
                }
            }
            if (options.Format == ModelReaderWriterFormat.Json)
            {
                if (Optional.IsDefined(HistoricTrafficTravelTimeInSeconds))
                {
                    writer.WritePropertyName("historicTrafficTravelTimeInSeconds"u8);
                    writer.WriteNumberValue(HistoricTrafficTravelTimeInSeconds.Value);
                }
            }
            if (options.Format == ModelReaderWriterFormat.Json)
            {
                if (Optional.IsDefined(LiveTrafficIncidentsTravelTimeInSeconds))
                {
                    writer.WritePropertyName("liveTrafficIncidentsTravelTimeInSeconds"u8);
                    writer.WriteNumberValue(LiveTrafficIncidentsTravelTimeInSeconds.Value);
                }
            }
            if (options.Format == ModelReaderWriterFormat.Json)
            {
                if (Optional.IsDefined(FuelConsumptionInLiters))
                {
                    writer.WritePropertyName("fuelConsumptionInLiters"u8);
                    writer.WriteNumberValue(FuelConsumptionInLiters.Value);
                }
            }
            if (options.Format == ModelReaderWriterFormat.Json)
            {
                if (Optional.IsDefined(BatteryConsumptionInKwH))
                {
                    writer.WritePropertyName("batteryConsumptionInkWh"u8);
                    writer.WriteNumberValue(BatteryConsumptionInKwH.Value);
                }
            }
            if (_serializedAdditionalRawData != null && options.Format == ModelReaderWriterFormat.Json)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        RouteLegSummary IJsonModel<RouteLegSummary>.Read(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == ModelReaderWriterFormat.Json || options.Format == ModelReaderWriterFormat.Wire;
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(RouteLegSummary)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeRouteLegSummary(document.RootElement, options);
        }

        internal static RouteLegSummary DeserializeRouteLegSummary(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelReaderWriterOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<int> lengthInMeters = default;
            Optional<int> travelTimeInSeconds = default;
            Optional<int> trafficDelayInSeconds = default;
            Optional<DateTimeOffset> departureTime = default;
            Optional<DateTimeOffset> arrivalTime = default;
            Optional<int> noTrafficTravelTimeInSeconds = default;
            Optional<int> historicTrafficTravelTimeInSeconds = default;
            Optional<int> liveTrafficIncidentsTravelTimeInSeconds = default;
            Optional<double> fuelConsumptionInLiters = default;
            Optional<double> batteryConsumptionInkWh = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("lengthInMeters"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lengthInMeters = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("travelTimeInSeconds"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    travelTimeInSeconds = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("trafficDelayInSeconds"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    trafficDelayInSeconds = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("departureTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    departureTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("arrivalTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    arrivalTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("noTrafficTravelTimeInSeconds"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    noTrafficTravelTimeInSeconds = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("historicTrafficTravelTimeInSeconds"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    historicTrafficTravelTimeInSeconds = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("liveTrafficIncidentsTravelTimeInSeconds"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    liveTrafficIncidentsTravelTimeInSeconds = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("fuelConsumptionInLiters"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    fuelConsumptionInLiters = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("batteryConsumptionInkWh"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    batteryConsumptionInkWh = property.Value.GetDouble();
                    continue;
                }
                if (options.Format == ModelReaderWriterFormat.Json)
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new RouteLegSummary(Optional.ToNullable(lengthInMeters), Optional.ToNullable(travelTimeInSeconds), Optional.ToNullable(trafficDelayInSeconds), Optional.ToNullable(departureTime), Optional.ToNullable(arrivalTime), Optional.ToNullable(noTrafficTravelTimeInSeconds), Optional.ToNullable(historicTrafficTravelTimeInSeconds), Optional.ToNullable(liveTrafficIncidentsTravelTimeInSeconds), Optional.ToNullable(fuelConsumptionInLiters), Optional.ToNullable(batteryConsumptionInkWh), serializedAdditionalRawData);
        }

        BinaryData IModel<RouteLegSummary>.Write(ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == ModelReaderWriterFormat.Json || options.Format == ModelReaderWriterFormat.Wire;
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(RouteLegSummary)} does not support '{options.Format}' format.");
            }

            return ModelReaderWriter.Write(this, options);
        }

        RouteLegSummary IModel<RouteLegSummary>.Read(BinaryData data, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == ModelReaderWriterFormat.Json || options.Format == ModelReaderWriterFormat.Wire;
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(RouteLegSummary)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.Parse(data);
            return DeserializeRouteLegSummary(document.RootElement, options);
        }

        ModelReaderWriterFormat IModel<RouteLegSummary>.GetWireFormat(ModelReaderWriterOptions options) => ModelReaderWriterFormat.Json;
    }
}
