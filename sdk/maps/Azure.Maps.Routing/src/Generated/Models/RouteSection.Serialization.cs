// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net.ClientModel;
using System.Net.ClientModel.Core;
using System.Text.Json;
using Azure.Core;

namespace Azure.Maps.Routing.Models
{
    public partial class RouteSection : IUtf8JsonSerializable, IJsonModel<RouteSection>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<RouteSection>)this).Write(writer, ModelReaderWriterOptions.DefaultWireOptions);

        void IJsonModel<RouteSection>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            if (options.Format == ModelReaderWriterFormat.Json)
            {
                if (Optional.IsDefined(StartPointIndex))
                {
                    writer.WritePropertyName("startPointIndex"u8);
                    writer.WriteNumberValue(StartPointIndex.Value);
                }
            }
            if (options.Format == ModelReaderWriterFormat.Json)
            {
                if (Optional.IsDefined(EndPointIndex))
                {
                    writer.WritePropertyName("endPointIndex"u8);
                    writer.WriteNumberValue(EndPointIndex.Value);
                }
            }
            if (options.Format == ModelReaderWriterFormat.Json)
            {
                if (Optional.IsDefined(SectionType))
                {
                    writer.WritePropertyName("sectionType"u8);
                    writer.WriteStringValue(SectionType.Value.ToString());
                }
            }
            if (options.Format == ModelReaderWriterFormat.Json)
            {
                if (Optional.IsDefined(TravelMode))
                {
                    writer.WritePropertyName("travelMode"u8);
                    writer.WriteStringValue(TravelMode.Value.ToString());
                }
            }
            if (options.Format == ModelReaderWriterFormat.Json)
            {
                if (Optional.IsDefined(SimpleCategory))
                {
                    writer.WritePropertyName("simpleCategory"u8);
                    writer.WriteStringValue(SimpleCategory.Value.ToString());
                }
            }
            if (options.Format == ModelReaderWriterFormat.Json)
            {
                if (Optional.IsDefined(EffectiveSpeedInKmh))
                {
                    writer.WritePropertyName("effectiveSpeedInKmh"u8);
                    writer.WriteNumberValue(EffectiveSpeedInKmh.Value);
                }
            }
            if (options.Format == ModelReaderWriterFormat.Json)
            {
                if (Optional.IsDefined(DelayInSeconds))
                {
                    writer.WritePropertyName("delayInSeconds"u8);
                    writer.WriteNumberValue(DelayInSeconds.Value);
                }
            }
            if (options.Format == ModelReaderWriterFormat.Json)
            {
                if (Optional.IsDefined(DelayMagnitude))
                {
                    writer.WritePropertyName("magnitudeOfDelay"u8);
                    writer.WriteStringValue(DelayMagnitude.Value.ToString());
                }
            }
            if (Optional.IsDefined(Tec))
            {
                writer.WritePropertyName("tec"u8);
                writer.WriteObjectValue(Tec);
            }
            if (_serializedAdditionalRawData != null && options.Format == ModelReaderWriterFormat.Json)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        RouteSection IJsonModel<RouteSection>.Read(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == ModelReaderWriterFormat.Json || options.Format == ModelReaderWriterFormat.Wire;
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(RouteSection)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeRouteSection(document.RootElement, options);
        }

        internal static RouteSection DeserializeRouteSection(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelReaderWriterOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<int> startPointIndex = default;
            Optional<int> endPointIndex = default;
            Optional<ResponseSectionType> sectionType = default;
            Optional<ResponseTravelMode> travelMode = default;
            Optional<TrafficIncidentCategory> simpleCategory = default;
            Optional<int> effectiveSpeedInKmh = default;
            Optional<int> delayInSeconds = default;
            Optional<DelayMagnitude> magnitudeOfDelay = default;
            Optional<RouteSectionTec> tec = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("startPointIndex"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    startPointIndex = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("endPointIndex"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    endPointIndex = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("sectionType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sectionType = new ResponseSectionType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("travelMode"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    travelMode = new ResponseTravelMode(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("simpleCategory"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    simpleCategory = new TrafficIncidentCategory(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("effectiveSpeedInKmh"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    effectiveSpeedInKmh = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("delayInSeconds"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    delayInSeconds = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("magnitudeOfDelay"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    magnitudeOfDelay = new DelayMagnitude(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("tec"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    tec = RouteSectionTec.DeserializeRouteSectionTec(property.Value);
                    continue;
                }
                if (options.Format == ModelReaderWriterFormat.Json)
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new RouteSection(Optional.ToNullable(startPointIndex), Optional.ToNullable(endPointIndex), Optional.ToNullable(sectionType), Optional.ToNullable(travelMode), Optional.ToNullable(simpleCategory), Optional.ToNullable(effectiveSpeedInKmh), Optional.ToNullable(delayInSeconds), Optional.ToNullable(magnitudeOfDelay), tec.Value, serializedAdditionalRawData);
        }

        BinaryData IModel<RouteSection>.Write(ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == ModelReaderWriterFormat.Json || options.Format == ModelReaderWriterFormat.Wire;
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(RouteSection)} does not support '{options.Format}' format.");
            }

            return ModelReaderWriter.Write(this, options);
        }

        RouteSection IModel<RouteSection>.Read(BinaryData data, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == ModelReaderWriterFormat.Json || options.Format == ModelReaderWriterFormat.Wire;
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(RouteSection)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.Parse(data);
            return DeserializeRouteSection(document.RootElement, options);
        }

        ModelReaderWriterFormat IModel<RouteSection>.GetWireFormat(ModelReaderWriterOptions options) => ModelReaderWriterFormat.Json;
    }
}
