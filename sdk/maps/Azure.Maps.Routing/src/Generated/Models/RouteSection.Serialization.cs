// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.Maps.Routing.Models
{
    public partial class RouteSection
    {
        internal static RouteSection DeserializeRouteSection(JsonElement element)
        {
            Optional<int> startPointIndex = default;
            Optional<int> endPointIndex = default;
            Optional<ResponseSectionType> sectionType = default;
            Optional<ResponseTravelMode> travelMode = default;
            Optional<TrafficIncidentCategory> simpleCategory = default;
            Optional<int> effectiveSpeedInKmh = default;
            Optional<int> delayInSeconds = default;
            Optional<DelayMagnitude> magnitudeOfDelay = default;
            Optional<RouteSectionTec> tec = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("startPointIndex"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    startPointIndex = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("endPointIndex"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    endPointIndex = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("sectionType"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    sectionType = new ResponseSectionType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("travelMode"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    travelMode = new ResponseTravelMode(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("simpleCategory"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    simpleCategory = new TrafficIncidentCategory(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("effectiveSpeedInKmh"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    effectiveSpeedInKmh = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("delayInSeconds"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    delayInSeconds = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("magnitudeOfDelay"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    magnitudeOfDelay = new DelayMagnitude(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("tec"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    tec = RouteSectionTec.DeserializeRouteSectionTec(property.Value);
                    continue;
                }
            }
            return new RouteSection(Optional.ToNullable(startPointIndex), Optional.ToNullable(endPointIndex), Optional.ToNullable(sectionType), Optional.ToNullable(travelMode), Optional.ToNullable(simpleCategory), Optional.ToNullable(effectiveSpeedInKmh), Optional.ToNullable(delayInSeconds), Optional.ToNullable(magnitudeOfDelay), tec.Value);
        }
    }
}
