// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net.ClientModel;
using System.Net.ClientModel.Core;
using System.Text.Json;
using Azure.Core;

namespace Azure.Maps.Routing.Models
{
    public partial class RouteSummary : IUtf8JsonSerializable, IJsonModel<RouteSummary>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<RouteSummary>)this).Write(writer, ModelReaderWriterOptions.Wire);

        void IJsonModel<RouteSummary>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            if ((options.Format != "W" || ((IPersistableModel<RouteSummary>)this).GetWireFormat(options) != "J") && options.Format != "J")
            {
                throw new InvalidOperationException($"Must use 'J' format when calling the {nameof(IJsonModel<RouteSummary>)} interface");
            }

            writer.WriteStartObject();
            if (options.Format == "J")
            {
                if (Optional.IsDefined(LengthInMeters))
                {
                    writer.WritePropertyName("lengthInMeters"u8);
                    writer.WriteNumberValue(LengthInMeters.Value);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(TravelTimeInSeconds))
                {
                    writer.WritePropertyName("travelTimeInSeconds"u8);
                    writer.WriteNumberValue(TravelTimeInSeconds.Value);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(TrafficDelayInSeconds))
                {
                    writer.WritePropertyName("trafficDelayInSeconds"u8);
                    writer.WriteNumberValue(TrafficDelayInSeconds.Value);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(DepartureTime))
                {
                    writer.WritePropertyName("departureTime"u8);
                    writer.WriteStringValue(DepartureTime.Value, "O");
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(ArrivalTime))
                {
                    writer.WritePropertyName("arrivalTime"u8);
                    writer.WriteStringValue(ArrivalTime.Value, "O");
                }
            }
            if (_serializedAdditionalRawData != null && options.Format == "J")
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        RouteSummary IJsonModel<RouteSummary>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(RouteSummary)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeRouteSummary(document.RootElement, options);
        }

        internal static RouteSummary DeserializeRouteSummary(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelReaderWriterOptions.Wire;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<int> lengthInMeters = default;
            Optional<int> travelTimeInSeconds = default;
            Optional<int> trafficDelayInSeconds = default;
            Optional<DateTimeOffset> departureTime = default;
            Optional<DateTimeOffset> arrivalTime = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("lengthInMeters"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lengthInMeters = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("travelTimeInSeconds"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    travelTimeInSeconds = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("trafficDelayInSeconds"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    trafficDelayInSeconds = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("departureTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    departureTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("arrivalTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    arrivalTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (options.Format == "J")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new RouteSummary(Optional.ToNullable(lengthInMeters), Optional.ToNullable(travelTimeInSeconds), Optional.ToNullable(trafficDelayInSeconds), Optional.ToNullable(departureTime), Optional.ToNullable(arrivalTime), serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<RouteSummary>.Write(ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(RouteSummary)} does not support '{options.Format}' format.");
            }

            return ModelReaderWriter.Write(this, options);
        }

        RouteSummary IPersistableModel<RouteSummary>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(RouteSummary)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.Parse(data);
            return DeserializeRouteSummary(document.RootElement, options);
        }

        string IPersistableModel<RouteSummary>.GetWireFormat(ModelReaderWriterOptions options) => "J";
    }
}
