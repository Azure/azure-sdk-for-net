// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Maps.Routing.Models
{
    public partial class RouteInstruction
    {
        internal static RouteInstruction DeserializeRouteInstruction(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<int> routeOffsetInMeters = default;
            Core.Optional<int> travelTimeInSeconds = default;
            Core.Optional<LatLongPair> point = default;
            Core.Optional<int> pointIndex = default;
            Core.Optional<GuidanceInstructionType> instructionType = default;
            Core.Optional<IReadOnlyList<string>> roadNumbers = default;
            Core.Optional<string> exitNumber = default;
            Core.Optional<string> street = default;
            Core.Optional<string> signpostText = default;
            Core.Optional<string> countryCode = default;
            Core.Optional<string> stateCode = default;
            Core.Optional<JunctionType> junctionType = default;
            Core.Optional<int> turnAngleInDecimalDegrees = default;
            Core.Optional<string> roundaboutExitNumber = default;
            Core.Optional<bool> possibleCombineWithNext = default;
            Core.Optional<DrivingSide> drivingSide = default;
            Core.Optional<GuidanceManeuver> maneuver = default;
            Core.Optional<string> message = default;
            Core.Optional<string> combinedMessage = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("routeOffsetInMeters"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    routeOffsetInMeters = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("travelTimeInSeconds"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    travelTimeInSeconds = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("point"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    point = LatLongPair.DeserializeLatLongPair(property.Value);
                    continue;
                }
                if (property.NameEquals("pointIndex"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    pointIndex = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("instructionType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    instructionType = new GuidanceInstructionType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("roadNumbers"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    roadNumbers = array;
                    continue;
                }
                if (property.NameEquals("exitNumber"u8))
                {
                    exitNumber = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("street"u8))
                {
                    street = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("signpostText"u8))
                {
                    signpostText = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("countryCode"u8))
                {
                    countryCode = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("stateCode"u8))
                {
                    stateCode = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("junctionType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    junctionType = new JunctionType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("turnAngleInDecimalDegrees"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    turnAngleInDecimalDegrees = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("roundaboutExitNumber"u8))
                {
                    roundaboutExitNumber = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("possibleCombineWithNext"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    possibleCombineWithNext = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("drivingSide"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    drivingSide = new DrivingSide(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("maneuver"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maneuver = new GuidanceManeuver(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("message"u8))
                {
                    message = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("combinedMessage"u8))
                {
                    combinedMessage = property.Value.GetString();
                    continue;
                }
            }
            return new RouteInstruction(Core.Optional.ToNullable(routeOffsetInMeters), Core.Optional.ToNullable(travelTimeInSeconds), point.Value, Core.Optional.ToNullable(pointIndex), Core.Optional.ToNullable(instructionType), Core.Optional.ToList(roadNumbers), exitNumber.Value, street.Value, signpostText.Value, countryCode.Value, stateCode.Value, Core.Optional.ToNullable(junctionType), Core.Optional.ToNullable(turnAngleInDecimalDegrees), roundaboutExitNumber.Value, Core.Optional.ToNullable(possibleCombineWithNext), Core.Optional.ToNullable(drivingSide), Core.Optional.ToNullable(maneuver), message.Value, combinedMessage.Value);
        }
    }
}
