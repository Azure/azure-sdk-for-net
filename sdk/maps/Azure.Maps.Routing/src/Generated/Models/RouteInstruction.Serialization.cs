// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Maps.Routing.Models
{
    public partial class RouteInstruction : IUtf8JsonSerializable, IJsonModel<RouteInstruction>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<RouteInstruction>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<RouteInstruction>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            if ((options.Format != "W" || ((IPersistableModel<RouteInstruction>)this).GetFormatFromOptions(options) != "J") && options.Format != "J")
            {
                throw new InvalidOperationException($"Must use 'J' format when calling the {nameof(IJsonModel<RouteInstruction>)} interface");
            }

            writer.WriteStartObject();
            if (options.Format == "J")
            {
                if (Optional.IsDefined(RouteOffsetInMeters))
                {
                    writer.WritePropertyName("routeOffsetInMeters"u8);
                    writer.WriteNumberValue(RouteOffsetInMeters.Value);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(TravelTimeInSeconds))
                {
                    writer.WritePropertyName("travelTimeInSeconds"u8);
                    writer.WriteNumberValue(TravelTimeInSeconds.Value);
                }
            }
            if (Optional.IsDefined(_Point))
            {
                writer.WritePropertyName("point"u8);
                writer.WriteObjectValue(_Point);
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(PointIndex))
                {
                    writer.WritePropertyName("pointIndex"u8);
                    writer.WriteNumberValue(PointIndex.Value);
                }
            }
            if (Optional.IsDefined(InstructionType))
            {
                writer.WritePropertyName("instructionType"u8);
                writer.WriteStringValue(InstructionType.Value.ToString());
            }
            if (options.Format == "J")
            {
                if (Optional.IsCollectionDefined(RoadNumbers))
                {
                    writer.WritePropertyName("roadNumbers"u8);
                    writer.WriteStartArray();
                    foreach (var item in RoadNumbers)
                    {
                        writer.WriteStringValue(item);
                    }
                    writer.WriteEndArray();
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(ExitNumber))
                {
                    writer.WritePropertyName("exitNumber"u8);
                    writer.WriteStringValue(ExitNumber);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(Street))
                {
                    writer.WritePropertyName("street"u8);
                    writer.WriteStringValue(Street);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(SignpostText))
                {
                    writer.WritePropertyName("signpostText"u8);
                    writer.WriteStringValue(SignpostText);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(CountryCode))
                {
                    writer.WritePropertyName("countryCode"u8);
                    writer.WriteStringValue(CountryCode);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(StateCode))
                {
                    writer.WritePropertyName("stateCode"u8);
                    writer.WriteStringValue(StateCode);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(JunctionType))
                {
                    writer.WritePropertyName("junctionType"u8);
                    writer.WriteStringValue(JunctionType.Value.ToString());
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(TurnAngleInDegrees))
                {
                    writer.WritePropertyName("turnAngleInDecimalDegrees"u8);
                    writer.WriteNumberValue(TurnAngleInDegrees.Value);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(RoundaboutExitNumber))
                {
                    writer.WritePropertyName("roundaboutExitNumber"u8);
                    writer.WriteStringValue(RoundaboutExitNumber);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(PossibleCombineWithNext))
                {
                    writer.WritePropertyName("possibleCombineWithNext"u8);
                    writer.WriteBooleanValue(PossibleCombineWithNext.Value);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(DrivingSide))
                {
                    writer.WritePropertyName("drivingSide"u8);
                    writer.WriteStringValue(DrivingSide.Value.ToString());
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(Maneuver))
                {
                    writer.WritePropertyName("maneuver"u8);
                    writer.WriteStringValue(Maneuver.Value.ToString());
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(Message))
                {
                    writer.WritePropertyName("message"u8);
                    writer.WriteStringValue(Message);
                }
            }
            if (options.Format == "J")
            {
                if (Optional.IsDefined(CombinedMessage))
                {
                    writer.WritePropertyName("combinedMessage"u8);
                    writer.WriteStringValue(CombinedMessage);
                }
            }
            if (_serializedAdditionalRawData != null && options.Format == "J")
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        RouteInstruction IJsonModel<RouteInstruction>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(RouteInstruction)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeRouteInstruction(document.RootElement, options);
        }

        internal static RouteInstruction DeserializeRouteInstruction(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<int> routeOffsetInMeters = default;
            Optional<int> travelTimeInSeconds = default;
            Optional<LatLongPair> point = default;
            Optional<int> pointIndex = default;
            Optional<GuidanceInstructionType> instructionType = default;
            Optional<IReadOnlyList<string>> roadNumbers = default;
            Optional<string> exitNumber = default;
            Optional<string> street = default;
            Optional<string> signpostText = default;
            Optional<string> countryCode = default;
            Optional<string> stateCode = default;
            Optional<JunctionType> junctionType = default;
            Optional<int> turnAngleInDecimalDegrees = default;
            Optional<string> roundaboutExitNumber = default;
            Optional<bool> possibleCombineWithNext = default;
            Optional<DrivingSide> drivingSide = default;
            Optional<GuidanceManeuver> maneuver = default;
            Optional<string> message = default;
            Optional<string> combinedMessage = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("routeOffsetInMeters"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    routeOffsetInMeters = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("travelTimeInSeconds"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    travelTimeInSeconds = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("point"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    point = LatLongPair.DeserializeLatLongPair(property.Value);
                    continue;
                }
                if (property.NameEquals("pointIndex"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    pointIndex = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("instructionType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    instructionType = new GuidanceInstructionType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("roadNumbers"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    roadNumbers = array;
                    continue;
                }
                if (property.NameEquals("exitNumber"u8))
                {
                    exitNumber = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("street"u8))
                {
                    street = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("signpostText"u8))
                {
                    signpostText = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("countryCode"u8))
                {
                    countryCode = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("stateCode"u8))
                {
                    stateCode = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("junctionType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    junctionType = new JunctionType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("turnAngleInDecimalDegrees"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    turnAngleInDecimalDegrees = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("roundaboutExitNumber"u8))
                {
                    roundaboutExitNumber = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("possibleCombineWithNext"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    possibleCombineWithNext = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("drivingSide"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    drivingSide = new DrivingSide(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("maneuver"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maneuver = new GuidanceManeuver(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("message"u8))
                {
                    message = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("combinedMessage"u8))
                {
                    combinedMessage = property.Value.GetString();
                    continue;
                }
                if (options.Format == "J")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new RouteInstruction(Optional.ToNullable(routeOffsetInMeters), Optional.ToNullable(travelTimeInSeconds), point.Value, Optional.ToNullable(pointIndex), Optional.ToNullable(instructionType), Optional.ToList(roadNumbers), exitNumber.Value, street.Value, signpostText.Value, countryCode.Value, stateCode.Value, Optional.ToNullable(junctionType), Optional.ToNullable(turnAngleInDecimalDegrees), roundaboutExitNumber.Value, Optional.ToNullable(possibleCombineWithNext), Optional.ToNullable(drivingSide), Optional.ToNullable(maneuver), message.Value, combinedMessage.Value, serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<RouteInstruction>.Write(ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(RouteInstruction)} does not support '{options.Format}' format.");
            }

            return ModelReaderWriter.Write(this, options);
        }

        RouteInstruction IPersistableModel<RouteInstruction>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == "J" || options.Format == "W";
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(RouteInstruction)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.Parse(data);
            return DeserializeRouteInstruction(document.RootElement, options);
        }

        string IPersistableModel<RouteInstruction>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
