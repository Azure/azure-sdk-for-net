// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.Maps.TimeZones
{
    /// <summary> Model factory for models. </summary>
    public static partial class MapsTimeZonesModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="TimeZones.TimeZoneResult"/>. </summary>
        /// <param name="version"> Version property. </param>
        /// <param name="referenceUtcTimestamp"> Reference Utc Timestamp property. </param>
        /// <param name="timeZones"> TimeZoneId array. </param>
        /// <returns> A new <see cref="TimeZones.TimeZoneResult"/> instance for mocking. </returns>
        public static TimeZoneResult TimeZoneResult(string version = null, DateTimeOffset? referenceUtcTimestamp = null, IEnumerable<TimeZoneId> timeZones = null)
        {
            timeZones ??= new List<TimeZoneId>();

            return new TimeZoneResult(version, referenceUtcTimestamp, timeZones?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="TimeZones.CountryRecord"/>. </summary>
        /// <param name="name"> country/region Name. </param>
        /// <param name="code"> ISO-3166 2-letter country/region code for the country/region. </param>
        /// <returns> A new <see cref="TimeZones.CountryRecord"/> instance for mocking. </returns>
        public static CountryRecord CountryRecord(string name = null, string code = null)
        {
            return new CountryRecord(name, code);
        }

        /// <summary> Initializes a new instance of <see cref="TimeZones.TimeZoneName"/>. </summary>
        /// <param name="iso6391LanguageCode"> The ISO 639-1 language code of the Names. </param>
        /// <param name="generic"> Generic Name. </param>
        /// <param name="standard"> Standard Name. </param>
        /// <param name="daylight"> Daylight Name. </param>
        /// <returns> A new <see cref="TimeZones.TimeZoneName"/> instance for mocking. </returns>
        public static TimeZoneName TimeZoneName(string iso6391LanguageCode = null, string generic = null, string standard = null, string daylight = null)
        {
            return new TimeZoneName(iso6391LanguageCode, generic, standard, daylight);
        }

        /// <summary> Initializes a new instance of <see cref="TimeZones.WindowsTimeZone"/>. </summary>
        /// <param name="windowsId"> Windows Id property. </param>
        /// <param name="territory"> Territory property. </param>
        /// <param name="ianaIds"> IanaIds array. </param>
        /// <returns> A new <see cref="TimeZones.WindowsTimeZone"/> instance for mocking. </returns>
        public static WindowsTimeZone WindowsTimeZone(string windowsId = null, string territory = null, IEnumerable<string> ianaIds = null)
        {
            ianaIds ??= new List<string>();

            return new WindowsTimeZone(windowsId, territory, ianaIds?.ToList());
        }

        /// <summary> Initializes a new instance of <see cref="TimeZones.TimeZoneIanaVersionResult"/>. </summary>
        /// <param name="version"> Version property. </param>
        /// <returns> A new <see cref="TimeZones.TimeZoneIanaVersionResult"/> instance for mocking. </returns>
        public static TimeZoneIanaVersionResult TimeZoneIanaVersionResult(string version = null)
        {
            return new TimeZoneIanaVersionResult(version);
        }
    }
}
