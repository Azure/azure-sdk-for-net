// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Maps.Search.Models
{
    /// <summary> The GeographicEntityType. </summary>
    public readonly partial struct GeographicEntityType : IEquatable<GeographicEntityType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="GeographicEntityType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public GeographicEntityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string CountryValue = "Country";
        private const string CountrySubdivisionValue = "CountrySubdivision";
        private const string CountrySecondarySubdivisionValue = "CountrySecondarySubdivision";
        private const string CountryTertiarySubdivisionValue = "CountryTertiarySubdivision";
        private const string MunicipalityValue = "Municipality";
        private const string MunicipalitySubdivisionValue = "MunicipalitySubdivision";
        private const string NeighbourhoodValue = "Neighbourhood";
        private const string PostalCodeAreaValue = "PostalCodeArea";

        /// <summary> Country. </summary>
        public static GeographicEntityType Country { get; } = new GeographicEntityType(CountryValue);
        /// <summary> CountrySubdivision. </summary>
        public static GeographicEntityType CountrySubdivision { get; } = new GeographicEntityType(CountrySubdivisionValue);
        /// <summary> CountrySecondarySubdivision. </summary>
        public static GeographicEntityType CountrySecondarySubdivision { get; } = new GeographicEntityType(CountrySecondarySubdivisionValue);
        /// <summary> CountryTertiarySubdivision. </summary>
        public static GeographicEntityType CountryTertiarySubdivision { get; } = new GeographicEntityType(CountryTertiarySubdivisionValue);
        /// <summary> Municipality. </summary>
        public static GeographicEntityType Municipality { get; } = new GeographicEntityType(MunicipalityValue);
        /// <summary> MunicipalitySubdivision. </summary>
        public static GeographicEntityType MunicipalitySubdivision { get; } = new GeographicEntityType(MunicipalitySubdivisionValue);
        /// <summary> Neighbourhood. </summary>
        public static GeographicEntityType Neighbourhood { get; } = new GeographicEntityType(NeighbourhoodValue);
        /// <summary> PostalCodeArea. </summary>
        public static GeographicEntityType PostalCodeArea { get; } = new GeographicEntityType(PostalCodeAreaValue);
        /// <summary> Determines if two <see cref="GeographicEntityType"/> values are the same. </summary>
        public static bool operator ==(GeographicEntityType left, GeographicEntityType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="GeographicEntityType"/> values are not the same. </summary>
        public static bool operator !=(GeographicEntityType left, GeographicEntityType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="GeographicEntityType"/>. </summary>
        public static implicit operator GeographicEntityType(string value) => new GeographicEntityType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is GeographicEntityType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(GeographicEntityType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
