// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Maps.Search.Models
{
    /// <summary> The SearchIndexes. </summary>
    public readonly partial struct SearchIndexes : IEquatable<SearchIndexes>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SearchIndexes"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SearchIndexes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AddressValue = "Addr";
        private const string GeographiesValue = "Geo";
        private const string PointAddressesValue = "PAD";
        private const string PointsOfInterestValue = "POI";
        private const string StreetsValue = "Str";
        private const string CrossStreetsValue = "Xstr";

        /// <summary> Address range interpolation. </summary>
        public static SearchIndexes Address { get; } = new SearchIndexes(AddressValue);
        /// <summary> Geographies. </summary>
        public static SearchIndexes Geographies { get; } = new SearchIndexes(GeographiesValue);
        /// <summary> Point Addresses. </summary>
        public static SearchIndexes PointAddresses { get; } = new SearchIndexes(PointAddressesValue);
        /// <summary> Points of interest. </summary>
        public static SearchIndexes PointsOfInterest { get; } = new SearchIndexes(PointsOfInterestValue);
        /// <summary> Streets. </summary>
        public static SearchIndexes Streets { get; } = new SearchIndexes(StreetsValue);
        /// <summary> Cross Streets (Intersections). </summary>
        public static SearchIndexes CrossStreets { get; } = new SearchIndexes(CrossStreetsValue);
        /// <summary> Determines if two <see cref="SearchIndexes"/> values are the same. </summary>
        public static bool operator ==(SearchIndexes left, SearchIndexes right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SearchIndexes"/> values are not the same. </summary>
        public static bool operator !=(SearchIndexes left, SearchIndexes right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SearchIndexes"/>. </summary>
        public static implicit operator SearchIndexes(string value) => new SearchIndexes(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SearchIndexes other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SearchIndexes other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
