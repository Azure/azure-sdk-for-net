// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.Maps.Search.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Result object for a Search API response.
    /// </summary>
    public partial class SearchCommonResult
    {
        /// <summary>
        /// Initializes a new instance of the SearchCommonResult class.
        /// </summary>
        public SearchCommonResult()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SearchCommonResult class.
        /// </summary>
        /// <param name="type">One of:
        /// * POI
        /// * Street
        /// * Geography
        /// * Point Address
        /// * Address Range
        /// * Cross Street</param>
        /// <param name="id">Id property</param>
        /// <param name="info">Info property</param>
        /// <param name="entityType">Possible values include: 'Country',
        /// 'CountrySubdivision', 'CountrySecondarySubdivision',
        /// 'CountryTertiarySubdivision', 'Municipality',
        /// 'MunicipalitySubdivision', 'Neighbourhood',
        /// 'PostalCodeArea'</param>
        /// <param name="entryPoints">Entry Points array</param>
        /// <param name="matchType">Information on the type of match.
        ///
        /// One of:
        /// * AddressPoint
        /// * HouseNumberRange
        /// * Street</param>
        /// <param name="detourTime">Detour time in seconds</param>
        public SearchCommonResult(string type = default(string), string id = default(string), double? score = default(double?), double? dist = default(double?), string info = default(string), string entityType = default(string), SearchResultPoi poi = default(SearchResultPoi), SearchResultAddress address = default(SearchResultAddress), CoordinatesPairAbbreviated position = default(CoordinatesPairAbbreviated), SearchResultViewport viewport = default(SearchResultViewport), IList<SearchResultEntryPoint> entryPoints = default(IList<SearchResultEntryPoint>), SearchResultAddressRanges addressRanges = default(SearchResultAddressRanges), DataSources dataSources = default(DataSources), string matchType = default(string), double? detourTime = default(double?))
        {
            Type = type;
            Id = id;
            Score = score;
            Dist = dist;
            Info = info;
            EntityType = entityType;
            Poi = poi;
            Address = address;
            Position = position;
            Viewport = viewport;
            EntryPoints = entryPoints;
            AddressRanges = addressRanges;
            DataSources = dataSources;
            MatchType = matchType;
            DetourTime = detourTime;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets one of:
        /// * POI
        /// * Street
        /// * Geography
        /// * Point Address
        /// * Address Range
        /// * Cross Street
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; private set; }

        /// <summary>
        /// Gets id property
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "score")]
        public double? Score { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "dist")]
        public double? Dist { get; set; }

        /// <summary>
        /// Gets info property
        /// </summary>
        [JsonProperty(PropertyName = "info")]
        public string Info { get; private set; }

        /// <summary>
        /// Gets or sets possible values include: 'Country',
        /// 'CountrySubdivision', 'CountrySecondarySubdivision',
        /// 'CountryTertiarySubdivision', 'Municipality',
        /// 'MunicipalitySubdivision', 'Neighbourhood', 'PostalCodeArea'
        /// </summary>
        [JsonProperty(PropertyName = "entityType")]
        public string EntityType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "poi")]
        public SearchResultPoi Poi { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "address")]
        public SearchResultAddress Address { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "position")]
        public CoordinatesPairAbbreviated Position { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "viewport")]
        public SearchResultViewport Viewport { get; set; }

        /// <summary>
        /// Gets entry Points array
        /// </summary>
        [JsonProperty(PropertyName = "entryPoints")]
        public IList<SearchResultEntryPoint> EntryPoints { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "addressRanges")]
        public SearchResultAddressRanges AddressRanges { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "dataSources")]
        public DataSources DataSources { get; set; }

        /// <summary>
        /// Gets information on the type of match.
        ///
        /// One of:
        /// * AddressPoint
        /// * HouseNumberRange
        /// * Street
        /// </summary>
        [JsonProperty(PropertyName = "matchType")]
        public string MatchType { get; private set; }

        /// <summary>
        /// Gets detour time in seconds
        /// </summary>
        [JsonProperty(PropertyName = "detourTime")]
        public double? DetourTime { get; private set; }

    }
}
