// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Maps.Search
{
    /// <summary> The ElectricVehicleConnector. </summary>
    public readonly partial struct ElectricVehicleConnector : IEquatable<ElectricVehicleConnector>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ElectricVehicleConnector"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ElectricVehicleConnector(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string StandardHouseholdCountrySpecificValue = "StandardHouseholdCountrySpecific";
        private const string Iec62196Type1Value = "IEC62196Type1";
        private const string Iec62196Type1CCSValue = "IEC62196Type1CCS";
        private const string Iec62196Type2CableAttachedValue = "IEC62196Type2CableAttached";
        private const string Iec62196Type2OutletValue = "IEC62196Type2Outlet";
        private const string Iec62196Type2CCSValue = "IEC62196Type2CCS";
        private const string Iec62196Type3Value = "IEC62196Type3";
        private const string ChademoValue = "Chademo";
        private const string Iec60309AC1PhaseBlueValue = "IEC60309AC1PhaseBlue";
        private const string Iec60309DCWhiteValue = "IEC60309DCWhite";
        private const string TeslaValue = "Tesla";

        /// <summary>
        /// These are the standard household connectors for a certain region. They are all AC single phase and the standard Voltage and standard Amperage.
        ///
        /// See also: [Plug &amp; socket types - World Standards](https://www.worldstandards.eu/electricity/plugs-and-sockets)
        /// </summary>
        public static ElectricVehicleConnector StandardHouseholdCountrySpecific { get; } = new ElectricVehicleConnector(StandardHouseholdCountrySpecificValue);
        /// <summary> CHAdeMO connector named after an association formed by the Tokyo Electric Power Company and industrial partners. Because of this is is also known as the TEPCO's connector. It supports fast DC charging. </summary>
        public static ElectricVehicleConnector Chademo { get; } = new ElectricVehicleConnector(ChademoValue);
        /// <summary> The Tesla connector is the regionally specific Tesla Supercharger connector. I.e. it refers to either Tesla's proprietary connector, sometimes referred to as Tesla Port mostly limited to North America or the modified Type 2 (DC over Type 2) in Europe. </summary>
        public static ElectricVehicleConnector Tesla { get; } = new ElectricVehicleConnector(TeslaValue);
        /// <summary> Determines if two <see cref="ElectricVehicleConnector"/> values are the same. </summary>
        public static bool operator ==(ElectricVehicleConnector left, ElectricVehicleConnector right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ElectricVehicleConnector"/> values are not the same. </summary>
        public static bool operator !=(ElectricVehicleConnector left, ElectricVehicleConnector right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ElectricVehicleConnector"/>. </summary>
        public static implicit operator ElectricVehicleConnector(string value) => new ElectricVehicleConnector(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ElectricVehicleConnector other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ElectricVehicleConnector other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
