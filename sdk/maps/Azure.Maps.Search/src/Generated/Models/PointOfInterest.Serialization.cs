// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.Maps.Search.Models
{
    public partial class PointOfInterest : IUtf8JsonSerializable, IModelJsonSerializable<PointOfInterest>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<PointOfInterest>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<PointOfInterest>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<PointOfInterest>(this, options.Format);

            writer.WriteStartObject();
            if (Optional.IsDefined(OperatingHours))
            {
                writer.WritePropertyName("openingHours"u8);
                if (OperatingHours is null)
                {
                    writer.WriteNullValue();
                }
                else
                {
                    ((IModelJsonSerializable<OperatingHours>)OperatingHours).Serialize(writer, options);
                }
            }
            if (_serializedAdditionalRawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static PointOfInterest DeserializePointOfInterest(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> name = default;
            Optional<string> phone = default;
            Optional<string> url = default;
            Optional<IReadOnlyList<PointOfInterestCategorySet>> categorySet = default;
            Optional<IReadOnlyList<string>> categories = default;
            Optional<IReadOnlyList<PointOfInterestClassification>> classifications = default;
            Optional<IReadOnlyList<BrandName>> brands = default;
            Optional<OperatingHours> openingHours = default;
            Dictionary<string, BinaryData> serializedAdditionalRawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("phone"u8))
                {
                    phone = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("url"u8))
                {
                    url = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("categorySet"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<PointOfInterestCategorySet> array = new List<PointOfInterestCategorySet>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(PointOfInterestCategorySet.DeserializePointOfInterestCategorySet(item));
                    }
                    categorySet = array;
                    continue;
                }
                if (property.NameEquals("categories"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    categories = array;
                    continue;
                }
                if (property.NameEquals("classifications"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<PointOfInterestClassification> array = new List<PointOfInterestClassification>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(PointOfInterestClassification.DeserializePointOfInterestClassification(item));
                    }
                    classifications = array;
                    continue;
                }
                if (property.NameEquals("brands"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<BrandName> array = new List<BrandName>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(BrandName.DeserializeBrandName(item));
                    }
                    brands = array;
                    continue;
                }
                if (property.NameEquals("openingHours"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    openingHours = OperatingHours.DeserializeOperatingHours(property.Value);
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    serializedAdditionalRawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new PointOfInterest(name.Value, phone.Value, url.Value, Optional.ToList(categorySet), Optional.ToList(categories), Optional.ToList(classifications), Optional.ToList(brands), openingHours.Value, serializedAdditionalRawData);
        }

        PointOfInterest IModelJsonSerializable<PointOfInterest>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<PointOfInterest>(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializePointOfInterest(doc.RootElement, options);
        }

        BinaryData IModelSerializable<PointOfInterest>.Serialize(ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<PointOfInterest>(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        PointOfInterest IModelSerializable<PointOfInterest>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<PointOfInterest>(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializePointOfInterest(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="PointOfInterest"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="PointOfInterest"/> to convert. </param>
        public static implicit operator RequestContent(PointOfInterest model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="PointOfInterest"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator PointOfInterest(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializePointOfInterest(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
