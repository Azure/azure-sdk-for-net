// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Maps.Search.Models
{
    /// <summary> Types of match for a reverse address search operation. </summary>
    public readonly partial struct MatchType : IEquatable<MatchType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="MatchType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public MatchType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AddressPointValue = "AddressPoint";
        private const string HouseNumberRangeValue = "HouseNumberRange";
        private const string StreetValue = "Street";

        /// <summary> AddressPoint. </summary>
        public static MatchType AddressPoint { get; } = new MatchType(AddressPointValue);
        /// <summary> HouseNumberRange. </summary>
        public static MatchType HouseNumberRange { get; } = new MatchType(HouseNumberRangeValue);
        /// <summary> Street. </summary>
        public static MatchType Street { get; } = new MatchType(StreetValue);
        /// <summary> Determines if two <see cref="MatchType"/> values are the same. </summary>
        public static bool operator ==(MatchType left, MatchType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="MatchType"/> values are not the same. </summary>
        public static bool operator !=(MatchType left, MatchType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="MatchType"/>. </summary>
        public static implicit operator MatchType(string value) => new MatchType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is MatchType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(MatchType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
