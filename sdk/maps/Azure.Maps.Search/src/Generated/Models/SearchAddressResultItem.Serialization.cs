// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net.ClientModel;
using System.Net.ClientModel.Core;
using System.Text.Json;
using Azure.Core;
using Azure.Maps.Search;

namespace Azure.Maps.Search.Models
{
    public partial class SearchAddressResultItem : IUtf8JsonSerializable, IJsonModel<SearchAddressResultItem>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<SearchAddressResultItem>)this).Write(writer, ModelReaderWriterOptions.DefaultWireOptions);

        void IJsonModel<SearchAddressResultItem>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            if (options.Format == ModelReaderWriterFormat.Json)
            {
                if (Optional.IsDefined(SearchAddressResultType))
                {
                    writer.WritePropertyName("type"u8);
                    writer.WriteStringValue(SearchAddressResultType.Value.ToString());
                }
            }
            if (options.Format == ModelReaderWriterFormat.Json)
            {
                if (Optional.IsDefined(Id))
                {
                    writer.WritePropertyName("id"u8);
                    writer.WriteStringValue(Id);
                }
            }
            if (options.Format == ModelReaderWriterFormat.Json)
            {
                if (Optional.IsDefined(Score))
                {
                    writer.WritePropertyName("score"u8);
                    writer.WriteNumberValue(Score.Value);
                }
            }
            if (options.Format == ModelReaderWriterFormat.Json)
            {
                if (Optional.IsDefined(DistanceInMeters))
                {
                    writer.WritePropertyName("dist"u8);
                    writer.WriteNumberValue(DistanceInMeters.Value);
                }
            }
            if (options.Format == ModelReaderWriterFormat.Json)
            {
                if (Optional.IsDefined(DataSourceInfo))
                {
                    writer.WritePropertyName("info"u8);
                    writer.WriteStringValue(DataSourceInfo);
                }
            }
            if (Optional.IsDefined(EntityType))
            {
                writer.WritePropertyName("entityType"u8);
                writer.WriteStringValue(EntityType.Value.ToString());
            }
            if (options.Format == ModelReaderWriterFormat.Json)
            {
                if (Optional.IsDefined(PointOfInterest))
                {
                    writer.WritePropertyName("poi"u8);
                    writer.WriteObjectValue(PointOfInterest);
                }
            }
            if (options.Format == ModelReaderWriterFormat.Json)
            {
                if (Optional.IsDefined(Address))
                {
                    writer.WritePropertyName("address"u8);
                    writer.WriteObjectValue(Address);
                }
            }
            if (Optional.IsDefined(PositionInternal))
            {
                writer.WritePropertyName("position"u8);
                writer.WriteObjectValue(PositionInternal);
            }
            if (options.Format == ModelReaderWriterFormat.Json)
            {
                if (Optional.IsDefined(ViewportInternal))
                {
                    writer.WritePropertyName("viewport"u8);
                    writer.WriteObjectValue(ViewportInternal);
                }
            }
            if (options.Format == ModelReaderWriterFormat.Json)
            {
                if (Optional.IsCollectionDefined(EntryPoints))
                {
                    writer.WritePropertyName("entryPoints"u8);
                    writer.WriteStartArray();
                    foreach (var item in EntryPoints)
                    {
                        writer.WriteObjectValue(item);
                    }
                    writer.WriteEndArray();
                }
            }
            if (options.Format == ModelReaderWriterFormat.Json)
            {
                if (Optional.IsDefined(AddressRanges))
                {
                    writer.WritePropertyName("addressRanges"u8);
                    writer.WriteObjectValue(AddressRanges);
                }
            }
            if (options.Format == ModelReaderWriterFormat.Json)
            {
                if (Optional.IsDefined(DataSources))
                {
                    writer.WritePropertyName("dataSources"u8);
                    writer.WriteObjectValue(DataSources);
                }
            }
            if (options.Format == ModelReaderWriterFormat.Json)
            {
                if (Optional.IsDefined(MatchType))
                {
                    writer.WritePropertyName("matchType"u8);
                    writer.WriteStringValue(MatchType.Value.ToString());
                }
            }
            if (options.Format == ModelReaderWriterFormat.Json)
            {
                if (Optional.IsDefined(DetourTimeInternal))
                {
                    writer.WritePropertyName("detourTime"u8);
                    writer.WriteNumberValue(DetourTimeInternal.Value);
                }
            }
            if (_serializedAdditionalRawData != null && options.Format == ModelReaderWriterFormat.Json)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        SearchAddressResultItem IJsonModel<SearchAddressResultItem>.Read(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == ModelReaderWriterFormat.Json || options.Format == ModelReaderWriterFormat.Wire;
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(SearchAddressResultItem)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeSearchAddressResultItem(document.RootElement, options);
        }

        internal static SearchAddressResultItem DeserializeSearchAddressResultItem(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelReaderWriterOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<SearchAddressResultType> type = default;
            Optional<string> id = default;
            Optional<double> score = default;
            Optional<double> dist = default;
            Optional<string> info = default;
            Optional<GeographicEntity> entityType = default;
            Optional<PointOfInterest> poi = default;
            Optional<MapsAddress> address = default;
            Optional<LatLongPairAbbreviated> position = default;
            Optional<BoundingBox> viewport = default;
            Optional<IReadOnlyList<FacilityEntryPoint>> entryPoints = default;
            Optional<AddressRanges> addressRanges = default;
            Optional<MapsDataSource> dataSources = default;
            Optional<MapsSearchMatchType> matchType = default;
            Optional<int> detourTime = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("type"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    type = new SearchAddressResultType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("score"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    score = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("dist"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dist = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("info"u8))
                {
                    info = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("entityType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    entityType = new GeographicEntity(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("poi"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    poi = PointOfInterest.DeserializePointOfInterest(property.Value);
                    continue;
                }
                if (property.NameEquals("address"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    address = MapsAddress.DeserializeMapsAddress(property.Value);
                    continue;
                }
                if (property.NameEquals("position"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    position = LatLongPairAbbreviated.DeserializeLatLongPairAbbreviated(property.Value);
                    continue;
                }
                if (property.NameEquals("viewport"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    viewport = BoundingBox.DeserializeBoundingBox(property.Value);
                    continue;
                }
                if (property.NameEquals("entryPoints"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<FacilityEntryPoint> array = new List<FacilityEntryPoint>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(FacilityEntryPoint.DeserializeFacilityEntryPoint(item));
                    }
                    entryPoints = array;
                    continue;
                }
                if (property.NameEquals("addressRanges"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    addressRanges = AddressRanges.DeserializeAddressRanges(property.Value);
                    continue;
                }
                if (property.NameEquals("dataSources"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dataSources = MapsDataSource.DeserializeMapsDataSource(property.Value);
                    continue;
                }
                if (property.NameEquals("matchType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    matchType = new MapsSearchMatchType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("detourTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    detourTime = property.Value.GetInt32();
                    continue;
                }
                if (options.Format == ModelReaderWriterFormat.Json)
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new SearchAddressResultItem(Optional.ToNullable(type), id.Value, Optional.ToNullable(score), Optional.ToNullable(dist), info.Value, Optional.ToNullable(entityType), poi.Value, address.Value, position.Value, viewport.Value, Optional.ToList(entryPoints), addressRanges.Value, dataSources.Value, Optional.ToNullable(matchType), Optional.ToNullable(detourTime), serializedAdditionalRawData);
        }

        BinaryData IModel<SearchAddressResultItem>.Write(ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == ModelReaderWriterFormat.Json || options.Format == ModelReaderWriterFormat.Wire;
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(SearchAddressResultItem)} does not support '{options.Format}' format.");
            }

            return ModelReaderWriter.Write(this, options);
        }

        SearchAddressResultItem IModel<SearchAddressResultItem>.Read(BinaryData data, ModelReaderWriterOptions options)
        {
            bool isValid = options.Format == ModelReaderWriterFormat.Json || options.Format == ModelReaderWriterFormat.Wire;
            if (!isValid)
            {
                throw new FormatException($"The model {nameof(SearchAddressResultItem)} does not support '{options.Format}' format.");
            }

            using JsonDocument document = JsonDocument.Parse(data);
            return DeserializeSearchAddressResultItem(document.RootElement, options);
        }

        ModelReaderWriterFormat IModel<SearchAddressResultItem>.GetWireFormat(ModelReaderWriterOptions options) => ModelReaderWriterFormat.Json;
    }
}
