// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.Maps.Search;

namespace Azure.Maps.Search.Models
{
    public partial class SearchAddressResultItem
    {
        internal static SearchAddressResultItem DeserializeSearchAddressResultItem(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<SearchAddressResultType> type = default;
            Core.Optional<string> id = default;
            Core.Optional<double> score = default;
            Core.Optional<double> dist = default;
            Core.Optional<string> info = default;
            Core.Optional<GeographicEntity> entityType = default;
            Core.Optional<PointOfInterest> poi = default;
            Core.Optional<MapsAddress> address = default;
            Core.Optional<LatLongPairAbbreviated> position = default;
            Core.Optional<BoundingBox> viewport = default;
            Core.Optional<IReadOnlyList<FacilityEntryPoint>> entryPoints = default;
            Core.Optional<AddressRanges> addressRanges = default;
            Core.Optional<MapsDataSource> dataSources = default;
            Core.Optional<MapsSearchMatchType> matchType = default;
            Core.Optional<int> detourTime = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("type"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    type = new SearchAddressResultType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("score"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    score = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("dist"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dist = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("info"u8))
                {
                    info = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("entityType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    entityType = new GeographicEntity(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("poi"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    poi = PointOfInterest.DeserializePointOfInterest(property.Value);
                    continue;
                }
                if (property.NameEquals("address"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    address = MapsAddress.DeserializeMapsAddress(property.Value);
                    continue;
                }
                if (property.NameEquals("position"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    position = LatLongPairAbbreviated.DeserializeLatLongPairAbbreviated(property.Value);
                    continue;
                }
                if (property.NameEquals("viewport"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    viewport = BoundingBox.DeserializeBoundingBox(property.Value);
                    continue;
                }
                if (property.NameEquals("entryPoints"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<FacilityEntryPoint> array = new List<FacilityEntryPoint>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(FacilityEntryPoint.DeserializeFacilityEntryPoint(item));
                    }
                    entryPoints = array;
                    continue;
                }
                if (property.NameEquals("addressRanges"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    addressRanges = AddressRanges.DeserializeAddressRanges(property.Value);
                    continue;
                }
                if (property.NameEquals("dataSources"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dataSources = MapsDataSource.DeserializeMapsDataSource(property.Value);
                    continue;
                }
                if (property.NameEquals("matchType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    matchType = new MapsSearchMatchType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("detourTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    detourTime = property.Value.GetInt32();
                    continue;
                }
            }
            return new SearchAddressResultItem(Core.Optional.ToNullable(type), id.Value, Core.Optional.ToNullable(score), Core.Optional.ToNullable(dist), info.Value, Core.Optional.ToNullable(entityType), poi.Value, address.Value, position.Value, viewport.Value, Core.Optional.ToList(entryPoints), addressRanges.Value, dataSources.Value, Core.Optional.ToNullable(matchType), Core.Optional.ToNullable(detourTime));
        }
    }
}
