// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Maps.Search.Models
{
    /// <summary> Describes the possible uses of a road. </summary>
    public readonly partial struct RoadUseType : IEquatable<RoadUseType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="RoadUseType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public RoadUseType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string LimitedAccessValue = "LimitedAccess";
        private const string ArterialValue = "Arterial";
        private const string TerminalValue = "Terminal";
        private const string RampValue = "Ramp";
        private const string RotaryValue = "Rotary";
        private const string LocalStreetValue = "LocalStreet";

        /// <summary> LimitedAccess. </summary>
        public static RoadUseType LimitedAccess { get; } = new RoadUseType(LimitedAccessValue);
        /// <summary> Arterial. </summary>
        public static RoadUseType Arterial { get; } = new RoadUseType(ArterialValue);
        /// <summary> Terminal. </summary>
        public static RoadUseType Terminal { get; } = new RoadUseType(TerminalValue);
        /// <summary> Ramp. </summary>
        public static RoadUseType Ramp { get; } = new RoadUseType(RampValue);
        /// <summary> Rotary. </summary>
        public static RoadUseType Rotary { get; } = new RoadUseType(RotaryValue);
        /// <summary> LocalStreet. </summary>
        public static RoadUseType LocalStreet { get; } = new RoadUseType(LocalStreetValue);
        /// <summary> Determines if two <see cref="RoadUseType"/> values are the same. </summary>
        public static bool operator ==(RoadUseType left, RoadUseType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="RoadUseType"/> values are not the same. </summary>
        public static bool operator !=(RoadUseType left, RoadUseType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="RoadUseType"/>. </summary>
        public static implicit operator RoadUseType(string value) => new RoadUseType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is RoadUseType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(RoadUseType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
