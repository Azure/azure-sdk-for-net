// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Maps.Search
{
    /// <summary> The OperatingHoursRange. </summary>
    public readonly partial struct OperatingHoursRange : IEquatable<OperatingHoursRange>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="OperatingHoursRange"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public OperatingHoursRange(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NextSevenDaysValue = "nextSevenDays";

        /// <summary> Shows the hours of operation for the next week, starting with the current day in the local time of the POI. </summary>
        public static OperatingHoursRange NextSevenDays { get; } = new OperatingHoursRange(NextSevenDaysValue);
        /// <summary> Determines if two <see cref="OperatingHoursRange"/> values are the same. </summary>
        public static bool operator ==(OperatingHoursRange left, OperatingHoursRange right) => left.Equals(right);
        /// <summary> Determines if two <see cref="OperatingHoursRange"/> values are not the same. </summary>
        public static bool operator !=(OperatingHoursRange left, OperatingHoursRange right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="OperatingHoursRange"/>. </summary>
        public static implicit operator OperatingHoursRange(string value) => new OperatingHoursRange(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is OperatingHoursRange other && Equals(other);
        /// <inheritdoc />
        public bool Equals(OperatingHoursRange other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
