// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.Maps.Search.Models
{
    public partial class MapsAddress : IUtf8JsonSerializable, IModelJsonSerializable<MapsAddress>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<MapsAddress>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<MapsAddress>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<MapsAddress>(this, options.Format);

            writer.WriteStartObject();
            if (_serializedAdditionalRawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static MapsAddress DeserializeMapsAddress(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> buildingNumber = default;
            Optional<string> street = default;
            Optional<string> crossStreet = default;
            Optional<string> streetNumber = default;
            Optional<IReadOnlyList<string>> routeNumbers = default;
            Optional<string> streetName = default;
            Optional<string> streetNameAndNumber = default;
            Optional<string> municipality = default;
            Optional<string> municipalitySubdivision = default;
            Optional<string> countryTertiarySubdivision = default;
            Optional<string> countrySecondarySubdivision = default;
            Optional<string> countrySubdivision = default;
            Optional<string> postalCode = default;
            Optional<string> extendedPostalCode = default;
            Optional<string> countryCode = default;
            Optional<string> country = default;
            Optional<string> countryCodeISO3 = default;
            Optional<string> freeformAddress = default;
            Optional<string> countrySubdivisionName = default;
            Optional<string> localName = default;
            Optional<BoundingBoxCompassNotation> boundingBox = default;
            Dictionary<string, BinaryData> serializedAdditionalRawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("buildingNumber"u8))
                {
                    buildingNumber = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("street"u8))
                {
                    street = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("crossStreet"u8))
                {
                    crossStreet = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("streetNumber"u8))
                {
                    streetNumber = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("routeNumbers"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    routeNumbers = array;
                    continue;
                }
                if (property.NameEquals("streetName"u8))
                {
                    streetName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("streetNameAndNumber"u8))
                {
                    streetNameAndNumber = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("municipality"u8))
                {
                    municipality = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("municipalitySubdivision"u8))
                {
                    municipalitySubdivision = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("countryTertiarySubdivision"u8))
                {
                    countryTertiarySubdivision = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("countrySecondarySubdivision"u8))
                {
                    countrySecondarySubdivision = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("countrySubdivision"u8))
                {
                    countrySubdivision = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("postalCode"u8))
                {
                    postalCode = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("extendedPostalCode"u8))
                {
                    extendedPostalCode = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("countryCode"u8))
                {
                    countryCode = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("country"u8))
                {
                    country = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("countryCodeISO3"u8))
                {
                    countryCodeISO3 = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("freeformAddress"u8))
                {
                    freeformAddress = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("countrySubdivisionName"u8))
                {
                    countrySubdivisionName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("localName"u8))
                {
                    localName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("boundingBox"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    boundingBox = BoundingBoxCompassNotation.DeserializeBoundingBoxCompassNotation(property.Value);
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    serializedAdditionalRawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new MapsAddress(buildingNumber.Value, street.Value, crossStreet.Value, streetNumber.Value, Optional.ToList(routeNumbers), streetName.Value, streetNameAndNumber.Value, municipality.Value, municipalitySubdivision.Value, countryTertiarySubdivision.Value, countrySecondarySubdivision.Value, countrySubdivision.Value, postalCode.Value, extendedPostalCode.Value, countryCode.Value, country.Value, countryCodeISO3.Value, freeformAddress.Value, countrySubdivisionName.Value, localName.Value, boundingBox.Value, serializedAdditionalRawData);
        }

        MapsAddress IModelJsonSerializable<MapsAddress>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<MapsAddress>(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeMapsAddress(doc.RootElement, options);
        }

        BinaryData IModelSerializable<MapsAddress>.Serialize(ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<MapsAddress>(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        MapsAddress IModelSerializable<MapsAddress>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<MapsAddress>(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeMapsAddress(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="MapsAddress"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="MapsAddress"/> to convert. </param>
        public static implicit operator RequestContent(MapsAddress model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="MapsAddress"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator MapsAddress(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeMapsAddress(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
