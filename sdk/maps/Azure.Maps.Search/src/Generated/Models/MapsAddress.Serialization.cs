// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Maps.Common;

namespace Azure.Maps.Search.Models
{
    public partial class MapsAddress
    {
        internal static MapsAddress DeserializeMapsAddress(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string buildingNumber = default;
            string street = default;
            string crossStreet = default;
            string streetNumber = default;
            IReadOnlyList<string> routeNumbers = default;
            string streetName = default;
            string streetNameAndNumber = default;
            string municipality = default;
            string municipalitySubdivision = default;
            string countryTertiarySubdivision = default;
            string countrySecondarySubdivision = default;
            string countrySubdivision = default;
            string postalCode = default;
            string extendedPostalCode = default;
            string countryCode = default;
            string country = default;
            string countryCodeISO3 = default;
            string freeformAddress = default;
            string countrySubdivisionName = default;
            string localName = default;
            BoundingBoxCompassNotation boundingBox = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("buildingNumber"u8))
                {
                    buildingNumber = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("street"u8))
                {
                    street = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("crossStreet"u8))
                {
                    crossStreet = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("streetNumber"u8))
                {
                    streetNumber = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("routeNumbers"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    routeNumbers = array;
                    continue;
                }
                if (property.NameEquals("streetName"u8))
                {
                    streetName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("streetNameAndNumber"u8))
                {
                    streetNameAndNumber = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("municipality"u8))
                {
                    municipality = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("municipalitySubdivision"u8))
                {
                    municipalitySubdivision = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("countryTertiarySubdivision"u8))
                {
                    countryTertiarySubdivision = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("countrySecondarySubdivision"u8))
                {
                    countrySecondarySubdivision = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("countrySubdivision"u8))
                {
                    countrySubdivision = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("postalCode"u8))
                {
                    postalCode = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("extendedPostalCode"u8))
                {
                    extendedPostalCode = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("countryCode"u8))
                {
                    countryCode = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("country"u8))
                {
                    country = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("countryCodeISO3"u8))
                {
                    countryCodeISO3 = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("freeformAddress"u8))
                {
                    freeformAddress = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("countrySubdivisionName"u8))
                {
                    countrySubdivisionName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("localName"u8))
                {
                    localName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("boundingBox"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    boundingBox = BoundingBoxCompassNotation.DeserializeBoundingBoxCompassNotation(property.Value);
                    continue;
                }
            }
            return new MapsAddress(
                buildingNumber,
                street,
                crossStreet,
                streetNumber,
                routeNumbers ?? new ChangeTrackingList<string>(),
                streetName,
                streetNameAndNumber,
                municipality,
                municipalitySubdivision,
                countryTertiarySubdivision,
                countrySecondarySubdivision,
                countrySubdivision,
                postalCode,
                extendedPostalCode,
                countryCode,
                country,
                countryCodeISO3,
                freeformAddress,
                countrySubdivisionName,
                localName,
                boundingBox);
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static MapsAddress FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeMapsAddress(document.RootElement);
        }
    }
}
