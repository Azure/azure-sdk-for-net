// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Maps.Search.Models
{
    /// <summary> The SearchIndexSet. </summary>
    public readonly partial struct SearchIndexSet : IEquatable<SearchIndexSet>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="SearchIndexSet"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SearchIndexSet(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AddrValue = "Addr";
        private const string GeoValue = "Geo";
        private const string PADValue = "PAD";
        private const string POIValue = "POI";
        private const string StrValue = "Str";
        private const string XstrValue = "Xstr";

        /// <summary> Address range interpolation. </summary>
        public static SearchIndexSet Addr { get; } = new SearchIndexSet(AddrValue);
        /// <summary> Geographies. </summary>
        public static SearchIndexSet Geo { get; } = new SearchIndexSet(GeoValue);
        /// <summary> Point Addresses. </summary>
        public static SearchIndexSet PAD { get; } = new SearchIndexSet(PADValue);
        /// <summary> Points of interest. </summary>
        public static SearchIndexSet POI { get; } = new SearchIndexSet(POIValue);
        /// <summary> Streets. </summary>
        public static SearchIndexSet Str { get; } = new SearchIndexSet(StrValue);
        /// <summary> Cross Streets (Intersections). </summary>
        public static SearchIndexSet Xstr { get; } = new SearchIndexSet(XstrValue);
        /// <summary> Determines if two <see cref="SearchIndexSet"/> values are the same. </summary>
        public static bool operator ==(SearchIndexSet left, SearchIndexSet right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SearchIndexSet"/> values are not the same. </summary>
        public static bool operator !=(SearchIndexSet left, SearchIndexSet right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SearchIndexSet"/>. </summary>
        public static implicit operator SearchIndexSet(string value) => new SearchIndexSet(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SearchIndexSet other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SearchIndexSet other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
