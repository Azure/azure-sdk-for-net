// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Maps.Search.Models
{
    /// <summary> The OpeningHours. </summary>
    public readonly partial struct OpeningHours : IEquatable<OpeningHours>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="OpeningHours"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public OpeningHours(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NextSevenDaysValue = "nextSevenDays";

        /// <summary> Shows the hours of operation for the next week, starting with the current day in the local time of the POI. </summary>
        public static OpeningHours NextSevenDays { get; } = new OpeningHours(NextSevenDaysValue);
        /// <summary> Determines if two <see cref="OpeningHours"/> values are the same. </summary>
        public static bool operator ==(OpeningHours left, OpeningHours right) => left.Equals(right);
        /// <summary> Determines if two <see cref="OpeningHours"/> values are not the same. </summary>
        public static bool operator !=(OpeningHours left, OpeningHours right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="OpeningHours"/>. </summary>
        public static implicit operator OpeningHours(string value) => new OpeningHours(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is OpeningHours other && Equals(other);
        /// <inheritdoc />
        public bool Equals(OpeningHours other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
