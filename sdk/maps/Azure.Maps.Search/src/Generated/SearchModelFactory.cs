// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Linq;
using Azure.Maps.Search.Models;

namespace Azure.Maps.Search
{
    /// <summary> Model factory for read-only models. </summary>
    public static partial class SearchModelFactory
    {
        /// <summary> Initializes a new instance of SearchPolygonResponse. </summary>
        /// <param name="additionalData"> Results array. </param>
        /// <returns> A new <see cref="Models.SearchPolygonResponse"/> instance for mocking. </returns>
        public static SearchPolygonResponse SearchPolygonResponse(IEnumerable<SearchPolygonResult> additionalData = null)
        {
            additionalData ??= new List<SearchPolygonResult>();

            return new SearchPolygonResponse(additionalData?.ToList());
        }

        /// <summary> Initializes a new instance of SearchPolygonResult. </summary>
        /// <param name="providerID"> ID of the returned entity. </param>
        /// <param name="error"> Reason for the failure to obtain data for this provider. </param>
        /// <param name="geometryData"> Geometry data in GeoJSON format. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946) for details. Present only if &quot;error&quot; is not present. </param>
        /// <returns> A new <see cref="Models.SearchPolygonResult"/> instance for mocking. </returns>
        public static SearchPolygonResult SearchPolygonResult(string providerID = null, string error = null, GeoJsonObject geometryData = null)
        {
            return new SearchPolygonResult(providerID, error, geometryData);
        }

        /// <summary> Initializes a new instance of ErrorResponse. </summary>
        /// <param name="error"> The error object. </param>
        /// <returns> A new <see cref="Models.ErrorResponse"/> instance for mocking. </returns>
        public static ErrorResponse ErrorResponse(ErrorDetail error = null)
        {
            return new ErrorResponse(error);
        }

        /// <summary> Initializes a new instance of ErrorDetail. </summary>
        /// <param name="code"> The error code. </param>
        /// <param name="message"> The error message. </param>
        /// <param name="target"> The error target. </param>
        /// <param name="details"> The error details. </param>
        /// <param name="additionalInfo"> The error additional info. </param>
        /// <returns> A new <see cref="Models.ErrorDetail"/> instance for mocking. </returns>
        public static ErrorDetail ErrorDetail(string code = null, string message = null, string target = null, IEnumerable<ErrorDetail> details = null, IEnumerable<ErrorAdditionalInfo> additionalInfo = null)
        {
            details ??= new List<ErrorDetail>();
            additionalInfo ??= new List<ErrorAdditionalInfo>();

            return new ErrorDetail(code, message, target, details?.ToList(), additionalInfo?.ToList());
        }

        /// <summary> Initializes a new instance of ErrorAdditionalInfo. </summary>
        /// <param name="type"> The additional info type. </param>
        /// <param name="info"> The additional info. </param>
        /// <returns> A new <see cref="Models.ErrorAdditionalInfo"/> instance for mocking. </returns>
        public static ErrorAdditionalInfo ErrorAdditionalInfo(string type = null, object info = null)
        {
            return new ErrorAdditionalInfo(type, info);
        }

        /// <summary> Initializes a new instance of SearchCommonResponse. </summary>
        /// <param name="summary"> Summary object for a Search API response. </param>
        /// <param name="results"> A list of Search API results. </param>
        /// <returns> A new <see cref="Models.SearchCommonResponse"/> instance for mocking. </returns>
        public static SearchCommonResponse SearchCommonResponse(SearchCommonSummary summary = null, IEnumerable<SearchCommonResult> results = null)
        {
            results ??= new List<SearchCommonResult>();

            return new SearchCommonResponse(summary, results?.ToList());
        }

        /// <summary> Initializes a new instance of SearchCommonSummary. </summary>
        /// <param name="query"> Query property. </param>
        /// <param name="queryType"> QueryType property. </param>
        /// <param name="queryTime"> QueryTime property. </param>
        /// <param name="numResults"> NumResults property. </param>
        /// <param name="limit"> Maximum number of responses that will be returned. </param>
        /// <param name="offset"> Offset property. </param>
        /// <param name="totalResults"> TotalResults property. </param>
        /// <param name="fuzzyLevel"> FuzzyLevel property. </param>
        /// <param name="geoBias"> Indication when the internal search engine has applied a geospatial bias to improve the ranking of results.  In  some methods, this can be affected by setting the lat and lon parameters where available.  In other cases it is  purely internal. </param>
        /// <returns> A new <see cref="Models.SearchCommonSummary"/> instance for mocking. </returns>
        public static SearchCommonSummary SearchCommonSummary(string query = null, string queryType = null, int? queryTime = null, int? numResults = null, int? limit = null, int? offset = null, int? totalResults = null, int? fuzzyLevel = null, SearchCommonSummaryGeoBias geoBias = null)
        {
            return new SearchCommonSummary(query, queryType, queryTime, numResults, limit, offset, totalResults, fuzzyLevel, geoBias);
        }

        /// <summary> Initializes a new instance of CoordinatesPairAbbreviated. </summary>
        /// <param name="lat"> Latitude property. </param>
        /// <param name="lon"> Longitude property. </param>
        /// <returns> A new <see cref="Models.CoordinatesPairAbbreviated"/> instance for mocking. </returns>
        public static CoordinatesPairAbbreviated CoordinatesPairAbbreviated(double? lat = null, double? lon = null)
        {
            return new CoordinatesPairAbbreviated(lat, lon);
        }

        /// <summary> Initializes a new instance of SearchCommonResult. </summary>
        /// <param name="type">
        /// One of:
        /// * POI
        /// * Street
        /// * Geography
        /// * Point Address
        /// * Address Range
        /// * Cross Street.
        /// </param>
        /// <param name="id"> Id property. </param>
        /// <param name="score"> The value within a result set to indicate the relative matching score between results.  You can use this to  determine that result x is twice as likely to be as relevant as result y if the value of x is 2x the value of y.   The values vary between queries and is only meant as a relative value for one result set. </param>
        /// <param name="dist"> Straight line distance between the result and geobias location in meters. </param>
        /// <param name="info"> Info property. </param>
        /// <param name="entityType"> Geography entity type. Present only when entityType was requested and is available. </param>
        /// <param name="poi"> Details of the returned POI including information such as the name, phone, url address, and classifications. </param>
        /// <param name="address"> The address of the result. </param>
        /// <param name="position"> A location represented as a latitude and longitude using short names &apos;lat&apos; &amp; &apos;lon&apos;. </param>
        /// <param name="viewport"> The viewport that covers the result represented by the top-left and bottom-right coordinates of the  viewport. </param>
        /// <param name="entryPoints"> Entry Points array. </param>
        /// <param name="addressRanges"> Describes the address range on both sides of the street for a search result. Coordinates for the start and end locations of the address range are included. </param>
        /// <param name="dataSources"> Optional section. Reference ids for use with the [Get Search Polygon](https://docs.microsoft.com/rest/api/maps/search/getsearchpolygon) API. </param>
        /// <param name="matchType">
        /// Information on the type of match.
        /// 
        /// One of:
        ///   * AddressPoint
        ///   * HouseNumberRange
        ///   * Street.
        /// </param>
        /// <param name="detourTime"> Detour time in seconds. </param>
        /// <returns> A new <see cref="Models.SearchCommonResult"/> instance for mocking. </returns>
        public static SearchCommonResult SearchCommonResult(string type = null, string id = null, float? score = null, float? dist = null, string info = null, EntityType? entityType = null, SearchResultPoi poi = null, SearchResultAddress address = null, CoordinatesPairAbbreviated position = null, SearchResultViewport viewport = null, IEnumerable<SearchResultEntryPoint> entryPoints = null, SearchResultAddressRanges addressRanges = null, DataSources dataSources = null, string matchType = null, float? detourTime = null)
        {
            entryPoints ??= new List<SearchResultEntryPoint>();

            return new SearchCommonResult(type, id, score, dist, info, entityType, poi, address, position, viewport, entryPoints?.ToList(), addressRanges, dataSources, matchType, detourTime);
        }

        /// <summary> Initializes a new instance of SearchResultPoi. </summary>
        /// <param name="name"> Name of the POI property. </param>
        /// <param name="phone"> Telephone number property. </param>
        /// <param name="url"> Website URL property. </param>
        /// <param name="categorySet"> The list of the most specific POI categories. </param>
        /// <param name="categories"> __[Deprecated]__ Use classifications instead. Categories array. </param>
        /// <param name="classifications"> Classification array. </param>
        /// <param name="brands"> Brands array. The name of the brand for the POI being returned. </param>
        /// <param name="openingHours"> Opening hours for a POI (Points of Interest). </param>
        /// <returns> A new <see cref="Models.SearchResultPoi"/> instance for mocking. </returns>
        public static SearchResultPoi SearchResultPoi(string name = null, string phone = null, string url = null, IEnumerable<SearchResultPoiCategorySet> categorySet = null, IEnumerable<string> categories = null, IEnumerable<SearchResultPoiClassification> classifications = null, IEnumerable<SearchResultPoiBrand> brands = null, SearchResultPoiOpeningHours openingHours = null)
        {
            categorySet ??= new List<SearchResultPoiCategorySet>();
            categories ??= new List<string>();
            classifications ??= new List<SearchResultPoiClassification>();
            brands ??= new List<SearchResultPoiBrand>();

            return new SearchResultPoi(name, phone, url, categorySet?.ToList(), categories?.ToList(), classifications?.ToList(), brands?.ToList(), openingHours);
        }

        /// <summary> Initializes a new instance of SearchResultPoiCategorySet. </summary>
        /// <param name="id"> Category ID. </param>
        /// <returns> A new <see cref="Models.SearchResultPoiCategorySet"/> instance for mocking. </returns>
        public static SearchResultPoiCategorySet SearchResultPoiCategorySet(int? id = null)
        {
            return new SearchResultPoiCategorySet(id);
        }

        /// <summary> Initializes a new instance of SearchResultPoiClassification. </summary>
        /// <param name="code"> Code property. </param>
        /// <param name="names"> Names array. </param>
        /// <returns> A new <see cref="Models.SearchResultPoiClassification"/> instance for mocking. </returns>
        public static SearchResultPoiClassification SearchResultPoiClassification(string code = null, IEnumerable<SearchResultPoiClassificationName> names = null)
        {
            names ??= new List<SearchResultPoiClassificationName>();

            return new SearchResultPoiClassification(code, names?.ToList());
        }

        /// <summary> Initializes a new instance of SearchResultPoiClassificationName. </summary>
        /// <param name="nameLocale"> Name Locale property. </param>
        /// <param name="name"> Name property. </param>
        /// <returns> A new <see cref="Models.SearchResultPoiClassificationName"/> instance for mocking. </returns>
        public static SearchResultPoiClassificationName SearchResultPoiClassificationName(string nameLocale = null, string name = null)
        {
            return new SearchResultPoiClassificationName(nameLocale, name);
        }

        /// <summary> Initializes a new instance of SearchResultPoiBrand. </summary>
        /// <param name="name"> Name of the brand. </param>
        /// <returns> A new <see cref="Models.SearchResultPoiBrand"/> instance for mocking. </returns>
        public static SearchResultPoiBrand SearchResultPoiBrand(string name = null)
        {
            return new SearchResultPoiBrand(name);
        }

        /// <summary> Initializes a new instance of SearchResultPoiOpeningHours. </summary>
        /// <param name="mode"> Value used in the Request. </param>
        /// <param name="timeRanges"> List of time ranges for the next 7 days. </param>
        /// <returns> A new <see cref="Models.SearchResultPoiOpeningHours"/> instance for mocking. </returns>
        public static SearchResultPoiOpeningHours SearchResultPoiOpeningHours(string mode = null, IEnumerable<SearchResultPoiOpeningHoursTimeRange> timeRanges = null)
        {
            timeRanges ??= new List<SearchResultPoiOpeningHoursTimeRange>();

            return new SearchResultPoiOpeningHours(mode, timeRanges?.ToList());
        }

        /// <summary> Initializes a new instance of SearchResultPoiOpeningHoursTimeRange. </summary>
        /// <param name="startTime"> The point in the next 7 days range when a given POI is being opened, or the beginning of the range if it was opened before the range. </param>
        /// <param name="endTime"> The point in the next 7 days range when a given POI is being closed, or the beginning of the range if it was closed before the range. </param>
        /// <returns> A new <see cref="Models.SearchResultPoiOpeningHoursTimeRange"/> instance for mocking. </returns>
        public static SearchResultPoiOpeningHoursTimeRange SearchResultPoiOpeningHoursTimeRange(SearchResultPoiOpeningHoursTimeRangeTime startTime = null, SearchResultPoiOpeningHoursTimeRangeTime endTime = null)
        {
            return new SearchResultPoiOpeningHoursTimeRange(startTime, endTime);
        }

        /// <summary> Initializes a new instance of SearchResultPoiOpeningHoursTimeRangeTime. </summary>
        /// <param name="date"> Represents current day in calendar year in POI time zone. </param>
        /// <param name="hour"> Hours are in the 24 hour format in the local time of a POI; possible values are 0 - 23. </param>
        /// <param name="minute"> Minutes are in the local time of a POI; possible values are 0 - 59. </param>
        /// <returns> A new <see cref="Models.SearchResultPoiOpeningHoursTimeRangeTime"/> instance for mocking. </returns>
        public static SearchResultPoiOpeningHoursTimeRangeTime SearchResultPoiOpeningHoursTimeRangeTime(string date = null, int? hour = null, int? minute = null)
        {
            return new SearchResultPoiOpeningHoursTimeRangeTime(date, hour, minute);
        }

        /// <summary> Initializes a new instance of SearchResultAddress. </summary>
        /// <param name="buildingNumber"> Building Number property. </param>
        /// <param name="street"> Street property. </param>
        /// <param name="crossStreet"> Cross Street property. </param>
        /// <param name="streetNumber"> Street Number property. </param>
        /// <param name="routeNumbers"> number of routes. </param>
        /// <param name="streetName"> Street Name property. </param>
        /// <param name="streetNameAndNumber"> Street Name and Number property. </param>
        /// <param name="municipality"> Municipality property. </param>
        /// <param name="municipalitySubdivision"> Municipality Subdivision property. </param>
        /// <param name="countryTertiarySubdivision"> Country Tertiary Subdivision property. </param>
        /// <param name="countrySecondarySubdivision"> Country Secondary Subdivision property. </param>
        /// <param name="countrySubdivision"> Country Subdivision property. </param>
        /// <param name="postalCode"> Postal Code property. </param>
        /// <param name="extendedPostalCode"> Extended Postal Code property. </param>
        /// <param name="countryCode"> Country Code property. </param>
        /// <param name="country"> Country property. </param>
        /// <param name="countryCodeISO3"> Country Code ISO3 property. </param>
        /// <param name="freeformAddress"> Free form Address property. </param>
        /// <param name="countrySubdivisionName"> Country Subdivision Name property. </param>
        /// <param name="localName"> An address component which represents the name of a geographic area or locality that groups a number of addressable objects for addressing purposes, without being an administrative unit. This field is used to build the `freeformAddress` property. </param>
        /// <param name="boundingBox"> Bounding box coordinates. </param>
        /// <returns> A new <see cref="Models.SearchResultAddress"/> instance for mocking. </returns>
        public static SearchResultAddress SearchResultAddress(string buildingNumber = null, string street = null, string crossStreet = null, string streetNumber = null, IEnumerable<int> routeNumbers = null, string streetName = null, string streetNameAndNumber = null, string municipality = null, string municipalitySubdivision = null, string countryTertiarySubdivision = null, string countrySecondarySubdivision = null, string countrySubdivision = null, string postalCode = null, string extendedPostalCode = null, string countryCode = null, string country = null, string countryCodeISO3 = null, string freeformAddress = null, string countrySubdivisionName = null, string localName = null, object boundingBox = null)
        {
            routeNumbers ??= new List<int>();

            return new SearchResultAddress(buildingNumber, street, crossStreet, streetNumber, routeNumbers?.ToList(), streetName, streetNameAndNumber, municipality, municipalitySubdivision, countryTertiarySubdivision, countrySecondarySubdivision, countrySubdivision, postalCode, extendedPostalCode, countryCode, country, countryCodeISO3, freeformAddress, countrySubdivisionName, localName, boundingBox);
        }

        /// <summary> Initializes a new instance of SearchResultViewport. </summary>
        /// <param name="topLeftPoint"> A location represented as a latitude and longitude using short names &apos;lat&apos; &amp; &apos;lon&apos;. </param>
        /// <param name="btmRightPoint"> A location represented as a latitude and longitude using short names &apos;lat&apos; &amp; &apos;lon&apos;. </param>
        /// <returns> A new <see cref="Models.SearchResultViewport"/> instance for mocking. </returns>
        public static SearchResultViewport SearchResultViewport(CoordinatesPairAbbreviated topLeftPoint = null, CoordinatesPairAbbreviated btmRightPoint = null)
        {
            return new SearchResultViewport(topLeftPoint, btmRightPoint);
        }

        /// <summary> Initializes a new instance of SearchResultEntryPoint. </summary>
        /// <param name="type"> The type of entry point. Value can be either _main_ or _minor_. </param>
        /// <param name="position"> A location represented as a latitude and longitude using short names &apos;lat&apos; &amp; &apos;lon&apos;. </param>
        /// <returns> A new <see cref="Models.SearchResultEntryPoint"/> instance for mocking. </returns>
        public static SearchResultEntryPoint SearchResultEntryPoint(EntryPointType? type = null, CoordinatesPairAbbreviated position = null)
        {
            return new SearchResultEntryPoint(type, position);
        }

        /// <summary> Initializes a new instance of SearchResultAddressRanges. </summary>
        /// <param name="rangeLeft"> Address range on the left side of the street. </param>
        /// <param name="rangeRight"> Address range on the right side of the street. </param>
        /// <param name="from"> A location represented as a latitude and longitude using short names &apos;lat&apos; &amp; &apos;lon&apos;. </param>
        /// <param name="to"> A location represented as a latitude and longitude using short names &apos;lat&apos; &amp; &apos;lon&apos;. </param>
        /// <returns> A new <see cref="Models.SearchResultAddressRanges"/> instance for mocking. </returns>
        public static SearchResultAddressRanges SearchResultAddressRanges(string rangeLeft = null, string rangeRight = null, CoordinatesPairAbbreviated @from = null, CoordinatesPairAbbreviated to = null)
        {
            return new SearchResultAddressRanges(rangeLeft, rangeRight, @from, to);
        }

        /// <summary> Initializes a new instance of DataSources. </summary>
        /// <param name="geometry"> Information about the geometric shape of the result. Only present if type == Geography. </param>
        /// <returns> A new <see cref="Models.DataSources"/> instance for mocking. </returns>
        public static DataSources DataSources(DataSourcesGeometry geometry = null)
        {
            return new DataSources(geometry);
        }

        /// <summary> Initializes a new instance of DataSourcesGeometry. </summary>
        /// <param name="id"> Pass this as geometryId to the [Get Search Polygon](https://docs.microsoft.com/rest/api/maps/search/getsearchpolygon) API to fetch geometry information for this result. </param>
        /// <returns> A new <see cref="Models.DataSourcesGeometry"/> instance for mocking. </returns>
        public static DataSourcesGeometry DataSourcesGeometry(string id = null)
        {
            return new DataSourcesGeometry(id);
        }

        /// <summary> Initializes a new instance of SearchPoiCategoryTreeResponse. </summary>
        /// <param name="poiCategories"> Categories array. </param>
        /// <returns> A new <see cref="Models.SearchPoiCategoryTreeResponse"/> instance for mocking. </returns>
        public static SearchPoiCategoryTreeResponse SearchPoiCategoryTreeResponse(IEnumerable<PoiCategoryResult> poiCategories = null)
        {
            poiCategories ??= new List<PoiCategoryResult>();

            return new SearchPoiCategoryTreeResponse(poiCategories?.ToList());
        }

        /// <summary> Initializes a new instance of PoiCategoryResult. </summary>
        /// <param name="id"> Unique ID for the category. ID can be used to restrict search results to specific categories through other Search Service APIs, like [Get Search POI](https://docs.microsoft.com/rest/api/maps/search/getsearchpoi). </param>
        /// <param name="name"> Name of the category. </param>
        /// <param name="childCategoryIds"> Array of child category ids. </param>
        /// <param name="synonyms"> Array of alternative names of the category. </param>
        /// <returns> A new <see cref="Models.PoiCategoryResult"/> instance for mocking. </returns>
        public static PoiCategoryResult PoiCategoryResult(int? id = null, string name = null, IEnumerable<int> childCategoryIds = null, IEnumerable<string> synonyms = null)
        {
            childCategoryIds ??= new List<int>();
            synonyms ??= new List<string>();

            return new PoiCategoryResult(id, name, childCategoryIds?.ToList(), synonyms?.ToList());
        }

        /// <summary> Initializes a new instance of SearchAddressReverseResponse. </summary>
        /// <param name="summary"> Summary object for a Search Address Reverse response. </param>
        /// <param name="addresses"> Addresses array. </param>
        /// <returns> A new <see cref="Models.SearchAddressReverseResponse"/> instance for mocking. </returns>
        public static SearchAddressReverseResponse SearchAddressReverseResponse(SearchCommonSummary summary = null, IEnumerable<SearchAddressReverseResult> addresses = null)
        {
            addresses ??= new List<SearchAddressReverseResult>();

            return new SearchAddressReverseResponse(summary, addresses?.ToList());
        }

        /// <summary> Initializes a new instance of SearchAddressReverseResult. </summary>
        /// <param name="address"> The address of the result. </param>
        /// <param name="position"> Position property in the form of &quot;{latitude},{longitude}&quot;. </param>
        /// <param name="matchType">
        /// Information on the type of match.
        /// 
        /// One of:
        ///   * AddressPoint
        ///   * HouseNumberRange
        ///   * Street.
        /// </param>
        /// <returns> A new <see cref="Models.SearchAddressReverseResult"/> instance for mocking. </returns>
        public static SearchAddressReverseResult SearchAddressReverseResult(SearchResultAddress address = null, string position = null, string matchType = null)
        {
            return new SearchAddressReverseResult(address, position, matchType);
        }

        /// <summary> Initializes a new instance of SearchAddressReverseCrossStreetResponse. </summary>
        /// <param name="summary"> Summary object for a Search Address Reverse Cross Street response. </param>
        /// <param name="addresses"> Addresses array. </param>
        /// <returns> A new <see cref="Models.SearchAddressReverseCrossStreetResponse"/> instance for mocking. </returns>
        public static SearchAddressReverseCrossStreetResponse SearchAddressReverseCrossStreetResponse(SearchCommonSummary summary = null, IEnumerable<SearchAddressReverseCrossStreetResult> addresses = null)
        {
            addresses ??= new List<SearchAddressReverseCrossStreetResult>();

            return new SearchAddressReverseCrossStreetResponse(summary, addresses?.ToList());
        }

        /// <summary> Initializes a new instance of SearchAddressReverseCrossStreetResult. </summary>
        /// <param name="address"> The address of the result. </param>
        /// <param name="position"> Position property in the form of &quot;{latitude},{longitude}&quot;. </param>
        /// <returns> A new <see cref="Models.SearchAddressReverseCrossStreetResult"/> instance for mocking. </returns>
        public static SearchAddressReverseCrossStreetResult SearchAddressReverseCrossStreetResult(SearchResultAddress address = null, string position = null)
        {
            return new SearchAddressReverseCrossStreetResult(address, position);
        }

        /// <summary> Initializes a new instance of BatchResponse. </summary>
        /// <param name="summary"> Summary for the batch request. </param>
        /// <returns> A new <see cref="Models.BatchResponse"/> instance for mocking. </returns>
        public static BatchResponse BatchResponse(BatchResponseSummary summary = null)
        {
            return new BatchResponse(summary);
        }

        /// <summary> Initializes a new instance of BatchResponseSummary. </summary>
        /// <param name="successfulRequests"> Number of successful requests in the batch. </param>
        /// <param name="totalRequests"> Total number of requests in the batch. </param>
        /// <returns> A new <see cref="Models.BatchResponseSummary"/> instance for mocking. </returns>
        public static BatchResponseSummary BatchResponseSummary(int? successfulRequests = null, int? totalRequests = null)
        {
            return new BatchResponseSummary(successfulRequests, totalRequests);
        }

        /// <summary> Initializes a new instance of SearchFuzzyBatchResponse. </summary>
        /// <param name="summary"> Summary for the batch request. </param>
        /// <param name="batchItems"> Array containing the batch results. </param>
        /// <returns> A new <see cref="Models.SearchFuzzyBatchResponse"/> instance for mocking. </returns>
        public static SearchFuzzyBatchResponse SearchFuzzyBatchResponse(BatchResponseSummary summary = null, IEnumerable<SearchFuzzyBatchItem> batchItems = null)
        {
            batchItems ??= new List<SearchFuzzyBatchItem>();

            return new SearchFuzzyBatchResponse(summary, batchItems?.ToList());
        }

        /// <summary> Initializes a new instance of BatchItem. </summary>
        /// <param name="statusCode"> HTTP request status code. </param>
        /// <returns> A new <see cref="Models.BatchItem"/> instance for mocking. </returns>
        public static BatchItem BatchItem(float? statusCode = null)
        {
            return new BatchItem(statusCode);
        }

        /// <summary> Initializes a new instance of SearchFuzzyBatchItem. </summary>
        /// <param name="statusCode"> HTTP request status code. </param>
        /// <param name="response"> The result of the query. SearchCommonResponse if the query completed successfully, ErrorResponse otherwise. </param>
        /// <returns> A new <see cref="Models.SearchFuzzyBatchItem"/> instance for mocking. </returns>
        public static SearchFuzzyBatchItem SearchFuzzyBatchItem(float? statusCode = null, SearchFuzzyBatchItemResponse response = null)
        {
            return new SearchFuzzyBatchItem(statusCode, response);
        }

        /// <summary> Initializes a new instance of SearchFuzzyBatchItemResponse. </summary>
        /// <param name="summary"> Summary object for a Search API response. </param>
        /// <param name="results"> A list of Search API results. </param>
        /// <param name="error"> The error object. </param>
        /// <returns> A new <see cref="Models.SearchFuzzyBatchItemResponse"/> instance for mocking. </returns>
        public static SearchFuzzyBatchItemResponse SearchFuzzyBatchItemResponse(SearchCommonSummary summary = null, IEnumerable<SearchCommonResult> results = null, ErrorDetail error = null)
        {
            results ??= new List<SearchCommonResult>();

            return new SearchFuzzyBatchItemResponse(summary, results?.ToList(), error);
        }

        /// <summary> Initializes a new instance of SearchAddressBatchResponse. </summary>
        /// <param name="summary"> Summary for the batch request. </param>
        /// <param name="batchItems"> Array containing the batch results. </param>
        /// <returns> A new <see cref="Models.SearchAddressBatchResponse"/> instance for mocking. </returns>
        public static SearchAddressBatchResponse SearchAddressBatchResponse(BatchResponseSummary summary = null, IEnumerable<SearchAddressBatchItem> batchItems = null)
        {
            batchItems ??= new List<SearchAddressBatchItem>();

            return new SearchAddressBatchResponse(summary, batchItems?.ToList());
        }

        /// <summary> Initializes a new instance of SearchAddressBatchItem. </summary>
        /// <param name="statusCode"> HTTP request status code. </param>
        /// <param name="response"> The result of the query. SearchCommonResponse if the query completed successfully, ErrorResponse otherwise. </param>
        /// <returns> A new <see cref="Models.SearchAddressBatchItem"/> instance for mocking. </returns>
        public static SearchAddressBatchItem SearchAddressBatchItem(float? statusCode = null, SearchAddressBatchItemResponse response = null)
        {
            return new SearchAddressBatchItem(statusCode, response);
        }

        /// <summary> Initializes a new instance of SearchAddressBatchItemResponse. </summary>
        /// <param name="summary"> Summary object for a Search API response. </param>
        /// <param name="results"> A list of Search API results. </param>
        /// <param name="error"> The error object. </param>
        /// <returns> A new <see cref="Models.SearchAddressBatchItemResponse"/> instance for mocking. </returns>
        public static SearchAddressBatchItemResponse SearchAddressBatchItemResponse(SearchCommonSummary summary = null, IEnumerable<SearchCommonResult> results = null, ErrorDetail error = null)
        {
            results ??= new List<SearchCommonResult>();

            return new SearchAddressBatchItemResponse(summary, results?.ToList(), error);
        }

        /// <summary> Initializes a new instance of SearchAddressReverseBatchResponse. </summary>
        /// <param name="summary"> Summary for the batch request. </param>
        /// <param name="batchItems"> Array containing the batch results. </param>
        /// <returns> A new <see cref="Models.SearchAddressReverseBatchResponse"/> instance for mocking. </returns>
        public static SearchAddressReverseBatchResponse SearchAddressReverseBatchResponse(BatchResponseSummary summary = null, IEnumerable<SearchAddressReverseBatchItem> batchItems = null)
        {
            batchItems ??= new List<SearchAddressReverseBatchItem>();

            return new SearchAddressReverseBatchResponse(summary, batchItems?.ToList());
        }

        /// <summary> Initializes a new instance of SearchAddressReverseBatchItem. </summary>
        /// <param name="statusCode"> HTTP request status code. </param>
        /// <param name="response"> The result of the query. SearchAddressReverseResponse if the query completed successfully, ErrorResponse otherwise. </param>
        /// <returns> A new <see cref="Models.SearchAddressReverseBatchItem"/> instance for mocking. </returns>
        public static SearchAddressReverseBatchItem SearchAddressReverseBatchItem(float? statusCode = null, SearchAddressReverseBatchItemResponse response = null)
        {
            return new SearchAddressReverseBatchItem(statusCode, response);
        }

        /// <summary> Initializes a new instance of SearchAddressReverseBatchItemResponse. </summary>
        /// <param name="summary"> Summary object for a Search Address Reverse response. </param>
        /// <param name="addresses"> Addresses array. </param>
        /// <param name="error"> The error object. </param>
        /// <returns> A new <see cref="Models.SearchAddressReverseBatchItemResponse"/> instance for mocking. </returns>
        public static SearchAddressReverseBatchItemResponse SearchAddressReverseBatchItemResponse(SearchCommonSummary summary = null, IEnumerable<SearchAddressReverseResult> addresses = null, ErrorDetail error = null)
        {
            addresses ??= new List<SearchAddressReverseResult>();

            return new SearchAddressReverseBatchItemResponse(summary, addresses?.ToList(), error);
        }
    }
}
