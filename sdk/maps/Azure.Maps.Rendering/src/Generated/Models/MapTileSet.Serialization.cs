// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Maps.Rendering
{
    public partial class MapTileSet
    {
        internal static MapTileSet DeserializeMapTileSet(JsonElement element)
        {
            Optional<string> tilejson = default;
            Optional<string> name = default;
            Optional<string> description = default;
            Optional<string> version = default;
            Optional<string> attribution = default;
            Optional<string> template = default;
            Optional<string> legend = default;
            Optional<string> scheme = default;
            Optional<IReadOnlyList<string>> tiles = default;
            Optional<IReadOnlyList<string>> grids = default;
            Optional<IReadOnlyList<string>> data = default;
            Optional<int> minzoom = default;
            Optional<int> maxzoom = default;
            Optional<IReadOnlyList<float>> bounds = default;
            Optional<IReadOnlyList<float>> center = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("tilejson"))
                {
                    tilejson = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("description"))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("version"))
                {
                    version = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("attribution"))
                {
                    attribution = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("template"))
                {
                    template = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("legend"))
                {
                    legend = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("scheme"))
                {
                    scheme = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("tiles"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    tiles = array;
                    continue;
                }
                if (property.NameEquals("grids"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    grids = array;
                    continue;
                }
                if (property.NameEquals("data"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    data = array;
                    continue;
                }
                if (property.NameEquals("minzoom"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    minzoom = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("maxzoom"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    maxzoom = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("bounds"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<float> array = new List<float>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetSingle());
                    }
                    bounds = array;
                    continue;
                }
                if (property.NameEquals("center"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<float> array = new List<float>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetSingle());
                    }
                    center = array;
                    continue;
                }
            }
            return new MapTileSet(tilejson.Value, name.Value, description.Value, version.Value, attribution.Value, template.Value, legend.Value, scheme.Value, Optional.ToList(tiles), Optional.ToList(grids), Optional.ToList(data), Optional.ToNullable(minzoom), Optional.ToNullable(maxzoom), Optional.ToList(bounds), Optional.ToList(center));
        }
    }
}
