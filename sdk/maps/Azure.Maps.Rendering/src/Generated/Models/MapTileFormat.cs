// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Maps.Rendering
{
    /// <summary> The TileFormat. </summary>
    public readonly partial struct MapTileFormat : IEquatable<MapTileFormat>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="MapTileFormat"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public MapTileFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PngValue = "png";
        private const string PbfValue = "pbf";

        /// <summary> An image in the png format. Supports zoom levels 0 through 18. </summary>
        public static MapTileFormat Png { get; } = new MapTileFormat(PngValue);
        /// <summary> Vector graphic in the pbf format. Supports zoom levels 0 through 22. </summary>
        public static MapTileFormat Pbf { get; } = new MapTileFormat(PbfValue);
        /// <summary> Determines if two <see cref="MapTileFormat"/> values are the same. </summary>
        public static bool operator ==(MapTileFormat left, MapTileFormat right) => left.Equals(right);
        /// <summary> Determines if two <see cref="MapTileFormat"/> values are not the same. </summary>
        public static bool operator !=(MapTileFormat left, MapTileFormat right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="MapTileFormat"/>. </summary>
        public static implicit operator MapTileFormat(string value) => new MapTileFormat(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is MapTileFormat other && Equals(other);
        /// <inheritdoc />
        public bool Equals(MapTileFormat other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
