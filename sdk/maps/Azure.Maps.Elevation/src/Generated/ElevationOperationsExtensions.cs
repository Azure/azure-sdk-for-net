// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.Maps.Elevation
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ElevationOperations.
    /// </summary>
    public static partial class ElevationOperationsExtensions
    {
            /// <summary>
            /// Get Elevation Data on One or More Points
            /// </summary>
            /// <remarks>
            /// **Applies to**: S1 pricing tier.
            ///
            /// The Get Data for Points API provides elevation data for one or more points.
            /// A point is defined in lat,long coordinate format.
            ///
            /// Due to the URL character  length limit of 2048, it's not possible to pass
            /// more than 100 coordinates  as a pipeline delimited string in a URL GET
            /// request. If you intend to pass  more than 100 coordinates as a pipeline
            /// delimited string, use the [POST Data
            /// For
            /// Points](https://docs.microsoft.com/en-us/rest/api/maps/elevation/postdataforpoints).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='points'>
            /// The string representation of a list of points. A point is defined in
            /// lon/lat WGS84 coordinate reference system format.  If multiple points are
            /// requested, each of the points in a list should be separated by the pipe
            /// ('|') character.  The maximum number of points that can be requested in a
            /// single request is 2,000. The resolution of the elevation  data will be the
            /// highest for a single point and will decrease if multiple points are spread
            /// further apart.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PointsResult> GetDataForPointsAsync(this IElevationOperations operations, IList<string> points, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDataForPointsWithHttpMessagesAsync(points, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Query Elevation Data for Multiple Points
            /// </summary>
            /// <remarks>
            /// **Applies to**: S1 pricing tier.
            ///
            /// The Post Data for Points API provides elevation data for multiple points.
            /// A point is defined lon/lat coordinate format. Use the POST endpoint only
            /// if you intend to pass multiple points in the request. If you intend to pass
            /// a single coordinate into the API, use the [GET Data For Points
            /// API](https://docs.microsoft.com/en-us/rest/api/maps/elevation/getdataforpoints).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pointsRequestBody'>
            /// The string representation of a list of points. A point is defined in
            /// lon/lat WGS84 coordinate reference system format.  Each points in a list
            /// should be separated by the pipe ('|') character. The number of points that
            /// can be requested in  a POST request ranges from 2 to 2,000. The resolution
            /// of the elevation data will be the highest for a single point  and will
            /// decrease if multiple points are spread further apart.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PointsResult> PostDataForPointsAsync(this IElevationOperations operations, IList<CoordinatesPairAbbreviated> pointsRequestBody, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostDataForPointsWithHttpMessagesAsync(pointsRequestBody, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Elevation Data Along a Polyline
            /// </summary>
            /// <remarks>
            /// **Applies to**: S1 pricing tier.
            ///
            /// The Get Data for Polyline API provides elevation data along a polyline.
            ///
            /// A polyline is defined by  passing in between 2 and N endpoint coordinates
            /// separated by a pipe ('|') character. In addition  to passing in endpoints,
            /// customers can specify the number of sample points that will be used to
            /// divide  polyline into equally spaced segments. Elevation data at both start
            /// and endpoints and equally spaced  points along the polyline will be
            /// returned.
            ///
            /// A line between two endpoints is a straight Cartesian line, the  shortest
            /// line between those two points in the coordinate reference system. Note that
            /// the point is  chosen based on Euclidean distance and may markedly differ
            /// from the geodesic path along the curved  surface of the reference
            /// ellipsoid.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='lines'>
            /// The string representation of a polyline path. A polyline is defined by
            /// endpoint coordinates,  with each endpoint separated by a pipe ('|')
            /// character. The polyline should be defined in the  following format:
            /// `[longitude_point1, latitude_point1 | longitude_point2, latitude_point2,
            /// ...,  longitude_pointN, latitude_pointN]`.
            ///
            /// The longitude and latitude values refer to the World Geodetic  System
            /// (WGS84) coordinate reference system. The resolution of the data used to
            /// compute the  elevation depends on the distance between the endpoints.
            /// </param>
            /// <param name='samples'>
            /// The samples parameter specifies the number of equally spaced points at
            /// which elevation values  should be provided along a polyline path. The
            /// number of samples should range from 2 to 2,000. Default value is 10.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LinesResult> GetDataForPolylineAsync(this IElevationOperations operations, IList<string> lines, int? samples = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDataForPolylineWithHttpMessagesAsync(lines, samples, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Query Elevation Data Along a Polyline
            /// </summary>
            /// <remarks>
            /// **Applies to**: S1 pricing tier.
            ///
            /// The Post Data for Polyline API provides elevation data along a polyline. A
            /// polyline is defined by  passing in between 2 and N endpoint coordinates
            /// separated by a pipe ('|') character. In addition  to passing in endpoints,
            /// customers can specify the number of sample points that will be used to
            /// divide  polyline into equally spaced segments.
            ///
            /// Elevation data at both start and end points and equally spaced  points
            /// along the polyline will be returned. A line between two endpoints is a
            /// straight Cartesian line, the  shortest line between those two points in the
            /// coordinate reference system. Note that the point is  chosen based on
            /// Euclidean distance and may markedly differ from the geodesic path along the
            /// curved  surface of the reference ellipsoid.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='linesRequestBody'>
            /// The string representation of a polyline path. A polyline is defined by
            /// endpoint coordinates,  with each endpoint separated by a pipe ('|')
            /// character. The polyline should be defined in the  following format:
            /// `[longitude_point1, latitude_point1 | longitude_point2, latitude_point2,
            /// ...,  longitude_pointN, latitude_pointN]`. The longitude and latitude
            /// values refer to the World Geodetic  System (WGS84) coordinate reference
            /// system. The resolution of the data used to compute the  elevation will
            /// depend on the distance between the endpoints.
            /// </param>
            /// <param name='samples'>
            /// The samples parameter specifies the number of equally spaced points at
            /// which elevation values  should be provided along a polyline path. The
            /// number of samples should range from 2 to 2,000. Default value is 10.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LinesResult> PostDataForPolylineAsync(this IElevationOperations operations, IList<CoordinatesPairAbbreviated> linesRequestBody, int? samples = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostDataForPolylineWithHttpMessagesAsync(linesRequestBody, samples, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Elevation Data at Equally Spaced Locations Within a Bounding Box
            /// </summary>
            /// <remarks>
            /// **Applies to**: S1 pricing tier.
            ///
            /// The Get Data for Bounding Box API provides elevation data at equally spaced
            /// locations within a bounding box. A bounding box is defined by the
            /// coordinates for two corners (southwest, northeast) and then subsequently
            /// divided into rows and columns.
            ///
            /// Elevations are returned for the vertices of the grid created by the rows
            /// and  columns. Up to 2,000 elevations can be returned in a single request.
            /// The returned elevation values are ordered,  starting at the southwest
            /// corner, and then proceeding west to east along the row. At the end of the
            /// row,  it moves north to the next row, and repeats the process until it
            /// reaches the far northeast corner.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bounds'>
            /// The string that represents the rectangular area of a bounding box. The
            /// bounds parameter is defined by the 4 bounding box coordinates, with WGS84
            /// longitude and latitude of the southwest corner followed by  WGS84 longitude
            /// and latitude of the northeast corner. The string is presented in the
            /// following  format: `[SouthwestCorner_Longitude, SouthwestCorner_Latitude,
            /// NortheastCorner_Longitude,  NortheastCorner_Latitude]`.
            /// </param>
            /// <param name='rows'>
            /// Specifies the number of rows to use to divide the bounding box area into a
            /// grid. The number of vertices  in the grid should be less than 2,000.
            /// </param>
            /// <param name='columns'>
            /// Specifies the number of columns to use to divide the bounding box area into
            /// a grid. The number of vertices  in the grid should be less than 2,000.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BoundingBoxResult> GetDataForBoundingBoxAsync(this IElevationOperations operations, IList<string> bounds, int rows, int columns, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDataForBoundingBoxWithHttpMessagesAsync(bounds, rows, columns, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
