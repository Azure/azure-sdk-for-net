// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.Maps.Timezone.Models;

namespace Azure.Maps.Timezone
{
    internal partial class TimezoneRestClient
    {
        private Geography? geography;
        private string xMsClientId;
        private string apiVersion;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of TimezoneRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="xMsClientId"> Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. </param>
        /// <param name="apiVersion"> Api Version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="apiVersion"/> is null. </exception>
        public TimezoneRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Geography? geography = default, string xMsClientId = null, string apiVersion = "1.0")
        {
            geography ??= Geography.Us;
            if (apiVersion == null)
            {
                throw new ArgumentNullException(nameof(apiVersion));
            }

            this.geography = geography;
            this.xMsClientId = xMsClientId;
            this.apiVersion = apiVersion;
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        internal HttpMessage CreateGetTimezoneByIDRequest(ResponseFormat format, string query, string acceptLanguage, TimezoneOptions? options, DateTimeOffset? timeStamp, DateTimeOffset? transitionsFrom, int? transitionsYears)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(geography.Value, true);
            uri.AppendRaw(".atlas.microsoft.com", false);
            uri.AppendPath("/timezone/byId/", false);
            uri.AppendPath(format.ToString(), true);
            uri.AppendQuery("api-version", apiVersion, true);
            if (options != null)
            {
                uri.AppendQuery("options", options.Value.ToString(), true);
            }
            if (timeStamp != null)
            {
                uri.AppendQuery("timeStamp", timeStamp.Value, "O", true);
            }
            if (transitionsFrom != null)
            {
                uri.AppendQuery("transitionsFrom", transitionsFrom.Value, "O", true);
            }
            if (transitionsYears != null)
            {
                uri.AppendQuery("transitionsYears", transitionsYears.Value, true);
            }
            uri.AppendQuery("query", query, true);
            request.Uri = uri;
            if (xMsClientId != null)
            {
                request.Headers.Add("x-ms-client-id", xMsClientId);
            }
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage);
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// __Time Zone by Id__
        /// 
        /// **Applies to**: S0 and S1 pricing tiers.
        /// 
        /// 
        /// This API returns current, historical, and future time zone information for the specified IANA time zone ID.
        /// </summary>
        /// <param name="format"> Desired format of the response. Only `json` format is supported. </param>
        /// <param name="query"> The IANA time zone ID. </param>
        /// <param name="acceptLanguage"> Specifies the language code in which the timezone names should be returned. If no language code is provided, the response will be in &quot;EN&quot;. Please refer to [Supported Languages](https://docs.microsoft.com/en-us/azure/azure-maps/supported-languages) for details. </param>
        /// <param name="options"> Alternatively, use alias &quot;o&quot;. Options available for types of information returned in the result. </param>
        /// <param name="timeStamp"> Alternatively, use alias &quot;stamp&quot;, or &quot;s&quot;. Reference time, if omitted, the API will use the machine time serving the request. </param>
        /// <param name="transitionsFrom"> Alternatively, use alias &quot;tf&quot;. The start date from which daylight savings time (DST) transitions are requested, only applies when &quot;options&quot; = all or &quot;options&quot; = transitions. </param>
        /// <param name="transitionsYears"> Alternatively, use alias &quot;ty&quot;. The number of years from &quot;transitionsFrom&quot; for which DST transitions are requested, only applies when &quot;options&quot; = all or &quot;options&quot; = transitions. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="query"/> is null. </exception>
        public async Task<Response<TimezoneByIdResult>> GetTimezoneByIDAsync(ResponseFormat format, string query, string acceptLanguage = null, TimezoneOptions? options = null, DateTimeOffset? timeStamp = null, DateTimeOffset? transitionsFrom = null, int? transitionsYears = null, CancellationToken cancellationToken = default)
        {
            if (query == null)
            {
                throw new ArgumentNullException(nameof(query));
            }

            using var message = CreateGetTimezoneByIDRequest(format, query, acceptLanguage, options, timeStamp, transitionsFrom, transitionsYears);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        TimezoneByIdResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = TimezoneByIdResult.DeserializeTimezoneByIdResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// __Time Zone by Id__
        /// 
        /// **Applies to**: S0 and S1 pricing tiers.
        /// 
        /// 
        /// This API returns current, historical, and future time zone information for the specified IANA time zone ID.
        /// </summary>
        /// <param name="format"> Desired format of the response. Only `json` format is supported. </param>
        /// <param name="query"> The IANA time zone ID. </param>
        /// <param name="acceptLanguage"> Specifies the language code in which the timezone names should be returned. If no language code is provided, the response will be in &quot;EN&quot;. Please refer to [Supported Languages](https://docs.microsoft.com/en-us/azure/azure-maps/supported-languages) for details. </param>
        /// <param name="options"> Alternatively, use alias &quot;o&quot;. Options available for types of information returned in the result. </param>
        /// <param name="timeStamp"> Alternatively, use alias &quot;stamp&quot;, or &quot;s&quot;. Reference time, if omitted, the API will use the machine time serving the request. </param>
        /// <param name="transitionsFrom"> Alternatively, use alias &quot;tf&quot;. The start date from which daylight savings time (DST) transitions are requested, only applies when &quot;options&quot; = all or &quot;options&quot; = transitions. </param>
        /// <param name="transitionsYears"> Alternatively, use alias &quot;ty&quot;. The number of years from &quot;transitionsFrom&quot; for which DST transitions are requested, only applies when &quot;options&quot; = all or &quot;options&quot; = transitions. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="query"/> is null. </exception>
        public Response<TimezoneByIdResult> GetTimezoneByID(ResponseFormat format, string query, string acceptLanguage = null, TimezoneOptions? options = null, DateTimeOffset? timeStamp = null, DateTimeOffset? transitionsFrom = null, int? transitionsYears = null, CancellationToken cancellationToken = default)
        {
            if (query == null)
            {
                throw new ArgumentNullException(nameof(query));
            }

            using var message = CreateGetTimezoneByIDRequest(format, query, acceptLanguage, options, timeStamp, transitionsFrom, transitionsYears);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        TimezoneByIdResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = TimezoneByIdResult.DeserializeTimezoneByIdResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetTimezoneByCoordinatesRequest(ResponseFormat format, string query, string acceptLanguage, TimezoneOptions? options, DateTimeOffset? timeStamp, DateTimeOffset? transitionsFrom, int? transitionsYears)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(geography.Value, true);
            uri.AppendRaw(".atlas.microsoft.com", false);
            uri.AppendPath("/timezone/byCoordinates/", false);
            uri.AppendPath(format.ToString(), true);
            uri.AppendQuery("api-version", apiVersion, true);
            if (options != null)
            {
                uri.AppendQuery("options", options.Value.ToString(), true);
            }
            if (timeStamp != null)
            {
                uri.AppendQuery("timeStamp", timeStamp.Value, "O", true);
            }
            if (transitionsFrom != null)
            {
                uri.AppendQuery("transitionsFrom", transitionsFrom.Value, "O", true);
            }
            if (transitionsYears != null)
            {
                uri.AppendQuery("transitionsYears", transitionsYears.Value, true);
            }
            uri.AppendQuery("query", query, true);
            request.Uri = uri;
            if (xMsClientId != null)
            {
                request.Headers.Add("x-ms-client-id", xMsClientId);
            }
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage);
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// __Time Zone by Coordinates__
        /// 
        /// **Applies to**: S0 and S1 pricing tiers.
        /// 
        /// 
        /// This API returns current, historical, and future time zone information for a specified latitude-longitude pair. In addition, the API provides sunset and sunrise times for a given location.
        /// </summary>
        /// <param name="format"> Desired format of the response. Only `json` format is supported. </param>
        /// <param name="query"> Coordinates of the point for which time zone information is requested. The applicable query is specified as a comma separated string composed by latitude followed by longitude e.g. &quot;47.641268,-122.125679&quot;. </param>
        /// <param name="acceptLanguage"> Specifies the language code in which the timezone names should be returned. If no language code is provided, the response will be in &quot;EN&quot;. Please refer to [Supported Languages](https://docs.microsoft.com/en-us/azure/azure-maps/supported-languages) for details. </param>
        /// <param name="options"> Alternatively, use alias &quot;o&quot;. Options available for types of information returned in the result. </param>
        /// <param name="timeStamp"> Alternatively, use alias &quot;stamp&quot;, or &quot;s&quot;. Reference time, if omitted, the API will use the machine time serving the request. </param>
        /// <param name="transitionsFrom"> Alternatively, use alias &quot;tf&quot;. The start date from which daylight savings time (DST) transitions are requested, only applies when &quot;options&quot; = all or &quot;options&quot; = transitions. </param>
        /// <param name="transitionsYears"> Alternatively, use alias &quot;ty&quot;. The number of years from &quot;transitionsFrom&quot; for which DST transitions are requested, only applies when &quot;options&quot; = all or &quot;options&quot; = transitions. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="query"/> is null. </exception>
        public async Task<Response<TimezoneByCoordinatesResult>> GetTimezoneByCoordinatesAsync(ResponseFormat format, string query, string acceptLanguage = null, TimezoneOptions? options = null, DateTimeOffset? timeStamp = null, DateTimeOffset? transitionsFrom = null, int? transitionsYears = null, CancellationToken cancellationToken = default)
        {
            if (query == null)
            {
                throw new ArgumentNullException(nameof(query));
            }

            using var message = CreateGetTimezoneByCoordinatesRequest(format, query, acceptLanguage, options, timeStamp, transitionsFrom, transitionsYears);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        TimezoneByCoordinatesResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = TimezoneByCoordinatesResult.DeserializeTimezoneByCoordinatesResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// __Time Zone by Coordinates__
        /// 
        /// **Applies to**: S0 and S1 pricing tiers.
        /// 
        /// 
        /// This API returns current, historical, and future time zone information for a specified latitude-longitude pair. In addition, the API provides sunset and sunrise times for a given location.
        /// </summary>
        /// <param name="format"> Desired format of the response. Only `json` format is supported. </param>
        /// <param name="query"> Coordinates of the point for which time zone information is requested. The applicable query is specified as a comma separated string composed by latitude followed by longitude e.g. &quot;47.641268,-122.125679&quot;. </param>
        /// <param name="acceptLanguage"> Specifies the language code in which the timezone names should be returned. If no language code is provided, the response will be in &quot;EN&quot;. Please refer to [Supported Languages](https://docs.microsoft.com/en-us/azure/azure-maps/supported-languages) for details. </param>
        /// <param name="options"> Alternatively, use alias &quot;o&quot;. Options available for types of information returned in the result. </param>
        /// <param name="timeStamp"> Alternatively, use alias &quot;stamp&quot;, or &quot;s&quot;. Reference time, if omitted, the API will use the machine time serving the request. </param>
        /// <param name="transitionsFrom"> Alternatively, use alias &quot;tf&quot;. The start date from which daylight savings time (DST) transitions are requested, only applies when &quot;options&quot; = all or &quot;options&quot; = transitions. </param>
        /// <param name="transitionsYears"> Alternatively, use alias &quot;ty&quot;. The number of years from &quot;transitionsFrom&quot; for which DST transitions are requested, only applies when &quot;options&quot; = all or &quot;options&quot; = transitions. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="query"/> is null. </exception>
        public Response<TimezoneByCoordinatesResult> GetTimezoneByCoordinates(ResponseFormat format, string query, string acceptLanguage = null, TimezoneOptions? options = null, DateTimeOffset? timeStamp = null, DateTimeOffset? transitionsFrom = null, int? transitionsYears = null, CancellationToken cancellationToken = default)
        {
            if (query == null)
            {
                throw new ArgumentNullException(nameof(query));
            }

            using var message = CreateGetTimezoneByCoordinatesRequest(format, query, acceptLanguage, options, timeStamp, transitionsFrom, transitionsYears);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        TimezoneByCoordinatesResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = TimezoneByCoordinatesResult.DeserializeTimezoneByCoordinatesResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetTimezoneEnumWindowsRequest(ResponseFormat format)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(geography.Value, true);
            uri.AppendRaw(".atlas.microsoft.com", false);
            uri.AppendPath("/timezone/enumWindows/", false);
            uri.AppendPath(format.ToString(), true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            if (xMsClientId != null)
            {
                request.Headers.Add("x-ms-client-id", xMsClientId);
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// __Enumerate Windows Time Zones__
        /// 
        /// 
        /// **Applies to**: S0 and S1 pricing tiers.
        /// 
        /// 
        /// This API returns a full list of Windows Time Zone IDs.
        /// </summary>
        /// <param name="format"> Desired format of the response. Only `json` format is supported. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<IReadOnlyList<TimezoneEnumWindow>>> GetTimezoneEnumWindowsAsync(ResponseFormat format, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetTimezoneEnumWindowsRequest(format);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<TimezoneEnumWindow> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        List<TimezoneEnumWindow> array = new List<TimezoneEnumWindow>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(TimezoneEnumWindow.DeserializeTimezoneEnumWindow(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// __Enumerate Windows Time Zones__
        /// 
        /// 
        /// **Applies to**: S0 and S1 pricing tiers.
        /// 
        /// 
        /// This API returns a full list of Windows Time Zone IDs.
        /// </summary>
        /// <param name="format"> Desired format of the response. Only `json` format is supported. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<IReadOnlyList<TimezoneEnumWindow>> GetTimezoneEnumWindows(ResponseFormat format, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetTimezoneEnumWindowsRequest(format);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<TimezoneEnumWindow> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        List<TimezoneEnumWindow> array = new List<TimezoneEnumWindow>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(TimezoneEnumWindow.DeserializeTimezoneEnumWindow(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetTimezoneEnumIanaRequest(ResponseFormat format)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(geography.Value, true);
            uri.AppendRaw(".atlas.microsoft.com", false);
            uri.AppendPath("/timezone/enumIana/", false);
            uri.AppendPath(format.ToString(), true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            if (xMsClientId != null)
            {
                request.Headers.Add("x-ms-client-id", xMsClientId);
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// __Enumerate IANA Time Zones__
        /// 
        /// 
        /// **Applies to**: S0 and S1 pricing tiers.
        /// 
        /// 
        /// This API returns a full list of IANA time zone IDs. Updates to the IANA service will be reflected in the system within one day.
        /// </summary>
        /// <param name="format"> Desired format of the response. Only `json` format is supported. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<IReadOnlyList<IanaId>>> GetTimezoneEnumIanaAsync(ResponseFormat format, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetTimezoneEnumIanaRequest(format);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<IanaId> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        List<IanaId> array = new List<IanaId>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(IanaId.DeserializeIanaId(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// __Enumerate IANA Time Zones__
        /// 
        /// 
        /// **Applies to**: S0 and S1 pricing tiers.
        /// 
        /// 
        /// This API returns a full list of IANA time zone IDs. Updates to the IANA service will be reflected in the system within one day.
        /// </summary>
        /// <param name="format"> Desired format of the response. Only `json` format is supported. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<IReadOnlyList<IanaId>> GetTimezoneEnumIana(ResponseFormat format, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetTimezoneEnumIanaRequest(format);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<IanaId> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        List<IanaId> array = new List<IanaId>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(IanaId.DeserializeIanaId(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetTimezoneIanaVersionRequest(ResponseFormat format)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(geography.Value, true);
            uri.AppendRaw(".atlas.microsoft.com", false);
            uri.AppendPath("/timezone/ianaVersion/", false);
            uri.AppendPath(format.ToString(), true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            if (xMsClientId != null)
            {
                request.Headers.Add("x-ms-client-id", xMsClientId);
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// __Time Zone IANA Version__
        /// 
        /// 
        /// **Applies to**: S0 and S1 pricing tiers.
        /// 
        /// 
        /// This API returns the current IANA version number.
        /// </summary>
        /// <param name="format"> Desired format of the response. Only `json` format is supported. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<TimezoneIanaVersionResult>> GetTimezoneIanaVersionAsync(ResponseFormat format, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetTimezoneIanaVersionRequest(format);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        TimezoneIanaVersionResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = TimezoneIanaVersionResult.DeserializeTimezoneIanaVersionResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// __Time Zone IANA Version__
        /// 
        /// 
        /// **Applies to**: S0 and S1 pricing tiers.
        /// 
        /// 
        /// This API returns the current IANA version number.
        /// </summary>
        /// <param name="format"> Desired format of the response. Only `json` format is supported. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<TimezoneIanaVersionResult> GetTimezoneIanaVersion(ResponseFormat format, CancellationToken cancellationToken = default)
        {
            using var message = CreateGetTimezoneIanaVersionRequest(format);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        TimezoneIanaVersionResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = TimezoneIanaVersionResult.DeserializeTimezoneIanaVersionResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetTimezoneWindowsToIanaRequest(ResponseFormat format, string query, string territory)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(geography.Value, true);
            uri.AppendRaw(".atlas.microsoft.com", false);
            uri.AppendPath("/timezone/windowsToIana/", false);
            uri.AppendPath(format.ToString(), true);
            uri.AppendQuery("api-version", apiVersion, true);
            uri.AppendQuery("query", query, true);
            if (territory != null)
            {
                uri.AppendQuery("territory", territory, true);
            }
            request.Uri = uri;
            if (xMsClientId != null)
            {
                request.Headers.Add("x-ms-client-id", xMsClientId);
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// __Windows to IANA Time Zone__
        /// 
        /// 
        /// **Applies to**: S0 and S1 pricing tiers.
        /// 
        /// 
        /// This API returns a corresponding IANA ID, given a valid Windows Time Zone ID. Multiple IANA IDs may be returned for a single Windows ID. It is possible to narrow these results by adding an optional territory parameter.
        /// </summary>
        /// <param name="format"> Desired format of the response. Only `json` format is supported. </param>
        /// <param name="query"> The Windows time zone ID. </param>
        /// <param name="territory"> Windows Time Zone territory code. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="query"/> is null. </exception>
        public async Task<Response<IReadOnlyList<IanaId>>> GetTimezoneWindowsToIanaAsync(ResponseFormat format, string query, string territory = null, CancellationToken cancellationToken = default)
        {
            if (query == null)
            {
                throw new ArgumentNullException(nameof(query));
            }

            using var message = CreateGetTimezoneWindowsToIanaRequest(format, query, territory);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<IanaId> value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        List<IanaId> array = new List<IanaId>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(IanaId.DeserializeIanaId(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// __Windows to IANA Time Zone__
        /// 
        /// 
        /// **Applies to**: S0 and S1 pricing tiers.
        /// 
        /// 
        /// This API returns a corresponding IANA ID, given a valid Windows Time Zone ID. Multiple IANA IDs may be returned for a single Windows ID. It is possible to narrow these results by adding an optional territory parameter.
        /// </summary>
        /// <param name="format"> Desired format of the response. Only `json` format is supported. </param>
        /// <param name="query"> The Windows time zone ID. </param>
        /// <param name="territory"> Windows Time Zone territory code. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="query"/> is null. </exception>
        public Response<IReadOnlyList<IanaId>> GetTimezoneWindowsToIana(ResponseFormat format, string query, string territory = null, CancellationToken cancellationToken = default)
        {
            if (query == null)
            {
                throw new ArgumentNullException(nameof(query));
            }

            using var message = CreateGetTimezoneWindowsToIanaRequest(format, query, territory);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IReadOnlyList<IanaId> value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        List<IanaId> array = new List<IanaId>();
                        foreach (var item in document.RootElement.EnumerateArray())
                        {
                            array.Add(IanaId.DeserializeIanaId(item));
                        }
                        value = array;
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
