// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Maps.Timezone.Models
{
    public partial class TimezoneById
    {
        internal static TimezoneById DeserializeTimezoneById(JsonElement element)
        {
            Optional<string> id = default;
            Optional<IReadOnlyList<string>> aliases = default;
            Optional<IReadOnlyList<CountryRecord>> countries = default;
            Optional<TimezoneNames> names = default;
            Optional<ReferenceTimeById> referenceTime = default;
            Optional<RepresentativePoint> representativePoint = default;
            Optional<IReadOnlyList<TimeTransition>> timeTransitions = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("Id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("Aliases"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    aliases = array;
                    continue;
                }
                if (property.NameEquals("Countries"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<CountryRecord> array = new List<CountryRecord>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(CountryRecord.DeserializeCountryRecord(item));
                    }
                    countries = array;
                    continue;
                }
                if (property.NameEquals("Names"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    names = TimezoneNames.DeserializeTimezoneNames(property.Value);
                    continue;
                }
                if (property.NameEquals("ReferenceTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    referenceTime = ReferenceTimeById.DeserializeReferenceTimeById(property.Value);
                    continue;
                }
                if (property.NameEquals("RepresentativePoint"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    representativePoint = RepresentativePoint.DeserializeRepresentativePoint(property.Value);
                    continue;
                }
                if (property.NameEquals("TimeTransitions"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<TimeTransition> array = new List<TimeTransition>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(TimeTransition.DeserializeTimeTransition(item));
                    }
                    timeTransitions = array;
                    continue;
                }
            }
            return new TimezoneById(id.Value, Optional.ToList(aliases), Optional.ToList(countries), names.Value, referenceTime.Value, representativePoint.Value, Optional.ToList(timeTransitions));
        }
    }
}
