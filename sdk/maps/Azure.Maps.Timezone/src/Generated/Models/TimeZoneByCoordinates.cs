// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.Maps.Timezone.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class TimeZoneByCoordinates
    {
        /// <summary>
        /// Initializes a new instance of the TimeZoneByCoordinates class.
        /// </summary>
        public TimeZoneByCoordinates()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TimeZoneByCoordinates class.
        /// </summary>
        /// <param name="id">Id property</param>
        /// <param name="aliases">An array of time zone ID aliases.  Only
        /// returned when [options]=*zoneinfo* or *all*.
        ///
        /// Note: may be null.</param>
        /// <param name="countries">An array of country records. Only returned
        /// when [options]=*zoneinfo* or *all*.</param>
        /// <param name="timeTransitions">Time zone DST transitions from
        /// [transitionsFrom] until timestamp + 1 year.</param>
        public TimeZoneByCoordinates(string id = default(string), IList<string> aliases = default(IList<string>), IList<CountryRecord> countries = default(IList<CountryRecord>), TimezoneNames names = default(TimezoneNames), ReferenceTimeByCoordinates referenceTime = default(ReferenceTimeByCoordinates), RepresentativePoint representativePoint = default(RepresentativePoint), IList<TimeTransition> timeTransitions = default(IList<TimeTransition>))
        {
            Id = id;
            Aliases = aliases;
            Countries = countries;
            Names = names;
            ReferenceTime = referenceTime;
            RepresentativePoint = representativePoint;
            TimeTransitions = timeTransitions;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets id property
        /// </summary>
        [JsonProperty(PropertyName = "Id")]
        public string Id { get; private set; }

        /// <summary>
        /// Gets an array of time zone ID aliases.  Only returned when
        /// [options]=*zoneinfo* or *all*.
        ///
        /// Note: may be null.
        /// </summary>
        [JsonProperty(PropertyName = "Aliases")]
        public IList<string> Aliases { get; private set; }

        /// <summary>
        /// Gets an array of country records. Only returned when
        /// [options]=*zoneinfo* or *all*.
        /// </summary>
        [JsonProperty(PropertyName = "Countries")]
        public IList<CountryRecord> Countries { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Names")]
        public TimezoneNames Names { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ReferenceTime")]
        public ReferenceTimeByCoordinates ReferenceTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "RepresentativePoint")]
        public RepresentativePoint RepresentativePoint { get; set; }

        /// <summary>
        /// Gets time zone DST transitions from [transitionsFrom] until
        /// timestamp + 1 year.
        /// </summary>
        [JsonProperty(PropertyName = "TimeTransitions")]
        public IList<TimeTransition> TimeTransitions { get; private set; }

    }
}
