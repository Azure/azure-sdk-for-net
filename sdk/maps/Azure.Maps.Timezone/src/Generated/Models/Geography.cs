// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Maps.Timezone.Models
{
    /// <summary> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </summary>
    public readonly partial struct Geography : IEquatable<Geography>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="Geography"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Geography(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UsValue = "us";
        private const string EuValue = "eu";

        /// <summary> us. </summary>
        public static Geography Us { get; } = new Geography(UsValue);
        /// <summary> eu. </summary>
        public static Geography Eu { get; } = new Geography(EuValue);
        /// <summary> Determines if two <see cref="Geography"/> values are the same. </summary>
        public static bool operator ==(Geography left, Geography right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Geography"/> values are not the same. </summary>
        public static bool operator !=(Geography left, Geography right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Geography"/>. </summary>
        public static implicit operator Geography(string value) => new Geography(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Geography other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Geography other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
