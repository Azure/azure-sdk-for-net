// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.Maps.Timezone.Models;

namespace Azure.Maps.Timezone
{
    /// <summary> The Timezone service client. </summary>
    public partial class TimezoneClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal TimezoneRestClient RestClient { get; }

        /// <summary> Initializes a new instance of TimezoneClient for mocking. </summary>
        protected TimezoneClient()
        {
        }

        /// <summary> Initializes a new instance of TimezoneClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="xMsClientId"> Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public TimezoneClient(TokenCredential credential, Geography? geography = default, string xMsClientId = null, TimezoneClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new TimezoneClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            string[] scopes = { "https://atlas.microsoft.com/.default" };
            _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
            RestClient = new TimezoneRestClient(_clientDiagnostics, _pipeline, geography, xMsClientId, options.Version);
        }

        /// <summary> Initializes a new instance of TimezoneClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="xMsClientId"> Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public TimezoneClient(AzureKeyCredential credential, Geography? geography = default, string xMsClientId = null, TimezoneClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new TimezoneClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            _pipeline = HttpPipelineBuilder.Build(options, new AzureKeyCredentialPolicy(credential, "subscription-key"));
            RestClient = new TimezoneRestClient(_clientDiagnostics, _pipeline, geography, xMsClientId, options.Version);
        }

        /// <summary> Initializes a new instance of TimezoneClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="xMsClientId"> Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. </param>
        /// <param name="apiVersion"> Api Version. </param>
        internal TimezoneClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Geography? geography = default, string xMsClientId = null, string apiVersion = "1.0")
        {
            RestClient = new TimezoneRestClient(clientDiagnostics, pipeline, geography, xMsClientId, apiVersion);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary>
        /// __Time Zone by Id__
        /// 
        /// **Applies to**: S0 and S1 pricing tiers.
        /// 
        /// 
        /// This API returns current, historical, and future time zone information for the specified IANA time zone ID.
        /// </summary>
        /// <param name="format"> Desired format of the response. Only `json` format is supported. </param>
        /// <param name="query"> The IANA time zone ID. </param>
        /// <param name="acceptLanguage"> Specifies the language code in which the timezone names should be returned. If no language code is provided, the response will be in &quot;EN&quot;. Please refer to [Supported Languages](https://docs.microsoft.com/en-us/azure/azure-maps/supported-languages) for details. </param>
        /// <param name="options"> Alternatively, use alias &quot;o&quot;. Options available for types of information returned in the result. </param>
        /// <param name="timeStamp"> Alternatively, use alias &quot;stamp&quot;, or &quot;s&quot;. Reference time, if omitted, the API will use the machine time serving the request. </param>
        /// <param name="transitionsFrom"> Alternatively, use alias &quot;tf&quot;. The start date from which daylight savings time (DST) transitions are requested, only applies when &quot;options&quot; = all or &quot;options&quot; = transitions. </param>
        /// <param name="transitionsYears"> Alternatively, use alias &quot;ty&quot;. The number of years from &quot;transitionsFrom&quot; for which DST transitions are requested, only applies when &quot;options&quot; = all or &quot;options&quot; = transitions. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<TimezoneByIdResult>> GetTimezoneByIDAsync(ResponseFormat format, string query, string acceptLanguage = null, TimezoneOptions? options = null, DateTimeOffset? timeStamp = null, DateTimeOffset? transitionsFrom = null, int? transitionsYears = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("TimezoneClient.GetTimezoneByID");
            scope.Start();
            try
            {
                return await RestClient.GetTimezoneByIDAsync(format, query, acceptLanguage, options, timeStamp, transitionsFrom, transitionsYears, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// __Time Zone by Id__
        /// 
        /// **Applies to**: S0 and S1 pricing tiers.
        /// 
        /// 
        /// This API returns current, historical, and future time zone information for the specified IANA time zone ID.
        /// </summary>
        /// <param name="format"> Desired format of the response. Only `json` format is supported. </param>
        /// <param name="query"> The IANA time zone ID. </param>
        /// <param name="acceptLanguage"> Specifies the language code in which the timezone names should be returned. If no language code is provided, the response will be in &quot;EN&quot;. Please refer to [Supported Languages](https://docs.microsoft.com/en-us/azure/azure-maps/supported-languages) for details. </param>
        /// <param name="options"> Alternatively, use alias &quot;o&quot;. Options available for types of information returned in the result. </param>
        /// <param name="timeStamp"> Alternatively, use alias &quot;stamp&quot;, or &quot;s&quot;. Reference time, if omitted, the API will use the machine time serving the request. </param>
        /// <param name="transitionsFrom"> Alternatively, use alias &quot;tf&quot;. The start date from which daylight savings time (DST) transitions are requested, only applies when &quot;options&quot; = all or &quot;options&quot; = transitions. </param>
        /// <param name="transitionsYears"> Alternatively, use alias &quot;ty&quot;. The number of years from &quot;transitionsFrom&quot; for which DST transitions are requested, only applies when &quot;options&quot; = all or &quot;options&quot; = transitions. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<TimezoneByIdResult> GetTimezoneByID(ResponseFormat format, string query, string acceptLanguage = null, TimezoneOptions? options = null, DateTimeOffset? timeStamp = null, DateTimeOffset? transitionsFrom = null, int? transitionsYears = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("TimezoneClient.GetTimezoneByID");
            scope.Start();
            try
            {
                return RestClient.GetTimezoneByID(format, query, acceptLanguage, options, timeStamp, transitionsFrom, transitionsYears, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// __Time Zone by Coordinates__
        /// 
        /// **Applies to**: S0 and S1 pricing tiers.
        /// 
        /// 
        /// This API returns current, historical, and future time zone information for a specified latitude-longitude pair. In addition, the API provides sunset and sunrise times for a given location.
        /// </summary>
        /// <param name="format"> Desired format of the response. Only `json` format is supported. </param>
        /// <param name="query"> Coordinates of the point for which time zone information is requested. The applicable query is specified as a comma separated string composed by latitude followed by longitude e.g. &quot;47.641268,-122.125679&quot;. </param>
        /// <param name="acceptLanguage"> Specifies the language code in which the timezone names should be returned. If no language code is provided, the response will be in &quot;EN&quot;. Please refer to [Supported Languages](https://docs.microsoft.com/en-us/azure/azure-maps/supported-languages) for details. </param>
        /// <param name="options"> Alternatively, use alias &quot;o&quot;. Options available for types of information returned in the result. </param>
        /// <param name="timeStamp"> Alternatively, use alias &quot;stamp&quot;, or &quot;s&quot;. Reference time, if omitted, the API will use the machine time serving the request. </param>
        /// <param name="transitionsFrom"> Alternatively, use alias &quot;tf&quot;. The start date from which daylight savings time (DST) transitions are requested, only applies when &quot;options&quot; = all or &quot;options&quot; = transitions. </param>
        /// <param name="transitionsYears"> Alternatively, use alias &quot;ty&quot;. The number of years from &quot;transitionsFrom&quot; for which DST transitions are requested, only applies when &quot;options&quot; = all or &quot;options&quot; = transitions. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<TimezoneByCoordinatesResult>> GetTimezoneByCoordinatesAsync(ResponseFormat format, string query, string acceptLanguage = null, TimezoneOptions? options = null, DateTimeOffset? timeStamp = null, DateTimeOffset? transitionsFrom = null, int? transitionsYears = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("TimezoneClient.GetTimezoneByCoordinates");
            scope.Start();
            try
            {
                return await RestClient.GetTimezoneByCoordinatesAsync(format, query, acceptLanguage, options, timeStamp, transitionsFrom, transitionsYears, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// __Time Zone by Coordinates__
        /// 
        /// **Applies to**: S0 and S1 pricing tiers.
        /// 
        /// 
        /// This API returns current, historical, and future time zone information for a specified latitude-longitude pair. In addition, the API provides sunset and sunrise times for a given location.
        /// </summary>
        /// <param name="format"> Desired format of the response. Only `json` format is supported. </param>
        /// <param name="query"> Coordinates of the point for which time zone information is requested. The applicable query is specified as a comma separated string composed by latitude followed by longitude e.g. &quot;47.641268,-122.125679&quot;. </param>
        /// <param name="acceptLanguage"> Specifies the language code in which the timezone names should be returned. If no language code is provided, the response will be in &quot;EN&quot;. Please refer to [Supported Languages](https://docs.microsoft.com/en-us/azure/azure-maps/supported-languages) for details. </param>
        /// <param name="options"> Alternatively, use alias &quot;o&quot;. Options available for types of information returned in the result. </param>
        /// <param name="timeStamp"> Alternatively, use alias &quot;stamp&quot;, or &quot;s&quot;. Reference time, if omitted, the API will use the machine time serving the request. </param>
        /// <param name="transitionsFrom"> Alternatively, use alias &quot;tf&quot;. The start date from which daylight savings time (DST) transitions are requested, only applies when &quot;options&quot; = all or &quot;options&quot; = transitions. </param>
        /// <param name="transitionsYears"> Alternatively, use alias &quot;ty&quot;. The number of years from &quot;transitionsFrom&quot; for which DST transitions are requested, only applies when &quot;options&quot; = all or &quot;options&quot; = transitions. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<TimezoneByCoordinatesResult> GetTimezoneByCoordinates(ResponseFormat format, string query, string acceptLanguage = null, TimezoneOptions? options = null, DateTimeOffset? timeStamp = null, DateTimeOffset? transitionsFrom = null, int? transitionsYears = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("TimezoneClient.GetTimezoneByCoordinates");
            scope.Start();
            try
            {
                return RestClient.GetTimezoneByCoordinates(format, query, acceptLanguage, options, timeStamp, transitionsFrom, transitionsYears, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// __Enumerate Windows Time Zones__
        /// 
        /// 
        /// **Applies to**: S0 and S1 pricing tiers.
        /// 
        /// 
        /// This API returns a full list of Windows Time Zone IDs.
        /// </summary>
        /// <param name="format"> Desired format of the response. Only `json` format is supported. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<IReadOnlyList<TimezoneEnumWindow>>> GetTimezoneEnumWindowsAsync(ResponseFormat format, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("TimezoneClient.GetTimezoneEnumWindows");
            scope.Start();
            try
            {
                return await RestClient.GetTimezoneEnumWindowsAsync(format, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// __Enumerate Windows Time Zones__
        /// 
        /// 
        /// **Applies to**: S0 and S1 pricing tiers.
        /// 
        /// 
        /// This API returns a full list of Windows Time Zone IDs.
        /// </summary>
        /// <param name="format"> Desired format of the response. Only `json` format is supported. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<IReadOnlyList<TimezoneEnumWindow>> GetTimezoneEnumWindows(ResponseFormat format, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("TimezoneClient.GetTimezoneEnumWindows");
            scope.Start();
            try
            {
                return RestClient.GetTimezoneEnumWindows(format, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// __Enumerate IANA Time Zones__
        /// 
        /// 
        /// **Applies to**: S0 and S1 pricing tiers.
        /// 
        /// 
        /// This API returns a full list of IANA time zone IDs. Updates to the IANA service will be reflected in the system within one day.
        /// </summary>
        /// <param name="format"> Desired format of the response. Only `json` format is supported. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<IReadOnlyList<IanaId>>> GetTimezoneEnumIanaAsync(ResponseFormat format, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("TimezoneClient.GetTimezoneEnumIana");
            scope.Start();
            try
            {
                return await RestClient.GetTimezoneEnumIanaAsync(format, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// __Enumerate IANA Time Zones__
        /// 
        /// 
        /// **Applies to**: S0 and S1 pricing tiers.
        /// 
        /// 
        /// This API returns a full list of IANA time zone IDs. Updates to the IANA service will be reflected in the system within one day.
        /// </summary>
        /// <param name="format"> Desired format of the response. Only `json` format is supported. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<IReadOnlyList<IanaId>> GetTimezoneEnumIana(ResponseFormat format, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("TimezoneClient.GetTimezoneEnumIana");
            scope.Start();
            try
            {
                return RestClient.GetTimezoneEnumIana(format, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// __Time Zone IANA Version__
        /// 
        /// 
        /// **Applies to**: S0 and S1 pricing tiers.
        /// 
        /// 
        /// This API returns the current IANA version number.
        /// </summary>
        /// <param name="format"> Desired format of the response. Only `json` format is supported. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<TimezoneIanaVersionResult>> GetTimezoneIanaVersionAsync(ResponseFormat format, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("TimezoneClient.GetTimezoneIanaVersion");
            scope.Start();
            try
            {
                return await RestClient.GetTimezoneIanaVersionAsync(format, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// __Time Zone IANA Version__
        /// 
        /// 
        /// **Applies to**: S0 and S1 pricing tiers.
        /// 
        /// 
        /// This API returns the current IANA version number.
        /// </summary>
        /// <param name="format"> Desired format of the response. Only `json` format is supported. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<TimezoneIanaVersionResult> GetTimezoneIanaVersion(ResponseFormat format, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("TimezoneClient.GetTimezoneIanaVersion");
            scope.Start();
            try
            {
                return RestClient.GetTimezoneIanaVersion(format, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// __Windows to IANA Time Zone__
        /// 
        /// 
        /// **Applies to**: S0 and S1 pricing tiers.
        /// 
        /// 
        /// This API returns a corresponding IANA ID, given a valid Windows Time Zone ID. Multiple IANA IDs may be returned for a single Windows ID. It is possible to narrow these results by adding an optional territory parameter.
        /// </summary>
        /// <param name="format"> Desired format of the response. Only `json` format is supported. </param>
        /// <param name="query"> The Windows time zone ID. </param>
        /// <param name="territory"> Windows Time Zone territory code. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<IReadOnlyList<IanaId>>> GetTimezoneWindowsToIanaAsync(ResponseFormat format, string query, string territory = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("TimezoneClient.GetTimezoneWindowsToIana");
            scope.Start();
            try
            {
                return await RestClient.GetTimezoneWindowsToIanaAsync(format, query, territory, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// __Windows to IANA Time Zone__
        /// 
        /// 
        /// **Applies to**: S0 and S1 pricing tiers.
        /// 
        /// 
        /// This API returns a corresponding IANA ID, given a valid Windows Time Zone ID. Multiple IANA IDs may be returned for a single Windows ID. It is possible to narrow these results by adding an optional territory parameter.
        /// </summary>
        /// <param name="format"> Desired format of the response. Only `json` format is supported. </param>
        /// <param name="query"> The Windows time zone ID. </param>
        /// <param name="territory"> Windows Time Zone territory code. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<IReadOnlyList<IanaId>> GetTimezoneWindowsToIana(ResponseFormat format, string query, string territory = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("TimezoneClient.GetTimezoneWindowsToIana");
            scope.Start();
            try
            {
                return RestClient.GetTimezoneWindowsToIana(format, query, territory, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
