// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Maps.Weather.Samples
{
    public partial class Samples_WeatherClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetHourlyForecast_ShortVersion()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = client.GetHourlyForecast("json", new double[] { 123.45 }, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetHourlyForecast_ShortVersion_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = await client.GetHourlyForecastAsync("json", new double[] { 123.45 }, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetHourlyForecast_AllParameters()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = client.GetHourlyForecast("json", new double[] { 123.45 }, "metric", 1234, "<language>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("date").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("iconCode").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("iconPhrase").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("hasPrecipitation").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("isDaylight").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("temperature").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("temperature").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("temperature").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("realFeelTemperature").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("realFeelTemperature").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("realFeelTemperature").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("wetBulbTemperature").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("wetBulbTemperature").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("wetBulbTemperature").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("dewPoint").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("dewPoint").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("dewPoint").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("wind").GetProperty("direction").GetProperty("degrees").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("wind").GetProperty("direction").GetProperty("localizedDescription").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("wind").GetProperty("speed").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("wind").GetProperty("speed").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("wind").GetProperty("speed").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("windGust").GetProperty("direction").GetProperty("degrees").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("windGust").GetProperty("direction").GetProperty("localizedDescription").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("windGust").GetProperty("speed").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("windGust").GetProperty("speed").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("windGust").GetProperty("speed").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("relativeHumidity").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("visibility").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("visibility").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("visibility").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("ceiling").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("ceiling").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("ceiling").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("uvIndex").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("uvIndexPhrase").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("precipitationProbability").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("rainProbability").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("snowProbability").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("iceProbability").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("totalLiquid").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("totalLiquid").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("totalLiquid").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("rain").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("rain").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("rain").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("snow").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("snow").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("snow").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("ice").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("ice").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("ice").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("cloudCover").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetHourlyForecast_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = await client.GetHourlyForecastAsync("json", new double[] { 123.45 }, "metric", 1234, "<language>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("date").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("iconCode").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("iconPhrase").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("hasPrecipitation").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("isDaylight").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("temperature").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("temperature").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("temperature").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("realFeelTemperature").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("realFeelTemperature").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("realFeelTemperature").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("wetBulbTemperature").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("wetBulbTemperature").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("wetBulbTemperature").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("dewPoint").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("dewPoint").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("dewPoint").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("wind").GetProperty("direction").GetProperty("degrees").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("wind").GetProperty("direction").GetProperty("localizedDescription").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("wind").GetProperty("speed").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("wind").GetProperty("speed").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("wind").GetProperty("speed").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("windGust").GetProperty("direction").GetProperty("degrees").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("windGust").GetProperty("direction").GetProperty("localizedDescription").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("windGust").GetProperty("speed").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("windGust").GetProperty("speed").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("windGust").GetProperty("speed").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("relativeHumidity").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("visibility").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("visibility").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("visibility").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("ceiling").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("ceiling").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("ceiling").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("uvIndex").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("uvIndexPhrase").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("precipitationProbability").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("rainProbability").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("snowProbability").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("iceProbability").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("totalLiquid").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("totalLiquid").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("totalLiquid").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("rain").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("rain").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("rain").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("snow").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("snow").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("snow").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("ice").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("ice").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("ice").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("cloudCover").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetMinuteForecast_ShortVersion()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = client.GetMinuteForecast("json", new double[] { 123.45 }, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetMinuteForecast_ShortVersion_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = await client.GetMinuteForecastAsync("json", new double[] { 123.45 }, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetMinuteForecast_AllParameters()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = client.GetMinuteForecast("json", new double[] { 123.45 }, 1234, "<language>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("summary").GetProperty("briefPhrase60").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("shortPhrase").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("briefPhrase").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("longPhrase").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("iconCode").ToString());
            Console.WriteLine(result.GetProperty("intervalSummaries")[0].GetProperty("startMinute").ToString());
            Console.WriteLine(result.GetProperty("intervalSummaries")[0].GetProperty("endMinute").ToString());
            Console.WriteLine(result.GetProperty("intervalSummaries")[0].GetProperty("totalMinutes").ToString());
            Console.WriteLine(result.GetProperty("intervalSummaries")[0].GetProperty("shortPhrase").ToString());
            Console.WriteLine(result.GetProperty("intervalSummaries")[0].GetProperty("briefPhrase").ToString());
            Console.WriteLine(result.GetProperty("intervalSummaries")[0].GetProperty("longPhrase").ToString());
            Console.WriteLine(result.GetProperty("intervalSummaries")[0].GetProperty("iconCode").ToString());
            Console.WriteLine(result.GetProperty("intervals")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("intervals")[0].GetProperty("minute").ToString());
            Console.WriteLine(result.GetProperty("intervals")[0].GetProperty("dbz").ToString());
            Console.WriteLine(result.GetProperty("intervals")[0].GetProperty("shortPhrase").ToString());
            Console.WriteLine(result.GetProperty("intervals")[0].GetProperty("threshold").ToString());
            Console.WriteLine(result.GetProperty("intervals")[0].GetProperty("color").GetProperty("red").ToString());
            Console.WriteLine(result.GetProperty("intervals")[0].GetProperty("color").GetProperty("green").ToString());
            Console.WriteLine(result.GetProperty("intervals")[0].GetProperty("color").GetProperty("blue").ToString());
            Console.WriteLine(result.GetProperty("intervals")[0].GetProperty("color").GetProperty("hex").ToString());
            Console.WriteLine(result.GetProperty("intervals")[0].GetProperty("simplifiedColor").GetProperty("red").ToString());
            Console.WriteLine(result.GetProperty("intervals")[0].GetProperty("simplifiedColor").GetProperty("green").ToString());
            Console.WriteLine(result.GetProperty("intervals")[0].GetProperty("simplifiedColor").GetProperty("blue").ToString());
            Console.WriteLine(result.GetProperty("intervals")[0].GetProperty("simplifiedColor").GetProperty("hex").ToString());
            Console.WriteLine(result.GetProperty("intervals")[0].GetProperty("precipitationType").ToString());
            Console.WriteLine(result.GetProperty("intervals")[0].GetProperty("iconCode").ToString());
            Console.WriteLine(result.GetProperty("intervals")[0].GetProperty("cloudCover").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetMinuteForecast_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = await client.GetMinuteForecastAsync("json", new double[] { 123.45 }, 1234, "<language>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("summary").GetProperty("briefPhrase60").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("shortPhrase").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("briefPhrase").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("longPhrase").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("iconCode").ToString());
            Console.WriteLine(result.GetProperty("intervalSummaries")[0].GetProperty("startMinute").ToString());
            Console.WriteLine(result.GetProperty("intervalSummaries")[0].GetProperty("endMinute").ToString());
            Console.WriteLine(result.GetProperty("intervalSummaries")[0].GetProperty("totalMinutes").ToString());
            Console.WriteLine(result.GetProperty("intervalSummaries")[0].GetProperty("shortPhrase").ToString());
            Console.WriteLine(result.GetProperty("intervalSummaries")[0].GetProperty("briefPhrase").ToString());
            Console.WriteLine(result.GetProperty("intervalSummaries")[0].GetProperty("longPhrase").ToString());
            Console.WriteLine(result.GetProperty("intervalSummaries")[0].GetProperty("iconCode").ToString());
            Console.WriteLine(result.GetProperty("intervals")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("intervals")[0].GetProperty("minute").ToString());
            Console.WriteLine(result.GetProperty("intervals")[0].GetProperty("dbz").ToString());
            Console.WriteLine(result.GetProperty("intervals")[0].GetProperty("shortPhrase").ToString());
            Console.WriteLine(result.GetProperty("intervals")[0].GetProperty("threshold").ToString());
            Console.WriteLine(result.GetProperty("intervals")[0].GetProperty("color").GetProperty("red").ToString());
            Console.WriteLine(result.GetProperty("intervals")[0].GetProperty("color").GetProperty("green").ToString());
            Console.WriteLine(result.GetProperty("intervals")[0].GetProperty("color").GetProperty("blue").ToString());
            Console.WriteLine(result.GetProperty("intervals")[0].GetProperty("color").GetProperty("hex").ToString());
            Console.WriteLine(result.GetProperty("intervals")[0].GetProperty("simplifiedColor").GetProperty("red").ToString());
            Console.WriteLine(result.GetProperty("intervals")[0].GetProperty("simplifiedColor").GetProperty("green").ToString());
            Console.WriteLine(result.GetProperty("intervals")[0].GetProperty("simplifiedColor").GetProperty("blue").ToString());
            Console.WriteLine(result.GetProperty("intervals")[0].GetProperty("simplifiedColor").GetProperty("hex").ToString());
            Console.WriteLine(result.GetProperty("intervals")[0].GetProperty("precipitationType").ToString());
            Console.WriteLine(result.GetProperty("intervals")[0].GetProperty("iconCode").ToString());
            Console.WriteLine(result.GetProperty("intervals")[0].GetProperty("cloudCover").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetQuarterDayForecast_ShortVersion()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = client.GetQuarterDayForecast("json", new double[] { 123.45 }, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetQuarterDayForecast_ShortVersion_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = await client.GetQuarterDayForecastAsync("json", new double[] { 123.45 }, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetQuarterDayForecast_AllParameters()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = client.GetQuarterDayForecast("json", new double[] { 123.45 }, "metric", 1234, "<language>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("date").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("effectiveDate").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("quarter").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("iconCode").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("iconPhrase").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("phrase").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("temperature").GetProperty("minimum").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("temperature").GetProperty("minimum").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("temperature").GetProperty("minimum").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("temperature").GetProperty("maximum").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("temperature").GetProperty("maximum").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("temperature").GetProperty("maximum").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("realFeelTemperature").GetProperty("minimum").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("realFeelTemperature").GetProperty("minimum").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("realFeelTemperature").GetProperty("minimum").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("realFeelTemperature").GetProperty("maximum").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("realFeelTemperature").GetProperty("maximum").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("realFeelTemperature").GetProperty("maximum").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("dewPoint").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("dewPoint").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("dewPoint").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("relativeHumidity").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("wind").GetProperty("direction").GetProperty("degrees").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("wind").GetProperty("direction").GetProperty("localizedDescription").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("wind").GetProperty("speed").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("wind").GetProperty("speed").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("wind").GetProperty("speed").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("windGust").GetProperty("direction").GetProperty("degrees").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("windGust").GetProperty("direction").GetProperty("localizedDescription").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("windGust").GetProperty("speed").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("windGust").GetProperty("speed").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("windGust").GetProperty("speed").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("visibility").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("visibility").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("visibility").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("cloudCover").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("hasPrecipitation").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("precipitationType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("precipitationIntensity").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("precipitationProbability").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("thunderstormProbability").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("totalLiquid").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("totalLiquid").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("totalLiquid").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("rain").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("rain").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("rain").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("snow").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("snow").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("snow").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("ice").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("ice").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("ice").GetProperty("unitType").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetQuarterDayForecast_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = await client.GetQuarterDayForecastAsync("json", new double[] { 123.45 }, "metric", 1234, "<language>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("date").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("effectiveDate").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("quarter").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("iconCode").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("iconPhrase").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("phrase").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("temperature").GetProperty("minimum").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("temperature").GetProperty("minimum").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("temperature").GetProperty("minimum").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("temperature").GetProperty("maximum").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("temperature").GetProperty("maximum").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("temperature").GetProperty("maximum").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("realFeelTemperature").GetProperty("minimum").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("realFeelTemperature").GetProperty("minimum").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("realFeelTemperature").GetProperty("minimum").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("realFeelTemperature").GetProperty("maximum").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("realFeelTemperature").GetProperty("maximum").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("realFeelTemperature").GetProperty("maximum").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("dewPoint").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("dewPoint").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("dewPoint").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("relativeHumidity").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("wind").GetProperty("direction").GetProperty("degrees").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("wind").GetProperty("direction").GetProperty("localizedDescription").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("wind").GetProperty("speed").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("wind").GetProperty("speed").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("wind").GetProperty("speed").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("windGust").GetProperty("direction").GetProperty("degrees").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("windGust").GetProperty("direction").GetProperty("localizedDescription").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("windGust").GetProperty("speed").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("windGust").GetProperty("speed").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("windGust").GetProperty("speed").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("visibility").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("visibility").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("visibility").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("cloudCover").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("hasPrecipitation").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("precipitationType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("precipitationIntensity").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("precipitationProbability").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("thunderstormProbability").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("totalLiquid").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("totalLiquid").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("totalLiquid").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("rain").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("rain").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("rain").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("snow").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("snow").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("snow").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("ice").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("ice").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("ice").GetProperty("unitType").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetCurrentConditions_ShortVersion()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = client.GetCurrentConditions("json", new double[] { 123.45 }, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetCurrentConditions_ShortVersion_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = await client.GetCurrentConditionsAsync("json", new double[] { 123.45 }, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetCurrentConditions_AllParameters()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = client.GetCurrentConditions("json", new double[] { 123.45 }, "metric", "<details>", 1234, "<language>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("dateTime").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("phrase").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("iconCode").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("hasPrecipitation").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("isDayTime").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperature").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperature").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperature").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("realFeelTemperature").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("realFeelTemperature").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("realFeelTemperature").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("realFeelTemperatureShade").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("realFeelTemperatureShade").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("realFeelTemperatureShade").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("relativeHumidity").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("dewPoint").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("dewPoint").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("dewPoint").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("wind").GetProperty("direction").GetProperty("degrees").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("wind").GetProperty("direction").GetProperty("localizedDescription").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("wind").GetProperty("speed").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("wind").GetProperty("speed").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("wind").GetProperty("speed").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("windGust").GetProperty("direction").GetProperty("degrees").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("windGust").GetProperty("direction").GetProperty("localizedDescription").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("windGust").GetProperty("speed").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("windGust").GetProperty("speed").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("windGust").GetProperty("speed").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("uvIndex").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("uvIndexPhrase").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("visibility").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("visibility").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("visibility").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("obstructionsToVisibility").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("cloudCover").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("ceiling").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("ceiling").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("ceiling").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("pressure").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("pressure").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("pressure").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("pressureTendency").GetProperty("localizedDescription").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("pressureTendency").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("pastTwentyFourHourTemperatureDeparture").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("pastTwentyFourHourTemperatureDeparture").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("pastTwentyFourHourTemperatureDeparture").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("apparentTemperature").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("apparentTemperature").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("apparentTemperature").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("windChillTemperature").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("windChillTemperature").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("windChillTemperature").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("wetBulbTemperature").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("wetBulbTemperature").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("wetBulbTemperature").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("precipitationSummary").GetProperty("pastHour").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("precipitationSummary").GetProperty("pastHour").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("precipitationSummary").GetProperty("pastHour").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("precipitationSummary").GetProperty("pastThreeHours").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("precipitationSummary").GetProperty("pastThreeHours").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("precipitationSummary").GetProperty("pastThreeHours").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("precipitationSummary").GetProperty("pastSixHours").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("precipitationSummary").GetProperty("pastSixHours").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("precipitationSummary").GetProperty("pastSixHours").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("precipitationSummary").GetProperty("pastNineHours").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("precipitationSummary").GetProperty("pastNineHours").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("precipitationSummary").GetProperty("pastNineHours").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("precipitationSummary").GetProperty("pastTwelveHours").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("precipitationSummary").GetProperty("pastTwelveHours").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("precipitationSummary").GetProperty("pastTwelveHours").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("precipitationSummary").GetProperty("pastEighteenHours").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("precipitationSummary").GetProperty("pastEighteenHours").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("precipitationSummary").GetProperty("pastEighteenHours").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("precipitationSummary").GetProperty("pastTwentyFourHours").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("precipitationSummary").GetProperty("pastTwentyFourHours").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("precipitationSummary").GetProperty("pastTwentyFourHours").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperatureSummary").GetProperty("pastSixHours").GetProperty("minimum").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperatureSummary").GetProperty("pastSixHours").GetProperty("minimum").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperatureSummary").GetProperty("pastSixHours").GetProperty("minimum").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperatureSummary").GetProperty("pastSixHours").GetProperty("maximum").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperatureSummary").GetProperty("pastSixHours").GetProperty("maximum").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperatureSummary").GetProperty("pastSixHours").GetProperty("maximum").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperatureSummary").GetProperty("pastTwelveHours").GetProperty("minimum").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperatureSummary").GetProperty("pastTwelveHours").GetProperty("minimum").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperatureSummary").GetProperty("pastTwelveHours").GetProperty("minimum").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperatureSummary").GetProperty("pastTwelveHours").GetProperty("maximum").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperatureSummary").GetProperty("pastTwelveHours").GetProperty("maximum").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperatureSummary").GetProperty("pastTwelveHours").GetProperty("maximum").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperatureSummary").GetProperty("pastTwentyFourHours").GetProperty("minimum").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperatureSummary").GetProperty("pastTwentyFourHours").GetProperty("minimum").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperatureSummary").GetProperty("pastTwentyFourHours").GetProperty("minimum").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperatureSummary").GetProperty("pastTwentyFourHours").GetProperty("maximum").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperatureSummary").GetProperty("pastTwentyFourHours").GetProperty("maximum").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperatureSummary").GetProperty("pastTwentyFourHours").GetProperty("maximum").GetProperty("unitType").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetCurrentConditions_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = await client.GetCurrentConditionsAsync("json", new double[] { 123.45 }, "metric", "<details>", 1234, "<language>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("dateTime").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("phrase").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("iconCode").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("hasPrecipitation").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("isDayTime").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperature").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperature").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperature").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("realFeelTemperature").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("realFeelTemperature").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("realFeelTemperature").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("realFeelTemperatureShade").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("realFeelTemperatureShade").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("realFeelTemperatureShade").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("relativeHumidity").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("dewPoint").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("dewPoint").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("dewPoint").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("wind").GetProperty("direction").GetProperty("degrees").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("wind").GetProperty("direction").GetProperty("localizedDescription").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("wind").GetProperty("speed").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("wind").GetProperty("speed").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("wind").GetProperty("speed").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("windGust").GetProperty("direction").GetProperty("degrees").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("windGust").GetProperty("direction").GetProperty("localizedDescription").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("windGust").GetProperty("speed").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("windGust").GetProperty("speed").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("windGust").GetProperty("speed").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("uvIndex").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("uvIndexPhrase").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("visibility").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("visibility").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("visibility").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("obstructionsToVisibility").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("cloudCover").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("ceiling").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("ceiling").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("ceiling").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("pressure").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("pressure").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("pressure").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("pressureTendency").GetProperty("localizedDescription").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("pressureTendency").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("pastTwentyFourHourTemperatureDeparture").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("pastTwentyFourHourTemperatureDeparture").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("pastTwentyFourHourTemperatureDeparture").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("apparentTemperature").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("apparentTemperature").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("apparentTemperature").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("windChillTemperature").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("windChillTemperature").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("windChillTemperature").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("wetBulbTemperature").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("wetBulbTemperature").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("wetBulbTemperature").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("precipitationSummary").GetProperty("pastHour").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("precipitationSummary").GetProperty("pastHour").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("precipitationSummary").GetProperty("pastHour").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("precipitationSummary").GetProperty("pastThreeHours").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("precipitationSummary").GetProperty("pastThreeHours").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("precipitationSummary").GetProperty("pastThreeHours").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("precipitationSummary").GetProperty("pastSixHours").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("precipitationSummary").GetProperty("pastSixHours").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("precipitationSummary").GetProperty("pastSixHours").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("precipitationSummary").GetProperty("pastNineHours").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("precipitationSummary").GetProperty("pastNineHours").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("precipitationSummary").GetProperty("pastNineHours").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("precipitationSummary").GetProperty("pastTwelveHours").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("precipitationSummary").GetProperty("pastTwelveHours").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("precipitationSummary").GetProperty("pastTwelveHours").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("precipitationSummary").GetProperty("pastEighteenHours").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("precipitationSummary").GetProperty("pastEighteenHours").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("precipitationSummary").GetProperty("pastEighteenHours").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("precipitationSummary").GetProperty("pastTwentyFourHours").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("precipitationSummary").GetProperty("pastTwentyFourHours").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("precipitationSummary").GetProperty("pastTwentyFourHours").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperatureSummary").GetProperty("pastSixHours").GetProperty("minimum").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperatureSummary").GetProperty("pastSixHours").GetProperty("minimum").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperatureSummary").GetProperty("pastSixHours").GetProperty("minimum").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperatureSummary").GetProperty("pastSixHours").GetProperty("maximum").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperatureSummary").GetProperty("pastSixHours").GetProperty("maximum").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperatureSummary").GetProperty("pastSixHours").GetProperty("maximum").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperatureSummary").GetProperty("pastTwelveHours").GetProperty("minimum").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperatureSummary").GetProperty("pastTwelveHours").GetProperty("minimum").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperatureSummary").GetProperty("pastTwelveHours").GetProperty("minimum").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperatureSummary").GetProperty("pastTwelveHours").GetProperty("maximum").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperatureSummary").GetProperty("pastTwelveHours").GetProperty("maximum").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperatureSummary").GetProperty("pastTwelveHours").GetProperty("maximum").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperatureSummary").GetProperty("pastTwentyFourHours").GetProperty("minimum").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperatureSummary").GetProperty("pastTwentyFourHours").GetProperty("minimum").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperatureSummary").GetProperty("pastTwentyFourHours").GetProperty("minimum").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperatureSummary").GetProperty("pastTwentyFourHours").GetProperty("maximum").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperatureSummary").GetProperty("pastTwentyFourHours").GetProperty("maximum").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperatureSummary").GetProperty("pastTwentyFourHours").GetProperty("maximum").GetProperty("unitType").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDailyForecast_ShortVersion()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = client.GetDailyForecast("json", new double[] { 123.45 }, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDailyForecast_ShortVersion_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = await client.GetDailyForecastAsync("json", new double[] { 123.45 }, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDailyForecast_AllParameters()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = client.GetDailyForecast("json", new double[] { 123.45 }, "metric", 1234, "<language>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("summary").GetProperty("startDate").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("endDate").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("severity").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("phrase").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("date").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("temperature").GetProperty("minimum").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("temperature").GetProperty("minimum").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("temperature").GetProperty("minimum").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("temperature").GetProperty("maximum").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("temperature").GetProperty("maximum").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("temperature").GetProperty("maximum").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("realFeelTemperature").GetProperty("minimum").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("realFeelTemperature").GetProperty("minimum").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("realFeelTemperature").GetProperty("minimum").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("realFeelTemperature").GetProperty("maximum").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("realFeelTemperature").GetProperty("maximum").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("realFeelTemperature").GetProperty("maximum").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("realFeelTemperatureShade").GetProperty("minimum").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("realFeelTemperatureShade").GetProperty("minimum").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("realFeelTemperatureShade").GetProperty("minimum").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("realFeelTemperatureShade").GetProperty("maximum").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("realFeelTemperatureShade").GetProperty("maximum").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("realFeelTemperatureShade").GetProperty("maximum").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("hoursOfSun").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("degreeDaySummary").GetProperty("heating").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("degreeDaySummary").GetProperty("heating").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("degreeDaySummary").GetProperty("heating").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("degreeDaySummary").GetProperty("cooling").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("degreeDaySummary").GetProperty("cooling").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("degreeDaySummary").GetProperty("cooling").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("airAndPollen")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("airAndPollen")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("airAndPollen")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("airAndPollen")[0].GetProperty("categoryValue").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("airAndPollen")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("iconCode").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("iconPhrase").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("localSource").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("localSource").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("localSource").GetProperty("weatherCode").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("hasPrecipitation").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("precipitationType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("precipitationIntensity").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("shortPhrase").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("longPhrase").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("precipitationProbability").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("thunderstormProbability").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("rainProbability").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("snowProbability").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("iceProbability").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("wind").GetProperty("direction").GetProperty("degrees").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("wind").GetProperty("direction").GetProperty("localizedDescription").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("wind").GetProperty("speed").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("wind").GetProperty("speed").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("wind").GetProperty("speed").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("windGust").GetProperty("direction").GetProperty("degrees").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("windGust").GetProperty("direction").GetProperty("localizedDescription").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("windGust").GetProperty("speed").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("windGust").GetProperty("speed").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("windGust").GetProperty("speed").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("totalLiquid").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("totalLiquid").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("totalLiquid").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("rain").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("rain").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("rain").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("snow").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("snow").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("snow").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("ice").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("ice").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("ice").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("hoursOfPrecipitation").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("hoursOfRain").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("hoursOfSnow").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("hoursOfIce").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("cloudCover").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("iconCode").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("iconPhrase").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("localSource").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("localSource").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("localSource").GetProperty("weatherCode").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("hasPrecipitation").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("precipitationType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("precipitationIntensity").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("shortPhrase").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("longPhrase").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("precipitationProbability").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("thunderstormProbability").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("rainProbability").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("snowProbability").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("iceProbability").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("wind").GetProperty("direction").GetProperty("degrees").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("wind").GetProperty("direction").GetProperty("localizedDescription").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("wind").GetProperty("speed").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("wind").GetProperty("speed").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("wind").GetProperty("speed").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("windGust").GetProperty("direction").GetProperty("degrees").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("windGust").GetProperty("direction").GetProperty("localizedDescription").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("windGust").GetProperty("speed").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("windGust").GetProperty("speed").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("windGust").GetProperty("speed").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("totalLiquid").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("totalLiquid").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("totalLiquid").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("rain").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("rain").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("rain").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("snow").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("snow").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("snow").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("ice").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("ice").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("ice").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("hoursOfPrecipitation").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("hoursOfRain").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("hoursOfSnow").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("hoursOfIce").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("cloudCover").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("sources")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDailyForecast_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = await client.GetDailyForecastAsync("json", new double[] { 123.45 }, "metric", 1234, "<language>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("summary").GetProperty("startDate").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("endDate").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("severity").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("phrase").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("date").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("temperature").GetProperty("minimum").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("temperature").GetProperty("minimum").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("temperature").GetProperty("minimum").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("temperature").GetProperty("maximum").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("temperature").GetProperty("maximum").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("temperature").GetProperty("maximum").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("realFeelTemperature").GetProperty("minimum").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("realFeelTemperature").GetProperty("minimum").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("realFeelTemperature").GetProperty("minimum").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("realFeelTemperature").GetProperty("maximum").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("realFeelTemperature").GetProperty("maximum").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("realFeelTemperature").GetProperty("maximum").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("realFeelTemperatureShade").GetProperty("minimum").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("realFeelTemperatureShade").GetProperty("minimum").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("realFeelTemperatureShade").GetProperty("minimum").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("realFeelTemperatureShade").GetProperty("maximum").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("realFeelTemperatureShade").GetProperty("maximum").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("realFeelTemperatureShade").GetProperty("maximum").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("hoursOfSun").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("degreeDaySummary").GetProperty("heating").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("degreeDaySummary").GetProperty("heating").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("degreeDaySummary").GetProperty("heating").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("degreeDaySummary").GetProperty("cooling").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("degreeDaySummary").GetProperty("cooling").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("degreeDaySummary").GetProperty("cooling").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("airAndPollen")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("airAndPollen")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("airAndPollen")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("airAndPollen")[0].GetProperty("categoryValue").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("airAndPollen")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("iconCode").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("iconPhrase").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("localSource").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("localSource").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("localSource").GetProperty("weatherCode").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("hasPrecipitation").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("precipitationType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("precipitationIntensity").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("shortPhrase").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("longPhrase").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("precipitationProbability").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("thunderstormProbability").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("rainProbability").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("snowProbability").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("iceProbability").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("wind").GetProperty("direction").GetProperty("degrees").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("wind").GetProperty("direction").GetProperty("localizedDescription").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("wind").GetProperty("speed").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("wind").GetProperty("speed").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("wind").GetProperty("speed").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("windGust").GetProperty("direction").GetProperty("degrees").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("windGust").GetProperty("direction").GetProperty("localizedDescription").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("windGust").GetProperty("speed").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("windGust").GetProperty("speed").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("windGust").GetProperty("speed").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("totalLiquid").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("totalLiquid").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("totalLiquid").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("rain").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("rain").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("rain").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("snow").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("snow").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("snow").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("ice").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("ice").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("ice").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("hoursOfPrecipitation").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("hoursOfRain").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("hoursOfSnow").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("hoursOfIce").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("day").GetProperty("cloudCover").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("iconCode").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("iconPhrase").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("localSource").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("localSource").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("localSource").GetProperty("weatherCode").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("hasPrecipitation").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("precipitationType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("precipitationIntensity").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("shortPhrase").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("longPhrase").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("precipitationProbability").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("thunderstormProbability").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("rainProbability").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("snowProbability").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("iceProbability").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("wind").GetProperty("direction").GetProperty("degrees").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("wind").GetProperty("direction").GetProperty("localizedDescription").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("wind").GetProperty("speed").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("wind").GetProperty("speed").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("wind").GetProperty("speed").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("windGust").GetProperty("direction").GetProperty("degrees").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("windGust").GetProperty("direction").GetProperty("localizedDescription").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("windGust").GetProperty("speed").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("windGust").GetProperty("speed").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("windGust").GetProperty("speed").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("totalLiquid").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("totalLiquid").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("totalLiquid").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("rain").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("rain").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("rain").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("snow").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("snow").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("snow").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("ice").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("ice").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("ice").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("hoursOfPrecipitation").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("hoursOfRain").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("hoursOfSnow").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("hoursOfIce").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("night").GetProperty("cloudCover").ToString());
            Console.WriteLine(result.GetProperty("forecasts")[0].GetProperty("sources")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetWeatherAlongRoute_ShortVersion()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = client.GetWeatherAlongRoute("json", "<query>", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetWeatherAlongRoute_ShortVersion_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = await client.GetWeatherAlongRouteAsync("json", "<query>", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetWeatherAlongRoute_AllParameters()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = client.GetWeatherAlongRoute("json", "<query>", "<language>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("summary").GetProperty("iconCode").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("hazards").GetProperty("maxHazardIndex").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("hazards").GetProperty("hazardDetails")[0].GetProperty("hazardIndex").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("hazards").GetProperty("hazardDetails")[0].GetProperty("hazardCode").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("hazards").GetProperty("hazardDetails")[0].GetProperty("shortPhrase").ToString());
            Console.WriteLine(result.GetProperty("waypoints")[0].GetProperty("iconCode").ToString());
            Console.WriteLine(result.GetProperty("waypoints")[0].GetProperty("shortPhrase").ToString());
            Console.WriteLine(result.GetProperty("waypoints")[0].GetProperty("isDayTime").ToString());
            Console.WriteLine(result.GetProperty("waypoints")[0].GetProperty("cloudCover").ToString());
            Console.WriteLine(result.GetProperty("waypoints")[0].GetProperty("temperature").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("waypoints")[0].GetProperty("temperature").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("waypoints")[0].GetProperty("temperature").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("waypoints")[0].GetProperty("wind").GetProperty("direction").GetProperty("degrees").ToString());
            Console.WriteLine(result.GetProperty("waypoints")[0].GetProperty("wind").GetProperty("direction").GetProperty("localizedDescription").ToString());
            Console.WriteLine(result.GetProperty("waypoints")[0].GetProperty("wind").GetProperty("speed").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("waypoints")[0].GetProperty("wind").GetProperty("speed").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("waypoints")[0].GetProperty("wind").GetProperty("speed").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("waypoints")[0].GetProperty("windGust").GetProperty("direction").GetProperty("degrees").ToString());
            Console.WriteLine(result.GetProperty("waypoints")[0].GetProperty("windGust").GetProperty("direction").GetProperty("localizedDescription").ToString());
            Console.WriteLine(result.GetProperty("waypoints")[0].GetProperty("windGust").GetProperty("speed").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("waypoints")[0].GetProperty("windGust").GetProperty("speed").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("waypoints")[0].GetProperty("windGust").GetProperty("speed").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("waypoints")[0].GetProperty("precipitation").GetProperty("dbz").ToString());
            Console.WriteLine(result.GetProperty("waypoints")[0].GetProperty("precipitation").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("waypoints")[0].GetProperty("lightningCount").ToString());
            Console.WriteLine(result.GetProperty("waypoints")[0].GetProperty("sunGlare").GetProperty("calculatedVehicleHeading").ToString());
            Console.WriteLine(result.GetProperty("waypoints")[0].GetProperty("sunGlare").GetProperty("glareIndex").ToString());
            Console.WriteLine(result.GetProperty("waypoints")[0].GetProperty("hazards").GetProperty("maxHazardIndex").ToString());
            Console.WriteLine(result.GetProperty("waypoints")[0].GetProperty("hazards").GetProperty("hazardDetails")[0].GetProperty("hazardIndex").ToString());
            Console.WriteLine(result.GetProperty("waypoints")[0].GetProperty("hazards").GetProperty("hazardDetails")[0].GetProperty("hazardCode").ToString());
            Console.WriteLine(result.GetProperty("waypoints")[0].GetProperty("hazards").GetProperty("hazardDetails")[0].GetProperty("shortPhrase").ToString());
            Console.WriteLine(result.GetProperty("waypoints")[0].GetProperty("notifications")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("waypoints")[0].GetProperty("notifications")[0].GetProperty("hazardIndex").ToString());
            Console.WriteLine(result.GetProperty("waypoints")[0].GetProperty("notifications")[0].GetProperty("hazardCode").ToString());
            Console.WriteLine(result.GetProperty("waypoints")[0].GetProperty("notifications")[0].GetProperty("shortPhrase").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetWeatherAlongRoute_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = await client.GetWeatherAlongRouteAsync("json", "<query>", "<language>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("summary").GetProperty("iconCode").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("hazards").GetProperty("maxHazardIndex").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("hazards").GetProperty("hazardDetails")[0].GetProperty("hazardIndex").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("hazards").GetProperty("hazardDetails")[0].GetProperty("hazardCode").ToString());
            Console.WriteLine(result.GetProperty("summary").GetProperty("hazards").GetProperty("hazardDetails")[0].GetProperty("shortPhrase").ToString());
            Console.WriteLine(result.GetProperty("waypoints")[0].GetProperty("iconCode").ToString());
            Console.WriteLine(result.GetProperty("waypoints")[0].GetProperty("shortPhrase").ToString());
            Console.WriteLine(result.GetProperty("waypoints")[0].GetProperty("isDayTime").ToString());
            Console.WriteLine(result.GetProperty("waypoints")[0].GetProperty("cloudCover").ToString());
            Console.WriteLine(result.GetProperty("waypoints")[0].GetProperty("temperature").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("waypoints")[0].GetProperty("temperature").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("waypoints")[0].GetProperty("temperature").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("waypoints")[0].GetProperty("wind").GetProperty("direction").GetProperty("degrees").ToString());
            Console.WriteLine(result.GetProperty("waypoints")[0].GetProperty("wind").GetProperty("direction").GetProperty("localizedDescription").ToString());
            Console.WriteLine(result.GetProperty("waypoints")[0].GetProperty("wind").GetProperty("speed").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("waypoints")[0].GetProperty("wind").GetProperty("speed").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("waypoints")[0].GetProperty("wind").GetProperty("speed").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("waypoints")[0].GetProperty("windGust").GetProperty("direction").GetProperty("degrees").ToString());
            Console.WriteLine(result.GetProperty("waypoints")[0].GetProperty("windGust").GetProperty("direction").GetProperty("localizedDescription").ToString());
            Console.WriteLine(result.GetProperty("waypoints")[0].GetProperty("windGust").GetProperty("speed").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("waypoints")[0].GetProperty("windGust").GetProperty("speed").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("waypoints")[0].GetProperty("windGust").GetProperty("speed").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("waypoints")[0].GetProperty("precipitation").GetProperty("dbz").ToString());
            Console.WriteLine(result.GetProperty("waypoints")[0].GetProperty("precipitation").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("waypoints")[0].GetProperty("lightningCount").ToString());
            Console.WriteLine(result.GetProperty("waypoints")[0].GetProperty("sunGlare").GetProperty("calculatedVehicleHeading").ToString());
            Console.WriteLine(result.GetProperty("waypoints")[0].GetProperty("sunGlare").GetProperty("glareIndex").ToString());
            Console.WriteLine(result.GetProperty("waypoints")[0].GetProperty("hazards").GetProperty("maxHazardIndex").ToString());
            Console.WriteLine(result.GetProperty("waypoints")[0].GetProperty("hazards").GetProperty("hazardDetails")[0].GetProperty("hazardIndex").ToString());
            Console.WriteLine(result.GetProperty("waypoints")[0].GetProperty("hazards").GetProperty("hazardDetails")[0].GetProperty("hazardCode").ToString());
            Console.WriteLine(result.GetProperty("waypoints")[0].GetProperty("hazards").GetProperty("hazardDetails")[0].GetProperty("shortPhrase").ToString());
            Console.WriteLine(result.GetProperty("waypoints")[0].GetProperty("notifications")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("waypoints")[0].GetProperty("notifications")[0].GetProperty("hazardIndex").ToString());
            Console.WriteLine(result.GetProperty("waypoints")[0].GetProperty("notifications")[0].GetProperty("hazardCode").ToString());
            Console.WriteLine(result.GetProperty("waypoints")[0].GetProperty("notifications")[0].GetProperty("shortPhrase").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSevereWeatherAlerts_ShortVersion()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = client.GetSevereWeatherAlerts("json", new double[] { 123.45 }, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSevereWeatherAlerts_ShortVersion_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = await client.GetSevereWeatherAlertsAsync("json", new double[] { 123.45 }, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSevereWeatherAlerts_AllParameters()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = client.GetSevereWeatherAlerts("json", new double[] { 123.45 }, "<language>", "<details>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("countryCode").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("alertId").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("description").GetProperty("localized").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("description").GetProperty("english").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("priority").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("class").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("level").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("sourceId").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("disclaimer").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("alertAreas")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("alertAreas")[0].GetProperty("summary").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("alertAreas")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("alertAreas")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("alertAreas")[0].GetProperty("latestStatus").GetProperty("localized").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("alertAreas")[0].GetProperty("latestStatus").GetProperty("english").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("alertAreas")[0].GetProperty("alertDetails").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("alertAreas")[0].GetProperty("alertDetailsLanguageCode").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSevereWeatherAlerts_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = await client.GetSevereWeatherAlertsAsync("json", new double[] { 123.45 }, "<language>", "<details>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("countryCode").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("alertId").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("description").GetProperty("localized").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("description").GetProperty("english").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("priority").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("class").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("level").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("sourceId").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("disclaimer").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("alertAreas")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("alertAreas")[0].GetProperty("summary").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("alertAreas")[0].GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("alertAreas")[0].GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("alertAreas")[0].GetProperty("latestStatus").GetProperty("localized").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("alertAreas")[0].GetProperty("latestStatus").GetProperty("english").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("alertAreas")[0].GetProperty("alertDetails").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("alertAreas")[0].GetProperty("alertDetailsLanguageCode").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDailyIndices_ShortVersion()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = client.GetDailyIndices("json", new double[] { 123.45 }, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDailyIndices_ShortVersion_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = await client.GetDailyIndicesAsync("json", new double[] { 123.45 }, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDailyIndices_AllParameters()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = client.GetDailyIndices("json", new double[] { 123.45 }, "<language>", 1234, 1234, 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("indexName").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("indexId").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("dateTime").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("categoryValue").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("ascending").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("description").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDailyIndices_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = await client.GetDailyIndicesAsync("json", new double[] { 123.45 }, "<language>", 1234, 1234, 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("indexName").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("indexId").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("dateTime").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("categoryValue").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("ascending").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("description").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetTropicalStormActive_ShortVersion()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = client.GetTropicalStormActive("json", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetTropicalStormActive_ShortVersion_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = await client.GetTropicalStormActiveAsync("json", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetTropicalStormActive_AllParameters()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = client.GetTropicalStormActive("json", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("year").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("basinId").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("isActive").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("isSubtropical").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("govId").ToString());
            Console.WriteLine(result.GetProperty("nextLink").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetTropicalStormActive_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = await client.GetTropicalStormActiveAsync("json", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("year").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("basinId").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("isActive").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("isSubtropical").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("govId").ToString());
            Console.WriteLine(result.GetProperty("nextLink").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SearchTropicalStorm_ShortVersion()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = client.SearchTropicalStorm("json", 1234, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SearchTropicalStorm_ShortVersion_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = await client.SearchTropicalStormAsync("json", 1234, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SearchTropicalStorm_AllParameters()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = client.SearchTropicalStorm("json", 1234, "AL", 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("year").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("basinId").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("isActive").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("isRetired").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("isSubtropical").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("govId").ToString());
            Console.WriteLine(result.GetProperty("nextLink").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SearchTropicalStorm_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = await client.SearchTropicalStormAsync("json", 1234, "AL", 1234, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("year").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("basinId").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("isActive").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("isRetired").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("isSubtropical").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("govId").ToString());
            Console.WriteLine(result.GetProperty("nextLink").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetTropicalStormForecast_ShortVersion()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = client.GetTropicalStormForecast("json", 1234, "AL", 1234, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetTropicalStormForecast_ShortVersion_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = await client.GetTropicalStormForecastAsync("json", 1234, "AL", 1234, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetTropicalStormForecast_AllParameters()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = client.GetTropicalStormForecast("json", 1234, "AL", 1234, "metric", true, true, true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("dateTime").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("initializedDateTime").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("location").GetProperty("latitude").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("location").GetProperty("longitude").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("maxWindGust").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("maxWindGust").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("maxWindGust").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("sustainedWind").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("sustainedWind").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("sustainedWind").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("window").GetProperty("left").GetProperty("latitude").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("window").GetProperty("left").GetProperty("longitude").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("window").GetProperty("right").GetProperty("latitude").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("window").GetProperty("right").GetProperty("longitude").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("window").GetProperty("beginDateTime").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("window").GetProperty("endDateTime").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("window").GetProperty("beginStatus").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("window").GetProperty("endStatus").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("window").GetProperty("geometry").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("windRadiiSummary")[0].GetProperty("dateTime").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("windRadiiSummary")[0].GetProperty("windSpeed").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("windRadiiSummary")[0].GetProperty("windSpeed").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("windRadiiSummary")[0].GetProperty("windSpeed").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("windRadiiSummary")[0].GetProperty("radiusSectorData")[0].GetProperty("beginBearing").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("windRadiiSummary")[0].GetProperty("radiusSectorData")[0].GetProperty("endBearing").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("windRadiiSummary")[0].GetProperty("radiusSectorData")[0].GetProperty("range").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("windRadiiSummary")[0].GetProperty("radiiGeometry").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("nextLink").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetTropicalStormForecast_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = await client.GetTropicalStormForecastAsync("json", 1234, "AL", 1234, "metric", true, true, true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("dateTime").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("initializedDateTime").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("location").GetProperty("latitude").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("location").GetProperty("longitude").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("maxWindGust").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("maxWindGust").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("maxWindGust").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("sustainedWind").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("sustainedWind").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("sustainedWind").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("window").GetProperty("left").GetProperty("latitude").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("window").GetProperty("left").GetProperty("longitude").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("window").GetProperty("right").GetProperty("latitude").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("window").GetProperty("right").GetProperty("longitude").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("window").GetProperty("beginDateTime").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("window").GetProperty("endDateTime").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("window").GetProperty("beginStatus").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("window").GetProperty("endStatus").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("window").GetProperty("geometry").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("windRadiiSummary")[0].GetProperty("dateTime").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("windRadiiSummary")[0].GetProperty("windSpeed").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("windRadiiSummary")[0].GetProperty("windSpeed").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("windRadiiSummary")[0].GetProperty("windSpeed").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("windRadiiSummary")[0].GetProperty("radiusSectorData")[0].GetProperty("beginBearing").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("windRadiiSummary")[0].GetProperty("radiusSectorData")[0].GetProperty("endBearing").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("windRadiiSummary")[0].GetProperty("radiusSectorData")[0].GetProperty("range").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("windRadiiSummary")[0].GetProperty("radiiGeometry").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("nextLink").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetTropicalStormLocations_ShortVersion()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = client.GetTropicalStormLocations("json", 1234, "AL", 1234, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetTropicalStormLocations_ShortVersion_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = await client.GetTropicalStormLocationsAsync("json", 1234, "AL", 1234, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetTropicalStormLocations_AllParameters()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = client.GetTropicalStormLocations("json", 1234, "AL", 1234, true, true, "metric", true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("dateTime").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("location").GetProperty("latitude").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("location").GetProperty("longitude").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("maxWindGust").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("maxWindGust").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("maxWindGust").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("sustainedWind").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("sustainedWind").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("sustainedWind").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("minimumPressure").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("minimumPressure").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("minimumPressure").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("movement").GetProperty("direction").GetProperty("degrees").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("movement").GetProperty("direction").GetProperty("localizedDescription").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("movement").GetProperty("speed").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("movement").GetProperty("speed").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("movement").GetProperty("speed").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("isSubtropical").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("hasTropicalPotential").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("isPostTropical").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("windRadiiSummary")[0].GetProperty("dateTime").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("windRadiiSummary")[0].GetProperty("windSpeed").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("windRadiiSummary")[0].GetProperty("windSpeed").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("windRadiiSummary")[0].GetProperty("windSpeed").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("windRadiiSummary")[0].GetProperty("radiusSectorData")[0].GetProperty("beginBearing").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("windRadiiSummary")[0].GetProperty("radiusSectorData")[0].GetProperty("endBearing").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("windRadiiSummary")[0].GetProperty("radiusSectorData")[0].GetProperty("range").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("windRadiiSummary")[0].GetProperty("radiiGeometry").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("nextLink").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetTropicalStormLocations_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = await client.GetTropicalStormLocationsAsync("json", 1234, "AL", 1234, true, true, "metric", true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("dateTime").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("location").GetProperty("latitude").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("location").GetProperty("longitude").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("maxWindGust").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("maxWindGust").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("maxWindGust").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("sustainedWind").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("sustainedWind").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("sustainedWind").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("minimumPressure").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("minimumPressure").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("minimumPressure").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("movement").GetProperty("direction").GetProperty("degrees").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("movement").GetProperty("direction").GetProperty("localizedDescription").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("movement").GetProperty("speed").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("movement").GetProperty("speed").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("movement").GetProperty("speed").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("isSubtropical").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("hasTropicalPotential").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("isPostTropical").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("windRadiiSummary")[0].GetProperty("dateTime").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("windRadiiSummary")[0].GetProperty("windSpeed").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("windRadiiSummary")[0].GetProperty("windSpeed").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("windRadiiSummary")[0].GetProperty("windSpeed").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("windRadiiSummary")[0].GetProperty("radiusSectorData")[0].GetProperty("beginBearing").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("windRadiiSummary")[0].GetProperty("radiusSectorData")[0].GetProperty("endBearing").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("windRadiiSummary")[0].GetProperty("radiusSectorData")[0].GetProperty("range").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("windRadiiSummary")[0].GetProperty("radiiGeometry").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("nextLink").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetCurrentAirQuality_ShortVersion()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = client.GetCurrentAirQuality("json", new double[] { 123.45 }, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetCurrentAirQuality_ShortVersion_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = await client.GetCurrentAirQualityAsync("json", new double[] { 123.45 }, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetCurrentAirQuality_AllParameters()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = client.GetCurrentAirQuality("json", new double[] { 123.45 }, "<language>", true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("dateTime").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("index").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("globalIndex").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("dominantPollutant").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("categoryColor").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("pollutants")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("pollutants")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("pollutants")[0].GetProperty("index").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("pollutants")[0].GetProperty("globalIndex").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("pollutants")[0].GetProperty("concentration").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("pollutants")[0].GetProperty("concentration").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("pollutants")[0].GetProperty("concentration").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("nextLink").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetCurrentAirQuality_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = await client.GetCurrentAirQualityAsync("json", new double[] { 123.45 }, "<language>", true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("dateTime").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("index").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("globalIndex").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("dominantPollutant").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("categoryColor").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("pollutants")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("pollutants")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("pollutants")[0].GetProperty("index").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("pollutants")[0].GetProperty("globalIndex").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("pollutants")[0].GetProperty("concentration").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("pollutants")[0].GetProperty("concentration").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("pollutants")[0].GetProperty("concentration").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("nextLink").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAirQualityDailyForecasts_ShortVersion()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = client.GetAirQualityDailyForecasts("json", new double[] { 123.45 }, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAirQualityDailyForecasts_ShortVersion_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = await client.GetAirQualityDailyForecastsAsync("json", new double[] { 123.45 }, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAirQualityDailyForecasts_AllParameters()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = client.GetAirQualityDailyForecasts("json", new double[] { 123.45 }, "<language>", default, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("dateTime").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("index").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("globalIndex").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("dominantPollutant").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("categoryColor").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("nextLink").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAirQualityDailyForecasts_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = await client.GetAirQualityDailyForecastsAsync("json", new double[] { 123.45 }, "<language>", default, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("dateTime").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("index").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("globalIndex").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("dominantPollutant").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("categoryColor").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("nextLink").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAirQualityHourlyForecasts_ShortVersion()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = client.GetAirQualityHourlyForecasts("json", new double[] { 123.45 }, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAirQualityHourlyForecasts_ShortVersion_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = await client.GetAirQualityHourlyForecastsAsync("json", new double[] { 123.45 }, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetAirQualityHourlyForecasts_AllParameters()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = client.GetAirQualityHourlyForecasts("json", new double[] { 123.45 }, "<language>", default, true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("dateTime").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("index").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("globalIndex").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("dominantPollutant").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("categoryColor").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("pollutants")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("pollutants")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("pollutants")[0].GetProperty("index").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("pollutants")[0].GetProperty("globalIndex").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("pollutants")[0].GetProperty("concentration").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("pollutants")[0].GetProperty("concentration").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("pollutants")[0].GetProperty("concentration").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("nextLink").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetAirQualityHourlyForecasts_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = await client.GetAirQualityHourlyForecastsAsync("json", new double[] { 123.45 }, "<language>", default, true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("dateTime").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("index").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("globalIndex").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("dominantPollutant").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("categoryColor").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("pollutants")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("pollutants")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("pollutants")[0].GetProperty("index").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("pollutants")[0].GetProperty("globalIndex").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("pollutants")[0].GetProperty("concentration").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("pollutants")[0].GetProperty("concentration").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("pollutants")[0].GetProperty("concentration").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("nextLink").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDailyHistoricalActuals_ShortVersion()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = client.GetDailyHistoricalActuals("json", new double[] { 123.45 }, DateTimeOffset.Parse("2022-05-10"), DateTimeOffset.Parse("2022-05-10"), null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDailyHistoricalActuals_ShortVersion_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = await client.GetDailyHistoricalActualsAsync("json", new double[] { 123.45 }, DateTimeOffset.Parse("2022-05-10"), DateTimeOffset.Parse("2022-05-10"), null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDailyHistoricalActuals_AllParameters()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = client.GetDailyHistoricalActuals("json", new double[] { 123.45 }, DateTimeOffset.Parse("2022-05-10"), DateTimeOffset.Parse("2022-05-10"), "metric", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("date").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperature").GetProperty("maximum").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperature").GetProperty("maximum").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperature").GetProperty("maximum").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperature").GetProperty("minimum").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperature").GetProperty("minimum").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperature").GetProperty("minimum").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperature").GetProperty("average").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperature").GetProperty("average").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperature").GetProperty("average").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("degreeDaySummary").GetProperty("heating").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("degreeDaySummary").GetProperty("heating").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("degreeDaySummary").GetProperty("heating").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("degreeDaySummary").GetProperty("cooling").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("degreeDaySummary").GetProperty("cooling").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("degreeDaySummary").GetProperty("cooling").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("precipitation").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("precipitation").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("precipitation").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("snowfall").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("snowfall").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("snowfall").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("snowDepth").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("snowDepth").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("snowDepth").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("nextLink").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDailyHistoricalActuals_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = await client.GetDailyHistoricalActualsAsync("json", new double[] { 123.45 }, DateTimeOffset.Parse("2022-05-10"), DateTimeOffset.Parse("2022-05-10"), "metric", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("date").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperature").GetProperty("maximum").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperature").GetProperty("maximum").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperature").GetProperty("maximum").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperature").GetProperty("minimum").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperature").GetProperty("minimum").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperature").GetProperty("minimum").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperature").GetProperty("average").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperature").GetProperty("average").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperature").GetProperty("average").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("degreeDaySummary").GetProperty("heating").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("degreeDaySummary").GetProperty("heating").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("degreeDaySummary").GetProperty("heating").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("degreeDaySummary").GetProperty("cooling").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("degreeDaySummary").GetProperty("cooling").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("degreeDaySummary").GetProperty("cooling").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("precipitation").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("precipitation").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("precipitation").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("snowfall").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("snowfall").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("snowfall").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("snowDepth").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("snowDepth").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("snowDepth").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("nextLink").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDailyHistoricalRecords_ShortVersion()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = client.GetDailyHistoricalRecords("json", new double[] { 123.45 }, DateTimeOffset.Parse("2022-05-10"), DateTimeOffset.Parse("2022-05-10"), null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDailyHistoricalRecords_ShortVersion_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = await client.GetDailyHistoricalRecordsAsync("json", new double[] { 123.45 }, DateTimeOffset.Parse("2022-05-10"), DateTimeOffset.Parse("2022-05-10"), null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDailyHistoricalRecords_AllParameters()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = client.GetDailyHistoricalRecords("json", new double[] { 123.45 }, DateTimeOffset.Parse("2022-05-10"), DateTimeOffset.Parse("2022-05-10"), "metric", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("date").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperature").GetProperty("maximum").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperature").GetProperty("maximum").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperature").GetProperty("maximum").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperature").GetProperty("maximum").GetProperty("year").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperature").GetProperty("minimum").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperature").GetProperty("minimum").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperature").GetProperty("minimum").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperature").GetProperty("minimum").GetProperty("year").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperature").GetProperty("average").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperature").GetProperty("average").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperature").GetProperty("average").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("precipitation").GetProperty("maximum").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("precipitation").GetProperty("maximum").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("precipitation").GetProperty("maximum").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("precipitation").GetProperty("maximum").GetProperty("year").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("snowfall").GetProperty("maximum").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("snowfall").GetProperty("maximum").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("snowfall").GetProperty("maximum").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("snowfall").GetProperty("maximum").GetProperty("year").ToString());
            Console.WriteLine(result.GetProperty("nextLink").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDailyHistoricalRecords_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = await client.GetDailyHistoricalRecordsAsync("json", new double[] { 123.45 }, DateTimeOffset.Parse("2022-05-10"), DateTimeOffset.Parse("2022-05-10"), "metric", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("date").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperature").GetProperty("maximum").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperature").GetProperty("maximum").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperature").GetProperty("maximum").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperature").GetProperty("maximum").GetProperty("year").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperature").GetProperty("minimum").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperature").GetProperty("minimum").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperature").GetProperty("minimum").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperature").GetProperty("minimum").GetProperty("year").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperature").GetProperty("average").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperature").GetProperty("average").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperature").GetProperty("average").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("precipitation").GetProperty("maximum").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("precipitation").GetProperty("maximum").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("precipitation").GetProperty("maximum").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("precipitation").GetProperty("maximum").GetProperty("year").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("snowfall").GetProperty("maximum").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("snowfall").GetProperty("maximum").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("snowfall").GetProperty("maximum").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("snowfall").GetProperty("maximum").GetProperty("year").ToString());
            Console.WriteLine(result.GetProperty("nextLink").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDailyHistoricalNormals_ShortVersion()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = client.GetDailyHistoricalNormals("json", new double[] { 123.45 }, DateTimeOffset.Parse("2022-05-10"), DateTimeOffset.Parse("2022-05-10"), null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDailyHistoricalNormals_ShortVersion_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = await client.GetDailyHistoricalNormalsAsync("json", new double[] { 123.45 }, DateTimeOffset.Parse("2022-05-10"), DateTimeOffset.Parse("2022-05-10"), null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetDailyHistoricalNormals_AllParameters()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = client.GetDailyHistoricalNormals("json", new double[] { 123.45 }, DateTimeOffset.Parse("2022-05-10"), DateTimeOffset.Parse("2022-05-10"), "metric", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("date").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperature").GetProperty("maximum").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperature").GetProperty("maximum").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperature").GetProperty("maximum").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperature").GetProperty("minimum").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperature").GetProperty("minimum").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperature").GetProperty("minimum").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperature").GetProperty("average").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperature").GetProperty("average").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperature").GetProperty("average").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("degreeDaySummary").GetProperty("heating").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("degreeDaySummary").GetProperty("heating").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("degreeDaySummary").GetProperty("heating").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("degreeDaySummary").GetProperty("cooling").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("degreeDaySummary").GetProperty("cooling").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("degreeDaySummary").GetProperty("cooling").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("precipitation").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("precipitation").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("precipitation").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("nextLink").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetDailyHistoricalNormals_AllParameters_Async()
        {
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            WeatherClient client = new WeatherClient(credential);

            Response response = await client.GetDailyHistoricalNormalsAsync("json", new double[] { 123.45 }, DateTimeOffset.Parse("2022-05-10"), DateTimeOffset.Parse("2022-05-10"), "metric", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("date").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperature").GetProperty("maximum").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperature").GetProperty("maximum").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperature").GetProperty("maximum").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperature").GetProperty("minimum").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperature").GetProperty("minimum").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperature").GetProperty("minimum").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperature").GetProperty("average").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperature").GetProperty("average").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("temperature").GetProperty("average").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("degreeDaySummary").GetProperty("heating").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("degreeDaySummary").GetProperty("heating").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("degreeDaySummary").GetProperty("heating").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("degreeDaySummary").GetProperty("cooling").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("degreeDaySummary").GetProperty("cooling").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("degreeDaySummary").GetProperty("cooling").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("precipitation").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("precipitation").GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("results")[0].GetProperty("precipitation").GetProperty("unitType").ToString());
            Console.WriteLine(result.GetProperty("nextLink").ToString());
        }
    }
}
