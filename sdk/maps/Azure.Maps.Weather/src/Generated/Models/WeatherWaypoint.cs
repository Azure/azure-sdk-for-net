// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.Maps.Weather.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class WeatherWaypoint
    {
        /// <summary>
        /// Initializes a new instance of the WeatherWaypoint class.
        /// </summary>
        public WeatherWaypoint()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the WeatherWaypoint class.
        /// </summary>
        /// <param name="iconCode">Numeric value representing an image that
        /// displays the `iconPhrase`. Please refer to [Weather Service
        /// Concepts](https://aka.ms/AzureMapsWeatherConcepts) for
        /// details.</param>
        /// <param name="shortPhrase">A displayable short phrase describing the
        /// forecasted conditions and precipitation intensity/type.</param>
        /// <param name="isDayTime">Indicates the time of the day. True
        /// indicates 'day',', false indicates 'night.</param>
        /// <param name="cloudCover">Percent representing cloud cover.</param>
        /// <param name="lightningCount">Estimation of thunderstorm intensity
        /// on an open scale. A value of 0 means there is no thunderstorm;
        /// values of 1 and higher mean there is a thunderstorm in increasing
        /// intensity.</param>
        /// <param name="sunGlare">A rating that indicates how blinding the sun
        /// is for the driver.</param>
        /// <param name="notifications">List of weather hazard
        /// notifications.</param>
        public WeatherWaypoint(int? iconCode = default(int?), string shortPhrase = default(string), bool? isDayTime = default(bool?), int? cloudCover = default(int?), WeatherUnit temperature = default(WeatherUnit), WindDetails wind = default(WindDetails), WindDetails windGust = default(WindDetails), WeatherAlongRoutePrecipitation precipitation = default(WeatherAlongRoutePrecipitation), int? lightningCount = default(int?), SunGlare sunGlare = default(SunGlare), WeatherHazards hazards = default(WeatherHazards), IList<WeatherNotification> notifications = default(IList<WeatherNotification>))
        {
            IconCode = iconCode;
            ShortPhrase = shortPhrase;
            IsDayTime = isDayTime;
            CloudCover = cloudCover;
            Temperature = temperature;
            Wind = wind;
            WindGust = windGust;
            Precipitation = precipitation;
            LightningCount = lightningCount;
            SunGlare = sunGlare;
            Hazards = hazards;
            Notifications = notifications;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets numeric value representing an image that displays the
        /// `iconPhrase`. Please refer to [Weather Service
        /// Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details.
        /// </summary>
        [JsonProperty(PropertyName = "iconCode")]
        public int? IconCode { get; set; }

        /// <summary>
        /// Gets or sets a displayable short phrase describing the forecasted
        /// conditions and precipitation intensity/type.
        /// </summary>
        [JsonProperty(PropertyName = "shortPhrase")]
        public string ShortPhrase { get; set; }

        /// <summary>
        /// Gets or sets indicates the time of the day. True indicates 'day',',
        /// false indicates 'night.
        /// </summary>
        [JsonProperty(PropertyName = "isDayTime")]
        public bool? IsDayTime { get; set; }

        /// <summary>
        /// Gets or sets percent representing cloud cover.
        /// </summary>
        [JsonProperty(PropertyName = "cloudCover")]
        public int? CloudCover { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "temperature")]
        public WeatherUnit Temperature { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "wind")]
        public WindDetails Wind { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "windGust")]
        public WindDetails WindGust { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "precipitation")]
        public WeatherAlongRoutePrecipitation Precipitation { get; set; }

        /// <summary>
        /// Gets or sets estimation of thunderstorm intensity on an open scale.
        /// A value of 0 means there is no thunderstorm; values of 1 and higher
        /// mean there is a thunderstorm in increasing intensity.
        /// </summary>
        [JsonProperty(PropertyName = "lightningCount")]
        public int? LightningCount { get; set; }

        /// <summary>
        /// Gets or sets a rating that indicates how blinding the sun is for
        /// the driver.
        /// </summary>
        [JsonProperty(PropertyName = "sunGlare")]
        public SunGlare SunGlare { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "hazards")]
        public WeatherHazards Hazards { get; set; }

        /// <summary>
        /// Gets or sets list of weather hazard notifications.
        /// </summary>
        [JsonProperty(PropertyName = "notifications")]
        public IList<WeatherNotification> Notifications { get; set; }

    }
}
