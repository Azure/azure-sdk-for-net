// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.Maps.Weather.Models
{
    public partial class QuarterDayForecast
    {
        internal static QuarterDayForecast DeserializeQuarterDayForecast(JsonElement element)
        {
            Optional<string> date = default;
            Optional<string> effectiveDate = default;
            Optional<DayQuarter> quarter = default;
            Optional<int> iconCode = default;
            Optional<string> iconPhrase = default;
            Optional<string> phrase = default;
            Optional<WeatherUnitRange> temperature = default;
            Optional<WeatherUnitRange> realFeelTemperature = default;
            Optional<WeatherUnit> dewPoint = default;
            Optional<int> relativeHumidity = default;
            Optional<WindDetails> wind = default;
            Optional<WindDetails> windGust = default;
            Optional<WeatherUnit> visibility = default;
            Optional<int> cloudCover = default;
            Optional<bool> hasPrecipitation = default;
            Optional<string> precipitationType = default;
            Optional<string> precipitationIntensity = default;
            Optional<int> precipitationProbability = default;
            Optional<int> thunderstormProbability = default;
            Optional<WeatherUnit> totalLiquid = default;
            Optional<WeatherUnit> rain = default;
            Optional<WeatherUnit> snow = default;
            Optional<WeatherUnit> ice = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("date"))
                {
                    date = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("effectiveDate"))
                {
                    effectiveDate = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("quarter"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    quarter = new DayQuarter(property.Value.GetInt32());
                    continue;
                }
                if (property.NameEquals("iconCode"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    iconCode = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("iconPhrase"))
                {
                    iconPhrase = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("phrase"))
                {
                    phrase = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("temperature"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    temperature = WeatherUnitRange.DeserializeWeatherUnitRange(property.Value);
                    continue;
                }
                if (property.NameEquals("realFeelTemperature"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    realFeelTemperature = WeatherUnitRange.DeserializeWeatherUnitRange(property.Value);
                    continue;
                }
                if (property.NameEquals("dewPoint"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    dewPoint = WeatherUnit.DeserializeWeatherUnit(property.Value);
                    continue;
                }
                if (property.NameEquals("relativeHumidity"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    relativeHumidity = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("wind"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    wind = WindDetails.DeserializeWindDetails(property.Value);
                    continue;
                }
                if (property.NameEquals("windGust"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    windGust = WindDetails.DeserializeWindDetails(property.Value);
                    continue;
                }
                if (property.NameEquals("visibility"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    visibility = WeatherUnit.DeserializeWeatherUnit(property.Value);
                    continue;
                }
                if (property.NameEquals("cloudCover"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    cloudCover = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("hasPrecipitation"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    hasPrecipitation = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("precipitationType"))
                {
                    precipitationType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("precipitationIntensity"))
                {
                    precipitationIntensity = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("precipitationProbability"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    precipitationProbability = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("thunderstormProbability"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    thunderstormProbability = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("totalLiquid"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    totalLiquid = WeatherUnit.DeserializeWeatherUnit(property.Value);
                    continue;
                }
                if (property.NameEquals("rain"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    rain = WeatherUnit.DeserializeWeatherUnit(property.Value);
                    continue;
                }
                if (property.NameEquals("snow"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    snow = WeatherUnit.DeserializeWeatherUnit(property.Value);
                    continue;
                }
                if (property.NameEquals("ice"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    ice = WeatherUnit.DeserializeWeatherUnit(property.Value);
                    continue;
                }
            }
            return new QuarterDayForecast(date.Value, effectiveDate.Value, Optional.ToNullable(quarter), Optional.ToNullable(iconCode), iconPhrase.Value, phrase.Value, temperature.Value, realFeelTemperature.Value, dewPoint.Value, Optional.ToNullable(relativeHumidity), wind.Value, windGust.Value, visibility.Value, Optional.ToNullable(cloudCover), Optional.ToNullable(hasPrecipitation), precipitationType.Value, precipitationIntensity.Value, Optional.ToNullable(precipitationProbability), Optional.ToNullable(thunderstormProbability), totalLiquid.Value, rain.Value, snow.Value, ice.Value);
        }
    }
}
