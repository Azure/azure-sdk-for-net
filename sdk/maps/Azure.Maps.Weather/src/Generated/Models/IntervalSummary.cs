// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.Maps.Weather.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    public partial class IntervalSummary
    {
        /// <summary>
        /// Initializes a new instance of the IntervalSummary class.
        /// </summary>
        public IntervalSummary()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the IntervalSummary class.
        /// </summary>
        /// <param name="startMinute">The first minute to which the summary
        /// applies.</param>
        /// <param name="endMinute">The last minute to which the summary
        /// applies.</param>
        /// <param name="totalMinutes">The number of minutes for which the
        /// summary applies.</param>
        /// <param name="shortPhrase">Short summary phrase. Phrase length is
        /// approximately 25 characters.</param>
        /// <param name="briefPhrase">Brief summary phrase. Phrase length is
        /// approximately 60 characters.</param>
        /// <param name="longPhrase">Long summary phrase. Phrase length is 60+
        /// characters.</param>
        /// <param name="iconCode">Numeric value representing an image that
        /// displays the `iconPhrase`. Please refer to [Weather Service
        /// Concepts](https://aka.ms/AzureMapsWeatherConcepts) for
        /// details.</param>
        public IntervalSummary(int? startMinute = default(int?), int? endMinute = default(int?), int? totalMinutes = default(int?), string shortPhrase = default(string), string briefPhrase = default(string), string longPhrase = default(string), int? iconCode = default(int?))
        {
            StartMinute = startMinute;
            EndMinute = endMinute;
            TotalMinutes = totalMinutes;
            ShortPhrase = shortPhrase;
            BriefPhrase = briefPhrase;
            LongPhrase = longPhrase;
            IconCode = iconCode;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the first minute to which the summary applies.
        /// </summary>
        [JsonProperty(PropertyName = "startMinute")]
        public int? StartMinute { get; set; }

        /// <summary>
        /// Gets or sets the last minute to which the summary applies.
        /// </summary>
        [JsonProperty(PropertyName = "endMinute")]
        public int? EndMinute { get; set; }

        /// <summary>
        /// Gets or sets the number of minutes for which the summary applies.
        /// </summary>
        [JsonProperty(PropertyName = "totalMinutes")]
        public int? TotalMinutes { get; set; }

        /// <summary>
        /// Gets or sets short summary phrase. Phrase length is approximately
        /// 25 characters.
        /// </summary>
        [JsonProperty(PropertyName = "shortPhrase")]
        public string ShortPhrase { get; set; }

        /// <summary>
        /// Gets or sets brief summary phrase. Phrase length is approximately
        /// 60 characters.
        /// </summary>
        [JsonProperty(PropertyName = "briefPhrase")]
        public string BriefPhrase { get; set; }

        /// <summary>
        /// Gets or sets long summary phrase. Phrase length is 60+ characters.
        /// </summary>
        [JsonProperty(PropertyName = "longPhrase")]
        public string LongPhrase { get; set; }

        /// <summary>
        /// Gets or sets numeric value representing an image that displays the
        /// `iconPhrase`. Please refer to [Weather Service
        /// Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details.
        /// </summary>
        [JsonProperty(PropertyName = "iconCode")]
        public int? IconCode { get; set; }

    }
}
