// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

namespace Azure.Maps.Weather.Models
{
    /// <summary> The HourlyForecast. </summary>
    public partial class HourlyForecast
    {
        /// <summary> Initializes a new instance of HourlyForecast. </summary>
        internal HourlyForecast()
        {
        }

        /// <summary> Initializes a new instance of HourlyForecast. </summary>
        /// <param name="date"> Date and time of the forecast in ISO 8601 format, for example, 2019-10-27T19:39:57-08:00. </param>
        /// <param name="iconCode"> Numeric value representing an image that displays the `iconPhrase`. Please refer to [Weather Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details. </param>
        /// <param name="iconPhrase"> Phrase description of the weather icon. </param>
        /// <param name="hasPrecipitation"> Indicates the presence or absence of precipitation. True indicates the presence of precipitation, false indicates the absence of precipitation. </param>
        /// <param name="isDaylight"> Specifies whether or not it is daylight. True indicates day light. </param>
        /// <param name="temperature"> Temperature being returned. </param>
        /// <param name="realFeelTemperature"> RealFeel™ Temperature being returned. Describes what the temperature really feels like in the shade. </param>
        /// <param name="wetBulbTemperature"> The temperature to which air may be cooled by evaporating water into it at constant pressure until it reaches saturation. </param>
        /// <param name="dewPoint"> The dewpoint temperature in specified unit. The dewpoint temperature is the temperature that the air must be cooled to in order to reach saturation. </param>
        /// <param name="wind"> Wind details being returned including speed and direction. </param>
        /// <param name="windGust"> Wind gust. Wind gust is a sudden, brief increase in speed of the wind. </param>
        /// <param name="relativeHumidity"> Relative humidity is the amount of water vapor present in air expressed as a percentage of the amount needed for saturation at the same temperature. </param>
        /// <param name="visibility"> Visibility in specified unit. A measure of the distance at which an object or light can be clearly discerned. </param>
        /// <param name="ceiling"> Cloud ceiling in specified unit. The ceiling is a measurement of the height of the base of the lowest clouds. </param>
        /// <param name="uvIndex">
        /// Measure of the strength of the ultraviolet radiation from the sun. Supported values are:
        ///   * `0-2` - Low danger from the sun&apos;s UV rays or the average person.
        ///   * `3-5` - Moderate risk of harm from unprotected sun exposure.
        ///   * `6-7` - High risk of harm from unprotected sun exposure.
        ///   * `8-10` - Very high risk of harm from unprotected sun exposure.
        ///   * `11+` - Extreme risk of harm from unprotected sun exposure.
        /// </param>
        /// <param name="uvIndexPhrase"> Phrase associated with the `uvIndex`. </param>
        /// <param name="precipitationProbability"> Percent representing the probability of precipitation. For example, &apos;20&apos;. </param>
        /// <param name="rainProbability"> Percent representing the probability of rain. For example, &apos;50&apos;. </param>
        /// <param name="snowProbability"> Percent representing the probability of snow. For example, &apos;50&apos;. </param>
        /// <param name="iceProbability"> Percent representing the probability of snow. For example, &apos;5&apos;. </param>
        /// <param name="totalLiquid"> Total liquid equivalent of precipitation during the forecast period. </param>
        /// <param name="rain"> Rain. </param>
        /// <param name="snow"> Snow. </param>
        /// <param name="ice"> Ice. </param>
        /// <param name="cloudCover"> Percent representing cloud cover. </param>
        internal HourlyForecast(string date, int? iconCode, string iconPhrase, bool? hasPrecipitation, bool? isDaylight, WeatherUnit temperature, WeatherUnit realFeelTemperature, WeatherUnit wetBulbTemperature, WeatherUnit dewPoint, WindDetails wind, WindDetails windGust, int? relativeHumidity, WeatherUnit visibility, WeatherUnit ceiling, int? uvIndex, string uvIndexPhrase, int? precipitationProbability, int? rainProbability, int? snowProbability, int? iceProbability, WeatherUnit totalLiquid, WeatherUnit rain, WeatherUnit snow, WeatherUnit ice, int? cloudCover)
        {
            Date = date;
            IconCode = iconCode;
            IconPhrase = iconPhrase;
            HasPrecipitation = hasPrecipitation;
            IsDaylight = isDaylight;
            Temperature = temperature;
            RealFeelTemperature = realFeelTemperature;
            WetBulbTemperature = wetBulbTemperature;
            DewPoint = dewPoint;
            Wind = wind;
            WindGust = windGust;
            RelativeHumidity = relativeHumidity;
            Visibility = visibility;
            Ceiling = ceiling;
            UvIndex = uvIndex;
            UvIndexPhrase = uvIndexPhrase;
            PrecipitationProbability = precipitationProbability;
            RainProbability = rainProbability;
            SnowProbability = snowProbability;
            IceProbability = iceProbability;
            TotalLiquid = totalLiquid;
            Rain = rain;
            Snow = snow;
            Ice = ice;
            CloudCover = cloudCover;
        }

        /// <summary> Date and time of the forecast in ISO 8601 format, for example, 2019-10-27T19:39:57-08:00. </summary>
        public string Date { get; }
        /// <summary> Numeric value representing an image that displays the `iconPhrase`. Please refer to [Weather Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details. </summary>
        public int? IconCode { get; }
        /// <summary> Phrase description of the weather icon. </summary>
        public string IconPhrase { get; }
        /// <summary> Indicates the presence or absence of precipitation. True indicates the presence of precipitation, false indicates the absence of precipitation. </summary>
        public bool? HasPrecipitation { get; }
        /// <summary> Specifies whether or not it is daylight. True indicates day light. </summary>
        public bool? IsDaylight { get; }
        /// <summary> Temperature being returned. </summary>
        public WeatherUnit Temperature { get; }
        /// <summary> RealFeel™ Temperature being returned. Describes what the temperature really feels like in the shade. </summary>
        public WeatherUnit RealFeelTemperature { get; }
        /// <summary> The temperature to which air may be cooled by evaporating water into it at constant pressure until it reaches saturation. </summary>
        public WeatherUnit WetBulbTemperature { get; }
        /// <summary> The dewpoint temperature in specified unit. The dewpoint temperature is the temperature that the air must be cooled to in order to reach saturation. </summary>
        public WeatherUnit DewPoint { get; }
        /// <summary> Wind details being returned including speed and direction. </summary>
        public WindDetails Wind { get; }
        /// <summary> Wind gust. Wind gust is a sudden, brief increase in speed of the wind. </summary>
        public WindDetails WindGust { get; }
        /// <summary> Relative humidity is the amount of water vapor present in air expressed as a percentage of the amount needed for saturation at the same temperature. </summary>
        public int? RelativeHumidity { get; }
        /// <summary> Visibility in specified unit. A measure of the distance at which an object or light can be clearly discerned. </summary>
        public WeatherUnit Visibility { get; }
        /// <summary> Cloud ceiling in specified unit. The ceiling is a measurement of the height of the base of the lowest clouds. </summary>
        public WeatherUnit Ceiling { get; }
        /// <summary>
        /// Measure of the strength of the ultraviolet radiation from the sun. Supported values are:
        ///   * `0-2` - Low danger from the sun&apos;s UV rays or the average person.
        ///   * `3-5` - Moderate risk of harm from unprotected sun exposure.
        ///   * `6-7` - High risk of harm from unprotected sun exposure.
        ///   * `8-10` - Very high risk of harm from unprotected sun exposure.
        ///   * `11+` - Extreme risk of harm from unprotected sun exposure.
        /// </summary>
        public int? UvIndex { get; }
        /// <summary> Phrase associated with the `uvIndex`. </summary>
        public string UvIndexPhrase { get; }
        /// <summary> Percent representing the probability of precipitation. For example, &apos;20&apos;. </summary>
        public int? PrecipitationProbability { get; }
        /// <summary> Percent representing the probability of rain. For example, &apos;50&apos;. </summary>
        public int? RainProbability { get; }
        /// <summary> Percent representing the probability of snow. For example, &apos;50&apos;. </summary>
        public int? SnowProbability { get; }
        /// <summary> Percent representing the probability of snow. For example, &apos;5&apos;. </summary>
        public int? IceProbability { get; }
        /// <summary> Total liquid equivalent of precipitation during the forecast period. </summary>
        public WeatherUnit TotalLiquid { get; }
        /// <summary> Rain. </summary>
        public WeatherUnit Rain { get; }
        /// <summary> Snow. </summary>
        public WeatherUnit Snow { get; }
        /// <summary> Ice. </summary>
        public WeatherUnit Ice { get; }
        /// <summary> Percent representing cloud cover. </summary>
        public int? CloudCover { get; }
    }
}
