// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.Maps.Weather.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    public partial class HourlyForecast
    {
        /// <summary>
        /// Initializes a new instance of the HourlyForecast class.
        /// </summary>
        public HourlyForecast()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the HourlyForecast class.
        /// </summary>
        /// <param name="date">Date and time of the forecast in ISO 8601
        /// format, for example, 2019-10-27T19:39:57-08:00.</param>
        /// <param name="iconCode">Numeric value representing an image that
        /// displays the `iconPhrase`. Please refer to [Weather Service
        /// Concepts](https://aka.ms/AzureMapsWeatherConcepts) for
        /// details.</param>
        /// <param name="iconPhrase">Phrase description of the weather
        /// icon.</param>
        /// <param name="hasPrecipitation">Indicates the presence or absence of
        /// precipitation. True indicates the presence of precipitation, false
        /// indicates the absence of precipitation.</param>
        /// <param name="isDaylight">Specifies whether or not it is daylight.
        /// True indicates day light.</param>
        /// <param name="temperature">Temperature being returned.</param>
        /// <param name="realFeelTemperature">RealFeel™ Temperature being
        /// returned. Describes what the temperature really feels like in the
        /// shade.</param>
        /// <param name="wetBulbTemperature">The temperature to which air may
        /// be cooled by evaporating water into it at constant pressure until
        /// it reaches saturation.</param>
        /// <param name="dewPoint">The dewpoint temperature in specified unit.
        /// The dewpoint temperature is the temperature that the air must be
        /// cooled to in order to reach saturation.</param>
        /// <param name="wind">Wind details being returned including speed and
        /// direction.</param>
        /// <param name="windGust">Wind gust. Wind gust is a sudden, brief
        /// increase in speed of the wind.</param>
        /// <param name="relativeHumidity">Relative humidity is the amount of
        /// water vapor present in air expressed as a percentage of the amount
        /// needed for saturation at the same temperature.</param>
        /// <param name="visibility">Visibility in specified unit. A measure of
        /// the distance at which an object or light can be clearly
        /// discerned.</param>
        /// <param name="ceiling">Cloud ceiling in specified unit. The ceiling
        /// is a measurement of the height of the base of the lowest
        /// clouds.</param>
        /// <param name="uvIndexPhrase">Phrase associated with the
        /// `uvIndex`.</param>
        /// <param name="precipitationProbability">Percent representing the
        /// probability of precipitation. For example, '20'.</param>
        /// <param name="rainProbability">Percent representing the probability
        /// of rain. For example, '50'.</param>
        /// <param name="snowProbability">Percent representing the probability
        /// of snow. For example, '50'.</param>
        /// <param name="iceProbability">Percent representing the probability
        /// of snow. For example, '5'.</param>
        /// <param name="totalLiquid">Total liquid equivalent of precipitation
        /// during the forecast period.</param>
        /// <param name="rain">Rain</param>
        /// <param name="snow">Snow</param>
        /// <param name="ice">Ice</param>
        /// <param name="cloudCover">Percent representing cloud cover.</param>
        public HourlyForecast(string date = default(string), int? iconCode = default(int?), string iconPhrase = default(string), bool? hasPrecipitation = default(bool?), bool? isDaylight = default(bool?), WeatherUnit temperature = default(WeatherUnit), WeatherUnit realFeelTemperature = default(WeatherUnit), WeatherUnit wetBulbTemperature = default(WeatherUnit), WeatherUnit dewPoint = default(WeatherUnit), WindDetails wind = default(WindDetails), WindDetails windGust = default(WindDetails), int? relativeHumidity = default(int?), WeatherUnit visibility = default(WeatherUnit), WeatherUnit ceiling = default(WeatherUnit), int? uvIndex = default(int?), string uvIndexPhrase = default(string), int? precipitationProbability = default(int?), int? rainProbability = default(int?), int? snowProbability = default(int?), int? iceProbability = default(int?), WeatherUnit totalLiquid = default(WeatherUnit), WeatherUnit rain = default(WeatherUnit), WeatherUnit snow = default(WeatherUnit), WeatherUnit ice = default(WeatherUnit), int? cloudCover = default(int?))
        {
            Date = date;
            IconCode = iconCode;
            IconPhrase = iconPhrase;
            HasPrecipitation = hasPrecipitation;
            IsDaylight = isDaylight;
            Temperature = temperature;
            RealFeelTemperature = realFeelTemperature;
            WetBulbTemperature = wetBulbTemperature;
            DewPoint = dewPoint;
            Wind = wind;
            WindGust = windGust;
            RelativeHumidity = relativeHumidity;
            Visibility = visibility;
            Ceiling = ceiling;
            UvIndex = uvIndex;
            UvIndexPhrase = uvIndexPhrase;
            PrecipitationProbability = precipitationProbability;
            RainProbability = rainProbability;
            SnowProbability = snowProbability;
            IceProbability = iceProbability;
            TotalLiquid = totalLiquid;
            Rain = rain;
            Snow = snow;
            Ice = ice;
            CloudCover = cloudCover;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets date and time of the forecast in ISO 8601 format, for
        /// example, 2019-10-27T19:39:57-08:00.
        /// </summary>
        [JsonProperty(PropertyName = "date")]
        public string Date { get; set; }

        /// <summary>
        /// Gets or sets numeric value representing an image that displays the
        /// `iconPhrase`. Please refer to [Weather Service
        /// Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details.
        /// </summary>
        [JsonProperty(PropertyName = "iconCode")]
        public int? IconCode { get; set; }

        /// <summary>
        /// Gets or sets phrase description of the weather icon.
        /// </summary>
        [JsonProperty(PropertyName = "iconPhrase")]
        public string IconPhrase { get; set; }

        /// <summary>
        /// Gets or sets indicates the presence or absence of precipitation.
        /// True indicates the presence of precipitation, false indicates the
        /// absence of precipitation.
        /// </summary>
        [JsonProperty(PropertyName = "hasPrecipitation")]
        public bool? HasPrecipitation { get; set; }

        /// <summary>
        /// Gets or sets specifies whether or not it is daylight. True
        /// indicates day light.
        /// </summary>
        [JsonProperty(PropertyName = "isDaylight")]
        public bool? IsDaylight { get; set; }

        /// <summary>
        /// Gets or sets temperature being returned.
        /// </summary>
        [JsonProperty(PropertyName = "temperature")]
        public WeatherUnit Temperature { get; set; }

        /// <summary>
        /// Gets or sets realFeel™ Temperature being returned. Describes what
        /// the temperature really feels like in the shade.
        /// </summary>
        [JsonProperty(PropertyName = "realFeelTemperature")]
        public WeatherUnit RealFeelTemperature { get; set; }

        /// <summary>
        /// Gets or sets the temperature to which air may be cooled by
        /// evaporating water into it at constant pressure until it reaches
        /// saturation.
        /// </summary>
        [JsonProperty(PropertyName = "wetBulbTemperature")]
        public WeatherUnit WetBulbTemperature { get; set; }

        /// <summary>
        /// Gets or sets the dewpoint temperature in specified unit. The
        /// dewpoint temperature is the temperature that the air must be cooled
        /// to in order to reach saturation.
        /// </summary>
        [JsonProperty(PropertyName = "dewPoint")]
        public WeatherUnit DewPoint { get; set; }

        /// <summary>
        /// Gets or sets wind details being returned including speed and
        /// direction.
        /// </summary>
        [JsonProperty(PropertyName = "wind")]
        public WindDetails Wind { get; set; }

        /// <summary>
        /// Gets or sets wind gust. Wind gust is a sudden, brief increase in
        /// speed of the wind.
        /// </summary>
        [JsonProperty(PropertyName = "windGust")]
        public WindDetails WindGust { get; set; }

        /// <summary>
        /// Gets or sets relative humidity is the amount of water vapor present
        /// in air expressed as a percentage of the amount needed for
        /// saturation at the same temperature.
        /// </summary>
        [JsonProperty(PropertyName = "relativeHumidity")]
        public int? RelativeHumidity { get; set; }

        /// <summary>
        /// Gets or sets visibility in specified unit. A measure of the
        /// distance at which an object or light can be clearly discerned.
        /// </summary>
        [JsonProperty(PropertyName = "visibility")]
        public WeatherUnit Visibility { get; set; }

        /// <summary>
        /// Gets or sets cloud ceiling in specified unit. The ceiling is a
        /// measurement of the height of the base of the lowest clouds.
        /// </summary>
        [JsonProperty(PropertyName = "ceiling")]
        public WeatherUnit Ceiling { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "uvIndex")]
        public int? UvIndex { get; set; }

        /// <summary>
        /// Gets or sets phrase associated with the `uvIndex`.
        /// </summary>
        [JsonProperty(PropertyName = "uvIndexPhrase")]
        public string UvIndexPhrase { get; set; }

        /// <summary>
        /// Gets or sets percent representing the probability of precipitation.
        /// For example, '20'.
        /// </summary>
        [JsonProperty(PropertyName = "precipitationProbability")]
        public int? PrecipitationProbability { get; set; }

        /// <summary>
        /// Gets or sets percent representing the probability of rain. For
        /// example, '50'.
        /// </summary>
        [JsonProperty(PropertyName = "rainProbability")]
        public int? RainProbability { get; set; }

        /// <summary>
        /// Gets or sets percent representing the probability of snow. For
        /// example, '50'.
        /// </summary>
        [JsonProperty(PropertyName = "snowProbability")]
        public int? SnowProbability { get; set; }

        /// <summary>
        /// Gets or sets percent representing the probability of snow. For
        /// example, '5'.
        /// </summary>
        [JsonProperty(PropertyName = "iceProbability")]
        public int? IceProbability { get; set; }

        /// <summary>
        /// Gets or sets total liquid equivalent of precipitation during the
        /// forecast period.
        /// </summary>
        [JsonProperty(PropertyName = "totalLiquid")]
        public WeatherUnit TotalLiquid { get; set; }

        /// <summary>
        /// Gets or sets rain
        /// </summary>
        [JsonProperty(PropertyName = "rain")]
        public WeatherUnit Rain { get; set; }

        /// <summary>
        /// Gets or sets snow
        /// </summary>
        [JsonProperty(PropertyName = "snow")]
        public WeatherUnit Snow { get; set; }

        /// <summary>
        /// Gets or sets ice
        /// </summary>
        [JsonProperty(PropertyName = "ice")]
        public WeatherUnit Ice { get; set; }

        /// <summary>
        /// Gets or sets percent representing cloud cover.
        /// </summary>
        [JsonProperty(PropertyName = "cloudCover")]
        public int? CloudCover { get; set; }

    }
}
