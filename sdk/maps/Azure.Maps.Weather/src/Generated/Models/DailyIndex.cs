// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.Maps.Weather.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Information about a daily index.
    /// </summary>
    public partial class DailyIndex
    {
        /// <summary>
        /// Initializes a new instance of the DailyIndex class.
        /// </summary>
        public DailyIndex()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DailyIndex class.
        /// </summary>
        /// <param name="indexName">Name of the index, for example,
        /// "Construction", "Outdoor Activity", "Flight Delays".</param>
        /// <param name="indexId">Numeric ID used to identify the specific
        /// index. Please refer to [Weather Service
        /// Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details and
        /// to see the supported index IDs. For example, the index ID can
        /// support UI visualization scenarios.</param>
        /// <param name="dateTime">Date and time of the current observation
        /// displayed in ISO 8601 format, for example,
        /// 2019-10-27T19:39:57-08:00.</param>
        /// <param name="value">Index value. Ranges from 0.0 to 10.0. Please
        /// refer to [Weather Service
        /// Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details and
        /// to see the supported ranges.</param>
        /// <param name="category">Textual description for `categoryValue`
        /// corresponding to the level that the index value falls under, for
        /// example "Very Good".</param>
        /// <param name="categoryValue">Level that the index value falls under,
        /// represented by an integer. This value can be 1 through 5 and should
        /// be used in combination with the `ascending` flag because it can
        /// differ among indices. For example, the following values apply for
        /// Mosquito Activity: Low=1, Moderate=2, High=3, Very High=4, and
        /// Extreme=5.</param>
        /// <param name="ascending">Describes the direction of the `value` and
        /// `categoryValue`. For example, when `ascending`=True, the poorest
        /// index value is 0 and the best index value is 10. When
        /// `ascending`=True, the poorest index value is 10 and the best index
        /// value is 0.</param>
        /// <param name="description">A textual explanation that can be used
        /// for display purposes to summarize the index value and category. For
        /// example, when the index value for Flight Delays is very good, the
        /// description will be "Conditions are excellent for flying!".</param>
        public DailyIndex(string indexName = default(string), int? indexId = default(int?), string dateTime = default(string), double? value = default(double?), string category = default(string), int? categoryValue = default(int?), bool? ascending = default(bool?), string description = default(string))
        {
            IndexName = indexName;
            IndexId = indexId;
            DateTime = dateTime;
            Value = value;
            Category = category;
            CategoryValue = categoryValue;
            Ascending = ascending;
            Description = description;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets name of the index, for example, "Construction",
        /// "Outdoor Activity", "Flight Delays".
        /// </summary>
        [JsonProperty(PropertyName = "indexName")]
        public string IndexName { get; set; }

        /// <summary>
        /// Gets or sets numeric ID used to identify the specific index. Please
        /// refer to [Weather Service
        /// Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details and
        /// to see the supported index IDs. For example, the index ID can
        /// support UI visualization scenarios.
        /// </summary>
        [JsonProperty(PropertyName = "indexId")]
        public int? IndexId { get; set; }

        /// <summary>
        /// Gets or sets date and time of the current observation displayed in
        /// ISO 8601 format, for example, 2019-10-27T19:39:57-08:00.
        /// </summary>
        [JsonProperty(PropertyName = "dateTime")]
        public string DateTime { get; set; }

        /// <summary>
        /// Gets or sets index value. Ranges from 0.0 to 10.0. Please refer to
        /// [Weather Service Concepts](https://aka.ms/AzureMapsWeatherConcepts)
        /// for details and to see the supported ranges.
        /// </summary>
        [JsonProperty(PropertyName = "value")]
        public double? Value { get; set; }

        /// <summary>
        /// Gets or sets textual description for `categoryValue` corresponding
        /// to the level that the index value falls under, for example "Very
        /// Good".
        /// </summary>
        [JsonProperty(PropertyName = "category")]
        public string Category { get; set; }

        /// <summary>
        /// Gets or sets level that the index value falls under, represented by
        /// an integer. This value can be 1 through 5 and should be used in
        /// combination with the `ascending` flag because it can differ among
        /// indices. For example, the following values apply for Mosquito
        /// Activity: Low=1, Moderate=2, High=3, Very High=4, and Extreme=5.
        /// </summary>
        [JsonProperty(PropertyName = "categoryValue")]
        public int? CategoryValue { get; set; }

        /// <summary>
        /// Gets or sets describes the direction of the `value` and
        /// `categoryValue`. For example, when `ascending`=True, the poorest
        /// index value is 0 and the best index value is 10. When
        /// `ascending`=True, the poorest index value is 10 and the best index
        /// value is 0.
        /// </summary>
        [JsonProperty(PropertyName = "ascending")]
        public bool? Ascending { get; set; }

        /// <summary>
        /// Gets or sets a textual explanation that can be used for display
        /// purposes to summarize the index value and category. For example,
        /// when the index value for Flight Delays is very good, the
        /// description will be "Conditions are excellent for flying!".
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

    }
}
