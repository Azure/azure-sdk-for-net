// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

namespace Azure.Maps.Weather.Models
{
    /// <summary> Information about a daily index. </summary>
    public partial class DailyIndex
    {
        /// <summary> Initializes a new instance of DailyIndex. </summary>
        internal DailyIndex()
        {
        }

        /// <summary> Initializes a new instance of DailyIndex. </summary>
        /// <param name="indexName"> Name of the index, for example, &quot;Construction&quot;, &quot;Outdoor Activity&quot;, &quot;Flight Delays&quot;. </param>
        /// <param name="indexId"> Numeric ID used to identify the specific index. Please refer to [Weather Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details and to see the supported index IDs. For example, the index ID can support UI visualization scenarios. </param>
        /// <param name="dateTime"> Date and time of the current observation displayed in ISO 8601 format, for example, 2019-10-27T19:39:57-08:00. </param>
        /// <param name="value"> Index value. Ranges from 0.0 to 10.0. Please refer to [Weather Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details and to see the supported ranges. </param>
        /// <param name="category"> Textual description for `categoryValue` corresponding to the level that the index value falls under, for example &quot;Very Good&quot;. </param>
        /// <param name="categoryValue"> Level that the index value falls under, represented by an integer. This value can be 1 through 5 and should be used in combination with the `ascending` flag because it can differ among indices. For example, the following values apply for Mosquito Activity: Low=1, Moderate=2, High=3, Very High=4, and Extreme=5. </param>
        /// <param name="ascending"> Describes the direction of the `value` and `categoryValue`. For example, when `ascending`=True, the poorest index value is 0 and the best index value is 10. When `ascending`=True, the poorest index value is 10 and the best index value is 0. </param>
        /// <param name="description"> A textual explanation that can be used for display purposes to summarize the index value and category. For example, when the index value for Flight Delays is very good, the description will be &quot;Conditions are excellent for flying!&quot;. </param>
        internal DailyIndex(string indexName, int? indexId, string dateTime, float? value, string category, int? categoryValue, bool? @ascending, string description)
        {
            IndexName = indexName;
            IndexId = indexId;
            DateTime = dateTime;
            Value = value;
            Category = category;
            CategoryValue = categoryValue;
            Ascending = @ascending;
            Description = description;
        }

        /// <summary> Name of the index, for example, &quot;Construction&quot;, &quot;Outdoor Activity&quot;, &quot;Flight Delays&quot;. </summary>
        public string IndexName { get; }
        /// <summary> Numeric ID used to identify the specific index. Please refer to [Weather Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details and to see the supported index IDs. For example, the index ID can support UI visualization scenarios. </summary>
        public int? IndexId { get; }
        /// <summary> Date and time of the current observation displayed in ISO 8601 format, for example, 2019-10-27T19:39:57-08:00. </summary>
        public string DateTime { get; }
        /// <summary> Index value. Ranges from 0.0 to 10.0. Please refer to [Weather Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details and to see the supported ranges. </summary>
        public float? Value { get; }
        /// <summary> Textual description for `categoryValue` corresponding to the level that the index value falls under, for example &quot;Very Good&quot;. </summary>
        public string Category { get; }
        /// <summary> Level that the index value falls under, represented by an integer. This value can be 1 through 5 and should be used in combination with the `ascending` flag because it can differ among indices. For example, the following values apply for Mosquito Activity: Low=1, Moderate=2, High=3, Very High=4, and Extreme=5. </summary>
        public int? CategoryValue { get; }
        /// <summary> Describes the direction of the `value` and `categoryValue`. For example, when `ascending`=True, the poorest index value is 0 and the best index value is 10. When `ascending`=True, the poorest index value is 10 and the best index value is 0. </summary>
        public bool? Ascending { get; }
        /// <summary> A textual explanation that can be used for display purposes to summarize the index value and category. For example, when the index value for Flight Delays is very good, the description will be &quot;Conditions are excellent for flying!&quot;. </summary>
        public string Description { get; }
    }
}
