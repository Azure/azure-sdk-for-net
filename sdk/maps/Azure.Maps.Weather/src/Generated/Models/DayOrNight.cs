// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.Maps.Weather.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    public partial class DayOrNight
    {
        /// <summary>
        /// Initializes a new instance of the DayOrNight class.
        /// </summary>
        public DayOrNight()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DayOrNight class.
        /// </summary>
        /// <param name="iconCode">Numeric value representing an image that
        /// displays the `iconPhrase`. Please refer to [Weather Service
        /// Concepts](https://aka.ms/AzureMapsWeatherConcepts) for
        /// details.</param>
        /// <param name="iconPhrase">Phrase description of the icon. Displayed
        /// in specified language. For example, 'Sunny'.</param>
        /// <param name="hasPrecipitation">Indicates the presence or absence of
        /// precipitation. True indicates the presence of precipitation, false
        /// indicates the absence of precipitation.</param>
        /// <param name="precipitationType">Specifies the type of precipitation
        /// ("rain" "snow" "ice" or "mix"). If dbz = zero, precipitationType is
        /// not present in the response.</param>
        /// <param name="precipitationIntensity">Description of the
        /// intensity.</param>
        /// <param name="shortPhrase">Phrase description of the forecast in
        /// specified language. Azure Maps attempts to keep this phrase under
        /// 30 characters in length, but some languages/weather events may
        /// result in a longer phrase length, exceeding 30 characters.</param>
        /// <param name="longPhrase">Phrase description of the forecast in
        /// specified language. Azure Maps attempts to keep this phrase under
        /// 100 characters in length, but some languages/weather events may
        /// result in a longer phrase length, exceeding 100 characters.</param>
        /// <param name="precipitationProbability">Percent representing the
        /// probability of precipitation. For example, '20'.</param>
        /// <param name="thunderstormProbability">Percent representing the
        /// probability of a thunderstorm. For example, '80'.</param>
        /// <param name="rainProbability">Percent representing the probability
        /// of rain. For example, '40'.</param>
        /// <param name="snowProbability">Percent representing the probability
        /// of snow. For example, '30'.</param>
        /// <param name="iceProbability">Percent representing the probability
        /// of ice. For example, '30'.</param>
        /// <param name="wind">Wind details being returned including speed and
        /// direction.</param>
        /// <param name="windGust">Wind gust. Wind gust is a sudden, brief
        /// increase in speed of the wind.</param>
        /// <param name="totalLiquid">Total liquid equivalent of precipitation
        /// during the forecast period.</param>
        /// <param name="rain">Rain</param>
        /// <param name="snow">Snow</param>
        /// <param name="ice">Ice</param>
        /// <param name="hoursOfPrecipitation">Hours of precipitation</param>
        /// <param name="hoursOfRain">Hours of rain.</param>
        /// <param name="hoursOfSnow">Hours of snow.</param>
        /// <param name="hoursOfIce">Hours of ice.</param>
        /// <param name="cloudCover">Percent representing cloud cover.</param>
        public DayOrNight(int? iconCode = default(int?), string iconPhrase = default(string), LocalSource localSource = default(LocalSource), bool? hasPrecipitation = default(bool?), string precipitationType = default(string), string precipitationIntensity = default(string), string shortPhrase = default(string), string longPhrase = default(string), int? precipitationProbability = default(int?), int? thunderstormProbability = default(int?), int? rainProbability = default(int?), int? snowProbability = default(int?), int? iceProbability = default(int?), WindDetails wind = default(WindDetails), WindDetails windGust = default(WindDetails), WeatherUnit totalLiquid = default(WeatherUnit), WeatherUnit rain = default(WeatherUnit), WeatherUnit snow = default(WeatherUnit), WeatherUnit ice = default(WeatherUnit), double? hoursOfPrecipitation = default(double?), double? hoursOfRain = default(double?), double? hoursOfSnow = default(double?), double? hoursOfIce = default(double?), int? cloudCover = default(int?))
        {
            IconCode = iconCode;
            IconPhrase = iconPhrase;
            LocalSource = localSource;
            HasPrecipitation = hasPrecipitation;
            PrecipitationType = precipitationType;
            PrecipitationIntensity = precipitationIntensity;
            ShortPhrase = shortPhrase;
            LongPhrase = longPhrase;
            PrecipitationProbability = precipitationProbability;
            ThunderstormProbability = thunderstormProbability;
            RainProbability = rainProbability;
            SnowProbability = snowProbability;
            IceProbability = iceProbability;
            Wind = wind;
            WindGust = windGust;
            TotalLiquid = totalLiquid;
            Rain = rain;
            Snow = snow;
            Ice = ice;
            HoursOfPrecipitation = hoursOfPrecipitation;
            HoursOfRain = hoursOfRain;
            HoursOfSnow = hoursOfSnow;
            HoursOfIce = hoursOfIce;
            CloudCover = cloudCover;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets numeric value representing an image that displays the
        /// `iconPhrase`. Please refer to [Weather Service
        /// Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details.
        /// </summary>
        [JsonProperty(PropertyName = "iconCode")]
        public int? IconCode { get; set; }

        /// <summary>
        /// Gets or sets phrase description of the icon. Displayed in specified
        /// language. For example, 'Sunny'.
        /// </summary>
        [JsonProperty(PropertyName = "iconPhrase")]
        public string IconPhrase { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "localSource")]
        public LocalSource LocalSource { get; set; }

        /// <summary>
        /// Gets or sets indicates the presence or absence of precipitation.
        /// True indicates the presence of precipitation, false indicates the
        /// absence of precipitation.
        /// </summary>
        [JsonProperty(PropertyName = "hasPrecipitation")]
        public bool? HasPrecipitation { get; set; }

        /// <summary>
        /// Gets or sets specifies the type of precipitation ("rain" "snow"
        /// "ice" or "mix"). If dbz = zero, precipitationType is not present in
        /// the response.
        /// </summary>
        [JsonProperty(PropertyName = "precipitationType")]
        public string PrecipitationType { get; set; }

        /// <summary>
        /// Gets or sets description of the intensity.
        /// </summary>
        [JsonProperty(PropertyName = "precipitationIntensity")]
        public string PrecipitationIntensity { get; set; }

        /// <summary>
        /// Gets or sets phrase description of the forecast in specified
        /// language. Azure Maps attempts to keep this phrase under 30
        /// characters in length, but some languages/weather events may result
        /// in a longer phrase length, exceeding 30 characters.
        /// </summary>
        [JsonProperty(PropertyName = "shortPhrase")]
        public string ShortPhrase { get; set; }

        /// <summary>
        /// Gets or sets phrase description of the forecast in specified
        /// language. Azure Maps attempts to keep this phrase under 100
        /// characters in length, but some languages/weather events may result
        /// in a longer phrase length, exceeding 100 characters.
        /// </summary>
        [JsonProperty(PropertyName = "longPhrase")]
        public string LongPhrase { get; set; }

        /// <summary>
        /// Gets or sets percent representing the probability of precipitation.
        /// For example, '20'.
        /// </summary>
        [JsonProperty(PropertyName = "precipitationProbability")]
        public int? PrecipitationProbability { get; set; }

        /// <summary>
        /// Gets or sets percent representing the probability of a
        /// thunderstorm. For example, '80'.
        /// </summary>
        [JsonProperty(PropertyName = "thunderstormProbability")]
        public int? ThunderstormProbability { get; set; }

        /// <summary>
        /// Gets or sets percent representing the probability of rain. For
        /// example, '40'.
        /// </summary>
        [JsonProperty(PropertyName = "rainProbability")]
        public int? RainProbability { get; set; }

        /// <summary>
        /// Gets or sets percent representing the probability of snow. For
        /// example, '30'.
        /// </summary>
        [JsonProperty(PropertyName = "snowProbability")]
        public int? SnowProbability { get; set; }

        /// <summary>
        /// Gets or sets percent representing the probability of ice. For
        /// example, '30'.
        /// </summary>
        [JsonProperty(PropertyName = "iceProbability")]
        public int? IceProbability { get; set; }

        /// <summary>
        /// Gets or sets wind details being returned including speed and
        /// direction.
        /// </summary>
        [JsonProperty(PropertyName = "wind")]
        public WindDetails Wind { get; set; }

        /// <summary>
        /// Gets or sets wind gust. Wind gust is a sudden, brief increase in
        /// speed of the wind.
        /// </summary>
        [JsonProperty(PropertyName = "windGust")]
        public WindDetails WindGust { get; set; }

        /// <summary>
        /// Gets or sets total liquid equivalent of precipitation during the
        /// forecast period.
        /// </summary>
        [JsonProperty(PropertyName = "totalLiquid")]
        public WeatherUnit TotalLiquid { get; set; }

        /// <summary>
        /// Gets or sets rain
        /// </summary>
        [JsonProperty(PropertyName = "rain")]
        public WeatherUnit Rain { get; set; }

        /// <summary>
        /// Gets or sets snow
        /// </summary>
        [JsonProperty(PropertyName = "snow")]
        public WeatherUnit Snow { get; set; }

        /// <summary>
        /// Gets or sets ice
        /// </summary>
        [JsonProperty(PropertyName = "ice")]
        public WeatherUnit Ice { get; set; }

        /// <summary>
        /// Gets or sets hours of precipitation
        /// </summary>
        [JsonProperty(PropertyName = "hoursOfPrecipitation")]
        public double? HoursOfPrecipitation { get; set; }

        /// <summary>
        /// Gets or sets hours of rain.
        /// </summary>
        [JsonProperty(PropertyName = "hoursOfRain")]
        public double? HoursOfRain { get; set; }

        /// <summary>
        /// Gets or sets hours of snow.
        /// </summary>
        [JsonProperty(PropertyName = "hoursOfSnow")]
        public double? HoursOfSnow { get; set; }

        /// <summary>
        /// Gets or sets hours of ice.
        /// </summary>
        [JsonProperty(PropertyName = "hoursOfIce")]
        public double? HoursOfIce { get; set; }

        /// <summary>
        /// Gets or sets percent representing cloud cover.
        /// </summary>
        [JsonProperty(PropertyName = "cloudCover")]
        public int? CloudCover { get; set; }

    }
}
