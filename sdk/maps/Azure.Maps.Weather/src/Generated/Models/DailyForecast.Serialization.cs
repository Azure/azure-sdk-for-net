// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Maps.Weather.Models
{
    public partial class DailyForecast
    {
        internal static DailyForecast DeserializeDailyForecast(JsonElement element)
        {
            Optional<string> date = default;
            Optional<WeatherUnitRange> temperature = default;
            Optional<WeatherUnitRange> realFeelTemperature = default;
            Optional<WeatherUnitRange> realFeelTemperatureShade = default;
            Optional<float> hoursOfSun = default;
            Optional<DegreeDaySummary> degreeDaySummary = default;
            Optional<IReadOnlyList<AirAndPollen>> airAndPollen = default;
            Optional<DayOrNight> day = default;
            Optional<DayOrNight> night = default;
            Optional<IReadOnlyList<string>> sources = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("date"))
                {
                    date = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("temperature"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    temperature = WeatherUnitRange.DeserializeWeatherUnitRange(property.Value);
                    continue;
                }
                if (property.NameEquals("realFeelTemperature"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    realFeelTemperature = WeatherUnitRange.DeserializeWeatherUnitRange(property.Value);
                    continue;
                }
                if (property.NameEquals("realFeelTemperatureShade"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    realFeelTemperatureShade = WeatherUnitRange.DeserializeWeatherUnitRange(property.Value);
                    continue;
                }
                if (property.NameEquals("hoursOfSun"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    hoursOfSun = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("degreeDaySummary"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    degreeDaySummary = DegreeDaySummary.DeserializeDegreeDaySummary(property.Value);
                    continue;
                }
                if (property.NameEquals("airAndPollen"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<AirAndPollen> array = new List<AirAndPollen>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Models.AirAndPollen.DeserializeAirAndPollen(item));
                    }
                    airAndPollen = array;
                    continue;
                }
                if (property.NameEquals("day"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    day = DayOrNight.DeserializeDayOrNight(property.Value);
                    continue;
                }
                if (property.NameEquals("night"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    night = DayOrNight.DeserializeDayOrNight(property.Value);
                    continue;
                }
                if (property.NameEquals("sources"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    sources = array;
                    continue;
                }
            }
            return new DailyForecast(date.Value, temperature.Value, realFeelTemperature.Value, realFeelTemperatureShade.Value, Optional.ToNullable(hoursOfSun), degreeDaySummary.Value, Optional.ToList(airAndPollen), day.Value, night.Value, Optional.ToList(sources));
        }
    }
}
