// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.Maps.Weather.Models
{
    public partial class CurrentConditions
    {
        internal static CurrentConditions DeserializeCurrentConditions(JsonElement element)
        {
            Optional<string> dateTime = default;
            Optional<string> phrase = default;
            Optional<int> iconCode = default;
            Optional<bool> hasPrecipitation = default;
            Optional<bool> isDayTime = default;
            Optional<WeatherUnit> temperature = default;
            Optional<WeatherUnit> realFeelTemperature = default;
            Optional<WeatherUnit> realFeelTemperatureShade = default;
            Optional<int> relativeHumidity = default;
            Optional<WeatherUnit> dewPoint = default;
            Optional<WindDetails> wind = default;
            Optional<WindDetails> windGust = default;
            Optional<int> uvIndex = default;
            Optional<string> uvIndexPhrase = default;
            Optional<WeatherUnit> visibility = default;
            Optional<string> obstructionsToVisibility = default;
            Optional<int> cloudCover = default;
            Optional<WeatherUnit> ceiling = default;
            Optional<WeatherUnit> pressure = default;
            Optional<PressureTendency> pressureTendency = default;
            Optional<WeatherUnit> past24HourTemperatureDeparture = default;
            Optional<WeatherUnit> apparentTemperature = default;
            Optional<WeatherUnit> windChillTemperature = default;
            Optional<WeatherUnit> wetBulbTemperature = default;
            Optional<PrecipitationSummary> precipitationSummary = default;
            Optional<TemperatureSummary> temperatureSummary = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("dateTime"))
                {
                    dateTime = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("phrase"))
                {
                    phrase = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("iconCode"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    iconCode = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("hasPrecipitation"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    hasPrecipitation = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("isDayTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isDayTime = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("temperature"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    temperature = WeatherUnit.DeserializeWeatherUnit(property.Value);
                    continue;
                }
                if (property.NameEquals("realFeelTemperature"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    realFeelTemperature = WeatherUnit.DeserializeWeatherUnit(property.Value);
                    continue;
                }
                if (property.NameEquals("realFeelTemperatureShade"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    realFeelTemperatureShade = WeatherUnit.DeserializeWeatherUnit(property.Value);
                    continue;
                }
                if (property.NameEquals("relativeHumidity"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    relativeHumidity = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("dewPoint"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    dewPoint = WeatherUnit.DeserializeWeatherUnit(property.Value);
                    continue;
                }
                if (property.NameEquals("wind"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    wind = WindDetails.DeserializeWindDetails(property.Value);
                    continue;
                }
                if (property.NameEquals("windGust"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    windGust = WindDetails.DeserializeWindDetails(property.Value);
                    continue;
                }
                if (property.NameEquals("uvIndex"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    uvIndex = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("uvIndexPhrase"))
                {
                    uvIndexPhrase = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("visibility"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    visibility = WeatherUnit.DeserializeWeatherUnit(property.Value);
                    continue;
                }
                if (property.NameEquals("obstructionsToVisibility"))
                {
                    obstructionsToVisibility = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("cloudCover"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    cloudCover = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("ceiling"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    ceiling = WeatherUnit.DeserializeWeatherUnit(property.Value);
                    continue;
                }
                if (property.NameEquals("pressure"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    pressure = WeatherUnit.DeserializeWeatherUnit(property.Value);
                    continue;
                }
                if (property.NameEquals("pressureTendency"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    pressureTendency = PressureTendency.DeserializePressureTendency(property.Value);
                    continue;
                }
                if (property.NameEquals("past24HourTemperatureDeparture"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    past24HourTemperatureDeparture = WeatherUnit.DeserializeWeatherUnit(property.Value);
                    continue;
                }
                if (property.NameEquals("apparentTemperature"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    apparentTemperature = WeatherUnit.DeserializeWeatherUnit(property.Value);
                    continue;
                }
                if (property.NameEquals("windChillTemperature"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    windChillTemperature = WeatherUnit.DeserializeWeatherUnit(property.Value);
                    continue;
                }
                if (property.NameEquals("wetBulbTemperature"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    wetBulbTemperature = WeatherUnit.DeserializeWeatherUnit(property.Value);
                    continue;
                }
                if (property.NameEquals("precipitationSummary"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    precipitationSummary = PrecipitationSummary.DeserializePrecipitationSummary(property.Value);
                    continue;
                }
                if (property.NameEquals("temperatureSummary"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    temperatureSummary = TemperatureSummary.DeserializeTemperatureSummary(property.Value);
                    continue;
                }
            }
            return new CurrentConditions(dateTime.Value, phrase.Value, Optional.ToNullable(iconCode), Optional.ToNullable(hasPrecipitation), Optional.ToNullable(isDayTime), temperature.Value, realFeelTemperature.Value, realFeelTemperatureShade.Value, Optional.ToNullable(relativeHumidity), dewPoint.Value, wind.Value, windGust.Value, Optional.ToNullable(uvIndex), uvIndexPhrase.Value, visibility.Value, obstructionsToVisibility.Value, Optional.ToNullable(cloudCover), ceiling.Value, pressure.Value, pressureTendency.Value, past24HourTemperatureDeparture.Value, apparentTemperature.Value, windChillTemperature.Value, wetBulbTemperature.Value, precipitationSummary.Value, temperatureSummary.Value);
        }
    }
}
