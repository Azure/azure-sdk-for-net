// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.Maps.Weather.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class DailyForecast
    {
        /// <summary>
        /// Initializes a new instance of the DailyForecast class.
        /// </summary>
        public DailyForecast()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DailyForecast class.
        /// </summary>
        /// <param name="date">Date and time of the current observation
        /// displayed in ISO 8601 format, for example,
        /// 2019-10-27T19:39:57-08:00.</param>
        /// <param name="temperature">Temperature values for the day.</param>
        /// <param name="realFeelTemperature">RealFeel™ Temperature being
        /// returned.</param>
        /// <param name="realFeelTemperatureShade">RealFeel™ Temperature being
        /// returned. Describes what the temperature really feels like in the
        /// shade.</param>
        /// <param name="hoursOfSun">Hours of sun.</param>
        /// <param name="degreeDaySummary">Summary of Heating Degree Day or
        /// Cooling Degree Day information</param>
        /// <param name="airAndPollen">airAndPollen</param>
        /// <param name="day">Day</param>
        /// <param name="night">Night</param>
        /// <param name="sources">Source(s) of the forecast data.</param>
        public DailyForecast(string date = default(string), WeatherUnitRange temperature = default(WeatherUnitRange), WeatherUnitRange realFeelTemperature = default(WeatherUnitRange), WeatherUnitRange realFeelTemperatureShade = default(WeatherUnitRange), double? hoursOfSun = default(double?), DegreeDaySummary degreeDaySummary = default(DegreeDaySummary), IList<AirAndPollen> airAndPollen = default(IList<AirAndPollen>), DayOrNight day = default(DayOrNight), DayOrNight night = default(DayOrNight), IList<string> sources = default(IList<string>))
        {
            Date = date;
            Temperature = temperature;
            RealFeelTemperature = realFeelTemperature;
            RealFeelTemperatureShade = realFeelTemperatureShade;
            HoursOfSun = hoursOfSun;
            DegreeDaySummary = degreeDaySummary;
            AirAndPollen = airAndPollen;
            Day = day;
            Night = night;
            Sources = sources;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets date and time of the current observation displayed in
        /// ISO 8601 format, for example, 2019-10-27T19:39:57-08:00.
        /// </summary>
        [JsonProperty(PropertyName = "date")]
        public string Date { get; set; }

        /// <summary>
        /// Gets or sets temperature values for the day.
        /// </summary>
        [JsonProperty(PropertyName = "temperature")]
        public WeatherUnitRange Temperature { get; set; }

        /// <summary>
        /// Gets or sets realFeel™ Temperature being returned.
        /// </summary>
        [JsonProperty(PropertyName = "realFeelTemperature")]
        public WeatherUnitRange RealFeelTemperature { get; set; }

        /// <summary>
        /// Gets or sets realFeel™ Temperature being returned. Describes what
        /// the temperature really feels like in the shade.
        /// </summary>
        [JsonProperty(PropertyName = "realFeelTemperatureShade")]
        public WeatherUnitRange RealFeelTemperatureShade { get; set; }

        /// <summary>
        /// Gets or sets hours of sun.
        /// </summary>
        [JsonProperty(PropertyName = "hoursOfSun")]
        public double? HoursOfSun { get; set; }

        /// <summary>
        /// Gets or sets summary of Heating Degree Day or Cooling Degree Day
        /// information
        /// </summary>
        [JsonProperty(PropertyName = "degreeDaySummary")]
        public DegreeDaySummary DegreeDaySummary { get; set; }

        /// <summary>
        /// Gets or sets airAndPollen
        /// </summary>
        [JsonProperty(PropertyName = "airAndPollen")]
        public IList<AirAndPollen> AirAndPollen { get; set; }

        /// <summary>
        /// Gets or sets day
        /// </summary>
        [JsonProperty(PropertyName = "day")]
        public DayOrNight Day { get; set; }

        /// <summary>
        /// Gets or sets night
        /// </summary>
        [JsonProperty(PropertyName = "night")]
        public DayOrNight Night { get; set; }

        /// <summary>
        /// Gets or sets source(s) of the forecast data.
        /// </summary>
        [JsonProperty(PropertyName = "sources")]
        public IList<string> Sources { get; set; }

    }
}
