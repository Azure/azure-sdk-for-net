// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.Maps.Weather.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    public partial class ForecastInterval
    {
        /// <summary>
        /// Initializes a new instance of the ForecastInterval class.
        /// </summary>
        public ForecastInterval()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ForecastInterval class.
        /// </summary>
        /// <param name="startTime">The date and time for the start of the
        /// interval in ISO 8601 format, for example,
        /// 2019-10-27T19:39:57-08:00.</param>
        /// <param name="minute">The first minute for the interval.</param>
        /// <param name="dbz">A unit that represents forecasted precipitation
        /// intensity.</param>
        /// <param name="shortPhrase">A short phrase describing precipitation
        /// condition for the interval.</param>
        /// <param name="threshold">Key that specifies the threshold value.
        /// Along with precipitationType, can be used to determine the
        /// simplifiedColor. If dbz is zero, not present in the
        /// response.</param>
        /// <param name="color">The full spectrum color that maps to the dBZ
        /// (decibel relative to Z). If dbz is zero, color is not present in
        /// the response.</param>
        /// <param name="simplifiedColor">The band color that maps to the
        /// precipitation type and threshold. If dbz is zero, not present in
        /// the response.</param>
        /// <param name="precipitationType">Specifies the type of precipitation
        /// ("rain" "snow" "ice" or "mix"). If dbz is zero, precipitationType
        /// is not present in the response.</param>
        /// <param name="iconCode">Numeric value representing an image that
        /// displays the `iconPhrase`. Please refer to [Weather Service
        /// Concepts](https://aka.ms/AzureMapsWeatherConcepts) for
        /// details.</param>
        /// <param name="cloudCover">Percent representing cloud cover.</param>
        public ForecastInterval(string startTime = default(string), int? minute = default(int?), double? dbz = default(double?), string shortPhrase = default(string), string threshold = default(string), ColorValue color = default(ColorValue), ColorValue simplifiedColor = default(ColorValue), string precipitationType = default(string), int? iconCode = default(int?), int? cloudCover = default(int?))
        {
            StartTime = startTime;
            Minute = minute;
            Dbz = dbz;
            ShortPhrase = shortPhrase;
            Threshold = threshold;
            Color = color;
            SimplifiedColor = simplifiedColor;
            PrecipitationType = precipitationType;
            IconCode = iconCode;
            CloudCover = cloudCover;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the date and time for the start of the interval in ISO
        /// 8601 format, for example, 2019-10-27T19:39:57-08:00.
        /// </summary>
        [JsonProperty(PropertyName = "startTime")]
        public string StartTime { get; set; }

        /// <summary>
        /// Gets or sets the first minute for the interval.
        /// </summary>
        [JsonProperty(PropertyName = "minute")]
        public int? Minute { get; set; }

        /// <summary>
        /// Gets or sets a unit that represents forecasted precipitation
        /// intensity.
        /// </summary>
        [JsonProperty(PropertyName = "dbz")]
        public double? Dbz { get; set; }

        /// <summary>
        /// Gets or sets a short phrase describing precipitation condition for
        /// the interval.
        /// </summary>
        [JsonProperty(PropertyName = "shortPhrase")]
        public string ShortPhrase { get; set; }

        /// <summary>
        /// Gets or sets key that specifies the threshold value. Along with
        /// precipitationType, can be used to determine the simplifiedColor. If
        /// dbz is zero, not present in the response.
        /// </summary>
        [JsonProperty(PropertyName = "threshold")]
        public string Threshold { get; set; }

        /// <summary>
        /// Gets or sets the full spectrum color that maps to the dBZ (decibel
        /// relative to Z). If dbz is zero, color is not present in the
        /// response.
        /// </summary>
        [JsonProperty(PropertyName = "color")]
        public ColorValue Color { get; set; }

        /// <summary>
        /// Gets or sets the band color that maps to the precipitation type and
        /// threshold. If dbz is zero, not present in the response.
        /// </summary>
        [JsonProperty(PropertyName = "simplifiedColor")]
        public ColorValue SimplifiedColor { get; set; }

        /// <summary>
        /// Gets or sets specifies the type of precipitation ("rain" "snow"
        /// "ice" or "mix"). If dbz is zero, precipitationType is not present
        /// in the response.
        /// </summary>
        [JsonProperty(PropertyName = "precipitationType")]
        public string PrecipitationType { get; set; }

        /// <summary>
        /// Gets or sets numeric value representing an image that displays the
        /// `iconPhrase`. Please refer to [Weather Service
        /// Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details.
        /// </summary>
        [JsonProperty(PropertyName = "iconCode")]
        public int? IconCode { get; set; }

        /// <summary>
        /// Gets or sets percent representing cloud cover.
        /// </summary>
        [JsonProperty(PropertyName = "cloudCover")]
        public int? CloudCover { get; set; }

    }
}
