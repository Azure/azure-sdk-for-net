// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.Maps.Weather.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    public partial class QuarterDayForecast
    {
        /// <summary>
        /// Initializes a new instance of the QuarterDayForecast class.
        /// </summary>
        public QuarterDayForecast()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the QuarterDayForecast class.
        /// </summary>
        /// <param name="date">Date and time of the forecast in ISO 8601
        /// format, for example, 2019-10-27T19:39:57-08:00.</param>
        /// <param name="effectiveDate">Date and time of the beginning of the
        /// forecast quarter displayed in ISO 8601 format, for example,
        /// 2019-10-27T19:39:57-08:00.</param>
        /// <param name="quarter">Quarter of the day.</param>
        /// <param name="iconCode">Numeric value representing an image that
        /// displays the `iconPhrase`. Please refer to [Weather Service
        /// Concepts](https://aka.ms/AzureMapsWeatherConcepts) for
        /// details.</param>
        /// <param name="iconPhrase">Phrase description of the icon. Displayed
        /// in specified language. For example, 'Sunny'.</param>
        /// <param name="phrase">Short summary phrase summary for
        /// quarter.</param>
        /// <param name="temperature">Temperature values for the
        /// quarter.</param>
        /// <param name="realFeelTemperature">RealFeel™ Temperature values for
        /// the quarter.</param>
        /// <param name="dewPoint">The dewpoint temperature in specified unit.
        /// The dewpoint temperature is the temperature that the air must be
        /// cooled to in order to reach saturation.</param>
        /// <param name="relativeHumidity">Relative humidity is the amount of
        /// water vapor present in air expressed as a percentage of the amount
        /// needed for saturation at the same temperature.</param>
        /// <param name="wind">Wind details being returned including speed and
        /// direction.</param>
        /// <param name="windGust">Wind gust. Wind gust is a sudden, brief
        /// increase in speed of the wind.</param>
        /// <param name="visibility">Visibility in specified unit. A measure of
        /// the distance at which an object or light can be clearly
        /// discerned.</param>
        /// <param name="cloudCover">Percent representing cloud cover.</param>
        /// <param name="hasPrecipitation">Indicates the presence or absence of
        /// precipitation. True indicates the presence of precipitation, false
        /// indicates the absence of precipitation.</param>
        /// <param name="precipitationType">Specifies the type of precipitation
        /// ("rain" "snow" "ice" or "mix"). If dbz = zero, precipitationType is
        /// not present in the response.</param>
        /// <param name="precipitationIntensity">Description of the
        /// intensity.</param>
        /// <param name="precipitationProbability">Percent representing the
        /// probability of precipitation. For example, '20'.</param>
        /// <param name="thunderstormProbability">Percent representing the
        /// probability of a thunderstorm. For example, '10'.</param>
        /// <param name="totalLiquid">Total liquid equivalent of precipitation
        /// during the forecast period.</param>
        /// <param name="rain">Rain</param>
        /// <param name="snow">Snow</param>
        /// <param name="ice">Ice</param>
        public QuarterDayForecast(string date = default(string), string effectiveDate = default(string), int? quarter = default(int?), int? iconCode = default(int?), string iconPhrase = default(string), string phrase = default(string), WeatherUnitRange temperature = default(WeatherUnitRange), WeatherUnitRange realFeelTemperature = default(WeatherUnitRange), WeatherUnit dewPoint = default(WeatherUnit), int? relativeHumidity = default(int?), WindDetails wind = default(WindDetails), WindDetails windGust = default(WindDetails), WeatherUnit visibility = default(WeatherUnit), int? cloudCover = default(int?), bool? hasPrecipitation = default(bool?), string precipitationType = default(string), string precipitationIntensity = default(string), int? precipitationProbability = default(int?), int? thunderstormProbability = default(int?), WeatherUnit totalLiquid = default(WeatherUnit), WeatherUnit rain = default(WeatherUnit), WeatherUnit snow = default(WeatherUnit), WeatherUnit ice = default(WeatherUnit))
        {
            Date = date;
            EffectiveDate = effectiveDate;
            Quarter = quarter;
            IconCode = iconCode;
            IconPhrase = iconPhrase;
            Phrase = phrase;
            Temperature = temperature;
            RealFeelTemperature = realFeelTemperature;
            DewPoint = dewPoint;
            RelativeHumidity = relativeHumidity;
            Wind = wind;
            WindGust = windGust;
            Visibility = visibility;
            CloudCover = cloudCover;
            HasPrecipitation = hasPrecipitation;
            PrecipitationType = precipitationType;
            PrecipitationIntensity = precipitationIntensity;
            PrecipitationProbability = precipitationProbability;
            ThunderstormProbability = thunderstormProbability;
            TotalLiquid = totalLiquid;
            Rain = rain;
            Snow = snow;
            Ice = ice;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets date and time of the forecast in ISO 8601 format, for
        /// example, 2019-10-27T19:39:57-08:00.
        /// </summary>
        [JsonProperty(PropertyName = "date")]
        public string Date { get; set; }

        /// <summary>
        /// Gets or sets date and time of the beginning of the forecast quarter
        /// displayed in ISO 8601 format, for example,
        /// 2019-10-27T19:39:57-08:00.
        /// </summary>
        [JsonProperty(PropertyName = "effectiveDate")]
        public string EffectiveDate { get; set; }

        /// <summary>
        /// Gets or sets quarter of the day.
        /// </summary>
        [JsonProperty(PropertyName = "quarter")]
        public int? Quarter { get; set; }

        /// <summary>
        /// Gets or sets numeric value representing an image that displays the
        /// `iconPhrase`. Please refer to [Weather Service
        /// Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details.
        /// </summary>
        [JsonProperty(PropertyName = "iconCode")]
        public int? IconCode { get; set; }

        /// <summary>
        /// Gets or sets phrase description of the icon. Displayed in specified
        /// language. For example, 'Sunny'.
        /// </summary>
        [JsonProperty(PropertyName = "iconPhrase")]
        public string IconPhrase { get; set; }

        /// <summary>
        /// Gets or sets short summary phrase summary for quarter.
        /// </summary>
        [JsonProperty(PropertyName = "phrase")]
        public string Phrase { get; set; }

        /// <summary>
        /// Gets or sets temperature values for the quarter.
        /// </summary>
        [JsonProperty(PropertyName = "temperature")]
        public WeatherUnitRange Temperature { get; set; }

        /// <summary>
        /// Gets or sets realFeel™ Temperature values for the quarter.
        /// </summary>
        [JsonProperty(PropertyName = "realFeelTemperature")]
        public WeatherUnitRange RealFeelTemperature { get; set; }

        /// <summary>
        /// Gets or sets the dewpoint temperature in specified unit. The
        /// dewpoint temperature is the temperature that the air must be cooled
        /// to in order to reach saturation.
        /// </summary>
        [JsonProperty(PropertyName = "dewPoint")]
        public WeatherUnit DewPoint { get; set; }

        /// <summary>
        /// Gets or sets relative humidity is the amount of water vapor present
        /// in air expressed as a percentage of the amount needed for
        /// saturation at the same temperature.
        /// </summary>
        [JsonProperty(PropertyName = "relativeHumidity")]
        public int? RelativeHumidity { get; set; }

        /// <summary>
        /// Gets or sets wind details being returned including speed and
        /// direction.
        /// </summary>
        [JsonProperty(PropertyName = "wind")]
        public WindDetails Wind { get; set; }

        /// <summary>
        /// Gets or sets wind gust. Wind gust is a sudden, brief increase in
        /// speed of the wind.
        /// </summary>
        [JsonProperty(PropertyName = "windGust")]
        public WindDetails WindGust { get; set; }

        /// <summary>
        /// Gets or sets visibility in specified unit. A measure of the
        /// distance at which an object or light can be clearly discerned.
        /// </summary>
        [JsonProperty(PropertyName = "visibility")]
        public WeatherUnit Visibility { get; set; }

        /// <summary>
        /// Gets or sets percent representing cloud cover.
        /// </summary>
        [JsonProperty(PropertyName = "cloudCover")]
        public int? CloudCover { get; set; }

        /// <summary>
        /// Gets or sets indicates the presence or absence of precipitation.
        /// True indicates the presence of precipitation, false indicates the
        /// absence of precipitation.
        /// </summary>
        [JsonProperty(PropertyName = "hasPrecipitation")]
        public bool? HasPrecipitation { get; set; }

        /// <summary>
        /// Gets or sets specifies the type of precipitation ("rain" "snow"
        /// "ice" or "mix"). If dbz = zero, precipitationType is not present in
        /// the response.
        /// </summary>
        [JsonProperty(PropertyName = "precipitationType")]
        public string PrecipitationType { get; set; }

        /// <summary>
        /// Gets or sets description of the intensity.
        /// </summary>
        [JsonProperty(PropertyName = "precipitationIntensity")]
        public string PrecipitationIntensity { get; set; }

        /// <summary>
        /// Gets or sets percent representing the probability of precipitation.
        /// For example, '20'.
        /// </summary>
        [JsonProperty(PropertyName = "precipitationProbability")]
        public int? PrecipitationProbability { get; set; }

        /// <summary>
        /// Gets or sets percent representing the probability of a
        /// thunderstorm. For example, '10'.
        /// </summary>
        [JsonProperty(PropertyName = "thunderstormProbability")]
        public int? ThunderstormProbability { get; set; }

        /// <summary>
        /// Gets or sets total liquid equivalent of precipitation during the
        /// forecast period.
        /// </summary>
        [JsonProperty(PropertyName = "totalLiquid")]
        public WeatherUnit TotalLiquid { get; set; }

        /// <summary>
        /// Gets or sets rain
        /// </summary>
        [JsonProperty(PropertyName = "rain")]
        public WeatherUnit Rain { get; set; }

        /// <summary>
        /// Gets or sets snow
        /// </summary>
        [JsonProperty(PropertyName = "snow")]
        public WeatherUnit Snow { get; set; }

        /// <summary>
        /// Gets or sets ice
        /// </summary>
        [JsonProperty(PropertyName = "ice")]
        public WeatherUnit Ice { get; set; }

    }
}
