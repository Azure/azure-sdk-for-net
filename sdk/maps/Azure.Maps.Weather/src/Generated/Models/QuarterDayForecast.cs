// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

namespace Azure.Maps.Weather.Models
{
    /// <summary> The QuarterDayForecast. </summary>
    public partial class QuarterDayForecast
    {
        /// <summary> Initializes a new instance of QuarterDayForecast. </summary>
        internal QuarterDayForecast()
        {
        }

        /// <summary> Initializes a new instance of QuarterDayForecast. </summary>
        /// <param name="date"> Date and time of the forecast in ISO 8601 format, for example, 2019-10-27T19:39:57-08:00. </param>
        /// <param name="effectiveDate"> Date and time of the beginning of the forecast quarter displayed in ISO 8601 format, for example, 2019-10-27T19:39:57-08:00. </param>
        /// <param name="quarter"> Quarter of the day. </param>
        /// <param name="iconCode"> Numeric value representing an image that displays the `iconPhrase`. Please refer to [Weather Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details. </param>
        /// <param name="iconPhrase"> Phrase description of the icon. Displayed in specified language. For example, &apos;Sunny&apos;. </param>
        /// <param name="phrase"> Short summary phrase summary for quarter. </param>
        /// <param name="temperature"> Temperature values for the quarter. </param>
        /// <param name="realFeelTemperature"> RealFeel™ Temperature values for the quarter. </param>
        /// <param name="dewPoint"> The dewpoint temperature in specified unit. The dewpoint temperature is the temperature that the air must be cooled to in order to reach saturation. </param>
        /// <param name="relativeHumidity"> Relative humidity is the amount of water vapor present in air expressed as a percentage of the amount needed for saturation at the same temperature. </param>
        /// <param name="wind"> Wind details being returned including speed and direction. </param>
        /// <param name="windGust"> Wind gust. Wind gust is a sudden, brief increase in speed of the wind. </param>
        /// <param name="visibility"> Visibility in specified unit. A measure of the distance at which an object or light can be clearly discerned. </param>
        /// <param name="cloudCover"> Percent representing cloud cover. </param>
        /// <param name="hasPrecipitation"> Indicates the presence or absence of precipitation. True indicates the presence of precipitation, false indicates the absence of precipitation. </param>
        /// <param name="precipitationType"> Specifies the type of precipitation (&quot;rain&quot; &quot;snow&quot; &quot;ice&quot; or &quot;mix&quot;). If dbz = zero, precipitationType is not present in the response. </param>
        /// <param name="precipitationIntensity"> Description of the intensity. </param>
        /// <param name="precipitationProbability"> Percent representing the probability of precipitation. For example, &apos;20&apos;. </param>
        /// <param name="thunderstormProbability"> Percent representing the probability of a thunderstorm. For example, &apos;10&apos;. </param>
        /// <param name="totalLiquid"> Total liquid equivalent of precipitation during the forecast period. </param>
        /// <param name="rain"> Rain. </param>
        /// <param name="snow"> Snow. </param>
        /// <param name="ice"> Ice. </param>
        internal QuarterDayForecast(string date, string effectiveDate, DayQuarter? quarter, int? iconCode, string iconPhrase, string phrase, WeatherUnitRange temperature, WeatherUnitRange realFeelTemperature, WeatherUnit dewPoint, int? relativeHumidity, WindDetails wind, WindDetails windGust, WeatherUnit visibility, int? cloudCover, bool? hasPrecipitation, string precipitationType, string precipitationIntensity, int? precipitationProbability, int? thunderstormProbability, WeatherUnit totalLiquid, WeatherUnit rain, WeatherUnit snow, WeatherUnit ice)
        {
            Date = date;
            EffectiveDate = effectiveDate;
            Quarter = quarter;
            IconCode = iconCode;
            IconPhrase = iconPhrase;
            Phrase = phrase;
            Temperature = temperature;
            RealFeelTemperature = realFeelTemperature;
            DewPoint = dewPoint;
            RelativeHumidity = relativeHumidity;
            Wind = wind;
            WindGust = windGust;
            Visibility = visibility;
            CloudCover = cloudCover;
            HasPrecipitation = hasPrecipitation;
            PrecipitationType = precipitationType;
            PrecipitationIntensity = precipitationIntensity;
            PrecipitationProbability = precipitationProbability;
            ThunderstormProbability = thunderstormProbability;
            TotalLiquid = totalLiquid;
            Rain = rain;
            Snow = snow;
            Ice = ice;
        }

        /// <summary> Date and time of the forecast in ISO 8601 format, for example, 2019-10-27T19:39:57-08:00. </summary>
        public string Date { get; }
        /// <summary> Date and time of the beginning of the forecast quarter displayed in ISO 8601 format, for example, 2019-10-27T19:39:57-08:00. </summary>
        public string EffectiveDate { get; }
        /// <summary> Quarter of the day. </summary>
        public DayQuarter? Quarter { get; }
        /// <summary> Numeric value representing an image that displays the `iconPhrase`. Please refer to [Weather Service Concepts](https://aka.ms/AzureMapsWeatherConcepts) for details. </summary>
        public int? IconCode { get; }
        /// <summary> Phrase description of the icon. Displayed in specified language. For example, &apos;Sunny&apos;. </summary>
        public string IconPhrase { get; }
        /// <summary> Short summary phrase summary for quarter. </summary>
        public string Phrase { get; }
        /// <summary> Temperature values for the quarter. </summary>
        public WeatherUnitRange Temperature { get; }
        /// <summary> RealFeel™ Temperature values for the quarter. </summary>
        public WeatherUnitRange RealFeelTemperature { get; }
        /// <summary> The dewpoint temperature in specified unit. The dewpoint temperature is the temperature that the air must be cooled to in order to reach saturation. </summary>
        public WeatherUnit DewPoint { get; }
        /// <summary> Relative humidity is the amount of water vapor present in air expressed as a percentage of the amount needed for saturation at the same temperature. </summary>
        public int? RelativeHumidity { get; }
        /// <summary> Wind details being returned including speed and direction. </summary>
        public WindDetails Wind { get; }
        /// <summary> Wind gust. Wind gust is a sudden, brief increase in speed of the wind. </summary>
        public WindDetails WindGust { get; }
        /// <summary> Visibility in specified unit. A measure of the distance at which an object or light can be clearly discerned. </summary>
        public WeatherUnit Visibility { get; }
        /// <summary> Percent representing cloud cover. </summary>
        public int? CloudCover { get; }
        /// <summary> Indicates the presence or absence of precipitation. True indicates the presence of precipitation, false indicates the absence of precipitation. </summary>
        public bool? HasPrecipitation { get; }
        /// <summary> Specifies the type of precipitation (&quot;rain&quot; &quot;snow&quot; &quot;ice&quot; or &quot;mix&quot;). If dbz = zero, precipitationType is not present in the response. </summary>
        public string PrecipitationType { get; }
        /// <summary> Description of the intensity. </summary>
        public string PrecipitationIntensity { get; }
        /// <summary> Percent representing the probability of precipitation. For example, &apos;20&apos;. </summary>
        public int? PrecipitationProbability { get; }
        /// <summary> Percent representing the probability of a thunderstorm. For example, &apos;10&apos;. </summary>
        public int? ThunderstormProbability { get; }
        /// <summary> Total liquid equivalent of precipitation during the forecast period. </summary>
        public WeatherUnit TotalLiquid { get; }
        /// <summary> Rain. </summary>
        public WeatherUnit Rain { get; }
        /// <summary> Snow. </summary>
        public WeatherUnit Snow { get; }
        /// <summary> Ice. </summary>
        public WeatherUnit Ice { get; }
    }
}
