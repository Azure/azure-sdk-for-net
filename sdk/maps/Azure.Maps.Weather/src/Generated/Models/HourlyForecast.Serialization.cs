// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.Maps.Weather.Models
{
    public partial class HourlyForecast
    {
        internal static HourlyForecast DeserializeHourlyForecast(JsonElement element)
        {
            Optional<string> date = default;
            Optional<int> iconCode = default;
            Optional<string> iconPhrase = default;
            Optional<bool> hasPrecipitation = default;
            Optional<bool> isDaylight = default;
            Optional<WeatherUnit> temperature = default;
            Optional<WeatherUnit> realFeelTemperature = default;
            Optional<WeatherUnit> wetBulbTemperature = default;
            Optional<WeatherUnit> dewPoint = default;
            Optional<WindDetails> wind = default;
            Optional<WindDetails> windGust = default;
            Optional<int> relativeHumidity = default;
            Optional<WeatherUnit> visibility = default;
            Optional<WeatherUnit> ceiling = default;
            Optional<int> uvIndex = default;
            Optional<string> uvIndexPhrase = default;
            Optional<int> precipitationProbability = default;
            Optional<int> rainProbability = default;
            Optional<int> snowProbability = default;
            Optional<int> iceProbability = default;
            Optional<WeatherUnit> totalLiquid = default;
            Optional<WeatherUnit> rain = default;
            Optional<WeatherUnit> snow = default;
            Optional<WeatherUnit> ice = default;
            Optional<int> cloudCover = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("date"))
                {
                    date = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("iconCode"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    iconCode = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("iconPhrase"))
                {
                    iconPhrase = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("hasPrecipitation"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    hasPrecipitation = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("isDaylight"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isDaylight = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("temperature"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    temperature = WeatherUnit.DeserializeWeatherUnit(property.Value);
                    continue;
                }
                if (property.NameEquals("realFeelTemperature"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    realFeelTemperature = WeatherUnit.DeserializeWeatherUnit(property.Value);
                    continue;
                }
                if (property.NameEquals("wetBulbTemperature"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    wetBulbTemperature = WeatherUnit.DeserializeWeatherUnit(property.Value);
                    continue;
                }
                if (property.NameEquals("dewPoint"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    dewPoint = WeatherUnit.DeserializeWeatherUnit(property.Value);
                    continue;
                }
                if (property.NameEquals("wind"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    wind = WindDetails.DeserializeWindDetails(property.Value);
                    continue;
                }
                if (property.NameEquals("windGust"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    windGust = WindDetails.DeserializeWindDetails(property.Value);
                    continue;
                }
                if (property.NameEquals("relativeHumidity"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    relativeHumidity = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("visibility"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    visibility = WeatherUnit.DeserializeWeatherUnit(property.Value);
                    continue;
                }
                if (property.NameEquals("ceiling"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    ceiling = WeatherUnit.DeserializeWeatherUnit(property.Value);
                    continue;
                }
                if (property.NameEquals("uvIndex"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    uvIndex = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("uvIndexPhrase"))
                {
                    uvIndexPhrase = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("precipitationProbability"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    precipitationProbability = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("rainProbability"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    rainProbability = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("snowProbability"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    snowProbability = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("iceProbability"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    iceProbability = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("totalLiquid"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    totalLiquid = WeatherUnit.DeserializeWeatherUnit(property.Value);
                    continue;
                }
                if (property.NameEquals("rain"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    rain = WeatherUnit.DeserializeWeatherUnit(property.Value);
                    continue;
                }
                if (property.NameEquals("snow"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    snow = WeatherUnit.DeserializeWeatherUnit(property.Value);
                    continue;
                }
                if (property.NameEquals("ice"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    ice = WeatherUnit.DeserializeWeatherUnit(property.Value);
                    continue;
                }
                if (property.NameEquals("cloudCover"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    cloudCover = property.Value.GetInt32();
                    continue;
                }
            }
            return new HourlyForecast(date.Value, Optional.ToNullable(iconCode), iconPhrase.Value, Optional.ToNullable(hasPrecipitation), Optional.ToNullable(isDaylight), temperature.Value, realFeelTemperature.Value, wetBulbTemperature.Value, dewPoint.Value, wind.Value, windGust.Value, Optional.ToNullable(relativeHumidity), visibility.Value, ceiling.Value, Optional.ToNullable(uvIndex), uvIndexPhrase.Value, Optional.ToNullable(precipitationProbability), Optional.ToNullable(rainProbability), Optional.ToNullable(snowProbability), Optional.ToNullable(iceProbability), totalLiquid.Value, rain.Value, snow.Value, ice.Value, Optional.ToNullable(cloudCover));
        }
    }
}
