// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.Maps.Weather.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class MinuteForecastResponse
    {
        /// <summary>
        /// Initializes a new instance of the MinuteForecastResponse class.
        /// </summary>
        public MinuteForecastResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MinuteForecastResponse class.
        /// </summary>
        /// <param name="intervalSummaries">Summary information for each
        /// interval in the forecast. The Summaries breaks down each potential
        /// interval where precipitation starts and stops.</param>
        /// <param name="intervals">Forecast data for each interval in the
        /// forecast.</param>
        public MinuteForecastResponse(MinuteForecastSummary summary = default(MinuteForecastSummary), IList<IntervalSummary> intervalSummaries = default(IList<IntervalSummary>), IList<ForecastInterval> intervals = default(IList<ForecastInterval>))
        {
            Summary = summary;
            IntervalSummaries = intervalSummaries;
            Intervals = intervals;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "summary")]
        public MinuteForecastSummary Summary { get; set; }

        /// <summary>
        /// Gets or sets summary information for each interval in the forecast.
        /// The Summaries breaks down each potential interval where
        /// precipitation starts and stops.
        /// </summary>
        [JsonProperty(PropertyName = "intervalSummaries")]
        public IList<IntervalSummary> IntervalSummaries { get; set; }

        /// <summary>
        /// Gets or sets forecast data for each interval in the forecast.
        /// </summary>
        [JsonProperty(PropertyName = "intervals")]
        public IList<ForecastInterval> Intervals { get; set; }

    }
}
