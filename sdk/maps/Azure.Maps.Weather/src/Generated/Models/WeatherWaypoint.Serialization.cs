// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Maps.Weather.Models
{
    public partial class WeatherWaypoint
    {
        internal static WeatherWaypoint DeserializeWeatherWaypoint(JsonElement element)
        {
            Optional<int> iconCode = default;
            Optional<string> shortPhrase = default;
            Optional<bool> isDayTime = default;
            Optional<int> cloudCover = default;
            Optional<WeatherUnit> temperature = default;
            Optional<WindDetails> wind = default;
            Optional<WindDetails> windGust = default;
            Optional<WeatherAlongRoutePrecipitation> precipitation = default;
            Optional<int> lightningCount = default;
            Optional<SunGlare> sunGlare = default;
            Optional<WeatherHazards> hazards = default;
            Optional<IReadOnlyList<WeatherNotification>> notifications = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("iconCode"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    iconCode = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("shortPhrase"))
                {
                    shortPhrase = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("isDayTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isDayTime = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("cloudCover"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    cloudCover = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("temperature"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    temperature = WeatherUnit.DeserializeWeatherUnit(property.Value);
                    continue;
                }
                if (property.NameEquals("wind"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    wind = WindDetails.DeserializeWindDetails(property.Value);
                    continue;
                }
                if (property.NameEquals("windGust"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    windGust = WindDetails.DeserializeWindDetails(property.Value);
                    continue;
                }
                if (property.NameEquals("precipitation"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    precipitation = WeatherAlongRoutePrecipitation.DeserializeWeatherAlongRoutePrecipitation(property.Value);
                    continue;
                }
                if (property.NameEquals("lightningCount"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    lightningCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("sunGlare"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    sunGlare = SunGlare.DeserializeSunGlare(property.Value);
                    continue;
                }
                if (property.NameEquals("hazards"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    hazards = WeatherHazards.DeserializeWeatherHazards(property.Value);
                    continue;
                }
                if (property.NameEquals("notifications"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<WeatherNotification> array = new List<WeatherNotification>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(WeatherNotification.DeserializeWeatherNotification(item));
                    }
                    notifications = array;
                    continue;
                }
            }
            return new WeatherWaypoint(Optional.ToNullable(iconCode), shortPhrase.Value, Optional.ToNullable(isDayTime), Optional.ToNullable(cloudCover), temperature.Value, wind.Value, windGust.Value, precipitation.Value, Optional.ToNullable(lightningCount), sunGlare.Value, hazards.Value, Optional.ToList(notifications));
        }
    }
}
