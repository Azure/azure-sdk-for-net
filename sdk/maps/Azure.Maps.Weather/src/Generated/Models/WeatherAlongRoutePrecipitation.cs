// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.Maps.Weather.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Precipitation forecast of the weather along the route.
    /// </summary>
    public partial class WeatherAlongRoutePrecipitation
    {
        /// <summary>
        /// Initializes a new instance of the WeatherAlongRoutePrecipitation
        /// class.
        /// </summary>
        public WeatherAlongRoutePrecipitation()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the WeatherAlongRoutePrecipitation
        /// class.
        /// </summary>
        /// <param name="dbz">The forecasted precipitation intensity in dBZ
        /// (decibels relative to Z) from 0.0 to 100.0.</param>
        /// <param name="type">Precipitation type. If precipitation should
        /// occur, the type that it will be: "RAIN," "HAIL," "SNOW," "ICE," or
        /// "MIX."</param>
        public WeatherAlongRoutePrecipitation(double? dbz = default(double?), string type = default(string))
        {
            Dbz = dbz;
            Type = type;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the forecasted precipitation intensity in dBZ
        /// (decibels relative to Z) from 0.0 to 100.0.
        /// </summary>
        [JsonProperty(PropertyName = "dbz")]
        public double? Dbz { get; set; }

        /// <summary>
        /// Gets or sets precipitation type. If precipitation should occur, the
        /// type that it will be: "RAIN," "HAIL," "SNOW," "ICE," or "MIX."
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

    }
}
