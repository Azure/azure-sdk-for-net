// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Maps
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for CreatorsOperations.
    /// </summary>
    public static partial class CreatorsOperationsExtensions
    {
            /// <summary>
            /// Get all Creator instances for an Azure Maps Account
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Maps Account.
            /// </param>
            public static IPage<Creator> ListByAccount(this ICreatorsOperations operations, string resourceGroupName, string accountName)
            {
                return operations.ListByAccountAsync(resourceGroupName, accountName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all Creator instances for an Azure Maps Account
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Maps Account.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Creator>> ListByAccountAsync(this ICreatorsOperations operations, string resourceGroupName, string accountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByAccountWithHttpMessagesAsync(resourceGroupName, accountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a Maps Creator resource. Creator resource will manage
            /// Azure resources required to populate a custom set of mapping data. It
            /// requires an account to exist before it can be created.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Maps Account.
            /// </param>
            /// <param name='creatorName'>
            /// The name of the Maps Creator instance.
            /// </param>
            /// <param name='creatorResource'>
            /// The new or updated parameters for the Creator resource.
            /// </param>
            public static Creator CreateOrUpdate(this ICreatorsOperations operations, string resourceGroupName, string accountName, string creatorName, Creator creatorResource)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, accountName, creatorName, creatorResource).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a Maps Creator resource. Creator resource will manage
            /// Azure resources required to populate a custom set of mapping data. It
            /// requires an account to exist before it can be created.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Maps Account.
            /// </param>
            /// <param name='creatorName'>
            /// The name of the Maps Creator instance.
            /// </param>
            /// <param name='creatorResource'>
            /// The new or updated parameters for the Creator resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Creator> CreateOrUpdateAsync(this ICreatorsOperations operations, string resourceGroupName, string accountName, string creatorName, Creator creatorResource, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, accountName, creatorName, creatorResource, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the Maps Creator resource. Only a subset of the parameters may be
            /// updated after creation, such as Tags.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Maps Account.
            /// </param>
            /// <param name='creatorName'>
            /// The name of the Maps Creator instance.
            /// </param>
            /// <param name='creatorUpdateParameters'>
            /// The update parameters for Maps Creator.
            /// </param>
            public static Creator Update(this ICreatorsOperations operations, string resourceGroupName, string accountName, string creatorName, CreatorUpdateParameters creatorUpdateParameters)
            {
                return operations.UpdateAsync(resourceGroupName, accountName, creatorName, creatorUpdateParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the Maps Creator resource. Only a subset of the parameters may be
            /// updated after creation, such as Tags.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Maps Account.
            /// </param>
            /// <param name='creatorName'>
            /// The name of the Maps Creator instance.
            /// </param>
            /// <param name='creatorUpdateParameters'>
            /// The update parameters for Maps Creator.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Creator> UpdateAsync(this ICreatorsOperations operations, string resourceGroupName, string accountName, string creatorName, CreatorUpdateParameters creatorUpdateParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, accountName, creatorName, creatorUpdateParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a Maps Creator resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Maps Account.
            /// </param>
            /// <param name='creatorName'>
            /// The name of the Maps Creator instance.
            /// </param>
            public static void Delete(this ICreatorsOperations operations, string resourceGroupName, string accountName, string creatorName)
            {
                operations.DeleteAsync(resourceGroupName, accountName, creatorName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a Maps Creator resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Maps Account.
            /// </param>
            /// <param name='creatorName'>
            /// The name of the Maps Creator instance.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this ICreatorsOperations operations, string resourceGroupName, string accountName, string creatorName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, accountName, creatorName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get a Maps Creator resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Maps Account.
            /// </param>
            /// <param name='creatorName'>
            /// The name of the Maps Creator instance.
            /// </param>
            public static Creator Get(this ICreatorsOperations operations, string resourceGroupName, string accountName, string creatorName)
            {
                return operations.GetAsync(resourceGroupName, accountName, creatorName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a Maps Creator resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Maps Account.
            /// </param>
            /// <param name='creatorName'>
            /// The name of the Maps Creator instance.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Creator> GetAsync(this ICreatorsOperations operations, string resourceGroupName, string accountName, string creatorName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, accountName, creatorName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all Creator instances for an Azure Maps Account
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Creator> ListByAccountNext(this ICreatorsOperations operations, string nextPageLink)
            {
                return operations.ListByAccountNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all Creator instances for an Azure Maps Account
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Creator>> ListByAccountNextAsync(this ICreatorsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByAccountNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
