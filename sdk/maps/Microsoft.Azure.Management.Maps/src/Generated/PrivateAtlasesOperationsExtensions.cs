// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Maps
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for PrivateAtlasesOperations.
    /// </summary>
    public static partial class PrivateAtlasesOperationsExtensions
    {
            /// <summary>
            /// Create or update a Private Atlas resource. Private Atlas resource will
            /// enable the usage of Azure resources to build a custom set of mapping data.
            /// It requires an account to exist before it can be created.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Maps Account.
            /// </param>
            /// <param name='privateAtlasName'>
            /// The name of the Private Atlas instance.
            /// </param>
            /// <param name='privateAtlasCreateParameters'>
            /// The new or updated parameters for the Private Atlas resource.
            /// </param>
            public static PrivateAtlas CreateOrUpdate(this IPrivateAtlasesOperations operations, string resourceGroupName, string accountName, string privateAtlasName, PrivateAtlasCreateParameters privateAtlasCreateParameters)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, accountName, privateAtlasName, privateAtlasCreateParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a Private Atlas resource. Private Atlas resource will
            /// enable the usage of Azure resources to build a custom set of mapping data.
            /// It requires an account to exist before it can be created.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Maps Account.
            /// </param>
            /// <param name='privateAtlasName'>
            /// The name of the Private Atlas instance.
            /// </param>
            /// <param name='privateAtlasCreateParameters'>
            /// The new or updated parameters for the Private Atlas resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PrivateAtlas> CreateOrUpdateAsync(this IPrivateAtlasesOperations operations, string resourceGroupName, string accountName, string privateAtlasName, PrivateAtlasCreateParameters privateAtlasCreateParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, accountName, privateAtlasName, privateAtlasCreateParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the Private Atlas resource. Only a subset of the parameters may be
            /// updated after creation, such as Tags.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Maps Account.
            /// </param>
            /// <param name='privateAtlasName'>
            /// The name of the Private Atlas instance.
            /// </param>
            /// <param name='privateAtlasUpdateParameters'>
            /// The updated parameters for the Private Atlas.
            /// </param>
            public static PrivateAtlas Update(this IPrivateAtlasesOperations operations, string resourceGroupName, string accountName, string privateAtlasName, PrivateAtlasUpdateParameters privateAtlasUpdateParameters)
            {
                return operations.UpdateAsync(resourceGroupName, accountName, privateAtlasName, privateAtlasUpdateParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the Private Atlas resource. Only a subset of the parameters may be
            /// updated after creation, such as Tags.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Maps Account.
            /// </param>
            /// <param name='privateAtlasName'>
            /// The name of the Private Atlas instance.
            /// </param>
            /// <param name='privateAtlasUpdateParameters'>
            /// The updated parameters for the Private Atlas.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PrivateAtlas> UpdateAsync(this IPrivateAtlasesOperations operations, string resourceGroupName, string accountName, string privateAtlasName, PrivateAtlasUpdateParameters privateAtlasUpdateParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, accountName, privateAtlasName, privateAtlasUpdateParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a Private Atlas resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Maps Account.
            /// </param>
            /// <param name='privateAtlasName'>
            /// The name of the Private Atlas instance.
            /// </param>
            public static void Delete(this IPrivateAtlasesOperations operations, string resourceGroupName, string accountName, string privateAtlasName)
            {
                operations.DeleteAsync(resourceGroupName, accountName, privateAtlasName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a Private Atlas resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Maps Account.
            /// </param>
            /// <param name='privateAtlasName'>
            /// The name of the Private Atlas instance.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IPrivateAtlasesOperations operations, string resourceGroupName, string accountName, string privateAtlasName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, accountName, privateAtlasName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get a Private Atlas resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Maps Account.
            /// </param>
            /// <param name='privateAtlasName'>
            /// The name of the Private Atlas instance.
            /// </param>
            public static PrivateAtlas Get(this IPrivateAtlasesOperations operations, string resourceGroupName, string accountName, string privateAtlasName)
            {
                return operations.GetAsync(resourceGroupName, accountName, privateAtlasName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a Private Atlas resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Maps Account.
            /// </param>
            /// <param name='privateAtlasName'>
            /// The name of the Private Atlas instance.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PrivateAtlas> GetAsync(this IPrivateAtlasesOperations operations, string resourceGroupName, string accountName, string privateAtlasName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, accountName, privateAtlasName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all Private Atlas instances for an Azure Map Account
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Maps Account.
            /// </param>
            public static IEnumerable<PrivateAtlas> ListByAccount(this IPrivateAtlasesOperations operations, string resourceGroupName, string accountName)
            {
                return operations.ListByAccountAsync(resourceGroupName, accountName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all Private Atlas instances for an Azure Map Account
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Maps Account.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<PrivateAtlas>> ListByAccountAsync(this IPrivateAtlasesOperations operations, string resourceGroupName, string accountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByAccountWithHttpMessagesAsync(resourceGroupName, accountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
