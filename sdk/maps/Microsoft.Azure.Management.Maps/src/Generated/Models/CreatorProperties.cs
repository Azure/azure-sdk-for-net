// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Maps.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Creator resource properties
    /// </summary>
    public partial class CreatorProperties
    {
        /// <summary>
        /// Initializes a new instance of the CreatorProperties class.
        /// </summary>
        public CreatorProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CreatorProperties class.
        /// </summary>
        /// <param name="storageUnits">The storage units to be allocated.
        /// Integer values from 1 to 100, inclusive.</param>
        /// <param name="provisioningState">The state of the resource
        /// provisioning, terminal states: Succeeded, Failed, Canceled</param>
        public CreatorProperties(int storageUnits, string provisioningState = default(string))
        {
            ProvisioningState = provisioningState;
            StorageUnits = storageUnits;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the state of the resource provisioning, terminal states:
        /// Succeeded, Failed, Canceled
        /// </summary>
        [JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets the storage units to be allocated. Integer values from
        /// 1 to 100, inclusive.
        /// </summary>
        [JsonProperty(PropertyName = "storageUnits")]
        public int StorageUnits { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (StorageUnits > 100)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "StorageUnits", 100);
            }
            if (StorageUnits < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "StorageUnits", 1);
            }
        }
    }
}
