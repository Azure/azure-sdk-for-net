// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.IO;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.Maps.Creator.Models;

namespace Azure.Maps.Creator
{
    internal partial class DataRestClient
    {
        private Geography? geography;
        private string xMsClientId;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of DataRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="xMsClientId"> Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. </param>
        public DataRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Geography? geography = default, string xMsClientId = null)
        {
            geography ??= Geography.Us;

            this.geography = geography;
            this.xMsClientId = xMsClientId;
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        internal HttpMessage CreateUploadPreviewRequest(UploadDataFormat uploadDataFormat, Stream uploadContent, string uploadDataDescription)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(geography.Value, true);
            uri.AppendRaw(".atlas.microsoft.com", false);
            uri.AppendPath("/mapData", false);
            uri.AppendQuery("api-version", "2.0", true);
            if (uploadDataDescription != null)
            {
                uri.AppendQuery("description", uploadDataDescription, true);
            }
            uri.AppendQuery("dataFormat", uploadDataFormat.ToString(), true);
            request.Uri = uri;
            if (xMsClientId != null)
            {
                request.Headers.Add("x-ms-client-id", xMsClientId);
            }
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/octet-stream");
            request.Content = RequestContent.Create(uploadContent);
            return message;
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// The Data Upload API allows the caller to upload data content to the Azure Maps service.
        /// You can use this API in a scenario like uploading a collection of Geofences in `GeoJSON`
        /// format, for use in our [Azure Maps Geofencing Service](https://docs.microsoft.com/rest/api/maps/spatial).
        /// 
        /// ## Submit Upload Request
        /// 
        /// To upload your content you will use a `POST` request. The request body will contain the data to upload. The
        /// `dataFormat` query parameter will contain the format for the data, the `dataSharingLevel` query parameter
        /// can contain the sharing level for the data. The `Content-Type` header will be set to the content type of the
        /// data.
        /// 
        /// For example, to upload a collection of geofences  in `GeoJSON` format, set the request body to the geofence
        /// content. Set the `dataFormat` query parameter to _geojson_, and set the `Content-Type` header to either one
        /// of the following media types:
        /// 
        /// - `application/json`
        /// - `application/vnd.geo+json`
        /// - `application/octet-stream`
        /// 
        /// Here&apos;s a sample request body for uploading a simple Geofence represented as a circle geometry using a center
        /// point and a radius. The sample below is in `GeoJSON`:
        /// 
        /// ```json
        /// {
        ///     &quot;type&quot;: &quot;FeatureCollection&quot;,
        ///     &quot;features&quot;: [{
        ///         &quot;type&quot;: &quot;Feature&quot;,
        ///         &quot;geometry&quot;: {
        ///             &quot;type&quot;: &quot;Point&quot;,
        ///             &quot;coordinates&quot;: [-122.126986, 47.639754]
        ///         },
        ///         &quot;properties&quot;: {
        ///             &quot;geometryId&quot;: &quot;001&quot;,
        ///             &quot;radius&quot;: 500
        ///         }
        ///     }]
        /// }
        /// ```
        /// 
        /// The Data Upload API performs a
        /// [long-running request](https://aka.ms/am-creator-lrt-v2).
        /// 
        /// ## Data Upload Limits
        /// 
        /// Please, be aware that currently every Azure Maps account has a [data storage limit](https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-subscription-service-limits#azure-maps-limits).
        /// Once the storage limit is reached, all the new upload API calls will return a `409 Conflict` http error response.
        /// You can always use the [Data Delete API](https://docs.microsoft.com/rest/api/maps/data%20v2/deletepreview) to
        /// delete old/unused content and create space for new uploads.
        /// </summary>
        /// <param name="uploadDataFormat"> Data format of the content being uploaded. </param>
        /// <param name="uploadContent"> The content to upload. </param>
        /// <param name="uploadDataDescription"> The description to be given to the upload. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="uploadContent"/> is null. </exception>
        public async Task<ResponseWithHeaders<DataUploadPreviewHeaders>> UploadPreviewAsync(UploadDataFormat uploadDataFormat, Stream uploadContent, string uploadDataDescription = null, CancellationToken cancellationToken = default)
        {
            if (uploadContent == null)
            {
                throw new ArgumentNullException(nameof(uploadContent));
            }

            using var message = CreateUploadPreviewRequest(uploadDataFormat, uploadContent, uploadDataDescription);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new DataUploadPreviewHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                case 202:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// The Data Upload API allows the caller to upload data content to the Azure Maps service.
        /// You can use this API in a scenario like uploading a collection of Geofences in `GeoJSON`
        /// format, for use in our [Azure Maps Geofencing Service](https://docs.microsoft.com/rest/api/maps/spatial).
        /// 
        /// ## Submit Upload Request
        /// 
        /// To upload your content you will use a `POST` request. The request body will contain the data to upload. The
        /// `dataFormat` query parameter will contain the format for the data, the `dataSharingLevel` query parameter
        /// can contain the sharing level for the data. The `Content-Type` header will be set to the content type of the
        /// data.
        /// 
        /// For example, to upload a collection of geofences  in `GeoJSON` format, set the request body to the geofence
        /// content. Set the `dataFormat` query parameter to _geojson_, and set the `Content-Type` header to either one
        /// of the following media types:
        /// 
        /// - `application/json`
        /// - `application/vnd.geo+json`
        /// - `application/octet-stream`
        /// 
        /// Here&apos;s a sample request body for uploading a simple Geofence represented as a circle geometry using a center
        /// point and a radius. The sample below is in `GeoJSON`:
        /// 
        /// ```json
        /// {
        ///     &quot;type&quot;: &quot;FeatureCollection&quot;,
        ///     &quot;features&quot;: [{
        ///         &quot;type&quot;: &quot;Feature&quot;,
        ///         &quot;geometry&quot;: {
        ///             &quot;type&quot;: &quot;Point&quot;,
        ///             &quot;coordinates&quot;: [-122.126986, 47.639754]
        ///         },
        ///         &quot;properties&quot;: {
        ///             &quot;geometryId&quot;: &quot;001&quot;,
        ///             &quot;radius&quot;: 500
        ///         }
        ///     }]
        /// }
        /// ```
        /// 
        /// The Data Upload API performs a
        /// [long-running request](https://aka.ms/am-creator-lrt-v2).
        /// 
        /// ## Data Upload Limits
        /// 
        /// Please, be aware that currently every Azure Maps account has a [data storage limit](https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-subscription-service-limits#azure-maps-limits).
        /// Once the storage limit is reached, all the new upload API calls will return a `409 Conflict` http error response.
        /// You can always use the [Data Delete API](https://docs.microsoft.com/rest/api/maps/data%20v2/deletepreview) to
        /// delete old/unused content and create space for new uploads.
        /// </summary>
        /// <param name="uploadDataFormat"> Data format of the content being uploaded. </param>
        /// <param name="uploadContent"> The content to upload. </param>
        /// <param name="uploadDataDescription"> The description to be given to the upload. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="uploadContent"/> is null. </exception>
        public ResponseWithHeaders<DataUploadPreviewHeaders> UploadPreview(UploadDataFormat uploadDataFormat, Stream uploadContent, string uploadDataDescription = null, CancellationToken cancellationToken = default)
        {
            if (uploadContent == null)
            {
                throw new ArgumentNullException(nameof(uploadContent));
            }

            using var message = CreateUploadPreviewRequest(uploadDataFormat, uploadContent, uploadDataDescription);
            _pipeline.Send(message, cancellationToken);
            var headers = new DataUploadPreviewHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                case 202:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUploadPreviewRequest(UploadDataFormat uploadDataFormat, object uploadContent, string uploadDataDescription)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(geography.Value, true);
            uri.AppendRaw(".atlas.microsoft.com", false);
            uri.AppendPath("/mapData", false);
            uri.AppendQuery("api-version", "2.0", true);
            if (uploadDataDescription != null)
            {
                uri.AppendQuery("description", uploadDataDescription, true);
            }
            uri.AppendQuery("dataFormat", uploadDataFormat.ToString(), true);
            request.Uri = uri;
            if (xMsClientId != null)
            {
                request.Headers.Add("x-ms-client-id", xMsClientId);
            }
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(uploadContent);
            request.Content = content;
            return message;
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// The Data Upload API allows the caller to upload data content to the Azure Maps service.
        /// You can use this API in a scenario like uploading a collection of Geofences in `GeoJSON`
        /// format, for use in our [Azure Maps Geofencing Service](https://docs.microsoft.com/rest/api/maps/spatial).
        /// 
        /// ## Submit Upload Request
        /// 
        /// To upload your content you will use a `POST` request. The request body will contain the data to upload. The
        /// `dataFormat` query parameter will contain the format for the data, the `dataSharingLevel` query parameter
        /// can contain the sharing level for the data. The `Content-Type` header will be set to the content type of the
        /// data.
        /// 
        /// For example, to upload a collection of geofences  in `GeoJSON` format, set the request body to the geofence
        /// content. Set the `dataFormat` query parameter to _geojson_, and set the `Content-Type` header to either one
        /// of the following media types:
        /// 
        /// - `application/json`
        /// - `application/vnd.geo+json`
        /// - `application/octet-stream`
        /// 
        /// Here&apos;s a sample request body for uploading a simple Geofence represented as a circle geometry using a center
        /// point and a radius. The sample below is in `GeoJSON`:
        /// 
        /// ```json
        /// {
        ///     &quot;type&quot;: &quot;FeatureCollection&quot;,
        ///     &quot;features&quot;: [{
        ///         &quot;type&quot;: &quot;Feature&quot;,
        ///         &quot;geometry&quot;: {
        ///             &quot;type&quot;: &quot;Point&quot;,
        ///             &quot;coordinates&quot;: [-122.126986, 47.639754]
        ///         },
        ///         &quot;properties&quot;: {
        ///             &quot;geometryId&quot;: &quot;001&quot;,
        ///             &quot;radius&quot;: 500
        ///         }
        ///     }]
        /// }
        /// ```
        /// 
        /// The Data Upload API performs a
        /// [long-running request](https://aka.ms/am-creator-lrt-v2).
        /// 
        /// ## Data Upload Limits
        /// 
        /// Please, be aware that currently every Azure Maps account has a [data storage limit](https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-subscription-service-limits#azure-maps-limits).
        /// Once the storage limit is reached, all the new upload API calls will return a `409 Conflict` http error response.
        /// You can always use the [Data Delete API](https://docs.microsoft.com/rest/api/maps/data%20v2/deletepreview) to
        /// delete old/unused content and create space for new uploads.
        /// </summary>
        /// <param name="uploadDataFormat"> Data format of the content being uploaded. </param>
        /// <param name="uploadContent"> The content to upload. </param>
        /// <param name="uploadDataDescription"> The description to be given to the upload. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="uploadContent"/> is null. </exception>
        public async Task<ResponseWithHeaders<DataUploadPreviewHeaders>> UploadPreviewAsync(UploadDataFormat uploadDataFormat, object uploadContent, string uploadDataDescription = null, CancellationToken cancellationToken = default)
        {
            if (uploadContent == null)
            {
                throw new ArgumentNullException(nameof(uploadContent));
            }

            using var message = CreateUploadPreviewRequest(uploadDataFormat, uploadContent, uploadDataDescription);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new DataUploadPreviewHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                case 202:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// The Data Upload API allows the caller to upload data content to the Azure Maps service.
        /// You can use this API in a scenario like uploading a collection of Geofences in `GeoJSON`
        /// format, for use in our [Azure Maps Geofencing Service](https://docs.microsoft.com/rest/api/maps/spatial).
        /// 
        /// ## Submit Upload Request
        /// 
        /// To upload your content you will use a `POST` request. The request body will contain the data to upload. The
        /// `dataFormat` query parameter will contain the format for the data, the `dataSharingLevel` query parameter
        /// can contain the sharing level for the data. The `Content-Type` header will be set to the content type of the
        /// data.
        /// 
        /// For example, to upload a collection of geofences  in `GeoJSON` format, set the request body to the geofence
        /// content. Set the `dataFormat` query parameter to _geojson_, and set the `Content-Type` header to either one
        /// of the following media types:
        /// 
        /// - `application/json`
        /// - `application/vnd.geo+json`
        /// - `application/octet-stream`
        /// 
        /// Here&apos;s a sample request body for uploading a simple Geofence represented as a circle geometry using a center
        /// point and a radius. The sample below is in `GeoJSON`:
        /// 
        /// ```json
        /// {
        ///     &quot;type&quot;: &quot;FeatureCollection&quot;,
        ///     &quot;features&quot;: [{
        ///         &quot;type&quot;: &quot;Feature&quot;,
        ///         &quot;geometry&quot;: {
        ///             &quot;type&quot;: &quot;Point&quot;,
        ///             &quot;coordinates&quot;: [-122.126986, 47.639754]
        ///         },
        ///         &quot;properties&quot;: {
        ///             &quot;geometryId&quot;: &quot;001&quot;,
        ///             &quot;radius&quot;: 500
        ///         }
        ///     }]
        /// }
        /// ```
        /// 
        /// The Data Upload API performs a
        /// [long-running request](https://aka.ms/am-creator-lrt-v2).
        /// 
        /// ## Data Upload Limits
        /// 
        /// Please, be aware that currently every Azure Maps account has a [data storage limit](https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-subscription-service-limits#azure-maps-limits).
        /// Once the storage limit is reached, all the new upload API calls will return a `409 Conflict` http error response.
        /// You can always use the [Data Delete API](https://docs.microsoft.com/rest/api/maps/data%20v2/deletepreview) to
        /// delete old/unused content and create space for new uploads.
        /// </summary>
        /// <param name="uploadDataFormat"> Data format of the content being uploaded. </param>
        /// <param name="uploadContent"> The content to upload. </param>
        /// <param name="uploadDataDescription"> The description to be given to the upload. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="uploadContent"/> is null. </exception>
        public ResponseWithHeaders<DataUploadPreviewHeaders> UploadPreview(UploadDataFormat uploadDataFormat, object uploadContent, string uploadDataDescription = null, CancellationToken cancellationToken = default)
        {
            if (uploadContent == null)
            {
                throw new ArgumentNullException(nameof(uploadContent));
            }

            using var message = CreateUploadPreviewRequest(uploadDataFormat, uploadContent, uploadDataDescription);
            _pipeline.Send(message, cancellationToken);
            var headers = new DataUploadPreviewHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                case 202:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListPreviewRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(geography.Value, true);
            uri.AppendRaw(".atlas.microsoft.com", false);
            uri.AppendPath("/mapData", false);
            uri.AppendQuery("api-version", "2.0", true);
            request.Uri = uri;
            if (xMsClientId != null)
            {
                request.Headers.Add("x-ms-client-id", xMsClientId);
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// This API allows the caller to fetch a list of all content uploaded previously using the [Data Upload API](https://docs.microsoft.com/en-us/rest/api/maps/data%20v2/uploadpreview).
        /// 
        /// 
        /// ### Submit List Request
        /// 
        /// To list all your map data content you will issue a `GET` request with no additional parameters.
        /// 
        /// 
        /// ### List Data Response
        /// 
        /// The Data List API returns the complete list of all data in `json` format. The response contains the following details for each data resource:
        /// 
        ///   &gt; udid - The unique data id for the data resource.
        /// 
        ///   &gt; location - The location of the data resource. Execute a HTTP `GET` on this location to download the data.
        /// 
        /// 
        /// Here&apos;s a sample response returning the `udid` and `location` of 3 data resources:
        /// 
        /// &lt;br&gt;
        /// 
        /// ```json
        /// {
        ///     &quot;mapDataList&quot;:
        ///     [
        ///         {
        ///             &quot;udid&quot;: &quot;9a1288fa-1858-4a3b-b68d-13a8j5af7d7c&quot;,
        ///             &quot;location&quot;: &quot;https://us.atlas.microsoft.com/mapData/9a1288fa-1858-4a3b-b68d-13a8j5af7d7c?api-version=1.0&quot;,
        ///             &quot;sizeInBytes&quot;: 29920,
        ///             &quot;uploadStatus&quot;: &quot;Completed&quot;
        ///         },
        ///         {
        ///             &quot;udid&quot;: &quot;8b1288fa-1958-4a2b-b68e-13a7i5af7d7c&quot;,
        ///             &quot;location&quot;: &quot;https://us.atlas.microsoft.com/mapData/8b1288fa-1958-4a2b-b68e-13a7i5af7d7c?api-version=1.0&quot;,
        ///             &quot;sizeInBytes&quot;: 1339,
        ///             &quot;uploadStatus&quot;: &quot;Completed&quot;
        ///         },
        ///         {
        ///             &quot;udid&quot;: &quot;7c1288fa-2058-4a1b-b68f-13a6h5af7d7c&quot;,
        ///             &quot;location&quot;: &quot;https://us.atlas.microsoft.com/mapData/7c1288fa-2058-4a1b-b68f-13a6h5af7d7c?api-version=1.0&quot;,
        ///             &quot;sizeInBytes&quot;: 1650,
        ///             &quot;uploadStatus&quot;: &quot;Pending&quot;
        ///         }]
        /// }
        /// ```
        /// 
        /// &lt;br&gt;.
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<MapDataListResponse>> ListPreviewAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateListPreviewRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        MapDataListResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = MapDataListResponse.DeserializeMapDataListResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// This API allows the caller to fetch a list of all content uploaded previously using the [Data Upload API](https://docs.microsoft.com/en-us/rest/api/maps/data%20v2/uploadpreview).
        /// 
        /// 
        /// ### Submit List Request
        /// 
        /// To list all your map data content you will issue a `GET` request with no additional parameters.
        /// 
        /// 
        /// ### List Data Response
        /// 
        /// The Data List API returns the complete list of all data in `json` format. The response contains the following details for each data resource:
        /// 
        ///   &gt; udid - The unique data id for the data resource.
        /// 
        ///   &gt; location - The location of the data resource. Execute a HTTP `GET` on this location to download the data.
        /// 
        /// 
        /// Here&apos;s a sample response returning the `udid` and `location` of 3 data resources:
        /// 
        /// &lt;br&gt;
        /// 
        /// ```json
        /// {
        ///     &quot;mapDataList&quot;:
        ///     [
        ///         {
        ///             &quot;udid&quot;: &quot;9a1288fa-1858-4a3b-b68d-13a8j5af7d7c&quot;,
        ///             &quot;location&quot;: &quot;https://us.atlas.microsoft.com/mapData/9a1288fa-1858-4a3b-b68d-13a8j5af7d7c?api-version=1.0&quot;,
        ///             &quot;sizeInBytes&quot;: 29920,
        ///             &quot;uploadStatus&quot;: &quot;Completed&quot;
        ///         },
        ///         {
        ///             &quot;udid&quot;: &quot;8b1288fa-1958-4a2b-b68e-13a7i5af7d7c&quot;,
        ///             &quot;location&quot;: &quot;https://us.atlas.microsoft.com/mapData/8b1288fa-1958-4a2b-b68e-13a7i5af7d7c?api-version=1.0&quot;,
        ///             &quot;sizeInBytes&quot;: 1339,
        ///             &quot;uploadStatus&quot;: &quot;Completed&quot;
        ///         },
        ///         {
        ///             &quot;udid&quot;: &quot;7c1288fa-2058-4a1b-b68f-13a6h5af7d7c&quot;,
        ///             &quot;location&quot;: &quot;https://us.atlas.microsoft.com/mapData/7c1288fa-2058-4a1b-b68f-13a6h5af7d7c?api-version=1.0&quot;,
        ///             &quot;sizeInBytes&quot;: 1650,
        ///             &quot;uploadStatus&quot;: &quot;Pending&quot;
        ///         }]
        /// }
        /// ```
        /// 
        /// &lt;br&gt;.
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<MapDataListResponse> ListPreview(CancellationToken cancellationToken = default)
        {
            using var message = CreateListPreviewRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        MapDataListResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = MapDataListResponse.DeserializeMapDataListResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdatePreviewRequest(string uniqueDataId, object updateContent, string uploadDataDescription)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(geography.Value, true);
            uri.AppendRaw(".atlas.microsoft.com", false);
            uri.AppendPath("/mapData/", false);
            uri.AppendPath(uniqueDataId, true);
            uri.AppendQuery("api-version", "2.0", true);
            if (uploadDataDescription != null)
            {
                uri.AppendQuery("description", uploadDataDescription, true);
            }
            request.Uri = uri;
            if (xMsClientId != null)
            {
                request.Headers.Add("x-ms-client-id", xMsClientId);
            }
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(updateContent);
            request.Content = content;
            return message;
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// The Data Update API allows the caller to update a previously uploaded data content.
        /// 
        /// You can use this API in a scenario like adding or removing geofences to or from an existing collection of geofences.
        /// Geofences are uploaded using the [Data Upload API](https://docs.microsoft.com/rest/api/maps/data%20v2/uploadpreview), for
        /// use in the [Azure Maps Geofencing Service](https://docs.microsoft.com/rest/api/maps/spatial).
        /// 
        /// Please note that the Update API will *replace* and *override* the existing data content.
        /// 
        /// ## Submit Update Request
        /// 
        /// To update your content you will use a `PUT` request. The request body will contain the new data that will replace
        /// the existing data. The `Content-Type` header will be set to the content type of the data, and the path will contain
        /// the `udid` of the data to be update.
        /// 
        /// For example, to update a collection of geofences that were previously uploaded using the Upload API, place the new
        /// geofence content in the request body. Set the `udid` parameter in the path to the `udid` of the data received
        /// previously in the upload API response. And set the `Content-Type` header to one of the following media types:
        /// 
        /// - `application/json`
        /// - `application/vnd.geo+json`
        /// - `application/octet-stream`
        /// 
        /// Here&apos;s a sample request body for updating a simple Geofence. It&apos;s represented as a circle geometry using a center
        /// point and a radius. The sample below is in `GeoJSON`:
        /// 
        /// ```json
        /// {
        ///     &quot;type&quot;: &quot;FeatureCollection&quot;,
        ///     &quot;features&quot;: [{
        ///         &quot;type&quot;: &quot;Feature&quot;,
        ///         &quot;geometry&quot;: {
        ///             &quot;type&quot;: &quot;Point&quot;,
        ///             &quot;coordinates&quot;: [-122.126986, 47.639754]
        ///         },
        ///         &quot;properties&quot;: {
        ///             &quot;geometryId&quot;: &quot;001&quot;,
        ///             &quot;radius&quot;: 500
        ///         }
        ///     }]
        /// }
        /// ```
        /// 
        /// The previously uploaded geofence had a radius of 100m. The above request will update it to 500m.
        /// 
        /// The Data Update API performs a
        /// [long-running request](https://aka.ms/am-creator-lrt-v2).
        /// 
        /// ## Data Update Limits
        /// 
        /// Please, be aware that currently every Azure Maps account has a [data storage limit](https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-subscription-service-limits#azure-maps-limits).
        /// Once the storage limit is reached, all the new upload API calls will return a `409 Conflict` http error response.
        /// You can always use the [Data Delete API](https://docs.microsoft.com/rest/api/maps/data%20v2/deletepreview) to
        /// delete old/unused content and create space for new uploads.
        /// </summary>
        /// <param name="uniqueDataId"> The unique data id for the content. The `udid` must have been obtained from a successful [Data Upload API](https://docs.microsoft.com/en-us/rest/api/maps/data%20v2/uploadpreview) call. </param>
        /// <param name="updateContent"> The new content that will update/replace the previously uploaded content. </param>
        /// <param name="uploadDataDescription"> The description to be given to the upload. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="uniqueDataId"/> or <paramref name="updateContent"/> is null. </exception>
        public async Task<ResponseWithHeaders<DataUpdatePreviewHeaders>> UpdatePreviewAsync(string uniqueDataId, object updateContent, string uploadDataDescription = null, CancellationToken cancellationToken = default)
        {
            if (uniqueDataId == null)
            {
                throw new ArgumentNullException(nameof(uniqueDataId));
            }
            if (updateContent == null)
            {
                throw new ArgumentNullException(nameof(updateContent));
            }

            using var message = CreateUpdatePreviewRequest(uniqueDataId, updateContent, uploadDataDescription);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new DataUpdatePreviewHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                case 202:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// The Data Update API allows the caller to update a previously uploaded data content.
        /// 
        /// You can use this API in a scenario like adding or removing geofences to or from an existing collection of geofences.
        /// Geofences are uploaded using the [Data Upload API](https://docs.microsoft.com/rest/api/maps/data%20v2/uploadpreview), for
        /// use in the [Azure Maps Geofencing Service](https://docs.microsoft.com/rest/api/maps/spatial).
        /// 
        /// Please note that the Update API will *replace* and *override* the existing data content.
        /// 
        /// ## Submit Update Request
        /// 
        /// To update your content you will use a `PUT` request. The request body will contain the new data that will replace
        /// the existing data. The `Content-Type` header will be set to the content type of the data, and the path will contain
        /// the `udid` of the data to be update.
        /// 
        /// For example, to update a collection of geofences that were previously uploaded using the Upload API, place the new
        /// geofence content in the request body. Set the `udid` parameter in the path to the `udid` of the data received
        /// previously in the upload API response. And set the `Content-Type` header to one of the following media types:
        /// 
        /// - `application/json`
        /// - `application/vnd.geo+json`
        /// - `application/octet-stream`
        /// 
        /// Here&apos;s a sample request body for updating a simple Geofence. It&apos;s represented as a circle geometry using a center
        /// point and a radius. The sample below is in `GeoJSON`:
        /// 
        /// ```json
        /// {
        ///     &quot;type&quot;: &quot;FeatureCollection&quot;,
        ///     &quot;features&quot;: [{
        ///         &quot;type&quot;: &quot;Feature&quot;,
        ///         &quot;geometry&quot;: {
        ///             &quot;type&quot;: &quot;Point&quot;,
        ///             &quot;coordinates&quot;: [-122.126986, 47.639754]
        ///         },
        ///         &quot;properties&quot;: {
        ///             &quot;geometryId&quot;: &quot;001&quot;,
        ///             &quot;radius&quot;: 500
        ///         }
        ///     }]
        /// }
        /// ```
        /// 
        /// The previously uploaded geofence had a radius of 100m. The above request will update it to 500m.
        /// 
        /// The Data Update API performs a
        /// [long-running request](https://aka.ms/am-creator-lrt-v2).
        /// 
        /// ## Data Update Limits
        /// 
        /// Please, be aware that currently every Azure Maps account has a [data storage limit](https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/azure-subscription-service-limits#azure-maps-limits).
        /// Once the storage limit is reached, all the new upload API calls will return a `409 Conflict` http error response.
        /// You can always use the [Data Delete API](https://docs.microsoft.com/rest/api/maps/data%20v2/deletepreview) to
        /// delete old/unused content and create space for new uploads.
        /// </summary>
        /// <param name="uniqueDataId"> The unique data id for the content. The `udid` must have been obtained from a successful [Data Upload API](https://docs.microsoft.com/en-us/rest/api/maps/data%20v2/uploadpreview) call. </param>
        /// <param name="updateContent"> The new content that will update/replace the previously uploaded content. </param>
        /// <param name="uploadDataDescription"> The description to be given to the upload. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="uniqueDataId"/> or <paramref name="updateContent"/> is null. </exception>
        public ResponseWithHeaders<DataUpdatePreviewHeaders> UpdatePreview(string uniqueDataId, object updateContent, string uploadDataDescription = null, CancellationToken cancellationToken = default)
        {
            if (uniqueDataId == null)
            {
                throw new ArgumentNullException(nameof(uniqueDataId));
            }
            if (updateContent == null)
            {
                throw new ArgumentNullException(nameof(updateContent));
            }

            using var message = CreateUpdatePreviewRequest(uniqueDataId, updateContent, uploadDataDescription);
            _pipeline.Send(message, cancellationToken);
            var headers = new DataUpdatePreviewHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                case 202:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDownloadPreviewRequest(string uniqueDataId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(geography.Value, true);
            uri.AppendRaw(".atlas.microsoft.com", false);
            uri.AppendPath("/mapData/", false);
            uri.AppendPath(uniqueDataId, true);
            uri.AppendQuery("api-version", "2.0", true);
            request.Uri = uri;
            if (xMsClientId != null)
            {
                request.Headers.Add("x-ms-client-id", xMsClientId);
            }
            request.Headers.Add("Accept", "application/json, application/vnd.geo+json, application/octet-stream");
            return message;
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// This API allows the caller to download a previously uploaded data content.&lt;br&gt;
        /// You can use this API in a scenario like downloading an existing collection of geofences uploaded previously using the [Data Upload API](https://docs.microsoft.com/en-us/rest/api/maps/data%20v2/uploadpreview) for use in our [Azure Maps Geofencing Service](https://docs.microsoft.com/en-us/rest/api/maps/spatial).
        /// 
        /// 
        /// ### Submit Download Request
        /// 
        /// To download your content you will use a `GET` request where the path will contain the `udid` of the data to download. Optionally, you can also pass in an `Accept` header to specify a preference for the `Content-Type` of the data response. &lt;br&gt;
        /// For example, to download a collection of geofences previously uploaded using the Upload API, set the `udid` parameter in the path to the `udid` of the data received previously in the upload API response and set the `Accept` header to either one of the following media types:
        /// 
        ///   - `application/json`
        ///   - `application/vnd.geo+json`
        ///   - `application/octet-stream`
        /// 
        /// 
        /// ### Download Data Response
        /// 
        /// The Download API will return a HTTP `200 OK` response if the data resource with the passed-in `udid` is found, where the response body will contain the content of the data resource.&lt;br&gt;
        /// A HTTP `400 Bad Request` error response will be returned if the data resource with the passed-in `udid` is not found.&lt;br&gt;
        /// 
        /// Here&apos;s a sample response body for a simple geofence represented in `GeoJSON` uploaded previously using the Upload API:
        /// &lt;br&gt;
        /// 
        /// ```json
        /// {
        ///     &quot;type&quot;: &quot;FeatureCollection&quot;,
        ///     &quot;features&quot;: [{
        ///         &quot;type&quot;: &quot;Feature&quot;,
        ///         &quot;geometry&quot;: {
        ///             &quot;type&quot;: &quot;Point&quot;,
        ///             &quot;coordinates&quot;: [-122.126986, 47.639754]
        ///         },
        ///         &quot;properties&quot;: {
        ///             &quot;geometryId&quot;: &quot;001&quot;,
        ///             &quot;radius&quot;: 500
        ///         }
        ///     }]
        /// }
        /// ```.
        /// </summary>
        /// <param name="uniqueDataId"> The unique data id for the content. The `udid` must have been obtained from a successful [Data Upload API](https://docs.microsoft.com/en-us/rest/api/maps/data%20v2/uploadpreview) call. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="uniqueDataId"/> is null. </exception>
        public async Task<ResponseWithHeaders<Stream, DataDownloadPreviewHeaders>> DownloadPreviewAsync(string uniqueDataId, CancellationToken cancellationToken = default)
        {
            if (uniqueDataId == null)
            {
                throw new ArgumentNullException(nameof(uniqueDataId));
            }

            using var message = CreateDownloadPreviewRequest(uniqueDataId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new DataDownloadPreviewHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        var value = message.ExtractResponseContent();
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// This API allows the caller to download a previously uploaded data content.&lt;br&gt;
        /// You can use this API in a scenario like downloading an existing collection of geofences uploaded previously using the [Data Upload API](https://docs.microsoft.com/en-us/rest/api/maps/data%20v2/uploadpreview) for use in our [Azure Maps Geofencing Service](https://docs.microsoft.com/en-us/rest/api/maps/spatial).
        /// 
        /// 
        /// ### Submit Download Request
        /// 
        /// To download your content you will use a `GET` request where the path will contain the `udid` of the data to download. Optionally, you can also pass in an `Accept` header to specify a preference for the `Content-Type` of the data response. &lt;br&gt;
        /// For example, to download a collection of geofences previously uploaded using the Upload API, set the `udid` parameter in the path to the `udid` of the data received previously in the upload API response and set the `Accept` header to either one of the following media types:
        /// 
        ///   - `application/json`
        ///   - `application/vnd.geo+json`
        ///   - `application/octet-stream`
        /// 
        /// 
        /// ### Download Data Response
        /// 
        /// The Download API will return a HTTP `200 OK` response if the data resource with the passed-in `udid` is found, where the response body will contain the content of the data resource.&lt;br&gt;
        /// A HTTP `400 Bad Request` error response will be returned if the data resource with the passed-in `udid` is not found.&lt;br&gt;
        /// 
        /// Here&apos;s a sample response body for a simple geofence represented in `GeoJSON` uploaded previously using the Upload API:
        /// &lt;br&gt;
        /// 
        /// ```json
        /// {
        ///     &quot;type&quot;: &quot;FeatureCollection&quot;,
        ///     &quot;features&quot;: [{
        ///         &quot;type&quot;: &quot;Feature&quot;,
        ///         &quot;geometry&quot;: {
        ///             &quot;type&quot;: &quot;Point&quot;,
        ///             &quot;coordinates&quot;: [-122.126986, 47.639754]
        ///         },
        ///         &quot;properties&quot;: {
        ///             &quot;geometryId&quot;: &quot;001&quot;,
        ///             &quot;radius&quot;: 500
        ///         }
        ///     }]
        /// }
        /// ```.
        /// </summary>
        /// <param name="uniqueDataId"> The unique data id for the content. The `udid` must have been obtained from a successful [Data Upload API](https://docs.microsoft.com/en-us/rest/api/maps/data%20v2/uploadpreview) call. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="uniqueDataId"/> is null. </exception>
        public ResponseWithHeaders<Stream, DataDownloadPreviewHeaders> DownloadPreview(string uniqueDataId, CancellationToken cancellationToken = default)
        {
            if (uniqueDataId == null)
            {
                throw new ArgumentNullException(nameof(uniqueDataId));
            }

            using var message = CreateDownloadPreviewRequest(uniqueDataId);
            _pipeline.Send(message, cancellationToken);
            var headers = new DataDownloadPreviewHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        var value = message.ExtractResponseContent();
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeletePreviewRequest(string uniqueDataId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(geography.Value, true);
            uri.AppendRaw(".atlas.microsoft.com", false);
            uri.AppendPath("/mapData/", false);
            uri.AppendPath(uniqueDataId, true);
            uri.AppendQuery("api-version", "2.0", true);
            request.Uri = uri;
            if (xMsClientId != null)
            {
                request.Headers.Add("x-ms-client-id", xMsClientId);
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// This API allows the caller to delete a previously uploaded data content.&lt;br&gt;
        /// You can use this API in a scenario like removing geofences previously uploaded using the [Data Upload API](https://docs.microsoft.com/en-us/rest/api/maps/data%20v2/uploadpreview) for use in our [Azure Maps Geofencing Service](https://docs.microsoft.com/en-us/rest/api/maps/spatial). You can also use this API to delete old/unused uploaded content and create space for new content.
        /// 
        /// 
        /// ### Submit Delete Request
        /// 
        /// To delete your content you will issue a `DELETE` request where the path will contain the `udid` of the data to delete.&lt;br&gt;
        /// For example, to delete a collection of geofences previously uploaded using the Upload API, set the `udid` parameter in the path to the `udid` of the data received previously in the upload API response.
        /// 
        /// 
        /// ### Delete Data Response
        /// 
        /// The Data Delete API returns a HTTP `204 No Content` response with an empty body, if the data resource was deleted successfully.&lt;br&gt;
        /// A HTTP `400 Bad Request` error response will be returned if the data resource with the passed-in `udid` is not found.
        /// </summary>
        /// <param name="uniqueDataId"> The unique data id for the content. The `udid` must have been obtained from a successful [Data Upload API](https://docs.microsoft.com/en-us/rest/api/maps/data%20v2/uploadpreview) call. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="uniqueDataId"/> is null. </exception>
        public async Task<Response> DeletePreviewAsync(string uniqueDataId, CancellationToken cancellationToken = default)
        {
            if (uniqueDataId == null)
            {
                throw new ArgumentNullException(nameof(uniqueDataId));
            }

            using var message = CreateDeletePreviewRequest(uniqueDataId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// This API allows the caller to delete a previously uploaded data content.&lt;br&gt;
        /// You can use this API in a scenario like removing geofences previously uploaded using the [Data Upload API](https://docs.microsoft.com/en-us/rest/api/maps/data%20v2/uploadpreview) for use in our [Azure Maps Geofencing Service](https://docs.microsoft.com/en-us/rest/api/maps/spatial). You can also use this API to delete old/unused uploaded content and create space for new content.
        /// 
        /// 
        /// ### Submit Delete Request
        /// 
        /// To delete your content you will issue a `DELETE` request where the path will contain the `udid` of the data to delete.&lt;br&gt;
        /// For example, to delete a collection of geofences previously uploaded using the Upload API, set the `udid` parameter in the path to the `udid` of the data received previously in the upload API response.
        /// 
        /// 
        /// ### Delete Data Response
        /// 
        /// The Data Delete API returns a HTTP `204 No Content` response with an empty body, if the data resource was deleted successfully.&lt;br&gt;
        /// A HTTP `400 Bad Request` error response will be returned if the data resource with the passed-in `udid` is not found.
        /// </summary>
        /// <param name="uniqueDataId"> The unique data id for the content. The `udid` must have been obtained from a successful [Data Upload API](https://docs.microsoft.com/en-us/rest/api/maps/data%20v2/uploadpreview) call. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="uniqueDataId"/> is null. </exception>
        public Response DeletePreview(string uniqueDataId, CancellationToken cancellationToken = default)
        {
            if (uniqueDataId == null)
            {
                throw new ArgumentNullException(nameof(uniqueDataId));
            }

            using var message = CreateDeletePreviewRequest(uniqueDataId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetOperationPreviewRequest(string operationId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(geography.Value, true);
            uri.AppendRaw(".atlas.microsoft.com", false);
            uri.AppendPath("/mapData/operations/", false);
            uri.AppendPath(operationId, true);
            uri.AppendQuery("api-version", "2.0", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> This path will be obtained from a call to POST /mapData.  While in progress, an http200 will be returned with no extra headers -  followed by an http200 with Resource-Location header once completed. </summary>
        /// <param name="operationId"> The ID to query the status for the data upload request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/> is null. </exception>
        public async Task<ResponseWithHeaders<LongRunningOperationResult, DataGetOperationPreviewHeaders>> GetOperationPreviewAsync(string operationId, CancellationToken cancellationToken = default)
        {
            if (operationId == null)
            {
                throw new ArgumentNullException(nameof(operationId));
            }

            using var message = CreateGetOperationPreviewRequest(operationId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new DataGetOperationPreviewHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        LongRunningOperationResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = LongRunningOperationResult.DeserializeLongRunningOperationResult(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> This path will be obtained from a call to POST /mapData.  While in progress, an http200 will be returned with no extra headers -  followed by an http200 with Resource-Location header once completed. </summary>
        /// <param name="operationId"> The ID to query the status for the data upload request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/> is null. </exception>
        public ResponseWithHeaders<LongRunningOperationResult, DataGetOperationPreviewHeaders> GetOperationPreview(string operationId, CancellationToken cancellationToken = default)
        {
            if (operationId == null)
            {
                throw new ArgumentNullException(nameof(operationId));
            }

            using var message = CreateGetOperationPreviewRequest(operationId);
            _pipeline.Send(message, cancellationToken);
            var headers = new DataGetOperationPreviewHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        LongRunningOperationResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = LongRunningOperationResult.DeserializeLongRunningOperationResult(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
