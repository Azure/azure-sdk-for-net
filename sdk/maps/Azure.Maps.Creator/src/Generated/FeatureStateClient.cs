// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.Maps.Creator.Models;

namespace Azure.Maps.Creator
{
    /// <summary> The FeatureState service client. </summary>
    public partial class FeatureStateClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal FeatureStateRestClient RestClient { get; }

        /// <summary> Initializes a new instance of FeatureStateClient for mocking. </summary>
        protected FeatureStateClient()
        {
        }

        /// <summary> Initializes a new instance of FeatureStateClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public FeatureStateClient(TokenCredential credential, Geography? geography = default, CreatorClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new CreatorClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            string[] scopes = { "https://atlas.microsoft.com/.default" };
            _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
            RestClient = new FeatureStateRestClient(_clientDiagnostics, _pipeline, geography);
        }

        /// <summary> Initializes a new instance of FeatureStateClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public FeatureStateClient(AzureKeyCredential credential, Geography? geography = default, CreatorClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new CreatorClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            _pipeline = HttpPipelineBuilder.Build(options, new AzureKeyCredentialPolicy(credential, "subscription-key"));
            RestClient = new FeatureStateRestClient(_clientDiagnostics, _pipeline, geography);
        }

        /// <summary> Initializes a new instance of FeatureStateClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public FeatureStateClient(TokenCredential credential, Geography? geography = default, CreatorClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new CreatorClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            string[] scopes = { "https://atlas.microsoft.com/.default" };
            _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
            RestClient = new FeatureStateRestClient(_clientDiagnostics, _pipeline, geography);
        }

        /// <summary> Initializes a new instance of FeatureStateClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public FeatureStateClient(AzureKeyCredential credential, Geography? geography = default, CreatorClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new CreatorClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            _pipeline = HttpPipelineBuilder.Build(options, new AzureKeyCredentialPolicy(credential, "subscription-key"));
            RestClient = new FeatureStateRestClient(_clientDiagnostics, _pipeline, geography);
        }

        /// <summary> Initializes a new instance of FeatureStateClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public FeatureStateClient(TokenCredential credential, Geography? geography = default, CreatorClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new CreatorClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            string[] scopes = { "https://atlas.microsoft.com/.default" };
            _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
            RestClient = new FeatureStateRestClient(_clientDiagnostics, _pipeline, geography);
        }

        /// <summary> Initializes a new instance of FeatureStateClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public FeatureStateClient(AzureKeyCredential credential, Geography? geography = default, CreatorClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new CreatorClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            _pipeline = HttpPipelineBuilder.Build(options, new AzureKeyCredentialPolicy(credential, "subscription-key"));
            RestClient = new FeatureStateRestClient(_clientDiagnostics, _pipeline, geography);
        }

        /// <summary> Initializes a new instance of FeatureStateClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public FeatureStateClient(TokenCredential credential, Geography? geography = default, CreatorClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new CreatorClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            string[] scopes = { "https://atlas.microsoft.com/.default" };
            _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
            RestClient = new FeatureStateRestClient(_clientDiagnostics, _pipeline, geography);
        }

        /// <summary> Initializes a new instance of FeatureStateClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public FeatureStateClient(AzureKeyCredential credential, Geography? geography = default, CreatorClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new CreatorClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            _pipeline = HttpPipelineBuilder.Build(options, new AzureKeyCredentialPolicy(credential, "subscription-key"));
            RestClient = new FeatureStateRestClient(_clientDiagnostics, _pipeline, geography);
        }

        /// <summary> Initializes a new instance of FeatureStateClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public FeatureStateClient(TokenCredential credential, Geography? geography = default, CreatorClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new CreatorClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            string[] scopes = { "https://atlas.microsoft.com/.default" };
            _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
            RestClient = new FeatureStateRestClient(_clientDiagnostics, _pipeline, geography);
        }

        /// <summary> Initializes a new instance of FeatureStateClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public FeatureStateClient(AzureKeyCredential credential, Geography? geography = default, CreatorClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new CreatorClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            _pipeline = HttpPipelineBuilder.Build(options, new AzureKeyCredentialPolicy(credential, "subscription-key"));
            RestClient = new FeatureStateRestClient(_clientDiagnostics, _pipeline, geography);
        }

        /// <summary> Initializes a new instance of FeatureStateClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public FeatureStateClient(TokenCredential credential, Geography? geography = default, CreatorClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new CreatorClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            string[] scopes = { "https://atlas.microsoft.com/.default" };
            _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
            RestClient = new FeatureStateRestClient(_clientDiagnostics, _pipeline, geography);
        }

        /// <summary> Initializes a new instance of FeatureStateClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public FeatureStateClient(AzureKeyCredential credential, Geography? geography = default, CreatorClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new CreatorClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            _pipeline = HttpPipelineBuilder.Build(options, new AzureKeyCredentialPolicy(credential, "subscription-key"));
            RestClient = new FeatureStateRestClient(_clientDiagnostics, _pipeline, geography);
        }

        /// <summary> Initializes a new instance of FeatureStateClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public FeatureStateClient(TokenCredential credential, Geography? geography = default, CreatorClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new CreatorClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            string[] scopes = { "https://atlas.microsoft.com/.default" };
            _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
            RestClient = new FeatureStateRestClient(_clientDiagnostics, _pipeline, geography);
        }

        /// <summary> Initializes a new instance of FeatureStateClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public FeatureStateClient(AzureKeyCredential credential, Geography? geography = default, CreatorClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new CreatorClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            _pipeline = HttpPipelineBuilder.Build(options, new AzureKeyCredentialPolicy(credential, "subscription-key"));
            RestClient = new FeatureStateRestClient(_clientDiagnostics, _pipeline, geography);
        }

        /// <summary> Initializes a new instance of FeatureStateClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public FeatureStateClient(TokenCredential credential, Geography? geography = default, CreatorClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new CreatorClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            string[] scopes = { "https://atlas.microsoft.com/.default" };
            _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
            RestClient = new FeatureStateRestClient(_clientDiagnostics, _pipeline, geography);
        }

        /// <summary> Initializes a new instance of FeatureStateClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public FeatureStateClient(AzureKeyCredential credential, Geography? geography = default, CreatorClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new CreatorClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            _pipeline = HttpPipelineBuilder.Build(options, new AzureKeyCredentialPolicy(credential, "subscription-key"));
            RestClient = new FeatureStateRestClient(_clientDiagnostics, _pipeline, geography);
        }

        /// <summary> Initializes a new instance of FeatureStateClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        internal FeatureStateClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Geography? geography = default)
        {
            RestClient = new FeatureStateRestClient(clientDiagnostics, pipeline, geography);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        /// This POST API allows the user to create a new Stateset and define stateset style using request body.
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. The Feature State API is part of Creator.
        /// 
        /// The Feature State service allows the user to update the states of a feature and query them to be used in other services. The dynamic properties of a feature that don&apos;t belong to the dataset are referred to as *states* here.
        /// 
        /// This Feature State service pivot on the Stateset. Like Tileset, Stateset encapsulates the storage mechanism for feature states for a dataset.
        /// 
        /// Once the stateset is created, users can use that statesetId to post feature state updates and retrieve the current feature states. A feature can have only one state at a given point in time.
        /// 
        /// Feature state is defined by the key name, value and the timestamp. When a feature state update is posted to Azure Maps, the state value gets updated only if the provided state’s timestamp is later than the stored timestamp.
        /// 
        /// Azure Maps MapControl provides a way to use these feature states to style the features. Please refer to the State Tile documentation for more information.
        /// </summary>
        /// <param name="datasetId"> The datasetId must have been obtained from a successful [Dataset Create API](https://docs.microsoft.com/en-us/rest/api/maps/v2/dataset/create) call. </param>
        /// <param name="statesetCreateRequestBody"> The stateset style JSON data. </param>
        /// <param name="description"> Description for the stateset. Max length allowed is 1000. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<StatesetCreatedResponse>> CreateStatesetAsync(string datasetId, StylesObject statesetCreateRequestBody, string description = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FeatureStateClient.CreateStateset");
            scope.Start();
            try
            {
                return await RestClient.CreateStatesetAsync(datasetId, statesetCreateRequestBody, description, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        /// This POST API allows the user to create a new Stateset and define stateset style using request body.
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. The Feature State API is part of Creator.
        /// 
        /// The Feature State service allows the user to update the states of a feature and query them to be used in other services. The dynamic properties of a feature that don&apos;t belong to the dataset are referred to as *states* here.
        /// 
        /// This Feature State service pivot on the Stateset. Like Tileset, Stateset encapsulates the storage mechanism for feature states for a dataset.
        /// 
        /// Once the stateset is created, users can use that statesetId to post feature state updates and retrieve the current feature states. A feature can have only one state at a given point in time.
        /// 
        /// Feature state is defined by the key name, value and the timestamp. When a feature state update is posted to Azure Maps, the state value gets updated only if the provided state’s timestamp is later than the stored timestamp.
        /// 
        /// Azure Maps MapControl provides a way to use these feature states to style the features. Please refer to the State Tile documentation for more information.
        /// </summary>
        /// <param name="datasetId"> The datasetId must have been obtained from a successful [Dataset Create API](https://docs.microsoft.com/en-us/rest/api/maps/v2/dataset/create) call. </param>
        /// <param name="statesetCreateRequestBody"> The stateset style JSON data. </param>
        /// <param name="description"> Description for the stateset. Max length allowed is 1000. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<StatesetCreatedResponse> CreateStateset(string datasetId, StylesObject statesetCreateRequestBody, string description = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FeatureStateClient.CreateStateset");
            scope.Start();
            try
            {
                return RestClient.CreateStateset(datasetId, statesetCreateRequestBody, description, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        /// This PUT API allows the user to update the stateset style rules.
        /// </summary>
        /// <param name="statesetId"> The stateset id that was created. </param>
        /// <param name="statesetStyleUpdateRequestBody"> The stateset style JSON data. Only style rules are allowed to be updated, update on keyname and type is not allowed. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> PutStatesetAsync(string statesetId, StylesObject statesetStyleUpdateRequestBody, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FeatureStateClient.PutStateset");
            scope.Start();
            try
            {
                return await RestClient.PutStatesetAsync(statesetId, statesetStyleUpdateRequestBody, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        /// This PUT API allows the user to update the stateset style rules.
        /// </summary>
        /// <param name="statesetId"> The stateset id that was created. </param>
        /// <param name="statesetStyleUpdateRequestBody"> The stateset style JSON data. Only style rules are allowed to be updated, update on keyname and type is not allowed. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response PutStateset(string statesetId, StylesObject statesetStyleUpdateRequestBody, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FeatureStateClient.PutStateset");
            scope.Start();
            try
            {
                return RestClient.PutStateset(statesetId, statesetStyleUpdateRequestBody, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        ///  This DELETE API allows the user to delete the stateset and the associated data.
        /// </summary>
        /// <param name="statesetId"> The stateset id that was created. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteStatesetAsync(string statesetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FeatureStateClient.DeleteStateset");
            scope.Start();
            try
            {
                return await RestClient.DeleteStatesetAsync(statesetId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        ///  This DELETE API allows the user to delete the stateset and the associated data.
        /// </summary>
        /// <param name="statesetId"> The stateset id that was created. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteStateset(string statesetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FeatureStateClient.DeleteStateset");
            scope.Start();
            try
            {
                return RestClient.DeleteStateset(statesetId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        /// This GET API allows the user to get the stateset Information.
        /// 
        /// The stateset Information includes the datasetId associated to the stateset, and the styles of that stateset.
        /// </summary>
        /// <param name="statesetId"> The stateset id that was created. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<StatesetGetResponse>> GetStatesetAsync(string statesetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FeatureStateClient.GetStateset");
            scope.Start();
            try
            {
                return await RestClient.GetStatesetAsync(statesetId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        /// This GET API allows the user to get the stateset Information.
        /// 
        /// The stateset Information includes the datasetId associated to the stateset, and the styles of that stateset.
        /// </summary>
        /// <param name="statesetId"> The stateset id that was created. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<StatesetGetResponse> GetStateset(string statesetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FeatureStateClient.GetStateset");
            scope.Start();
            try
            {
                return RestClient.GetStateset(statesetId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        /// This PUT API allows the user to update the state of the given feature in the given stateset.
        /// </summary>
        /// <param name="statesetId"> The stateset id that was created. </param>
        /// <param name="featureId"> The id of a feature in the given dataset. If the featureId is not present in the dataset, Bad Request response will be returned. </param>
        /// <param name="featureStateUpdateRequestBody"> The feature state JSON data. A feature can have only one state at a given point in time. The specified state keyname must have been defined during the stateset creation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> UpdateStatesAsync(string statesetId, string featureId, FeatureStatesStructure featureStateUpdateRequestBody, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FeatureStateClient.UpdateStates");
            scope.Start();
            try
            {
                return await RestClient.UpdateStatesAsync(statesetId, featureId, featureStateUpdateRequestBody, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        /// This PUT API allows the user to update the state of the given feature in the given stateset.
        /// </summary>
        /// <param name="statesetId"> The stateset id that was created. </param>
        /// <param name="featureId"> The id of a feature in the given dataset. If the featureId is not present in the dataset, Bad Request response will be returned. </param>
        /// <param name="featureStateUpdateRequestBody"> The feature state JSON data. A feature can have only one state at a given point in time. The specified state keyname must have been defined during the stateset creation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response UpdateStates(string statesetId, string featureId, FeatureStatesStructure featureStateUpdateRequestBody, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FeatureStateClient.UpdateStates");
            scope.Start();
            try
            {
                return RestClient.UpdateStates(statesetId, featureId, featureStateUpdateRequestBody, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        ///  This API deletes the state information identified by the StateKeyName parameter for the feature identified by the FeatureId parameter in the the stateset.
        /// </summary>
        /// <param name="statesetId"> The stateset id that was created. </param>
        /// <param name="featureId"> The id of a feature in the given stateset. If no state was set for the featureId in the stateset earlier, Bad Request response will be returned. </param>
        /// <param name="stateKeyName"> The Name of the state to be deleted. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteStateAsync(string statesetId, string featureId, string stateKeyName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FeatureStateClient.DeleteState");
            scope.Start();
            try
            {
                return await RestClient.DeleteStateAsync(statesetId, featureId, stateKeyName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        ///  This API deletes the state information identified by the StateKeyName parameter for the feature identified by the FeatureId parameter in the the stateset.
        /// </summary>
        /// <param name="statesetId"> The stateset id that was created. </param>
        /// <param name="featureId"> The id of a feature in the given stateset. If no state was set for the featureId in the stateset earlier, Bad Request response will be returned. </param>
        /// <param name="stateKeyName"> The Name of the state to be deleted. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteState(string statesetId, string featureId, string stateKeyName, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FeatureStateClient.DeleteState");
            scope.Start();
            try
            {
                return RestClient.DeleteState(statesetId, featureId, stateKeyName, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        ///  This API returns the current state information associated with the given feature in the given stateset.
        /// </summary>
        /// <param name="statesetId"> The stateset id that was created. </param>
        /// <param name="featureId"> The id of a feature in the given stateset. If no state was set for the featureId in the stateset earlier, Bad Request response will be returned. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<FeatureStatesStructure>> GetStatesAsync(string statesetId, string featureId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FeatureStateClient.GetStates");
            scope.Start();
            try
            {
                return await RestClient.GetStatesAsync(statesetId, featureId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        ///  This API returns the current state information associated with the given feature in the given stateset.
        /// </summary>
        /// <param name="statesetId"> The stateset id that was created. </param>
        /// <param name="featureId"> The id of a feature in the given stateset. If no state was set for the featureId in the stateset earlier, Bad Request response will be returned. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<FeatureStatesStructure> GetStates(string statesetId, string featureId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("FeatureStateClient.GetStates");
            scope.Start();
            try
            {
                return RestClient.GetStates(statesetId, featureId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        ///  This API allows the caller to fetch a list of all previously successfully created statesets.
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<StatesetInfoObject> ListStatesetAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<StatesetInfoObject>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("FeatureStateClient.ListStateset");
                scope.Start();
                try
                {
                    var response = await RestClient.ListStatesetAsync(cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Statesets, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<StatesetInfoObject>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("FeatureStateClient.ListStateset");
                scope.Start();
                try
                {
                    var response = await RestClient.ListStatesetNextPageAsync(nextLink, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Statesets, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        ///  This API allows the caller to fetch a list of all previously successfully created statesets.
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<StatesetInfoObject> ListStateset(CancellationToken cancellationToken = default)
        {
            Page<StatesetInfoObject> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("FeatureStateClient.ListStateset");
                scope.Start();
                try
                {
                    var response = RestClient.ListStateset(cancellationToken);
                    return Page.FromValues(response.Value.Statesets, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<StatesetInfoObject> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("FeatureStateClient.ListStateset");
                scope.Start();
                try
                {
                    var response = RestClient.ListStatesetNextPage(nextLink, cancellationToken);
                    return Page.FromValues(response.Value.Statesets, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
