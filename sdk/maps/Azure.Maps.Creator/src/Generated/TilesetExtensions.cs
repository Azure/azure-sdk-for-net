// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.Maps.Creator
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Tileset.
    /// </summary>
    public static partial class TilesetExtensions
    {
            /// <summary>
            /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
            ///
            /// Creator makes it possible to develop applications based on your private
            /// indoor map data using Azure Maps API and SDK.
            /// [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps)
            /// article introduces concepts and tools that apply to Azure Maps Creator.
            ///
            /// [This](https://docs.microsoft.com/en-us/azure/azure-maps/creator-indoor-maps)
            /// article introduces concepts and tools that apply to Azure Maps Creator.
            ///
            /// The Tileset Create API allows the caller to create a tileset from a
            /// dataset. A tileset contains a set of tiles that can be consumed
            /// from the [Get Map Tile](/rest/api/maps/render/getmaptile) to retrieve
            /// custom tiles. To make a dataset, use the
            /// [DataSet Create API](/rest/api/maps/dataset/createpreview).
            ///
            /// ## Submit Create Request
            ///
            /// To create your tileset you will make a `POST` request with an empty body.
            /// The `datasetId` query parameter will be
            /// used as the source of the tileset data.
            ///
            /// The Create Tileset API is a
            /// [long-running request](https://aka.ms/am-creator-lrt-v2).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='datasetId'>
            /// The unique `datasetId` that the tileset create API uses to retrieve
            /// features to generate tiles. The `datasetId` must have been obtained from a
            /// successful [Dataset Create API](/en-us/rest/api/maps/dataset/createpreview)
            /// call.
            /// </param>
            /// <param name='description'>
            /// User provided description of the tileset.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LongRunningOperationResult> CreateAsync(this ITileset operations, string datasetId, string description = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(datasetId, description, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
            ///
            /// Creator makes it possible to develop applications based on your private
            /// indoor map data using Azure Maps API and SDK.
            /// [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps)
            /// article introduces concepts and tools that apply to Azure Maps Creator.
            ///
            /// This API allows the caller to fetch a list of all tilesets created.
            /// &lt;br&gt;
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TilesetListResponse> ListAsync(this ITileset operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
            ///
            /// Creator makes it possible to develop applications based on your private
            /// indoor map data using Azure Maps API and SDK.
            /// [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps)
            /// article introduces concepts and tools that apply to Azure Maps Creator.
            ///
            /// This API allows the caller to fetch a tileset.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tilesetId'>
            /// The Tileset Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TilesetDetailInfo> GetAsync(this ITileset operations, string tilesetId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(tilesetId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
            ///
            /// Creator makes it possible to develop applications based on your private
            /// indoor map data using Azure Maps API and SDK.
            /// [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps)
            /// article introduces concepts and tools that apply to Azure Maps Creator.
            ///
            /// This API allows the caller to delete a created tileset.&lt;br&gt;
            /// You can use this API if a tileset is no longer needed.
            ///
            /// ### Submit Delete Request
            ///
            /// To delete your content you will issue a `DELETE` request where the path
            /// will contain the `tilesetId` of the tileset to delete.&lt;br&gt;
            ///
            /// #### Delete request "Successful"
            ///
            /// The Tileset Delete API returns a HTTP `204 No Content` response with an
            /// empty body, if the tileset was deleted successfully.&lt;br&gt;
            ///
            /// #### Delete request "Failed"
            ///
            /// A HTTP `400 Bad Request` error response will be returned if the tileset
            /// with the passed-in `tilesetId` is not found.
            ///
            /// Here is a sample error response:
            ///
            /// &lt;br&gt;
            ///
            /// ```json
            /// {
            /// "error": {
            /// "code": "400 BadRequest",
            /// "message": "Bad request - Tileset Id: d85b5b27-5fc4-4599-8b50-47160e90f8ce
            /// does not exist."
            /// }
            /// }
            /// ```
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tilesetId'>
            /// The Tileset Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this ITileset operations, string tilesetId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(tilesetId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// This path will be obtained from a call to /tilesets/create.  While in
            /// progress, an http200 will be returned with no extra headers -  followed by
            /// an http200 with Resource-Location header once successfully completed.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='operationId'>
            /// The ID to query the status for the dataset create/import request.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LongRunningOperationResult> GetOperationAsync(this ITileset operations, string operationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOperationWithHttpMessagesAsync(operationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
