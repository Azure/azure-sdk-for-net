// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.Maps.Creator
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Spatial.
    /// </summary>
    public static partial class SpatialExtensions
    {
            /// <summary>
            /// **Search Geofence Get API**
            ///
            /// **Applies to:** S1 Pricing tier.
            ///
            /// The Geofence Get API allows you to retrieve the proximity of a coordinate
            /// to a
            /// geofence that has been uploaded to the Data service. You can use the
            /// [Data Upload
            /// API](https://docs.microsoft.com/en-us/rest/api/maps/data/uploadPreview) to
            /// upload
            /// a geofence or set of fences. See [Geofencing GeoJSON
            /// data](https://docs.microsoft.com/en-us/azure/azure-maps/geofence-geojson)
            /// for more details on the geofence data format. To query the proximity of a
            /// coordinate, you supply the location of the object you are tracking as well
            /// as the ID for the fence or set of fences, and the response will contain
            /// information about
            /// the distance from the outer edge of the geofence. A negative value
            /// signifies that the
            /// coordinate is inside of the fence while a positive value means that it is
            /// outside of the
            /// fence.&lt;br&gt;&lt;br&gt;This API can be used for a variety of scenarios
            /// that include things like asset
            /// tracking, fleet management, or setting up alerts for moving objects.
            ///
            /// The API supports [integration with Event
            /// Grid](https://docs.microsoft.com/azure/azure-maps/azure-maps-event-grid-integration).
            /// The isAsync parameter is used to enable integration with Event Grid
            /// (disabled by default).
            /// To test this API, you can upload the sample data from Post Geofence API
            /// examples(Request Body) via Data Upload API and replace the [udid] from the
            /// sample request below with the udid returned by Data Upload API.
            ///
            ///
            /// ### Geofencing InnerError code
            ///
            /// In geofencing response error contract, `innererror` is  an object
            /// containing service specific information about the error. `code` is a
            /// property in `innererror` which can map to a specific geofencing error type.
            /// The table belows shows the code mapping between all the known client error
            /// type to the corresponding geofencing error `message`.
            ///
            /// innererror.code | error.message
            /// ---------------------------- | --------------------------------------
            /// NullDeviceId  | Device Id should not be null.
            /// NullUdid	  | Udid should not be null.
            /// UdidWrongFormat| Udid should be acquired from user data ingestion API.
            /// InvalidUserTime| Usertime is invalid.
            /// InvalidSearchBuffer| Searchbuffer is invalid.
            /// InvalidSearchRange| The value range of searchbuffer should be from 0 to 500
            /// meters.
            /// InvalidLatLon| Lat and/or lon parameters are invalid.
            /// InvalidIsAsyncValue| The IsAsync parameter is invalid.
            /// InvalidModeValue| The mode parameter invalid.
            /// InvalidJson| Geofencing data is not a valid json file.
            /// NotSupportedGeoJson| Geofencing data can't be read as a Feature or
            /// FeatureCollections.
            /// InvalidGeoJson| Geofencing data is invalid.
            /// NoUserDataWithAccountOrSubscription| Can't find user geofencing data with
            /// provided account-id and/or subscription-id.
            /// NoUserDataWithUdid|	Can't find user geofencing data with provided udid.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// ID of the device
            /// </param>
            /// <param name='udid'>
            /// The unique id returned from [Data Upload
            /// API](https://docs.microsoft.com/en-us/rest/api/maps/data/uploadPreview)
            /// after uploading a valid GeoJSON FeatureCollection object. Please refer to
            /// [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.3) for details.
            /// All the feature's  properties should contain `geometryId`, which is used
            /// for identifying the geometry and is case-sensitive.
            /// </param>
            /// <param name='latitude'>
            /// The latitude of the location being passed.  Example: 48.36.
            /// </param>
            /// <param name='longitude'>
            /// The longitude of the location being passed.  Example: -124.63.
            /// </param>
            /// <param name='z'>
            /// The sea level in meter of the location being passed. If this parameter is
            /// presented, 2D extrusion is used. Example: 200.
            /// </param>
            /// <param name='userTime'>
            /// The user request time. If not presented in the request, the default value
            /// is DateTime.Now.
            /// </param>
            /// <param name='searchBuffer'>
            /// The radius of the buffer around the geofence in meters that defines how far
            /// to search inside and outside the border of the fence against the coordinate
            /// that was provided when calculating the result.  The minimum value is 0, and
            /// the maximum is 500.  The default value is 50.
            /// </param>
            /// <param name='isAsync'>
            /// If true, the request will use async event mechanism; if false, the request
            /// will be synchronized and do not trigger any event. The default value is
            /// false.
            /// </param>
            /// <param name='mode'>
            /// Mode of the geofencing async event mechanism. Possible values include:
            /// 'All', 'EnterAndExit'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GeofenceResponse> GetGeofenceAsync(this ISpatial operations, string deviceId, string udid, double latitude, double longitude, double? z = default(double?), System.DateTime? userTime = default(System.DateTime?), double? searchBuffer = default(double?), bool? isAsync = default(bool?), string mode = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGeofenceWithHttpMessagesAsync(deviceId, udid, latitude, longitude, z, userTime, searchBuffer, isAsync, mode, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// **Search Geofence Post API**
            /// **Applies to:** S1 Pricing tier.
            /// The Geofence Post API allows you to retrieve the proximity of a coordinate
            /// to a  provided geofence or set of fences. With POST call, you do not have
            /// to upload the fence data in advance, instead you supply the location of the
            /// object you are tracking in query parameters as well as the fence or set of
            /// fences data in post request body. See [Geofencing GeoJSON
            /// data](https://docs.microsoft.com/en-us/azure/azure-maps/geofence-geojson)
            /// for more details on the geofence data format. The response will contain
            /// information about the distance from the outer edge of the geofence. A
            /// negative value signifies that the  coordinate is inside of the fence while
            /// a positive value means that it is outside of the
            /// fence.&lt;br&gt;&lt;br&gt;This API can be used for a variety of scenarios
            /// that include things like asset  tracking, fleet management, or setting up
            /// alerts for moving objects.
            ///
            /// The API supports [integration with Event
            /// Grid](https://docs.microsoft.com/azure/azure-maps/azure-maps-event-grid-integration).
            /// The isAsync parameter is used to enable integration with Event Grid
            /// (disabled by default).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deviceId'>
            /// ID of the device
            /// </param>
            /// <param name='latitude'>
            /// The latitude of the location being passed.  Example: 48.36.
            /// </param>
            /// <param name='longitude'>
            /// The longitude of the location being passed.  Example: -124.63.
            /// </param>
            /// <param name='searchGeofenceRequestBody'>
            /// The geofencing GeoJSON data.
            /// </param>
            /// <param name='z'>
            /// The sea level in meter of the location being passed. If this parameter is
            /// presented, 2D extrusion geofencing is applied. Example: 200.
            /// </param>
            /// <param name='userTime'>
            /// The user request time. If not presented in the request, the default value
            /// is DateTime.UtcNow.
            /// </param>
            /// <param name='searchBuffer'>
            /// The radius of the buffer around the geofence in meters that defines how far
            /// to search inside and outside the border of the fence against the coordinate
            /// that was provided when calculating the result.  The minimum value is 0, and
            /// the maximum is 500.  The default value is 50.
            /// </param>
            /// <param name='isAsync'>
            /// If true, the request will use async event mechanism; if false, the request
            /// will be synchronized and do not trigger any event. The default value is
            /// false.
            /// </param>
            /// <param name='mode'>
            /// Mode of the geofencing async event mechanism. Possible values include:
            /// 'All', 'EnterAndExit'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GeofenceResponse> PostGeofenceAsync(this ISpatial operations, string deviceId, double latitude, double longitude, GeoJsonFeatureCollection searchGeofenceRequestBody, double? z = default(double?), System.DateTime? userTime = default(System.DateTime?), double? searchBuffer = default(double?), bool? isAsync = default(bool?), string mode = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostGeofenceWithHttpMessagesAsync(deviceId, latitude, longitude, searchGeofenceRequestBody, z, userTime, searchBuffer, isAsync, mode, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// **Applies to**: S1 pricing tier.
            ///
            /// This API returns a FeatureCollection where each Feature is a buffer around
            /// the corresponding indexed Feature of the input. The buffer could be either
            /// on the outside or the inside of the provided Feature, depending on the
            /// distance provided in the input. There must be either one distance provided
            /// per Feature in the FeatureCollection  input, or if only one distance is
            /// provided, then that distance is applied to every Feature in the collection.
            /// The positive (or negative) buffer of a geometry is defined as the Minkowski
            /// sum (or difference) of the geometry with a circle of radius equal to the
            /// absolute value of the buffer distance. The buffer API always returns a
            /// polygonal result. The negative or zero-distance buffer of lines and points
            /// is always an empty polygon. The input may contain a collection of Point,
            /// MultiPoint, Polygon, MultiPolygon, LineString and MultiLineString.
            /// GeometryCollection will be ignored if provided.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='bufferRequestBody'>
            /// The FeatureCollection and the list of distances (one per feature or one for
            /// all features).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BufferResponse> PostBufferAsync(this ISpatial operations, BufferRequestBody bufferRequestBody, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostBufferWithHttpMessagesAsync(bufferRequestBody, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// **Applies to**: S1 pricing tier.
            ///
            /// This API returns a FeatureCollection where each Feature is a buffer around
            /// the corresponding indexed Feature of the input. The buffer could be either
            /// on the outside or the inside of the provided Feature, depending on the
            /// distance provided in the input. There must be either one distance provided
            /// per Feature in the FeatureCollection  input, or if only one distance is
            /// provided, then that distance is applied to every Feature in the collection.
            /// The positive (or negative) buffer of a geometry is defined as the Minkowski
            /// sum (or difference) of the geometry with a circle of radius equal to the
            /// absolute value of the buffer distance. The buffer API always returns a
            /// polygonal result. The negative or zero-distance buffer of lines and points
            /// is always an empty polygon. The input features are provided by a GeoJSON
            /// file which is uploaded via [Data Upload
            /// API](https://docs.microsoft.com/en-us/rest/api/maps/data/uploadPreview) and
            /// referenced by a unique udid. The GeoJSON file may contain a collection of
            /// Point, MultiPoint, Polygon, MultiPolygon, LineString and MultiLineString.
            /// GeometryCollection will be ignored if provided.
            ///
            /// To test this API, you can upload the sample data from [Post Buffer
            /// API](https://docs.microsoft.com/en-us/rest/api/maps/spatial/postbuffer#examples)
            /// examples(Request Body without distances array) via [Data Upload
            /// API](https://docs.microsoft.com/en-us/rest/api/maps/data/uploadPreview) and
            /// replace the [udid] from the [sample request
            /// below](https://docs.microsoft.com/en-us/rest/api/maps/spatial/getbuffer#examples)
            /// with the udid returned by Data Upload API.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='udid'>
            /// The unique id returned from [Data Upload
            /// API](https://docs.microsoft.com/en-us/rest/api/maps/data/uploadPreview)
            /// after uploading a valid GeoJSON FeatureCollection object.  Please refer to
            /// [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.3) for details.
            /// All the feature's properties should contain `geometryId`, which is used for
            /// identifying the geometry and is case-sensitive.
            /// </param>
            /// <param name='distances'>
            /// The list of distances (one per feature or one for all features), delimited
            /// by semicolons. For example, 12.34;-56.78. Positive distance will generate a
            /// buffer outside of the feature, whereas negative distance will generate a
            /// buffer inside of the feature. If the negative distance larger than the
            /// geometry itself, an empty polygon will be returned.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BufferResponse> GetBufferAsync(this ISpatial operations, string udid, string distances, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBufferWithHttpMessagesAsync(udid, distances, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// **Applies to**: S1 pricing tier.
            ///
            /// This API returns the closest point between a base point and a given set of
            /// target points. The set of target points is provided by user data in post
            /// request body. The user data may only contain a collection of Point
            /// geometry. MultiPoint or other geometries will be ignored if provided. The
            /// algorithm does not take into account routing or traffic. The maximum number
            /// of points accepted is 100,000. Information returned includes closest point
            /// latitude, longitude, and distance in meters from the closest point.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='latitude'>
            /// The latitude of the location being passed.  Example: 48.36.
            /// </param>
            /// <param name='longitude'>
            /// The longitude of the location being passed.  Example: -124.63.
            /// </param>
            /// <param name='closestPointRequestBody'>
            /// The FeatureCollection of Point geometries from which closest point to
            /// source point should be determined. All the feature's properties should
            /// contain `geometryId`, which is used for identifying the geometry and is
            /// case-sensitive.
            /// </param>
            /// <param name='numberOfClosestPoints'>
            /// The number of closest points expected from response. Default: 1, minimum: 1
            /// and maximum: 50
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ClosestPointResponse> PostClosestPointAsync(this ISpatial operations, double latitude, double longitude, GeoJsonFeatureCollection closestPointRequestBody, int? numberOfClosestPoints = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostClosestPointWithHttpMessagesAsync(latitude, longitude, closestPointRequestBody, numberOfClosestPoints, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// **Applies to**: S1 pricing tier.
            ///
            /// This API returns the closest point between a base point and a given set of
            /// points in the user uploaded data set identified by udid. The set of target
            /// points is provided by a GeoJSON file which is uploaded via [Data Upload
            /// API](https://docs.microsoft.com/en-us/rest/api/maps/data/uploadPreview) and
            /// referenced by a unique udid. The GeoJSON file may only contain a collection
            /// of Point geometry. MultiPoint or other geometries will be ignored if
            /// provided. The maximum number of points accepted is 100,000. The algorithm
            /// does not take into account routing or traffic. Information returned
            /// includes closest point latitude, longitude, and distance in meters from the
            /// closest point.
            ///
            /// To test this API, you can upload the sample data from [Post Closest Point
            /// API](https://docs.microsoft.com/en-us/rest/api/maps/spatial/postclosestpoint#examples)
            /// examples(Request Body) via [Data Upload
            /// API](https://docs.microsoft.com/en-us/rest/api/maps/data/uploadPreview) and
            /// replace the [udid] from the [sample request
            /// below](https://docs.microsoft.com/en-us/rest/api/maps/spatial/getclosestpoint#examples)
            /// with the udid returned by Data Upload API.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='udid'>
            /// The unique id returned from [Data Upload
            /// API](https://docs.microsoft.com/en-us/rest/api/maps/data/uploadPreview)
            /// after uploading a valid GeoJSON FeatureCollection object.  Please refer to
            /// [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.3) for details.
            /// All the feature's properties should contain `geometryId`, which is used for
            /// identifying the geometry and is case-sensitive.
            /// </param>
            /// <param name='latitude'>
            /// The latitude of the location being passed.  Example: 48.36.
            /// </param>
            /// <param name='longitude'>
            /// The longitude of the location being passed.  Example: -124.63.
            /// </param>
            /// <param name='numberOfClosestPoints'>
            /// The number of closest points expected from response. Default: 1, minimum: 1
            /// and maximum: 50
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ClosestPointResponse> GetClosestPointAsync(this ISpatial operations, string udid, double latitude, double longitude, int? numberOfClosestPoints = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetClosestPointWithHttpMessagesAsync(udid, latitude, longitude, numberOfClosestPoints, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// **Applies to**: S1 pricing tier.
            ///
            /// This API returns a boolean value indicating whether a point is inside a set
            /// of polygons. The user data may contain Polygon and MultiPolygon geometries,
            /// other geometries will be ignored if provided. If the point is inside or on
            /// the boundary of one of these polygons, the value returned is true. In all
            /// other cases, the value returned is false. When the point is inside multiple
            /// polygons, the result will give intersecting geometries section to show all
            /// valid geometries (referenced by geometryId) in user data. The maximum
            /// number of vertices accepted to form a Polygon is 10,000.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='latitude'>
            /// The latitude of the location being passed.  Example: 48.36.
            /// </param>
            /// <param name='longitude'>
            /// The longitude of the location being passed.  Example: -124.63.
            /// </param>
            /// <param name='pointInPolygonRequestBody'>
            /// A FeatureCollection with a set of Polygon/MultiPolygon geometries. The
            /// maximum number of vertices accepted to form a Polygon is 10,000. All the
            /// feature's properties should contain `geometryId`, which is used for
            /// identifying the geometry and is case-sensitive.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PointInPolygonResponse> PostPointInPolygonAsync(this ISpatial operations, double latitude, double longitude, GeoJsonFeatureCollection pointInPolygonRequestBody, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostPointInPolygonWithHttpMessagesAsync(latitude, longitude, pointInPolygonRequestBody, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// **Applies to**: S1 pricing tier.
            ///
            /// This API returns a boolean value indicating whether a point is inside a set
            /// of polygons. The set of polygons is provided by a GeoJSON file which is
            /// uploaded via [Data Upload
            /// API](https://docs.microsoft.com/en-us/rest/api/maps/data/uploadPreview) and
            /// referenced by a unique udid. The GeoJSON file may contain Polygon and
            /// MultiPolygon geometries, other geometries will be ignored if provided. If
            /// the point is inside or on the boundary of one of these polygons, the value
            /// returned is true. In all other cases, the value returned is false. When the
            /// point is inside multiple polygons, the result will give intersecting
            /// geometries section to show all valid geometries(referenced by geometryId)
            /// in user data. The maximum number of vertices accepted to form a Polygon is
            /// 10,000.
            ///
            ///
            /// To test this API, you can upload the sample data from [Post Point In
            /// Polygon
            /// API](https://docs.microsoft.com/en-us/rest/api/maps/spatial/postpointinpolygon#examples)
            /// examples(Request Body) via [Data Upload
            /// API](https://docs.microsoft.com/en-us/rest/api/maps/data/uploadPreview) and
            /// replace the [udid] from the [sample request
            /// below](https://docs.microsoft.com/en-us/rest/api/maps/spatial/getpointinpolygon#examples)
            /// with the udid returned by Data Upload API.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='udid'>
            /// The unique id returned from [Data Upload
            /// API](https://docs.microsoft.com/en-us/rest/api/maps/data/uploadPreview)
            /// after uploading a valid GeoJSON FeatureCollection object.  Please refer to
            /// [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.3) for details.
            /// All the feature's properties should contain `geometryId`, which is used for
            /// identifying the geometry and is case-sensitive.
            /// </param>
            /// <param name='latitude'>
            /// The latitude of the location being passed.  Example: 48.36.
            /// </param>
            /// <param name='longitude'>
            /// The longitude of the location being passed.  Example: -124.63.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PointInPolygonResponse> GetPointInPolygonAsync(this ISpatial operations, string udid, double latitude, double longitude, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPointInPolygonWithHttpMessagesAsync(udid, latitude, longitude, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// **Applies to**: S1 pricing tier.
            ///
            /// This API will return the great-circle or shortest distance between two
            /// points on the surface of a sphere, measured along the surface of the
            /// sphere.  This differs from calculating a straight line through the sphere's
            /// interior. This method is helpful for estimating travel distances for
            /// airplanes by calculating the shortest distance between airports.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='query'>
            /// The Coordinates through which the distance is calculated, delimited by a
            /// colon. Two coordinates are required.  The first one is the source point
            /// coordinate and the last is the target point coordinate. For example,
            /// 47.622942,122.316456:57.673988,127.121513
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GreatCircleDistanceResponse> GetGreatCircleDistanceAsync(this ISpatial operations, string query, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGreatCircleDistanceWithHttpMessagesAsync(query, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
