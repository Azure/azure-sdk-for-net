// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.Maps.Creator.Models;

namespace Azure.Maps.Creator
{
    internal partial class FeatureStateRestClient
    {
        private Geography? geography;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of FeatureStateRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        public FeatureStateRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Geography? geography = default)
        {
            geography ??= Geography.Us;

            this.geography = geography;
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        internal HttpMessage CreateCreateStatesetRequest(string datasetId, StylesObject statesetCreateRequestBody, string description)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(geography.Value, true);
            uri.AppendRaw(".atlas.microsoft.com", false);
            uri.AppendPath("/featureStateSets", false);
            uri.AppendQuery("api-version", "2.0", true);
            uri.AppendQuery("datasetId", datasetId, true);
            if (description != null)
            {
                uri.AppendQuery("description", description, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(statesetCreateRequestBody);
            request.Content = content;
            return message;
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        /// This POST API allows the user to create a new Stateset and define stateset style using request body.
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. The Feature State API is part of Creator.
        /// 
        /// The Feature State service allows the user to update the states of a feature and query them to be used in other services. The dynamic properties of a feature that don&apos;t belong to the dataset are referred to as *states* here.
        /// 
        /// This Feature State service pivot on the Stateset. Like Tileset, Stateset encapsulates the storage mechanism for feature states for a dataset.
        /// 
        /// Once the stateset is created, users can use that statesetId to post feature state updates and retrieve the current feature states. A feature can have only one state at a given point in time.
        /// 
        /// Feature state is defined by the key name, value and the timestamp. When a feature state update is posted to Azure Maps, the state value gets updated only if the provided state’s timestamp is later than the stored timestamp.
        /// 
        /// Azure Maps MapControl provides a way to use these feature states to style the features. Please refer to the State Tile documentation for more information.
        /// </summary>
        /// <param name="datasetId"> The datasetId must have been obtained from a successful [Dataset Create API](https://docs.microsoft.com/en-us/rest/api/maps/v2/dataset/create) call. </param>
        /// <param name="statesetCreateRequestBody"> The stateset style JSON data. </param>
        /// <param name="description"> Description for the stateset. Max length allowed is 1000. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> or <paramref name="statesetCreateRequestBody"/> is null. </exception>
        public async Task<Response<StatesetCreatedResponse>> CreateStatesetAsync(string datasetId, StylesObject statesetCreateRequestBody, string description = null, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }
            if (statesetCreateRequestBody == null)
            {
                throw new ArgumentNullException(nameof(statesetCreateRequestBody));
            }

            using var message = CreateCreateStatesetRequest(datasetId, statesetCreateRequestBody, description);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        StatesetCreatedResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = StatesetCreatedResponse.DeserializeStatesetCreatedResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        /// This POST API allows the user to create a new Stateset and define stateset style using request body.
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. The Feature State API is part of Creator.
        /// 
        /// The Feature State service allows the user to update the states of a feature and query them to be used in other services. The dynamic properties of a feature that don&apos;t belong to the dataset are referred to as *states* here.
        /// 
        /// This Feature State service pivot on the Stateset. Like Tileset, Stateset encapsulates the storage mechanism for feature states for a dataset.
        /// 
        /// Once the stateset is created, users can use that statesetId to post feature state updates and retrieve the current feature states. A feature can have only one state at a given point in time.
        /// 
        /// Feature state is defined by the key name, value and the timestamp. When a feature state update is posted to Azure Maps, the state value gets updated only if the provided state’s timestamp is later than the stored timestamp.
        /// 
        /// Azure Maps MapControl provides a way to use these feature states to style the features. Please refer to the State Tile documentation for more information.
        /// </summary>
        /// <param name="datasetId"> The datasetId must have been obtained from a successful [Dataset Create API](https://docs.microsoft.com/en-us/rest/api/maps/v2/dataset/create) call. </param>
        /// <param name="statesetCreateRequestBody"> The stateset style JSON data. </param>
        /// <param name="description"> Description for the stateset. Max length allowed is 1000. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> or <paramref name="statesetCreateRequestBody"/> is null. </exception>
        public Response<StatesetCreatedResponse> CreateStateset(string datasetId, StylesObject statesetCreateRequestBody, string description = null, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }
            if (statesetCreateRequestBody == null)
            {
                throw new ArgumentNullException(nameof(statesetCreateRequestBody));
            }

            using var message = CreateCreateStatesetRequest(datasetId, statesetCreateRequestBody, description);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        StatesetCreatedResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = StatesetCreatedResponse.DeserializeStatesetCreatedResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListStatesetRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(geography.Value, true);
            uri.AppendRaw(".atlas.microsoft.com", false);
            uri.AppendPath("/featureStateSets", false);
            uri.AppendQuery("api-version", "2.0", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        ///  This API allows the caller to fetch a list of all previously successfully created statesets.
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<StatesetListResponse>> ListStatesetAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateListStatesetRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        StatesetListResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = StatesetListResponse.DeserializeStatesetListResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        ///  This API allows the caller to fetch a list of all previously successfully created statesets.
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<StatesetListResponse> ListStateset(CancellationToken cancellationToken = default)
        {
            using var message = CreateListStatesetRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        StatesetListResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = StatesetListResponse.DeserializeStatesetListResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePutStatesetRequest(string statesetId, StylesObject statesetStyleUpdateRequestBody)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(geography.Value, true);
            uri.AppendRaw(".atlas.microsoft.com", false);
            uri.AppendPath("/featureStateSets/", false);
            uri.AppendPath(statesetId, true);
            uri.AppendQuery("api-version", "2.0", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(statesetStyleUpdateRequestBody);
            request.Content = content;
            return message;
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        /// This PUT API allows the user to update the stateset style rules.
        /// </summary>
        /// <param name="statesetId"> The stateset id that was created. </param>
        /// <param name="statesetStyleUpdateRequestBody"> The stateset style JSON data. Only style rules are allowed to be updated, update on keyname and type is not allowed. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="statesetId"/> or <paramref name="statesetStyleUpdateRequestBody"/> is null. </exception>
        public async Task<Response> PutStatesetAsync(string statesetId, StylesObject statesetStyleUpdateRequestBody, CancellationToken cancellationToken = default)
        {
            if (statesetId == null)
            {
                throw new ArgumentNullException(nameof(statesetId));
            }
            if (statesetStyleUpdateRequestBody == null)
            {
                throw new ArgumentNullException(nameof(statesetStyleUpdateRequestBody));
            }

            using var message = CreatePutStatesetRequest(statesetId, statesetStyleUpdateRequestBody);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        /// This PUT API allows the user to update the stateset style rules.
        /// </summary>
        /// <param name="statesetId"> The stateset id that was created. </param>
        /// <param name="statesetStyleUpdateRequestBody"> The stateset style JSON data. Only style rules are allowed to be updated, update on keyname and type is not allowed. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="statesetId"/> or <paramref name="statesetStyleUpdateRequestBody"/> is null. </exception>
        public Response PutStateset(string statesetId, StylesObject statesetStyleUpdateRequestBody, CancellationToken cancellationToken = default)
        {
            if (statesetId == null)
            {
                throw new ArgumentNullException(nameof(statesetId));
            }
            if (statesetStyleUpdateRequestBody == null)
            {
                throw new ArgumentNullException(nameof(statesetStyleUpdateRequestBody));
            }

            using var message = CreatePutStatesetRequest(statesetId, statesetStyleUpdateRequestBody);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteStatesetRequest(string statesetId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(geography.Value, true);
            uri.AppendRaw(".atlas.microsoft.com", false);
            uri.AppendPath("/featureStateSets/", false);
            uri.AppendPath(statesetId, true);
            uri.AppendQuery("api-version", "2.0", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        ///  This DELETE API allows the user to delete the stateset and the associated data.
        /// </summary>
        /// <param name="statesetId"> The stateset id that was created. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="statesetId"/> is null. </exception>
        public async Task<Response> DeleteStatesetAsync(string statesetId, CancellationToken cancellationToken = default)
        {
            if (statesetId == null)
            {
                throw new ArgumentNullException(nameof(statesetId));
            }

            using var message = CreateDeleteStatesetRequest(statesetId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        ///  This DELETE API allows the user to delete the stateset and the associated data.
        /// </summary>
        /// <param name="statesetId"> The stateset id that was created. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="statesetId"/> is null. </exception>
        public Response DeleteStateset(string statesetId, CancellationToken cancellationToken = default)
        {
            if (statesetId == null)
            {
                throw new ArgumentNullException(nameof(statesetId));
            }

            using var message = CreateDeleteStatesetRequest(statesetId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetStatesetRequest(string statesetId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(geography.Value, true);
            uri.AppendRaw(".atlas.microsoft.com", false);
            uri.AppendPath("/featureStateSets/", false);
            uri.AppendPath(statesetId, true);
            uri.AppendQuery("api-version", "2.0", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        /// This GET API allows the user to get the stateset Information.
        /// 
        /// The stateset Information includes the datasetId associated to the stateset, and the styles of that stateset.
        /// </summary>
        /// <param name="statesetId"> The stateset id that was created. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="statesetId"/> is null. </exception>
        public async Task<Response<StatesetGetResponse>> GetStatesetAsync(string statesetId, CancellationToken cancellationToken = default)
        {
            if (statesetId == null)
            {
                throw new ArgumentNullException(nameof(statesetId));
            }

            using var message = CreateGetStatesetRequest(statesetId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        StatesetGetResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = StatesetGetResponse.DeserializeStatesetGetResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        /// This GET API allows the user to get the stateset Information.
        /// 
        /// The stateset Information includes the datasetId associated to the stateset, and the styles of that stateset.
        /// </summary>
        /// <param name="statesetId"> The stateset id that was created. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="statesetId"/> is null. </exception>
        public Response<StatesetGetResponse> GetStateset(string statesetId, CancellationToken cancellationToken = default)
        {
            if (statesetId == null)
            {
                throw new ArgumentNullException(nameof(statesetId));
            }

            using var message = CreateGetStatesetRequest(statesetId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        StatesetGetResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = StatesetGetResponse.DeserializeStatesetGetResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateStatesRequest(string statesetId, string featureId, FeatureStatesStructure featureStateUpdateRequestBody)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(geography.Value, true);
            uri.AppendRaw(".atlas.microsoft.com", false);
            uri.AppendPath("/featureStateSets/", false);
            uri.AppendPath(statesetId, true);
            uri.AppendPath("/featureStates/", false);
            uri.AppendPath(featureId, true);
            uri.AppendQuery("api-version", "2.0", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(featureStateUpdateRequestBody);
            request.Content = content;
            return message;
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        /// This PUT API allows the user to update the state of the given feature in the given stateset.
        /// </summary>
        /// <param name="statesetId"> The stateset id that was created. </param>
        /// <param name="featureId"> The id of a feature in the given dataset. If the featureId is not present in the dataset, Bad Request response will be returned. </param>
        /// <param name="featureStateUpdateRequestBody"> The feature state JSON data. A feature can have only one state at a given point in time. The specified state keyname must have been defined during the stateset creation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="statesetId"/>, <paramref name="featureId"/>, or <paramref name="featureStateUpdateRequestBody"/> is null. </exception>
        public async Task<Response> UpdateStatesAsync(string statesetId, string featureId, FeatureStatesStructure featureStateUpdateRequestBody, CancellationToken cancellationToken = default)
        {
            if (statesetId == null)
            {
                throw new ArgumentNullException(nameof(statesetId));
            }
            if (featureId == null)
            {
                throw new ArgumentNullException(nameof(featureId));
            }
            if (featureStateUpdateRequestBody == null)
            {
                throw new ArgumentNullException(nameof(featureStateUpdateRequestBody));
            }

            using var message = CreateUpdateStatesRequest(statesetId, featureId, featureStateUpdateRequestBody);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        /// This PUT API allows the user to update the state of the given feature in the given stateset.
        /// </summary>
        /// <param name="statesetId"> The stateset id that was created. </param>
        /// <param name="featureId"> The id of a feature in the given dataset. If the featureId is not present in the dataset, Bad Request response will be returned. </param>
        /// <param name="featureStateUpdateRequestBody"> The feature state JSON data. A feature can have only one state at a given point in time. The specified state keyname must have been defined during the stateset creation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="statesetId"/>, <paramref name="featureId"/>, or <paramref name="featureStateUpdateRequestBody"/> is null. </exception>
        public Response UpdateStates(string statesetId, string featureId, FeatureStatesStructure featureStateUpdateRequestBody, CancellationToken cancellationToken = default)
        {
            if (statesetId == null)
            {
                throw new ArgumentNullException(nameof(statesetId));
            }
            if (featureId == null)
            {
                throw new ArgumentNullException(nameof(featureId));
            }
            if (featureStateUpdateRequestBody == null)
            {
                throw new ArgumentNullException(nameof(featureStateUpdateRequestBody));
            }

            using var message = CreateUpdateStatesRequest(statesetId, featureId, featureStateUpdateRequestBody);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteStateRequest(string statesetId, string featureId, string stateKeyName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(geography.Value, true);
            uri.AppendRaw(".atlas.microsoft.com", false);
            uri.AppendPath("/featureStateSets/", false);
            uri.AppendPath(statesetId, true);
            uri.AppendPath("/featureStates/", false);
            uri.AppendPath(featureId, true);
            uri.AppendQuery("api-version", "2.0", true);
            uri.AppendQuery("stateKeyName", stateKeyName, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        ///  This API deletes the state information identified by the StateKeyName parameter for the feature identified by the FeatureId parameter in the the stateset.
        /// </summary>
        /// <param name="statesetId"> The stateset id that was created. </param>
        /// <param name="featureId"> The id of a feature in the given stateset. If no state was set for the featureId in the stateset earlier, Bad Request response will be returned. </param>
        /// <param name="stateKeyName"> The Name of the state to be deleted. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="statesetId"/>, <paramref name="featureId"/>, or <paramref name="stateKeyName"/> is null. </exception>
        public async Task<Response> DeleteStateAsync(string statesetId, string featureId, string stateKeyName, CancellationToken cancellationToken = default)
        {
            if (statesetId == null)
            {
                throw new ArgumentNullException(nameof(statesetId));
            }
            if (featureId == null)
            {
                throw new ArgumentNullException(nameof(featureId));
            }
            if (stateKeyName == null)
            {
                throw new ArgumentNullException(nameof(stateKeyName));
            }

            using var message = CreateDeleteStateRequest(statesetId, featureId, stateKeyName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        ///  This API deletes the state information identified by the StateKeyName parameter for the feature identified by the FeatureId parameter in the the stateset.
        /// </summary>
        /// <param name="statesetId"> The stateset id that was created. </param>
        /// <param name="featureId"> The id of a feature in the given stateset. If no state was set for the featureId in the stateset earlier, Bad Request response will be returned. </param>
        /// <param name="stateKeyName"> The Name of the state to be deleted. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="statesetId"/>, <paramref name="featureId"/>, or <paramref name="stateKeyName"/> is null. </exception>
        public Response DeleteState(string statesetId, string featureId, string stateKeyName, CancellationToken cancellationToken = default)
        {
            if (statesetId == null)
            {
                throw new ArgumentNullException(nameof(statesetId));
            }
            if (featureId == null)
            {
                throw new ArgumentNullException(nameof(featureId));
            }
            if (stateKeyName == null)
            {
                throw new ArgumentNullException(nameof(stateKeyName));
            }

            using var message = CreateDeleteStateRequest(statesetId, featureId, stateKeyName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetStatesRequest(string statesetId, string featureId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(geography.Value, true);
            uri.AppendRaw(".atlas.microsoft.com", false);
            uri.AppendPath("/featureStateSets/", false);
            uri.AppendPath(statesetId, true);
            uri.AppendPath("/featureStates/", false);
            uri.AppendPath(featureId, true);
            uri.AppendQuery("api-version", "2.0", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        ///  This API returns the current state information associated with the given feature in the given stateset.
        /// </summary>
        /// <param name="statesetId"> The stateset id that was created. </param>
        /// <param name="featureId"> The id of a feature in the given stateset. If no state was set for the featureId in the stateset earlier, Bad Request response will be returned. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="statesetId"/> or <paramref name="featureId"/> is null. </exception>
        public async Task<Response<FeatureStatesStructure>> GetStatesAsync(string statesetId, string featureId, CancellationToken cancellationToken = default)
        {
            if (statesetId == null)
            {
                throw new ArgumentNullException(nameof(statesetId));
            }
            if (featureId == null)
            {
                throw new ArgumentNullException(nameof(featureId));
            }

            using var message = CreateGetStatesRequest(statesetId, featureId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        FeatureStatesStructure value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = FeatureStatesStructure.DeserializeFeatureStatesStructure(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        ///  This API returns the current state information associated with the given feature in the given stateset.
        /// </summary>
        /// <param name="statesetId"> The stateset id that was created. </param>
        /// <param name="featureId"> The id of a feature in the given stateset. If no state was set for the featureId in the stateset earlier, Bad Request response will be returned. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="statesetId"/> or <paramref name="featureId"/> is null. </exception>
        public Response<FeatureStatesStructure> GetStates(string statesetId, string featureId, CancellationToken cancellationToken = default)
        {
            if (statesetId == null)
            {
                throw new ArgumentNullException(nameof(statesetId));
            }
            if (featureId == null)
            {
                throw new ArgumentNullException(nameof(featureId));
            }

            using var message = CreateGetStatesRequest(statesetId, featureId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        FeatureStatesStructure value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = FeatureStatesStructure.DeserializeFeatureStatesStructure(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListStatesetNextPageRequest(string nextLink)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(geography.Value, true);
            uri.AppendRaw(".atlas.microsoft.com", false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        ///  This API allows the caller to fetch a list of all previously successfully created statesets.
        /// </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public async Task<Response<StatesetListResponse>> ListStatesetNextPageAsync(string nextLink, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateListStatesetNextPageRequest(nextLink);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        StatesetListResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = StatesetListResponse.DeserializeStatesetListResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        ///  This API allows the caller to fetch a list of all previously successfully created statesets.
        /// </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public Response<StatesetListResponse> ListStatesetNextPage(string nextLink, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateListStatesetNextPageRequest(nextLink);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        StatesetListResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = StatesetListResponse.DeserializeStatesetListResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
