// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.Maps.Creator.Models;

namespace Azure.Maps.Creator
{
    /// <summary> The Tileset service client. </summary>
    public partial class TilesetClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal TilesetRestClient RestClient { get; }

        /// <summary> Initializes a new instance of TilesetClient for mocking. </summary>
        protected TilesetClient()
        {
        }

        /// <summary> Initializes a new instance of TilesetClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="xMsClientId"> Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public TilesetClient(TokenCredential credential, Geography? geography = default, string xMsClientId = null, CreatorClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new CreatorClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            string[] scopes = { "https://atlas.microsoft.com/.default" };
            _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
            RestClient = new TilesetRestClient(_clientDiagnostics, _pipeline, geography, xMsClientId);
        }

        /// <summary> Initializes a new instance of TilesetClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="xMsClientId"> Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public TilesetClient(AzureKeyCredential credential, Geography? geography = default, string xMsClientId = null, CreatorClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new CreatorClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            _pipeline = HttpPipelineBuilder.Build(options, new AzureKeyCredentialPolicy(credential, "subscription-key"));
            RestClient = new TilesetRestClient(_clientDiagnostics, _pipeline, geography, xMsClientId);
        }

        /// <summary> Initializes a new instance of TilesetClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="xMsClientId"> Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public TilesetClient(TokenCredential credential, Geography? geography = default, string xMsClientId = null, CreatorClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new CreatorClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            string[] scopes = { "https://atlas.microsoft.com/.default" };
            _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
            RestClient = new TilesetRestClient(_clientDiagnostics, _pipeline, geography, xMsClientId);
        }

        /// <summary> Initializes a new instance of TilesetClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="xMsClientId"> Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public TilesetClient(AzureKeyCredential credential, Geography? geography = default, string xMsClientId = null, CreatorClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new CreatorClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            _pipeline = HttpPipelineBuilder.Build(options, new AzureKeyCredentialPolicy(credential, "subscription-key"));
            RestClient = new TilesetRestClient(_clientDiagnostics, _pipeline, geography, xMsClientId);
        }

        /// <summary> Initializes a new instance of TilesetClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="xMsClientId"> Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public TilesetClient(TokenCredential credential, Geography? geography = default, string xMsClientId = null, CreatorClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new CreatorClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            string[] scopes = { "https://atlas.microsoft.com/.default" };
            _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
            RestClient = new TilesetRestClient(_clientDiagnostics, _pipeline, geography, xMsClientId);
        }

        /// <summary> Initializes a new instance of TilesetClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="xMsClientId"> Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public TilesetClient(AzureKeyCredential credential, Geography? geography = default, string xMsClientId = null, CreatorClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new CreatorClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            _pipeline = HttpPipelineBuilder.Build(options, new AzureKeyCredentialPolicy(credential, "subscription-key"));
            RestClient = new TilesetRestClient(_clientDiagnostics, _pipeline, geography, xMsClientId);
        }

        /// <summary> Initializes a new instance of TilesetClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="xMsClientId"> Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public TilesetClient(TokenCredential credential, Geography? geography = default, string xMsClientId = null, CreatorClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new CreatorClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            string[] scopes = { "https://atlas.microsoft.com/.default" };
            _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
            RestClient = new TilesetRestClient(_clientDiagnostics, _pipeline, geography, xMsClientId);
        }

        /// <summary> Initializes a new instance of TilesetClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="xMsClientId"> Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public TilesetClient(AzureKeyCredential credential, Geography? geography = default, string xMsClientId = null, CreatorClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new CreatorClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            _pipeline = HttpPipelineBuilder.Build(options, new AzureKeyCredentialPolicy(credential, "subscription-key"));
            RestClient = new TilesetRestClient(_clientDiagnostics, _pipeline, geography, xMsClientId);
        }

        /// <summary> Initializes a new instance of TilesetClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="xMsClientId"> Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public TilesetClient(TokenCredential credential, Geography? geography = default, string xMsClientId = null, CreatorClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new CreatorClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            string[] scopes = { "https://atlas.microsoft.com/.default" };
            _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
            RestClient = new TilesetRestClient(_clientDiagnostics, _pipeline, geography, xMsClientId);
        }

        /// <summary> Initializes a new instance of TilesetClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="xMsClientId"> Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public TilesetClient(AzureKeyCredential credential, Geography? geography = default, string xMsClientId = null, CreatorClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new CreatorClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            _pipeline = HttpPipelineBuilder.Build(options, new AzureKeyCredentialPolicy(credential, "subscription-key"));
            RestClient = new TilesetRestClient(_clientDiagnostics, _pipeline, geography, xMsClientId);
        }

        /// <summary> Initializes a new instance of TilesetClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="xMsClientId"> Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public TilesetClient(TokenCredential credential, Geography? geography = default, string xMsClientId = null, CreatorClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new CreatorClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            string[] scopes = { "https://atlas.microsoft.com/.default" };
            _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
            RestClient = new TilesetRestClient(_clientDiagnostics, _pipeline, geography, xMsClientId);
        }

        /// <summary> Initializes a new instance of TilesetClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="xMsClientId"> Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public TilesetClient(AzureKeyCredential credential, Geography? geography = default, string xMsClientId = null, CreatorClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new CreatorClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            _pipeline = HttpPipelineBuilder.Build(options, new AzureKeyCredentialPolicy(credential, "subscription-key"));
            RestClient = new TilesetRestClient(_clientDiagnostics, _pipeline, geography, xMsClientId);
        }

        /// <summary> Initializes a new instance of TilesetClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="xMsClientId"> Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public TilesetClient(TokenCredential credential, Geography? geography = default, string xMsClientId = null, CreatorClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new CreatorClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            string[] scopes = { "https://atlas.microsoft.com/.default" };
            _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
            RestClient = new TilesetRestClient(_clientDiagnostics, _pipeline, geography, xMsClientId);
        }

        /// <summary> Initializes a new instance of TilesetClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="xMsClientId"> Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public TilesetClient(AzureKeyCredential credential, Geography? geography = default, string xMsClientId = null, CreatorClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new CreatorClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            _pipeline = HttpPipelineBuilder.Build(options, new AzureKeyCredentialPolicy(credential, "subscription-key"));
            RestClient = new TilesetRestClient(_clientDiagnostics, _pipeline, geography, xMsClientId);
        }

        /// <summary> Initializes a new instance of TilesetClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="xMsClientId"> Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public TilesetClient(TokenCredential credential, Geography? geography = default, string xMsClientId = null, CreatorClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new CreatorClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            string[] scopes = { "https://atlas.microsoft.com/.default" };
            _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
            RestClient = new TilesetRestClient(_clientDiagnostics, _pipeline, geography, xMsClientId);
        }

        /// <summary> Initializes a new instance of TilesetClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="xMsClientId"> Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public TilesetClient(AzureKeyCredential credential, Geography? geography = default, string xMsClientId = null, CreatorClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new CreatorClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            _pipeline = HttpPipelineBuilder.Build(options, new AzureKeyCredentialPolicy(credential, "subscription-key"));
            RestClient = new TilesetRestClient(_clientDiagnostics, _pipeline, geography, xMsClientId);
        }

        /// <summary> Initializes a new instance of TilesetClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="xMsClientId"> Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. </param>
        internal TilesetClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Geography? geography = default, string xMsClientId = null)
        {
            RestClient = new TilesetRestClient(clientDiagnostics, pipeline, geography, xMsClientId);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        /// This API allows the caller to fetch a tileset.
        /// </summary>
        /// <param name="tilesetId"> The Tileset Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<TilesetDetailInfo>> GetAsync(string tilesetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("TilesetClient.Get");
            scope.Start();
            try
            {
                return await RestClient.GetAsync(tilesetId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        /// This API allows the caller to fetch a tileset.
        /// </summary>
        /// <param name="tilesetId"> The Tileset Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<TilesetDetailInfo> Get(string tilesetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("TilesetClient.Get");
            scope.Start();
            try
            {
                return RestClient.Get(tilesetId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        /// This API allows the caller to delete a created tileset.&lt;br&gt;
        /// You can use this API if a tileset is no longer needed.
        /// 
        /// ### Submit Delete Request
        /// 
        /// To delete your content you will issue a `DELETE` request where the path will contain the `tilesetId` of the tileset to delete.&lt;br&gt;
        /// 
        /// #### Delete request &quot;Successful&quot;
        /// 
        /// The Tileset Delete API returns a HTTP `204 No Content` response with an empty body, if the tileset was deleted successfully.&lt;br&gt;
        /// 
        /// #### Delete request &quot;Failed&quot;
        /// 
        /// A HTTP `400 Bad Request` error response will be returned if the tileset with the passed-in `tilesetId` is not found.
        /// 
        /// Here is a sample error response:
        /// 
        /// &lt;br&gt;
        /// 
        /// ```json
        /// {
        ///   &quot;error&quot;: {
        ///       &quot;code&quot;: &quot;400 BadRequest&quot;,
        ///       &quot;message&quot;: &quot;Bad request - Tileset Id: d85b5b27-5fc4-4599-8b50-47160e90f8ce does not exist.&quot;
        ///   }
        /// }
        /// ```.
        /// </summary>
        /// <param name="tilesetId"> The Tileset Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteAsync(string tilesetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("TilesetClient.Delete");
            scope.Start();
            try
            {
                return await RestClient.DeleteAsync(tilesetId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        /// This API allows the caller to delete a created tileset.&lt;br&gt;
        /// You can use this API if a tileset is no longer needed.
        /// 
        /// ### Submit Delete Request
        /// 
        /// To delete your content you will issue a `DELETE` request where the path will contain the `tilesetId` of the tileset to delete.&lt;br&gt;
        /// 
        /// #### Delete request &quot;Successful&quot;
        /// 
        /// The Tileset Delete API returns a HTTP `204 No Content` response with an empty body, if the tileset was deleted successfully.&lt;br&gt;
        /// 
        /// #### Delete request &quot;Failed&quot;
        /// 
        /// A HTTP `400 Bad Request` error response will be returned if the tileset with the passed-in `tilesetId` is not found.
        /// 
        /// Here is a sample error response:
        /// 
        /// &lt;br&gt;
        /// 
        /// ```json
        /// {
        ///   &quot;error&quot;: {
        ///       &quot;code&quot;: &quot;400 BadRequest&quot;,
        ///       &quot;message&quot;: &quot;Bad request - Tileset Id: d85b5b27-5fc4-4599-8b50-47160e90f8ce does not exist.&quot;
        ///   }
        /// }
        /// ```.
        /// </summary>
        /// <param name="tilesetId"> The Tileset Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response Delete(string tilesetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("TilesetClient.Delete");
            scope.Start();
            try
            {
                return RestClient.Delete(tilesetId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> This path will be obtained from a call to /tilesets/create.  While in progress, an http200 will be returned with no extra headers -  followed by an http200 with Resource-Location header once successfully completed. </summary>
        /// <param name="operationId"> The ID to query the status for the dataset create/import request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<LongRunningOperationResult>> GetOperationAsync(string operationId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("TilesetClient.GetOperation");
            scope.Start();
            try
            {
                return await RestClient.GetOperationAsync(operationId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> This path will be obtained from a call to /tilesets/create.  While in progress, an http200 will be returned with no extra headers -  followed by an http200 with Resource-Location header once successfully completed. </summary>
        /// <param name="operationId"> The ID to query the status for the dataset create/import request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<LongRunningOperationResult> GetOperation(string operationId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("TilesetClient.GetOperation");
            scope.Start();
            try
            {
                return RestClient.GetOperation(operationId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        /// This API allows the caller to fetch a list of all tilesets created.
        /// &lt;br&gt;.
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<TilesetDetailInfo> ListAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<TilesetDetailInfo>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("TilesetClient.List");
                scope.Start();
                try
                {
                    var response = await RestClient.ListAsync(cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Tilesets, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<TilesetDetailInfo>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("TilesetClient.List");
                scope.Start();
                try
                {
                    var response = await RestClient.ListNextPageAsync(nextLink, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Tilesets, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        /// This API allows the caller to fetch a list of all tilesets created.
        /// &lt;br&gt;.
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<TilesetDetailInfo> List(CancellationToken cancellationToken = default)
        {
            Page<TilesetDetailInfo> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("TilesetClient.List");
                scope.Start();
                try
                {
                    var response = RestClient.List(cancellationToken);
                    return Page.FromValues(response.Value.Tilesets, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<TilesetDetailInfo> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("TilesetClient.List");
                scope.Start();
                try
                {
                    var response = RestClient.ListNextPage(nextLink, cancellationToken);
                    return Page.FromValues(response.Value.Tilesets, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        ///  [This](https://docs.microsoft.com/en-us/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        /// The Tileset Create API allows the caller to create a tileset from a dataset. A tileset contains a set of tiles that can be consumed
        /// from the [Get Map Tile](/rest/api/maps/render/getmaptile) to retrieve custom tiles. To make a dataset, use the
        /// [DataSet Create API](/rest/api/maps/dataset/createpreview).
        /// 
        /// ## Submit Create Request
        /// 
        /// To create your tileset you will make a `POST` request with an empty body. The `datasetId` query parameter will be
        /// used as the source of the tileset data.
        /// 
        /// The Create Tileset API is a
        /// [long-running request](https://aka.ms/am-creator-lrt-v2).
        /// </summary>
        /// <param name="datasetId"> The unique `datasetId` that the tileset create API uses to retrieve features to generate tiles. The `datasetId` must have been obtained from a successful [Dataset Create API](/en-us/rest/api/maps/dataset/createpreview) call. </param>
        /// <param name="description"> User provided description of the tileset. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        public virtual async Task<TilesetCreateOperation> StartCreateAsync(string datasetId, string description = null, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var scope = _clientDiagnostics.CreateScope("TilesetClient.StartCreate");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.CreateAsync(datasetId, description, cancellationToken).ConfigureAwait(false);
                return new TilesetCreateOperation(_clientDiagnostics, _pipeline, RestClient.CreateCreateRequest(datasetId, description).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        ///  [This](https://docs.microsoft.com/en-us/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        /// The Tileset Create API allows the caller to create a tileset from a dataset. A tileset contains a set of tiles that can be consumed
        /// from the [Get Map Tile](/rest/api/maps/render/getmaptile) to retrieve custom tiles. To make a dataset, use the
        /// [DataSet Create API](/rest/api/maps/dataset/createpreview).
        /// 
        /// ## Submit Create Request
        /// 
        /// To create your tileset you will make a `POST` request with an empty body. The `datasetId` query parameter will be
        /// used as the source of the tileset data.
        /// 
        /// The Create Tileset API is a
        /// [long-running request](https://aka.ms/am-creator-lrt-v2).
        /// </summary>
        /// <param name="datasetId"> The unique `datasetId` that the tileset create API uses to retrieve features to generate tiles. The `datasetId` must have been obtained from a successful [Dataset Create API](/en-us/rest/api/maps/dataset/createpreview) call. </param>
        /// <param name="description"> User provided description of the tileset. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        public virtual TilesetCreateOperation StartCreate(string datasetId, string description = null, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var scope = _clientDiagnostics.CreateScope("TilesetClient.StartCreate");
            scope.Start();
            try
            {
                var originalResponse = RestClient.Create(datasetId, description, cancellationToken);
                return new TilesetCreateOperation(_clientDiagnostics, _pipeline, RestClient.CreateCreateRequest(datasetId, description).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
