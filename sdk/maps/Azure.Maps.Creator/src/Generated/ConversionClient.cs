// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.Maps.Creator.Models;

namespace Azure.Maps.Creator
{
    /// <summary> The Conversion service client. </summary>
    public partial class ConversionClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal ConversionRestClient RestClient { get; }

        /// <summary> Initializes a new instance of ConversionClient for mocking. </summary>
        protected ConversionClient()
        {
        }

        /// <summary> Initializes a new instance of ConversionClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="xMsClientId"> Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public ConversionClient(TokenCredential credential, Geography? geography = default, string xMsClientId = null, CreatorClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new CreatorClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            string[] scopes = { "https://atlas.microsoft.com/.default" };
            _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
            RestClient = new ConversionRestClient(_clientDiagnostics, _pipeline, geography, xMsClientId);
        }

        /// <summary> Initializes a new instance of ConversionClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="xMsClientId"> Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public ConversionClient(AzureKeyCredential credential, Geography? geography = default, string xMsClientId = null, CreatorClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new CreatorClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            _pipeline = HttpPipelineBuilder.Build(options, new AzureKeyCredentialPolicy(credential, "subscription-key"));
            RestClient = new ConversionRestClient(_clientDiagnostics, _pipeline, geography, xMsClientId);
        }

        /// <summary> Initializes a new instance of ConversionClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="xMsClientId"> Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public ConversionClient(TokenCredential credential, Geography? geography = default, string xMsClientId = null, CreatorClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new CreatorClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            string[] scopes = { "https://atlas.microsoft.com/.default" };
            _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
            RestClient = new ConversionRestClient(_clientDiagnostics, _pipeline, geography, xMsClientId);
        }

        /// <summary> Initializes a new instance of ConversionClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="xMsClientId"> Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public ConversionClient(AzureKeyCredential credential, Geography? geography = default, string xMsClientId = null, CreatorClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new CreatorClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            _pipeline = HttpPipelineBuilder.Build(options, new AzureKeyCredentialPolicy(credential, "subscription-key"));
            RestClient = new ConversionRestClient(_clientDiagnostics, _pipeline, geography, xMsClientId);
        }

        /// <summary> Initializes a new instance of ConversionClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="xMsClientId"> Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public ConversionClient(TokenCredential credential, Geography? geography = default, string xMsClientId = null, CreatorClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new CreatorClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            string[] scopes = { "https://atlas.microsoft.com/.default" };
            _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
            RestClient = new ConversionRestClient(_clientDiagnostics, _pipeline, geography, xMsClientId);
        }

        /// <summary> Initializes a new instance of ConversionClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="xMsClientId"> Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public ConversionClient(AzureKeyCredential credential, Geography? geography = default, string xMsClientId = null, CreatorClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new CreatorClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            _pipeline = HttpPipelineBuilder.Build(options, new AzureKeyCredentialPolicy(credential, "subscription-key"));
            RestClient = new ConversionRestClient(_clientDiagnostics, _pipeline, geography, xMsClientId);
        }

        /// <summary> Initializes a new instance of ConversionClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="xMsClientId"> Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public ConversionClient(TokenCredential credential, Geography? geography = default, string xMsClientId = null, CreatorClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new CreatorClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            string[] scopes = { "https://atlas.microsoft.com/.default" };
            _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
            RestClient = new ConversionRestClient(_clientDiagnostics, _pipeline, geography, xMsClientId);
        }

        /// <summary> Initializes a new instance of ConversionClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="xMsClientId"> Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public ConversionClient(AzureKeyCredential credential, Geography? geography = default, string xMsClientId = null, CreatorClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new CreatorClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            _pipeline = HttpPipelineBuilder.Build(options, new AzureKeyCredentialPolicy(credential, "subscription-key"));
            RestClient = new ConversionRestClient(_clientDiagnostics, _pipeline, geography, xMsClientId);
        }

        /// <summary> Initializes a new instance of ConversionClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="xMsClientId"> Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public ConversionClient(TokenCredential credential, Geography? geography = default, string xMsClientId = null, CreatorClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new CreatorClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            string[] scopes = { "https://atlas.microsoft.com/.default" };
            _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
            RestClient = new ConversionRestClient(_clientDiagnostics, _pipeline, geography, xMsClientId);
        }

        /// <summary> Initializes a new instance of ConversionClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="xMsClientId"> Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public ConversionClient(AzureKeyCredential credential, Geography? geography = default, string xMsClientId = null, CreatorClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new CreatorClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            _pipeline = HttpPipelineBuilder.Build(options, new AzureKeyCredentialPolicy(credential, "subscription-key"));
            RestClient = new ConversionRestClient(_clientDiagnostics, _pipeline, geography, xMsClientId);
        }

        /// <summary> Initializes a new instance of ConversionClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="xMsClientId"> Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public ConversionClient(TokenCredential credential, Geography? geography = default, string xMsClientId = null, CreatorClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new CreatorClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            string[] scopes = { "https://atlas.microsoft.com/.default" };
            _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
            RestClient = new ConversionRestClient(_clientDiagnostics, _pipeline, geography, xMsClientId);
        }

        /// <summary> Initializes a new instance of ConversionClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="xMsClientId"> Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public ConversionClient(AzureKeyCredential credential, Geography? geography = default, string xMsClientId = null, CreatorClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new CreatorClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            _pipeline = HttpPipelineBuilder.Build(options, new AzureKeyCredentialPolicy(credential, "subscription-key"));
            RestClient = new ConversionRestClient(_clientDiagnostics, _pipeline, geography, xMsClientId);
        }

        /// <summary> Initializes a new instance of ConversionClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="xMsClientId"> Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public ConversionClient(TokenCredential credential, Geography? geography = default, string xMsClientId = null, CreatorClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new CreatorClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            string[] scopes = { "https://atlas.microsoft.com/.default" };
            _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
            RestClient = new ConversionRestClient(_clientDiagnostics, _pipeline, geography, xMsClientId);
        }

        /// <summary> Initializes a new instance of ConversionClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="xMsClientId"> Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public ConversionClient(AzureKeyCredential credential, Geography? geography = default, string xMsClientId = null, CreatorClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new CreatorClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            _pipeline = HttpPipelineBuilder.Build(options, new AzureKeyCredentialPolicy(credential, "subscription-key"));
            RestClient = new ConversionRestClient(_clientDiagnostics, _pipeline, geography, xMsClientId);
        }

        /// <summary> Initializes a new instance of ConversionClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="xMsClientId"> Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public ConversionClient(TokenCredential credential, Geography? geography = default, string xMsClientId = null, CreatorClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new CreatorClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            string[] scopes = { "https://atlas.microsoft.com/.default" };
            _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
            RestClient = new ConversionRestClient(_clientDiagnostics, _pipeline, geography, xMsClientId);
        }

        /// <summary> Initializes a new instance of ConversionClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="xMsClientId"> Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public ConversionClient(AzureKeyCredential credential, Geography? geography = default, string xMsClientId = null, CreatorClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new CreatorClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            _pipeline = HttpPipelineBuilder.Build(options, new AzureKeyCredentialPolicy(credential, "subscription-key"));
            RestClient = new ConversionRestClient(_clientDiagnostics, _pipeline, geography, xMsClientId);
        }

        /// <summary> Initializes a new instance of ConversionClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="xMsClientId"> Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. </param>
        internal ConversionClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Geography? geography = default, string xMsClientId = null)
        {
            RestClient = new ConversionRestClient(clientDiagnostics, pipeline, geography, xMsClientId);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        /// This API allows the caller to fetch a successful data conversion submitted previously using the [Conversion API](https://docs.microsoft.com/en-us/rest/api/maps/conversion/convertpreview).
        /// </summary>
        /// <param name="conversionId"> The conversion id for the content. The `conversionId` must have been obtained from a successful [Conversion API](https://docs.microsoft.com/en-us/rest/api/maps/v2/conversion/convert) call. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ConversionListDetailInfo>> GetAsync(string conversionId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ConversionClient.Get");
            scope.Start();
            try
            {
                return await RestClient.GetAsync(conversionId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        /// This API allows the caller to fetch a successful data conversion submitted previously using the [Conversion API](https://docs.microsoft.com/en-us/rest/api/maps/conversion/convertpreview).
        /// </summary>
        /// <param name="conversionId"> The conversion id for the content. The `conversionId` must have been obtained from a successful [Conversion API](https://docs.microsoft.com/en-us/rest/api/maps/v2/conversion/convert) call. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ConversionListDetailInfo> Get(string conversionId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ConversionClient.Get");
            scope.Start();
            try
            {
                return RestClient.Get(conversionId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        /// This API allows the caller to delete any data conversions created previously using the [Conversion API](https://docs.microsoft.com/en-us/rest/api/maps/conversion/convertpreview).
        /// 
        /// ### Submit Delete Request
        /// 
        /// To delete your conversion data you will issue a `DELETE` request where the path will contain the `conversionId` of the data to delete.
        /// 
        /// ### Conversion Delete Response
        /// 
        /// The Conversion Delete API returns a HTTP `204 No Content` response with an empty body, if the converted data resources were deleted successfully.&lt;br&gt;
        /// A HTTP `400 Bad Request` error response will be returned if no resource associated with the passed-in `conversionId` is found.
        /// </summary>
        /// <param name="conversionId"> The conversion id for the content. The `conversionId` must have been obtained from a successful [Conversion API](https://docs.microsoft.com/en-us/rest/api/maps/v2/conversion/convert) call. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteAsync(string conversionId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ConversionClient.Delete");
            scope.Start();
            try
            {
                return await RestClient.DeleteAsync(conversionId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        /// This API allows the caller to delete any data conversions created previously using the [Conversion API](https://docs.microsoft.com/en-us/rest/api/maps/conversion/convertpreview).
        /// 
        /// ### Submit Delete Request
        /// 
        /// To delete your conversion data you will issue a `DELETE` request where the path will contain the `conversionId` of the data to delete.
        /// 
        /// ### Conversion Delete Response
        /// 
        /// The Conversion Delete API returns a HTTP `204 No Content` response with an empty body, if the converted data resources were deleted successfully.&lt;br&gt;
        /// A HTTP `400 Bad Request` error response will be returned if no resource associated with the passed-in `conversionId` is found.
        /// </summary>
        /// <param name="conversionId"> The conversion id for the content. The `conversionId` must have been obtained from a successful [Conversion API](https://docs.microsoft.com/en-us/rest/api/maps/v2/conversion/convert) call. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response Delete(string conversionId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ConversionClient.Delete");
            scope.Start();
            try
            {
                return RestClient.Delete(conversionId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> This path will be obtained from a call to POST /conversions.  While in progress, an http200 will be returned with no extra headers -  followed by an http200 with Resource-Location header once successfully completed. </summary>
        /// <param name="operationId"> The ID to query the status for the dataset create/import request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<LongRunningOperationResult>> GetOperationAsync(string operationId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ConversionClient.GetOperation");
            scope.Start();
            try
            {
                return await RestClient.GetOperationAsync(operationId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> This path will be obtained from a call to POST /conversions.  While in progress, an http200 will be returned with no extra headers -  followed by an http200 with Resource-Location header once successfully completed. </summary>
        /// <param name="operationId"> The ID to query the status for the dataset create/import request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<LongRunningOperationResult> GetOperation(string operationId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("ConversionClient.GetOperation");
            scope.Start();
            try
            {
                return RestClient.GetOperation(operationId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        /// This API allows the caller to fetch a list of all successful data conversions submitted previously using the [Conversion API](https://docs.microsoft.com/en-us/rest/api/maps/conversion/convertpreview).
        /// 
        /// ### Submit List Request
        /// 
        /// To list all successful conversions you will issue a `GET` request with no additional parameters.
        /// 
        /// ### List Data Response
        /// 
        /// The Conversion List API returns the complete list of all conversion details in `json` format.&lt;br&gt;
        /// 
        /// Here is a sample response returning the details of two successful conversion requests:
        /// 
        /// &lt;br&gt;
        /// 
        /// ```json
        /// {
        ///     &quot;conversions&quot;:
        ///     [
        ///         {
        ///             &quot;conversionId&quot;: &quot;54398242-ea6c-1f31-4fa6-79b1ae0fc24d&quot;,
        ///             &quot;udid&quot;: &quot;31838736-8b84-11ea-bc55-0242ac130003&quot;,
        ///             &quot;created&quot;: &quot;5/19/2020 9:00:00 AM +00:00&quot;,
        ///             &quot;description&quot;: &quot;User provided description.&quot;,
        ///             &quot;featureCounts&quot;: {
        ///                 &quot;DIR&quot;: 1,
        ///                 &quot;LVL&quot;: 3,
        ///                 &quot;FCL&quot;: 1,
        ///                 &quot;UNIT&quot;: 150,
        ///                 &quot;CTG&quot;: 8,
        ///                 &quot;AEL&quot;: 0,
        ///                 &quot;OPN&quot;: 10
        ///             }
        ///         },
        ///         {
        ///             &quot;conversionId&quot;: &quot;2acf7d32-8b84-11ea-bc55-0242ac130003&quot;,
        ///             &quot;udid&quot;: &quot;1214bc58-8b84-11ea-bc55-0242ac1300039&quot;,
        ///             &quot;created&quot;: &quot;5/19/2020 9:00:00 AM +00:00&quot;,
        ///             &quot;description&quot;: &quot;User provided description.&quot;,
        ///             &quot;featureCounts&quot;: {
        ///                 &quot;DIR&quot;: 1,
        ///                 &quot;LVL&quot;: 3,
        ///                 &quot;FCL&quot;: 1,
        ///                 &quot;UNIT&quot;: 150,
        ///                 &quot;CTG&quot;: 8,
        ///                 &quot;AEL&quot;: 0,
        ///                 &quot;OPN&quot;: 10
        ///             }
        ///         }
        ///     ]
        /// }
        /// ```
        /// 
        /// &lt;br&gt;.
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual AsyncPageable<ConversionListDetailInfo> ListAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<ConversionListDetailInfo>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ConversionClient.List");
                scope.Start();
                try
                {
                    var response = await RestClient.ListAsync(cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Conversions, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ConversionListDetailInfo>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ConversionClient.List");
                scope.Start();
                try
                {
                    var response = await RestClient.ListNextPageAsync(nextLink, cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Conversions, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        /// This API allows the caller to fetch a list of all successful data conversions submitted previously using the [Conversion API](https://docs.microsoft.com/en-us/rest/api/maps/conversion/convertpreview).
        /// 
        /// ### Submit List Request
        /// 
        /// To list all successful conversions you will issue a `GET` request with no additional parameters.
        /// 
        /// ### List Data Response
        /// 
        /// The Conversion List API returns the complete list of all conversion details in `json` format.&lt;br&gt;
        /// 
        /// Here is a sample response returning the details of two successful conversion requests:
        /// 
        /// &lt;br&gt;
        /// 
        /// ```json
        /// {
        ///     &quot;conversions&quot;:
        ///     [
        ///         {
        ///             &quot;conversionId&quot;: &quot;54398242-ea6c-1f31-4fa6-79b1ae0fc24d&quot;,
        ///             &quot;udid&quot;: &quot;31838736-8b84-11ea-bc55-0242ac130003&quot;,
        ///             &quot;created&quot;: &quot;5/19/2020 9:00:00 AM +00:00&quot;,
        ///             &quot;description&quot;: &quot;User provided description.&quot;,
        ///             &quot;featureCounts&quot;: {
        ///                 &quot;DIR&quot;: 1,
        ///                 &quot;LVL&quot;: 3,
        ///                 &quot;FCL&quot;: 1,
        ///                 &quot;UNIT&quot;: 150,
        ///                 &quot;CTG&quot;: 8,
        ///                 &quot;AEL&quot;: 0,
        ///                 &quot;OPN&quot;: 10
        ///             }
        ///         },
        ///         {
        ///             &quot;conversionId&quot;: &quot;2acf7d32-8b84-11ea-bc55-0242ac130003&quot;,
        ///             &quot;udid&quot;: &quot;1214bc58-8b84-11ea-bc55-0242ac1300039&quot;,
        ///             &quot;created&quot;: &quot;5/19/2020 9:00:00 AM +00:00&quot;,
        ///             &quot;description&quot;: &quot;User provided description.&quot;,
        ///             &quot;featureCounts&quot;: {
        ///                 &quot;DIR&quot;: 1,
        ///                 &quot;LVL&quot;: 3,
        ///                 &quot;FCL&quot;: 1,
        ///                 &quot;UNIT&quot;: 150,
        ///                 &quot;CTG&quot;: 8,
        ///                 &quot;AEL&quot;: 0,
        ///                 &quot;OPN&quot;: 10
        ///             }
        ///         }
        ///     ]
        /// }
        /// ```
        /// 
        /// &lt;br&gt;.
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Pageable<ConversionListDetailInfo> List(CancellationToken cancellationToken = default)
        {
            Page<ConversionListDetailInfo> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ConversionClient.List");
                scope.Start();
                try
                {
                    var response = RestClient.List(cancellationToken);
                    return Page.FromValues(response.Value.Conversions, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ConversionListDetailInfo> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ConversionClient.List");
                scope.Start();
                try
                {
                    var response = RestClient.ListNextPage(nextLink, cancellationToken);
                    return Page.FromValues(response.Value.Conversions, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        /// The Conversion API lets the caller import a set of DWG design files as a zipped [Drawing Package](https://aka.ms/am-drawing-package) into Azure Maps. The [Drawing Package](https://aka.ms/am-drawing-package) should first be uploaded using the [Azure Maps Data Service](https://docs.microsoft.com/rest/api/maps/data). Once uploaded, use the `udid` returned by the [Data Upload API](https://docs.microsoft.com/rest/api/maps/data/uploadpreview) to call this Conversion API.
        /// 
        /// ## Convert DWG package
        /// 
        /// The Conversion API performs a [long-running request](https://aka.ms/am-creator-lrt-v2).
        /// 
        /// ## Debug DWG package issues
        /// 
        /// 
        /// During the Conversion process, if there are any issues with the DWG package [errors and warnings](https://aka.ms/am-conversion-errors) are provided in the response along with a *diagnostic package* to visualize and diagnose these issues. In case any issues are encountered with your DWG package, the Conversion operation status process as detailed [here](https://aka.ms/am-creator-lrt-v2) returns the location of the *diagnostic package* that can be downloaded by the caller to help them visualize and diagnose these issues. The *diagnostic package* location can be found in the properties section of the conversion operation status response and looks like the following:
        /// 
        /// ```json
        /// {
        ///     &quot;properties&quot;: {
        ///         &quot;diagnosticPackageLocation&quot;: &quot;https://us.atlas.microsoft.com/mapdata/{DiagnosticPackageId}?api-version=1.0&quot;
        ///     }
        /// }
        /// ```
        /// 
        /// The *diagnostic package* can be downloaded by executing a `HTTP GET` request on the `diagnosticPackageLocation`.
        /// For more details on how to use the tool to visualize and diagnose all the errors and warnings see [Drawing Error Visualizer](https://aka.ms/am-drawing-errors-visualizer). &lt;br&gt;
        /// 
        /// A conversion operation will be marked as *success* if there are zero or more warnings but will be marked as *failed* if any errors are encountered.
        /// </summary>
        /// <param name="udid"> The unique data id for the content. The `udid` must have been obtained from a successful [Data Upload API](https://docs.microsoft.com/en-us/rest/api/maps/data%20v2/uploadpreview) call. </param>
        /// <param name="outputOntology"> Output ontology version. &quot;facility-2.0&quot; is the only supported value at this time. Please refer to this [article](https://docs.microsoft.com/en-us/azure/azure-maps/creator-facility-ontology) for more information about Azure Maps Creator ontologies. </param>
        /// <param name="description"> User provided description of the content being converted. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="udid"/> or <paramref name="outputOntology"/> is null. </exception>
        public virtual async Task<ConversionConvertOperation> StartConvertAsync(string udid, string outputOntology, string description = null, CancellationToken cancellationToken = default)
        {
            if (udid == null)
            {
                throw new ArgumentNullException(nameof(udid));
            }
            if (outputOntology == null)
            {
                throw new ArgumentNullException(nameof(outputOntology));
            }

            using var scope = _clientDiagnostics.CreateScope("ConversionClient.StartConvert");
            scope.Start();
            try
            {
                var originalResponse = await RestClient.ConvertAsync(udid, outputOntology, description, cancellationToken).ConfigureAwait(false);
                return new ConversionConvertOperation(_clientDiagnostics, _pipeline, RestClient.CreateConvertRequest(udid, outputOntology, description).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        /// The Conversion API lets the caller import a set of DWG design files as a zipped [Drawing Package](https://aka.ms/am-drawing-package) into Azure Maps. The [Drawing Package](https://aka.ms/am-drawing-package) should first be uploaded using the [Azure Maps Data Service](https://docs.microsoft.com/rest/api/maps/data). Once uploaded, use the `udid` returned by the [Data Upload API](https://docs.microsoft.com/rest/api/maps/data/uploadpreview) to call this Conversion API.
        /// 
        /// ## Convert DWG package
        /// 
        /// The Conversion API performs a [long-running request](https://aka.ms/am-creator-lrt-v2).
        /// 
        /// ## Debug DWG package issues
        /// 
        /// 
        /// During the Conversion process, if there are any issues with the DWG package [errors and warnings](https://aka.ms/am-conversion-errors) are provided in the response along with a *diagnostic package* to visualize and diagnose these issues. In case any issues are encountered with your DWG package, the Conversion operation status process as detailed [here](https://aka.ms/am-creator-lrt-v2) returns the location of the *diagnostic package* that can be downloaded by the caller to help them visualize and diagnose these issues. The *diagnostic package* location can be found in the properties section of the conversion operation status response and looks like the following:
        /// 
        /// ```json
        /// {
        ///     &quot;properties&quot;: {
        ///         &quot;diagnosticPackageLocation&quot;: &quot;https://us.atlas.microsoft.com/mapdata/{DiagnosticPackageId}?api-version=1.0&quot;
        ///     }
        /// }
        /// ```
        /// 
        /// The *diagnostic package* can be downloaded by executing a `HTTP GET` request on the `diagnosticPackageLocation`.
        /// For more details on how to use the tool to visualize and diagnose all the errors and warnings see [Drawing Error Visualizer](https://aka.ms/am-drawing-errors-visualizer). &lt;br&gt;
        /// 
        /// A conversion operation will be marked as *success* if there are zero or more warnings but will be marked as *failed* if any errors are encountered.
        /// </summary>
        /// <param name="udid"> The unique data id for the content. The `udid` must have been obtained from a successful [Data Upload API](https://docs.microsoft.com/en-us/rest/api/maps/data%20v2/uploadpreview) call. </param>
        /// <param name="outputOntology"> Output ontology version. &quot;facility-2.0&quot; is the only supported value at this time. Please refer to this [article](https://docs.microsoft.com/en-us/azure/azure-maps/creator-facility-ontology) for more information about Azure Maps Creator ontologies. </param>
        /// <param name="description"> User provided description of the content being converted. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="udid"/> or <paramref name="outputOntology"/> is null. </exception>
        public virtual ConversionConvertOperation StartConvert(string udid, string outputOntology, string description = null, CancellationToken cancellationToken = default)
        {
            if (udid == null)
            {
                throw new ArgumentNullException(nameof(udid));
            }
            if (outputOntology == null)
            {
                throw new ArgumentNullException(nameof(outputOntology));
            }

            using var scope = _clientDiagnostics.CreateScope("ConversionClient.StartConvert");
            scope.Start();
            try
            {
                var originalResponse = RestClient.Convert(udid, outputOntology, description, cancellationToken);
                return new ConversionConvertOperation(_clientDiagnostics, _pipeline, RestClient.CreateConvertRequest(udid, outputOntology, description).Request, originalResponse);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
