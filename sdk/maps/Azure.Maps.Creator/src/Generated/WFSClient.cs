// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.Maps.Creator.Models;

namespace Azure.Maps.Creator
{
    /// <summary> The WFS service client. </summary>
    public partial class WFSClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        internal WFSRestClient RestClient { get; }

        /// <summary> Initializes a new instance of WFSClient for mocking. </summary>
        protected WFSClient()
        {
        }

        /// <summary> Initializes a new instance of WFSClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="xMsClientId"> Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public WFSClient(TokenCredential credential, Geography? geography = default, string xMsClientId = null, CreatorClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new CreatorClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            string[] scopes = { "https://atlas.microsoft.com/.default" };
            _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
            RestClient = new WFSRestClient(_clientDiagnostics, _pipeline, geography, xMsClientId);
        }

        /// <summary> Initializes a new instance of WFSClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="xMsClientId"> Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public WFSClient(AzureKeyCredential credential, Geography? geography = default, string xMsClientId = null, CreatorClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new CreatorClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            _pipeline = HttpPipelineBuilder.Build(options, new AzureKeyCredentialPolicy(credential, "subscription-key"));
            RestClient = new WFSRestClient(_clientDiagnostics, _pipeline, geography, xMsClientId);
        }

        /// <summary> Initializes a new instance of WFSClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="xMsClientId"> Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public WFSClient(TokenCredential credential, Geography? geography = default, string xMsClientId = null, CreatorClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new CreatorClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            string[] scopes = { "https://atlas.microsoft.com/.default" };
            _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
            RestClient = new WFSRestClient(_clientDiagnostics, _pipeline, geography, xMsClientId);
        }

        /// <summary> Initializes a new instance of WFSClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="xMsClientId"> Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public WFSClient(AzureKeyCredential credential, Geography? geography = default, string xMsClientId = null, CreatorClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new CreatorClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            _pipeline = HttpPipelineBuilder.Build(options, new AzureKeyCredentialPolicy(credential, "subscription-key"));
            RestClient = new WFSRestClient(_clientDiagnostics, _pipeline, geography, xMsClientId);
        }

        /// <summary> Initializes a new instance of WFSClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="xMsClientId"> Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public WFSClient(TokenCredential credential, Geography? geography = default, string xMsClientId = null, CreatorClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new CreatorClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            string[] scopes = { "https://atlas.microsoft.com/.default" };
            _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
            RestClient = new WFSRestClient(_clientDiagnostics, _pipeline, geography, xMsClientId);
        }

        /// <summary> Initializes a new instance of WFSClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="xMsClientId"> Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public WFSClient(AzureKeyCredential credential, Geography? geography = default, string xMsClientId = null, CreatorClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new CreatorClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            _pipeline = HttpPipelineBuilder.Build(options, new AzureKeyCredentialPolicy(credential, "subscription-key"));
            RestClient = new WFSRestClient(_clientDiagnostics, _pipeline, geography, xMsClientId);
        }

        /// <summary> Initializes a new instance of WFSClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="xMsClientId"> Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public WFSClient(TokenCredential credential, Geography? geography = default, string xMsClientId = null, CreatorClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new CreatorClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            string[] scopes = { "https://atlas.microsoft.com/.default" };
            _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
            RestClient = new WFSRestClient(_clientDiagnostics, _pipeline, geography, xMsClientId);
        }

        /// <summary> Initializes a new instance of WFSClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="xMsClientId"> Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public WFSClient(AzureKeyCredential credential, Geography? geography = default, string xMsClientId = null, CreatorClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new CreatorClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            _pipeline = HttpPipelineBuilder.Build(options, new AzureKeyCredentialPolicy(credential, "subscription-key"));
            RestClient = new WFSRestClient(_clientDiagnostics, _pipeline, geography, xMsClientId);
        }

        /// <summary> Initializes a new instance of WFSClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="xMsClientId"> Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public WFSClient(TokenCredential credential, Geography? geography = default, string xMsClientId = null, CreatorClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new CreatorClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            string[] scopes = { "https://atlas.microsoft.com/.default" };
            _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
            RestClient = new WFSRestClient(_clientDiagnostics, _pipeline, geography, xMsClientId);
        }

        /// <summary> Initializes a new instance of WFSClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="xMsClientId"> Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public WFSClient(AzureKeyCredential credential, Geography? geography = default, string xMsClientId = null, CreatorClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new CreatorClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            _pipeline = HttpPipelineBuilder.Build(options, new AzureKeyCredentialPolicy(credential, "subscription-key"));
            RestClient = new WFSRestClient(_clientDiagnostics, _pipeline, geography, xMsClientId);
        }

        /// <summary> Initializes a new instance of WFSClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="xMsClientId"> Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public WFSClient(TokenCredential credential, Geography? geography = default, string xMsClientId = null, CreatorClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new CreatorClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            string[] scopes = { "https://atlas.microsoft.com/.default" };
            _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
            RestClient = new WFSRestClient(_clientDiagnostics, _pipeline, geography, xMsClientId);
        }

        /// <summary> Initializes a new instance of WFSClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="xMsClientId"> Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public WFSClient(AzureKeyCredential credential, Geography? geography = default, string xMsClientId = null, CreatorClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new CreatorClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            _pipeline = HttpPipelineBuilder.Build(options, new AzureKeyCredentialPolicy(credential, "subscription-key"));
            RestClient = new WFSRestClient(_clientDiagnostics, _pipeline, geography, xMsClientId);
        }

        /// <summary> Initializes a new instance of WFSClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="xMsClientId"> Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public WFSClient(TokenCredential credential, Geography? geography = default, string xMsClientId = null, CreatorClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new CreatorClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            string[] scopes = { "https://atlas.microsoft.com/.default" };
            _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
            RestClient = new WFSRestClient(_clientDiagnostics, _pipeline, geography, xMsClientId);
        }

        /// <summary> Initializes a new instance of WFSClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="xMsClientId"> Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public WFSClient(AzureKeyCredential credential, Geography? geography = default, string xMsClientId = null, CreatorClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new CreatorClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            _pipeline = HttpPipelineBuilder.Build(options, new AzureKeyCredentialPolicy(credential, "subscription-key"));
            RestClient = new WFSRestClient(_clientDiagnostics, _pipeline, geography, xMsClientId);
        }

        /// <summary> Initializes a new instance of WFSClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="xMsClientId"> Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public WFSClient(TokenCredential credential, Geography? geography = default, string xMsClientId = null, CreatorClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new CreatorClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            string[] scopes = { "https://atlas.microsoft.com/.default" };
            _pipeline = HttpPipelineBuilder.Build(options, new BearerTokenAuthenticationPolicy(credential, scopes));
            RestClient = new WFSRestClient(_clientDiagnostics, _pipeline, geography, xMsClientId);
        }

        /// <summary> Initializes a new instance of WFSClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="xMsClientId"> Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public WFSClient(AzureKeyCredential credential, Geography? geography = default, string xMsClientId = null, CreatorClientOptions options = null)
        {
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }
            geography ??= Geography.Us;

            options ??= new CreatorClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            _pipeline = HttpPipelineBuilder.Build(options, new AzureKeyCredentialPolicy(credential, "subscription-key"));
            RestClient = new WFSRestClient(_clientDiagnostics, _pipeline, geography, xMsClientId);
        }

        /// <summary> Initializes a new instance of WFSClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        /// <param name="xMsClientId"> Specifies which account is intended for usage in conjunction with the Azure AD security model.  It represents a unique ID for the Azure Maps account and can be retrieved from the Azure Maps management  plane Account API. To use Azure AD security in Azure Maps see the following [articles](https://aka.ms/amauthdetails) for guidance. </param>
        internal WFSClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Geography? geography = default, string xMsClientId = null)
        {
            RestClient = new WFSRestClient(clientDiagnostics, pipeline, geography, xMsClientId);
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        ///  The Web Feature Service (WFS) API is part of  Creator. WFS API follows the [Open Geospatial Consortium API standard for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview).
        /// A dataset consists of multiple feature collections. A feature collection is a collection of features of a similar type, based on a common schema.
        /// The Get Landing Page API provides links to the API definition, the Conformance statements  and the metadata about the feature data in this dataset.
        /// </summary>
        /// <param name="datasetId"> The identifier for the dataset to query from. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<LandingPageResponse>> GetLandingPageAsync(string datasetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WFSClient.GetLandingPage");
            scope.Start();
            try
            {
                return await RestClient.GetLandingPageAsync(datasetId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        ///  The Web Feature Service (WFS) API is part of  Creator. WFS API follows the [Open Geospatial Consortium API standard for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview).
        /// A dataset consists of multiple feature collections. A feature collection is a collection of features of a similar type, based on a common schema.
        /// The Get Landing Page API provides links to the API definition, the Conformance statements  and the metadata about the feature data in this dataset.
        /// </summary>
        /// <param name="datasetId"> The identifier for the dataset to query from. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<LandingPageResponse> GetLandingPage(string datasetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WFSClient.GetLandingPage");
            scope.Start();
            try
            {
                return RestClient.GetLandingPage(datasetId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        /// The Web Feature Service (WFS) API is part of  Creator. WFS API follows the [Open Geospatial Consortium API standard for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview).
        /// A dataset consists of multiple feature collections. A feature collection is a collection of features of a similar type, based on a common schema.
        /// The Get Requirements Classes lists all requirements classes specified in the standard that the server conforms to.
        /// </summary>
        /// <param name="datasetId"> The identifier for the dataset to query from. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ConformanceResponse>> GetConformanceAsync(string datasetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WFSClient.GetConformance");
            scope.Start();
            try
            {
                return await RestClient.GetConformanceAsync(datasetId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        /// The Web Feature Service (WFS) API is part of  Creator. WFS API follows the [Open Geospatial Consortium API standard for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview).
        /// A dataset consists of multiple feature collections. A feature collection is a collection of features of a similar type, based on a common schema.
        /// The Get Requirements Classes lists all requirements classes specified in the standard that the server conforms to.
        /// </summary>
        /// <param name="datasetId"> The identifier for the dataset to query from. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ConformanceResponse> GetConformance(string datasetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WFSClient.GetConformance");
            scope.Start();
            try
            {
                return RestClient.GetConformance(datasetId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        ///  The Web Feature Service (WFS) API is part of  Creator. WFS API follows the [Open Geospatial Consortium API standard for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview).
        /// A dataset consists of multiple feature collections. A feature collection is a collection of features of a similar type, based on a common schema.
        /// The Collections Description API provides descriptions of all the collections in a given dataset.
        /// </summary>
        /// <param name="datasetId"> The identifier for the dataset to query from. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<CollectionsResponse>> GetCollectionsAsync(string datasetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WFSClient.GetCollections");
            scope.Start();
            try
            {
                return await RestClient.GetCollectionsAsync(datasetId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        ///  The Web Feature Service (WFS) API is part of  Creator. WFS API follows the [Open Geospatial Consortium API standard for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview).
        /// A dataset consists of multiple feature collections. A feature collection is a collection of features of a similar type, based on a common schema.
        /// The Collections Description API provides descriptions of all the collections in a given dataset.
        /// </summary>
        /// <param name="datasetId"> The identifier for the dataset to query from. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<CollectionsResponse> GetCollections(string datasetId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WFSClient.GetCollections");
            scope.Start();
            try
            {
                return RestClient.GetCollections(datasetId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        ///  The Web Feature Service (WFS) API is part of  Creator. WFS API follows the [Open Geospatial Consortium API standard for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview).
        /// A dataset consists of multiple feature collections. A feature collection is a collection of features of a similar type, based on a common schema.
        /// 
        /// The Collection Description API provides the description of a given collection. It includes the links to the operations that can be performed on the collection.
        /// </summary>
        /// <param name="datasetId"> The identifier for the dataset to query from. </param>
        /// <param name="collectionId"> Identifier (name) of a specific collection. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<CollectionInfo>> GetCollectionAsync(string datasetId, string collectionId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WFSClient.GetCollection");
            scope.Start();
            try
            {
                return await RestClient.GetCollectionAsync(datasetId, collectionId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        ///  The Web Feature Service (WFS) API is part of  Creator. WFS API follows the [Open Geospatial Consortium API standard for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview).
        /// A dataset consists of multiple feature collections. A feature collection is a collection of features of a similar type, based on a common schema.
        /// 
        /// The Collection Description API provides the description of a given collection. It includes the links to the operations that can be performed on the collection.
        /// </summary>
        /// <param name="datasetId"> The identifier for the dataset to query from. </param>
        /// <param name="collectionId"> Identifier (name) of a specific collection. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<CollectionInfo> GetCollection(string datasetId, string collectionId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WFSClient.GetCollection");
            scope.Start();
            try
            {
                return RestClient.GetCollection(datasetId, collectionId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        ///  [This](https://docs.microsoft.com/en-us/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator. WFS API follows the [Open Geospatial Consortium API standard for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview).
        /// A dataset consists of multiple feature collections. A feature collection is a collection of features of a similar type, based on a common schema.
        /// 
        /// The Collection Definition API provides the detailed data model of a given collection.
        /// </summary>
        /// <param name="datasetId"> The identifier for the dataset to query from. </param>
        /// <param name="collectionId"> Identifier (name) of a specific collection. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<CollectionDefinitionResponse>> GetCollectionDefinitionAsync(string datasetId, string collectionId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WFSClient.GetCollectionDefinition");
            scope.Start();
            try
            {
                return await RestClient.GetCollectionDefinitionAsync(datasetId, collectionId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        ///  [This](https://docs.microsoft.com/en-us/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator. WFS API follows the [Open Geospatial Consortium API standard for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview).
        /// A dataset consists of multiple feature collections. A feature collection is a collection of features of a similar type, based on a common schema.
        /// 
        /// The Collection Definition API provides the detailed data model of a given collection.
        /// </summary>
        /// <param name="datasetId"> The identifier for the dataset to query from. </param>
        /// <param name="collectionId"> Identifier (name) of a specific collection. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<CollectionDefinitionResponse> GetCollectionDefinition(string datasetId, string collectionId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WFSClient.GetCollectionDefinition");
            scope.Start();
            try
            {
                return RestClient.GetCollectionDefinition(datasetId, collectionId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        ///  The Web Feature Service (WFS) API is part of  Creator. WFS API follows the [Open Geospatial Consortium API standard for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview).
        /// A dataset consists of multiple feature collections. A feature collection is a collection of features of a similar type, based on a common schema.
        /// The Get Features API returns the list of features in the given collection.
        /// </summary>
        /// <param name="datasetId"> The identifier for the dataset to query from. </param>
        /// <param name="collectionId"> Identifier (name) of a specific collection. </param>
        /// <param name="limit">
        /// The optional limit parameter limits the number of features that are presented in the response document.
        /// Only features that are on the first level of the collection in the response document are counted. Nested objects contained within the explicitly requested features shall not be counted.
        /// * Minimum = 1 * Maximum = 50 * Default = 10.
        /// </param>
        /// <param name="bbox">
        /// Only features that have a geometry that intersects the supplied bounding box are selected.
        /// * Lower left corner, coordinate axis 1 * Lower left corner, coordinate axis 2 * Upper right corner, coordinate axis 1 * Upper right corner, coordinate axis 2
        /// The coordinate reference system of the values is WGS84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84) unless a different coordinate reference system is specified in the parameter `bbox-crs`.
        /// For WGS84 longitude/latitude the values are in most cases the sequence of minimum longitude, minimum latitude, maximum longitude and maximum latitude. However, in cases where the box spans the antimeridian the first value (west-most box edge) is larger than the third value (east-most box edge).
        /// </param>
        /// <param name="filter">
        /// Filter expression to search for features with specific property values in a given collection. Only feature properties of scalar type and equals operator are supported.
        /// This is a special parameter where the parameter name is a case sensitive property name. The scheme for this parameter is {property name}={property value}. Unless &quot;filter&quot; is one of the property names in the collection, &quot;filter&quot; should not be used as a parameter name. To search for features with &quot;name&quot; property value &quot;21N13&quot;, use &quot;name=21N13&quot;.
        /// Multiple filters are supported and should be represented as multiple query parameters. E.g., &lt;property1&gt;=&lt;value1&gt;&amp;&lt;property2&gt;=&lt;value2&gt; String values are case sensitive.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ExtendedGeoJsonFeatureCollection>> GetFeaturesAsync(string datasetId, string collectionId, int? limit = null, string bbox = null, string filter = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WFSClient.GetFeatures");
            scope.Start();
            try
            {
                return await RestClient.GetFeaturesAsync(datasetId, collectionId, limit, bbox, filter, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        ///  The Web Feature Service (WFS) API is part of  Creator. WFS API follows the [Open Geospatial Consortium API standard for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview).
        /// A dataset consists of multiple feature collections. A feature collection is a collection of features of a similar type, based on a common schema.
        /// The Get Features API returns the list of features in the given collection.
        /// </summary>
        /// <param name="datasetId"> The identifier for the dataset to query from. </param>
        /// <param name="collectionId"> Identifier (name) of a specific collection. </param>
        /// <param name="limit">
        /// The optional limit parameter limits the number of features that are presented in the response document.
        /// Only features that are on the first level of the collection in the response document are counted. Nested objects contained within the explicitly requested features shall not be counted.
        /// * Minimum = 1 * Maximum = 50 * Default = 10.
        /// </param>
        /// <param name="bbox">
        /// Only features that have a geometry that intersects the supplied bounding box are selected.
        /// * Lower left corner, coordinate axis 1 * Lower left corner, coordinate axis 2 * Upper right corner, coordinate axis 1 * Upper right corner, coordinate axis 2
        /// The coordinate reference system of the values is WGS84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84) unless a different coordinate reference system is specified in the parameter `bbox-crs`.
        /// For WGS84 longitude/latitude the values are in most cases the sequence of minimum longitude, minimum latitude, maximum longitude and maximum latitude. However, in cases where the box spans the antimeridian the first value (west-most box edge) is larger than the third value (east-most box edge).
        /// </param>
        /// <param name="filter">
        /// Filter expression to search for features with specific property values in a given collection. Only feature properties of scalar type and equals operator are supported.
        /// This is a special parameter where the parameter name is a case sensitive property name. The scheme for this parameter is {property name}={property value}. Unless &quot;filter&quot; is one of the property names in the collection, &quot;filter&quot; should not be used as a parameter name. To search for features with &quot;name&quot; property value &quot;21N13&quot;, use &quot;name=21N13&quot;.
        /// Multiple filters are supported and should be represented as multiple query parameters. E.g., &lt;property1&gt;=&lt;value1&gt;&amp;&lt;property2&gt;=&lt;value2&gt; String values are case sensitive.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ExtendedGeoJsonFeatureCollection> GetFeatures(string datasetId, string collectionId, int? limit = null, string bbox = null, string filter = null, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WFSClient.GetFeatures");
            scope.Start();
            try
            {
                return RestClient.GetFeatures(datasetId, collectionId, limit, bbox, filter, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        ///  The Web Feature Service (WFS) API is part of  Creator. WFS API follows the [Open Geospatial Consortium API standard for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview).
        /// A dataset consists of multiple feature collections. A feature collection is a collection of features of a similar type, based on a common schema.
        /// The Get Feature API returns the feature identified by the provided id in the given collection.
        /// </summary>
        /// <param name="datasetId"> The identifier for the dataset to query from. </param>
        /// <param name="collectionId"> Identifier (name) of a specific collection. </param>
        /// <param name="featureId"> Local identifier of a specific feature. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<FeatureResponse>> GetFeatureAsync(string datasetId, string collectionId, string featureId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WFSClient.GetFeature");
            scope.Start();
            try
            {
                return await RestClient.GetFeatureAsync(datasetId, collectionId, featureId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        ///  The Web Feature Service (WFS) API is part of  Creator. WFS API follows the [Open Geospatial Consortium API standard for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview).
        /// A dataset consists of multiple feature collections. A feature collection is a collection of features of a similar type, based on a common schema.
        /// The Get Feature API returns the feature identified by the provided id in the given collection.
        /// </summary>
        /// <param name="datasetId"> The identifier for the dataset to query from. </param>
        /// <param name="collectionId"> Identifier (name) of a specific collection. </param>
        /// <param name="featureId"> Local identifier of a specific feature. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<FeatureResponse> GetFeature(string datasetId, string collectionId, string featureId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WFSClient.GetFeature");
            scope.Start();
            try
            {
                return RestClient.GetFeature(datasetId, collectionId, featureId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        ///  The Web Feature Service (WFS) API is part of  Creator. WFS API follows the [Open Geospatial Consortium API standard for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview).
        /// A dataset consists of multiple feature collections. A feature collection is a collection of features of a similar type, based on a common schema.
        /// The Delete Feature API deletes the feature identified by the provided id in the given collection. At this point this API supports only facility features. Deleting a facility feature deletes all the child features of that facility recursively.
        /// </summary>
        /// <param name="datasetId"> The identifier for the dataset to query from. </param>
        /// <param name="collectionId"> Identifier (name) of a specific collection. </param>
        /// <param name="featureId"> Local identifier of a specific feature. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response> DeleteFeatureAsync(string datasetId, string collectionId, string featureId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WFSClient.DeleteFeature");
            scope.Start();
            try
            {
                return await RestClient.DeleteFeatureAsync(datasetId, collectionId, featureId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        ///  The Web Feature Service (WFS) API is part of  Creator. WFS API follows the [Open Geospatial Consortium API standard for Features](http://docs.opengeospatial.org/is/17-069r3/17-069r3.html) to query [Datasets](https://docs.microsoft.com/en-us/rest/api/maps/dataset/createpreview).
        /// A dataset consists of multiple feature collections. A feature collection is a collection of features of a similar type, based on a common schema.
        /// The Delete Feature API deletes the feature identified by the provided id in the given collection. At this point this API supports only facility features. Deleting a facility feature deletes all the child features of that facility recursively.
        /// </summary>
        /// <param name="datasetId"> The identifier for the dataset to query from. </param>
        /// <param name="collectionId"> Identifier (name) of a specific collection. </param>
        /// <param name="featureId"> Local identifier of a specific feature. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response DeleteFeature(string datasetId, string collectionId, string featureId, CancellationToken cancellationToken = default)
        {
            using var scope = _clientDiagnostics.CreateScope("WFSClient.DeleteFeature");
            scope.Start();
            try
            {
                return RestClient.DeleteFeature(datasetId, collectionId, featureId, cancellationToken);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
