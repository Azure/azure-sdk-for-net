// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.Maps.Creator.Models;

namespace Azure.Maps.Creator
{
    internal partial class AliasRestClient
    {
        private Geography? geography;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of AliasRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        public AliasRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Geography? geography = default)
        {
            geography ??= Geography.Us;

            this.geography = geography;
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        internal HttpMessage CreateCreateRequest(string creatorDataItemId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(geography.Value, true);
            uri.AppendRaw(".atlas.microsoft.com", false);
            uri.AppendPath("/aliases", false);
            uri.AppendQuery("api-version", "2.0", true);
            if (creatorDataItemId != null)
            {
                uri.AppendQuery("creatorDataItemId", creatorDataItemId, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        /// This API allows the caller to create an alias. You can also assign the alias during the create request. An alias can reference an ID generated by a creator service, but cannot reference another alias ID.
        /// 
        /// ### Submit Create Request
        /// 
        /// To create your alias, you will use a `POST` request. If you would like to assign the alias during the creation, you will pass the `resourceId` query parameter.
        /// 
        /// ### Create Alias Response
        /// 
        /// The Create API returns a HTTP `201 Created` response with the alias resource in the body.
        /// 
        /// A sample response from creating an alias:
        /// 
        /// ```json
        /// {
        ///   &quot;createdTimestamp&quot;: &quot;2020-02-13T21:19:11.123Z&quot;,
        ///   &quot;aliasId&quot;: &quot;a8a4b8bb-ecf4-fb27-a618-f41721552766&quot;,
        ///   &quot;creatorDataItemId&quot;: &quot;e89aebb9-70a3-8fe1-32bb-1fbd0c725f14&quot;,
        ///   &quot;lastUpdatedTimestamp&quot;: &quot;2020-02-13T21:19:22.123Z&quot;
        /// }
        /// ```.
        /// </summary>
        /// <param name="creatorDataItemId"> The unique id that references a creator data item to be aliased. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<ResponseWithHeaders<AliasesCreateResponse, AliasCreateHeaders>> CreateAsync(string creatorDataItemId = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateCreateRequest(creatorDataItemId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new AliasCreateHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        AliasesCreateResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AliasesCreateResponse.DeserializeAliasesCreateResponse(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        /// This API allows the caller to create an alias. You can also assign the alias during the create request. An alias can reference an ID generated by a creator service, but cannot reference another alias ID.
        /// 
        /// ### Submit Create Request
        /// 
        /// To create your alias, you will use a `POST` request. If you would like to assign the alias during the creation, you will pass the `resourceId` query parameter.
        /// 
        /// ### Create Alias Response
        /// 
        /// The Create API returns a HTTP `201 Created` response with the alias resource in the body.
        /// 
        /// A sample response from creating an alias:
        /// 
        /// ```json
        /// {
        ///   &quot;createdTimestamp&quot;: &quot;2020-02-13T21:19:11.123Z&quot;,
        ///   &quot;aliasId&quot;: &quot;a8a4b8bb-ecf4-fb27-a618-f41721552766&quot;,
        ///   &quot;creatorDataItemId&quot;: &quot;e89aebb9-70a3-8fe1-32bb-1fbd0c725f14&quot;,
        ///   &quot;lastUpdatedTimestamp&quot;: &quot;2020-02-13T21:19:22.123Z&quot;
        /// }
        /// ```.
        /// </summary>
        /// <param name="creatorDataItemId"> The unique id that references a creator data item to be aliased. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public ResponseWithHeaders<AliasesCreateResponse, AliasCreateHeaders> Create(string creatorDataItemId = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateCreateRequest(creatorDataItemId);
            _pipeline.Send(message, cancellationToken);
            var headers = new AliasCreateHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 201:
                    {
                        AliasesCreateResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AliasesCreateResponse.DeserializeAliasesCreateResponse(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(geography.Value, true);
            uri.AppendRaw(".atlas.microsoft.com", false);
            uri.AppendPath("/aliases", false);
            uri.AppendQuery("api-version", "2.0", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        /// This API allows the caller to fetch a list of all previously successfully created aliases.
        /// 
        /// ### Submit List Request
        /// 
        /// To list all your aliases, you will issue a `GET` request with no additional parameters.
        /// 
        /// ### List Data Response
        /// 
        /// The List API returns the complete list of all aliases in `json` format. The response contains the following details for each alias resource:
        ///   &gt; createdTimestamp - The timestamp that the alias was created. Format yyyy-MM-ddTHH:mm:ss.sssZ
        ///   &gt; aliasId - The id for the alias.
        ///   &gt; creatorDataItemId - The id for the creator data item that this alias references (could be null if the alias has not been assigned).
        ///   &gt; lastUpdatedTimestamp - The last time the alias was assigned to a resource. Format yyyy-MM-ddTHH:mm:ss.sssZ
        /// 
        /// A sample response returning 2 alias resources:
        /// 
        /// ```json
        /// {
        ///   &quot;aliases&quot;: [
        ///     {
        ///       &quot;createdTimestamp&quot;: &quot;2020-02-13T21:19:11.123Z&quot;,
        ///       &quot;aliasId&quot;: &quot;a8a4b8bb-ecf4-fb27-a618-f41721552766&quot;,
        ///       &quot;creatorDataItemId&quot;: &quot;e89aebb9-70a3-8fe1-32bb-1fbd0c725f14&quot;,
        ///       &quot;lastUpdatedTimestamp&quot;: &quot;2020-02-13T21:19:22.123Z&quot;
        ///     },
        ///     {
        ///       &quot;createdTimestamp&quot;: &quot;2020-02-18T19:53:33.123Z&quot;,
        ///       &quot;aliasId&quot;: &quot;1856dbfc-7a66-ee5a-bf8d-51dbfe1906f6&quot;,
        ///       &quot;creatorDataItemId&quot;: null,
        ///       &quot;lastUpdatedTimestamp&quot;: &quot;2020-02-18T19:53:33.123Z&quot;
        ///     }
        ///   ]
        /// }
        /// ```.
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<AliasListResponse>> ListAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateListRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AliasListResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AliasListResponse.DeserializeAliasListResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        /// This API allows the caller to fetch a list of all previously successfully created aliases.
        /// 
        /// ### Submit List Request
        /// 
        /// To list all your aliases, you will issue a `GET` request with no additional parameters.
        /// 
        /// ### List Data Response
        /// 
        /// The List API returns the complete list of all aliases in `json` format. The response contains the following details for each alias resource:
        ///   &gt; createdTimestamp - The timestamp that the alias was created. Format yyyy-MM-ddTHH:mm:ss.sssZ
        ///   &gt; aliasId - The id for the alias.
        ///   &gt; creatorDataItemId - The id for the creator data item that this alias references (could be null if the alias has not been assigned).
        ///   &gt; lastUpdatedTimestamp - The last time the alias was assigned to a resource. Format yyyy-MM-ddTHH:mm:ss.sssZ
        /// 
        /// A sample response returning 2 alias resources:
        /// 
        /// ```json
        /// {
        ///   &quot;aliases&quot;: [
        ///     {
        ///       &quot;createdTimestamp&quot;: &quot;2020-02-13T21:19:11.123Z&quot;,
        ///       &quot;aliasId&quot;: &quot;a8a4b8bb-ecf4-fb27-a618-f41721552766&quot;,
        ///       &quot;creatorDataItemId&quot;: &quot;e89aebb9-70a3-8fe1-32bb-1fbd0c725f14&quot;,
        ///       &quot;lastUpdatedTimestamp&quot;: &quot;2020-02-13T21:19:22.123Z&quot;
        ///     },
        ///     {
        ///       &quot;createdTimestamp&quot;: &quot;2020-02-18T19:53:33.123Z&quot;,
        ///       &quot;aliasId&quot;: &quot;1856dbfc-7a66-ee5a-bf8d-51dbfe1906f6&quot;,
        ///       &quot;creatorDataItemId&quot;: null,
        ///       &quot;lastUpdatedTimestamp&quot;: &quot;2020-02-18T19:53:33.123Z&quot;
        ///     }
        ///   ]
        /// }
        /// ```.
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<AliasListResponse> List(CancellationToken cancellationToken = default)
        {
            using var message = CreateListRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AliasListResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AliasListResponse.DeserializeAliasListResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateAssignRequest(string aliasId, string creatorDataItemId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(geography.Value, true);
            uri.AppendRaw(".atlas.microsoft.com", false);
            uri.AppendPath("/aliases/", false);
            uri.AppendPath(aliasId, true);
            uri.AppendQuery("api-version", "2.0", true);
            uri.AppendQuery("creatorDataItemId", creatorDataItemId, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        /// This API allows the caller to assign an alias to reference a resource.
        /// 
        /// ### Submit Assign Request
        /// 
        /// To assign your alias to a resource, you will use a `PUT` request with the `aliasId` in the path and the `creatorDataItemId` passed as a query parameter.
        /// 
        /// ### Assign Alias Response
        /// 
        /// The Assign API returns a HTTP `200 OK` response with the updated alias resource in the body, if the alias was assigned successfully. A sample of the assign response is
        /// 
        /// ```json
        /// {
        ///   &quot;createdTimestamp&quot;: &quot;2020-02-13T21:19:11.123Z&quot;,
        ///   &quot;aliasId&quot;: &quot;a8a4b8bb-ecf4-fb27-a618-f41721552766&quot;,
        ///   &quot;creatorDataItemId&quot;: &quot;e89aebb9-70a3-8fe1-32bb-1fbd0c725f14&quot;,
        ///   &quot;lastUpdatedTimestamp&quot;: &quot;2020-02-13T21:19:22.123Z&quot;
        /// }
        /// ```.
        /// </summary>
        /// <param name="aliasId"> The unique id that references an existing alias. </param>
        /// <param name="creatorDataItemId"> The unique id that references a creator data item to be aliased. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="aliasId"/> or <paramref name="creatorDataItemId"/> is null. </exception>
        public async Task<Response<AliasListItem>> AssignAsync(string aliasId, string creatorDataItemId, CancellationToken cancellationToken = default)
        {
            if (aliasId == null)
            {
                throw new ArgumentNullException(nameof(aliasId));
            }
            if (creatorDataItemId == null)
            {
                throw new ArgumentNullException(nameof(creatorDataItemId));
            }

            using var message = CreateAssignRequest(aliasId, creatorDataItemId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AliasListItem value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AliasListItem.DeserializeAliasListItem(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        /// This API allows the caller to assign an alias to reference a resource.
        /// 
        /// ### Submit Assign Request
        /// 
        /// To assign your alias to a resource, you will use a `PUT` request with the `aliasId` in the path and the `creatorDataItemId` passed as a query parameter.
        /// 
        /// ### Assign Alias Response
        /// 
        /// The Assign API returns a HTTP `200 OK` response with the updated alias resource in the body, if the alias was assigned successfully. A sample of the assign response is
        /// 
        /// ```json
        /// {
        ///   &quot;createdTimestamp&quot;: &quot;2020-02-13T21:19:11.123Z&quot;,
        ///   &quot;aliasId&quot;: &quot;a8a4b8bb-ecf4-fb27-a618-f41721552766&quot;,
        ///   &quot;creatorDataItemId&quot;: &quot;e89aebb9-70a3-8fe1-32bb-1fbd0c725f14&quot;,
        ///   &quot;lastUpdatedTimestamp&quot;: &quot;2020-02-13T21:19:22.123Z&quot;
        /// }
        /// ```.
        /// </summary>
        /// <param name="aliasId"> The unique id that references an existing alias. </param>
        /// <param name="creatorDataItemId"> The unique id that references a creator data item to be aliased. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="aliasId"/> or <paramref name="creatorDataItemId"/> is null. </exception>
        public Response<AliasListItem> Assign(string aliasId, string creatorDataItemId, CancellationToken cancellationToken = default)
        {
            if (aliasId == null)
            {
                throw new ArgumentNullException(nameof(aliasId));
            }
            if (creatorDataItemId == null)
            {
                throw new ArgumentNullException(nameof(creatorDataItemId));
            }

            using var message = CreateAssignRequest(aliasId, creatorDataItemId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AliasListItem value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AliasListItem.DeserializeAliasListItem(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteRequest(string aliasId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(geography.Value, true);
            uri.AppendRaw(".atlas.microsoft.com", false);
            uri.AppendPath("/aliases/", false);
            uri.AppendPath(aliasId, true);
            uri.AppendQuery("api-version", "2.0", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        /// This API allows the caller to delete a previously created alias. You can also use this API to delete old/unused aliases to create space for new content.This API does not delete the references resource, only the alias referencing the resource.
        /// 
        /// ### Submit Delete Request
        /// 
        /// To delete your alias you will issue a `DELETE` request where the path will contain the `aliasId` of the alias to delete.
        /// 
        /// ### Delete Alias Response
        /// 
        /// The Delete API returns a HTTP `204 No Content` response with an empty body, if the alias was deleted successfully.
        /// </summary>
        /// <param name="aliasId"> The unique id that references an existing alias. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="aliasId"/> is null. </exception>
        public async Task<Response> DeleteAsync(string aliasId, CancellationToken cancellationToken = default)
        {
            if (aliasId == null)
            {
                throw new ArgumentNullException(nameof(aliasId));
            }

            using var message = CreateDeleteRequest(aliasId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        /// This API allows the caller to delete a previously created alias. You can also use this API to delete old/unused aliases to create space for new content.This API does not delete the references resource, only the alias referencing the resource.
        /// 
        /// ### Submit Delete Request
        /// 
        /// To delete your alias you will issue a `DELETE` request where the path will contain the `aliasId` of the alias to delete.
        /// 
        /// ### Delete Alias Response
        /// 
        /// The Delete API returns a HTTP `204 No Content` response with an empty body, if the alias was deleted successfully.
        /// </summary>
        /// <param name="aliasId"> The unique id that references an existing alias. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="aliasId"/> is null. </exception>
        public Response Delete(string aliasId, CancellationToken cancellationToken = default)
        {
            if (aliasId == null)
            {
                throw new ArgumentNullException(nameof(aliasId));
            }

            using var message = CreateDeleteRequest(aliasId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetDetailsRequest(string aliasId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(geography.Value, true);
            uri.AppendRaw(".atlas.microsoft.com", false);
            uri.AppendPath("/aliases/", false);
            uri.AppendPath(aliasId, true);
            uri.AppendQuery("api-version", "2.0", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        /// This API allows the caller to fetch the details of a previously created alias.
        /// 
        /// ### Submit Get Details Request
        /// 
        /// To get the details of your alias, you will issue a `GET` request with the `aliasId` in the path.
        /// 
        /// ### Get Details Response
        /// 
        /// The Get Details API returns the previously created alias in `json` format. The response contains the following details for the alias resource:
        ///   &gt; createdTimestamp - The timestamp that the alias was created.
        ///   &gt; aliasId - The id for the alias.
        ///   &gt; creatorDataItemId - The id for the creator data item that this alias references (could be null if the alias has not been assigned).
        ///   &gt; lastUpdatedTimestamp - The last time the alias was assigned to a resource.
        /// 
        /// Here&apos;s a sample response:
        /// ```json
        /// {
        ///   &quot;createdTimestamp&quot;: &quot;2020-02-13T21:19:11.123Z&quot;,
        ///   &quot;aliasId&quot;: &quot;a8a4b8bb-ecf4-fb27-a618-f41721552766&quot;,
        ///   &quot;creatorDataItemId&quot;: &quot;e89aebb9-70a3-8fe1-32bb-1fbd0c725f14&quot;,
        ///   &quot;lastUpdatedTimestamp&quot;: &quot;2020-02-13T21:19:22.123Z&quot;
        /// }
        /// ```.
        /// </summary>
        /// <param name="aliasId"> The unique id that references an existing alias. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="aliasId"/> is null. </exception>
        public async Task<Response<AliasListItem>> GetDetailsAsync(string aliasId, CancellationToken cancellationToken = default)
        {
            if (aliasId == null)
            {
                throw new ArgumentNullException(nameof(aliasId));
            }

            using var message = CreateGetDetailsRequest(aliasId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AliasListItem value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AliasListItem.DeserializeAliasListItem(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        /// This API allows the caller to fetch the details of a previously created alias.
        /// 
        /// ### Submit Get Details Request
        /// 
        /// To get the details of your alias, you will issue a `GET` request with the `aliasId` in the path.
        /// 
        /// ### Get Details Response
        /// 
        /// The Get Details API returns the previously created alias in `json` format. The response contains the following details for the alias resource:
        ///   &gt; createdTimestamp - The timestamp that the alias was created.
        ///   &gt; aliasId - The id for the alias.
        ///   &gt; creatorDataItemId - The id for the creator data item that this alias references (could be null if the alias has not been assigned).
        ///   &gt; lastUpdatedTimestamp - The last time the alias was assigned to a resource.
        /// 
        /// Here&apos;s a sample response:
        /// ```json
        /// {
        ///   &quot;createdTimestamp&quot;: &quot;2020-02-13T21:19:11.123Z&quot;,
        ///   &quot;aliasId&quot;: &quot;a8a4b8bb-ecf4-fb27-a618-f41721552766&quot;,
        ///   &quot;creatorDataItemId&quot;: &quot;e89aebb9-70a3-8fe1-32bb-1fbd0c725f14&quot;,
        ///   &quot;lastUpdatedTimestamp&quot;: &quot;2020-02-13T21:19:22.123Z&quot;
        /// }
        /// ```.
        /// </summary>
        /// <param name="aliasId"> The unique id that references an existing alias. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="aliasId"/> is null. </exception>
        public Response<AliasListItem> GetDetails(string aliasId, CancellationToken cancellationToken = default)
        {
            if (aliasId == null)
            {
                throw new ArgumentNullException(nameof(aliasId));
            }

            using var message = CreateGetDetailsRequest(aliasId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AliasListItem value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AliasListItem.DeserializeAliasListItem(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListNextPageRequest(string nextLink)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(geography.Value, true);
            uri.AppendRaw(".atlas.microsoft.com", false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        /// This API allows the caller to fetch a list of all previously successfully created aliases.
        /// 
        /// ### Submit List Request
        /// 
        /// To list all your aliases, you will issue a `GET` request with no additional parameters.
        /// 
        /// ### List Data Response
        /// 
        /// The List API returns the complete list of all aliases in `json` format. The response contains the following details for each alias resource:
        ///   &gt; createdTimestamp - The timestamp that the alias was created. Format yyyy-MM-ddTHH:mm:ss.sssZ
        ///   &gt; aliasId - The id for the alias.
        ///   &gt; creatorDataItemId - The id for the creator data item that this alias references (could be null if the alias has not been assigned).
        ///   &gt; lastUpdatedTimestamp - The last time the alias was assigned to a resource. Format yyyy-MM-ddTHH:mm:ss.sssZ
        /// 
        /// A sample response returning 2 alias resources:
        /// 
        /// ```json
        /// {
        ///   &quot;aliases&quot;: [
        ///     {
        ///       &quot;createdTimestamp&quot;: &quot;2020-02-13T21:19:11.123Z&quot;,
        ///       &quot;aliasId&quot;: &quot;a8a4b8bb-ecf4-fb27-a618-f41721552766&quot;,
        ///       &quot;creatorDataItemId&quot;: &quot;e89aebb9-70a3-8fe1-32bb-1fbd0c725f14&quot;,
        ///       &quot;lastUpdatedTimestamp&quot;: &quot;2020-02-13T21:19:22.123Z&quot;
        ///     },
        ///     {
        ///       &quot;createdTimestamp&quot;: &quot;2020-02-18T19:53:33.123Z&quot;,
        ///       &quot;aliasId&quot;: &quot;1856dbfc-7a66-ee5a-bf8d-51dbfe1906f6&quot;,
        ///       &quot;creatorDataItemId&quot;: null,
        ///       &quot;lastUpdatedTimestamp&quot;: &quot;2020-02-18T19:53:33.123Z&quot;
        ///     }
        ///   ]
        /// }
        /// ```.
        /// </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public async Task<Response<AliasListResponse>> ListNextPageAsync(string nextLink, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateListNextPageRequest(nextLink);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AliasListResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AliasListResponse.DeserializeAliasListResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        /// This API allows the caller to fetch a list of all previously successfully created aliases.
        /// 
        /// ### Submit List Request
        /// 
        /// To list all your aliases, you will issue a `GET` request with no additional parameters.
        /// 
        /// ### List Data Response
        /// 
        /// The List API returns the complete list of all aliases in `json` format. The response contains the following details for each alias resource:
        ///   &gt; createdTimestamp - The timestamp that the alias was created. Format yyyy-MM-ddTHH:mm:ss.sssZ
        ///   &gt; aliasId - The id for the alias.
        ///   &gt; creatorDataItemId - The id for the creator data item that this alias references (could be null if the alias has not been assigned).
        ///   &gt; lastUpdatedTimestamp - The last time the alias was assigned to a resource. Format yyyy-MM-ddTHH:mm:ss.sssZ
        /// 
        /// A sample response returning 2 alias resources:
        /// 
        /// ```json
        /// {
        ///   &quot;aliases&quot;: [
        ///     {
        ///       &quot;createdTimestamp&quot;: &quot;2020-02-13T21:19:11.123Z&quot;,
        ///       &quot;aliasId&quot;: &quot;a8a4b8bb-ecf4-fb27-a618-f41721552766&quot;,
        ///       &quot;creatorDataItemId&quot;: &quot;e89aebb9-70a3-8fe1-32bb-1fbd0c725f14&quot;,
        ///       &quot;lastUpdatedTimestamp&quot;: &quot;2020-02-13T21:19:22.123Z&quot;
        ///     },
        ///     {
        ///       &quot;createdTimestamp&quot;: &quot;2020-02-18T19:53:33.123Z&quot;,
        ///       &quot;aliasId&quot;: &quot;1856dbfc-7a66-ee5a-bf8d-51dbfe1906f6&quot;,
        ///       &quot;creatorDataItemId&quot;: null,
        ///       &quot;lastUpdatedTimestamp&quot;: &quot;2020-02-18T19:53:33.123Z&quot;
        ///     }
        ///   ]
        /// }
        /// ```.
        /// </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public Response<AliasListResponse> ListNextPage(string nextLink, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateListNextPageRequest(nextLink);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AliasListResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AliasListResponse.DeserializeAliasListResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
