// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.Maps.Creator.Models;

namespace Azure.Maps.Creator
{
    internal partial class DatasetRestClient
    {
        private Geography? geography;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of DatasetRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="geography"> This parameter specifies where the Azure Maps Creator resource is located.  Valid values are us and eu. </param>
        public DatasetRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Geography? geography = default)
        {
            geography ??= Geography.Us;

            this.geography = geography;
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        internal HttpMessage CreateCreateRequest(string conversionId, string datasetId, string descriptionDataset)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(geography.Value, true);
            uri.AppendRaw(".atlas.microsoft.com", false);
            uri.AppendPath("/datasets", false);
            uri.AppendQuery("api-version", "2.0", true);
            uri.AppendQuery("conversionId", conversionId, true);
            if (datasetId != null)
            {
                uri.AppendQuery("datasetId", datasetId, true);
            }
            if (descriptionDataset != null)
            {
                uri.AppendQuery("description", descriptionDataset, true);
            }
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        ///  This API allows the caller to create a dataset from data that was uploaded to the Azure Maps Data Service and converted using the Azure Maps Conversion Service.
        /// 
        /// You can use this API in a scenario like uploading a DWG zip package for a building, converting the zip package using the Azure Maps Conversion Service, and creating a dataset from the converted zip package. The created dataset can be used to create tilesets using the Azure Maps Tileset Service and can be queried via the Azure Maps WFS Service.
        /// 
        /// ### Submit Create Request
        /// 
        /// To create your dataset, you will use a `POST` request where the `conversionId` query parameter is an ID that represents the converted DWG zip package, the `datasetId` parameter will be the ID of a previously created dataset to append with the current dataset and, optionally, the `description` query parameter will contain a description (if description is not provided a default description will be given).
        /// 
        /// The Create API is a [long-running request](https://aka.ms/am-creator-lrt-v2).
        /// </summary>
        /// <param name="conversionId"> The unique ID used to create the dataset. The `conversionId` must have been obtained from a successful call to the Conversion Service Convert API and may be provided with multiple query parameters with same name (if more than one is provided). </param>
        /// <param name="datasetId"> The ID for the dataset to append with. The dataset must originate from a previous dataset creation call that matches the datasetId. </param>
        /// <param name="descriptionDataset"> The description to be given to the dataset. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversionId"/> is null. </exception>
        public async Task<ResponseWithHeaders<DatasetCreateHeaders>> CreateAsync(string conversionId, string datasetId = null, string descriptionDataset = null, CancellationToken cancellationToken = default)
        {
            if (conversionId == null)
            {
                throw new ArgumentNullException(nameof(conversionId));
            }

            using var message = CreateCreateRequest(conversionId, datasetId, descriptionDataset);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new DatasetCreateHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                case 202:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        ///  This API allows the caller to create a dataset from data that was uploaded to the Azure Maps Data Service and converted using the Azure Maps Conversion Service.
        /// 
        /// You can use this API in a scenario like uploading a DWG zip package for a building, converting the zip package using the Azure Maps Conversion Service, and creating a dataset from the converted zip package. The created dataset can be used to create tilesets using the Azure Maps Tileset Service and can be queried via the Azure Maps WFS Service.
        /// 
        /// ### Submit Create Request
        /// 
        /// To create your dataset, you will use a `POST` request where the `conversionId` query parameter is an ID that represents the converted DWG zip package, the `datasetId` parameter will be the ID of a previously created dataset to append with the current dataset and, optionally, the `description` query parameter will contain a description (if description is not provided a default description will be given).
        /// 
        /// The Create API is a [long-running request](https://aka.ms/am-creator-lrt-v2).
        /// </summary>
        /// <param name="conversionId"> The unique ID used to create the dataset. The `conversionId` must have been obtained from a successful call to the Conversion Service Convert API and may be provided with multiple query parameters with same name (if more than one is provided). </param>
        /// <param name="datasetId"> The ID for the dataset to append with. The dataset must originate from a previous dataset creation call that matches the datasetId. </param>
        /// <param name="descriptionDataset"> The description to be given to the dataset. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="conversionId"/> is null. </exception>
        public ResponseWithHeaders<DatasetCreateHeaders> Create(string conversionId, string datasetId = null, string descriptionDataset = null, CancellationToken cancellationToken = default)
        {
            if (conversionId == null)
            {
                throw new ArgumentNullException(nameof(conversionId));
            }

            using var message = CreateCreateRequest(conversionId, datasetId, descriptionDataset);
            _pipeline.Send(message, cancellationToken);
            var headers = new DatasetCreateHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                case 202:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListRequest()
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(geography.Value, true);
            uri.AppendRaw(".atlas.microsoft.com", false);
            uri.AppendPath("/datasets", false);
            uri.AppendQuery("api-version", "2.0", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        /// This API allows the caller to fetch a list of all previously successfully created datasets.
        /// 
        /// ### Submit List Request
        /// 
        /// To list all your datasets, you will issue a `GET` request with no additional parameters.
        /// 
        /// 
        /// ### List Data Response
        /// 
        /// The List API returns the complete list of all datasets in `json` format. The response contains the following fields (if they are not null or empty):
        /// &gt; created - The timestamp the dataset was created.
        /// &gt; datasetId - The id for the dataset.
        /// &gt; description - The description for the dataset.
        /// &gt; datasetSources - The source data that was used when the create request was issued.
        /// &gt; ontology - The source [ontology](https://docs.microsoft.com/en-us/azure/azure-maps/creator-facility-ontology) that was used in the conversion service for the input data.&lt;br/&gt;
        /// 
        /// The `datasetSources` describes the source data that was used when the create request was issued and contains the following elements (if they are not null or empty):
        /// 
        /// &gt; conversionIds - The list of `conversionId` (null if none were provided).
        /// &gt; appendDatasetId - The `datasetId` that was used for an append operation (null if none was used).
        /// &gt;featureCounts - The counts for each feature type in the dataset.&lt;br/&gt;
        /// 
        /// Here&apos;s a sample response returning the `timestamp`, `datasetId`, `description`, `datasetSources`, and `ontology` of 3 dataset resources:
        /// 
        /// 
        /// ```json
        /// {
        ///   &quot;datasets&quot;: [
        ///     {
        ///       &quot;timestamp&quot;: &quot;2020-01-01T22:50:48.123Z&quot;,
        ///       &quot;datasetId&quot;: &quot;f6495f62-94f8-0ec2-c252-45626f82fcb2&quot;,
        ///       &quot;description&quot;: &quot;Some description or comment for the dataset.&quot;,
        ///       &quot;datasetSources&quot;: {
        ///         &quot;conversionIds&quot;: [
        ///           &quot;15d21452-c9bb-27b6-5e79-743ca5c3205d&quot;
        ///         ],      },
        ///       &quot;ontology&quot;: &quot;facility-2.0&quot;,
        ///       &quot;featureCounts&quot;: {
        ///         &quot;directoryInfo&quot;: 2,
        ///         &quot;category&quot;: 10,
        ///         &quot;facility&quot;: 1,
        ///         &quot;level&quot;: 3,
        ///         &quot;unit&quot;: 183,
        ///         &quot;zone&quot;: 3,
        ///         &quot;verticalPenetration&quot;: 6,
        ///         &quot;opening&quot;: 48,
        ///         &quot;areaElement&quot;: 108
        ///       }
        ///     },
        ///     {
        ///       &quot;timestamp&quot;: &quot;2020-01-01T22:57:53.123Z&quot;,
        ///       &quot;datasetId&quot;: &quot;8b1288fa-1958-4a2b-b68e-13a7i5af7d7c&quot;,
        ///       &quot;description&quot;: &quot;Create from upload &apos;0c1288fa-2058-4a1b-b68d-13a5f5af7d7c&apos;.&quot;,
        ///       &quot;datasetSources&quot;: {
        ///         &quot;conversionIds&quot;: [
        ///           &quot;0c1288fa-2058-4a1b-b68d-13a5f5af7d7c&quot;
        ///         ],
        ///         &quot;appendDatasetId&quot;: &quot;46d1edb6-d29e-4786-9589-dbd4efd7a977&quot;
        ///       },
        ///       &quot;ontology&quot;: &quot;facility-2.0&quot;,
        ///       &quot;featureCounts&quot;: {
        ///         &quot;directoryInfo&quot;: 2,
        ///         &quot;category&quot;: 10,
        ///         &quot;facility&quot;: 1,
        ///         &quot;level&quot;: 3,
        ///         &quot;unit&quot;: 183,
        ///         &quot;zone&quot;: 3,
        ///         &quot;verticalPenetration&quot;: 6,
        ///         &quot;opening&quot;: 48,
        ///         &quot;areaElement&quot;: 108
        ///       }
        ///     }
        ///   ]
        /// }
        /// ```.
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<DatasetListResponse>> ListAsync(CancellationToken cancellationToken = default)
        {
            using var message = CreateListRequest();
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DatasetListResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DatasetListResponse.DeserializeDatasetListResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        /// This API allows the caller to fetch a list of all previously successfully created datasets.
        /// 
        /// ### Submit List Request
        /// 
        /// To list all your datasets, you will issue a `GET` request with no additional parameters.
        /// 
        /// 
        /// ### List Data Response
        /// 
        /// The List API returns the complete list of all datasets in `json` format. The response contains the following fields (if they are not null or empty):
        /// &gt; created - The timestamp the dataset was created.
        /// &gt; datasetId - The id for the dataset.
        /// &gt; description - The description for the dataset.
        /// &gt; datasetSources - The source data that was used when the create request was issued.
        /// &gt; ontology - The source [ontology](https://docs.microsoft.com/en-us/azure/azure-maps/creator-facility-ontology) that was used in the conversion service for the input data.&lt;br/&gt;
        /// 
        /// The `datasetSources` describes the source data that was used when the create request was issued and contains the following elements (if they are not null or empty):
        /// 
        /// &gt; conversionIds - The list of `conversionId` (null if none were provided).
        /// &gt; appendDatasetId - The `datasetId` that was used for an append operation (null if none was used).
        /// &gt;featureCounts - The counts for each feature type in the dataset.&lt;br/&gt;
        /// 
        /// Here&apos;s a sample response returning the `timestamp`, `datasetId`, `description`, `datasetSources`, and `ontology` of 3 dataset resources:
        /// 
        /// 
        /// ```json
        /// {
        ///   &quot;datasets&quot;: [
        ///     {
        ///       &quot;timestamp&quot;: &quot;2020-01-01T22:50:48.123Z&quot;,
        ///       &quot;datasetId&quot;: &quot;f6495f62-94f8-0ec2-c252-45626f82fcb2&quot;,
        ///       &quot;description&quot;: &quot;Some description or comment for the dataset.&quot;,
        ///       &quot;datasetSources&quot;: {
        ///         &quot;conversionIds&quot;: [
        ///           &quot;15d21452-c9bb-27b6-5e79-743ca5c3205d&quot;
        ///         ],      },
        ///       &quot;ontology&quot;: &quot;facility-2.0&quot;,
        ///       &quot;featureCounts&quot;: {
        ///         &quot;directoryInfo&quot;: 2,
        ///         &quot;category&quot;: 10,
        ///         &quot;facility&quot;: 1,
        ///         &quot;level&quot;: 3,
        ///         &quot;unit&quot;: 183,
        ///         &quot;zone&quot;: 3,
        ///         &quot;verticalPenetration&quot;: 6,
        ///         &quot;opening&quot;: 48,
        ///         &quot;areaElement&quot;: 108
        ///       }
        ///     },
        ///     {
        ///       &quot;timestamp&quot;: &quot;2020-01-01T22:57:53.123Z&quot;,
        ///       &quot;datasetId&quot;: &quot;8b1288fa-1958-4a2b-b68e-13a7i5af7d7c&quot;,
        ///       &quot;description&quot;: &quot;Create from upload &apos;0c1288fa-2058-4a1b-b68d-13a5f5af7d7c&apos;.&quot;,
        ///       &quot;datasetSources&quot;: {
        ///         &quot;conversionIds&quot;: [
        ///           &quot;0c1288fa-2058-4a1b-b68d-13a5f5af7d7c&quot;
        ///         ],
        ///         &quot;appendDatasetId&quot;: &quot;46d1edb6-d29e-4786-9589-dbd4efd7a977&quot;
        ///       },
        ///       &quot;ontology&quot;: &quot;facility-2.0&quot;,
        ///       &quot;featureCounts&quot;: {
        ///         &quot;directoryInfo&quot;: 2,
        ///         &quot;category&quot;: 10,
        ///         &quot;facility&quot;: 1,
        ///         &quot;level&quot;: 3,
        ///         &quot;unit&quot;: 183,
        ///         &quot;zone&quot;: 3,
        ///         &quot;verticalPenetration&quot;: 6,
        ///         &quot;opening&quot;: 48,
        ///         &quot;areaElement&quot;: 108
        ///       }
        ///     }
        ///   ]
        /// }
        /// ```.
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<DatasetListResponse> List(CancellationToken cancellationToken = default)
        {
            using var message = CreateListRequest();
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DatasetListResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DatasetListResponse.DeserializeDatasetListResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetRequest(string datasetId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(geography.Value, true);
            uri.AppendRaw(".atlas.microsoft.com", false);
            uri.AppendPath("/datasets/", false);
            uri.AppendPath(datasetId, true);
            uri.AppendQuery("api-version", "2.0", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        /// This API allows the caller to fetch a previously successfully created dataset.
        /// 
        /// ### Submit Get Details Request
        /// 
        /// To get the details for a previously created dataset, you will issue a `GET` request with the `datasetId` in the path.
        /// 
        /// ### Get Details Response
        /// 
        /// The Get Details API returns the details for a dataset in `json` format. The response contains the following fields (if they are not null or empty):
        /// &gt; created - The timestamp the dataset was created.
        /// &gt; datasetId - The id for the dataset.
        /// &gt; description - The description for the dataset.
        /// &gt; datasetSources - The source data that was used when the create request was issued.
        /// &gt; ontology - The source [ontology](https://docs.microsoft.com/en-us/azure/azure-maps/creator-facility-ontology) that was used in the conversion service for the input data.&lt;br/&gt;
        /// 
        /// The `datasetSources` describes the source data that was used when the create request was issued and contains the following elements (if they are not null or empty):
        /// &gt; conversionIds - The list of `conversionId` (null if none were provided).
        /// &gt; appendDatasetId - The `datasetId` that was used for an append operation (null if none was used).
        /// &gt;featureCounts - The counts for each feature type in the dataset.&lt;br/&gt;
        /// 
        /// Here&apos;s a sample response returning the `timestamp`, `datasetId`, `description`, `datasetSources`, and `ontology` of a dataset resource:
        /// 
        /// ```json
        /// {
        ///    &quot;timestamp&quot;: &quot;2020-01-01T22:50:48.123Z&quot;,
        ///    &quot;datasetId&quot;: &quot;f6495f62-94f8-0ec2-c252-45626f82fcb2&quot;,
        ///    &quot;description&quot;: &quot;Some description or comment for the dataset.&quot;,
        ///    &quot;datasetSources&quot;: {
        ///      &quot;conversionIds&quot;: [
        ///        &quot;15d21452-c9bb-27b6-5e79-743ca5c3205d&quot;
        ///      ],
        ///    },
        ///    &quot;ontology&quot;: &quot;facility-2.0&quot;,
        ///    &quot;featureCounts&quot;: {
        ///      &quot;directoryInfo&quot;: 2,
        ///      &quot;category&quot;: 10,
        ///      &quot;facility&quot;: 1,
        ///      &quot;level&quot;: 3,
        ///      &quot;unit&quot;: 183,
        ///      &quot;zone&quot;: 3,
        ///      &quot;verticalPenetration&quot;: 6,
        ///      &quot;opening&quot;: 48,
        ///      &quot;areaElement&quot;: 108
        ///    }
        ///  }
        /// ```.
        /// </summary>
        /// <param name="datasetId"> The identifier for the dataset to query from. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        public async Task<Response<DatasetDetailInfo>> GetAsync(string datasetId, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var message = CreateGetRequest(datasetId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DatasetDetailInfo value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DatasetDetailInfo.DeserializeDatasetDetailInfo(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        /// This API allows the caller to fetch a previously successfully created dataset.
        /// 
        /// ### Submit Get Details Request
        /// 
        /// To get the details for a previously created dataset, you will issue a `GET` request with the `datasetId` in the path.
        /// 
        /// ### Get Details Response
        /// 
        /// The Get Details API returns the details for a dataset in `json` format. The response contains the following fields (if they are not null or empty):
        /// &gt; created - The timestamp the dataset was created.
        /// &gt; datasetId - The id for the dataset.
        /// &gt; description - The description for the dataset.
        /// &gt; datasetSources - The source data that was used when the create request was issued.
        /// &gt; ontology - The source [ontology](https://docs.microsoft.com/en-us/azure/azure-maps/creator-facility-ontology) that was used in the conversion service for the input data.&lt;br/&gt;
        /// 
        /// The `datasetSources` describes the source data that was used when the create request was issued and contains the following elements (if they are not null or empty):
        /// &gt; conversionIds - The list of `conversionId` (null if none were provided).
        /// &gt; appendDatasetId - The `datasetId` that was used for an append operation (null if none was used).
        /// &gt;featureCounts - The counts for each feature type in the dataset.&lt;br/&gt;
        /// 
        /// Here&apos;s a sample response returning the `timestamp`, `datasetId`, `description`, `datasetSources`, and `ontology` of a dataset resource:
        /// 
        /// ```json
        /// {
        ///    &quot;timestamp&quot;: &quot;2020-01-01T22:50:48.123Z&quot;,
        ///    &quot;datasetId&quot;: &quot;f6495f62-94f8-0ec2-c252-45626f82fcb2&quot;,
        ///    &quot;description&quot;: &quot;Some description or comment for the dataset.&quot;,
        ///    &quot;datasetSources&quot;: {
        ///      &quot;conversionIds&quot;: [
        ///        &quot;15d21452-c9bb-27b6-5e79-743ca5c3205d&quot;
        ///      ],
        ///    },
        ///    &quot;ontology&quot;: &quot;facility-2.0&quot;,
        ///    &quot;featureCounts&quot;: {
        ///      &quot;directoryInfo&quot;: 2,
        ///      &quot;category&quot;: 10,
        ///      &quot;facility&quot;: 1,
        ///      &quot;level&quot;: 3,
        ///      &quot;unit&quot;: 183,
        ///      &quot;zone&quot;: 3,
        ///      &quot;verticalPenetration&quot;: 6,
        ///      &quot;opening&quot;: 48,
        ///      &quot;areaElement&quot;: 108
        ///    }
        ///  }
        /// ```.
        /// </summary>
        /// <param name="datasetId"> The identifier for the dataset to query from. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        public Response<DatasetDetailInfo> Get(string datasetId, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var message = CreateGetRequest(datasetId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DatasetDetailInfo value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DatasetDetailInfo.DeserializeDatasetDetailInfo(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteRequest(string datasetId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(geography.Value, true);
            uri.AppendRaw(".atlas.microsoft.com", false);
            uri.AppendPath("/datasets/", false);
            uri.AppendPath(datasetId, true);
            uri.AppendQuery("api-version", "2.0", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        /// You can also use this API to delete old/unused datasets to create space for new Creator content.
        /// 
        /// ### Submit Delete Request
        /// 
        /// To delete your content you will issue a `DELETE` request where the path will contain the `datasetId` of the dataset to delete.
        /// </summary>
        /// <param name="datasetId"> The identifier for the dataset to query from. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        public async Task<Response> DeleteAsync(string datasetId, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var message = CreateDeleteRequest(datasetId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        /// You can also use this API to delete old/unused datasets to create space for new Creator content.
        /// 
        /// ### Submit Delete Request
        /// 
        /// To delete your content you will issue a `DELETE` request where the path will contain the `datasetId` of the dataset to delete.
        /// </summary>
        /// <param name="datasetId"> The identifier for the dataset to query from. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasetId"/> is null. </exception>
        public Response Delete(string datasetId, CancellationToken cancellationToken = default)
        {
            if (datasetId == null)
            {
                throw new ArgumentNullException(nameof(datasetId));
            }

            using var message = CreateDeleteRequest(datasetId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetOperationRequest(string operationId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(geography.Value, true);
            uri.AppendRaw(".atlas.microsoft.com", false);
            uri.AppendPath("/datasets/operations/", false);
            uri.AppendPath(operationId, true);
            uri.AppendQuery("api-version", "2.0", true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// This API allows the caller to view the current progress of a dataset operation and the path is obtained from a call to the Create API.
        /// 
        /// ### Submit Operations Request
        /// 
        /// To view the current progress of a dataset operation, you will use a `GET` request where the `operationId` given the path is the ID that represents the operation.
        /// 
        /// ### Operation Response
        /// 
        /// While in progress, a `200-OK` http status code will be returned with no extra headers. If the operation succeeds, a `200-OK` http status code with Resource-Location header will be returned.
        /// </summary>
        /// <param name="operationId"> The ID to query the status for the dataset create/import request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/> is null. </exception>
        public async Task<ResponseWithHeaders<LongRunningOperationResult, DatasetGetOperationHeaders>> GetOperationAsync(string operationId, CancellationToken cancellationToken = default)
        {
            if (operationId == null)
            {
                throw new ArgumentNullException(nameof(operationId));
            }

            using var message = CreateGetOperationRequest(operationId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new DatasetGetOperationHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        LongRunningOperationResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = LongRunningOperationResult.DeserializeLongRunningOperationResult(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// This API allows the caller to view the current progress of a dataset operation and the path is obtained from a call to the Create API.
        /// 
        /// ### Submit Operations Request
        /// 
        /// To view the current progress of a dataset operation, you will use a `GET` request where the `operationId` given the path is the ID that represents the operation.
        /// 
        /// ### Operation Response
        /// 
        /// While in progress, a `200-OK` http status code will be returned with no extra headers. If the operation succeeds, a `200-OK` http status code with Resource-Location header will be returned.
        /// </summary>
        /// <param name="operationId"> The ID to query the status for the dataset create/import request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/> is null. </exception>
        public ResponseWithHeaders<LongRunningOperationResult, DatasetGetOperationHeaders> GetOperation(string operationId, CancellationToken cancellationToken = default)
        {
            if (operationId == null)
            {
                throw new ArgumentNullException(nameof(operationId));
            }

            using var message = CreateGetOperationRequest(operationId);
            _pipeline.Send(message, cancellationToken);
            var headers = new DatasetGetOperationHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        LongRunningOperationResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = LongRunningOperationResult.DeserializeLongRunningOperationResult(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListNextPageRequest(string nextLink)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw("https://", false);
            uri.AppendRaw(geography.Value, true);
            uri.AppendRaw(".atlas.microsoft.com", false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        /// This API allows the caller to fetch a list of all previously successfully created datasets.
        /// 
        /// ### Submit List Request
        /// 
        /// To list all your datasets, you will issue a `GET` request with no additional parameters.
        /// 
        /// 
        /// ### List Data Response
        /// 
        /// The List API returns the complete list of all datasets in `json` format. The response contains the following fields (if they are not null or empty):
        /// &gt; created - The timestamp the dataset was created.
        /// &gt; datasetId - The id for the dataset.
        /// &gt; description - The description for the dataset.
        /// &gt; datasetSources - The source data that was used when the create request was issued.
        /// &gt; ontology - The source [ontology](https://docs.microsoft.com/en-us/azure/azure-maps/creator-facility-ontology) that was used in the conversion service for the input data.&lt;br/&gt;
        /// 
        /// The `datasetSources` describes the source data that was used when the create request was issued and contains the following elements (if they are not null or empty):
        /// 
        /// &gt; conversionIds - The list of `conversionId` (null if none were provided).
        /// &gt; appendDatasetId - The `datasetId` that was used for an append operation (null if none was used).
        /// &gt;featureCounts - The counts for each feature type in the dataset.&lt;br/&gt;
        /// 
        /// Here&apos;s a sample response returning the `timestamp`, `datasetId`, `description`, `datasetSources`, and `ontology` of 3 dataset resources:
        /// 
        /// 
        /// ```json
        /// {
        ///   &quot;datasets&quot;: [
        ///     {
        ///       &quot;timestamp&quot;: &quot;2020-01-01T22:50:48.123Z&quot;,
        ///       &quot;datasetId&quot;: &quot;f6495f62-94f8-0ec2-c252-45626f82fcb2&quot;,
        ///       &quot;description&quot;: &quot;Some description or comment for the dataset.&quot;,
        ///       &quot;datasetSources&quot;: {
        ///         &quot;conversionIds&quot;: [
        ///           &quot;15d21452-c9bb-27b6-5e79-743ca5c3205d&quot;
        ///         ],      },
        ///       &quot;ontology&quot;: &quot;facility-2.0&quot;,
        ///       &quot;featureCounts&quot;: {
        ///         &quot;directoryInfo&quot;: 2,
        ///         &quot;category&quot;: 10,
        ///         &quot;facility&quot;: 1,
        ///         &quot;level&quot;: 3,
        ///         &quot;unit&quot;: 183,
        ///         &quot;zone&quot;: 3,
        ///         &quot;verticalPenetration&quot;: 6,
        ///         &quot;opening&quot;: 48,
        ///         &quot;areaElement&quot;: 108
        ///       }
        ///     },
        ///     {
        ///       &quot;timestamp&quot;: &quot;2020-01-01T22:57:53.123Z&quot;,
        ///       &quot;datasetId&quot;: &quot;8b1288fa-1958-4a2b-b68e-13a7i5af7d7c&quot;,
        ///       &quot;description&quot;: &quot;Create from upload &apos;0c1288fa-2058-4a1b-b68d-13a5f5af7d7c&apos;.&quot;,
        ///       &quot;datasetSources&quot;: {
        ///         &quot;conversionIds&quot;: [
        ///           &quot;0c1288fa-2058-4a1b-b68d-13a5f5af7d7c&quot;
        ///         ],
        ///         &quot;appendDatasetId&quot;: &quot;46d1edb6-d29e-4786-9589-dbd4efd7a977&quot;
        ///       },
        ///       &quot;ontology&quot;: &quot;facility-2.0&quot;,
        ///       &quot;featureCounts&quot;: {
        ///         &quot;directoryInfo&quot;: 2,
        ///         &quot;category&quot;: 10,
        ///         &quot;facility&quot;: 1,
        ///         &quot;level&quot;: 3,
        ///         &quot;unit&quot;: 183,
        ///         &quot;zone&quot;: 3,
        ///         &quot;verticalPenetration&quot;: 6,
        ///         &quot;opening&quot;: 48,
        ///         &quot;areaElement&quot;: 108
        ///       }
        ///     }
        ///   ]
        /// }
        /// ```.
        /// </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public async Task<Response<DatasetListResponse>> ListNextPageAsync(string nextLink, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateListNextPageRequest(nextLink);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DatasetListResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = DatasetListResponse.DeserializeDatasetListResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// **Applies to:** see pricing [tiers](https://aka.ms/AzureMapsPricingTier).
        /// 
        /// Creator makes it possible to develop applications based on your private indoor map data using Azure Maps API and SDK. [This](https://docs.microsoft.com/azure/azure-maps/creator-indoor-maps) article introduces concepts and tools that apply to Azure Maps Creator.
        /// 
        /// This API allows the caller to fetch a list of all previously successfully created datasets.
        /// 
        /// ### Submit List Request
        /// 
        /// To list all your datasets, you will issue a `GET` request with no additional parameters.
        /// 
        /// 
        /// ### List Data Response
        /// 
        /// The List API returns the complete list of all datasets in `json` format. The response contains the following fields (if they are not null or empty):
        /// &gt; created - The timestamp the dataset was created.
        /// &gt; datasetId - The id for the dataset.
        /// &gt; description - The description for the dataset.
        /// &gt; datasetSources - The source data that was used when the create request was issued.
        /// &gt; ontology - The source [ontology](https://docs.microsoft.com/en-us/azure/azure-maps/creator-facility-ontology) that was used in the conversion service for the input data.&lt;br/&gt;
        /// 
        /// The `datasetSources` describes the source data that was used when the create request was issued and contains the following elements (if they are not null or empty):
        /// 
        /// &gt; conversionIds - The list of `conversionId` (null if none were provided).
        /// &gt; appendDatasetId - The `datasetId` that was used for an append operation (null if none was used).
        /// &gt;featureCounts - The counts for each feature type in the dataset.&lt;br/&gt;
        /// 
        /// Here&apos;s a sample response returning the `timestamp`, `datasetId`, `description`, `datasetSources`, and `ontology` of 3 dataset resources:
        /// 
        /// 
        /// ```json
        /// {
        ///   &quot;datasets&quot;: [
        ///     {
        ///       &quot;timestamp&quot;: &quot;2020-01-01T22:50:48.123Z&quot;,
        ///       &quot;datasetId&quot;: &quot;f6495f62-94f8-0ec2-c252-45626f82fcb2&quot;,
        ///       &quot;description&quot;: &quot;Some description or comment for the dataset.&quot;,
        ///       &quot;datasetSources&quot;: {
        ///         &quot;conversionIds&quot;: [
        ///           &quot;15d21452-c9bb-27b6-5e79-743ca5c3205d&quot;
        ///         ],      },
        ///       &quot;ontology&quot;: &quot;facility-2.0&quot;,
        ///       &quot;featureCounts&quot;: {
        ///         &quot;directoryInfo&quot;: 2,
        ///         &quot;category&quot;: 10,
        ///         &quot;facility&quot;: 1,
        ///         &quot;level&quot;: 3,
        ///         &quot;unit&quot;: 183,
        ///         &quot;zone&quot;: 3,
        ///         &quot;verticalPenetration&quot;: 6,
        ///         &quot;opening&quot;: 48,
        ///         &quot;areaElement&quot;: 108
        ///       }
        ///     },
        ///     {
        ///       &quot;timestamp&quot;: &quot;2020-01-01T22:57:53.123Z&quot;,
        ///       &quot;datasetId&quot;: &quot;8b1288fa-1958-4a2b-b68e-13a7i5af7d7c&quot;,
        ///       &quot;description&quot;: &quot;Create from upload &apos;0c1288fa-2058-4a1b-b68d-13a5f5af7d7c&apos;.&quot;,
        ///       &quot;datasetSources&quot;: {
        ///         &quot;conversionIds&quot;: [
        ///           &quot;0c1288fa-2058-4a1b-b68d-13a5f5af7d7c&quot;
        ///         ],
        ///         &quot;appendDatasetId&quot;: &quot;46d1edb6-d29e-4786-9589-dbd4efd7a977&quot;
        ///       },
        ///       &quot;ontology&quot;: &quot;facility-2.0&quot;,
        ///       &quot;featureCounts&quot;: {
        ///         &quot;directoryInfo&quot;: 2,
        ///         &quot;category&quot;: 10,
        ///         &quot;facility&quot;: 1,
        ///         &quot;level&quot;: 3,
        ///         &quot;unit&quot;: 183,
        ///         &quot;zone&quot;: 3,
        ///         &quot;verticalPenetration&quot;: 6,
        ///         &quot;opening&quot;: 48,
        ///         &quot;areaElement&quot;: 108
        ///       }
        ///     }
        ///   ]
        /// }
        /// ```.
        /// </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public Response<DatasetListResponse> ListNextPage(string nextLink, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateListNextPageRequest(nextLink);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        DatasetListResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = DatasetListResponse.DeserializeDatasetListResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
