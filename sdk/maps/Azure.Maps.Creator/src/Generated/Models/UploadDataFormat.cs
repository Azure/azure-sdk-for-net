// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Maps.Creator.Models
{
    /// <summary> The UploadDataFormat. </summary>
    public readonly partial struct UploadDataFormat : IEquatable<UploadDataFormat>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="UploadDataFormat"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public UploadDataFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string GeojsonValue = "geojson";
        private const string ZipValue = "zip";
        private const string DwgzippackageValue = "dwgzippackage";

        /// <summary> [GeoJSON](https://tools.ietf.org/html/rfc7946) is a JSON based geospatial data interchange format. </summary>
        public static UploadDataFormat Geojson { get; } = new UploadDataFormat(GeojsonValue);
        /// <summary> Compressed data format. </summary>
        public static UploadDataFormat Zip { get; } = new UploadDataFormat(ZipValue);
        /// <summary> ZIP package containing DWG file. </summary>
        public static UploadDataFormat Dwgzippackage { get; } = new UploadDataFormat(DwgzippackageValue);
        /// <summary> Determines if two <see cref="UploadDataFormat"/> values are the same. </summary>
        public static bool operator ==(UploadDataFormat left, UploadDataFormat right) => left.Equals(right);
        /// <summary> Determines if two <see cref="UploadDataFormat"/> values are not the same. </summary>
        public static bool operator !=(UploadDataFormat left, UploadDataFormat right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="UploadDataFormat"/>. </summary>
        public static implicit operator UploadDataFormat(string value) => new UploadDataFormat(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is UploadDataFormat other && Equals(other);
        /// <inheritdoc />
        public bool Equals(UploadDataFormat other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
