// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.Maps.Creator.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// An object with a FeatureCollection and a list of distances.  All the
    /// feature's properties should contain `geometryId`, which is used for
    /// identifying the geometry and is case-sensitive.
    /// </summary>
    public partial class BufferRequestBody
    {
        /// <summary>
        /// Initializes a new instance of the BufferRequestBody class.
        /// </summary>
        public BufferRequestBody()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the BufferRequestBody class.
        /// </summary>
        /// <param name="distances">List of the distances to compute the buffer
        /// for, one-to-one per Feature in the collection, or one for all
        /// Features in the collection.</param>
        public BufferRequestBody(GeoJsonFeatureCollection geometries = default(GeoJsonFeatureCollection), IList<double?> distances = default(IList<double?>))
        {
            Geometries = geometries;
            Distances = distances;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "geometries")]
        public GeoJsonFeatureCollection Geometries { get; set; }

        /// <summary>
        /// Gets or sets list of the distances to compute the buffer for,
        /// one-to-one per Feature in the collection, or one for all Features
        /// in the collection.
        /// </summary>
        [JsonProperty(PropertyName = "distances")]
        public IList<double?> Distances { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Geometries != null)
            {
                Geometries.Validate();
            }
        }
    }
}
