// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Maps.Creator.Models
{
    public partial class ExtendedGeoJsonFeatureCollectionData : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(NumberReturned))
            {
                writer.WritePropertyName("numberReturned");
                writer.WriteNumberValue(NumberReturned.Value);
            }
            if (Optional.IsCollectionDefined(Links))
            {
                writer.WritePropertyName("links");
                writer.WriteStartArray();
                foreach (var item in Links)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static ExtendedGeoJsonFeatureCollectionData DeserializeExtendedGeoJsonFeatureCollectionData(JsonElement element)
        {
            Optional<string> ontology = default;
            Optional<int> numberReturned = default;
            Optional<IList<WfsEndpointLink>> links = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("ontology"))
                {
                    ontology = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("numberReturned"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    numberReturned = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("links"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<WfsEndpointLink> array = new List<WfsEndpointLink>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(WfsEndpointLink.DeserializeWfsEndpointLink(item));
                    }
                    links = array;
                    continue;
                }
            }
            return new ExtendedGeoJsonFeatureCollectionData(ontology.Value, Optional.ToNullable(numberReturned), Optional.ToList(links));
        }
    }
}
