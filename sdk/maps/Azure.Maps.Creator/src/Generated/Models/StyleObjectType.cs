// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Maps.Creator.Models
{
    /// <summary> The type of stateset style. </summary>
    public readonly partial struct StyleObjectType : IEquatable<StyleObjectType>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="StyleObjectType"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public StyleObjectType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string BooleanTypeStyleRuleValue = "boolean";
        private const string NumberTypeStyleRuleValue = "number";
        private const string StringTypeStyleRuleValue = "string";

        /// <summary> Boolean type of stateset style. </summary>
        public static StyleObjectType BooleanTypeStyleRule { get; } = new StyleObjectType(BooleanTypeStyleRuleValue);
        /// <summary> Number type of stateset style. </summary>
        public static StyleObjectType NumberTypeStyleRule { get; } = new StyleObjectType(NumberTypeStyleRuleValue);
        /// <summary> String type of stateset style. </summary>
        public static StyleObjectType StringTypeStyleRule { get; } = new StyleObjectType(StringTypeStyleRuleValue);
        /// <summary> Determines if two <see cref="StyleObjectType"/> values are the same. </summary>
        public static bool operator ==(StyleObjectType left, StyleObjectType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="StyleObjectType"/> values are not the same. </summary>
        public static bool operator !=(StyleObjectType left, StyleObjectType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="StyleObjectType"/>. </summary>
        public static implicit operator StyleObjectType(string value) => new StyleObjectType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is StyleObjectType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(StyleObjectType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
