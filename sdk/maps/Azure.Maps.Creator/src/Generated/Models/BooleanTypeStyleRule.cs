// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.Maps.Creator.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The boolean type style rule object.
    /// </summary>
    [Newtonsoft.Json.JsonObject("boolean")]
    public partial class BooleanTypeStyleRule : StyleObject
    {
        /// <summary>
        /// Initializes a new instance of the BooleanTypeStyleRule class.
        /// </summary>
        public BooleanTypeStyleRule()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the BooleanTypeStyleRule class.
        /// </summary>
        /// <param name="keyName">Stateset style key name. Key names are random
        /// strings but they should be unique inside style array.</param>
        /// <param name="rules">Boolean style rules.</param>
        public BooleanTypeStyleRule(string keyName, IList<BooleanRuleObject> rules)
            : base(keyName)
        {
            Rules = rules;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets boolean style rules.
        /// </summary>
        [JsonProperty(PropertyName = "rules")]
        public IList<BooleanRuleObject> Rules { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (Rules == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Rules");
            }
        }
    }
}
