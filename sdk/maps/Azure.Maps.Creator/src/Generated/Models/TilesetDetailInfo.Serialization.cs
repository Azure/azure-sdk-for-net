// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Maps.Creator.Models
{
    public partial class TilesetDetailInfo
    {
        internal static TilesetDetailInfo DeserializeTilesetDetailInfo(JsonElement element)
        {
            Optional<string> tilesetId = default;
            Optional<string> ontology = default;
            Optional<string> datasetId = default;
            Optional<string> description = default;
            Optional<int> minZoom = default;
            Optional<int> maxZoom = default;
            Optional<IReadOnlyList<float>> bbox = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("tilesetId"))
                {
                    tilesetId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ontology"))
                {
                    ontology = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("datasetId"))
                {
                    datasetId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("description"))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("minZoom"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    minZoom = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("maxZoom"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    maxZoom = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("bbox"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<float> array = new List<float>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetSingle());
                    }
                    bbox = array;
                    continue;
                }
            }
            return new TilesetDetailInfo(tilesetId.Value, ontology.Value, datasetId.Value, description.Value, Optional.ToNullable(minZoom), Optional.ToNullable(maxZoom), Optional.ToList(bbox));
        }
    }
}
