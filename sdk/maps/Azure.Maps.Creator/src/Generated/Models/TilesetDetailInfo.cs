// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.Maps.Creator.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Detail information for the data.
    /// </summary>
    public partial class TilesetDetailInfo
    {
        /// <summary>
        /// Initializes a new instance of the TilesetDetailInfo class.
        /// </summary>
        public TilesetDetailInfo()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TilesetDetailInfo class.
        /// </summary>
        /// <param name="tilesetId">The unique tileset id for the
        /// tileset.</param>
        /// <param name="datasetId">The unique dataset Id used to create the
        /// tileset.</param>
        /// <param name="description">The description the caller provided when
        /// creating the tileset. Maximum length 1024 characters.</param>
        /// <param name="minZoom">The lowest tile zoom level tile generated for
        /// the tileset.</param>
        /// <param name="maxZoom">The highest tile zoom level tile generated
        /// for the tileset.</param>
        /// <param name="bbox">Bounding box which all features of the tileset
        /// lay within. Projection used - EPSG:3857. Format : 'minLon, minLat,
        /// maxLon, maxLat'.</param>
        public TilesetDetailInfo(string tilesetId = default(string), string ontology = default(string), string datasetId = default(string), string description = default(string), int? minZoom = default(int?), int? maxZoom = default(int?), IList<double?> bbox = default(IList<double?>))
        {
            TilesetId = tilesetId;
            Ontology = ontology;
            DatasetId = datasetId;
            Description = description;
            MinZoom = minZoom;
            MaxZoom = maxZoom;
            Bbox = bbox;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the unique tileset id for the tileset.
        /// </summary>
        [JsonProperty(PropertyName = "tilesetId")]
        public string TilesetId { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ontology")]
        public string Ontology { get; set; }

        /// <summary>
        /// Gets the unique dataset Id used to create the tileset.
        /// </summary>
        [JsonProperty(PropertyName = "datasetId")]
        public string DatasetId { get; private set; }

        /// <summary>
        /// Gets the description the caller provided when creating the tileset.
        /// Maximum length 1024 characters.
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; private set; }

        /// <summary>
        /// Gets the lowest tile zoom level tile generated for the tileset.
        /// </summary>
        [JsonProperty(PropertyName = "minZoom")]
        public int? MinZoom { get; private set; }

        /// <summary>
        /// Gets the highest tile zoom level tile generated for the tileset.
        /// </summary>
        [JsonProperty(PropertyName = "maxZoom")]
        public int? MaxZoom { get; private set; }

        /// <summary>
        /// Gets bounding box which all features of the tileset lay within.
        /// Projection used - EPSG:3857. Format : 'minLon, minLat, maxLon,
        /// maxLat'.
        /// </summary>
        [JsonProperty(PropertyName = "bbox")]
        public IList<double?> Bbox { get; private set; }

    }
}
