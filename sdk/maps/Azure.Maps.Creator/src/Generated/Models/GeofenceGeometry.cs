// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

namespace Azure.Maps.Creator.Models
{
    /// <summary> The geofencing geometry. </summary>
    public partial class GeofenceGeometry
    {
        /// <summary> Initializes a new instance of GeofenceGeometry. </summary>
        internal GeofenceGeometry()
        {
        }

        /// <summary> Initializes a new instance of GeofenceGeometry. </summary>
        /// <param name="deviceId"> ID of the device. </param>
        /// <param name="udId"> The unique id returned from [Data Upload API](https://docs.microsoft.com/en-us/rest/api/maps/data/uploadPreview) after uploading a valid GeoJSON FeatureCollection object. Please refer to  [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.3) for details. All the feature&apos;s properties should  contain `geometryId`, which is used for identifying the geometry and is case-sensitive. </param>
        /// <param name="geometryId"> The unique id identifies a geometry. </param>
        /// <param name="distance"> Distance from the coordinate to the closest border of the geofence. Positive means the  coordinate is outside of the geofence. If the coordinate is outside of the geofence, but more than the value of searchBuffer away from the closest geofence border, then the value is 999. Negative means the coordinate is inside of the geofence. If the coordinate is inside the polygon, but more than the value of searchBuffer away from the closest geofencing border, then the value is -999. A value of 999 means that there is great confidence the coordinate is well outside the geofence. A value of -999 means that there is great confidence the coordinate is well within the geofence. </param>
        /// <param name="nearestLat"> Latitude of the nearest point of the geometry. </param>
        /// <param name="nearestLon"> Longitude of the nearest point of the geometry. </param>
        /// <param name="nearestZ"> Sea level in meter of the nearest point on the 2D extrusion geometry. This will only be presented in response when value is provided for &apos;zInMeter&apos; in the request. </param>
        internal GeofenceGeometry(string deviceId, string udId, string geometryId, float? distance, float? nearestLat, float? nearestLon, float? nearestZ)
        {
            DeviceId = deviceId;
            UdId = udId;
            GeometryId = geometryId;
            Distance = distance;
            NearestLat = nearestLat;
            NearestLon = nearestLon;
            NearestZ = nearestZ;
        }

        /// <summary> ID of the device. </summary>
        public string DeviceId { get; }
        /// <summary> The unique id returned from [Data Upload API](https://docs.microsoft.com/en-us/rest/api/maps/data/uploadPreview) after uploading a valid GeoJSON FeatureCollection object. Please refer to  [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.3) for details. All the feature&apos;s properties should  contain `geometryId`, which is used for identifying the geometry and is case-sensitive. </summary>
        public string UdId { get; }
        /// <summary> The unique id identifies a geometry. </summary>
        public string GeometryId { get; }
        /// <summary> Distance from the coordinate to the closest border of the geofence. Positive means the  coordinate is outside of the geofence. If the coordinate is outside of the geofence, but more than the value of searchBuffer away from the closest geofence border, then the value is 999. Negative means the coordinate is inside of the geofence. If the coordinate is inside the polygon, but more than the value of searchBuffer away from the closest geofencing border, then the value is -999. A value of 999 means that there is great confidence the coordinate is well outside the geofence. A value of -999 means that there is great confidence the coordinate is well within the geofence. </summary>
        public float? Distance { get; }
        /// <summary> Latitude of the nearest point of the geometry. </summary>
        public float? NearestLat { get; }
        /// <summary> Longitude of the nearest point of the geometry. </summary>
        public float? NearestLon { get; }
        /// <summary> Sea level in meter of the nearest point on the 2D extrusion geometry. This will only be presented in response when value is provided for &apos;zInMeter&apos; in the request. </summary>
        public float? NearestZ { get; }
    }
}
