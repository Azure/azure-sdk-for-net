// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.Maps.Creator.Models
{
    /// <summary> A valid `GeoJSON FeatureCollection` object type extended with numberReturned and links array. Please refer to [RFC 7946](https://tools.ietf.org/html/rfc7946#section-3.3) for details. </summary>
    public partial class ExtendedGeoJsonFeatureCollection : GeoJsonFeatureCollection
    {
        /// <summary> Initializes a new instance of ExtendedGeoJsonFeatureCollection. </summary>
        /// <param name="features"> Contains a list of valid `GeoJSON Feature` objects. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="features"/> is null. </exception>
        public ExtendedGeoJsonFeatureCollection(IEnumerable<GeoJsonFeature> features) : base(features)
        {
            if (features == null)
            {
                throw new ArgumentNullException(nameof(features));
            }

            Links = new ChangeTrackingList<WfsEndpointLink>();
            Type = GeoJsonObjectType.GeoJsonFeatureCollection;
        }

        /// <summary> Initializes a new instance of ExtendedGeoJsonFeatureCollection. </summary>
        /// <param name="type"> Specifies the `GeoJSON` type. Must be one of the nine valid GeoJSON object types - Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature and FeatureCollection. </param>
        /// <param name="features"> Contains a list of valid `GeoJSON Feature` objects. </param>
        /// <param name="ontology"> The ontology version of this dataset. </param>
        /// <param name="numberReturned"> Number of returned features. </param>
        /// <param name="links"> Links to other WFS endpoints. </param>
        internal ExtendedGeoJsonFeatureCollection(GeoJsonObjectType type, IList<GeoJsonFeature> features, string ontology, int? numberReturned, IList<WfsEndpointLink> links) : base(type, features)
        {
            Ontology = ontology;
            NumberReturned = numberReturned;
            Links = links;
            Type = type;
        }

        /// <summary> The ontology version of this dataset. </summary>
        public string Ontology { get; }
        /// <summary> Number of returned features. </summary>
        public int? NumberReturned { get; set; }
        /// <summary> Links to other WFS endpoints. </summary>
        public IList<WfsEndpointLink> Links { get; }
    }
}
