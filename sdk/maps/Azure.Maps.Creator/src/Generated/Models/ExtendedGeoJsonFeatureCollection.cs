// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.Maps.Creator.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A valid `GeoJSON FeatureCollection` object type extended with
    /// numberReturned and links array. Please refer to [RFC
    /// 7946](https://tools.ietf.org/html/rfc7946#section-3.3) for details.
    /// </summary>
    public partial class ExtendedGeoJsonFeatureCollection
    {
        /// <summary>
        /// Initializes a new instance of the ExtendedGeoJsonFeatureCollection
        /// class.
        /// </summary>
        public ExtendedGeoJsonFeatureCollection()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ExtendedGeoJsonFeatureCollection
        /// class.
        /// </summary>
        /// <param name="type">Specifies the `GeoJSON` type. Must be one of the
        /// nine valid GeoJSON object types - Point, MultiPoint, LineString,
        /// MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature
        /// and FeatureCollection. Possible values include: 'GeoJsonPoint',
        /// 'GeoJsonMultiPoint', 'GeoJsonLineString', 'GeoJsonMultiLineString',
        /// 'GeoJsonPolygon', 'GeoJsonMultiPolygon',
        /// 'GeoJsonGeometryCollection', 'GeoJsonFeature',
        /// 'GeoJsonFeatureCollection'</param>
        /// <param name="features">Contains a list of valid `GeoJSON Feature`
        /// objects.</param>
        /// <param name="numberReturned">Number of returned features.</param>
        /// <param name="links">Links to other WFS endpoints.</param>
        public ExtendedGeoJsonFeatureCollection(string type, IList<GeoJsonFeature> features, string ontology = default(string), int? numberReturned = default(int?), IList<WfsEndpointLink> links = default(IList<WfsEndpointLink>))
        {
            Type = type;
            Features = features;
            Ontology = ontology;
            NumberReturned = numberReturned;
            Links = links;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets specifies the `GeoJSON` type. Must be one of the nine
        /// valid GeoJSON object types - Point, MultiPoint, LineString,
        /// MultiLineString, Polygon, MultiPolygon, GeometryCollection, Feature
        /// and FeatureCollection. Possible values include: 'GeoJsonPoint',
        /// 'GeoJsonMultiPoint', 'GeoJsonLineString', 'GeoJsonMultiLineString',
        /// 'GeoJsonPolygon', 'GeoJsonMultiPolygon',
        /// 'GeoJsonGeometryCollection', 'GeoJsonFeature',
        /// 'GeoJsonFeatureCollection'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets contains a list of valid `GeoJSON Feature` objects.
        /// </summary>
        [JsonProperty(PropertyName = "features")]
        public IList<GeoJsonFeature> Features { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ontology")]
        public string Ontology { get; set; }

        /// <summary>
        /// Gets or sets number of returned features.
        /// </summary>
        [JsonProperty(PropertyName = "numberReturned")]
        public int? NumberReturned { get; set; }

        /// <summary>
        /// Gets or sets links to other WFS endpoints.
        /// </summary>
        [JsonProperty(PropertyName = "links")]
        public IList<WfsEndpointLink> Links { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Type == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Type");
            }
            if (Features == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Features");
            }
            if (Features != null)
            {
                foreach (var element in Features)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Links != null)
            {
                foreach (var element1 in Links)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
