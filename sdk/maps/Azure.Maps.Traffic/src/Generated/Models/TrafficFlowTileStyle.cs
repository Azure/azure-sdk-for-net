// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Maps.Traffic.Models
{
    /// <summary> The TrafficFlowTileStyle. </summary>
    public readonly partial struct TrafficFlowTileStyle : IEquatable<TrafficFlowTileStyle>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="TrafficFlowTileStyle"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TrafficFlowTileStyle(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AbsoluteValue = "absolute";
        private const string RelativeValue = "relative";
        private const string RelativeDelayValue = "relative-delay";
        private const string ReducedSensitivityValue = "reduced-sensitivity";

        /// <summary> Colors will reflect the absolute speed measured. Absolute speed is the capability to access the full speed. </summary>
        public static TrafficFlowTileStyle Absolute { get; } = new TrafficFlowTileStyle(AbsoluteValue);
        /// <summary> This is the speed relative to free-flow, highlighting areas of congestion visualizing the traffic flow. Free-flow refers to conditions where there is no congestion and traffic can follow the speed limits. The most used option to visualize traffic flow on a map. </summary>
        public static TrafficFlowTileStyle Relative { get; } = new TrafficFlowTileStyle(RelativeValue);
        /// <summary> Displays relative colors only where they are different from the free-flow speeds. This option will only highlights areas of congestion. </summary>
        public static TrafficFlowTileStyle RelativeDelay { get; } = new TrafficFlowTileStyle(RelativeDelayValue);
        /// <summary> Displays relative colors but a larger difference from freeflow is required for segments to change the color. This mode only valid when format is png. </summary>
        public static TrafficFlowTileStyle ReducedSensitivity { get; } = new TrafficFlowTileStyle(ReducedSensitivityValue);
        /// <summary> Determines if two <see cref="TrafficFlowTileStyle"/> values are the same. </summary>
        public static bool operator ==(TrafficFlowTileStyle left, TrafficFlowTileStyle right) => left.Equals(right);
        /// <summary> Determines if two <see cref="TrafficFlowTileStyle"/> values are not the same. </summary>
        public static bool operator !=(TrafficFlowTileStyle left, TrafficFlowTileStyle right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="TrafficFlowTileStyle"/>. </summary>
        public static implicit operator TrafficFlowTileStyle(string value) => new TrafficFlowTileStyle(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TrafficFlowTileStyle other && Equals(other);
        /// <inheritdoc />
        public bool Equals(TrafficFlowTileStyle other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
