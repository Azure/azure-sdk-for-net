// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Maps.Traffic.Models
{
    /// <summary> The IncidentGeometryType. </summary>
    public readonly partial struct IncidentGeometryType : IEquatable<IncidentGeometryType>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="IncidentGeometryType"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public IncidentGeometryType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string OriginalValue = "original";
        private const string ShiftedValue = "shifted";

        /// <summary> Places incidents precisely on the road. </summary>
        public static IncidentGeometryType Original { get; } = new IncidentGeometryType(OriginalValue);
        /// <summary> Moves the incident slightly (depending on zoom level) to indicate specific road lanes. </summary>
        public static IncidentGeometryType Shifted { get; } = new IncidentGeometryType(ShiftedValue);
        /// <summary> Determines if two <see cref="IncidentGeometryType"/> values are the same. </summary>
        public static bool operator ==(IncidentGeometryType left, IncidentGeometryType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="IncidentGeometryType"/> values are not the same. </summary>
        public static bool operator !=(IncidentGeometryType left, IncidentGeometryType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="IncidentGeometryType"/>. </summary>
        public static implicit operator IncidentGeometryType(string value) => new IncidentGeometryType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is IncidentGeometryType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(IncidentGeometryType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
