// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Maps.Traffic.Models
{
    /// <summary> The ProjectionStandard. </summary>
    public readonly partial struct ProjectionStandard : IEquatable<ProjectionStandard>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="ProjectionStandard"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ProjectionStandard(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string Epsg900913Value = "EPSG900913";
        private const string Epsg4326Value = "EPSG4326";

        /// <summary> [EPSG900913](http://docs.openlayers.org/library/spherical_mercator.html). </summary>
        public static ProjectionStandard Epsg900913 { get; } = new ProjectionStandard(Epsg900913Value);
        /// <summary> [EPSG4326](http://spatialreference.org/ref/epsg/4326/). </summary>
        public static ProjectionStandard Epsg4326 { get; } = new ProjectionStandard(Epsg4326Value);
        /// <summary> Determines if two <see cref="ProjectionStandard"/> values are the same. </summary>
        public static bool operator ==(ProjectionStandard left, ProjectionStandard right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ProjectionStandard"/> values are not the same. </summary>
        public static bool operator !=(ProjectionStandard left, ProjectionStandard right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ProjectionStandard"/>. </summary>
        public static implicit operator ProjectionStandard(string value) => new ProjectionStandard(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ProjectionStandard other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ProjectionStandard other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
