// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.Maps.Traffic.Models
{
    public partial class TrafficFlowSegmentResultFlowSegmentData
    {
        internal static TrafficFlowSegmentResultFlowSegmentData DeserializeTrafficFlowSegmentResultFlowSegmentData(JsonElement element)
        {
            Optional<string> frc = default;
            Optional<int> currentSpeed = default;
            Optional<int> freeFlowSpeed = default;
            Optional<int> currentTravelTime = default;
            Optional<int> freeFlowTravelTime = default;
            Optional<float> confidence = default;
            Optional<TrafficFlowSegmentResultFlowSegmentDataCoordinates> coordinates = default;
            Optional<string> version = default;
            Optional<float> openlr = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("frc"))
                {
                    frc = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("currentSpeed"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    currentSpeed = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("freeFlowSpeed"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    freeFlowSpeed = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("currentTravelTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    currentTravelTime = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("freeFlowTravelTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    freeFlowTravelTime = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("confidence"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    confidence = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("coordinates"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    coordinates = TrafficFlowSegmentResultFlowSegmentDataCoordinates.DeserializeTrafficFlowSegmentResultFlowSegmentDataCoordinates(property.Value);
                    continue;
                }
                if (property.NameEquals("@version"))
                {
                    version = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("openlr"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    openlr = property.Value.GetSingle();
                    continue;
                }
            }
            return new TrafficFlowSegmentResultFlowSegmentData(frc.Value, Optional.ToNullable(currentSpeed), Optional.ToNullable(freeFlowSpeed), Optional.ToNullable(currentTravelTime), Optional.ToNullable(freeFlowTravelTime), Optional.ToNullable(confidence), coordinates.Value, version.Value, Optional.ToNullable(openlr));
        }
    }
}
