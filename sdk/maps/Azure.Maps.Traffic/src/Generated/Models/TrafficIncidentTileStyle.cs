// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Maps.Traffic.Models
{
    /// <summary> The TrafficIncidentTileStyle. </summary>
    public readonly partial struct TrafficIncidentTileStyle : IEquatable<TrafficIncidentTileStyle>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="TrafficIncidentTileStyle"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TrafficIncidentTileStyle(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string S1Value = "s1";
        private const string S2Value = "s2";
        private const string S3Value = "s3";
        private const string NightValue = "night";

        /// <summary> Creates traffic lines with colored chevrons indicating severity. </summary>
        public static TrafficIncidentTileStyle S1 { get; } = new TrafficIncidentTileStyle(S1Value);
        /// <summary> Creates plain lines with certain degree of glow. </summary>
        public static TrafficIncidentTileStyle S2 { get; } = new TrafficIncidentTileStyle(S2Value);
        /// <summary> Creates plain lines with certain degree of glow. </summary>
        public static TrafficIncidentTileStyle S3 { get; } = new TrafficIncidentTileStyle(S3Value);
        /// <summary> Night style. </summary>
        public static TrafficIncidentTileStyle Night { get; } = new TrafficIncidentTileStyle(NightValue);
        /// <summary> Determines if two <see cref="TrafficIncidentTileStyle"/> values are the same. </summary>
        public static bool operator ==(TrafficIncidentTileStyle left, TrafficIncidentTileStyle right) => left.Equals(right);
        /// <summary> Determines if two <see cref="TrafficIncidentTileStyle"/> values are not the same. </summary>
        public static bool operator !=(TrafficIncidentTileStyle left, TrafficIncidentTileStyle right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="TrafficIncidentTileStyle"/>. </summary>
        public static implicit operator TrafficIncidentTileStyle(string value) => new TrafficIncidentTileStyle(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TrafficIncidentTileStyle other && Equals(other);
        /// <inheritdoc />
        public bool Equals(TrafficIncidentTileStyle other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
