// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Linq;
using Azure.Maps.Traffic.Models;

namespace Azure.Maps.Traffic
{
    /// <summary> Model factory for read-only models. </summary>
    public static partial class TrafficModelFactory
    {
        /// <summary> Initializes a new instance of TrafficFlowSegmentResult. </summary>
        /// <param name="flowSegmentData"> Flow Segment Data property. </param>
        /// <returns> A new <see cref="Models.TrafficFlowSegmentResult"/> instance for mocking. </returns>
        public static TrafficFlowSegmentResult TrafficFlowSegmentResult(TrafficFlowSegmentResultFlowSegmentData flowSegmentData = null)
        {
            return new TrafficFlowSegmentResult(flowSegmentData);
        }

        /// <summary> Initializes a new instance of TrafficFlowSegmentResultFlowSegmentData. </summary>
        /// <param name="frc">
        /// Functional Road Class. This indicates the road type:
        ///   0: Motorway, freeway or other major road.
        ///   1: Major road, less important than a motorway.
        ///   2: Other major road.
        ///   3: Secondary road.
        ///   4: Local connecting road.
        ///   5: Local road of high importance.
        ///   6: Local road.
        /// </param>
        /// <param name="currentSpeed"> The current average speed at the selected point, in the units requested. This is calculated from the currentTravelTime and the length of the selected segment. </param>
        /// <param name="freeFlowSpeed"> The free flow speed expected under ideal conditions, expressed in the units requested. This is related to the freeFlowTravelTime. </param>
        /// <param name="currentTravelTime"> Current travel time in seconds based on fused real-time measurements between the defined locations in the specified direction. </param>
        /// <param name="freeFlowTravelTime"> The travel time in seconds which would be expected under ideal free flow conditions. </param>
        /// <param name="confidence"> The confidence is a measure of the quality of the provided travel time and speed. A value of 1 means full confidence, that the response contains the highest quality data.  Lower values indicate the degree that the response may vary from the actual conditions on the road. Any value greater than 0.6 means the information was based on real-time probe input. A value of 0.5 means the reported speed is based on historical info.   A value between 0.5 and 0.6 has a calculated weighted average between historical and live speeds. </param>
        /// <param name="coordinates"> Includes the coordinates describing the shape of the segment. Coordinates are shifted from the road depending on the zoom level to support high quality visualization in every scale. </param>
        /// <param name="version"> This indicates the software version that generated the response. </param>
        /// <param name="openlr"> OpenLR code for segment. </param>
        /// <returns> A new <see cref="Models.TrafficFlowSegmentResultFlowSegmentData"/> instance for mocking. </returns>
        public static TrafficFlowSegmentResultFlowSegmentData TrafficFlowSegmentResultFlowSegmentData(string frc = null, int? currentSpeed = null, int? freeFlowSpeed = null, int? currentTravelTime = null, int? freeFlowTravelTime = null, float? confidence = null, TrafficFlowSegmentResultFlowSegmentDataCoordinates coordinates = null, string version = null, float? openlr = null)
        {
            return new TrafficFlowSegmentResultFlowSegmentData(frc, currentSpeed, freeFlowSpeed, currentTravelTime, freeFlowTravelTime, confidence, coordinates, version, openlr);
        }

        /// <summary> Initializes a new instance of TrafficFlowSegmentResultFlowSegmentDataCoordinates. </summary>
        /// <param name="coordinate"> Coordinate array. </param>
        /// <returns> A new <see cref="Models.TrafficFlowSegmentResultFlowSegmentDataCoordinates"/> instance for mocking. </returns>
        public static TrafficFlowSegmentResultFlowSegmentDataCoordinates TrafficFlowSegmentResultFlowSegmentDataCoordinates(IEnumerable<CoordinatesPair> coordinate = null)
        {
            coordinate ??= new List<CoordinatesPair>();

            return new TrafficFlowSegmentResultFlowSegmentDataCoordinates(coordinate?.ToList());
        }

        /// <summary> Initializes a new instance of CoordinatesPair. </summary>
        /// <param name="latitude"> Latitude property. </param>
        /// <param name="longitude"> Longitude property. </param>
        /// <returns> A new <see cref="Models.CoordinatesPair"/> instance for mocking. </returns>
        public static CoordinatesPair CoordinatesPair(double? latitude = null, double? longitude = null)
        {
            return new CoordinatesPair(latitude, longitude);
        }

        /// <summary> Initializes a new instance of TrafficIncidentDetailResult. </summary>
        /// <param name="tm"> Main response element. </param>
        /// <returns> A new <see cref="Models.TrafficIncidentDetailResult"/> instance for mocking. </returns>
        public static TrafficIncidentDetailResult TrafficIncidentDetailResult(TrafficIncidentDetailResultTm tm = null)
        {
            return new TrafficIncidentDetailResult(tm);
        }

        /// <summary> Initializes a new instance of TrafficIncidentDetailResultTm. </summary>
        /// <param name="id"> ID of the traffic incident. </param>
        /// <param name="poi"> A single traffic incident, or a cluster of traffic incidents. </param>
        /// <returns> A new <see cref="Models.TrafficIncidentDetailResultTm"/> instance for mocking. </returns>
        public static TrafficIncidentDetailResultTm TrafficIncidentDetailResultTm(string id = null, IEnumerable<TrafficIncidentPoi> poi = null)
        {
            poi ??= new List<TrafficIncidentPoi>();

            return new TrafficIncidentDetailResultTm(id, poi?.ToList());
        }

        /// <summary> Initializes a new instance of TrafficIncidentPoi. </summary>
        /// <param name="id"> ID of the traffic incident. </param>
        /// <param name="p"> The point where an icon of the cluster or raw incident should be drawn, expressed in the requested projection. This is affected by traffic style, zoom level and road type. </param>
        /// <param name="ic"> The icon category associated with this incident. Values are numbers in the range 0-13, with the following meanings -- 0: Unknown, 1: Accident, 2: Fog, 3: Dangerous Conditions, 4: Rain, 5: Ice, 6: Jam, 7: Lane Closed, 8: Road Closed, 9: Road Works, 10: Wind, 11: Flooding, 12: Detour, 13: Cluster. </param>
        /// <param name="ty"> The magnitude of delay associated with incident. These values correspond to incident colors in the traffic tiles. </param>
        /// <param name="cbl"> Bottom left coordinate of the cluster in the projection of the request. </param>
        /// <param name="ctr"> Top right coordinate of the cluster in the projection of the request. </param>
        /// <param name="cs"> Cluster size: the number of incidents in the cluster. </param>
        /// <param name="l"> Length of the incident in meters. </param>
        /// <param name="r"> The road number(s) affected by the incident. Multiple road numbers will delimited by slashes. </param>
        /// <param name="dl"> Delay caused by the incident in seconds (except in road closures). </param>
        /// <param name="t"> To: the name of the intersection or location where the traffic due to the incident ends. </param>
        /// <param name="f"> From: the name of the intersection or location where the traffic due to the incident starts. </param>
        /// <param name="d"> Description of the incident in the language requested. </param>
        /// <param name="c"> Cause of the incident, where available, in the language requested. </param>
        /// <returns> A new <see cref="Models.TrafficIncidentPoi"/> instance for mocking. </returns>
        public static TrafficIncidentPoi TrafficIncidentPoi(string id = null, TrafficIncidentPoiP p = null, int? ic = null, int? ty = null, TrafficIncidentPoiCbl cbl = null, TrafficIncidentPoiCtr ctr = null, int? cs = null, int? l = null, string r = null, int? dl = null, string t = null, string f = null, string d = null, string c = null)
        {
            return new TrafficIncidentPoi(id, p, ic, ty, cbl, ctr, cs, l, r, dl, t, f, d, c);
        }

        /// <summary> Initializes a new instance of TrafficIncidentPoiP. </summary>
        /// <param name="x"> x coordinate. </param>
        /// <param name="y"> y coordinate. </param>
        /// <returns> A new <see cref="Models.TrafficIncidentPoiP"/> instance for mocking. </returns>
        public static TrafficIncidentPoiP TrafficIncidentPoiP(float? x = null, float? y = null)
        {
            return new TrafficIncidentPoiP(x, y);
        }

        /// <summary> Initializes a new instance of TrafficIncidentPoiCbl. </summary>
        /// <param name="x"> x coordinate. </param>
        /// <param name="y"> y coordinate. </param>
        /// <returns> A new <see cref="Models.TrafficIncidentPoiCbl"/> instance for mocking. </returns>
        public static TrafficIncidentPoiCbl TrafficIncidentPoiCbl(float? x = null, float? y = null)
        {
            return new TrafficIncidentPoiCbl(x, y);
        }

        /// <summary> Initializes a new instance of TrafficIncidentPoiCtr. </summary>
        /// <param name="x"> x coordinate. </param>
        /// <param name="y"> y coordinate. </param>
        /// <returns> A new <see cref="Models.TrafficIncidentPoiCtr"/> instance for mocking. </returns>
        public static TrafficIncidentPoiCtr TrafficIncidentPoiCtr(float? x = null, float? y = null)
        {
            return new TrafficIncidentPoiCtr(x, y);
        }

        /// <summary> Initializes a new instance of TrafficIncidentViewportResult. </summary>
        /// <param name="viewpResp"> Viewport Response object. </param>
        /// <returns> A new <see cref="Models.TrafficIncidentViewportResult"/> instance for mocking. </returns>
        public static TrafficIncidentViewportResult TrafficIncidentViewportResult(TrafficIncidentViewportResultViewpResp viewpResp = null)
        {
            return new TrafficIncidentViewportResult(viewpResp);
        }

        /// <summary> Initializes a new instance of TrafficIncidentViewportResultViewpResp. </summary>
        /// <param name="trafficState"> Traffic State array. </param>
        /// <param name="copyrightIds"> Copyright Ids property. </param>
        /// <param name="version"> @Version property. </param>
        /// <param name="maps"> @maps property. </param>
        /// <returns> A new <see cref="Models.TrafficIncidentViewportResultViewpResp"/> instance for mocking. </returns>
        public static TrafficIncidentViewportResultViewpResp TrafficIncidentViewportResultViewpResp(TrafficIncidentViewportResultViewpRespTrafficState trafficState = null, string copyrightIds = null, string version = null, string maps = null)
        {
            return new TrafficIncidentViewportResultViewpResp(trafficState, copyrightIds, version, maps);
        }

        /// <summary> Initializes a new instance of TrafficIncidentViewportResultViewpRespTrafficState. </summary>
        /// <param name="trafficAge"> @Traffic Age property. </param>
        /// <param name="trafficModelId"> @Traffic Model Id property. </param>
        /// <returns> A new <see cref="Models.TrafficIncidentViewportResultViewpRespTrafficState"/> instance for mocking. </returns>
        public static TrafficIncidentViewportResultViewpRespTrafficState TrafficIncidentViewportResultViewpRespTrafficState(int? trafficAge = null, string trafficModelId = null)
        {
            return new TrafficIncidentViewportResultViewpRespTrafficState(trafficAge, trafficModelId);
        }
    }
}
