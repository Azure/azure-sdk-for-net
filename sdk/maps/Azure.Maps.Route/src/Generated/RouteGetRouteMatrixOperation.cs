// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.Maps.Route.Models;

namespace Azure.Maps.Route
{
    /// <summary>
    /// If the Matrix Route request was accepted successfully, the Location header in the response contains the URL to download the results of the request. This status URI looks like the following:
    /// 
    ///   ```
    ///     GET https://atlas.microsoft.com/route/matrix/{matrixId}?api-version=1.0?subscription-key={subscription-key}
    ///   ```
    /// 
    /// 
    /// 4. Client issues a GET request on the download URL obtained in Step 3 to download the results
    /// 
    /// ### Download Sync Results
    /// When you make a POST request for Route Matrix Sync API, the service returns 200 response code for successful request and a response array. The response body will contain the data and there will be no possibility to retrieve the results later.
    /// 
    /// ### Download Async Results
    /// When a request issues a `202 Accepted` response, the request is being processed using our async pipeline. You will be given a URL to check the progress of your  async request in the location header of the response. This status URI looks like the following:
    /// ```
    ///   GET https://atlas.microsoft.com/route/matrix/{matrixId}?api-version=1.0?subscription-key={subscription-key}
    /// ```
    /// 
    /// The URL provided by the location header will return the following responses when a `GET` request is issued.
    /// 
    ///   &gt; HTTP `202 Accepted` - Matrix request was accepted but is still being processed. Please try again in some time.
    /// 
    ///   &gt; HTTP `200 OK` - Matrix request successfully processed. The response body contains all of the results.
    /// </summary>
    public partial class RouteGetRouteMatrixOperation : Operation<RouteMatrixResponse>, IOperationSource<RouteMatrixResponse>
    {
        private readonly OperationInternals<RouteMatrixResponse> _operation;

        /// <summary> Initializes a new instance of RouteGetRouteMatrixOperation for mocking. </summary>
        protected RouteGetRouteMatrixOperation()
        {
        }

        internal RouteGetRouteMatrixOperation(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Request request, Response response)
        {
            _operation = new OperationInternals<RouteMatrixResponse>(this, clientDiagnostics, pipeline, request, response, OperationFinalStateVia.OriginalUri, "RouteGetRouteMatrixOperation");
        }

        /// <inheritdoc />
        public override string Id => _operation.Id;

        /// <inheritdoc />
        public override RouteMatrixResponse Value => _operation.Value;

        /// <inheritdoc />
        public override bool HasCompleted => _operation.HasCompleted;

        /// <inheritdoc />
        public override bool HasValue => _operation.HasValue;

        /// <inheritdoc />
        public override Response GetRawResponse() => _operation.GetRawResponse();

        /// <inheritdoc />
        public override Response UpdateStatus(CancellationToken cancellationToken = default) => _operation.UpdateStatus(cancellationToken);

        /// <inheritdoc />
        public override ValueTask<Response> UpdateStatusAsync(CancellationToken cancellationToken = default) => _operation.UpdateStatusAsync(cancellationToken);

        /// <inheritdoc />
        public override ValueTask<Response<RouteMatrixResponse>> WaitForCompletionAsync(CancellationToken cancellationToken = default) => _operation.WaitForCompletionAsync(cancellationToken);

        /// <inheritdoc />
        public override ValueTask<Response<RouteMatrixResponse>> WaitForCompletionAsync(TimeSpan pollingInterval, CancellationToken cancellationToken = default) => _operation.WaitForCompletionAsync(pollingInterval, cancellationToken);

        RouteMatrixResponse IOperationSource<RouteMatrixResponse>.CreateResult(Response response, CancellationToken cancellationToken)
        {
            using var document = JsonDocument.Parse(response.ContentStream);
            return RouteMatrixResponse.DeserializeRouteMatrixResponse(document.RootElement);
        }

        async ValueTask<RouteMatrixResponse> IOperationSource<RouteMatrixResponse>.CreateResultAsync(Response response, CancellationToken cancellationToken)
        {
            using var document = await JsonDocument.ParseAsync(response.ContentStream, default, cancellationToken).ConfigureAwait(false);
            return RouteMatrixResponse.DeserializeRouteMatrixResponse(document.RootElement);
        }
    }
}
