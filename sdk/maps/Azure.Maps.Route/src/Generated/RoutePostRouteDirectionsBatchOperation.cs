// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.Maps.Route.Models;

namespace Azure.Maps.Route
{
    /// <summary>
    /// **Route Directions Batch API**
    /// 
    /// 
    /// **Applies to**: S1 pricing tier.
    /// 
    /// 
    /// 
    /// The Route Directions Batch API sends batches of queries to [Route Directions API](https://docs.microsoft.com/en-us/rest/api/maps/route/getroutedirections) using just a single API call. You can call Route Directions Batch API to run either asynchronously (async) or synchronously (sync). The async API allows caller to batch up to **700** queries and sync API up to **100** queries.
    /// ### Submit Synchronous Batch Request
    /// The Synchronous API is recommended for lightweight batch requests. When the service receives a request, it will respond as soon as the batch items are calculated and there will be no possibility to retrieve the results later. The Synchronous API will return a timeout error (a 408 response) if the request takes longer than 60 seconds. The number of batch items is limited to **100** for this API.
    /// ```
    /// POST https://atlas.microsoft.com/route/directions/batch/sync/json?api-version=1.0&amp;subscription-key={subscription-key}
    /// ```
    /// ### Submit Asynchronous Batch Request
    /// The Asynchronous API is appropriate for processing big volumes of relatively complex route requests
    /// - It allows the retrieval of results in a separate call (multiple downloads are possible).
    /// - The asynchronous API is optimized for reliability and is not expected to run into a timeout.
    /// - The number of batch items is limited to **700** for this API.
    /// 
    /// When you make a request by using async request, by default the service returns a 202 response code along a redirect URL in the Location field of the response header. This URL should be checked periodically until the response data or error information is available.
    /// The asynchronous responses are stored for **14** days. The redirect URL returns a 404 response if used after the expiration period.
    /// 
    /// Please note that asynchronous batch request is a long-running request. Here&apos;s a typical sequence of operations:
    /// 1. Client sends a Route Directions Batch `POST` request to Azure Maps
    /// 2. The server will respond with one of the following:
    /// 
    ///     &gt; HTTP `202 Accepted` - Batch request has been accepted.
    /// 
    ///     &gt; HTTP `Error` - There was an error processing your Batch request. This could either be a `400 Bad Request` or any other `Error` status code.
    /// 
    /// 3. If the batch request was accepted successfully, the `Location` header in the response contains the URL to download the results of the batch request.
    ///     This status URI looks like following:
    /// 
    /// ``` GET https://atlas.microsoft.com/batch/{batch-id}?api-version=1.0 ```
    /// Note:- Please remember to add AUTH information (subscription-key/azure_auth - See [Security](#security)) to the _status URI_ before running it. &lt;br&gt;
    /// 4. Client issues a `GET` request on the _download URL_ obtained in Step 3 to download the batch results.
    /// 
    /// ### POST Body for Batch Request
    /// To send the _route directions_ queries you will use a `POST` request where the request body will contain the `batchItems` array in `json` format and the `Content-Type` header will be set to `application/json`. Here&apos;s a sample request body containing 3 _route directions_ queries:
    /// 
    /// 
    /// ```json
    /// {
    ///     &quot;batchItems&quot;: [
    ///         { &quot;query&quot;: &quot;?query=47.620659,-122.348934:47.610101,-122.342015&amp;travelMode=bicycle&amp;routeType=eco&amp;traffic=false&quot; },
    ///         { &quot;query&quot;: &quot;?query=40.759856,-73.985108:40.771136,-73.973506&amp;travelMode=pedestrian&amp;routeType=shortest&quot; },
    ///         { &quot;query&quot;: &quot;?query=48.923159,-122.557362:32.621279,-116.840362&quot; }
    ///     ]
    /// }
    /// ```
    /// 
    /// A _route directions_ query in a batch is just a partial URL _without_ the protocol, base URL, path, api-version and subscription-key. It can accept any of the supported _route directions_ [URI parameters](https://docs.microsoft.com/en-us/rest/api/maps/route/getroutedirections#uri-parameters). The string values in the _route directions_ query must be properly escaped (e.g. &quot; character should be escaped with \\ ) and it should also be properly URL-encoded.
    /// 
    /// 
    /// The async API allows caller to batch up to **700** queries and sync API up to **100** queries, and the batch should contain at least **1** query.
    /// 
    /// 
    /// ### Download Asynchronous Batch Results
    /// To download the async batch results you will issue a `GET` request to the batch download endpoint. This _download URL_ can be obtained from the `Location` header of a successful `POST` batch request and looks like the following:
    /// 
    /// ```
    /// https://atlas.microsoft.com/batch/{batch-id}?api-version=1.0&amp;subscription-key={subscription-key}
    /// ```
    /// Here&apos;s the typical sequence of operations for downloading the batch results:
    /// 1. Client sends a `GET` request using the _download URL_.
    /// 2. The server will respond with one of the following:
    /// 
    ///     &gt; HTTP `202 Accepted` - Batch request was accepted but is still being processed. Please try again in some time.
    /// 
    ///     &gt; HTTP `200 OK` - Batch request successfully processed. The response body contains all the batch results.
    /// 
    /// 
    /// 
    /// ### Batch Response Model
    /// The returned data content is similar for async and sync requests. When downloading the results of an async batch request, if the batch has finished processing, the response body contains the batch response. This batch response contains a `summary` component that indicates the `totalRequests` that were part of the original batch request and `successfulRequests`i.e. queries which were executed successfully. The batch response also includes a `batchItems` array which contains a response for each and every query in the batch request. The `batchItems` will contain the results in the exact same order the original queries were sent in the batch request. Each item in `batchItems` contains `statusCode` and `response` fields. Each `response` in `batchItems` is of one of the following types:
    /// 
    ///   - [`RouteDirectionsResponse`](https://docs.microsoft.com/en-us/rest/api/maps/route/getroutedirections#routedirectionsresponse) - If the query completed successfully.
    /// 
    ///   - `Error` - If the query failed. The response will contain a `code` and a `message` in this case.
    /// 
    /// 
    /// Here&apos;s a sample Batch Response with 1 _successful_ and 1 _failed_ result:
    /// 
    /// 
    /// ```json
    /// {
    ///     &quot;summary&quot;: {
    ///         &quot;successfulRequests&quot;: 1,
    ///         &quot;totalRequests&quot;: 2
    ///     },
    ///     &quot;batchItems&quot;: [
    ///         {
    ///             &quot;statusCode&quot;: 200,
    ///             &quot;response&quot;: {
    ///                 &quot;routes&quot;: [
    ///                     {
    ///                         &quot;summary&quot;: {
    ///                             &quot;lengthInMeters&quot;: 1758,
    ///                             &quot;travelTimeInSeconds&quot;: 387,
    ///                             &quot;trafficDelayInSeconds&quot;: 0,
    ///                             &quot;departureTime&quot;: &quot;2018-07-17T00:49:56+00:00&quot;,
    ///                             &quot;arrivalTime&quot;: &quot;2018-07-17T00:56:22+00:00&quot;
    ///                         },
    ///                         &quot;legs&quot;: [
    ///                             {
    ///                                 &quot;summary&quot;: {
    ///                                     &quot;lengthInMeters&quot;: 1758,
    ///                                     &quot;travelTimeInSeconds&quot;: 387,
    ///                                     &quot;trafficDelayInSeconds&quot;: 0,
    ///                                     &quot;departureTime&quot;: &quot;2018-07-17T00:49:56+00:00&quot;,
    ///                                     &quot;arrivalTime&quot;: &quot;2018-07-17T00:56:22+00:00&quot;
    ///                                 },
    ///                                 &quot;points&quot;: [
    ///                                     {
    ///                                         &quot;latitude&quot;: 47.62094,
    ///                                         &quot;longitude&quot;: -122.34892
    ///                                     },
    ///                                     {
    ///                                         &quot;latitude&quot;: 47.62094,
    ///                                         &quot;longitude&quot;: -122.3485
    ///                                     },
    ///                                     {
    ///                                         &quot;latitude&quot;: 47.62095,
    ///                                         &quot;longitude&quot;: -122.3476
    ///                                     }
    ///                                 ]
    ///                             }
    ///                         ],
    ///                         &quot;sections&quot;: [
    ///                             {
    ///                                 &quot;startPointIndex&quot;: 0,
    ///                                 &quot;endPointIndex&quot;: 40,
    ///                                 &quot;sectionType&quot;: &quot;TRAVEL_MODE&quot;,
    ///                                 &quot;travelMode&quot;: &quot;bicycle&quot;
    ///                             }
    ///                         ]
    ///                     }
    ///                 ]
    ///             }
    ///         },
    ///         {
    ///             &quot;statusCode&quot;: 400,
    ///             &quot;response&quot;:
    ///             {
    ///                 &quot;error&quot;:
    ///                 {
    ///                     &quot;code&quot;: &quot;400 BadRequest&quot;,
    ///                     &quot;message&quot;: &quot;Bad request: one or more parameters were incorrectly specified or are mutually exclusive.&quot;
    ///                 }
    ///             }
    ///         }
    ///     ]
    /// }
    /// ```.
    /// </summary>
    public partial class RoutePostRouteDirectionsBatchOperation : Operation<RouteDirectionsBatchResponse>, IOperationSource<RouteDirectionsBatchResponse>
    {
        private readonly OperationInternals<RouteDirectionsBatchResponse> _operation;

        /// <summary> Initializes a new instance of RoutePostRouteDirectionsBatchOperation for mocking. </summary>
        protected RoutePostRouteDirectionsBatchOperation()
        {
        }

        internal RoutePostRouteDirectionsBatchOperation(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Request request, Response response)
        {
            _operation = new OperationInternals<RouteDirectionsBatchResponse>(this, clientDiagnostics, pipeline, request, response, OperationFinalStateVia.Location, "RoutePostRouteDirectionsBatchOperation");
        }

        /// <inheritdoc />
        public override string Id => _operation.Id;

        /// <inheritdoc />
        public override RouteDirectionsBatchResponse Value => _operation.Value;

        /// <inheritdoc />
        public override bool HasCompleted => _operation.HasCompleted;

        /// <inheritdoc />
        public override bool HasValue => _operation.HasValue;

        /// <inheritdoc />
        public override Response GetRawResponse() => _operation.GetRawResponse();

        /// <inheritdoc />
        public override Response UpdateStatus(CancellationToken cancellationToken = default) => _operation.UpdateStatus(cancellationToken);

        /// <inheritdoc />
        public override ValueTask<Response> UpdateStatusAsync(CancellationToken cancellationToken = default) => _operation.UpdateStatusAsync(cancellationToken);

        /// <inheritdoc />
        public override ValueTask<Response<RouteDirectionsBatchResponse>> WaitForCompletionAsync(CancellationToken cancellationToken = default) => _operation.WaitForCompletionAsync(cancellationToken);

        /// <inheritdoc />
        public override ValueTask<Response<RouteDirectionsBatchResponse>> WaitForCompletionAsync(TimeSpan pollingInterval, CancellationToken cancellationToken = default) => _operation.WaitForCompletionAsync(pollingInterval, cancellationToken);

        RouteDirectionsBatchResponse IOperationSource<RouteDirectionsBatchResponse>.CreateResult(Response response, CancellationToken cancellationToken)
        {
            using var document = JsonDocument.Parse(response.ContentStream);
            return RouteDirectionsBatchResponse.DeserializeRouteDirectionsBatchResponse(document.RootElement);
        }

        async ValueTask<RouteDirectionsBatchResponse> IOperationSource<RouteDirectionsBatchResponse>.CreateResultAsync(Response response, CancellationToken cancellationToken)
        {
            using var document = await JsonDocument.ParseAsync(response.ContentStream, default, cancellationToken).ConfigureAwait(false);
            return RouteDirectionsBatchResponse.DeserializeRouteDirectionsBatchResponse(document.RootElement);
        }
    }
}
