// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Maps.Route.Models
{
    /// <summary> The ComputeTravelTimeFor. </summary>
    public readonly partial struct ComputeTravelTimeFor : IEquatable<ComputeTravelTimeFor>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="ComputeTravelTimeFor"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ComputeTravelTimeFor(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NoneValue = "none";
        private const string AllValue = "all";

        /// <summary> Does not compute additional travel times. </summary>
        public static ComputeTravelTimeFor None { get; } = new ComputeTravelTimeFor(NoneValue);
        /// <summary> Computes travel times for all types of traffic information and specifies all results in the fields noTrafficTravelTimeInSeconds, historicTrafficTravelTimeInSeconds and liveTrafficIncidentsTravelTimeInSeconds being included in the summaries in the route response. </summary>
        public static ComputeTravelTimeFor All { get; } = new ComputeTravelTimeFor(AllValue);
        /// <summary> Determines if two <see cref="ComputeTravelTimeFor"/> values are the same. </summary>
        public static bool operator ==(ComputeTravelTimeFor left, ComputeTravelTimeFor right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ComputeTravelTimeFor"/> values are not the same. </summary>
        public static bool operator !=(ComputeTravelTimeFor left, ComputeTravelTimeFor right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ComputeTravelTimeFor"/>. </summary>
        public static implicit operator ComputeTravelTimeFor(string value) => new ComputeTravelTimeFor(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ComputeTravelTimeFor other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ComputeTravelTimeFor other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
