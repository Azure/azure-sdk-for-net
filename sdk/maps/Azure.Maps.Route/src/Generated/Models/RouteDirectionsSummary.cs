// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.Maps.Route.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Summary object
    /// </summary>
    public partial class RouteDirectionsSummary
    {
        /// <summary>
        /// Initializes a new instance of the RouteDirectionsSummary class.
        /// </summary>
        public RouteDirectionsSummary()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RouteDirectionsSummary class.
        /// </summary>
        /// <param name="lengthInMeters">Length In Meters property</param>
        /// <param name="travelTimeInSeconds">Estimated travel time in seconds
        /// property that includes the delay due to real-time traffic. Note
        /// that even when traffic=false travelTimeInSeconds still includes the
        /// delay due to traffic. If DepartAt is in the future, travel time is
        /// calculated using time-dependent historic traffic data.</param>
        /// <param name="trafficDelayInSeconds">Estimated delay in seconds
        /// caused by the real-time incident(s) according to traffic
        /// information. For routes planned with departure time in the future,
        /// delays is always 0. To return additional travel times using
        /// different types of traffic information, parameter
        /// computeTravelTimeFor=all needs to be added.</param>
        /// <param name="departureTime">Departure Time property</param>
        /// <param name="arrivalTime">Arrival Time property</param>
        public RouteDirectionsSummary(int? lengthInMeters = default(int?), int? travelTimeInSeconds = default(int?), int? trafficDelayInSeconds = default(int?), string departureTime = default(string), string arrivalTime = default(string))
        {
            LengthInMeters = lengthInMeters;
            TravelTimeInSeconds = travelTimeInSeconds;
            TrafficDelayInSeconds = trafficDelayInSeconds;
            DepartureTime = departureTime;
            ArrivalTime = arrivalTime;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets length In Meters property
        /// </summary>
        [JsonProperty(PropertyName = "lengthInMeters")]
        public int? LengthInMeters { get; private set; }

        /// <summary>
        /// Gets estimated travel time in seconds property that includes the
        /// delay due to real-time traffic. Note that even when traffic=false
        /// travelTimeInSeconds still includes the delay due to traffic. If
        /// DepartAt is in the future, travel time is calculated using
        /// time-dependent historic traffic data.
        /// </summary>
        [JsonProperty(PropertyName = "travelTimeInSeconds")]
        public int? TravelTimeInSeconds { get; private set; }

        /// <summary>
        /// Gets estimated delay in seconds caused by the real-time incident(s)
        /// according to traffic information. For routes planned with departure
        /// time in the future, delays is always 0. To return additional travel
        /// times using different types of traffic information, parameter
        /// computeTravelTimeFor=all needs to be added.
        /// </summary>
        [JsonProperty(PropertyName = "trafficDelayInSeconds")]
        public int? TrafficDelayInSeconds { get; private set; }

        /// <summary>
        /// Gets departure Time property
        /// </summary>
        [JsonProperty(PropertyName = "departureTime")]
        public string DepartureTime { get; private set; }

        /// <summary>
        /// Gets arrival Time property
        /// </summary>
        [JsonProperty(PropertyName = "arrivalTime")]
        public string ArrivalTime { get; private set; }

    }
}
