// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.Maps.Route.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Post body parameters for Route directions.
    /// </summary>
    public partial class PostRouteDirectionsRequestBody
    {
        /// <summary>
        /// Initializes a new instance of the PostRouteDirectionsRequestBody
        /// class.
        /// </summary>
        public PostRouteDirectionsRequestBody()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PostRouteDirectionsRequestBody
        /// class.
        /// </summary>
        /// <param name="supportingPoints">A GeoJSON Geometry collection
        /// representing sequence of coordinates used as input for route
        /// reconstruction and for calculating zero or more alternative routes
        /// to this reference route.
        /// - The provided sequence of supporting points is used as input for
        /// route reconstruction.
        /// - The alternative routes are calculated between the origin and
        /// destination points specified in the base path parameter locations.
        /// - If both _minDeviationDistance_ and _minDeviationTime_ are set to
        /// zero, then these origin and destination points are
        /// expected to be at (or very near) the beginning and end of the
        /// reference route, respectively.
        /// - Intermediate locations (_waypoints_) are not supported when using
        /// &lt;_supportingPoints_&gt;.
        /// - The reference route may contain traffic incidents of type
        /// _ROAD_CLOSURE_, which are
        /// ignored for the calculation of the reference route's travel time
        /// and traffic delay.</param>
        /// <param name="avoidVignette">This is a list of 3-character, ISO
        /// 3166-1, alpha-3 country codes of countries in which all toll roads
        /// with vignettes are to be avoided, e.g. "AUS,CHE". Toll roads with
        /// vignettes in countries not in the list are unaffected. Note: It is
        /// an error to specify both **avoidVignette** and
        /// **allowVignette**.</param>
        /// <param name="allowVignette">This is a list of 3-character, ISO
        /// 3166-1, alpha-3 country codes of countries in which toll roads with
        /// vignettes are allowed, e.g. "AUS,CHE". Specifying **allowVignette**
        /// with some countries X is equivalent to specifying **avoidVignette**
        /// with all countries but X. Specifying **allowVignette** with an
        /// empty list is the same as avoiding all toll roads with vignettes.
        /// Note: It is an error to specify both **avoidVignette** and
        /// **allowVignette**.</param>
        /// <param name="avoidAreas">A GeoJSON MultiPolygon representing list
        /// of areas to avoid. Only rectangle polygons are supported. The
        /// maximum size of a rectangle is about 160x160 km. Maximum number of
        /// avoided areas is **10**. It cannot cross the 180th meridian. It
        /// must be between -80 and +80 degrees of latitude.</param>
        public PostRouteDirectionsRequestBody(GeoJsonGeometryCollection supportingPoints = default(GeoJsonGeometryCollection), IList<string> avoidVignette = default(IList<string>), IList<string> allowVignette = default(IList<string>), GeoJsonMultiPolygon avoidAreas = default(GeoJsonMultiPolygon))
        {
            SupportingPoints = supportingPoints;
            AvoidVignette = avoidVignette;
            AllowVignette = allowVignette;
            AvoidAreas = avoidAreas;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets a GeoJSON Geometry collection representing sequence of
        /// coordinates used as input for route reconstruction and for
        /// calculating zero or more alternative routes to this reference
        /// route.
        /// - The provided sequence of supporting points is used as input for
        /// route reconstruction.
        /// - The alternative routes are calculated between the origin and
        /// destination points specified in the base path parameter locations.
        /// - If both _minDeviationDistance_ and _minDeviationTime_ are set to
        /// zero, then these origin and destination points are
        /// expected to be at (or very near) the beginning and end of the
        /// reference route, respectively.
        /// - Intermediate locations (_waypoints_) are not supported when using
        /// &amp;lt;_supportingPoints_&amp;gt;.
        /// - The reference route may contain traffic incidents of type
        /// _ROAD_CLOSURE_, which are
        /// ignored for the calculation of the reference route's travel time
        /// and traffic delay.
        /// </summary>
        [JsonProperty(PropertyName = "supportingPoints")]
        public GeoJsonGeometryCollection SupportingPoints { get; set; }

        /// <summary>
        /// Gets or sets this is a list of 3-character, ISO 3166-1, alpha-3
        /// country codes of countries in which all toll roads with vignettes
        /// are to be avoided, e.g. "AUS,CHE". Toll roads with vignettes in
        /// countries not in the list are unaffected. Note: It is an error to
        /// specify both **avoidVignette** and **allowVignette**.
        /// </summary>
        [JsonProperty(PropertyName = "avoidVignette")]
        public IList<string> AvoidVignette { get; set; }

        /// <summary>
        /// Gets or sets this is a list of 3-character, ISO 3166-1, alpha-3
        /// country codes of countries in which toll roads with vignettes are
        /// allowed, e.g. "AUS,CHE". Specifying **allowVignette** with some
        /// countries X is equivalent to specifying **avoidVignette** with all
        /// countries but X. Specifying **allowVignette** with an empty list is
        /// the same as avoiding all toll roads with vignettes. Note: It is an
        /// error to specify both **avoidVignette** and **allowVignette**.
        /// </summary>
        [JsonProperty(PropertyName = "allowVignette")]
        public IList<string> AllowVignette { get; set; }

        /// <summary>
        /// Gets or sets a GeoJSON MultiPolygon representing list of areas to
        /// avoid. Only rectangle polygons are supported. The maximum size of a
        /// rectangle is about 160x160 km. Maximum number of avoided areas is
        /// **10**. It cannot cross the 180th meridian. It must be between -80
        /// and +80 degrees of latitude.
        /// </summary>
        [JsonProperty(PropertyName = "avoidAreas")]
        public GeoJsonMultiPolygon AvoidAreas { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (SupportingPoints != null)
            {
                SupportingPoints.Validate();
            }
            if (AvoidAreas != null)
            {
                AvoidAreas.Validate();
            }
        }
    }
}
