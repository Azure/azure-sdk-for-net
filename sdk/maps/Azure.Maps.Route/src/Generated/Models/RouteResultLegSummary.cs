// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.Maps.Route.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Summary object for route section.
    /// </summary>
    public partial class RouteResultLegSummary
    {
        /// <summary>
        /// Initializes a new instance of the RouteResultLegSummary class.
        /// </summary>
        public RouteResultLegSummary()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RouteResultLegSummary class.
        /// </summary>
        /// <param name="lengthInMeters">Length In Meters property</param>
        /// <param name="travelTimeInSeconds">Estimated travel time in seconds
        /// property that includes the delay due to real-time traffic. Note
        /// that even when traffic=false travelTimeInSeconds still includes the
        /// delay due to traffic. If DepartAt is in the future, travel time is
        /// calculated using time-dependent historic traffic data.</param>
        /// <param name="trafficDelayInSeconds">Estimated delay in seconds
        /// caused by the real-time incident(s) according to traffic
        /// information. For routes planned with departure time in the future,
        /// delays is always 0. To return additional travel times using
        /// different types of traffic information, parameter
        /// computeTravelTimeFor=all needs to be added.</param>
        /// <param name="departureTime">Departure Time property</param>
        /// <param name="arrivalTime">Arrival Time property</param>
        /// <param name="noTrafficTravelTimeInSeconds">Estimated travel time
        /// calculated as if there are no delays on the route due to traffic
        /// conditions (e.g. congestion). Included only if computeTravelTimeFor
        /// = all is used in the query.</param>
        /// <param name="historicTrafficTravelTimeInSeconds">Estimated travel
        /// time calculated using time-dependent historic traffic data.
        /// Included only if computeTravelTimeFor = all is used in the
        /// query.</param>
        /// <param name="liveTrafficIncidentsTravelTimeInSeconds">Estimated
        /// travel time calculated using real-time speed data. Included only if
        /// computeTravelTimeFor = all is used in the query.</param>
        /// <param name="fuelConsumptionInLiters">Estimated fuel consumption in
        /// liters using the Combustion Consumption Model. Included if
        /// vehicleEngineType is set to _combustion_ and
        /// constantSpeedConsumptionInLitersPerHundredkm is specified. The
        /// value will be non-negative.</param>
        /// <param name="batteryConsumptionInkWh">Estimated electric energy
        /// consumption in kilowatt hours (kWh) using the Electric Consumption
        /// Model. Included if vehicleEngineType is set to electric and
        /// constantSpeedConsumptionInkWhPerHundredkm is specified. The value
        /// of batteryConsumptionInkWh includes the recuperated electric energy
        /// and can therefore be negative (which indicates gaining energy). If
        /// both maxChargeInkWh and currentChargeInkWh are specified,
        /// recuperation will be capped to ensure that the battery charge level
        /// never exceeds maxChargeInkWh. If neither maxChargeInkWh nor
        /// currentChargeInkWh are specified, unconstrained recuperation is
        /// assumed in the consumption calculation.</param>
        public RouteResultLegSummary(int? lengthInMeters = default(int?), int? travelTimeInSeconds = default(int?), int? trafficDelayInSeconds = default(int?), string departureTime = default(string), string arrivalTime = default(string), int? noTrafficTravelTimeInSeconds = default(int?), int? historicTrafficTravelTimeInSeconds = default(int?), int? liveTrafficIncidentsTravelTimeInSeconds = default(int?), double? fuelConsumptionInLiters = default(double?), double? batteryConsumptionInkWh = default(double?))
        {
            LengthInMeters = lengthInMeters;
            TravelTimeInSeconds = travelTimeInSeconds;
            TrafficDelayInSeconds = trafficDelayInSeconds;
            DepartureTime = departureTime;
            ArrivalTime = arrivalTime;
            NoTrafficTravelTimeInSeconds = noTrafficTravelTimeInSeconds;
            HistoricTrafficTravelTimeInSeconds = historicTrafficTravelTimeInSeconds;
            LiveTrafficIncidentsTravelTimeInSeconds = liveTrafficIncidentsTravelTimeInSeconds;
            FuelConsumptionInLiters = fuelConsumptionInLiters;
            BatteryConsumptionInkWh = batteryConsumptionInkWh;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets length In Meters property
        /// </summary>
        [JsonProperty(PropertyName = "lengthInMeters")]
        public int? LengthInMeters { get; private set; }

        /// <summary>
        /// Gets estimated travel time in seconds property that includes the
        /// delay due to real-time traffic. Note that even when traffic=false
        /// travelTimeInSeconds still includes the delay due to traffic. If
        /// DepartAt is in the future, travel time is calculated using
        /// time-dependent historic traffic data.
        /// </summary>
        [JsonProperty(PropertyName = "travelTimeInSeconds")]
        public int? TravelTimeInSeconds { get; private set; }

        /// <summary>
        /// Gets estimated delay in seconds caused by the real-time incident(s)
        /// according to traffic information. For routes planned with departure
        /// time in the future, delays is always 0. To return additional travel
        /// times using different types of traffic information, parameter
        /// computeTravelTimeFor=all needs to be added.
        /// </summary>
        [JsonProperty(PropertyName = "trafficDelayInSeconds")]
        public int? TrafficDelayInSeconds { get; private set; }

        /// <summary>
        /// Gets departure Time property
        /// </summary>
        [JsonProperty(PropertyName = "departureTime")]
        public string DepartureTime { get; private set; }

        /// <summary>
        /// Gets arrival Time property
        /// </summary>
        [JsonProperty(PropertyName = "arrivalTime")]
        public string ArrivalTime { get; private set; }

        /// <summary>
        /// Gets estimated travel time calculated as if there are no delays on
        /// the route due to traffic conditions (e.g. congestion). Included
        /// only if computeTravelTimeFor = all is used in the query.
        /// </summary>
        [JsonProperty(PropertyName = "noTrafficTravelTimeInSeconds")]
        public int? NoTrafficTravelTimeInSeconds { get; private set; }

        /// <summary>
        /// Gets estimated travel time calculated using time-dependent historic
        /// traffic data. Included only if computeTravelTimeFor = all is used
        /// in the query.
        /// </summary>
        [JsonProperty(PropertyName = "historicTrafficTravelTimeInSeconds")]
        public int? HistoricTrafficTravelTimeInSeconds { get; private set; }

        /// <summary>
        /// Gets estimated travel time calculated using real-time speed data.
        /// Included only if computeTravelTimeFor = all is used in the query.
        /// </summary>
        [JsonProperty(PropertyName = "liveTrafficIncidentsTravelTimeInSeconds")]
        public int? LiveTrafficIncidentsTravelTimeInSeconds { get; private set; }

        /// <summary>
        /// Gets estimated fuel consumption in liters using the Combustion
        /// Consumption Model. Included if vehicleEngineType is set to
        /// _combustion_ and constantSpeedConsumptionInLitersPerHundredkm is
        /// specified. The value will be non-negative.
        /// </summary>
        [JsonProperty(PropertyName = "fuelConsumptionInLiters")]
        public double? FuelConsumptionInLiters { get; private set; }

        /// <summary>
        /// Gets estimated electric energy consumption in kilowatt hours (kWh)
        /// using the Electric Consumption Model. Included if vehicleEngineType
        /// is set to electric and constantSpeedConsumptionInkWhPerHundredkm is
        /// specified. The value of batteryConsumptionInkWh includes the
        /// recuperated electric energy and can therefore be negative (which
        /// indicates gaining energy). If both maxChargeInkWh and
        /// currentChargeInkWh are specified, recuperation will be capped to
        /// ensure that the battery charge level never exceeds maxChargeInkWh.
        /// If neither maxChargeInkWh nor currentChargeInkWh are specified,
        /// unconstrained recuperation is assumed in the consumption
        /// calculation.
        /// </summary>
        [JsonProperty(PropertyName = "batteryConsumptionInkWh")]
        public double? BatteryConsumptionInkWh { get; private set; }

    }
}
