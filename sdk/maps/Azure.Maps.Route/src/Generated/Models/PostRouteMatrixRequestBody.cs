// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.Maps.Route.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// An object with a matrix of coordinates.
    /// </summary>
    public partial class PostRouteMatrixRequestBody
    {
        /// <summary>
        /// Initializes a new instance of the PostRouteMatrixRequestBody class.
        /// </summary>
        public PostRouteMatrixRequestBody()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PostRouteMatrixRequestBody class.
        /// </summary>
        public PostRouteMatrixRequestBody(GeoJsonMultiPoint origins = default(GeoJsonMultiPoint), GeoJsonMultiPoint destinations = default(GeoJsonMultiPoint))
        {
            Origins = origins;
            Destinations = destinations;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "origins")]
        public GeoJsonMultiPoint Origins { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "destinations")]
        public GeoJsonMultiPoint Destinations { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Origins != null)
            {
                Origins.Validate();
            }
            if (Destinations != null)
            {
                Destinations.Validate();
            }
        }
    }
}
