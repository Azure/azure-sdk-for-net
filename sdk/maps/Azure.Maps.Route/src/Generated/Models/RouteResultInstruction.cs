// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.Maps.Route.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A set of attributes describing a maneuver, e.g. 'Turn right', 'Keep
    /// left', 'Take the ferry', 'Take the motorway', 'Arrive'.
    /// </summary>
    public partial class RouteResultInstruction
    {
        /// <summary>
        /// Initializes a new instance of the RouteResultInstruction class.
        /// </summary>
        public RouteResultInstruction()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RouteResultInstruction class.
        /// </summary>
        /// <param name="routeOffsetInMeters">Distance from the start of the
        /// route to the point of the instruction.</param>
        /// <param name="travelTimeInSeconds">Estimated travel time up to the
        /// point corresponding to routeOffsetInMeters.</param>
        /// <param name="pointIndex">The index of the point in the list of
        /// polyline "points" corresponding to the point of the
        /// instruction.</param>
        /// <param name="instructionType">Type of the instruction, e.g., turn
        /// or change of road form. Possible values include: 'TURN',
        /// 'ROAD_CHANGE', 'LOCATION_DEPARTURE', 'LOCATION_ARRIVAL',
        /// 'DIRECTION_INFO', 'LOCATION_WAYPOINT'</param>
        /// <param name="roadNumbers">The road number(s) of the next
        /// significant road segment(s) after the maneuver, or of the road(s)
        /// to be followed. Example: ["E34", "N205"]</param>
        /// <param name="exitNumber">The number(s) of a highway exit taken by
        /// the current maneuver. If an exit has multiple exit numbers, they
        /// will be separated by "," and possibly aggregated by "-", e.g., "10,
        /// 13-15".</param>
        /// <param name="street">Street name of the next significant road
        /// segment after the maneuver, or of the street that should be
        /// followed.</param>
        /// <param name="signpostText">The text on a signpost which is most
        /// relevant to the maneuver, or to the direction that should be
        /// followed.</param>
        /// <param name="countryCode">3-character [ISO
        /// 3166-1](https://www.iso.org/iso-3166-country-codes.html) alpha-3
        /// country code. E.g. USA.</param>
        /// <param name="stateCode">A subdivision (e.g., state) of the country,
        /// represented by the second part of an [ISO
        /// 3166-2](https://www.iso.org/standard/63546.html) code. This is only
        /// available for some countries like the US, Canada, and
        /// Mexico.</param>
        /// <param name="junctionType">The type of the junction where the
        /// maneuver takes place. For larger roundabouts, two separate
        /// instructions are generated for entering and leaving the roundabout.
        /// Possible values include: 'REGULAR', 'ROUNDABOUT',
        /// 'BIFURCATION'</param>
        /// <param name="turnAngleInDecimalDegrees">Indicates the direction of
        /// an instruction. If junctionType indicates a turn instruction:
        ///
        /// * 180 = U-turn
        /// * [-179, -1] = Left turn
        /// * 0 = Straight on (a '0 degree' turn)
        /// * [1, 179] = Right turn
        ///
        /// If junctionType indicates a bifurcation instruction:
        ///
        /// * &lt;0 - keep left
        /// * \&gt;0 - keep right</param>
        /// <param name="roundaboutExitNumber">This indicates which exit to
        /// take at a roundabout.</param>
        /// <param name="possibleCombineWithNext">It is possible to optionally
        /// combine the instruction with the next one. This can be used to
        /// build messages like "Turn left and then turn right".</param>
        /// <param name="drivingSide">Indicates left-hand vs. right-hand side
        /// driving at the point of the maneuver. Possible values include:
        /// 'LEFT', 'RIGHT'</param>
        /// <param name="maneuver">A code identifying the maneuver. Possible
        /// values include: 'ARRIVE', 'ARRIVE_LEFT', 'ARRIVE_RIGHT', 'DEPART',
        /// 'STRAIGHT', 'KEEP_RIGHT', 'BEAR_RIGHT', 'TURN_RIGHT',
        /// 'SHARP_RIGHT', 'KEEP_LEFT', 'BEAR_LEFT', 'TURN_LEFT', 'SHARP_LEFT',
        /// 'MAKE_UTURN', 'ENTER_MOTORWAY', 'ENTER_FREEWAY', 'ENTER_HIGHWAY',
        /// 'TAKE_EXIT', 'MOTORWAY_EXIT_LEFT', 'MOTORWAY_EXIT_RIGHT',
        /// 'TAKE_FERRY', 'ROUNDABOUT_CROSS', 'ROUNDABOUT_RIGHT',
        /// 'ROUNDABOUT_LEFT', 'ROUNDABOUT_BACK', 'TRY_MAKE_UTURN', 'FOLLOW',
        /// 'SWITCH_PARALLEL_ROAD', 'SWITCH_MAIN_ROAD', 'ENTRANCE_RAMP',
        /// 'WAYPOINT_LEFT', 'WAYPOINT_RIGHT', 'WAYPOINT_REACHED'</param>
        /// <param name="message">A human-readable message for the
        /// maneuver.</param>
        /// <param name="combinedMessage">A human-readable message for the
        /// maneuver combined with the message from the next instruction.
        /// Sometimes it is possible to combine two successive instructions
        /// into a single instruction making it easier to follow. When this is
        /// the case the possibleCombineWithNext flag will be true. For
        /// example:
        ///
        /// ```
        /// 10. Turn left onto Einsteinweg/A10/E22 towards Ring Amsterdam
        /// 11. Follow Einsteinweg/A10/E22 towards Ring Amsterdam
        /// ```
        ///
        /// The possibleCombineWithNext flag on instruction 10 is true. This
        /// indicates to the clients of coded guidance that it can be combined
        /// with instruction 11. The instructions will be combined
        /// automatically for clients requesting human-readable guidance. The
        /// combinedMessage field contains the combined message:
        ///
        /// ```
        /// Turn left onto Einsteinweg/A10/E22 towards Ring Amsterdam
        /// then follow Einsteinweg/A10/E22 towards Ring Amsterdam.
        /// ```</param>
        public RouteResultInstruction(int? routeOffsetInMeters = default(int?), int? travelTimeInSeconds = default(int?), CoordinatesPair point = default(CoordinatesPair), int? pointIndex = default(int?), string instructionType = default(string), IList<string> roadNumbers = default(IList<string>), string exitNumber = default(string), string street = default(string), string signpostText = default(string), string countryCode = default(string), string stateCode = default(string), string junctionType = default(string), int? turnAngleInDecimalDegrees = default(int?), string roundaboutExitNumber = default(string), bool? possibleCombineWithNext = default(bool?), string drivingSide = default(string), string maneuver = default(string), string message = default(string), string combinedMessage = default(string))
        {
            RouteOffsetInMeters = routeOffsetInMeters;
            TravelTimeInSeconds = travelTimeInSeconds;
            Point = point;
            PointIndex = pointIndex;
            InstructionType = instructionType;
            RoadNumbers = roadNumbers;
            ExitNumber = exitNumber;
            Street = street;
            SignpostText = signpostText;
            CountryCode = countryCode;
            StateCode = stateCode;
            JunctionType = junctionType;
            TurnAngleInDecimalDegrees = turnAngleInDecimalDegrees;
            RoundaboutExitNumber = roundaboutExitNumber;
            PossibleCombineWithNext = possibleCombineWithNext;
            DrivingSide = drivingSide;
            Maneuver = maneuver;
            Message = message;
            CombinedMessage = combinedMessage;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets distance from the start of the route to the point of the
        /// instruction.
        /// </summary>
        [JsonProperty(PropertyName = "routeOffsetInMeters")]
        public int? RouteOffsetInMeters { get; private set; }

        /// <summary>
        /// Gets estimated travel time up to the point corresponding to
        /// routeOffsetInMeters.
        /// </summary>
        [JsonProperty(PropertyName = "travelTimeInSeconds")]
        public int? TravelTimeInSeconds { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "point")]
        public CoordinatesPair Point { get; set; }

        /// <summary>
        /// Gets the index of the point in the list of polyline "points"
        /// corresponding to the point of the instruction.
        /// </summary>
        [JsonProperty(PropertyName = "pointIndex")]
        public int? PointIndex { get; private set; }

        /// <summary>
        /// Gets or sets type of the instruction, e.g., turn or change of road
        /// form. Possible values include: 'TURN', 'ROAD_CHANGE',
        /// 'LOCATION_DEPARTURE', 'LOCATION_ARRIVAL', 'DIRECTION_INFO',
        /// 'LOCATION_WAYPOINT'
        /// </summary>
        [JsonProperty(PropertyName = "instructionType")]
        public string InstructionType { get; set; }

        /// <summary>
        /// Gets the road number(s) of the next significant road segment(s)
        /// after the maneuver, or of the road(s) to be followed. Example:
        /// ["E34", "N205"]
        /// </summary>
        [JsonProperty(PropertyName = "roadNumbers")]
        public IList<string> RoadNumbers { get; private set; }

        /// <summary>
        /// Gets the number(s) of a highway exit taken by the current maneuver.
        /// If an exit has multiple exit numbers, they will be separated by ","
        /// and possibly aggregated by "-", e.g., "10, 13-15".
        /// </summary>
        [JsonProperty(PropertyName = "exitNumber")]
        public string ExitNumber { get; private set; }

        /// <summary>
        /// Gets street name of the next significant road segment after the
        /// maneuver, or of the street that should be followed.
        /// </summary>
        [JsonProperty(PropertyName = "street")]
        public string Street { get; private set; }

        /// <summary>
        /// Gets the text on a signpost which is most relevant to the maneuver,
        /// or to the direction that should be followed.
        /// </summary>
        [JsonProperty(PropertyName = "signpostText")]
        public string SignpostText { get; private set; }

        /// <summary>
        /// Gets 3-character [ISO
        /// 3166-1](https://www.iso.org/iso-3166-country-codes.html) alpha-3
        /// country code. E.g. USA.
        /// </summary>
        [JsonProperty(PropertyName = "countryCode")]
        public string CountryCode { get; private set; }

        /// <summary>
        /// Gets a subdivision (e.g., state) of the country, represented by the
        /// second part of an [ISO
        /// 3166-2](https://www.iso.org/standard/63546.html) code. This is only
        /// available for some countries like the US, Canada, and Mexico.
        /// </summary>
        [JsonProperty(PropertyName = "stateCode")]
        public string StateCode { get; private set; }

        /// <summary>
        /// Gets the type of the junction where the maneuver takes place. For
        /// larger roundabouts, two separate instructions are generated for
        /// entering and leaving the roundabout. Possible values include:
        /// 'REGULAR', 'ROUNDABOUT', 'BIFURCATION'
        /// </summary>
        [JsonProperty(PropertyName = "junctionType")]
        public string JunctionType { get; private set; }

        /// <summary>
        /// Gets indicates the direction of an instruction. If junctionType
        /// indicates a turn instruction:
        ///
        /// * 180 = U-turn
        /// * [-179, -1] = Left turn
        /// * 0 = Straight on (a '0 degree' turn)
        /// * [1, 179] = Right turn
        ///
        /// If junctionType indicates a bifurcation instruction:
        ///
        /// * &amp;lt;0 - keep left
        /// * \&amp;gt;0 - keep right
        /// </summary>
        [JsonProperty(PropertyName = "turnAngleInDecimalDegrees")]
        public int? TurnAngleInDecimalDegrees { get; private set; }

        /// <summary>
        /// Gets this indicates which exit to take at a roundabout.
        /// </summary>
        [JsonProperty(PropertyName = "roundaboutExitNumber")]
        public string RoundaboutExitNumber { get; private set; }

        /// <summary>
        /// Gets it is possible to optionally combine the instruction with the
        /// next one. This can be used to build messages like "Turn left and
        /// then turn right".
        /// </summary>
        [JsonProperty(PropertyName = "possibleCombineWithNext")]
        public bool? PossibleCombineWithNext { get; private set; }

        /// <summary>
        /// Gets indicates left-hand vs. right-hand side driving at the point
        /// of the maneuver. Possible values include: 'LEFT', 'RIGHT'
        /// </summary>
        [JsonProperty(PropertyName = "drivingSide")]
        public string DrivingSide { get; private set; }

        /// <summary>
        /// Gets a code identifying the maneuver. Possible values include:
        /// 'ARRIVE', 'ARRIVE_LEFT', 'ARRIVE_RIGHT', 'DEPART', 'STRAIGHT',
        /// 'KEEP_RIGHT', 'BEAR_RIGHT', 'TURN_RIGHT', 'SHARP_RIGHT',
        /// 'KEEP_LEFT', 'BEAR_LEFT', 'TURN_LEFT', 'SHARP_LEFT', 'MAKE_UTURN',
        /// 'ENTER_MOTORWAY', 'ENTER_FREEWAY', 'ENTER_HIGHWAY', 'TAKE_EXIT',
        /// 'MOTORWAY_EXIT_LEFT', 'MOTORWAY_EXIT_RIGHT', 'TAKE_FERRY',
        /// 'ROUNDABOUT_CROSS', 'ROUNDABOUT_RIGHT', 'ROUNDABOUT_LEFT',
        /// 'ROUNDABOUT_BACK', 'TRY_MAKE_UTURN', 'FOLLOW',
        /// 'SWITCH_PARALLEL_ROAD', 'SWITCH_MAIN_ROAD', 'ENTRANCE_RAMP',
        /// 'WAYPOINT_LEFT', 'WAYPOINT_RIGHT', 'WAYPOINT_REACHED'
        /// </summary>
        [JsonProperty(PropertyName = "maneuver")]
        public string Maneuver { get; private set; }

        /// <summary>
        /// Gets a human-readable message for the maneuver.
        /// </summary>
        [JsonProperty(PropertyName = "message")]
        public string Message { get; private set; }

        /// <summary>
        /// Gets a human-readable message for the maneuver combined with the
        /// message from the next instruction. Sometimes it is possible to
        /// combine two successive instructions into a single instruction
        /// making it easier to follow. When this is the case the
        /// possibleCombineWithNext flag will be true. For example:
        ///
        /// ```
        /// 10. Turn left onto Einsteinweg/A10/E22 towards Ring Amsterdam
        /// 11. Follow Einsteinweg/A10/E22 towards Ring Amsterdam
        /// ```
        ///
        /// The possibleCombineWithNext flag on instruction 10 is true. This
        /// indicates to the clients of coded guidance that it can be combined
        /// with instruction 11. The instructions will be combined
        /// automatically for clients requesting human-readable guidance. The
        /// combinedMessage field contains the combined message:
        ///
        /// ```
        /// Turn left onto Einsteinweg/A10/E22 towards Ring Amsterdam
        /// then follow Einsteinweg/A10/E22 towards Ring Amsterdam.
        /// ```
        /// </summary>
        [JsonProperty(PropertyName = "combinedMessage")]
        public string CombinedMessage { get; private set; }

    }
}
