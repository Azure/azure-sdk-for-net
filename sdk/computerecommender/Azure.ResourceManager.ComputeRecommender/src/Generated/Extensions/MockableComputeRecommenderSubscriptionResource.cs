// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.ComputeRecommender.Models;

namespace Azure.ResourceManager.ComputeRecommender.Mocking
{
    /// <summary> A class to add extension methods to SubscriptionResource. </summary>
    public partial class MockableComputeRecommenderSubscriptionResource : ArmResource
    {
        private ClientDiagnostics _spotPlacementScoresClientDiagnostics;
        private SpotPlacementScoresRestOperations _spotPlacementScoresRestClient;

        /// <summary> Initializes a new instance of the <see cref="MockableComputeRecommenderSubscriptionResource"/> class for mocking. </summary>
        protected MockableComputeRecommenderSubscriptionResource()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="MockableComputeRecommenderSubscriptionResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MockableComputeRecommenderSubscriptionResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics SpotPlacementScoresClientDiagnostics => _spotPlacementScoresClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.ComputeRecommender", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private SpotPlacementScoresRestOperations SpotPlacementScoresRestClient => _spotPlacementScoresRestClient ??= new SpotPlacementScoresRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary>
        /// Gets Spot Placement Scores metadata.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/placementScores/spot</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ComputeDiagnosticBase_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-05</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="location"> The name of the Azure region. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<ComputeDiagnosticBase>> GetSpotPlacementScoreAsync(AzureLocation location, CancellationToken cancellationToken = default)
        {
            using var scope = SpotPlacementScoresClientDiagnostics.CreateScope("MockableComputeRecommenderSubscriptionResource.GetSpotPlacementScore");
            scope.Start();
            try
            {
                var response = await SpotPlacementScoresRestClient.GetAsync(Id.SubscriptionId, location, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets Spot Placement Scores metadata.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/placementScores/spot</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ComputeDiagnosticBase_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-05</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="location"> The name of the Azure region. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<ComputeDiagnosticBase> GetSpotPlacementScore(AzureLocation location, CancellationToken cancellationToken = default)
        {
            using var scope = SpotPlacementScoresClientDiagnostics.CreateScope("MockableComputeRecommenderSubscriptionResource.GetSpotPlacementScore");
            scope.Start();
            try
            {
                var response = SpotPlacementScoresRestClient.Get(Id.SubscriptionId, location, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Generates placement scores for Spot VM skus.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/placementScores/spot/generate</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ComputeDiagnosticBases_Post</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-05</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="location"> The name of the Azure region. </param>
        /// <param name="content"> SpotPlacementScores object supplied in the body of the Post spot placement scores operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        public virtual async Task<Response<SpotPlacementScoresResult>> PostSpotPlacementScoreAsync(AzureLocation location, SpotPlacementScoresContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = SpotPlacementScoresClientDiagnostics.CreateScope("MockableComputeRecommenderSubscriptionResource.PostSpotPlacementScore");
            scope.Start();
            try
            {
                var response = await SpotPlacementScoresRestClient.PostAsync(Id.SubscriptionId, location, content, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Generates placement scores for Spot VM skus.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.Compute/locations/{location}/placementScores/spot/generate</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>ComputeDiagnosticBases_Post</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2025-06-05</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="location"> The name of the Azure region. </param>
        /// <param name="content"> SpotPlacementScores object supplied in the body of the Post spot placement scores operation. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        public virtual Response<SpotPlacementScoresResult> PostSpotPlacementScore(AzureLocation location, SpotPlacementScoresContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(content, nameof(content));

            using var scope = SpotPlacementScoresClientDiagnostics.CreateScope("MockableComputeRecommenderSubscriptionResource.PostSpotPlacementScore");
            scope.Start();
            try
            {
                var response = SpotPlacementScoresRestClient.Post(Id.SubscriptionId, location, content, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
