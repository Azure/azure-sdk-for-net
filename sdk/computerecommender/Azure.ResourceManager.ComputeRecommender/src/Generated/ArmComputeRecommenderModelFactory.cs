// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.ComputeRecommender.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmComputeRecommenderModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Models.ComputeDiagnosticBase"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="diagnosticSupportedResourceTypes"> Contains additional properties of a diagnostic. </param>
        /// <returns> A new <see cref="Models.ComputeDiagnosticBase"/> instance for mocking. </returns>
        public static ComputeDiagnosticBase ComputeDiagnosticBase(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IEnumerable<string> diagnosticSupportedResourceTypes = null)
        {
            diagnosticSupportedResourceTypes ??= new List<string>();

            return new ComputeDiagnosticBase(
                id,
                name,
                resourceType,
                systemData,
                diagnosticSupportedResourceTypes != null ? new DiagnosticProperties(diagnosticSupportedResourceTypes?.ToList(), serializedAdditionalRawData: null) : null,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SpotPlacementScoresResult"/>. </summary>
        /// <param name="desiredLocations"> The desired regions. </param>
        /// <param name="desiredSizes"> The desired virtual machine SKU sizes. </param>
        /// <param name="desiredCount"> Desired instance count per region/zone based on the scope. </param>
        /// <param name="availabilityZones"> Defines if the scope is zonal or regional. </param>
        /// <param name="placementScores"> A placement score indicating the likelihood of successfully allocating the specified Spot VM(s), as well as the expected lifetimes of the Spot VM(s) after allocation. </param>
        /// <returns> A new <see cref="Models.SpotPlacementScoresResult"/> instance for mocking. </returns>
        public static SpotPlacementScoresResult SpotPlacementScoresResult(IEnumerable<AzureLocation> desiredLocations = null, IEnumerable<ComputeRecommenderResourceSize> desiredSizes = null, int? desiredCount = null, bool? availabilityZones = null, IEnumerable<ComputeRecommenderPlacementScore> placementScores = null)
        {
            desiredLocations ??= new List<AzureLocation>();
            desiredSizes ??= new List<ComputeRecommenderResourceSize>();
            placementScores ??= new List<ComputeRecommenderPlacementScore>();

            return new SpotPlacementScoresResult(
                desiredLocations?.ToList(),
                desiredSizes?.ToList(),
                desiredCount,
                availabilityZones,
                placementScores?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ComputeRecommenderPlacementScore"/>. </summary>
        /// <param name="sku"> The resource's CRP virtual machine SKU size. </param>
        /// <param name="region"> The region. </param>
        /// <param name="availabilityZone"> The availability zone. </param>
        /// <param name="score"> A placement score indicating the likelihood of successfully allocating the specified Spot VM(s), as well as the expected lifetimes of the Spot VM(s) after allocation. </param>
        /// <param name="isQuotaAvailable"> Whether the desired quota is available. </param>
        /// <returns> A new <see cref="Models.ComputeRecommenderPlacementScore"/> instance for mocking. </returns>
        public static ComputeRecommenderPlacementScore ComputeRecommenderPlacementScore(string sku = null, AzureLocation? region = null, string availabilityZone = null, string score = null, bool? isQuotaAvailable = null)
        {
            return new ComputeRecommenderPlacementScore(
                sku,
                region,
                availabilityZone,
                score,
                isQuotaAvailable,
                serializedAdditionalRawData: null);
        }
    }
}
