// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.ComputeRecommender.Models
{
    /// <summary> SpotPlacementScores API Input. </summary>
    public partial class SpotPlacementScoresContent
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="SpotPlacementScoresContent"/>. </summary>
        public SpotPlacementScoresContent()
        {
            DesiredLocations = new ChangeTrackingList<AzureLocation>();
            DesiredSizes = new ChangeTrackingList<ComputeRecommenderResourceSize>();
        }

        /// <summary> Initializes a new instance of <see cref="SpotPlacementScoresContent"/>. </summary>
        /// <param name="desiredLocations"> The desired regions. </param>
        /// <param name="desiredSizes"> The desired virtual machine SKU sizes. </param>
        /// <param name="desiredCount"> Desired instance count per region/zone based on the scope. </param>
        /// <param name="availabilityZones"> Defines if the scope is zonal or regional. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal SpotPlacementScoresContent(IList<AzureLocation> desiredLocations, IList<ComputeRecommenderResourceSize> desiredSizes, int? desiredCount, bool? availabilityZones, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            DesiredLocations = desiredLocations;
            DesiredSizes = desiredSizes;
            DesiredCount = desiredCount;
            AvailabilityZones = availabilityZones;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The desired regions. </summary>
        public IList<AzureLocation> DesiredLocations { get; }
        /// <summary> The desired virtual machine SKU sizes. </summary>
        public IList<ComputeRecommenderResourceSize> DesiredSizes { get; }
        /// <summary> Desired instance count per region/zone based on the scope. </summary>
        public int? DesiredCount { get; set; }
        /// <summary> Defines if the scope is zonal or regional. </summary>
        public bool? AvailabilityZones { get; set; }
    }
}
