// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace ADP.DataManagement.Ingestion.Uploads
{
    /// <summary> Known upload operation types. </summary>
    public readonly partial struct UploadOperationType : IEquatable<UploadOperationType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="UploadOperationType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public UploadOperationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string FinalizeFileListValue = "FinalizeFileList";
        private const string ShardFilesValue = "ShardFiles";
        private const string CompleteUploadValue = "CompleteUpload";
        private const string AbortUploadValue = "AbortUpload";

        /// <summary> The process of finalizing the file list of the upload. </summary>
        public static UploadOperationType FinalizeFileList { get; } = new UploadOperationType(FinalizeFileListValue);
        /// <summary> The process of sharding the files for the upload. </summary>
        public static UploadOperationType ShardFiles { get; } = new UploadOperationType(ShardFilesValue);
        /// <summary> The process of completing the upload. </summary>
        public static UploadOperationType CompleteUpload { get; } = new UploadOperationType(CompleteUploadValue);
        /// <summary> The process of cancelling the upload. </summary>
        public static UploadOperationType AbortUpload { get; } = new UploadOperationType(AbortUploadValue);
        /// <summary> Determines if two <see cref="UploadOperationType"/> values are the same. </summary>
        public static bool operator ==(UploadOperationType left, UploadOperationType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="UploadOperationType"/> values are not the same. </summary>
        public static bool operator !=(UploadOperationType left, UploadOperationType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="UploadOperationType"/>. </summary>
        public static implicit operator UploadOperationType(string value) => new UploadOperationType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is UploadOperationType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(UploadOperationType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
