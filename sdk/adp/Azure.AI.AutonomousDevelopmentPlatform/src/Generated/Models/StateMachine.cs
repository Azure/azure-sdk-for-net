// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Azure.AI.AutonomousDevelopmentPlatform.Models
{
    /// <summary> State machine. </summary>
    public partial class StateMachine
    {
        /// <summary> Initializes a new instance of StateMachine. </summary>
        /// <param name="id"></param>
        /// <param name="type"></param>
        /// <param name="availableActionNames"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="id"/>, <paramref name="type"/> or <paramref name="availableActionNames"/> is null. </exception>
        internal StateMachine(string id, string type, IEnumerable<string> availableActionNames)
        {
            Argument.AssertNotNull(id, nameof(id));
            Argument.AssertNotNull(type, nameof(type));
            Argument.AssertNotNull(availableActionNames, nameof(availableActionNames));

            Id = id;
            Type = type;
            AvailableActionNames = availableActionNames.ToList();
        }

        /// <summary> Initializes a new instance of StateMachine. </summary>
        /// <param name="id"></param>
        /// <param name="type"></param>
        /// <param name="availableActionNames"></param>
        internal StateMachine(string id, string type, IReadOnlyList<string> availableActionNames)
        {
            Id = id;
            Type = type;
            AvailableActionNames = availableActionNames.ToList();
        }

        /// <summary> Gets the id. </summary>
        public string Id { get; }
        /// <summary> Gets the type. </summary>
        public string Type { get; }
        /// <summary> Gets the available action names. </summary>
        public IReadOnlyList<string> AvailableActionNames { get; }
    }
}
