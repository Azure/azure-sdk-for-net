// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Azure.AI.AutonomousDevelopmentPlatform.Models
{
    public partial class DataStreamLineage : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("producerMetadata");
            writer.WriteStartObject();
            foreach (var item in ProducerMetadata)
            {
                writer.WritePropertyName(item.Key);
                writer.WriteStringValue(item.Value);
            }
            writer.WriteEndObject();
            writer.WritePropertyName("inputs");
            writer.WriteStartArray();
            foreach (var item in Inputs)
            {
                writer.WriteObjectValue(item);
            }
            writer.WriteEndArray();
            writer.WriteEndObject();
        }

        internal static DataStreamLineage DeserializeDataStreamLineage(JsonElement element)
        {
            IDictionary<string, string> producerMetadata = default;
            IList<DataStreamInput> inputs = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("producerMetadata"))
                {
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    producerMetadata = dictionary;
                    continue;
                }
                if (property.NameEquals("inputs"))
                {
                    List<DataStreamInput> array = new List<DataStreamInput>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DataStreamInput.DeserializeDataStreamInput(item));
                    }
                    inputs = array;
                    continue;
                }
            }
            return new DataStreamLineage(producerMetadata, inputs);
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static DataStreamLineage FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeDataStreamLineage(document.RootElement);
        }

        /// <summary> Convert into a Utf8JsonRequestContent. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }
    }
}
