// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.AI.AutonomousDevelopmentPlatform.Models
{
    /// <summary> Custom query data set: Measurement and metadata. </summary>
    public partial class MeasurementWithMetadata
    {
        /// <summary> Initializes a new instance of MeasurementWithMetadata. </summary>
        /// <param name="measurementId"></param>
        /// <param name="location"></param>
        /// <param name="etag"></param>
        /// <param name="metadata"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="measurementId"/>, <paramref name="location"/>, <paramref name="etag"/> or <paramref name="metadata"/> is null. </exception>
        internal MeasurementWithMetadata(string measurementId, string location, string etag, IReadOnlyDictionary<string, string> metadata)
        {
            Argument.AssertNotNull(measurementId, nameof(measurementId));
            Argument.AssertNotNull(location, nameof(location));
            Argument.AssertNotNull(etag, nameof(etag));
            Argument.AssertNotNull(metadata, nameof(metadata));

            MeasurementId = measurementId;
            Location = location;
            Etag = etag;
            Metadata = metadata;
        }

        /// <summary> Initializes a new instance of MeasurementWithMetadata. </summary>
        /// <param name="measurementId"></param>
        /// <param name="location"></param>
        /// <param name="ingestTimestampUtc"></param>
        /// <param name="resourceEndpoint"></param>
        /// <param name="externalPackageId"></param>
        /// <param name="uploadId"></param>
        /// <param name="discoveryId"></param>
        /// <param name="recordTimestampUtc"></param>
        /// <param name="etag"></param>
        /// <param name="metadata"></param>
        internal MeasurementWithMetadata(string measurementId, string location, DateTimeOffset? ingestTimestampUtc, string resourceEndpoint, string externalPackageId, string uploadId, string discoveryId, DateTimeOffset? recordTimestampUtc, string etag, IReadOnlyDictionary<string, string> metadata)
        {
            MeasurementId = measurementId;
            Location = location;
            IngestTimestampUtc = ingestTimestampUtc;
            ResourceEndpoint = resourceEndpoint;
            ExternalPackageId = externalPackageId;
            UploadId = uploadId;
            DiscoveryId = discoveryId;
            RecordTimestampUtc = recordTimestampUtc;
            Etag = etag;
            Metadata = metadata;
        }

        /// <summary> Gets the measurement id. </summary>
        public string MeasurementId { get; }
        /// <summary> Gets the location. </summary>
        public string Location { get; }
        /// <summary> Gets the ingest timestamp utc. </summary>
        public DateTimeOffset? IngestTimestampUtc { get; }
        /// <summary> Gets the resource endpoint. </summary>
        public string ResourceEndpoint { get; }
        /// <summary> Gets the external package id. </summary>
        public string ExternalPackageId { get; }
        /// <summary> Gets the upload id. </summary>
        public string UploadId { get; }
        /// <summary> Gets the discovery id. </summary>
        public string DiscoveryId { get; }
        /// <summary> Gets the record timestamp utc. </summary>
        public DateTimeOffset? RecordTimestampUtc { get; }
        /// <summary> Gets the etag. </summary>
        public string Etag { get; }
        /// <summary> Gets the metadata. </summary>
        public IReadOnlyDictionary<string, string> Metadata { get; }
    }
}
