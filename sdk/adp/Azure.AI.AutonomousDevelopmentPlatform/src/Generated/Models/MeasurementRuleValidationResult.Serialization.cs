// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Azure.AI.AutonomousDevelopmentPlatform.Models
{
    public partial class MeasurementRuleValidationResult
    {
        internal static MeasurementRuleValidationResult DeserializeMeasurementRuleValidationResult(JsonElement element)
        {
            Optional<string> ruleCategory = default;
            Optional<string> ruleName = default;
            Optional<IReadOnlyDictionary<string, string>> details = default;
            Optional<bool?> validationPassed = default;
            Optional<string> validationError = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("ruleCategory"))
                {
                    ruleCategory = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ruleName"))
                {
                    ruleName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("details"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    details = dictionary;
                    continue;
                }
                if (property.NameEquals("validationPassed"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        validationPassed = null;
                        continue;
                    }
                    validationPassed = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("validationError"))
                {
                    validationError = property.Value.GetString();
                    continue;
                }
            }
            return new MeasurementRuleValidationResult(ruleCategory, ruleName, Optional.ToDictionary(details), Optional.ToNullable(validationPassed), validationError);
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static MeasurementRuleValidationResult FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeMeasurementRuleValidationResult(document.RootElement);
        }
    }
}
