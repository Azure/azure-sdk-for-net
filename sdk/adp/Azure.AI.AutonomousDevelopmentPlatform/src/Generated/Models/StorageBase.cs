// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Azure.AI.AutonomousDevelopmentPlatform.Models
{
    /// <summary> Common data-stream storage model. </summary>
    public partial class StorageBase
    {
        /// <summary> Initializes a new instance of StorageBase. </summary>
        /// <param name="type"></param>
        /// <param name="manifestUri"></param>
        /// <param name="shards"></param>
        /// <param name="etag"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="type"/>, <paramref name="manifestUri"/>, <paramref name="shards"/> or <paramref name="etag"/> is null. </exception>
        internal StorageBase(string type, string manifestUri, IEnumerable<DataStreamShardAccessInformation> shards, string etag)
        {
            Argument.AssertNotNull(type, nameof(type));
            Argument.AssertNotNull(manifestUri, nameof(manifestUri));
            Argument.AssertNotNull(shards, nameof(shards));
            Argument.AssertNotNull(etag, nameof(etag));

            Type = type;
            ManifestUri = manifestUri;
            Shards = shards.ToList();
            Etag = etag;
        }

        /// <summary> Initializes a new instance of StorageBase. </summary>
        /// <param name="type"></param>
        /// <param name="rollingInformation"></param>
        /// <param name="manifestUri"></param>
        /// <param name="dataFolderUri"></param>
        /// <param name="shards"></param>
        /// <param name="etag"></param>
        internal StorageBase(string type, DataStreamRollingInformation rollingInformation, string manifestUri, string dataFolderUri, IReadOnlyList<DataStreamShardAccessInformation> shards, string etag)
        {
            Type = type;
            RollingInformation = rollingInformation;
            ManifestUri = manifestUri;
            DataFolderUri = dataFolderUri;
            Shards = shards.ToList();
            Etag = etag;
        }

        /// <summary> Gets the type. </summary>
        public string Type { get; }
        /// <summary> Gets the rolling information. </summary>
        public DataStreamRollingInformation RollingInformation { get; }
        /// <summary> Gets the manifest uri. </summary>
        public string ManifestUri { get; }
        /// <summary> Gets the data folder uri. </summary>
        public string DataFolderUri { get; }
        /// <summary> Gets the shards. </summary>
        public IReadOnlyList<DataStreamShardAccessInformation> Shards { get; }
        /// <summary> Gets the etag. </summary>
        public string Etag { get; }
    }
}
