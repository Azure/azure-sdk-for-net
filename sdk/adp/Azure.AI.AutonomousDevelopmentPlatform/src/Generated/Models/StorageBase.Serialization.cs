// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Azure.AI.AutonomousDevelopmentPlatform.Models
{
    public partial class StorageBase
    {
        internal static StorageBase DeserializeStorageBase(JsonElement element)
        {
            string type = default;
            Optional<DataStreamRollingInformation> rollingInformation = default;
            string manifestUri = default;
            Optional<string> dataFolderUri = default;
            IReadOnlyList<DataStreamShardAccessInformation> shards = default;
            string etag = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("type"))
                {
                    type = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("rollingInformation"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    rollingInformation = DataStreamRollingInformation.DeserializeDataStreamRollingInformation(property.Value);
                    continue;
                }
                if (property.NameEquals("manifestUri"))
                {
                    manifestUri = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("dataFolderUri"))
                {
                    dataFolderUri = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("shards"))
                {
                    List<DataStreamShardAccessInformation> array = new List<DataStreamShardAccessInformation>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(DataStreamShardAccessInformation.DeserializeDataStreamShardAccessInformation(item));
                    }
                    shards = array;
                    continue;
                }
                if (property.NameEquals("etag"))
                {
                    etag = property.Value.GetString();
                    continue;
                }
            }
            return new StorageBase(type, rollingInformation, manifestUri, dataFolderUri, shards, etag);
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static StorageBase FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeStorageBase(document.RootElement);
        }
    }
}
