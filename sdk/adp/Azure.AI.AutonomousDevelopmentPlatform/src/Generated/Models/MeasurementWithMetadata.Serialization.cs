// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Azure.AI.AutonomousDevelopmentPlatform.Models
{
    public partial class MeasurementWithMetadata
    {
        internal static MeasurementWithMetadata DeserializeMeasurementWithMetadata(JsonElement element)
        {
            string measurementId = default;
            string location = default;
            Optional<DateTimeOffset?> ingestTimestampUtc = default;
            Optional<string> resourceEndpoint = default;
            Optional<string> externalPackageId = default;
            Optional<string> uploadId = default;
            Optional<string> discoveryId = default;
            Optional<DateTimeOffset?> recordTimestampUtc = default;
            string etag = default;
            IReadOnlyDictionary<string, string> metadata = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("measurementId"))
                {
                    measurementId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("location"))
                {
                    location = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ingestTimestampUtc"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        ingestTimestampUtc = null;
                        continue;
                    }
                    ingestTimestampUtc = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("resourceEndpoint"))
                {
                    resourceEndpoint = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("externalPackageId"))
                {
                    externalPackageId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("uploadId"))
                {
                    uploadId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("discoveryId"))
                {
                    discoveryId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("recordTimestampUtc"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        recordTimestampUtc = null;
                        continue;
                    }
                    recordTimestampUtc = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("etag"))
                {
                    etag = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("metadata"))
                {
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    metadata = dictionary;
                    continue;
                }
            }
            return new MeasurementWithMetadata(measurementId, location, Optional.ToNullable(ingestTimestampUtc), resourceEndpoint, externalPackageId, uploadId, discoveryId, Optional.ToNullable(recordTimestampUtc), etag, metadata);
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static MeasurementWithMetadata FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeMeasurementWithMetadata(document.RootElement);
        }
    }
}
