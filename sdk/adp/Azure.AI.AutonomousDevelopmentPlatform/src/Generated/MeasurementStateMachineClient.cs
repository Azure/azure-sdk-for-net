// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.AI.AutonomousDevelopmentPlatform
{
    // Data plane generated client. The MeasurementStateMachine service client.
    /// <summary> The MeasurementStateMachine service client. </summary>
    public partial class MeasurementStateMachineClient
    {
        private static readonly string[] AuthorizationScopes = new string[] { "https://adp.azure.com/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of MeasurementStateMachineClient for mocking. </summary>
        protected MeasurementStateMachineClient()
        {
        }

        /// <summary> Initializes a new instance of MeasurementStateMachineClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="credential"/> is null. </exception>
        public MeasurementStateMachineClient(TokenCredential credential) : this(credential, new AzureAIAutonomousDevelopmentPlatformClientOptions())
        {
        }

        /// <summary> Initializes a new instance of MeasurementStateMachineClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="credential"/> is null. </exception>
        public MeasurementStateMachineClient(TokenCredential credential, AzureAIAutonomousDevelopmentPlatformClientOptions options)
        {
            Argument.AssertNotNull(credential, nameof(credential));
            options ??= new AzureAIAutonomousDevelopmentPlatformClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) }, new ResponseClassifier());
            _apiVersion = options.Version;
        }

        /// <summary> Returns the state machine instance for the measurement. </summary>
        /// <param name="measurementId"> The measurement identifier. </param>
        /// <param name="id"> The state machine identifier. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="measurementId"/> or <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="measurementId"/> or <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/MeasurementStateMachineClient.xml" path="doc/members/member[@name='GetAsync(String,String,RequestContext)']/*" />
        public virtual async Task<Response> GetAsync(string measurementId, string id, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(measurementId, nameof(measurementId));
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("MeasurementStateMachineClient.Get");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetRequest(measurementId, id, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the state machine instance for the measurement. </summary>
        /// <param name="measurementId"> The measurement identifier. </param>
        /// <param name="id"> The state machine identifier. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="measurementId"/> or <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="measurementId"/> or <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/MeasurementStateMachineClient.xml" path="doc/members/member[@name='Get(String,String,RequestContext)']/*" />
        public virtual Response Get(string measurementId, string id, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(measurementId, nameof(measurementId));
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("MeasurementStateMachineClient.Get");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetRequest(measurementId, id, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List state machines instance for the measurement. </summary>
        /// <param name="measurementId"> The measurement identifier. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="measurementId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="measurementId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/MeasurementStateMachineClient.xml" path="doc/members/member[@name='ListAsync(String,RequestContext)']/*" />
        public virtual AsyncPageable<BinaryData> ListAsync(string measurementId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(measurementId, nameof(measurementId));

            return ListImplementationAsync("MeasurementStateMachineClient.List", measurementId, context);
        }

        private AsyncPageable<BinaryData> ListImplementationAsync(string diagnosticsScopeName, string measurementId, RequestContext context)
        {
            return PageableHelpers.CreateAsyncPageable(CreateEnumerableAsync, ClientDiagnostics, diagnosticsScopeName);
            async IAsyncEnumerable<Page<BinaryData>> CreateEnumerableAsync(string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken = default)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateListRequest(measurementId, context)
                        : CreateListNextPageRequest(nextLink, measurementId, context);
                    var page = await LowLevelPageableHelpers.ProcessMessageAsync(_pipeline, message, context, "value", "nextLink", cancellationToken).ConfigureAwait(false);
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> List state machines instance for the measurement. </summary>
        /// <param name="measurementId"> The measurement identifier. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="measurementId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="measurementId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/MeasurementStateMachineClient.xml" path="doc/members/member[@name='List(String,RequestContext)']/*" />
        public virtual Pageable<BinaryData> List(string measurementId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(measurementId, nameof(measurementId));

            return ListImplementation("MeasurementStateMachineClient.List", measurementId, context);
        }

        private Pageable<BinaryData> ListImplementation(string diagnosticsScopeName, string measurementId, RequestContext context)
        {
            return PageableHelpers.CreatePageable(CreateEnumerable, ClientDiagnostics, diagnosticsScopeName);
            IEnumerable<Page<BinaryData>> CreateEnumerable(string nextLink, int? pageSizeHint)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateListRequest(measurementId, context)
                        : CreateListNextPageRequest(nextLink, measurementId, context);
                    var page = LowLevelPageableHelpers.ProcessMessage(_pipeline, message, context, "value", "nextLink");
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Initiates process of applying an action on the measurement. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="measurementId"> The measurement identifier. </param>
        /// <param name="id"> The state machine identifier. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="operationId"> The long running operation identifier. Operation-Id should be valid UUID string. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="measurementId"/> or <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="measurementId"/> or <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation{T}"/> from the service that will contain a <see cref="BinaryData"/> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        /// <include file="Docs/MeasurementStateMachineClient.xml" path="doc/members/member[@name='ActAsync(WaitUntil,String,String,RequestContent,String,RequestContext)']/*" />
        public virtual async Task<Operation<BinaryData>> ActAsync(WaitUntil waitUntil, string measurementId, string id, RequestContent content, string operationId = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(measurementId, nameof(measurementId));
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("MeasurementStateMachineClient.Act");
            scope.Start();
            try
            {
                using HttpMessage message = CreateActRequest(measurementId, id, content, operationId, context);
                return await ProtocolOperationHelpers.ProcessMessageAsync(_pipeline, message, ClientDiagnostics, "MeasurementStateMachineClient.Act", OperationFinalStateVia.Location, context, waitUntil).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Initiates process of applying an action on the measurement. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="measurementId"> The measurement identifier. </param>
        /// <param name="id"> The state machine identifier. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="operationId"> The long running operation identifier. Operation-Id should be valid UUID string. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="measurementId"/> or <paramref name="id"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="measurementId"/> or <paramref name="id"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation{T}"/> from the service that will contain a <see cref="BinaryData"/> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        /// <include file="Docs/MeasurementStateMachineClient.xml" path="doc/members/member[@name='Act(WaitUntil,String,String,RequestContent,String,RequestContext)']/*" />
        public virtual Operation<BinaryData> Act(WaitUntil waitUntil, string measurementId, string id, RequestContent content, string operationId = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(measurementId, nameof(measurementId));
            Argument.AssertNotNullOrEmpty(id, nameof(id));

            using var scope = ClientDiagnostics.CreateScope("MeasurementStateMachineClient.Act");
            scope.Start();
            try
            {
                using HttpMessage message = CreateActRequest(measurementId, id, content, operationId, context);
                return ProtocolOperationHelpers.ProcessMessage(_pipeline, message, ClientDiagnostics, "MeasurementStateMachineClient.Act", OperationFinalStateVia.Location, context, waitUntil);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateGetRequest(string measurementId, string id, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendPath("/measurements/", false);
            uri.AppendPath(measurementId, true);
            uri.AppendPath("/stateMachines/", false);
            uri.AppendPath(id, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateListRequest(string measurementId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendPath("/measurements/", false);
            uri.AppendPath(measurementId, true);
            uri.AppendPath("/stateMachines", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateActRequest(string measurementId, string id, RequestContent content, string operationId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200202);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendPath("/measurements/", false);
            uri.AppendPath(measurementId, true);
            uri.AppendPath("/stateMachines/", false);
            uri.AppendPath(id, true);
            uri.AppendPath(":act", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (operationId != null)
            {
                request.Headers.Add("operation-id", operationId);
            }
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateListNextPageRequest(string nextLink, string measurementId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier200202;
        private static ResponseClassifier ResponseClassifier200202 => _responseClassifier200202 ??= new StatusCodeClassifier(stackalloc ushort[] { 200, 202 });
    }
}
