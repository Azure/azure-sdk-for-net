// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.AI.AutonomousDevelopmentPlatform
{
    // Data plane generated client. The DataStream service client.
    /// <summary> The DataStream service client. </summary>
    public partial class DataStreamClient
    {
        private static readonly string[] AuthorizationScopes = new string[] { "https://adp.azure.com/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of DataStreamClient for mocking. </summary>
        protected DataStreamClient()
        {
        }

        /// <summary> Initializes a new instance of DataStreamClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="credential"/> is null. </exception>
        public DataStreamClient(TokenCredential credential) : this(credential, new AzureAIAutonomousDevelopmentPlatformClientOptions())
        {
        }

        /// <summary> Initializes a new instance of DataStreamClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="credential"/> is null. </exception>
        public DataStreamClient(TokenCredential credential, AzureAIAutonomousDevelopmentPlatformClientOptions options)
        {
            Argument.AssertNotNull(credential, nameof(credential));
            options ??= new AzureAIAutonomousDevelopmentPlatformClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) }, new ResponseClassifier());
            _apiVersion = options.Version;
        }

        /// <summary> Get data-stream by identifier. </summary>
        /// <param name="measurementId"> The measurement identifier. </param>
        /// <param name="dataStreamId"> The data stream identifier. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="measurementId"/> or <paramref name="dataStreamId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="measurementId"/> or <paramref name="dataStreamId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/DataStreamClient.xml" path="doc/members/member[@name='GetAsync(String,String,RequestContext)']/*" />
        public virtual async Task<Response> GetAsync(string measurementId, string dataStreamId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(measurementId, nameof(measurementId));
            Argument.AssertNotNullOrEmpty(dataStreamId, nameof(dataStreamId));

            using var scope = ClientDiagnostics.CreateScope("DataStreamClient.Get");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetRequest(measurementId, dataStreamId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get data-stream by identifier. </summary>
        /// <param name="measurementId"> The measurement identifier. </param>
        /// <param name="dataStreamId"> The data stream identifier. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="measurementId"/> or <paramref name="dataStreamId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="measurementId"/> or <paramref name="dataStreamId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/DataStreamClient.xml" path="doc/members/member[@name='Get(String,String,RequestContext)']/*" />
        public virtual Response Get(string measurementId, string dataStreamId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(measurementId, nameof(measurementId));
            Argument.AssertNotNullOrEmpty(dataStreamId, nameof(dataStreamId));

            using var scope = ClientDiagnostics.CreateScope("DataStreamClient.Get");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetRequest(measurementId, dataStreamId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Returns SAS-signed upload URIs for files that need to be uploaded to Azure Storage.
        /// This URI expires in 24 hours.
        /// </summary>
        /// <param name="measurementId"> The measurement identifier. </param>
        /// <param name="dataStreamId"> The data stream identifier. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="measurementId"/> or <paramref name="dataStreamId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="measurementId"/> or <paramref name="dataStreamId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/DataStreamClient.xml" path="doc/members/member[@name='StageFilesAsync(String,String,RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> StageFilesAsync(string measurementId, string dataStreamId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(measurementId, nameof(measurementId));
            Argument.AssertNotNullOrEmpty(dataStreamId, nameof(dataStreamId));

            using var scope = ClientDiagnostics.CreateScope("DataStreamClient.StageFiles");
            scope.Start();
            try
            {
                using HttpMessage message = CreateStageFilesRequest(measurementId, dataStreamId, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Returns SAS-signed upload URIs for files that need to be uploaded to Azure Storage.
        /// This URI expires in 24 hours.
        /// </summary>
        /// <param name="measurementId"> The measurement identifier. </param>
        /// <param name="dataStreamId"> The data stream identifier. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="measurementId"/> or <paramref name="dataStreamId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="measurementId"/> or <paramref name="dataStreamId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/DataStreamClient.xml" path="doc/members/member[@name='StageFiles(String,String,RequestContent,RequestContext)']/*" />
        public virtual Response StageFiles(string measurementId, string dataStreamId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(measurementId, nameof(measurementId));
            Argument.AssertNotNullOrEmpty(dataStreamId, nameof(dataStreamId));

            using var scope = ClientDiagnostics.CreateScope("DataStreamClient.StageFiles");
            scope.Start();
            try
            {
                using HttpMessage message = CreateStageFilesRequest(measurementId, dataStreamId, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Lists the existing data-streams.
        /// Supports the following filter expressions:
        /// - filter=&quot;type=[System | Raw | Derived]&quot;
        /// </summary>
        /// <param name="measurementId"> The measurement identifier. </param>
        /// <param name="filter"> Filter the result list using the given expression. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="measurementId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="measurementId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/DataStreamClient.xml" path="doc/members/member[@name='ListAsync(String,String,RequestContext)']/*" />
        public virtual AsyncPageable<BinaryData> ListAsync(string measurementId, string filter = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(measurementId, nameof(measurementId));

            return ListImplementationAsync("DataStreamClient.List", measurementId, filter, context);
        }

        private AsyncPageable<BinaryData> ListImplementationAsync(string diagnosticsScopeName, string measurementId, string filter, RequestContext context)
        {
            return PageableHelpers.CreateAsyncPageable(CreateEnumerableAsync, ClientDiagnostics, diagnosticsScopeName);
            async IAsyncEnumerable<Page<BinaryData>> CreateEnumerableAsync(string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken = default)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateListRequest(measurementId, filter, context)
                        : CreateListNextPageRequest(nextLink, measurementId, filter, context);
                    var page = await LowLevelPageableHelpers.ProcessMessageAsync(_pipeline, message, context, "value", "nextLink", cancellationToken).ConfigureAwait(false);
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary>
        /// Lists the existing data-streams.
        /// Supports the following filter expressions:
        /// - filter=&quot;type=[System | Raw | Derived]&quot;
        /// </summary>
        /// <param name="measurementId"> The measurement identifier. </param>
        /// <param name="filter"> Filter the result list using the given expression. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="measurementId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="measurementId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/DataStreamClient.xml" path="doc/members/member[@name='List(String,String,RequestContext)']/*" />
        public virtual Pageable<BinaryData> List(string measurementId, string filter = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(measurementId, nameof(measurementId));

            return ListImplementation("DataStreamClient.List", measurementId, filter, context);
        }

        private Pageable<BinaryData> ListImplementation(string diagnosticsScopeName, string measurementId, string filter, RequestContext context)
        {
            return PageableHelpers.CreatePageable(CreateEnumerable, ClientDiagnostics, diagnosticsScopeName);
            IEnumerable<Page<BinaryData>> CreateEnumerable(string nextLink, int? pageSizeHint)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateListRequest(measurementId, filter, context)
                        : CreateListNextPageRequest(nextLink, measurementId, filter, context);
                    var page = LowLevelPageableHelpers.ProcessMessage(_pipeline, message, context, "value", "nextLink");
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Lists the data-streams by tags. </summary>
        /// <param name="measurementId"> The measurement identifier. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="measurementId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="measurementId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/DataStreamClient.xml" path="doc/members/member[@name='FindByTagsAsync(String,RequestContent,RequestContext)']/*" />
        public virtual AsyncPageable<BinaryData> FindByTagsAsync(string measurementId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(measurementId, nameof(measurementId));

            return FindByTagsImplementationAsync("DataStreamClient.FindByTags", measurementId, content, context);
        }

        private AsyncPageable<BinaryData> FindByTagsImplementationAsync(string diagnosticsScopeName, string measurementId, RequestContent content, RequestContext context)
        {
            return PageableHelpers.CreateAsyncPageable(CreateEnumerableAsync, ClientDiagnostics, diagnosticsScopeName);
            async IAsyncEnumerable<Page<BinaryData>> CreateEnumerableAsync(string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken = default)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateFindByTagsRequest(measurementId, content, context)
                        : CreateFindByTagsNextPageRequest(nextLink, measurementId, content, context);
                    var page = await LowLevelPageableHelpers.ProcessMessageAsync(_pipeline, message, context, "value", "nextLink", cancellationToken).ConfigureAwait(false);
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Lists the data-streams by tags. </summary>
        /// <param name="measurementId"> The measurement identifier. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="measurementId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="measurementId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/DataStreamClient.xml" path="doc/members/member[@name='FindByTags(String,RequestContent,RequestContext)']/*" />
        public virtual Pageable<BinaryData> FindByTags(string measurementId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(measurementId, nameof(measurementId));

            return FindByTagsImplementation("DataStreamClient.FindByTags", measurementId, content, context);
        }

        private Pageable<BinaryData> FindByTagsImplementation(string diagnosticsScopeName, string measurementId, RequestContent content, RequestContext context)
        {
            return PageableHelpers.CreatePageable(CreateEnumerable, ClientDiagnostics, diagnosticsScopeName);
            IEnumerable<Page<BinaryData>> CreateEnumerable(string nextLink, int? pageSizeHint)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateFindByTagsRequest(measurementId, content, context)
                        : CreateFindByTagsNextPageRequest(nextLink, measurementId, content, context);
                    var page = LowLevelPageableHelpers.ProcessMessage(_pipeline, message, context, "value", "nextLink");
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Lists the data-streams by lineage. </summary>
        /// <param name="measurementId"> The measurement identifier. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="measurementId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="measurementId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/DataStreamClient.xml" path="doc/members/member[@name='FindByLineageAsync(String,RequestContent,RequestContext)']/*" />
        public virtual AsyncPageable<BinaryData> FindByLineageAsync(string measurementId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(measurementId, nameof(measurementId));

            return FindByLineageImplementationAsync("DataStreamClient.FindByLineage", measurementId, content, context);
        }

        private AsyncPageable<BinaryData> FindByLineageImplementationAsync(string diagnosticsScopeName, string measurementId, RequestContent content, RequestContext context)
        {
            return PageableHelpers.CreateAsyncPageable(CreateEnumerableAsync, ClientDiagnostics, diagnosticsScopeName);
            async IAsyncEnumerable<Page<BinaryData>> CreateEnumerableAsync(string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken = default)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateFindByLineageRequest(measurementId, content, context)
                        : CreateFindByLineageNextPageRequest(nextLink, measurementId, content, context);
                    var page = await LowLevelPageableHelpers.ProcessMessageAsync(_pipeline, message, context, "value", "nextLink", cancellationToken).ConfigureAwait(false);
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Lists the data-streams by lineage. </summary>
        /// <param name="measurementId"> The measurement identifier. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="measurementId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="measurementId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/DataStreamClient.xml" path="doc/members/member[@name='FindByLineage(String,RequestContent,RequestContext)']/*" />
        public virtual Pageable<BinaryData> FindByLineage(string measurementId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(measurementId, nameof(measurementId));

            return FindByLineageImplementation("DataStreamClient.FindByLineage", measurementId, content, context);
        }

        private Pageable<BinaryData> FindByLineageImplementation(string diagnosticsScopeName, string measurementId, RequestContent content, RequestContext context)
        {
            return PageableHelpers.CreatePageable(CreateEnumerable, ClientDiagnostics, diagnosticsScopeName);
            IEnumerable<Page<BinaryData>> CreateEnumerable(string nextLink, int? pageSizeHint)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateFindByLineageRequest(measurementId, content, context)
                        : CreateFindByLineageNextPageRequest(nextLink, measurementId, content, context);
                    var page = LowLevelPageableHelpers.ProcessMessage(_pipeline, message, context, "value", "nextLink");
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Lists the data-streams by lineage graph. </summary>
        /// <param name="measurementId"> The measurement identifier. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="measurementId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="measurementId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/DataStreamClient.xml" path="doc/members/member[@name='GetLineageGraphsByLineageAsync(String,RequestContent,RequestContext)']/*" />
        public virtual AsyncPageable<BinaryData> GetLineageGraphsByLineageAsync(string measurementId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(measurementId, nameof(measurementId));

            return GetLineageGraphsByLineageImplementationAsync("DataStreamClient.GetLineageGraphsByLineage", measurementId, content, context);
        }

        private AsyncPageable<BinaryData> GetLineageGraphsByLineageImplementationAsync(string diagnosticsScopeName, string measurementId, RequestContent content, RequestContext context)
        {
            return PageableHelpers.CreateAsyncPageable(CreateEnumerableAsync, ClientDiagnostics, diagnosticsScopeName);
            async IAsyncEnumerable<Page<BinaryData>> CreateEnumerableAsync(string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken = default)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetLineageGraphsByLineageRequest(measurementId, content, context)
                        : CreateGetLineageGraphsByLineageNextPageRequest(nextLink, measurementId, content, context);
                    var page = await LowLevelPageableHelpers.ProcessMessageAsync(_pipeline, message, context, "value", "nextLink", cancellationToken).ConfigureAwait(false);
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Lists the data-streams by lineage graph. </summary>
        /// <param name="measurementId"> The measurement identifier. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="measurementId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="measurementId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <include file="Docs/DataStreamClient.xml" path="doc/members/member[@name='GetLineageGraphsByLineage(String,RequestContent,RequestContext)']/*" />
        public virtual Pageable<BinaryData> GetLineageGraphsByLineage(string measurementId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(measurementId, nameof(measurementId));

            return GetLineageGraphsByLineageImplementation("DataStreamClient.GetLineageGraphsByLineage", measurementId, content, context);
        }

        private Pageable<BinaryData> GetLineageGraphsByLineageImplementation(string diagnosticsScopeName, string measurementId, RequestContent content, RequestContext context)
        {
            return PageableHelpers.CreatePageable(CreateEnumerable, ClientDiagnostics, diagnosticsScopeName);
            IEnumerable<Page<BinaryData>> CreateEnumerable(string nextLink, int? pageSizeHint)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetLineageGraphsByLineageRequest(measurementId, content, context)
                        : CreateGetLineageGraphsByLineageNextPageRequest(nextLink, measurementId, content, context);
                    var page = LowLevelPageableHelpers.ProcessMessage(_pipeline, message, context, "value", "nextLink");
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Creates new data-stream resource. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="measurementId"> The measurement identifier. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="operationId"> The long running operation identifier. Operation-Id should be valid UUID string. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="measurementId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="measurementId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation{T}"/> from the service that will contain a <see cref="BinaryData"/> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        /// <include file="Docs/DataStreamClient.xml" path="doc/members/member[@name='CreateAsync(WaitUntil,String,RequestContent,String,RequestContext)']/*" />
        public virtual async Task<Operation<BinaryData>> CreateAsync(WaitUntil waitUntil, string measurementId, RequestContent content, string operationId = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(measurementId, nameof(measurementId));

            using var scope = ClientDiagnostics.CreateScope("DataStreamClient.Create");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateRequest(measurementId, content, operationId, context);
                return await ProtocolOperationHelpers.ProcessMessageAsync(_pipeline, message, ClientDiagnostics, "DataStreamClient.Create", OperationFinalStateVia.Location, context, waitUntil).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates new data-stream resource. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="measurementId"> The measurement identifier. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="operationId"> The long running operation identifier. Operation-Id should be valid UUID string. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="measurementId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="measurementId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation{T}"/> from the service that will contain a <see cref="BinaryData"/> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        /// <include file="Docs/DataStreamClient.xml" path="doc/members/member[@name='Create(WaitUntil,String,RequestContent,String,RequestContext)']/*" />
        public virtual Operation<BinaryData> Create(WaitUntil waitUntil, string measurementId, RequestContent content, string operationId = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(measurementId, nameof(measurementId));

            using var scope = ClientDiagnostics.CreateScope("DataStreamClient.Create");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateRequest(measurementId, content, operationId, context);
                return ProtocolOperationHelpers.ProcessMessage(_pipeline, message, ClientDiagnostics, "DataStreamClient.Create", OperationFinalStateVia.Location, context, waitUntil);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Clear the data-stream content. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="measurementId"> The measurement identifier. </param>
        /// <param name="dataStreamId"> The data stream identifier. </param>
        /// <param name="operationId"> The long running operation identifier. Operation-Id should be valid UUID string. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="measurementId"/> or <paramref name="dataStreamId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="measurementId"/> or <paramref name="dataStreamId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation{T}"/> from the service that will contain a <see cref="BinaryData"/> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        /// <include file="Docs/DataStreamClient.xml" path="doc/members/member[@name='ClearContentAsync(WaitUntil,String,String,String,RequestContext)']/*" />
        public virtual async Task<Operation<BinaryData>> ClearContentAsync(WaitUntil waitUntil, string measurementId, string dataStreamId, string operationId = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(measurementId, nameof(measurementId));
            Argument.AssertNotNullOrEmpty(dataStreamId, nameof(dataStreamId));

            using var scope = ClientDiagnostics.CreateScope("DataStreamClient.ClearContent");
            scope.Start();
            try
            {
                using HttpMessage message = CreateClearContentRequest(measurementId, dataStreamId, operationId, context);
                return await ProtocolOperationHelpers.ProcessMessageAsync(_pipeline, message, ClientDiagnostics, "DataStreamClient.ClearContent", OperationFinalStateVia.Location, context, waitUntil).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Clear the data-stream content. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="measurementId"> The measurement identifier. </param>
        /// <param name="dataStreamId"> The data stream identifier. </param>
        /// <param name="operationId"> The long running operation identifier. Operation-Id should be valid UUID string. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="measurementId"/> or <paramref name="dataStreamId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="measurementId"/> or <paramref name="dataStreamId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation{T}"/> from the service that will contain a <see cref="BinaryData"/> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        /// <include file="Docs/DataStreamClient.xml" path="doc/members/member[@name='ClearContent(WaitUntil,String,String,String,RequestContext)']/*" />
        public virtual Operation<BinaryData> ClearContent(WaitUntil waitUntil, string measurementId, string dataStreamId, string operationId = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(measurementId, nameof(measurementId));
            Argument.AssertNotNullOrEmpty(dataStreamId, nameof(dataStreamId));

            using var scope = ClientDiagnostics.CreateScope("DataStreamClient.ClearContent");
            scope.Start();
            try
            {
                using HttpMessage message = CreateClearContentRequest(measurementId, dataStreamId, operationId, context);
                return ProtocolOperationHelpers.ProcessMessage(_pipeline, message, ClientDiagnostics, "DataStreamClient.ClearContent", OperationFinalStateVia.Location, context, waitUntil);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Marks a data stream as completed. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="measurementId"> The measurement identifier. </param>
        /// <param name="dataStreamId"> The data stream identifier. </param>
        /// <param name="operationId"> The long running operation identifier. Operation-Id should be valid UUID string. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="measurementId"/> or <paramref name="dataStreamId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="measurementId"/> or <paramref name="dataStreamId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation{T}"/> from the service that will contain a <see cref="BinaryData"/> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        /// <include file="Docs/DataStreamClient.xml" path="doc/members/member[@name='CompleteAsync(WaitUntil,String,String,String,RequestContext)']/*" />
        public virtual async Task<Operation<BinaryData>> CompleteAsync(WaitUntil waitUntil, string measurementId, string dataStreamId, string operationId = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(measurementId, nameof(measurementId));
            Argument.AssertNotNullOrEmpty(dataStreamId, nameof(dataStreamId));

            using var scope = ClientDiagnostics.CreateScope("DataStreamClient.Complete");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCompleteRequest(measurementId, dataStreamId, operationId, context);
                return await ProtocolOperationHelpers.ProcessMessageAsync(_pipeline, message, ClientDiagnostics, "DataStreamClient.Complete", OperationFinalStateVia.Location, context, waitUntil).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Marks a data stream as completed. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="measurementId"> The measurement identifier. </param>
        /// <param name="dataStreamId"> The data stream identifier. </param>
        /// <param name="operationId"> The long running operation identifier. Operation-Id should be valid UUID string. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="measurementId"/> or <paramref name="dataStreamId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="measurementId"/> or <paramref name="dataStreamId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation{T}"/> from the service that will contain a <see cref="BinaryData"/> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        /// <include file="Docs/DataStreamClient.xml" path="doc/members/member[@name='Complete(WaitUntil,String,String,String,RequestContext)']/*" />
        public virtual Operation<BinaryData> Complete(WaitUntil waitUntil, string measurementId, string dataStreamId, string operationId = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(measurementId, nameof(measurementId));
            Argument.AssertNotNullOrEmpty(dataStreamId, nameof(dataStreamId));

            using var scope = ClientDiagnostics.CreateScope("DataStreamClient.Complete");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCompleteRequest(measurementId, dataStreamId, operationId, context);
                return ProtocolOperationHelpers.ProcessMessage(_pipeline, message, ClientDiagnostics, "DataStreamClient.Complete", OperationFinalStateVia.Location, context, waitUntil);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Marks a data stream as failed. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="measurementId"> The measurement identifier. </param>
        /// <param name="dataStreamId"> The data stream identifier. </param>
        /// <param name="operationId"> The long running operation identifier. Operation-Id should be valid UUID string. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="measurementId"/> or <paramref name="dataStreamId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="measurementId"/> or <paramref name="dataStreamId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation{T}"/> from the service that will contain a <see cref="BinaryData"/> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        /// <include file="Docs/DataStreamClient.xml" path="doc/members/member[@name='FailAsync(WaitUntil,String,String,String,RequestContext)']/*" />
        public virtual async Task<Operation<BinaryData>> FailAsync(WaitUntil waitUntil, string measurementId, string dataStreamId, string operationId = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(measurementId, nameof(measurementId));
            Argument.AssertNotNullOrEmpty(dataStreamId, nameof(dataStreamId));

            using var scope = ClientDiagnostics.CreateScope("DataStreamClient.Fail");
            scope.Start();
            try
            {
                using HttpMessage message = CreateFailRequest(measurementId, dataStreamId, operationId, context);
                return await ProtocolOperationHelpers.ProcessMessageAsync(_pipeline, message, ClientDiagnostics, "DataStreamClient.Fail", OperationFinalStateVia.Location, context, waitUntil).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Marks a data stream as failed. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="measurementId"> The measurement identifier. </param>
        /// <param name="dataStreamId"> The data stream identifier. </param>
        /// <param name="operationId"> The long running operation identifier. Operation-Id should be valid UUID string. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="measurementId"/> or <paramref name="dataStreamId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="measurementId"/> or <paramref name="dataStreamId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation{T}"/> from the service that will contain a <see cref="BinaryData"/> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        /// <include file="Docs/DataStreamClient.xml" path="doc/members/member[@name='Fail(WaitUntil,String,String,String,RequestContext)']/*" />
        public virtual Operation<BinaryData> Fail(WaitUntil waitUntil, string measurementId, string dataStreamId, string operationId = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(measurementId, nameof(measurementId));
            Argument.AssertNotNullOrEmpty(dataStreamId, nameof(dataStreamId));

            using var scope = ClientDiagnostics.CreateScope("DataStreamClient.Fail");
            scope.Start();
            try
            {
                using HttpMessage message = CreateFailRequest(measurementId, dataStreamId, operationId, context);
                return ProtocolOperationHelpers.ProcessMessage(_pipeline, message, ClientDiagnostics, "DataStreamClient.Fail", OperationFinalStateVia.Location, context, waitUntil);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateGetRequest(string measurementId, string dataStreamId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendPath("/measurements/", false);
            uri.AppendPath(measurementId, true);
            uri.AppendPath("/dataStreams/", false);
            uri.AppendPath(dataStreamId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCreateRequest(string measurementId, RequestContent content, string operationId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200202);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendPath("/measurements/", false);
            uri.AppendPath(measurementId, true);
            uri.AppendPath("/dataStreams", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (operationId != null)
            {
                request.Headers.Add("operation-id", operationId);
            }
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateClearContentRequest(string measurementId, string dataStreamId, string operationId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200202);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendPath("/measurements/", false);
            uri.AppendPath(measurementId, true);
            uri.AppendPath("/dataStreams/", false);
            uri.AppendPath(dataStreamId, true);
            uri.AppendPath(":clearContent", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (operationId != null)
            {
                request.Headers.Add("operation-id", operationId);
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateListRequest(string measurementId, string filter, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendPath("/measurements/", false);
            uri.AppendPath(measurementId, true);
            uri.AppendPath("/dataStreams", false);
            if (filter != null)
            {
                uri.AppendQuery("filter", filter, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateStageFilesRequest(string measurementId, string dataStreamId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendPath("/measurements/", false);
            uri.AppendPath(measurementId, true);
            uri.AppendPath("/dataStreams/", false);
            uri.AppendPath(dataStreamId, true);
            uri.AppendPath(":stageFiles", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateCompleteRequest(string measurementId, string dataStreamId, string operationId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200202);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendPath("/measurements/", false);
            uri.AppendPath(measurementId, true);
            uri.AppendPath("/dataStreams/", false);
            uri.AppendPath(dataStreamId, true);
            uri.AppendPath(":complete", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (operationId != null)
            {
                request.Headers.Add("operation-id", operationId);
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateFailRequest(string measurementId, string dataStreamId, string operationId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200202);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendPath("/measurements/", false);
            uri.AppendPath(measurementId, true);
            uri.AppendPath("/dataStreams/", false);
            uri.AppendPath(dataStreamId, true);
            uri.AppendPath(":fail", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (operationId != null)
            {
                request.Headers.Add("operation-id", operationId);
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateFindByTagsRequest(string measurementId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendPath("/measurements/", false);
            uri.AppendPath(measurementId, true);
            uri.AppendPath("/dataStreams:findByTags", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateFindByLineageRequest(string measurementId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendPath("/measurements/", false);
            uri.AppendPath(measurementId, true);
            uri.AppendPath("/dataStreams:findByLineage", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetLineageGraphsByLineageRequest(string measurementId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendPath("/measurements/", false);
            uri.AppendPath(measurementId, true);
            uri.AppendPath("/dataStreams:getLineageGraphsByLineage", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateListNextPageRequest(string nextLink, string measurementId, string filter, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateFindByTagsNextPageRequest(string nextLink, string measurementId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateFindByLineageNextPageRequest(string nextLink, string measurementId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetLineageGraphsByLineageNextPageRequest(string nextLink, string measurementId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier200202;
        private static ResponseClassifier ResponseClassifier200202 => _responseClassifier200202 ??= new StatusCodeClassifier(stackalloc ushort[] { 200, 202 });
    }
}
