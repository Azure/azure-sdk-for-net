// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Adp
{
    /// <summary> Data stream rolling strategy. </summary>
    public readonly partial struct DataStreamRollingStrategy : IEquatable<DataStreamRollingStrategy>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DataStreamRollingStrategy"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DataStreamRollingStrategy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string TimeValue = "Time";
        private const string SizeValue = "Size";

        /// <summary> Time. </summary>
        public static DataStreamRollingStrategy Time { get; } = new DataStreamRollingStrategy(TimeValue);
        /// <summary> Size. </summary>
        public static DataStreamRollingStrategy Size { get; } = new DataStreamRollingStrategy(SizeValue);
        /// <summary> Determines if two <see cref="DataStreamRollingStrategy"/> values are the same. </summary>
        public static bool operator ==(DataStreamRollingStrategy left, DataStreamRollingStrategy right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DataStreamRollingStrategy"/> values are not the same. </summary>
        public static bool operator !=(DataStreamRollingStrategy left, DataStreamRollingStrategy right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DataStreamRollingStrategy"/>. </summary>
        public static implicit operator DataStreamRollingStrategy(string value) => new DataStreamRollingStrategy(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DataStreamRollingStrategy other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DataStreamRollingStrategy other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
