// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.AI.AutonomousDevelopmentPlatform
{
    // Data plane generated client. The DataStreamsStorage service client.
    /// <summary> The DataStreamsStorage service client. </summary>
    public partial class DataStreamsStorageClient
    {
        private static readonly string[] AuthorizationScopes = new string[] { "https://adp.azure.com/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of DataStreamsStorageClient for mocking. </summary>
        protected DataStreamsStorageClient()
        {
        }

        /// <summary> Initializes a new instance of DataStreamsStorageClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="credential"/> is null. </exception>
        public DataStreamsStorageClient(TokenCredential credential) : this(credential, new AzureAIAutonomousDevelopmentPlatformClientOptions())
        {
        }

        /// <summary> Initializes a new instance of DataStreamsStorageClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="credential"/> is null. </exception>
        public DataStreamsStorageClient(TokenCredential credential, AzureAIAutonomousDevelopmentPlatformClientOptions options)
        {
            Argument.AssertNotNull(credential, nameof(credential));
            options ??= new AzureAIAutonomousDevelopmentPlatformClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) }, new ResponseClassifier());
            _apiVersion = options.Version;
        }

        /// <summary>
        /// Create or replace storage information of the data-stream.
        /// Returns the data-stream storage resource with SAS signed URIs that allow uploading to Azure Storage.
        /// The SAS token expires in 24 hours.
        /// </summary>
        /// <param name="measurementId"> The measurement identifier. </param>
        /// <param name="dataStreamId"> The data stream identifier. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="measurementId"/> or <paramref name="dataStreamId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="measurementId"/> or <paramref name="dataStreamId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/DataStreamsStorageClient.xml" path="doc/members/member[@name='CreateAsync(String,String,RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> CreateAsync(string measurementId, string dataStreamId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(measurementId, nameof(measurementId));
            Argument.AssertNotNullOrEmpty(dataStreamId, nameof(dataStreamId));

            using var scope = ClientDiagnostics.CreateScope("DataStreamsStorageClient.Create");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateRequest(measurementId, dataStreamId, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Create or replace storage information of the data-stream.
        /// Returns the data-stream storage resource with SAS signed URIs that allow uploading to Azure Storage.
        /// The SAS token expires in 24 hours.
        /// </summary>
        /// <param name="measurementId"> The measurement identifier. </param>
        /// <param name="dataStreamId"> The data stream identifier. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="measurementId"/> or <paramref name="dataStreamId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="measurementId"/> or <paramref name="dataStreamId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/DataStreamsStorageClient.xml" path="doc/members/member[@name='Create(String,String,RequestContent,RequestContext)']/*" />
        public virtual Response Create(string measurementId, string dataStreamId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(measurementId, nameof(measurementId));
            Argument.AssertNotNullOrEmpty(dataStreamId, nameof(dataStreamId));

            using var scope = ClientDiagnostics.CreateScope("DataStreamsStorageClient.Create");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateRequest(measurementId, dataStreamId, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Returns the data-stream storage resource with SAS signed URIs that allow uploading to Azure Storage.
        /// The SAS token expires in 24 hours.
        /// </summary>
        /// <param name="measurementId"> The measurement identifier. </param>
        /// <param name="dataStreamId"> The data stream identifier. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="measurementId"/> or <paramref name="dataStreamId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="measurementId"/> or <paramref name="dataStreamId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/DataStreamsStorageClient.xml" path="doc/members/member[@name='GetWritableUrisAsync(String,String,RequestContext)']/*" />
        public virtual async Task<Response> GetWritableUrisAsync(string measurementId, string dataStreamId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(measurementId, nameof(measurementId));
            Argument.AssertNotNullOrEmpty(dataStreamId, nameof(dataStreamId));

            using var scope = ClientDiagnostics.CreateScope("DataStreamsStorageClient.GetWritableUris");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetWritableUrisRequest(measurementId, dataStreamId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Returns the data-stream storage resource with SAS signed URIs that allow uploading to Azure Storage.
        /// The SAS token expires in 24 hours.
        /// </summary>
        /// <param name="measurementId"> The measurement identifier. </param>
        /// <param name="dataStreamId"> The data stream identifier. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="measurementId"/> or <paramref name="dataStreamId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="measurementId"/> or <paramref name="dataStreamId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/DataStreamsStorageClient.xml" path="doc/members/member[@name='GetWritableUris(String,String,RequestContext)']/*" />
        public virtual Response GetWritableUris(string measurementId, string dataStreamId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(measurementId, nameof(measurementId));
            Argument.AssertNotNullOrEmpty(dataStreamId, nameof(dataStreamId));

            using var scope = ClientDiagnostics.CreateScope("DataStreamsStorageClient.GetWritableUris");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetWritableUrisRequest(measurementId, dataStreamId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateCreateRequest(string measurementId, string dataStreamId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200201);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.AppendPath("/measurements/", false);
            uri.AppendPath(measurementId, true);
            uri.AppendPath("/dataStreams/", false);
            uri.AppendPath(dataStreamId, true);
            uri.AppendPath("/storage", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetWritableUrisRequest(string measurementId, string dataStreamId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendPath("/measurements/", false);
            uri.AppendPath(measurementId, true);
            uri.AppendPath("/dataStreams/", false);
            uri.AppendPath(dataStreamId, true);
            uri.AppendPath("/storage:getWritableUris", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static ResponseClassifier _responseClassifier200201;
        private static ResponseClassifier ResponseClassifier200201 => _responseClassifier200201 ??= new StatusCodeClassifier(stackalloc ushort[] { 200, 201 });
        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
    }
}
