// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace ADP.DataManagement.Ingestion.Uploads
{
    /// <summary> Known upload types. </summary>
    public readonly partial struct UploadStatus : IEquatable<UploadStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="UploadStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public UploadStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string CreatedValue = "Created";
        private const string GeneratingSpecialFilesUploadInfoValue = "GeneratingSpecialFilesUploadInfo";
        private const string GeneratedSpecialFilesUploadInfoValue = "GeneratedSpecialFilesUploadInfo";
        private const string GeneratingDataFilesUploadInfoValue = "GeneratingDataFilesUploadInfo";
        private const string GeneratedDataFilesUploadInfoValue = "GeneratedDataFilesUploadInfo";
        private const string CompletingValue = "Completing";
        private const string CompletedValue = "Completed";
        private const string AbortingValue = "Aborting";
        private const string AbortedValue = "Aborted";
        private const string FailedValue = "Failed";

        /// <summary> The upload process has been initiated. The client should upload the upload manifest file using the SAS-signed upload URI provided by the system. </summary>
        public static UploadStatus Created { get; } = new UploadStatus(CreatedValue);
        /// <summary> The system is analyzing the upload manifest file uploaded by the client and generating the upload information for uploading special files. </summary>
        public static UploadStatus GeneratingSpecialFilesUploadInfo { get; } = new UploadStatus(GeneratingSpecialFilesUploadInfoValue);
        /// <summary> The system has analyzed the upload manifest file and generated the upload information for uploading special files. </summary>
        public static UploadStatus GeneratedSpecialFilesUploadInfo { get; } = new UploadStatus(GeneratedSpecialFilesUploadInfoValue);
        /// <summary> The system is sharding the files and generating the upload information for uploading data files. </summary>
        public static UploadStatus GeneratingDataFilesUploadInfo { get; } = new UploadStatus(GeneratingDataFilesUploadInfoValue);
        /// <summary> The system has sharded the files and generated the upload information for uploading data files. The client should upload the measurement files using the SAS-signed upload URIs provided by the system. </summary>
        public static UploadStatus GeneratedDataFilesUploadInfo { get; } = new UploadStatus(GeneratedDataFilesUploadInfoValue);
        /// <summary> The system is completing the upload process (creating measurements etc.). </summary>
        public static UploadStatus Completing { get; } = new UploadStatus(CompletingValue);
        /// <summary> The system completed the upload process. </summary>
        public static UploadStatus Completed { get; } = new UploadStatus(CompletedValue);
        /// <summary> The system is cancelling the upload process. </summary>
        public static UploadStatus Aborting { get; } = new UploadStatus(AbortingValue);
        /// <summary> The system cancelled the upload process. </summary>
        public static UploadStatus Aborted { get; } = new UploadStatus(AbortedValue);
        /// <summary> The system marked the upload process as failed. </summary>
        public static UploadStatus Failed { get; } = new UploadStatus(FailedValue);
        /// <summary> Determines if two <see cref="UploadStatus"/> values are the same. </summary>
        public static bool operator ==(UploadStatus left, UploadStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="UploadStatus"/> values are not the same. </summary>
        public static bool operator !=(UploadStatus left, UploadStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="UploadStatus"/>. </summary>
        public static implicit operator UploadStatus(string value) => new UploadStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is UploadStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(UploadStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
