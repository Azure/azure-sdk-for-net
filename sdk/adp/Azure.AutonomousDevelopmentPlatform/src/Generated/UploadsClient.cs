// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using ADP.DataManagement.Ingestion.Uploads;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace AutonomousDevelopmentPlatform
{
    // Data plane generated client. The Uploads service client.
    /// <summary> The Uploads service client. </summary>
    public partial class UploadsClient
    {
        private static readonly string[] AuthorizationScopes = new string[] { "https://adp.azure.com/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of UploadsClient for mocking. </summary>
        protected UploadsClient()
        {
        }

        /// <summary> Initializes a new instance of UploadsClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="credential"/> is null. </exception>
        public UploadsClient(TokenCredential credential) : this(credential, new AutonomousDevelopmentPlatformClientOptions())
        {
        }

        /// <summary> Initializes a new instance of UploadsClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="credential"/> is null. </exception>
        public UploadsClient(TokenCredential credential, AutonomousDevelopmentPlatformClientOptions options)
        {
            Argument.AssertNotNull(credential, nameof(credential));
            options ??= new AutonomousDevelopmentPlatformClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) }, new ResponseClassifier());
            _apiVersion = options.Version;
        }

        /// <summary> Creates a new ingestion upload instance. </summary>
        /// <param name="uploadId"> The upload resource identifier. </param>
        /// <param name="body"> Auto-generated wrapper for template parameter &apos;UploadCreationParameters&apos;. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="uploadId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="uploadId"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Response<Upload>> CreateOrReplaceAsync(string uploadId, UploadCreationParameters body = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(uploadId, nameof(uploadId));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = await CreateOrReplaceAsync(uploadId, body?.ToRequestContent(), context).ConfigureAwait(false);
            return Response.FromValue(Upload.FromResponse(response), response);
        }

        /// <summary> Creates a new ingestion upload instance. </summary>
        /// <param name="uploadId"> The upload resource identifier. </param>
        /// <param name="body"> Auto-generated wrapper for template parameter &apos;UploadCreationParameters&apos;. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="uploadId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="uploadId"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Response<Upload> CreateOrReplace(string uploadId, UploadCreationParameters body = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(uploadId, nameof(uploadId));

            RequestContext context = FromCancellationToken(cancellationToken);
            Response response = CreateOrReplace(uploadId, body?.ToRequestContent(), context);
            return Response.FromValue(Upload.FromResponse(response), response);
        }

        /// <summary> Creates a new ingestion upload instance. </summary>
        /// <param name="uploadId"> The upload resource identifier. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="uploadId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="uploadId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/UploadsClient.xml" path="doc/members/member[@name='CreateOrReplaceAsync(String,RequestContent,RequestContext)']/*" />
        public virtual async Task<Response> CreateOrReplaceAsync(string uploadId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(uploadId, nameof(uploadId));

            using var scope = ClientDiagnostics.CreateScope("UploadsClient.CreateOrReplace");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrReplaceRequest(uploadId, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates a new ingestion upload instance. </summary>
        /// <param name="uploadId"> The upload resource identifier. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="uploadId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="uploadId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/UploadsClient.xml" path="doc/members/member[@name='CreateOrReplace(String,RequestContent,RequestContext)']/*" />
        public virtual Response CreateOrReplace(string uploadId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(uploadId, nameof(uploadId));

            using var scope = ClientDiagnostics.CreateScope("UploadsClient.CreateOrReplace");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrReplaceRequest(uploadId, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get discovery by ID. </summary>
        /// <param name="uploadId"> The upload resource identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="uploadId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="uploadId"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Response<Upload>> GetValueAsync(string uploadId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(uploadId, nameof(uploadId));

            using var scope = ClientDiagnostics.CreateScope("UploadsClient.GetValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = await GetAsync(uploadId, context).ConfigureAwait(false);
                return Response.FromValue(Upload.FromResponse(response), response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get discovery by ID. </summary>
        /// <param name="uploadId"> The upload resource identifier. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="uploadId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="uploadId"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Response<Upload> GetValue(string uploadId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(uploadId, nameof(uploadId));

            using var scope = ClientDiagnostics.CreateScope("UploadsClient.GetValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = Get(uploadId, context);
                return Response.FromValue(Upload.FromResponse(response), response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get discovery by ID. </summary>
        /// <param name="uploadId"> The upload resource identifier. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="uploadId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="uploadId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/UploadsClient.xml" path="doc/members/member[@name='GetAsync(String,RequestContext)']/*" />
        public virtual async Task<Response> GetAsync(string uploadId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(uploadId, nameof(uploadId));

            using var scope = ClientDiagnostics.CreateScope("UploadsClient.Get");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetRequest(uploadId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get discovery by ID. </summary>
        /// <param name="uploadId"> The upload resource identifier. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="uploadId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="uploadId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/UploadsClient.xml" path="doc/members/member[@name='Get(String,RequestContext)']/*" />
        public virtual Response Get(string uploadId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(uploadId, nameof(uploadId));

            using var scope = ClientDiagnostics.CreateScope("UploadsClient.Get");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetRequest(uploadId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Initiates the process of completing the upload and creating the measurements. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="uploadId"> The upload resource identifier. </param>
        /// <param name="operationId"> The long running operation identifier. Operation-Id should be valid UUID string. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="uploadId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="uploadId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation{T}"/> from the service that will contain a <see cref="BinaryData"/> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        /// <include file="Docs/UploadsClient.xml" path="doc/members/member[@name='CompleteAsync(WaitUntil,String,String,RequestContext)']/*" />
        public virtual async Task<Operation<BinaryData>> CompleteAsync(WaitUntil waitUntil, string uploadId, string operationId = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(uploadId, nameof(uploadId));

            using var scope = ClientDiagnostics.CreateScope("UploadsClient.Complete");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCompleteRequest(uploadId, operationId, context);
                return await ProtocolOperationHelpers.ProcessMessageAsync(_pipeline, message, ClientDiagnostics, "UploadsClient.Complete", OperationFinalStateVia.Location, context, waitUntil).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Initiates the process of completing the upload and creating the measurements. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="uploadId"> The upload resource identifier. </param>
        /// <param name="operationId"> The long running operation identifier. Operation-Id should be valid UUID string. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="uploadId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="uploadId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation{T}"/> from the service that will contain a <see cref="BinaryData"/> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        /// <include file="Docs/UploadsClient.xml" path="doc/members/member[@name='Complete(WaitUntil,String,String,RequestContext)']/*" />
        public virtual Operation<BinaryData> Complete(WaitUntil waitUntil, string uploadId, string operationId = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(uploadId, nameof(uploadId));

            using var scope = ClientDiagnostics.CreateScope("UploadsClient.Complete");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCompleteRequest(uploadId, operationId, context);
                return ProtocolOperationHelpers.ProcessMessage(_pipeline, message, ClientDiagnostics, "UploadsClient.Complete", OperationFinalStateVia.Location, context, waitUntil);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Initiates the process of cancelling the upload. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="uploadId"> The upload resource identifier. </param>
        /// <param name="operationId"> The long running operation identifier. Operation-Id should be valid UUID string. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="uploadId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="uploadId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation{T}"/> from the service that will contain a <see cref="BinaryData"/> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        /// <include file="Docs/UploadsClient.xml" path="doc/members/member[@name='CancelAsync(WaitUntil,String,String,RequestContext)']/*" />
        public virtual async Task<Operation<BinaryData>> CancelAsync(WaitUntil waitUntil, string uploadId, string operationId = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(uploadId, nameof(uploadId));

            using var scope = ClientDiagnostics.CreateScope("UploadsClient.Cancel");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCancelRequest(uploadId, operationId, context);
                return await ProtocolOperationHelpers.ProcessMessageAsync(_pipeline, message, ClientDiagnostics, "UploadsClient.Cancel", OperationFinalStateVia.Location, context, waitUntil).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Initiates the process of cancelling the upload. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="uploadId"> The upload resource identifier. </param>
        /// <param name="operationId"> The long running operation identifier. Operation-Id should be valid UUID string. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="uploadId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="uploadId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation{T}"/> from the service that will contain a <see cref="BinaryData"/> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        /// <include file="Docs/UploadsClient.xml" path="doc/members/member[@name='Cancel(WaitUntil,String,String,RequestContext)']/*" />
        public virtual Operation<BinaryData> Cancel(WaitUntil waitUntil, string uploadId, string operationId = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(uploadId, nameof(uploadId));

            using var scope = ClientDiagnostics.CreateScope("UploadsClient.Cancel");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCancelRequest(uploadId, operationId, context);
                return ProtocolOperationHelpers.ProcessMessage(_pipeline, message, ClientDiagnostics, "UploadsClient.Cancel", OperationFinalStateVia.Location, context, waitUntil);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateCreateOrReplaceRequest(string uploadId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200201);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.AppendPath("/uploads/", false);
            uri.AppendPath(uploadId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetRequest(string uploadId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendPath("/uploads/", false);
            uri.AppendPath(uploadId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCompleteRequest(string uploadId, string operationId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier202);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendPath("/uploads/", false);
            uri.AppendPath(uploadId, true);
            uri.AppendPath(":complete", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (operationId != null)
            {
                request.Headers.Add("operation-id", operationId);
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCancelRequest(string uploadId, string operationId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier202);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendPath("/uploads/", false);
            uri.AppendPath(uploadId, true);
            uri.AppendPath(":cancel", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (operationId != null)
            {
                request.Headers.Add("operation-id", operationId);
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static RequestContext DefaultRequestContext = new RequestContext();
        internal static RequestContext FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestContext() { CancellationToken = cancellationToken };
        }

        private static ResponseClassifier _responseClassifier200201;
        private static ResponseClassifier ResponseClassifier200201 => _responseClassifier200201 ??= new StatusCodeClassifier(stackalloc ushort[] { 200, 201 });
        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier202;
        private static ResponseClassifier ResponseClassifier202 => _responseClassifier202 ??= new StatusCodeClassifier(stackalloc ushort[] { 202 });
    }
}
