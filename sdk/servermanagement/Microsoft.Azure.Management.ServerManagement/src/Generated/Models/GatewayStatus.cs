// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.ServerManagement.Models
{
    using System.Linq;

    /// <summary>
    /// Expanded gateway status information
    /// </summary>
    public partial class GatewayStatus
    {
        /// <summary>
        /// Initializes a new instance of the GatewayStatus class.
        /// </summary>
        public GatewayStatus() { }

        /// <summary>
        /// Initializes a new instance of the GatewayStatus class.
        /// </summary>
        /// <param name="availableMemoryMByte">The available memory on the
        /// gateway host machine in megabytes.</param>
        /// <param name="gatewayCpuUtilizationPercent">The CPU utilization of
        /// the gateway process (numeric value between 0 and 100).</param>
        /// <param name="totalCpuUtilizationPercent">CPU Utilization of the
        /// whole system.</param>
        /// <param name="gatewayVersion">The version of the gateway that is
        /// installed on the system.</param>
        /// <param name="friendlyOsName">The Plaintext description of the OS
        /// on the gateway.</param>
        /// <param name="installedDate">The date the gateway was
        /// installed</param>
        /// <param name="logicalProcessorCount">Number of logical processors
        /// in the gateway system.</param>
        /// <param name="name">The computer name of the gateway system.</param>
        /// <param name="gatewayId">The gateway resource id.</param>
        /// <param name="gatewayWorkingSetMByte">The working set size of the
        /// gateway process in megabytes.</param>
        /// <param name="statusUpdated">UTC date and time when gateway status
        /// was last updated</param>
        /// <param name="groupPolicyError">The group policy error</param>
        /// <param name="allowGatewayGroupPolicyStatus">Status of the
        /// allowGatewayGroupPolicy setting</param>
        /// <param name="requireMfaGroupPolicyStatus">Status of the
        /// requireMfaGroupPolicy setting</param>
        /// <param name="encryptionCertificateThumbprint">Thumbprint of the
        /// encryption certificate</param>
        /// <param name="secondaryEncryptionCertificateThumbprint">Secondary
        /// thumbprint of the encryption certificate</param>
        /// <param name="encryptionJwk">The encryption cerfiticate key</param>
        /// <param name="secondaryEncryptionJwk">The secondary encryption
        /// cerfiticate key</param>
        /// <param name="activeMessageCount">active message count</param>
        /// <param name="latestPublishedMsiVersion">latest published version
        /// of the gateway install msi</param>
        /// <param name="publishedTimeUtc">gateway install msi published
        /// time</param>
        public GatewayStatus(double? availableMemoryMByte = default(double?), double? gatewayCpuUtilizationPercent = default(double?), double? totalCpuUtilizationPercent = default(double?), string gatewayVersion = default(string), string friendlyOsName = default(string), System.DateTime? installedDate = default(System.DateTime?), int? logicalProcessorCount = default(int?), string name = default(string), string gatewayId = default(string), double? gatewayWorkingSetMByte = default(double?), System.DateTime? statusUpdated = default(System.DateTime?), string groupPolicyError = default(string), bool? allowGatewayGroupPolicyStatus = default(bool?), bool? requireMfaGroupPolicyStatus = default(bool?), string encryptionCertificateThumbprint = default(string), string secondaryEncryptionCertificateThumbprint = default(string), EncryptionJwkResource encryptionJwk = default(EncryptionJwkResource), EncryptionJwkResource secondaryEncryptionJwk = default(EncryptionJwkResource), int? activeMessageCount = default(int?), string latestPublishedMsiVersion = default(string), System.DateTime? publishedTimeUtc = default(System.DateTime?))
        {
            AvailableMemoryMByte = availableMemoryMByte;
            GatewayCpuUtilizationPercent = gatewayCpuUtilizationPercent;
            TotalCpuUtilizationPercent = totalCpuUtilizationPercent;
            GatewayVersion = gatewayVersion;
            FriendlyOsName = friendlyOsName;
            InstalledDate = installedDate;
            LogicalProcessorCount = logicalProcessorCount;
            Name = name;
            GatewayId = gatewayId;
            GatewayWorkingSetMByte = gatewayWorkingSetMByte;
            StatusUpdated = statusUpdated;
            GroupPolicyError = groupPolicyError;
            AllowGatewayGroupPolicyStatus = allowGatewayGroupPolicyStatus;
            RequireMfaGroupPolicyStatus = requireMfaGroupPolicyStatus;
            EncryptionCertificateThumbprint = encryptionCertificateThumbprint;
            SecondaryEncryptionCertificateThumbprint = secondaryEncryptionCertificateThumbprint;
            EncryptionJwk = encryptionJwk;
            SecondaryEncryptionJwk = secondaryEncryptionJwk;
            ActiveMessageCount = activeMessageCount;
            LatestPublishedMsiVersion = latestPublishedMsiVersion;
            PublishedTimeUtc = publishedTimeUtc;
        }

        /// <summary>
        /// Gets or sets the available memory on the gateway host machine in
        /// megabytes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "availableMemoryMByte")]
        public double? AvailableMemoryMByte { get; set; }

        /// <summary>
        /// Gets or sets the CPU utilization of the gateway process (numeric
        /// value between 0 and 100).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "gatewayCpuUtilizationPercent")]
        public double? GatewayCpuUtilizationPercent { get; set; }

        /// <summary>
        /// Gets or sets CPU Utilization of the whole system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "totalCpuUtilizationPercent")]
        public double? TotalCpuUtilizationPercent { get; set; }

        /// <summary>
        /// Gets or sets the version of the gateway that is installed on the
        /// system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "gatewayVersion")]
        public string GatewayVersion { get; set; }

        /// <summary>
        /// Gets or sets the Plaintext description of the OS on the gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "friendlyOsName")]
        public string FriendlyOsName { get; set; }

        /// <summary>
        /// Gets or sets the date the gateway was installed
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "installedDate")]
        public System.DateTime? InstalledDate { get; set; }

        /// <summary>
        /// Gets or sets number of logical processors in the gateway system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "logicalProcessorCount")]
        public int? LogicalProcessorCount { get; set; }

        /// <summary>
        /// Gets or sets the computer name of the gateway system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the gateway resource id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "gatewayId")]
        public string GatewayId { get; set; }

        /// <summary>
        /// Gets or sets the working set size of the gateway process in
        /// megabytes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "gatewayWorkingSetMByte")]
        public double? GatewayWorkingSetMByte { get; set; }

        /// <summary>
        /// Gets or sets UTC date and time when gateway status was last updated
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "statusUpdated")]
        public System.DateTime? StatusUpdated { get; set; }

        /// <summary>
        /// Gets or sets the group policy error
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "groupPolicyError")]
        public string GroupPolicyError { get; set; }

        /// <summary>
        /// Gets or sets status of the allowGatewayGroupPolicy setting
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "allowGatewayGroupPolicyStatus")]
        public bool? AllowGatewayGroupPolicyStatus { get; set; }

        /// <summary>
        /// Gets or sets status of the requireMfaGroupPolicy setting
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "requireMfaGroupPolicyStatus")]
        public bool? RequireMfaGroupPolicyStatus { get; set; }

        /// <summary>
        /// Gets or sets thumbprint of the encryption certificate
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "encryptionCertificateThumbprint")]
        public string EncryptionCertificateThumbprint { get; set; }

        /// <summary>
        /// Gets or sets secondary thumbprint of the encryption certificate
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "secondaryEncryptionCertificateThumbprint")]
        public string SecondaryEncryptionCertificateThumbprint { get; set; }

        /// <summary>
        /// Gets or sets the encryption cerfiticate key
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "encryptionJwk")]
        public EncryptionJwkResource EncryptionJwk { get; set; }

        /// <summary>
        /// Gets or sets the secondary encryption cerfiticate key
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "secondaryEncryptionJwk")]
        public EncryptionJwkResource SecondaryEncryptionJwk { get; set; }

        /// <summary>
        /// Gets or sets active message count
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "activeMessageCount")]
        public int? ActiveMessageCount { get; set; }

        /// <summary>
        /// Gets or sets latest published version of the gateway install msi
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "latestPublishedMsiVersion")]
        public string LatestPublishedMsiVersion { get; set; }

        /// <summary>
        /// Gets or sets gateway install msi published time
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "publishedTimeUtc")]
        public System.DateTime? PublishedTimeUtc { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.GatewayCpuUtilizationPercent > 100)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "GatewayCpuUtilizationPercent", 100);
            }
            if (this.GatewayCpuUtilizationPercent < 0)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "GatewayCpuUtilizationPercent", 0);
            }
        }
    }
}
