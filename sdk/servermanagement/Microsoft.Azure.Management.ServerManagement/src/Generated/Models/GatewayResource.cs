// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.ServerManagement.Models
{
    using System.Linq;

    /// <summary>
    /// data model for an arm gateway resource
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class GatewayResource : Resource
    {
        /// <summary>
        /// Initializes a new instance of the GatewayResource class.
        /// </summary>
        public GatewayResource() { }

        /// <summary>
        /// Initializes a new instance of the GatewayResource class.
        /// </summary>
        /// <param name="id">ARM Resource ID</param>
        /// <param name="type">ARM Resource Type</param>
        /// <param name="name">ARM Resource Name</param>
        /// <param name="location">ARM Resource Location</param>
        /// <param name="tags">ARM Resource Tags</param>
        /// <param name="created">UTC date and time when gateway was first
        /// added to management service</param>
        /// <param name="updated">UTC date and time when node was last
        /// updated</param>
        /// <param name="upgradeMode">The upgradeMode property gives the
        /// flexibility to gateway to auto upgrade itself. If properties
        /// value not specified, then we assume upgradeMode = Automatic.
        /// Possible values include: 'Manual', 'Automatic'</param>
        /// <param name="desiredVersion">latest available msi version</param>
        /// <param name="instances">names of the nodes in the gateway</param>
        /// <param name="activeMessageCount">number of active messages</param>
        /// <param name="latestPublishedMsiVersion">last published msi
        /// version</param>
        /// <param name="publishedTimeUtc">the date/time of the last published
        /// gateway</param>
        /// <param name="installerDownload">installer download uri</param>
        /// <param name="minimumVersion">minimum gateway version</param>
        public GatewayResource(string id = default(string), string type = default(string), string name = default(string), string location = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), string etag = default(string), System.DateTime? created = default(System.DateTime?), System.DateTime? updated = default(System.DateTime?), UpgradeMode? upgradeMode = default(UpgradeMode?), string desiredVersion = default(string), System.Collections.Generic.IList<GatewayStatus> instances = default(System.Collections.Generic.IList<GatewayStatus>), int? activeMessageCount = default(int?), string latestPublishedMsiVersion = default(string), System.DateTime? publishedTimeUtc = default(System.DateTime?), string installerDownload = default(string), string minimumVersion = default(string))
            : base(id, type, name, location, tags, etag)
        {
            Created = created;
            Updated = updated;
            UpgradeMode = upgradeMode;
            DesiredVersion = desiredVersion;
            Instances = instances;
            ActiveMessageCount = activeMessageCount;
            LatestPublishedMsiVersion = latestPublishedMsiVersion;
            PublishedTimeUtc = publishedTimeUtc;
            InstallerDownload = installerDownload;
            MinimumVersion = minimumVersion;
        }

        /// <summary>
        /// Gets or sets UTC date and time when gateway was first added to
        /// management service
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.created")]
        public System.DateTime? Created { get; set; }

        /// <summary>
        /// Gets or sets UTC date and time when node was last updated
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.updated")]
        public System.DateTime? Updated { get; set; }

        /// <summary>
        /// Gets or sets the upgradeMode property gives the flexibility to
        /// gateway to auto upgrade itself. If properties value not
        /// specified, then we assume upgradeMode = Automatic. Possible
        /// values include: 'Manual', 'Automatic'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.upgradeMode")]
        public UpgradeMode? UpgradeMode { get; set; }

        /// <summary>
        /// Gets or sets latest available msi version
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.desiredVersion")]
        public string DesiredVersion { get; set; }

        /// <summary>
        /// Gets or sets names of the nodes in the gateway
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.instances")]
        public System.Collections.Generic.IList<GatewayStatus> Instances { get; set; }

        /// <summary>
        /// Gets or sets number of active messages
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.activeMessageCount")]
        public int? ActiveMessageCount { get; set; }

        /// <summary>
        /// Gets or sets last published msi version
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.latestPublishedMsiVersion")]
        public string LatestPublishedMsiVersion { get; set; }

        /// <summary>
        /// Gets or sets the date/time of the last published gateway
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.publishedTimeUtc")]
        public System.DateTime? PublishedTimeUtc { get; set; }

        /// <summary>
        /// Gets installer download uri
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.installerDownload")]
        public string InstallerDownload { get; private set; }

        /// <summary>
        /// Gets minimum gateway version
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.minimumVersion")]
        public string MinimumVersion { get; private set; }

    }
}
