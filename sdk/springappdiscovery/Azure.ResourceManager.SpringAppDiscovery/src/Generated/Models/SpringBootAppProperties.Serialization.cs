// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.SpringAppDiscovery.Models
{
    public partial class SpringBootAppProperties : IUtf8JsonSerializable, IJsonModel<SpringBootAppProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<SpringBootAppProperties>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<SpringBootAppProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SpringBootAppProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SpringBootAppProperties)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (AppName != null)
            {
                writer.WritePropertyName("appName"u8);
                writer.WriteStringValue(AppName);
            }
            if (ArtifactName != null)
            {
                writer.WritePropertyName("artifactName"u8);
                writer.WriteStringValue(ArtifactName);
            }
            if (AppPort.HasValue)
            {
                writer.WritePropertyName("appPort"u8);
                writer.WriteNumberValue(AppPort.Value);
            }
            if (AppType != null)
            {
                writer.WritePropertyName("appType"u8);
                writer.WriteStringValue(AppType);
            }
            if (!(ApplicationConfigurations is ChangeTrackingList<SpringBootAppApplicationConfigurationsItem> collection && collection.IsUndefined))
            {
                writer.WritePropertyName("applicationConfigurations"u8);
                writer.WriteStartArray();
                foreach (var item in ApplicationConfigurations)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(BindingPorts is ChangeTrackingList<int> collection0 && collection0.IsUndefined))
            {
                writer.WritePropertyName("bindingPorts"u8);
                writer.WriteStartArray();
                foreach (var item in BindingPorts)
                {
                    writer.WriteNumberValue(item);
                }
                writer.WriteEndArray();
            }
            if (BuildJdkVersion != null)
            {
                writer.WritePropertyName("buildJdkVersion"u8);
                writer.WriteStringValue(BuildJdkVersion);
            }
            if (!(Certificates is ChangeTrackingList<string> collection1 && collection1.IsUndefined))
            {
                writer.WritePropertyName("certificates"u8);
                writer.WriteStartArray();
                foreach (var item in Certificates)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Checksum != null)
            {
                writer.WritePropertyName("checksum"u8);
                writer.WriteStringValue(Checksum);
            }
            if (!(Dependencies is ChangeTrackingList<string> collection2 && collection2.IsUndefined))
            {
                writer.WritePropertyName("dependencies"u8);
                writer.WriteStartArray();
                foreach (var item in Dependencies)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(Environments is ChangeTrackingList<string> collection3 && collection3.IsUndefined))
            {
                writer.WritePropertyName("environments"u8);
                writer.WriteStartArray();
                foreach (var item in Environments)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (InstanceCount.HasValue)
            {
                writer.WritePropertyName("instanceCount"u8);
                writer.WriteNumberValue(InstanceCount.Value);
            }
            if (JarFileLocation != null)
            {
                writer.WritePropertyName("jarFileLocation"u8);
                writer.WriteStringValue(JarFileLocation);
            }
            if (JvmMemoryInMB.HasValue)
            {
                writer.WritePropertyName("jvmMemoryInMB"u8);
                writer.WriteNumberValue(JvmMemoryInMB.Value);
            }
            if (!(JvmOptions is ChangeTrackingList<string> collection4 && collection4.IsUndefined))
            {
                writer.WritePropertyName("jvmOptions"u8);
                writer.WriteStartArray();
                foreach (var item in JvmOptions)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(Miscs is ChangeTrackingList<SpringBootAppMiscsItem> collection5 && collection5.IsUndefined))
            {
                writer.WritePropertyName("miscs"u8);
                writer.WriteStartArray();
                foreach (var item in Miscs)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(Instances is ChangeTrackingList<SpringBootAppInstancesItem> collection6 && collection6.IsUndefined))
            {
                writer.WritePropertyName("instances"u8);
                writer.WriteStartArray();
                foreach (var item in Instances)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (RuntimeJdkVersion != null)
            {
                writer.WritePropertyName("runtimeJdkVersion"u8);
                writer.WriteStringValue(RuntimeJdkVersion);
            }
            if (!(Servers is ChangeTrackingList<string> collection7 && collection7.IsUndefined))
            {
                writer.WritePropertyName("servers"u8);
                writer.WriteStartArray();
                foreach (var item in Servers)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(MachineArmIds is ChangeTrackingList<ResourceIdentifier> collection8 && collection8.IsUndefined))
            {
                writer.WritePropertyName("machineArmIds"u8);
                writer.WriteStartArray();
                foreach (var item in MachineArmIds)
                {
                    if (item == null)
                    {
                        writer.WriteNullValue();
                        continue;
                    }
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (SiteName != null)
            {
                writer.WritePropertyName("siteName"u8);
                writer.WriteStringValue(SiteName);
            }
            if (SpringBootVersion != null)
            {
                writer.WritePropertyName("springBootVersion"u8);
                writer.WriteStringValue(SpringBootVersion);
            }
            if (!(StaticContentLocations is ChangeTrackingList<string> collection9 && collection9.IsUndefined))
            {
                writer.WritePropertyName("staticContentLocations"u8);
                writer.WriteStartArray();
                foreach (var item in StaticContentLocations)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (!(ConnectionStrings is ChangeTrackingList<string> collection10 && collection10.IsUndefined))
            {
                writer.WritePropertyName("connectionStrings"u8);
                writer.WriteStartArray();
                foreach (var item in ConnectionStrings)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (LastModifiedOn.HasValue)
            {
                writer.WritePropertyName("lastModifiedTime"u8);
                writer.WriteStringValue(LastModifiedOn.Value, "O");
            }
            if (LastUpdatedOn.HasValue)
            {
                writer.WritePropertyName("lastUpdatedTime"u8);
                writer.WriteStringValue(LastUpdatedOn.Value, "O");
            }
            if (ProvisioningState.HasValue)
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (!(Errors is ChangeTrackingList<SpringBootSiteError> collection11 && collection11.IsUndefined))
            {
                writer.WritePropertyName("errors"u8);
                writer.WriteStartArray();
                foreach (var item in Errors)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        SpringBootAppProperties IJsonModel<SpringBootAppProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SpringBootAppProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(SpringBootAppProperties)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeSpringBootAppProperties(document.RootElement, options);
        }

        internal static SpringBootAppProperties DeserializeSpringBootAppProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> appName = default;
            Optional<string> artifactName = default;
            Optional<int> appPort = default;
            Optional<string> appType = default;
            IList<SpringBootAppApplicationConfigurationsItem> applicationConfigurations = default;
            IList<int> bindingPorts = default;
            Optional<string> buildJdkVersion = default;
            IList<string> certificates = default;
            Optional<string> checksum = default;
            IList<string> dependencies = default;
            IList<string> environments = default;
            Optional<int> instanceCount = default;
            Optional<string> jarFileLocation = default;
            Optional<int> jvmMemoryInMB = default;
            IList<string> jvmOptions = default;
            IList<SpringBootAppMiscsItem> miscs = default;
            IList<SpringBootAppInstancesItem> instances = default;
            Optional<string> runtimeJdkVersion = default;
            IList<string> servers = default;
            IList<ResourceIdentifier> machineArmIds = default;
            Optional<string> siteName = default;
            Optional<string> springBootVersion = default;
            IList<string> staticContentLocations = default;
            IList<string> connectionStrings = default;
            Optional<DateTimeOffset> lastModifiedTime = default;
            Optional<DateTimeOffset> lastUpdatedTime = default;
            Optional<SpringAppDiscoveryProvisioningState> provisioningState = default;
            IList<SpringBootSiteError> errors = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("appName"u8))
                {
                    appName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("artifactName"u8))
                {
                    artifactName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("appPort"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    appPort = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("appType"u8))
                {
                    appType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("applicationConfigurations"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SpringBootAppApplicationConfigurationsItem> array = new List<SpringBootAppApplicationConfigurationsItem>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SpringBootAppApplicationConfigurationsItem.DeserializeSpringBootAppApplicationConfigurationsItem(item, options));
                    }
                    applicationConfigurations = array;
                    continue;
                }
                if (property.NameEquals("bindingPorts"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<int> array = new List<int>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetInt32());
                    }
                    bindingPorts = array;
                    continue;
                }
                if (property.NameEquals("buildJdkVersion"u8))
                {
                    buildJdkVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("certificates"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    certificates = array;
                    continue;
                }
                if (property.NameEquals("checksum"u8))
                {
                    checksum = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("dependencies"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    dependencies = array;
                    continue;
                }
                if (property.NameEquals("environments"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    environments = array;
                    continue;
                }
                if (property.NameEquals("instanceCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    instanceCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("jarFileLocation"u8))
                {
                    jarFileLocation = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("jvmMemoryInMB"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    jvmMemoryInMB = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("jvmOptions"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    jvmOptions = array;
                    continue;
                }
                if (property.NameEquals("miscs"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SpringBootAppMiscsItem> array = new List<SpringBootAppMiscsItem>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SpringBootAppMiscsItem.DeserializeSpringBootAppMiscsItem(item, options));
                    }
                    miscs = array;
                    continue;
                }
                if (property.NameEquals("instances"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SpringBootAppInstancesItem> array = new List<SpringBootAppInstancesItem>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SpringBootAppInstancesItem.DeserializeSpringBootAppInstancesItem(item, options));
                    }
                    instances = array;
                    continue;
                }
                if (property.NameEquals("runtimeJdkVersion"u8))
                {
                    runtimeJdkVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("servers"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    servers = array;
                    continue;
                }
                if (property.NameEquals("machineArmIds"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ResourceIdentifier> array = new List<ResourceIdentifier>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        if (item.ValueKind == JsonValueKind.Null)
                        {
                            array.Add(null);
                        }
                        else
                        {
                            array.Add(new ResourceIdentifier(item.GetString()));
                        }
                    }
                    machineArmIds = array;
                    continue;
                }
                if (property.NameEquals("siteName"u8))
                {
                    siteName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("springBootVersion"u8))
                {
                    springBootVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("staticContentLocations"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    staticContentLocations = array;
                    continue;
                }
                if (property.NameEquals("connectionStrings"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    connectionStrings = array;
                    continue;
                }
                if (property.NameEquals("lastModifiedTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastModifiedTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("lastUpdatedTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastUpdatedTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new SpringAppDiscoveryProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("errors"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<SpringBootSiteError> array = new List<SpringBootSiteError>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(SpringBootSiteError.DeserializeSpringBootSiteError(item, options));
                    }
                    errors = array;
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new SpringBootAppProperties(
                appName.Value,
                artifactName.Value,
                Optional.ToNullable(appPort),
                appType.Value,
                applicationConfigurations ?? new ChangeTrackingList<SpringBootAppApplicationConfigurationsItem>(),
                bindingPorts ?? new ChangeTrackingList<int>(),
                buildJdkVersion.Value,
                certificates ?? new ChangeTrackingList<string>(),
                checksum.Value,
                dependencies ?? new ChangeTrackingList<string>(),
                environments ?? new ChangeTrackingList<string>(),
                Optional.ToNullable(instanceCount),
                jarFileLocation.Value,
                Optional.ToNullable(jvmMemoryInMB),
                jvmOptions ?? new ChangeTrackingList<string>(),
                miscs ?? new ChangeTrackingList<SpringBootAppMiscsItem>(),
                instances ?? new ChangeTrackingList<SpringBootAppInstancesItem>(),
                runtimeJdkVersion.Value,
                servers ?? new ChangeTrackingList<string>(),
                machineArmIds ?? new ChangeTrackingList<ResourceIdentifier>(),
                siteName.Value,
                springBootVersion.Value,
                staticContentLocations ?? new ChangeTrackingList<string>(),
                connectionStrings ?? new ChangeTrackingList<string>(),
                Optional.ToNullable(lastModifiedTime),
                Optional.ToNullable(lastUpdatedTime),
                Optional.ToNullable(provisioningState),
                errors ?? new ChangeTrackingList<SpringBootSiteError>(),
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<SpringBootAppProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SpringBootAppProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(SpringBootAppProperties)} does not support '{options.Format}' format.");
            }
        }

        SpringBootAppProperties IPersistableModel<SpringBootAppProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<SpringBootAppProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeSpringBootAppProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(SpringBootAppProperties)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<SpringBootAppProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
