// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.ElasticSan;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.ElasticSan.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmElasticSanModelFactory
    {
        /// <summary> Initializes a new instance of ElasticSanSkuInformation. </summary>
        /// <param name="name"> Sku Name. </param>
        /// <param name="tier"> Sku Tier. </param>
        /// <param name="resourceType"> The type of the resource. </param>
        /// <param name="locations"> The set of locations that the SKU is available. This will be supported and registered Azure Geo Regions (e.g. West US, East US, Southeast Asia, etc.). </param>
        /// <param name="locationInfo"> Availability of the SKU for the location/zone. </param>
        /// <param name="capabilities"> The capability information in the specified SKU. </param>
        /// <returns> A new <see cref="Models.ElasticSanSkuInformation"/> instance for mocking. </returns>
        public static ElasticSanSkuInformation ElasticSanSkuInformation(ElasticSanSkuName name = default, ElasticSanSkuTier? tier = null, string resourceType = null, IEnumerable<string> locations = null, IEnumerable<ElasticSanSkuLocationInfo> locationInfo = null, IEnumerable<ElasticSanSkuCapability> capabilities = null)
        {
            locations ??= new List<string>();
            locationInfo ??= new List<ElasticSanSkuLocationInfo>();
            capabilities ??= new List<ElasticSanSkuCapability>();

            return new ElasticSanSkuInformation(name, tier, resourceType, locations?.ToList(), locationInfo?.ToList(), capabilities?.ToList());
        }

        /// <summary> Initializes a new instance of ElasticSanSkuLocationInfo. </summary>
        /// <param name="location"> The location. </param>
        /// <param name="zones"> The zones. </param>
        /// <returns> A new <see cref="Models.ElasticSanSkuLocationInfo"/> instance for mocking. </returns>
        public static ElasticSanSkuLocationInfo ElasticSanSkuLocationInfo(AzureLocation? location = null, IEnumerable<string> zones = null)
        {
            zones ??= new List<string>();

            return new ElasticSanSkuLocationInfo(location, zones?.ToList());
        }

        /// <summary> Initializes a new instance of ElasticSanSkuCapability. </summary>
        /// <param name="name"> The name of capability. </param>
        /// <param name="value"> A string value to indicate states of given capability. </param>
        /// <returns> A new <see cref="Models.ElasticSanSkuCapability"/> instance for mocking. </returns>
        public static ElasticSanSkuCapability ElasticSanSkuCapability(string name = null, string value = null)
        {
            return new ElasticSanSkuCapability(name, value);
        }

        /// <summary> Initializes a new instance of ElasticSanData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="sku"> resource sku. </param>
        /// <param name="availabilityZones"> Logical zone for Elastic San resource; example: [&quot;1&quot;]. </param>
        /// <param name="provisioningState"> State of the operation on the resource. </param>
        /// <param name="baseSizeTiB"> Base size of the Elastic San appliance in TiB. </param>
        /// <param name="extendedCapacitySizeTiB"> Extended size of the Elastic San appliance in TiB. </param>
        /// <param name="totalVolumeSizeGiB"> Total size of the provisioned Volumes in GiB. </param>
        /// <param name="volumeGroupCount"> Total number of volume groups in this Elastic San appliance. </param>
        /// <param name="totalIops"> Total Provisioned IOPS of the Elastic San appliance. </param>
        /// <param name="totalMbps"> Total Provisioned MBps Elastic San appliance. </param>
        /// <param name="totalSizeTiB"> Total size of the Elastic San appliance in TB. </param>
        /// <returns> A new <see cref="ElasticSan.ElasticSanData"/> instance for mocking. </returns>
        public static ElasticSanData ElasticSanData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ElasticSanSku sku = null, IEnumerable<string> availabilityZones = null, ElasticSanProvisioningState? provisioningState = null, long baseSizeTiB = default, long extendedCapacitySizeTiB = default, long? totalVolumeSizeGiB = null, long? volumeGroupCount = null, long? totalIops = null, long? totalMbps = null, long? totalSizeTiB = null)
        {
            tags ??= new Dictionary<string, string>();
            availabilityZones ??= new List<string>();

            return new ElasticSanData(id, name, resourceType, systemData, tags, location, sku, availabilityZones?.ToList(), provisioningState, baseSizeTiB, extendedCapacitySizeTiB, totalVolumeSizeGiB, volumeGroupCount, totalIops, totalMbps, totalSizeTiB);
        }

        /// <summary> Initializes a new instance of ElasticSanVolumeGroupData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="provisioningState"> State of the operation on the resource. </param>
        /// <param name="protocolType"> Type of storage target. </param>
        /// <param name="encryption"> Type of encryption. </param>
        /// <param name="virtualNetworkRules"> A collection of rules governing the accessibility from specific network locations. </param>
        /// <param name="tags"> Azure resource tags. </param>
        /// <returns> A new <see cref="ElasticSan.ElasticSanVolumeGroupData"/> instance for mocking. </returns>
        public static ElasticSanVolumeGroupData ElasticSanVolumeGroupData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ElasticSanProvisioningState? provisioningState = null, StorageTargetType? protocolType = null, ElasticSanEncryptionType? encryption = null, IEnumerable<ElasticSanVirtualNetworkRule> virtualNetworkRules = null, IDictionary<string, string> tags = null)
        {
            virtualNetworkRules ??= new List<ElasticSanVirtualNetworkRule>();
            tags ??= new Dictionary<string, string>();

            return new ElasticSanVolumeGroupData(id, name, resourceType, systemData, provisioningState, protocolType, encryption, virtualNetworkRules != null ? new NetworkRuleSet(virtualNetworkRules?.ToList()) : null, tags);
        }

        /// <summary> Initializes a new instance of ElasticSanVirtualNetworkRule. </summary>
        /// <param name="virtualNetworkResourceId"> Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}. </param>
        /// <param name="action"> The action of virtual network rule. </param>
        /// <param name="state"> Gets the state of virtual network rule. </param>
        /// <returns> A new <see cref="Models.ElasticSanVirtualNetworkRule"/> instance for mocking. </returns>
        public static ElasticSanVirtualNetworkRule ElasticSanVirtualNetworkRule(ResourceIdentifier virtualNetworkResourceId = null, ElasticSanVirtualNetworkRuleAction? action = null, ElasticSanVirtualNetworkRuleState? state = null)
        {
            return new ElasticSanVirtualNetworkRule(virtualNetworkResourceId, action, state);
        }

        /// <summary> Initializes a new instance of ElasticSanVolumeData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="volumeId"> Unique Id of the volume in GUID format. </param>
        /// <param name="creationData"> State of the operation on the resource. </param>
        /// <param name="sizeGiB"> Volume size. </param>
        /// <param name="storageTarget"> Storage target information. </param>
        /// <param name="tags"> Azure resource tags. </param>
        /// <returns> A new <see cref="ElasticSan.ElasticSanVolumeData"/> instance for mocking. </returns>
        public static ElasticSanVolumeData ElasticSanVolumeData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, Guid? volumeId = null, ElasticSanVolumeDataSourceInfo creationData = null, long? sizeGiB = null, IscsiTargetInfo storageTarget = null, IDictionary<string, string> tags = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ElasticSanVolumeData(id, name, resourceType, systemData, volumeId, creationData, sizeGiB, storageTarget, tags);
        }

        /// <summary> Initializes a new instance of IscsiTargetInfo. </summary>
        /// <param name="targetIqn"> iSCSI Target IQN (iSCSI Qualified Name); example: &quot;iqn.2005-03.org.iscsi:server&quot;. </param>
        /// <param name="targetPortalHostname"> iSCSI Target Portal Host Name. </param>
        /// <param name="targetPortalPort"> iSCSI Target Portal Port. </param>
        /// <param name="provisioningState"> State of the operation on the resource. </param>
        /// <param name="status"> Operational status of the iSCSI Target. </param>
        /// <returns> A new <see cref="Models.IscsiTargetInfo"/> instance for mocking. </returns>
        public static IscsiTargetInfo IscsiTargetInfo(string targetIqn = null, string targetPortalHostname = null, int? targetPortalPort = null, ElasticSanProvisioningState? provisioningState = null, ResourceOperationalStatus? status = null)
        {
            return new IscsiTargetInfo(targetIqn, targetPortalHostname, targetPortalPort, provisioningState, status);
        }
    }
}
