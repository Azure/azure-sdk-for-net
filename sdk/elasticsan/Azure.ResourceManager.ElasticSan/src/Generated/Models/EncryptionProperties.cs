// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.ElasticSan.Models
{
    /// <summary> The encryption settings on the volume group. </summary>
    public partial class EncryptionProperties
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="EncryptionProperties"/>. </summary>
        public EncryptionProperties()
        {
        }

        /// <summary> Initializes a new instance of <see cref="EncryptionProperties"/>. </summary>
        /// <param name="keyVaultProperties"> Properties provided by key vault. </param>
        /// <param name="encryptionIdentity"> The identity to be used with service-side encryption at rest. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal EncryptionProperties(KeyVaultProperties keyVaultProperties, EncryptionIdentity encryptionIdentity, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            KeyVaultProperties = keyVaultProperties;
            EncryptionIdentity = encryptionIdentity;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Properties provided by key vault. </summary>
        public KeyVaultProperties KeyVaultProperties { get; set; }
        /// <summary> The identity to be used with service-side encryption at rest. </summary>
        internal EncryptionIdentity EncryptionIdentity { get; set; }
        /// <summary> Resource identifier of the UserAssigned identity to be associated with server-side encryption on the volume group. </summary>
        public string EncryptionUserAssignedIdentity
        {
            get => EncryptionIdentity is null ? default : EncryptionIdentity.EncryptionUserAssignedIdentity;
            set
            {
                if (EncryptionIdentity is null)
                    EncryptionIdentity = new EncryptionIdentity();
                EncryptionIdentity.EncryptionUserAssignedIdentity = value;
            }
        }
    }
}
