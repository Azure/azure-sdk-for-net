// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Batch.Protocol
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for CertificateOperations.
    /// </summary>
    public static partial class CertificateOperationsExtensions
    {
            /// <summary>
            /// Adds a Certificate to the specified Account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='certificate'>
            /// The Certificate to be added.
            /// </param>
            /// <param name='certificateAddOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static CertificateAddHeaders Add(this ICertificateOperations operations, CertificateAddParameter certificate, CertificateAddOptions certificateAddOptions = default(CertificateAddOptions))
            {
                return operations.AddAsync(certificate, certificateAddOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a Certificate to the specified Account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='certificate'>
            /// The Certificate to be added.
            /// </param>
            /// <param name='certificateAddOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificateAddHeaders> AddAsync(this ICertificateOperations operations, CertificateAddParameter certificate, CertificateAddOptions certificateAddOptions = default(CertificateAddOptions), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddWithHttpMessagesAsync(certificate, certificateAddOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Lists all of the Certificates that have been added to the specified
            /// Account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='certificateListOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static IPage<Certificate> List(this ICertificateOperations operations, CertificateListOptions certificateListOptions = default(CertificateListOptions))
            {
                return operations.ListAsync(certificateListOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all of the Certificates that have been added to the specified
            /// Account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='certificateListOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Certificate>> ListAsync(this ICertificateOperations operations, CertificateListOptions certificateListOptions = default(CertificateListOptions), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(certificateListOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Cancels a failed deletion of a Certificate from the specified Account.
            /// </summary>
            /// <remarks>
            /// If you try to delete a Certificate that is being used by a Pool or Compute
            /// Node, the status of the Certificate changes to deleteFailed. If you decide
            /// that you want to continue using the Certificate, you can use this operation
            /// to set the status of the Certificate back to active. If you intend to
            /// delete the Certificate, you do not need to run this operation after the
            /// deletion failed. You must make sure that the Certificate is not being used
            /// by any resources, and then you can try again to delete the Certificate.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thumbprintAlgorithm'>
            /// The algorithm used to derive the thumbprint parameter. This must be sha1.
            /// </param>
            /// <param name='thumbprint'>
            /// The thumbprint of the Certificate being deleted.
            /// </param>
            /// <param name='certificateCancelDeletionOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static CertificateCancelDeletionHeaders CancelDeletion(this ICertificateOperations operations, string thumbprintAlgorithm, string thumbprint, CertificateCancelDeletionOptions certificateCancelDeletionOptions = default(CertificateCancelDeletionOptions))
            {
                return operations.CancelDeletionAsync(thumbprintAlgorithm, thumbprint, certificateCancelDeletionOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Cancels a failed deletion of a Certificate from the specified Account.
            /// </summary>
            /// <remarks>
            /// If you try to delete a Certificate that is being used by a Pool or Compute
            /// Node, the status of the Certificate changes to deleteFailed. If you decide
            /// that you want to continue using the Certificate, you can use this operation
            /// to set the status of the Certificate back to active. If you intend to
            /// delete the Certificate, you do not need to run this operation after the
            /// deletion failed. You must make sure that the Certificate is not being used
            /// by any resources, and then you can try again to delete the Certificate.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thumbprintAlgorithm'>
            /// The algorithm used to derive the thumbprint parameter. This must be sha1.
            /// </param>
            /// <param name='thumbprint'>
            /// The thumbprint of the Certificate being deleted.
            /// </param>
            /// <param name='certificateCancelDeletionOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificateCancelDeletionHeaders> CancelDeletionAsync(this ICertificateOperations operations, string thumbprintAlgorithm, string thumbprint, CertificateCancelDeletionOptions certificateCancelDeletionOptions = default(CertificateCancelDeletionOptions), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CancelDeletionWithHttpMessagesAsync(thumbprintAlgorithm, thumbprint, certificateCancelDeletionOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Deletes a Certificate from the specified Account.
            /// </summary>
            /// <remarks>
            /// You cannot delete a Certificate if a resource (Pool or Compute Node) is
            /// using it. Before you can delete a Certificate, you must therefore make sure
            /// that the Certificate is not associated with any existing Pools, the
            /// Certificate is not installed on any Nodes (even if you remove a Certificate
            /// from a Pool, it is not removed from existing Compute Nodes in that Pool
            /// until they restart), and no running Tasks depend on the Certificate. If you
            /// try to delete a Certificate that is in use, the deletion fails. The
            /// Certificate status changes to deleteFailed. You can use Cancel Delete
            /// Certificate to set the status back to active if you decide that you want to
            /// continue using the Certificate.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thumbprintAlgorithm'>
            /// The algorithm used to derive the thumbprint parameter. This must be sha1.
            /// </param>
            /// <param name='thumbprint'>
            /// The thumbprint of the Certificate to be deleted.
            /// </param>
            /// <param name='certificateDeleteOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static CertificateDeleteHeaders Delete(this ICertificateOperations operations, string thumbprintAlgorithm, string thumbprint, CertificateDeleteOptions certificateDeleteOptions = default(CertificateDeleteOptions))
            {
                return operations.DeleteAsync(thumbprintAlgorithm, thumbprint, certificateDeleteOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a Certificate from the specified Account.
            /// </summary>
            /// <remarks>
            /// You cannot delete a Certificate if a resource (Pool or Compute Node) is
            /// using it. Before you can delete a Certificate, you must therefore make sure
            /// that the Certificate is not associated with any existing Pools, the
            /// Certificate is not installed on any Nodes (even if you remove a Certificate
            /// from a Pool, it is not removed from existing Compute Nodes in that Pool
            /// until they restart), and no running Tasks depend on the Certificate. If you
            /// try to delete a Certificate that is in use, the deletion fails. The
            /// Certificate status changes to deleteFailed. You can use Cancel Delete
            /// Certificate to set the status back to active if you decide that you want to
            /// continue using the Certificate.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thumbprintAlgorithm'>
            /// The algorithm used to derive the thumbprint parameter. This must be sha1.
            /// </param>
            /// <param name='thumbprint'>
            /// The thumbprint of the Certificate to be deleted.
            /// </param>
            /// <param name='certificateDeleteOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificateDeleteHeaders> DeleteAsync(this ICertificateOperations operations, string thumbprintAlgorithm, string thumbprint, CertificateDeleteOptions certificateDeleteOptions = default(CertificateDeleteOptions), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(thumbprintAlgorithm, thumbprint, certificateDeleteOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Gets information about the specified Certificate.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thumbprintAlgorithm'>
            /// The algorithm used to derive the thumbprint parameter. This must be sha1.
            /// </param>
            /// <param name='thumbprint'>
            /// The thumbprint of the Certificate to get.
            /// </param>
            /// <param name='certificateGetOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static Certificate Get(this ICertificateOperations operations, string thumbprintAlgorithm, string thumbprint, CertificateGetOptions certificateGetOptions = default(CertificateGetOptions))
            {
                return operations.GetAsync(thumbprintAlgorithm, thumbprint, certificateGetOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets information about the specified Certificate.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='thumbprintAlgorithm'>
            /// The algorithm used to derive the thumbprint parameter. This must be sha1.
            /// </param>
            /// <param name='thumbprint'>
            /// The thumbprint of the Certificate to get.
            /// </param>
            /// <param name='certificateGetOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Certificate> GetAsync(this ICertificateOperations operations, string thumbprintAlgorithm, string thumbprint, CertificateGetOptions certificateGetOptions = default(CertificateGetOptions), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(thumbprintAlgorithm, thumbprint, certificateGetOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all of the Certificates that have been added to the specified
            /// Account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='certificateListNextOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static IPage<Certificate> ListNext(this ICertificateOperations operations, string nextPageLink, CertificateListNextOptions certificateListNextOptions = default(CertificateListNextOptions))
            {
                return operations.ListNextAsync(nextPageLink, certificateListNextOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all of the Certificates that have been added to the specified
            /// Account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='certificateListNextOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Certificate>> ListNextAsync(this ICertificateOperations operations, string nextPageLink, CertificateListNextOptions certificateListNextOptions = default(CertificateListNextOptions), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, certificateListNextOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
