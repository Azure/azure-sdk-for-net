// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Batch.Protocol.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for ContainerType.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum ContainerType
    {
        /// <summary>
        /// A Docker compatible container technology will be used to launch the
        /// containers.
        /// </summary>
        [EnumMember(Value = "dockerCompatible")]
        DockerCompatible,
        /// <summary>
        /// A CRI based technology will be used to launch the containers.
        /// </summary>
        [EnumMember(Value = "criCompatible")]
        CriCompatible
    }
    internal static class ContainerTypeEnumExtension
    {
        internal static string ToSerializedValue(this ContainerType? value)
        {
            return value == null ? null : ((ContainerType)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this ContainerType value)
        {
            switch( value )
            {
                case ContainerType.DockerCompatible:
                    return "dockerCompatible";
                case ContainerType.CriCompatible:
                    return "criCompatible";
            }
            return null;
        }

        internal static ContainerType? ParseContainerType(this string value)
        {
            switch( value )
            {
                case "dockerCompatible":
                    return ContainerType.DockerCompatible;
                case "criCompatible":
                    return ContainerType.CriCompatible;
            }
            return null;
        }
    }
}
