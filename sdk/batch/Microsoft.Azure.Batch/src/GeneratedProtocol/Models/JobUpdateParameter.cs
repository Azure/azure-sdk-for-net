// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Batch.Protocol.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The set of changes to be made to a Job.
    /// </summary>
    public partial class JobUpdateParameter
    {
        /// <summary>
        /// Initializes a new instance of the JobUpdateParameter class.
        /// </summary>
        public JobUpdateParameter()
        {
            PoolInfo = new PoolInformation();
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the JobUpdateParameter class.
        /// </summary>
        /// <param name="poolInfo">The Pool on which the Batch service runs the
        /// Job's Tasks.</param>
        /// <param name="priority">The priority of the Job.</param>
        /// <param name="constraints">The execution constraints for the
        /// Job.</param>
        /// <param name="metadata">A list of name-value pairs associated with
        /// the Job as metadata.</param>
        /// <param name="onAllTasksComplete">The action the Batch service
        /// should take when all Tasks in the Job are in the completed
        /// state.</param>
        public JobUpdateParameter(PoolInformation poolInfo, int? priority = default(int?), JobConstraints constraints = default(JobConstraints), IList<MetadataItem> metadata = default(IList<MetadataItem>), OnAllTasksComplete? onAllTasksComplete = default(OnAllTasksComplete?))
        {
            Priority = priority;
            Constraints = constraints;
            PoolInfo = poolInfo;
            Metadata = metadata;
            OnAllTasksComplete = onAllTasksComplete;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the priority of the Job.
        /// </summary>
        /// <remarks>
        /// Priority values can range from -1000 to 1000, with -1000 being the
        /// lowest priority and 1000 being the highest priority. If omitted, it
        /// is set to the default value 0.
        /// </remarks>
        [JsonProperty(PropertyName = "priority")]
        public int? Priority { get; set; }

        /// <summary>
        /// Gets or sets the execution constraints for the Job.
        /// </summary>
        /// <remarks>
        /// If omitted, the constraints are cleared.
        /// </remarks>
        [JsonProperty(PropertyName = "constraints")]
        public JobConstraints Constraints { get; set; }

        /// <summary>
        /// Gets or sets the Pool on which the Batch service runs the Job's
        /// Tasks.
        /// </summary>
        /// <remarks>
        /// You may change the Pool for a Job only when the Job is disabled.
        /// The Update Job call will fail if you include the poolInfo element
        /// and the Job is not disabled. If you specify an
        /// autoPoolSpecification in the poolInfo, only the keepAlive property
        /// of the autoPoolSpecification can be updated, and then only if the
        /// autoPoolSpecification has a poolLifetimeOption of Job (other job
        /// properties can be updated as normal).
        /// </remarks>
        [JsonProperty(PropertyName = "poolInfo")]
        public PoolInformation PoolInfo { get; set; }

        /// <summary>
        /// Gets or sets a list of name-value pairs associated with the Job as
        /// metadata.
        /// </summary>
        /// <remarks>
        /// If omitted, it takes the default value of an empty list; in effect,
        /// any existing metadata is deleted.
        /// </remarks>
        [JsonProperty(PropertyName = "metadata")]
        public IList<MetadataItem> Metadata { get; set; }

        /// <summary>
        /// Gets or sets the action the Batch service should take when all
        /// Tasks in the Job are in the completed state.
        /// </summary>
        /// <remarks>
        /// If omitted, the completion behavior is set to noaction. If the
        /// current value is terminatejob, this is an error because a Job's
        /// completion behavior may not be changed from terminatejob to
        /// noaction. You may not change the value from terminatejob to
        /// noaction - that is, once you have engaged automatic Job
        /// termination, you cannot turn it off again. If you try to do this,
        /// the request fails and Batch returns status code 400 (Bad Request)
        /// and an 'invalid property value' error response. If you do not
        /// specify this element in a PUT request, it is equivalent to passing
        /// noaction. This is an error if the current value is terminatejob.
        /// Possible values include: 'noAction', 'terminateJob'
        /// </remarks>
        [JsonProperty(PropertyName = "onAllTasksComplete")]
        public OnAllTasksComplete? OnAllTasksComplete { get; set; }

    }
}
