// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Batch.Protocol.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The number of Compute Nodes in each Compute Node state.
    /// </summary>
    public partial class NodeCounts
    {
        /// <summary>
        /// Initializes a new instance of the NodeCounts class.
        /// </summary>
        public NodeCounts()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the NodeCounts class.
        /// </summary>
        /// <param name="creating">The number of Compute Nodes in the creating
        /// state.</param>
        /// <param name="idle">The number of Compute Nodes in the idle
        /// state.</param>
        /// <param name="offline">The number of Compute Nodes in the offline
        /// state.</param>
        /// <param name="preempted">The number of Compute Nodes in the
        /// preempted state.</param>
        /// <param name="rebooting">The count of Compute Nodes in the rebooting
        /// state.</param>
        /// <param name="reimaging">The number of Compute Nodes in the
        /// reimaging state.</param>
        /// <param name="running">The number of Compute Nodes in the running
        /// state.</param>
        /// <param name="starting">The number of Compute Nodes in the starting
        /// state.</param>
        /// <param name="startTaskFailed">The number of Compute Nodes in the
        /// startTaskFailed state.</param>
        /// <param name="leavingPool">The number of Compute Nodes in the
        /// leavingPool state.</param>
        /// <param name="unknown">The number of Compute Nodes in the unknown
        /// state.</param>
        /// <param name="unusable">The number of Compute Nodes in the unusable
        /// state.</param>
        /// <param name="waitingForStartTask">The number of Compute Nodes in
        /// the waitingForStartTask state.</param>
        /// <param name="total">The total number of Compute Nodes.</param>
        public NodeCounts(int creating, int idle, int offline, int preempted, int rebooting, int reimaging, int running, int starting, int startTaskFailed, int leavingPool, int unknown, int unusable, int waitingForStartTask, int total)
        {
            Creating = creating;
            Idle = idle;
            Offline = offline;
            Preempted = preempted;
            Rebooting = rebooting;
            Reimaging = reimaging;
            Running = running;
            Starting = starting;
            StartTaskFailed = startTaskFailed;
            LeavingPool = leavingPool;
            Unknown = unknown;
            Unusable = unusable;
            WaitingForStartTask = waitingForStartTask;
            Total = total;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the number of Compute Nodes in the creating state.
        /// </summary>
        [JsonProperty(PropertyName = "creating")]
        public int Creating { get; set; }

        /// <summary>
        /// Gets or sets the number of Compute Nodes in the idle state.
        /// </summary>
        [JsonProperty(PropertyName = "idle")]
        public int Idle { get; set; }

        /// <summary>
        /// Gets or sets the number of Compute Nodes in the offline state.
        /// </summary>
        [JsonProperty(PropertyName = "offline")]
        public int Offline { get; set; }

        /// <summary>
        /// Gets or sets the number of Compute Nodes in the preempted state.
        /// </summary>
        [JsonProperty(PropertyName = "preempted")]
        public int Preempted { get; set; }

        /// <summary>
        /// Gets or sets the count of Compute Nodes in the rebooting state.
        /// </summary>
        [JsonProperty(PropertyName = "rebooting")]
        public int Rebooting { get; set; }

        /// <summary>
        /// Gets or sets the number of Compute Nodes in the reimaging state.
        /// </summary>
        [JsonProperty(PropertyName = "reimaging")]
        public int Reimaging { get; set; }

        /// <summary>
        /// Gets or sets the number of Compute Nodes in the running state.
        /// </summary>
        [JsonProperty(PropertyName = "running")]
        public int Running { get; set; }

        /// <summary>
        /// Gets or sets the number of Compute Nodes in the starting state.
        /// </summary>
        [JsonProperty(PropertyName = "starting")]
        public int Starting { get; set; }

        /// <summary>
        /// Gets or sets the number of Compute Nodes in the startTaskFailed
        /// state.
        /// </summary>
        [JsonProperty(PropertyName = "startTaskFailed")]
        public int StartTaskFailed { get; set; }

        /// <summary>
        /// Gets or sets the number of Compute Nodes in the leavingPool state.
        /// </summary>
        [JsonProperty(PropertyName = "leavingPool")]
        public int LeavingPool { get; set; }

        /// <summary>
        /// Gets or sets the number of Compute Nodes in the unknown state.
        /// </summary>
        [JsonProperty(PropertyName = "unknown")]
        public int Unknown { get; set; }

        /// <summary>
        /// Gets or sets the number of Compute Nodes in the unusable state.
        /// </summary>
        [JsonProperty(PropertyName = "unusable")]
        public int Unusable { get; set; }

        /// <summary>
        /// Gets or sets the number of Compute Nodes in the waitingForStartTask
        /// state.
        /// </summary>
        [JsonProperty(PropertyName = "waitingForStartTask")]
        public int WaitingForStartTask { get; set; }

        /// <summary>
        /// Gets or sets the total number of Compute Nodes.
        /// </summary>
        [JsonProperty(PropertyName = "total")]
        public int Total { get; set; }

    }
}
