// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Batch.Protocol
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for JobOperations.
    /// </summary>
    public static partial class JobOperationsExtensions
    {
            /// <summary>
            /// Gets lifetime summary statistics for all of the jobs in the specified
            /// account.
            /// </summary>
            /// <remarks>
            /// Statistics are aggregated across all jobs that have ever existed in the
            /// account, from account creation to the last update time of the statistics.
            /// The statistics may not be immediately available. The Batch service performs
            /// periodic roll-up of statistics. The typical delay is about 30 minutes.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobGetAllLifetimeStatisticsOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static JobStatistics GetAllLifetimeStatistics(this IJobOperations operations, JobGetAllLifetimeStatisticsOptions jobGetAllLifetimeStatisticsOptions = default(JobGetAllLifetimeStatisticsOptions))
            {
                return operations.GetAllLifetimeStatisticsAsync(jobGetAllLifetimeStatisticsOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets lifetime summary statistics for all of the jobs in the specified
            /// account.
            /// </summary>
            /// <remarks>
            /// Statistics are aggregated across all jobs that have ever existed in the
            /// account, from account creation to the last update time of the statistics.
            /// The statistics may not be immediately available. The Batch service performs
            /// periodic roll-up of statistics. The typical delay is about 30 minutes.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobGetAllLifetimeStatisticsOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JobStatistics> GetAllLifetimeStatisticsAsync(this IJobOperations operations, JobGetAllLifetimeStatisticsOptions jobGetAllLifetimeStatisticsOptions = default(JobGetAllLifetimeStatisticsOptions), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllLifetimeStatisticsWithHttpMessagesAsync(jobGetAllLifetimeStatisticsOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a job.
            /// </summary>
            /// <remarks>
            /// Deleting a job also deletes all tasks that are part of that job, and all
            /// job statistics. This also overrides the retention period for task data;
            /// that is, if the job contains tasks which are still retained on compute
            /// nodes, the Batch services deletes those tasks' working directories and all
            /// their contents.  When a Delete Job request is received, the Batch service
            /// sets the job to the deleting state. All update operations on a job that is
            /// in deleting state will fail with status code 409 (Conflict), with
            /// additional information indicating that the job is being deleted.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// The ID of the job to delete.
            /// </param>
            /// <param name='jobDeleteOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static JobDeleteHeaders Delete(this IJobOperations operations, string jobId, JobDeleteOptions jobDeleteOptions = default(JobDeleteOptions))
            {
                return operations.DeleteAsync(jobId, jobDeleteOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a job.
            /// </summary>
            /// <remarks>
            /// Deleting a job also deletes all tasks that are part of that job, and all
            /// job statistics. This also overrides the retention period for task data;
            /// that is, if the job contains tasks which are still retained on compute
            /// nodes, the Batch services deletes those tasks' working directories and all
            /// their contents.  When a Delete Job request is received, the Batch service
            /// sets the job to the deleting state. All update operations on a job that is
            /// in deleting state will fail with status code 409 (Conflict), with
            /// additional information indicating that the job is being deleted.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// The ID of the job to delete.
            /// </param>
            /// <param name='jobDeleteOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JobDeleteHeaders> DeleteAsync(this IJobOperations operations, string jobId, JobDeleteOptions jobDeleteOptions = default(JobDeleteOptions), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(jobId, jobDeleteOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Gets information about the specified job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// The ID of the job.
            /// </param>
            /// <param name='jobGetOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static CloudJob Get(this IJobOperations operations, string jobId, JobGetOptions jobGetOptions = default(JobGetOptions))
            {
                return operations.GetAsync(jobId, jobGetOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets information about the specified job.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// The ID of the job.
            /// </param>
            /// <param name='jobGetOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CloudJob> GetAsync(this IJobOperations operations, string jobId, JobGetOptions jobGetOptions = default(JobGetOptions), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(jobId, jobGetOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the properties of the specified job.
            /// </summary>
            /// <remarks>
            /// This replaces only the job properties specified in the request. For
            /// example, if the job has constraints, and a request does not specify the
            /// constraints element, then the job keeps the existing constraints.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// The ID of the job whose properties you want to update.
            /// </param>
            /// <param name='jobPatchParameter'>
            /// The parameters for the request.
            /// </param>
            /// <param name='jobPatchOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static JobPatchHeaders Patch(this IJobOperations operations, string jobId, JobPatchParameter jobPatchParameter, JobPatchOptions jobPatchOptions = default(JobPatchOptions))
            {
                return operations.PatchAsync(jobId, jobPatchParameter, jobPatchOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the properties of the specified job.
            /// </summary>
            /// <remarks>
            /// This replaces only the job properties specified in the request. For
            /// example, if the job has constraints, and a request does not specify the
            /// constraints element, then the job keeps the existing constraints.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// The ID of the job whose properties you want to update.
            /// </param>
            /// <param name='jobPatchParameter'>
            /// The parameters for the request.
            /// </param>
            /// <param name='jobPatchOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JobPatchHeaders> PatchAsync(this IJobOperations operations, string jobId, JobPatchParameter jobPatchParameter, JobPatchOptions jobPatchOptions = default(JobPatchOptions), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchWithHttpMessagesAsync(jobId, jobPatchParameter, jobPatchOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Updates the properties of the specified job.
            /// </summary>
            /// <remarks>
            /// This fully replaces all the updatable properties of the job. For example,
            /// if the job has constraints associated with it and if constraints is not
            /// specified with this request, then the Batch service will remove the
            /// existing constraints.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// The ID of the job whose properties you want to update.
            /// </param>
            /// <param name='jobUpdateParameter'>
            /// The parameters for the request.
            /// </param>
            /// <param name='jobUpdateOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static JobUpdateHeaders Update(this IJobOperations operations, string jobId, JobUpdateParameter jobUpdateParameter, JobUpdateOptions jobUpdateOptions = default(JobUpdateOptions))
            {
                return operations.UpdateAsync(jobId, jobUpdateParameter, jobUpdateOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the properties of the specified job.
            /// </summary>
            /// <remarks>
            /// This fully replaces all the updatable properties of the job. For example,
            /// if the job has constraints associated with it and if constraints is not
            /// specified with this request, then the Batch service will remove the
            /// existing constraints.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// The ID of the job whose properties you want to update.
            /// </param>
            /// <param name='jobUpdateParameter'>
            /// The parameters for the request.
            /// </param>
            /// <param name='jobUpdateOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JobUpdateHeaders> UpdateAsync(this IJobOperations operations, string jobId, JobUpdateParameter jobUpdateParameter, JobUpdateOptions jobUpdateOptions = default(JobUpdateOptions), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(jobId, jobUpdateParameter, jobUpdateOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Disables the specified job, preventing new tasks from running.
            /// </summary>
            /// <remarks>
            /// The Batch Service immediately moves the job to the disabling state. Batch
            /// then uses the disableTasks parameter to determine what to do with the
            /// currently running tasks of the job. The job remains in the disabling state
            /// until the disable operation is completed and all tasks have been dealt with
            /// according to the disableTasks option; the job then moves to the disabled
            /// state. No new tasks are started under the job until it moves back to active
            /// state. If you try to disable a job that is in any state other than active,
            /// disabling, or disabled, the request fails with status code 409.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// The ID of the job to disable.
            /// </param>
            /// <param name='disableTasks'>
            /// What to do with active tasks associated with the job. Possible values
            /// include: 'requeue', 'terminate', 'wait'
            /// </param>
            /// <param name='jobDisableOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static JobDisableHeaders Disable(this IJobOperations operations, string jobId, DisableJobOption disableTasks, JobDisableOptions jobDisableOptions = default(JobDisableOptions))
            {
                return operations.DisableAsync(jobId, disableTasks, jobDisableOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Disables the specified job, preventing new tasks from running.
            /// </summary>
            /// <remarks>
            /// The Batch Service immediately moves the job to the disabling state. Batch
            /// then uses the disableTasks parameter to determine what to do with the
            /// currently running tasks of the job. The job remains in the disabling state
            /// until the disable operation is completed and all tasks have been dealt with
            /// according to the disableTasks option; the job then moves to the disabled
            /// state. No new tasks are started under the job until it moves back to active
            /// state. If you try to disable a job that is in any state other than active,
            /// disabling, or disabled, the request fails with status code 409.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// The ID of the job to disable.
            /// </param>
            /// <param name='disableTasks'>
            /// What to do with active tasks associated with the job. Possible values
            /// include: 'requeue', 'terminate', 'wait'
            /// </param>
            /// <param name='jobDisableOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JobDisableHeaders> DisableAsync(this IJobOperations operations, string jobId, DisableJobOption disableTasks, JobDisableOptions jobDisableOptions = default(JobDisableOptions), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DisableWithHttpMessagesAsync(jobId, disableTasks, jobDisableOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Enables the specified job, allowing new tasks to run.
            /// </summary>
            /// <remarks>
            /// When you call this API, the Batch service sets a disabled job to the
            /// enabling state. After the this operation is completed, the job moves to the
            /// active state, and scheduling of new tasks under the job resumes. The Batch
            /// service does not allow a task to remain in the active state for more than
            /// 180 days. Therefore, if you enable a job containing active tasks which were
            /// added more than 180 days ago, those tasks will not run.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// The ID of the job to enable.
            /// </param>
            /// <param name='jobEnableOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static JobEnableHeaders Enable(this IJobOperations operations, string jobId, JobEnableOptions jobEnableOptions = default(JobEnableOptions))
            {
                return operations.EnableAsync(jobId, jobEnableOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Enables the specified job, allowing new tasks to run.
            /// </summary>
            /// <remarks>
            /// When you call this API, the Batch service sets a disabled job to the
            /// enabling state. After the this operation is completed, the job moves to the
            /// active state, and scheduling of new tasks under the job resumes. The Batch
            /// service does not allow a task to remain in the active state for more than
            /// 180 days. Therefore, if you enable a job containing active tasks which were
            /// added more than 180 days ago, those tasks will not run.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// The ID of the job to enable.
            /// </param>
            /// <param name='jobEnableOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JobEnableHeaders> EnableAsync(this IJobOperations operations, string jobId, JobEnableOptions jobEnableOptions = default(JobEnableOptions), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EnableWithHttpMessagesAsync(jobId, jobEnableOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Terminates the specified job, marking it as completed.
            /// </summary>
            /// <remarks>
            /// When a Terminate Job request is received, the Batch service sets the job to
            /// the terminating state. The Batch service then terminates any running tasks
            /// associated with the job and runs any required job release tasks. Then the
            /// job moves into the completed state. If there are any tasks in the job in
            /// the active state, they will remain in the active state. Once a job is
            /// terminated, new tasks cannot be added and any remaining active tasks will
            /// not be scheduled.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// The ID of the job to terminate.
            /// </param>
            /// <param name='terminateReason'>
            /// The text you want to appear as the job's TerminateReason. The default is
            /// 'UserTerminate'.
            /// </param>
            /// <param name='jobTerminateOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static JobTerminateHeaders Terminate(this IJobOperations operations, string jobId, string terminateReason = default(string), JobTerminateOptions jobTerminateOptions = default(JobTerminateOptions))
            {
                return operations.TerminateAsync(jobId, terminateReason, jobTerminateOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Terminates the specified job, marking it as completed.
            /// </summary>
            /// <remarks>
            /// When a Terminate Job request is received, the Batch service sets the job to
            /// the terminating state. The Batch service then terminates any running tasks
            /// associated with the job and runs any required job release tasks. Then the
            /// job moves into the completed state. If there are any tasks in the job in
            /// the active state, they will remain in the active state. Once a job is
            /// terminated, new tasks cannot be added and any remaining active tasks will
            /// not be scheduled.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// The ID of the job to terminate.
            /// </param>
            /// <param name='terminateReason'>
            /// The text you want to appear as the job's TerminateReason. The default is
            /// 'UserTerminate'.
            /// </param>
            /// <param name='jobTerminateOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JobTerminateHeaders> TerminateAsync(this IJobOperations operations, string jobId, string terminateReason = default(string), JobTerminateOptions jobTerminateOptions = default(JobTerminateOptions), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.TerminateWithHttpMessagesAsync(jobId, terminateReason, jobTerminateOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Adds a job to the specified account.
            /// </summary>
            /// <remarks>
            /// The Batch service supports two ways to control the work done as part of a
            /// job. In the first approach, the user specifies a Job Manager task. The
            /// Batch service launches this task when it is ready to start the job. The Job
            /// Manager task controls all other tasks that run under this job, by using the
            /// Task APIs. In the second approach, the user directly controls the execution
            /// of tasks under an active job, by using the Task APIs. Also note: when
            /// naming jobs, avoid including sensitive information such as user names or
            /// secret project names. This information may appear in telemetry logs
            /// accessible to Microsoft Support engineers.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='job'>
            /// The job to be added.
            /// </param>
            /// <param name='jobAddOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static JobAddHeaders Add(this IJobOperations operations, JobAddParameter job, JobAddOptions jobAddOptions = default(JobAddOptions))
            {
                return operations.AddAsync(job, jobAddOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a job to the specified account.
            /// </summary>
            /// <remarks>
            /// The Batch service supports two ways to control the work done as part of a
            /// job. In the first approach, the user specifies a Job Manager task. The
            /// Batch service launches this task when it is ready to start the job. The Job
            /// Manager task controls all other tasks that run under this job, by using the
            /// Task APIs. In the second approach, the user directly controls the execution
            /// of tasks under an active job, by using the Task APIs. Also note: when
            /// naming jobs, avoid including sensitive information such as user names or
            /// secret project names. This information may appear in telemetry logs
            /// accessible to Microsoft Support engineers.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='job'>
            /// The job to be added.
            /// </param>
            /// <param name='jobAddOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JobAddHeaders> AddAsync(this IJobOperations operations, JobAddParameter job, JobAddOptions jobAddOptions = default(JobAddOptions), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddWithHttpMessagesAsync(job, jobAddOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Lists all of the jobs in the specified account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobListOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static IPage<CloudJob> List(this IJobOperations operations, JobListOptions jobListOptions = default(JobListOptions))
            {
                return operations.ListAsync(jobListOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all of the jobs in the specified account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobListOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CloudJob>> ListAsync(this IJobOperations operations, JobListOptions jobListOptions = default(JobListOptions), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(jobListOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists the jobs that have been created under the specified job schedule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobScheduleId'>
            /// The ID of the job schedule from which you want to get a list of jobs.
            /// </param>
            /// <param name='jobListFromJobScheduleOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static IPage<CloudJob> ListFromJobSchedule(this IJobOperations operations, string jobScheduleId, JobListFromJobScheduleOptions jobListFromJobScheduleOptions = default(JobListFromJobScheduleOptions))
            {
                return operations.ListFromJobScheduleAsync(jobScheduleId, jobListFromJobScheduleOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the jobs that have been created under the specified job schedule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobScheduleId'>
            /// The ID of the job schedule from which you want to get a list of jobs.
            /// </param>
            /// <param name='jobListFromJobScheduleOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CloudJob>> ListFromJobScheduleAsync(this IJobOperations operations, string jobScheduleId, JobListFromJobScheduleOptions jobListFromJobScheduleOptions = default(JobListFromJobScheduleOptions), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListFromJobScheduleWithHttpMessagesAsync(jobScheduleId, jobListFromJobScheduleOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists the execution status of the Job Preparation and Job Release task for
            /// the specified job across the compute nodes where the job has run.
            /// </summary>
            /// <remarks>
            /// This API returns the Job Preparation and Job Release task status on all
            /// compute nodes that have run the Job Preparation or Job Release task. This
            /// includes nodes which have since been removed from the pool. If this API is
            /// invoked on a job which has no Job Preparation or Job Release task, the
            /// Batch service returns HTTP status code 409 (Conflict) with an error code of
            /// JobPreparationTaskNotSpecified.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// The ID of the job.
            /// </param>
            /// <param name='jobListPreparationAndReleaseTaskStatusOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static IPage<JobPreparationAndReleaseTaskExecutionInformation> ListPreparationAndReleaseTaskStatus(this IJobOperations operations, string jobId, JobListPreparationAndReleaseTaskStatusOptions jobListPreparationAndReleaseTaskStatusOptions = default(JobListPreparationAndReleaseTaskStatusOptions))
            {
                return operations.ListPreparationAndReleaseTaskStatusAsync(jobId, jobListPreparationAndReleaseTaskStatusOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the execution status of the Job Preparation and Job Release task for
            /// the specified job across the compute nodes where the job has run.
            /// </summary>
            /// <remarks>
            /// This API returns the Job Preparation and Job Release task status on all
            /// compute nodes that have run the Job Preparation or Job Release task. This
            /// includes nodes which have since been removed from the pool. If this API is
            /// invoked on a job which has no Job Preparation or Job Release task, the
            /// Batch service returns HTTP status code 409 (Conflict) with an error code of
            /// JobPreparationTaskNotSpecified.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// The ID of the job.
            /// </param>
            /// <param name='jobListPreparationAndReleaseTaskStatusOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<JobPreparationAndReleaseTaskExecutionInformation>> ListPreparationAndReleaseTaskStatusAsync(this IJobOperations operations, string jobId, JobListPreparationAndReleaseTaskStatusOptions jobListPreparationAndReleaseTaskStatusOptions = default(JobListPreparationAndReleaseTaskStatusOptions), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListPreparationAndReleaseTaskStatusWithHttpMessagesAsync(jobId, jobListPreparationAndReleaseTaskStatusOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the task counts for the specified job.
            /// </summary>
            /// <remarks>
            /// Task counts provide a count of the tasks by active, running or completed
            /// task state, and a count of tasks which succeeded or failed. Tasks in the
            /// preparing state are counted as running.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// The ID of the job.
            /// </param>
            /// <param name='jobGetTaskCountsOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static TaskCounts GetTaskCounts(this IJobOperations operations, string jobId, JobGetTaskCountsOptions jobGetTaskCountsOptions = default(JobGetTaskCountsOptions))
            {
                return operations.GetTaskCountsAsync(jobId, jobGetTaskCountsOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the task counts for the specified job.
            /// </summary>
            /// <remarks>
            /// Task counts provide a count of the tasks by active, running or completed
            /// task state, and a count of tasks which succeeded or failed. Tasks in the
            /// preparing state are counted as running.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='jobId'>
            /// The ID of the job.
            /// </param>
            /// <param name='jobGetTaskCountsOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TaskCounts> GetTaskCountsAsync(this IJobOperations operations, string jobId, JobGetTaskCountsOptions jobGetTaskCountsOptions = default(JobGetTaskCountsOptions), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTaskCountsWithHttpMessagesAsync(jobId, jobGetTaskCountsOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all of the jobs in the specified account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='jobListNextOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static IPage<CloudJob> ListNext(this IJobOperations operations, string nextPageLink, JobListNextOptions jobListNextOptions = default(JobListNextOptions))
            {
                return operations.ListNextAsync(nextPageLink, jobListNextOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all of the jobs in the specified account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='jobListNextOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CloudJob>> ListNextAsync(this IJobOperations operations, string nextPageLink, JobListNextOptions jobListNextOptions = default(JobListNextOptions), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, jobListNextOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists the jobs that have been created under the specified job schedule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='jobListFromJobScheduleNextOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static IPage<CloudJob> ListFromJobScheduleNext(this IJobOperations operations, string nextPageLink, JobListFromJobScheduleNextOptions jobListFromJobScheduleNextOptions = default(JobListFromJobScheduleNextOptions))
            {
                return operations.ListFromJobScheduleNextAsync(nextPageLink, jobListFromJobScheduleNextOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the jobs that have been created under the specified job schedule.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='jobListFromJobScheduleNextOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CloudJob>> ListFromJobScheduleNextAsync(this IJobOperations operations, string nextPageLink, JobListFromJobScheduleNextOptions jobListFromJobScheduleNextOptions = default(JobListFromJobScheduleNextOptions), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListFromJobScheduleNextWithHttpMessagesAsync(nextPageLink, jobListFromJobScheduleNextOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists the execution status of the Job Preparation and Job Release task for
            /// the specified job across the compute nodes where the job has run.
            /// </summary>
            /// <remarks>
            /// This API returns the Job Preparation and Job Release task status on all
            /// compute nodes that have run the Job Preparation or Job Release task. This
            /// includes nodes which have since been removed from the pool. If this API is
            /// invoked on a job which has no Job Preparation or Job Release task, the
            /// Batch service returns HTTP status code 409 (Conflict) with an error code of
            /// JobPreparationTaskNotSpecified.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='jobListPreparationAndReleaseTaskStatusNextOptions'>
            /// Additional parameters for the operation
            /// </param>
            public static IPage<JobPreparationAndReleaseTaskExecutionInformation> ListPreparationAndReleaseTaskStatusNext(this IJobOperations operations, string nextPageLink, JobListPreparationAndReleaseTaskStatusNextOptions jobListPreparationAndReleaseTaskStatusNextOptions = default(JobListPreparationAndReleaseTaskStatusNextOptions))
            {
                return operations.ListPreparationAndReleaseTaskStatusNextAsync(nextPageLink, jobListPreparationAndReleaseTaskStatusNextOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the execution status of the Job Preparation and Job Release task for
            /// the specified job across the compute nodes where the job has run.
            /// </summary>
            /// <remarks>
            /// This API returns the Job Preparation and Job Release task status on all
            /// compute nodes that have run the Job Preparation or Job Release task. This
            /// includes nodes which have since been removed from the pool. If this API is
            /// invoked on a job which has no Job Preparation or Job Release task, the
            /// Batch service returns HTTP status code 409 (Conflict) with an error code of
            /// JobPreparationTaskNotSpecified.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='jobListPreparationAndReleaseTaskStatusNextOptions'>
            /// Additional parameters for the operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<JobPreparationAndReleaseTaskExecutionInformation>> ListPreparationAndReleaseTaskStatusNextAsync(this IJobOperations operations, string nextPageLink, JobListPreparationAndReleaseTaskStatusNextOptions jobListPreparationAndReleaseTaskStatusNextOptions = default(JobListPreparationAndReleaseTaskStatusNextOptions), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListPreparationAndReleaseTaskStatusNextWithHttpMessagesAsync(nextPageLink, jobListPreparationAndReleaseTaskStatusNextOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
