// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Batch
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for PoolOperations.
    /// </summary>
    public static partial class PoolOperationsExtensions
    {
            /// <summary>
            /// Lists all of the pools in the specified account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the Batch account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Batch account.
            /// </param>
            /// <param name='maxresults'>
            /// The maximum number of items to return in the response.
            /// </param>
            /// <param name='select'>
            /// Comma separated list of properties that should be returned. e.g.
            /// "properties/provisioningState". Only top level properties under properties/
            /// are valid for selection.
            /// </param>
            /// <param name='filter'>
            /// OData filter expression. Valid properties for filtering are:
            ///
            /// name
            /// properties/allocationState
            /// properties/allocationStateTransitionTime
            /// properties/creationTime
            /// properties/provisioningState
            /// properties/provisioningStateTransitionTime
            /// properties/lastModified
            /// properties/vmSize
            /// properties/interNodeCommunication
            /// properties/scaleSettings/autoScale
            /// properties/scaleSettings/fixedScale
            /// </param>
            public static IPage<Pool> ListByBatchAccount(this IPoolOperations operations, string resourceGroupName, string accountName, int? maxresults = default(int?), string select = default(string), string filter = default(string))
            {
                return operations.ListByBatchAccountAsync(resourceGroupName, accountName, maxresults, select, filter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all of the pools in the specified account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the Batch account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Batch account.
            /// </param>
            /// <param name='maxresults'>
            /// The maximum number of items to return in the response.
            /// </param>
            /// <param name='select'>
            /// Comma separated list of properties that should be returned. e.g.
            /// "properties/provisioningState". Only top level properties under properties/
            /// are valid for selection.
            /// </param>
            /// <param name='filter'>
            /// OData filter expression. Valid properties for filtering are:
            ///
            /// name
            /// properties/allocationState
            /// properties/allocationStateTransitionTime
            /// properties/creationTime
            /// properties/provisioningState
            /// properties/provisioningStateTransitionTime
            /// properties/lastModified
            /// properties/vmSize
            /// properties/interNodeCommunication
            /// properties/scaleSettings/autoScale
            /// properties/scaleSettings/fixedScale
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Pool>> ListByBatchAccountAsync(this IPoolOperations operations, string resourceGroupName, string accountName, int? maxresults = default(int?), string select = default(string), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByBatchAccountWithHttpMessagesAsync(resourceGroupName, accountName, maxresults, select, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new pool inside the specified account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the Batch account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Batch account.
            /// </param>
            /// <param name='poolName'>
            /// The pool name. This must be unique within the account.
            /// </param>
            /// <param name='parameters'>
            /// Additional parameters for pool creation.
            /// </param>
            /// <param name='ifMatch'>
            /// The entity state (ETag) version of the pool to update. A value of "*" can
            /// be used to apply the operation only if the pool already exists. If omitted,
            /// this operation will always be applied.
            /// </param>
            /// <param name='ifNoneMatch'>
            /// Set to '*' to allow a new pool to be created, but to prevent updating an
            /// existing pool. Other values will be ignored.
            /// </param>
            public static Pool Create(this IPoolOperations operations, string resourceGroupName, string accountName, string poolName, Pool parameters, string ifMatch = default(string), string ifNoneMatch = default(string))
            {
                return operations.CreateAsync(resourceGroupName, accountName, poolName, parameters, ifMatch, ifNoneMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new pool inside the specified account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the Batch account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Batch account.
            /// </param>
            /// <param name='poolName'>
            /// The pool name. This must be unique within the account.
            /// </param>
            /// <param name='parameters'>
            /// Additional parameters for pool creation.
            /// </param>
            /// <param name='ifMatch'>
            /// The entity state (ETag) version of the pool to update. A value of "*" can
            /// be used to apply the operation only if the pool already exists. If omitted,
            /// this operation will always be applied.
            /// </param>
            /// <param name='ifNoneMatch'>
            /// Set to '*' to allow a new pool to be created, but to prevent updating an
            /// existing pool. Other values will be ignored.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Pool> CreateAsync(this IPoolOperations operations, string resourceGroupName, string accountName, string poolName, Pool parameters, string ifMatch = default(string), string ifNoneMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, accountName, poolName, parameters, ifMatch, ifNoneMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the properties of an existing pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the Batch account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Batch account.
            /// </param>
            /// <param name='poolName'>
            /// The pool name. This must be unique within the account.
            /// </param>
            /// <param name='parameters'>
            /// Pool properties that should be updated. Properties that are supplied will
            /// be updated, any property not supplied will be unchanged.
            /// </param>
            /// <param name='ifMatch'>
            /// The entity state (ETag) version of the pool to update. This value can be
            /// omitted or set to "*" to apply the operation unconditionally.
            /// </param>
            public static Pool Update(this IPoolOperations operations, string resourceGroupName, string accountName, string poolName, Pool parameters, string ifMatch = default(string))
            {
                return operations.UpdateAsync(resourceGroupName, accountName, poolName, parameters, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the properties of an existing pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the Batch account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Batch account.
            /// </param>
            /// <param name='poolName'>
            /// The pool name. This must be unique within the account.
            /// </param>
            /// <param name='parameters'>
            /// Pool properties that should be updated. Properties that are supplied will
            /// be updated, any property not supplied will be unchanged.
            /// </param>
            /// <param name='ifMatch'>
            /// The entity state (ETag) version of the pool to update. This value can be
            /// omitted or set to "*" to apply the operation unconditionally.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Pool> UpdateAsync(this IPoolOperations operations, string resourceGroupName, string accountName, string poolName, Pool parameters, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, accountName, poolName, parameters, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the specified pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the Batch account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Batch account.
            /// </param>
            /// <param name='poolName'>
            /// The pool name. This must be unique within the account.
            /// </param>
            public static PoolDeleteHeaders Delete(this IPoolOperations operations, string resourceGroupName, string accountName, string poolName)
            {
                return operations.DeleteAsync(resourceGroupName, accountName, poolName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the specified pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the Batch account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Batch account.
            /// </param>
            /// <param name='poolName'>
            /// The pool name. This must be unique within the account.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PoolDeleteHeaders> DeleteAsync(this IPoolOperations operations, string resourceGroupName, string accountName, string poolName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, accountName, poolName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Gets information about the specified pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the Batch account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Batch account.
            /// </param>
            /// <param name='poolName'>
            /// The pool name. This must be unique within the account.
            /// </param>
            public static Pool Get(this IPoolOperations operations, string resourceGroupName, string accountName, string poolName)
            {
                return operations.GetAsync(resourceGroupName, accountName, poolName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets information about the specified pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the Batch account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Batch account.
            /// </param>
            /// <param name='poolName'>
            /// The pool name. This must be unique within the account.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Pool> GetAsync(this IPoolOperations operations, string resourceGroupName, string accountName, string poolName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, accountName, poolName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Disables automatic scaling for a pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the Batch account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Batch account.
            /// </param>
            /// <param name='poolName'>
            /// The pool name. This must be unique within the account.
            /// </param>
            public static Pool DisableAutoScale(this IPoolOperations operations, string resourceGroupName, string accountName, string poolName)
            {
                return operations.DisableAutoScaleAsync(resourceGroupName, accountName, poolName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Disables automatic scaling for a pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the Batch account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Batch account.
            /// </param>
            /// <param name='poolName'>
            /// The pool name. This must be unique within the account.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Pool> DisableAutoScaleAsync(this IPoolOperations operations, string resourceGroupName, string accountName, string poolName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DisableAutoScaleWithHttpMessagesAsync(resourceGroupName, accountName, poolName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Stops an ongoing resize operation on the pool.
            /// </summary>
            /// <remarks>
            /// This does not restore the pool to its previous state before the resize
            /// operation: it only stops any further changes being made, and the pool
            /// maintains its current state. After stopping, the pool stabilizes at the
            /// number of nodes it was at when the stop operation was done. During the stop
            /// operation, the pool allocation state changes first to stopping and then to
            /// steady. A resize operation need not be an explicit resize pool request;
            /// this API can also be used to halt the initial sizing of the pool when it is
            /// created.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the Batch account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Batch account.
            /// </param>
            /// <param name='poolName'>
            /// The pool name. This must be unique within the account.
            /// </param>
            public static Pool StopResize(this IPoolOperations operations, string resourceGroupName, string accountName, string poolName)
            {
                return operations.StopResizeAsync(resourceGroupName, accountName, poolName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Stops an ongoing resize operation on the pool.
            /// </summary>
            /// <remarks>
            /// This does not restore the pool to its previous state before the resize
            /// operation: it only stops any further changes being made, and the pool
            /// maintains its current state. After stopping, the pool stabilizes at the
            /// number of nodes it was at when the stop operation was done. During the stop
            /// operation, the pool allocation state changes first to stopping and then to
            /// steady. A resize operation need not be an explicit resize pool request;
            /// this API can also be used to halt the initial sizing of the pool when it is
            /// created.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the Batch account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Batch account.
            /// </param>
            /// <param name='poolName'>
            /// The pool name. This must be unique within the account.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Pool> StopResizeAsync(this IPoolOperations operations, string resourceGroupName, string accountName, string poolName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StopResizeWithHttpMessagesAsync(resourceGroupName, accountName, poolName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the specified pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the Batch account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Batch account.
            /// </param>
            /// <param name='poolName'>
            /// The pool name. This must be unique within the account.
            /// </param>
            public static PoolDeleteHeaders BeginDelete(this IPoolOperations operations, string resourceGroupName, string accountName, string poolName)
            {
                return operations.BeginDeleteAsync(resourceGroupName, accountName, poolName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the specified pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group that contains the Batch account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Batch account.
            /// </param>
            /// <param name='poolName'>
            /// The pool name. This must be unique within the account.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PoolDeleteHeaders> BeginDeleteAsync(this IPoolOperations operations, string resourceGroupName, string accountName, string poolName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, accountName, poolName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Lists all of the pools in the specified account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Pool> ListByBatchAccountNext(this IPoolOperations operations, string nextPageLink)
            {
                return operations.ListByBatchAccountNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all of the pools in the specified account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Pool>> ListByBatchAccountNextAsync(this IPoolOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByBatchAccountNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
