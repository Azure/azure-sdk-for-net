// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Batch.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// An application package which represents a particular version of an
    /// application.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class ApplicationPackage : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the ApplicationPackage class.
        /// </summary>
        public ApplicationPackage()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ApplicationPackage class.
        /// </summary>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="name">The name of the resource.</param>
        /// <param name="type">The type of the resource.</param>
        /// <param name="etag">The ETag of the resource, used for concurrency
        /// statements.</param>
        /// <param name="state">The current state of the application package.
        /// Possible values include: 'Pending', 'Active'</param>
        /// <param name="format">The format of the application package, if the
        /// package is active.</param>
        /// <param name="storageUrl">The URL for the application package in
        /// Azure Storage.</param>
        /// <param name="storageUrlExpiry">The UTC time at which the Azure
        /// Storage URL will expire.</param>
        /// <param name="lastActivationTime">The time at which the package was
        /// last activated, if the package is active.</param>
        public ApplicationPackage(string id = default(string), string name = default(string), string type = default(string), string etag = default(string), PackageState? state = default(PackageState?), string format = default(string), string storageUrl = default(string), System.DateTime? storageUrlExpiry = default(System.DateTime?), System.DateTime? lastActivationTime = default(System.DateTime?))
            : base(id, name, type, etag)
        {
            State = state;
            Format = format;
            StorageUrl = storageUrl;
            StorageUrlExpiry = storageUrlExpiry;
            LastActivationTime = lastActivationTime;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the current state of the application package. Possible values
        /// include: 'Pending', 'Active'
        /// </summary>
        [JsonProperty(PropertyName = "properties.state")]
        public PackageState? State { get; private set; }

        /// <summary>
        /// Gets the format of the application package, if the package is
        /// active.
        /// </summary>
        [JsonProperty(PropertyName = "properties.format")]
        public string Format { get; private set; }

        /// <summary>
        /// Gets the URL for the application package in Azure Storage.
        /// </summary>
        [JsonProperty(PropertyName = "properties.storageUrl")]
        public string StorageUrl { get; private set; }

        /// <summary>
        /// Gets the UTC time at which the Azure Storage URL will expire.
        /// </summary>
        [JsonProperty(PropertyName = "properties.storageUrlExpiry")]
        public System.DateTime? StorageUrlExpiry { get; private set; }

        /// <summary>
        /// Gets the time at which the package was last activated, if the
        /// package is active.
        /// </summary>
        [JsonProperty(PropertyName = "properties.lastActivationTime")]
        public System.DateTime? LastActivationTime { get; private set; }

    }
}
