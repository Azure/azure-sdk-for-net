// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Batch.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The configuration for compute nodes in a pool based on the Azure
    /// Virtual Machines infrastructure.
    /// </summary>
    public partial class VirtualMachineConfiguration
    {
        /// <summary>
        /// Initializes a new instance of the VirtualMachineConfiguration
        /// class.
        /// </summary>
        public VirtualMachineConfiguration()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VirtualMachineConfiguration
        /// class.
        /// </summary>
        /// <param name="imageReference">A reference to the Azure Virtual
        /// Machines Marketplace Image or the custom Virtual Machine Image to
        /// use.</param>
        /// <param name="nodeAgentSkuId">The SKU of the Batch node agent to be
        /// provisioned on compute nodes in the pool.</param>
        /// <param name="windowsConfiguration">Windows operating system
        /// settings on the virtual machine.</param>
        /// <param name="dataDisks">The configuration for data disks attached
        /// to the compute nodes in the pool.</param>
        /// <param name="licenseType">The type of on-premises license to be
        /// used when deploying the operating system.</param>
        /// <param name="containerConfiguration">The container configuration
        /// for the pool.</param>
        /// <param name="diskEncryptionConfiguration">The disk encryption
        /// configuration for the pool.</param>
        /// <param name="nodePlacementConfiguration">The node placement
        /// configuration for the pool.</param>
        /// <param name="extensions">The virtual machine extension for the
        /// pool.</param>
        public VirtualMachineConfiguration(ImageReference imageReference, string nodeAgentSkuId, WindowsConfiguration windowsConfiguration = default(WindowsConfiguration), IList<DataDisk> dataDisks = default(IList<DataDisk>), string licenseType = default(string), ContainerConfiguration containerConfiguration = default(ContainerConfiguration), DiskEncryptionConfiguration diskEncryptionConfiguration = default(DiskEncryptionConfiguration), NodePlacementConfiguration nodePlacementConfiguration = default(NodePlacementConfiguration), IList<VMExtension> extensions = default(IList<VMExtension>))
        {
            ImageReference = imageReference;
            NodeAgentSkuId = nodeAgentSkuId;
            WindowsConfiguration = windowsConfiguration;
            DataDisks = dataDisks;
            LicenseType = licenseType;
            ContainerConfiguration = containerConfiguration;
            DiskEncryptionConfiguration = diskEncryptionConfiguration;
            NodePlacementConfiguration = nodePlacementConfiguration;
            Extensions = extensions;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets a reference to the Azure Virtual Machines Marketplace
        /// Image or the custom Virtual Machine Image to use.
        /// </summary>
        [JsonProperty(PropertyName = "imageReference")]
        public ImageReference ImageReference { get; set; }

        /// <summary>
        /// Gets or sets the SKU of the Batch node agent to be provisioned on
        /// compute nodes in the pool.
        /// </summary>
        /// <remarks>
        /// The Batch node agent is a program that runs on each node in the
        /// pool, and provides the command-and-control interface between the
        /// node and the Batch service. There are different implementations of
        /// the node agent, known as SKUs, for different operating systems. You
        /// must specify a node agent SKU which matches the selected image
        /// reference. To get the list of supported node agent SKUs along with
        /// their list of verified image references, see the 'List supported
        /// node agent SKUs' operation.
        /// </remarks>
        [JsonProperty(PropertyName = "nodeAgentSkuId")]
        public string NodeAgentSkuId { get; set; }

        /// <summary>
        /// Gets or sets windows operating system settings on the virtual
        /// machine.
        /// </summary>
        /// <remarks>
        /// This property must not be specified if the imageReference specifies
        /// a Linux OS image.
        /// </remarks>
        [JsonProperty(PropertyName = "windowsConfiguration")]
        public WindowsConfiguration WindowsConfiguration { get; set; }

        /// <summary>
        /// Gets or sets the configuration for data disks attached to the
        /// compute nodes in the pool.
        /// </summary>
        /// <remarks>
        /// This property must be specified if the compute nodes in the pool
        /// need to have empty data disks attached to them.
        /// </remarks>
        [JsonProperty(PropertyName = "dataDisks")]
        public IList<DataDisk> DataDisks { get; set; }

        /// <summary>
        /// Gets or sets the type of on-premises license to be used when
        /// deploying the operating system.
        /// </summary>
        /// <remarks>
        /// This only applies to images that contain the Windows operating
        /// system, and should only be used when you hold valid on-premises
        /// licenses for the nodes which will be deployed. If omitted, no
        /// on-premises licensing discount is applied. Values are:
        ///
        /// Windows_Server - The on-premises license is for Windows Server.
        /// Windows_Client - The on-premises license is for Windows Client.
        ///
        /// </remarks>
        [JsonProperty(PropertyName = "licenseType")]
        public string LicenseType { get; set; }

        /// <summary>
        /// Gets or sets the container configuration for the pool.
        /// </summary>
        /// <remarks>
        /// If specified, setup is performed on each node in the pool to allow
        /// tasks to run in containers. All regular tasks and job manager tasks
        /// run on this pool must specify the containerSettings property, and
        /// all other tasks may specify it.
        /// </remarks>
        [JsonProperty(PropertyName = "containerConfiguration")]
        public ContainerConfiguration ContainerConfiguration { get; set; }

        /// <summary>
        /// Gets or sets the disk encryption configuration for the pool.
        /// </summary>
        /// <remarks>
        /// If specified, encryption is performed on each node in the pool
        /// during node provisioning.
        /// </remarks>
        [JsonProperty(PropertyName = "diskEncryptionConfiguration")]
        public DiskEncryptionConfiguration DiskEncryptionConfiguration { get; set; }

        /// <summary>
        /// Gets or sets the node placement configuration for the pool.
        /// </summary>
        /// <remarks>
        /// This configuration will specify rules on how nodes in the pool will
        /// be physically allocated.
        /// </remarks>
        [JsonProperty(PropertyName = "nodePlacementConfiguration")]
        public NodePlacementConfiguration NodePlacementConfiguration { get; set; }

        /// <summary>
        /// Gets or sets the virtual machine extension for the pool.
        /// </summary>
        /// <remarks>
        /// If specified, the extensions mentioned in this configuration will
        /// be installed on each node.
        /// </remarks>
        [JsonProperty(PropertyName = "extensions")]
        public IList<VMExtension> Extensions { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ImageReference == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ImageReference");
            }
            if (NodeAgentSkuId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "NodeAgentSkuId");
            }
            if (DataDisks != null)
            {
                foreach (var element in DataDisks)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Extensions != null)
            {
                foreach (var element1 in Extensions)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
