// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Batch.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Contains information about a pool.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class Pool : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the Pool class.
        /// </summary>
        public Pool()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Pool class.
        /// </summary>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="name">The name of the resource.</param>
        /// <param name="type">The type of the resource.</param>
        /// <param name="etag">The ETag of the resource, used for concurrency
        /// statements.</param>
        /// <param name="displayName">The display name for the pool.</param>
        /// <param name="lastModified">The last modified time of the
        /// pool.</param>
        /// <param name="creationTime">The creation time of the pool.</param>
        /// <param name="provisioningState">The current state of the
        /// pool.</param>
        /// <param name="provisioningStateTransitionTime">The time at which the
        /// pool entered its current state.</param>
        /// <param name="allocationState">Whether the pool is resizing.</param>
        /// <param name="allocationStateTransitionTime">The time at which the
        /// pool entered its current allocation state.</param>
        /// <param name="vmSize">The size of virtual machines in the pool. All
        /// VMs in a pool are the same size.</param>
        /// <param name="deploymentConfiguration">This property describes how
        /// the pool nodes will be deployed - using Cloud Services or Virtual
        /// Machines.</param>
        /// <param name="currentDedicatedNodes">The number of compute nodes
        /// currently in the pool.</param>
        /// <param name="currentLowPriorityNodes">The number of low priority
        /// compute nodes currently in the pool.</param>
        /// <param name="scaleSettings">Settings which configure the number of
        /// nodes in the pool.</param>
        /// <param name="autoScaleRun">The results and errors from the last
        /// execution of the autoscale formula.</param>
        /// <param name="interNodeCommunication">Whether the pool permits
        /// direct communication between nodes.</param>
        /// <param name="networkConfiguration">The network configuration for
        /// the pool.</param>
        /// <param name="taskSlotsPerNode">The number of task slots that can be
        /// used to run concurrent tasks on a single compute node in the
        /// pool.</param>
        /// <param name="taskSchedulingPolicy">How tasks are distributed across
        /// compute nodes in a pool.</param>
        /// <param name="userAccounts">The list of user accounts to be created
        /// on each node in the pool.</param>
        /// <param name="metadata">A list of name-value pairs associated with
        /// the pool as metadata.</param>
        /// <param name="startTask">A task specified to run on each compute
        /// node as it joins the pool.</param>
        /// <param name="certificates">The list of certificates to be installed
        /// on each compute node in the pool.</param>
        /// <param name="applicationPackages">The list of application packages
        /// to be installed on each compute node in the pool.</param>
        /// <param name="applicationLicenses">The list of application licenses
        /// the Batch service will make available on each compute node in the
        /// pool.</param>
        /// <param name="resizeOperationStatus">Contains details about the
        /// current or last completed resize operation.</param>
        /// <param name="mountConfiguration">A list of file systems to mount on
        /// each node in the pool.</param>
        /// <param name="identity">The type of identity used for the Batch
        /// Pool.</param>
        public Pool(string id = default(string), string name = default(string), string type = default(string), string etag = default(string), string displayName = default(string), System.DateTime? lastModified = default(System.DateTime?), System.DateTime? creationTime = default(System.DateTime?), PoolProvisioningState? provisioningState = default(PoolProvisioningState?), System.DateTime? provisioningStateTransitionTime = default(System.DateTime?), AllocationState? allocationState = default(AllocationState?), System.DateTime? allocationStateTransitionTime = default(System.DateTime?), string vmSize = default(string), DeploymentConfiguration deploymentConfiguration = default(DeploymentConfiguration), int? currentDedicatedNodes = default(int?), int? currentLowPriorityNodes = default(int?), ScaleSettings scaleSettings = default(ScaleSettings), AutoScaleRun autoScaleRun = default(AutoScaleRun), InterNodeCommunicationState? interNodeCommunication = default(InterNodeCommunicationState?), NetworkConfiguration networkConfiguration = default(NetworkConfiguration), int? taskSlotsPerNode = default(int?), TaskSchedulingPolicy taskSchedulingPolicy = default(TaskSchedulingPolicy), IList<UserAccount> userAccounts = default(IList<UserAccount>), IList<MetadataItem> metadata = default(IList<MetadataItem>), StartTask startTask = default(StartTask), IList<CertificateReference> certificates = default(IList<CertificateReference>), IList<ApplicationPackageReference> applicationPackages = default(IList<ApplicationPackageReference>), IList<string> applicationLicenses = default(IList<string>), ResizeOperationStatus resizeOperationStatus = default(ResizeOperationStatus), IList<MountConfiguration> mountConfiguration = default(IList<MountConfiguration>), BatchPoolIdentity identity = default(BatchPoolIdentity))
            : base(id, name, type, etag)
        {
            DisplayName = displayName;
            LastModified = lastModified;
            CreationTime = creationTime;
            ProvisioningState = provisioningState;
            ProvisioningStateTransitionTime = provisioningStateTransitionTime;
            AllocationState = allocationState;
            AllocationStateTransitionTime = allocationStateTransitionTime;
            VmSize = vmSize;
            DeploymentConfiguration = deploymentConfiguration;
            CurrentDedicatedNodes = currentDedicatedNodes;
            CurrentLowPriorityNodes = currentLowPriorityNodes;
            ScaleSettings = scaleSettings;
            AutoScaleRun = autoScaleRun;
            InterNodeCommunication = interNodeCommunication;
            NetworkConfiguration = networkConfiguration;
            TaskSlotsPerNode = taskSlotsPerNode;
            TaskSchedulingPolicy = taskSchedulingPolicy;
            UserAccounts = userAccounts;
            Metadata = metadata;
            StartTask = startTask;
            Certificates = certificates;
            ApplicationPackages = applicationPackages;
            ApplicationLicenses = applicationLicenses;
            ResizeOperationStatus = resizeOperationStatus;
            MountConfiguration = mountConfiguration;
            Identity = identity;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the display name for the pool.
        /// </summary>
        /// <remarks>
        /// The display name need not be unique and can contain any Unicode
        /// characters up to a maximum length of 1024.
        /// </remarks>
        [JsonProperty(PropertyName = "properties.displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets the last modified time of the pool.
        /// </summary>
        /// <remarks>
        /// This is the last time at which the pool level data, such as the
        /// targetDedicatedNodes or autoScaleSettings, changed. It does not
        /// factor in node-level changes such as a compute node changing state.
        /// </remarks>
        [JsonProperty(PropertyName = "properties.lastModified")]
        public System.DateTime? LastModified { get; private set; }

        /// <summary>
        /// Gets the creation time of the pool.
        /// </summary>
        [JsonProperty(PropertyName = "properties.creationTime")]
        public System.DateTime? CreationTime { get; private set; }

        /// <summary>
        /// Gets the current state of the pool.
        /// </summary>
        /// <remarks>
        /// Possible values include: 'Succeeded', 'Deleting'
        /// </remarks>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public PoolProvisioningState? ProvisioningState { get; private set; }

        /// <summary>
        /// Gets the time at which the pool entered its current state.
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningStateTransitionTime")]
        public System.DateTime? ProvisioningStateTransitionTime { get; private set; }

        /// <summary>
        /// Gets whether the pool is resizing.
        /// </summary>
        /// <remarks>
        /// Possible values include: 'Steady', 'Resizing', 'Stopping'
        /// </remarks>
        [JsonProperty(PropertyName = "properties.allocationState")]
        public AllocationState? AllocationState { get; private set; }

        /// <summary>
        /// Gets the time at which the pool entered its current allocation
        /// state.
        /// </summary>
        [JsonProperty(PropertyName = "properties.allocationStateTransitionTime")]
        public System.DateTime? AllocationStateTransitionTime { get; private set; }

        /// <summary>
        /// Gets or sets the size of virtual machines in the pool. All VMs in a
        /// pool are the same size.
        /// </summary>
        /// <remarks>
        /// For information about available sizes of virtual machines for Cloud
        /// Services pools (pools created with cloudServiceConfiguration), see
        /// Sizes for Cloud Services
        /// (https://azure.microsoft.com/documentation/articles/cloud-services-sizes-specs/).
        /// Batch supports all Cloud Services VM sizes except ExtraSmall. For
        /// information about available VM sizes for pools using images from
        /// the Virtual Machines Marketplace (pools created with
        /// virtualMachineConfiguration) see Sizes for Virtual Machines (Linux)
        /// (https://azure.microsoft.com/documentation/articles/virtual-machines-linux-sizes/)
        /// or Sizes for Virtual Machines (Windows)
        /// (https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes/).
        /// Batch supports all Azure VM sizes except STANDARD_A0 and those with
        /// premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2
        /// series).
        /// </remarks>
        [JsonProperty(PropertyName = "properties.vmSize")]
        public string VmSize { get; set; }

        /// <summary>
        /// Gets or sets this property describes how the pool nodes will be
        /// deployed - using Cloud Services or Virtual Machines.
        /// </summary>
        /// <remarks>
        /// Using CloudServiceConfiguration specifies that the nodes should be
        /// creating using Azure Cloud Services (PaaS), while
        /// VirtualMachineConfiguration uses Azure Virtual Machines (IaaS).
        /// </remarks>
        [JsonProperty(PropertyName = "properties.deploymentConfiguration")]
        public DeploymentConfiguration DeploymentConfiguration { get; set; }

        /// <summary>
        /// Gets the number of compute nodes currently in the pool.
        /// </summary>
        [JsonProperty(PropertyName = "properties.currentDedicatedNodes")]
        public int? CurrentDedicatedNodes { get; private set; }

        /// <summary>
        /// Gets the number of low priority compute nodes currently in the
        /// pool.
        /// </summary>
        [JsonProperty(PropertyName = "properties.currentLowPriorityNodes")]
        public int? CurrentLowPriorityNodes { get; private set; }

        /// <summary>
        /// Gets or sets settings which configure the number of nodes in the
        /// pool.
        /// </summary>
        [JsonProperty(PropertyName = "properties.scaleSettings")]
        public ScaleSettings ScaleSettings { get; set; }

        /// <summary>
        /// Gets the results and errors from the last execution of the
        /// autoscale formula.
        /// </summary>
        /// <remarks>
        /// This property is set only if the pool automatically scales, i.e.
        /// autoScaleSettings are used.
        /// </remarks>
        [JsonProperty(PropertyName = "properties.autoScaleRun")]
        public AutoScaleRun AutoScaleRun { get; private set; }

        /// <summary>
        /// Gets or sets whether the pool permits direct communication between
        /// nodes.
        /// </summary>
        /// <remarks>
        /// This imposes restrictions on which nodes can be assigned to the
        /// pool. Enabling this value can reduce the chance of the requested
        /// number of nodes to be allocated in the pool. If not specified, this
        /// value defaults to 'Disabled'. Possible values include: 'Enabled',
        /// 'Disabled'
        /// </remarks>
        [JsonProperty(PropertyName = "properties.interNodeCommunication")]
        public InterNodeCommunicationState? InterNodeCommunication { get; set; }

        /// <summary>
        /// Gets or sets the network configuration for the pool.
        /// </summary>
        [JsonProperty(PropertyName = "properties.networkConfiguration")]
        public NetworkConfiguration NetworkConfiguration { get; set; }

        /// <summary>
        /// Gets or sets the number of task slots that can be used to run
        /// concurrent tasks on a single compute node in the pool.
        /// </summary>
        /// <remarks>
        /// The default value is 1. The maximum value is the smaller of 4 times
        /// the number of cores of the vmSize of the pool or 256.
        /// </remarks>
        [JsonProperty(PropertyName = "properties.taskSlotsPerNode")]
        public int? TaskSlotsPerNode { get; set; }

        /// <summary>
        /// Gets or sets how tasks are distributed across compute nodes in a
        /// pool.
        /// </summary>
        /// <remarks>
        /// If not specified, the default is spread.
        /// </remarks>
        [JsonProperty(PropertyName = "properties.taskSchedulingPolicy")]
        public TaskSchedulingPolicy TaskSchedulingPolicy { get; set; }

        /// <summary>
        /// Gets or sets the list of user accounts to be created on each node
        /// in the pool.
        /// </summary>
        [JsonProperty(PropertyName = "properties.userAccounts")]
        public IList<UserAccount> UserAccounts { get; set; }

        /// <summary>
        /// Gets or sets a list of name-value pairs associated with the pool as
        /// metadata.
        /// </summary>
        /// <remarks>
        /// The Batch service does not assign any meaning to metadata; it is
        /// solely for the use of user code.
        /// </remarks>
        [JsonProperty(PropertyName = "properties.metadata")]
        public IList<MetadataItem> Metadata { get; set; }

        /// <summary>
        /// Gets or sets a task specified to run on each compute node as it
        /// joins the pool.
        /// </summary>
        /// <remarks>
        /// In an PATCH (update) operation, this property can be set to an
        /// empty object to remove the start task from the pool.
        /// </remarks>
        [JsonProperty(PropertyName = "properties.startTask")]
        public StartTask StartTask { get; set; }

        /// <summary>
        /// Gets or sets the list of certificates to be installed on each
        /// compute node in the pool.
        /// </summary>
        /// <remarks>
        /// For Windows compute nodes, the Batch service installs the
        /// certificates to the specified certificate store and location. For
        /// Linux compute nodes, the certificates are stored in a directory
        /// inside the task working directory and an environment variable
        /// AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this
        /// location. For certificates with visibility of 'remoteUser', a
        /// 'certs' directory is created in the user's home directory (e.g.,
        /// /home/{user-name}/certs) and certificates are placed in that
        /// directory.
        /// </remarks>
        [JsonProperty(PropertyName = "properties.certificates")]
        public IList<CertificateReference> Certificates { get; set; }

        /// <summary>
        /// Gets or sets the list of application packages to be installed on
        /// each compute node in the pool.
        /// </summary>
        /// <remarks>
        /// Changes to application package references affect all new compute
        /// nodes joining the pool, but do not affect compute nodes that are
        /// already in the pool until they are rebooted or reimaged. There is a
        /// maximum of 10 application package references on any given pool.
        /// </remarks>
        [JsonProperty(PropertyName = "properties.applicationPackages")]
        public IList<ApplicationPackageReference> ApplicationPackages { get; set; }

        /// <summary>
        /// Gets or sets the list of application licenses the Batch service
        /// will make available on each compute node in the pool.
        /// </summary>
        /// <remarks>
        /// The list of application licenses must be a subset of available
        /// Batch service application licenses. If a license is requested which
        /// is not supported, pool creation will fail.
        /// </remarks>
        [JsonProperty(PropertyName = "properties.applicationLicenses")]
        public IList<string> ApplicationLicenses { get; set; }

        /// <summary>
        /// Gets contains details about the current or last completed resize
        /// operation.
        /// </summary>
        [JsonProperty(PropertyName = "properties.resizeOperationStatus")]
        public ResizeOperationStatus ResizeOperationStatus { get; private set; }

        /// <summary>
        /// Gets or sets a list of file systems to mount on each node in the
        /// pool.
        /// </summary>
        /// <remarks>
        /// This supports Azure Files, NFS, CIFS/SMB, and Blobfuse.
        /// </remarks>
        [JsonProperty(PropertyName = "properties.mountConfiguration")]
        public IList<MountConfiguration> MountConfiguration { get; set; }

        /// <summary>
        /// Gets or sets the type of identity used for the Batch Pool.
        /// </summary>
        /// <remarks>
        /// The type of identity used for the Batch Pool.
        /// </remarks>
        [JsonProperty(PropertyName = "identity")]
        public BatchPoolIdentity Identity { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (DeploymentConfiguration != null)
            {
                DeploymentConfiguration.Validate();
            }
            if (ScaleSettings != null)
            {
                ScaleSettings.Validate();
            }
            if (AutoScaleRun != null)
            {
                AutoScaleRun.Validate();
            }
            if (NetworkConfiguration != null)
            {
                NetworkConfiguration.Validate();
            }
            if (TaskSchedulingPolicy != null)
            {
                TaskSchedulingPolicy.Validate();
            }
            if (UserAccounts != null)
            {
                foreach (var element in UserAccounts)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Metadata != null)
            {
                foreach (var element1 in Metadata)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
            if (StartTask != null)
            {
                StartTask.Validate();
            }
            if (Certificates != null)
            {
                foreach (var element2 in Certificates)
                {
                    if (element2 != null)
                    {
                        element2.Validate();
                    }
                }
            }
            if (ApplicationPackages != null)
            {
                foreach (var element3 in ApplicationPackages)
                {
                    if (element3 != null)
                    {
                        element3.Validate();
                    }
                }
            }
            if (MountConfiguration != null)
            {
                foreach (var element4 in MountConfiguration)
                {
                    if (element4 != null)
                    {
                        element4.Validate();
                    }
                }
            }
            if (Identity != null)
            {
                Identity.Validate();
            }
        }
    }
}
