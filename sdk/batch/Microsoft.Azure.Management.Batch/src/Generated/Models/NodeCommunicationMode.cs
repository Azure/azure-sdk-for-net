// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Batch.Models
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for NodeCommunicationMode.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum NodeCommunicationMode
    {
        /// <summary>
        /// The node communication mode is automatically set by the Batch
        /// service.
        /// </summary>
        [EnumMember(Value = "Default")]
        Default,
        /// <summary>
        /// Nodes using the Classic communication mode require inbound TCP
        /// communication on ports 29876 and 29877 from the
        /// "BatchNodeManagement.{region}" service tag and outbound TCP
        /// communication on port 443 to the "Storage.region" and
        /// "BatchNodeManagement.{region}" service tags.
        /// </summary>
        [EnumMember(Value = "Classic")]
        Classic,
        /// <summary>
        /// Nodes using the Simplified communication mode require outbound TCP
        /// communication on port 443 to the "BatchNodeManagement.{region}"
        /// service tag. No open inbound ports are required.
        /// </summary>
        [EnumMember(Value = "Simplified")]
        Simplified
    }
    internal static class NodeCommunicationModeEnumExtension
    {
        internal static string ToSerializedValue(this NodeCommunicationMode? value)
        {
            return value == null ? null : ((NodeCommunicationMode)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this NodeCommunicationMode value)
        {
            switch( value )
            {
                case NodeCommunicationMode.Default:
                    return "Default";
                case NodeCommunicationMode.Classic:
                    return "Classic";
                case NodeCommunicationMode.Simplified:
                    return "Simplified";
            }
            return null;
        }

        internal static NodeCommunicationMode? ParseNodeCommunicationMode(this string value)
        {
            switch( value )
            {
                case "Default":
                    return NodeCommunicationMode.Default;
                case "Classic":
                    return NodeCommunicationMode.Classic;
                case "Simplified":
                    return NodeCommunicationMode.Simplified;
            }
            return null;
        }
    }
}
