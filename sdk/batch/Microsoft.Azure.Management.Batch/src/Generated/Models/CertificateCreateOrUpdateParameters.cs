// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Batch.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Contains information about a certificate.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class CertificateCreateOrUpdateParameters : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the
        /// CertificateCreateOrUpdateParameters class.
        /// </summary>
        public CertificateCreateOrUpdateParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// CertificateCreateOrUpdateParameters class.
        /// </summary>
        /// <param name="data">The base64-encoded contents of the
        /// certificate.</param>
        /// <param name="id">The ID of the resource.</param>
        /// <param name="name">The name of the resource.</param>
        /// <param name="type">The type of the resource.</param>
        /// <param name="etag">The ETag of the resource, used for concurrency
        /// statements.</param>
        /// <param name="thumbprintAlgorithm">The algorithm of the certificate
        /// thumbprint.</param>
        /// <param name="thumbprint">The thumbprint of the certificate.</param>
        /// <param name="format">The format of the certificate - either Pfx or
        /// Cer. If omitted, the default is Pfx. Possible values include:
        /// 'Pfx', 'Cer'</param>
        /// <param name="password">The password to access the certificate's
        /// private key.</param>
        public CertificateCreateOrUpdateParameters(string data, string id = default(string), string name = default(string), string type = default(string), string etag = default(string), string thumbprintAlgorithm = default(string), string thumbprint = default(string), CertificateFormat format = default(CertificateFormat), string password = default(string))
            : base(id, name, type, etag)
        {
            ThumbprintAlgorithm = thumbprintAlgorithm;
            Thumbprint = thumbprint;
            Format = format;
            Data = data;
            Password = password;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the algorithm of the certificate thumbprint.
        /// </summary>
        /// <remarks>
        /// This must match the first portion of the certificate name.
        /// Currently required to be 'SHA1'.
        /// </remarks>
        [JsonProperty(PropertyName = "properties.thumbprintAlgorithm")]
        public string ThumbprintAlgorithm { get; set; }

        /// <summary>
        /// Gets or sets the thumbprint of the certificate.
        /// </summary>
        /// <remarks>
        /// This must match the thumbprint from the name.
        /// </remarks>
        [JsonProperty(PropertyName = "properties.thumbprint")]
        public string Thumbprint { get; set; }

        /// <summary>
        /// Gets or sets the format of the certificate - either Pfx or Cer. If
        /// omitted, the default is Pfx. Possible values include: 'Pfx', 'Cer'
        /// </summary>
        [JsonProperty(PropertyName = "properties.format")]
        public CertificateFormat Format { get; set; }

        /// <summary>
        /// Gets or sets the base64-encoded contents of the certificate.
        /// </summary>
        /// <remarks>
        /// The maximum size is 10KB.
        /// </remarks>
        [JsonProperty(PropertyName = "properties.data")]
        public string Data { get; set; }

        /// <summary>
        /// Gets or sets the password to access the certificate's private key.
        /// </summary>
        /// <remarks>
        /// This must not be specified if the certificate format is Cer.
        /// </remarks>
        [JsonProperty(PropertyName = "properties.password")]
        public string Password { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Data == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Data");
            }
        }
    }
}
