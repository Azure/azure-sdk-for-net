// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;

namespace Azure.Batch
{
    /// <summary> The number of Compute Nodes in each Compute Node state. </summary>
    public partial class BatchNodeCounts : IJsonModel<BatchNodeCounts>
    {
        /// <summary> Initializes a new instance of <see cref="BatchNodeCounts"/> for deserialization. </summary>
        internal BatchNodeCounts()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<BatchNodeCounts>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<BatchNodeCounts>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(BatchNodeCounts)} does not support writing '{format}' format.");
            }
            writer.WritePropertyName("creating"u8);
            writer.WriteNumberValue(Creating);
            writer.WritePropertyName("idle"u8);
            writer.WriteNumberValue(Idle);
            writer.WritePropertyName("offline"u8);
            writer.WriteNumberValue(Offline);
            writer.WritePropertyName("preempted"u8);
            writer.WriteNumberValue(Preempted);
            writer.WritePropertyName("rebooting"u8);
            writer.WriteNumberValue(Rebooting);
            writer.WritePropertyName("reimaging"u8);
            writer.WriteNumberValue(Reimaging);
            writer.WritePropertyName("running"u8);
            writer.WriteNumberValue(Running);
            writer.WritePropertyName("starting"u8);
            writer.WriteNumberValue(Starting);
            writer.WritePropertyName("startTaskFailed"u8);
            writer.WriteNumberValue(StartTaskFailed);
            writer.WritePropertyName("leavingPool"u8);
            writer.WriteNumberValue(LeavingPool);
            writer.WritePropertyName("unknown"u8);
            writer.WriteNumberValue(Unknown);
            writer.WritePropertyName("unusable"u8);
            writer.WriteNumberValue(Unusable);
            writer.WritePropertyName("waitingForStartTask"u8);
            writer.WriteNumberValue(WaitingForStartTask);
            writer.WritePropertyName("deallocated"u8);
            writer.WriteNumberValue(Deallocated);
            writer.WritePropertyName("deallocating"u8);
            writer.WriteNumberValue(Deallocating);
            writer.WritePropertyName("total"u8);
            writer.WriteNumberValue(Total);
            writer.WritePropertyName("upgradingOS"u8);
            writer.WriteNumberValue(UpgradingOs);
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        BatchNodeCounts IJsonModel<BatchNodeCounts>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BatchNodeCounts JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<BatchNodeCounts>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(BatchNodeCounts)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeBatchNodeCounts(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static BatchNodeCounts DeserializeBatchNodeCounts(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            int creating = default;
            int idle = default;
            int offline = default;
            int preempted = default;
            int rebooting = default;
            int reimaging = default;
            int running = default;
            int starting = default;
            int startTaskFailed = default;
            int leavingPool = default;
            int unknown = default;
            int unusable = default;
            int waitingForStartTask = default;
            int deallocated = default;
            int deallocating = default;
            int total = default;
            int upgradingOs = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("creating"u8))
                {
                    creating = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("idle"u8))
                {
                    idle = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("offline"u8))
                {
                    offline = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("preempted"u8))
                {
                    preempted = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("rebooting"u8))
                {
                    rebooting = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("reimaging"u8))
                {
                    reimaging = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("running"u8))
                {
                    running = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("starting"u8))
                {
                    starting = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("startTaskFailed"u8))
                {
                    startTaskFailed = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("leavingPool"u8))
                {
                    leavingPool = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("unknown"u8))
                {
                    unknown = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("unusable"u8))
                {
                    unusable = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("waitingForStartTask"u8))
                {
                    waitingForStartTask = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("deallocated"u8))
                {
                    deallocated = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("deallocating"u8))
                {
                    deallocating = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("total"u8))
                {
                    total = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("upgradingOS"u8))
                {
                    upgradingOs = prop.Value.GetInt32();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new BatchNodeCounts(
                creating,
                idle,
                offline,
                preempted,
                rebooting,
                reimaging,
                running,
                starting,
                startTaskFailed,
                leavingPool,
                unknown,
                unusable,
                waitingForStartTask,
                deallocated,
                deallocating,
                total,
                upgradingOs,
                additionalBinaryDataProperties);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<BatchNodeCounts>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<BatchNodeCounts>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureBatchContext.Default);
                default:
                    throw new FormatException($"The model {nameof(BatchNodeCounts)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        BatchNodeCounts IPersistableModel<BatchNodeCounts>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BatchNodeCounts PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<BatchNodeCounts>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeBatchNodeCounts(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(BatchNodeCounts)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<BatchNodeCounts>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
