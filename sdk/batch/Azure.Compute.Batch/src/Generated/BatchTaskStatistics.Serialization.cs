// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;

namespace Azure.Compute.Batch
{
    /// <summary> Resource usage statistics for a Task. </summary>
    public partial class BatchTaskStatistics : IJsonModel<BatchTaskStatistics>
    {
        /// <summary> Initializes a new instance of <see cref="BatchTaskStatistics"/> for deserialization. </summary>
        internal BatchTaskStatistics()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<BatchTaskStatistics>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<BatchTaskStatistics>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(BatchTaskStatistics)} does not support writing '{format}' format.");
            }
            writer.WritePropertyName("url"u8);
            writer.WriteStringValue(Uri.AbsoluteUri);
            writer.WritePropertyName("startTime"u8);
            writer.WriteStringValue(StartTime, "O");
            writer.WritePropertyName("lastUpdateTime"u8);
            writer.WriteStringValue(LastUpdateTime, "O");
            writer.WritePropertyName("userCPUTime"u8);
            writer.WriteStringValue(UserCpuTime, "P");
            writer.WritePropertyName("kernelCPUTime"u8);
            writer.WriteStringValue(KernelCpuTime, "P");
            writer.WritePropertyName("wallClockTime"u8);
            writer.WriteStringValue(WallClockTime, "P");
            writer.WritePropertyName("readIOps"u8);
            writer.WriteStringValue(ReadIops.ToString());
            writer.WritePropertyName("writeIOps"u8);
            writer.WriteStringValue(WriteIops.ToString());
            writer.WritePropertyName("readIOGiB"u8);
            writer.WriteNumberValue(ReadIoGiB);
            writer.WritePropertyName("writeIOGiB"u8);
            writer.WriteNumberValue(WriteIoGiB);
            writer.WritePropertyName("waitTime"u8);
            writer.WriteStringValue(WaitTime, "P");
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        BatchTaskStatistics IJsonModel<BatchTaskStatistics>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BatchTaskStatistics JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<BatchTaskStatistics>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(BatchTaskStatistics)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeBatchTaskStatistics(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static BatchTaskStatistics DeserializeBatchTaskStatistics(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Uri uri = default;
            DateTimeOffset startTime = default;
            DateTimeOffset lastUpdateTime = default;
            TimeSpan userCpuTime = default;
            TimeSpan kernelCpuTime = default;
            TimeSpan wallClockTime = default;
            long readIops = default;
            long writeIops = default;
            float readIoGiB = default;
            float writeIoGiB = default;
            TimeSpan waitTime = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("url"u8))
                {
                    uri = new Uri(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("startTime"u8))
                {
                    startTime = prop.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (prop.NameEquals("lastUpdateTime"u8))
                {
                    lastUpdateTime = prop.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (prop.NameEquals("userCPUTime"u8))
                {
                    userCpuTime = prop.Value.GetTimeSpan("P");
                    continue;
                }
                if (prop.NameEquals("kernelCPUTime"u8))
                {
                    kernelCpuTime = prop.Value.GetTimeSpan("P");
                    continue;
                }
                if (prop.NameEquals("wallClockTime"u8))
                {
                    wallClockTime = prop.Value.GetTimeSpan("P");
                    continue;
                }
                if (prop.NameEquals("readIOps"u8))
                {
                    readIops = long.Parse(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("writeIOps"u8))
                {
                    writeIops = long.Parse(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("readIOGiB"u8))
                {
                    readIoGiB = prop.Value.GetSingle();
                    continue;
                }
                if (prop.NameEquals("writeIOGiB"u8))
                {
                    writeIoGiB = prop.Value.GetSingle();
                    continue;
                }
                if (prop.NameEquals("waitTime"u8))
                {
                    waitTime = prop.Value.GetTimeSpan("P");
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new BatchTaskStatistics(
                uri,
                startTime,
                lastUpdateTime,
                userCpuTime,
                kernelCpuTime,
                wallClockTime,
                readIops,
                writeIops,
                readIoGiB,
                writeIoGiB,
                waitTime,
                additionalBinaryDataProperties);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<BatchTaskStatistics>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<BatchTaskStatistics>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureComputeBatchContext.Default);
                default:
                    throw new FormatException($"The model {nameof(BatchTaskStatistics)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        BatchTaskStatistics IPersistableModel<BatchTaskStatistics>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BatchTaskStatistics PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<BatchTaskStatistics>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeBatchTaskStatistics(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(BatchTaskStatistics)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<BatchTaskStatistics>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
