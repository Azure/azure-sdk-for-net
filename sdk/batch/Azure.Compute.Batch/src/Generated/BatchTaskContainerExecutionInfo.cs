// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Batch
{
    /// <summary> Contains information about the container which a Task is executing. </summary>
    public partial class BatchTaskContainerExecutionInfo
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="BatchTaskContainerExecutionInfo"/>. </summary>
        internal BatchTaskContainerExecutionInfo()
        {
        }

        /// <summary> Initializes a new instance of <see cref="BatchTaskContainerExecutionInfo"/>. </summary>
        /// <param name="containerId"> The ID of the container. </param>
        /// <param name="state"> The state of the container. This is the state of the container according to the Docker service. It is equivalent to the status field returned by "docker inspect". </param>
        /// <param name="error"> Detailed error information about the container. This is the detailed error string from the Docker service, if available. It is equivalent to the error field returned by "docker inspect". </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal BatchTaskContainerExecutionInfo(string containerId, string state, string error, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            ContainerId = containerId;
            State = state;
            Error = error;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> The ID of the container. </summary>
        public string ContainerId { get; }

        /// <summary> The state of the container. This is the state of the container according to the Docker service. It is equivalent to the status field returned by "docker inspect". </summary>
        public string State { get; }

        /// <summary> Detailed error information about the container. This is the detailed error string from the Docker service, if available. It is equivalent to the error field returned by "docker inspect". </summary>
        public string Error { get; }
    }
}
