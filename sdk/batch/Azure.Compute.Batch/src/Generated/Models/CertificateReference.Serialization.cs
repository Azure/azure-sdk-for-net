// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace BatchService.Models
{
    public partial class CertificateReference : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("thumbprint"u8);
            writer.WriteStringValue(Thumbprint);
            writer.WritePropertyName("thumbprintAlgorithm"u8);
            writer.WriteStringValue(ThumbprintAlgorithm);
            if (Optional.IsDefined(StoreLocation))
            {
                if (StoreLocation != null)
                {
                    writer.WritePropertyName("storeLocation"u8);
                    writer.WriteStringValue(StoreLocation.Value.ToString());
                }
                else
                {
                    writer.WriteNull("storeLocation");
                }
            }
            if (Optional.IsDefined(StoreName))
            {
                writer.WritePropertyName("storeName"u8);
                writer.WriteStringValue(StoreName);
            }
            if (Optional.IsCollectionDefined(Visibility))
            {
                writer.WritePropertyName("visibility"u8);
                writer.WriteStartArray();
                foreach (var item in Visibility)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static CertificateReference DeserializeCertificateReference(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string thumbprint = default;
            string thumbprintAlgorithm = default;
            Optional<CertificateStoreLocation?> storeLocation = default;
            Optional<string> storeName = default;
            Optional<IList<CertificateVisibility>> visibility = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("thumbprint"u8))
                {
                    thumbprint = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("thumbprintAlgorithm"u8))
                {
                    thumbprintAlgorithm = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("storeLocation"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        storeLocation = null;
                        continue;
                    }
                    storeLocation = new CertificateStoreLocation(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("storeName"u8))
                {
                    storeName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("visibility"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<CertificateVisibility> array = new List<CertificateVisibility>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new CertificateVisibility(item.GetString()));
                    }
                    visibility = array;
                    continue;
                }
            }
            return new CertificateReference(thumbprint, thumbprintAlgorithm, Optional.ToNullable(storeLocation), storeName, Optional.ToList(visibility));
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static CertificateReference FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeCertificateReference(document.RootElement);
        }

        /// <summary> Convert into a Utf8JsonRequestContent. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }
    }
}
