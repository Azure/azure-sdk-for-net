// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace BatchService.Models
{
    public readonly partial struct JobScheduleState : IEquatable<JobScheduleState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="JobScheduleState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public JobScheduleState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ActiveValue = "active";
        private const string CompletedValue = "completed";
        private const string DisabledValue = "disabled";
        private const string TerminatingValue = "terminating";
        private const string DeletingValue = "deleting";

        /// <summary> The Job Schedule is active and will create Jobs as per its schedule. </summary>
        public static JobScheduleState Active { get; } = new JobScheduleState(ActiveValue);
        /// <summary> The Job Schedule has terminated, either by reaching its end time or by the user terminating it explicitly. </summary>
        public static JobScheduleState Completed { get; } = new JobScheduleState(CompletedValue);
        /// <summary> The user has disabled the Job Schedule. The scheduler will not initiate any new Jobs will on this schedule, but any existing active Job will continue to run. </summary>
        public static JobScheduleState Disabled { get; } = new JobScheduleState(DisabledValue);
        /// <summary> The Job Schedule has no more work to do, or has been explicitly terminated by the user, but the termination operation is still in progress. The scheduler will not initiate any new Jobs for this Job Schedule, nor is any existing Job active. </summary>
        public static JobScheduleState Terminating { get; } = new JobScheduleState(TerminatingValue);
        /// <summary> The user has requested that the Job Schedule be deleted, but the delete operation is still in progress. The scheduler will not initiate any new Jobs for this Job Schedule, and will delete any existing Jobs and Tasks under the Job Schedule, including any active Job. The Job Schedule will be deleted when all Jobs and Tasks under the Job Schedule have been deleted. </summary>
        public static JobScheduleState Deleting { get; } = new JobScheduleState(DeletingValue);
        /// <summary> Determines if two <see cref="JobScheduleState"/> values are the same. </summary>
        public static bool operator ==(JobScheduleState left, JobScheduleState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="JobScheduleState"/> values are not the same. </summary>
        public static bool operator !=(JobScheduleState left, JobScheduleState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="JobScheduleState"/>. </summary>
        public static implicit operator JobScheduleState(string value) => new JobScheduleState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is JobScheduleState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(JobScheduleState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
