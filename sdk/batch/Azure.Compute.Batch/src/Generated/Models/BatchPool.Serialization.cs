// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace BatchService.Models
{
    public partial class BatchPool : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Id))
            {
                writer.WritePropertyName("id"u8);
                writer.WriteStringValue(Id);
            }
            if (Optional.IsDefined(DisplayName))
            {
                writer.WritePropertyName("displayName"u8);
                writer.WriteStringValue(DisplayName);
            }
            if (Optional.IsDefined(VmSize))
            {
                writer.WritePropertyName("vmSize"u8);
                writer.WriteStringValue(VmSize);
            }
            if (Optional.IsDefined(CloudServiceConfiguration))
            {
                writer.WritePropertyName("cloudServiceConfiguration"u8);
                writer.WriteObjectValue(CloudServiceConfiguration);
            }
            if (Optional.IsDefined(VirtualMachineConfiguration))
            {
                writer.WritePropertyName("virtualMachineConfiguration"u8);
                writer.WriteObjectValue(VirtualMachineConfiguration);
            }
            if (Optional.IsDefined(ResizeTimeout))
            {
                if (ResizeTimeout != null)
                {
                    writer.WritePropertyName("resizeTimeout"u8);
                    writer.WriteStringValue(ResizeTimeout.Value, "P");
                }
                else
                {
                    writer.WriteNull("resizeTimeout");
                }
            }
            if (Optional.IsDefined(TargetDedicatedNodes))
            {
                if (TargetDedicatedNodes != null)
                {
                    writer.WritePropertyName("targetDedicatedNodes"u8);
                    writer.WriteNumberValue(TargetDedicatedNodes.Value);
                }
                else
                {
                    writer.WriteNull("targetDedicatedNodes");
                }
            }
            if (Optional.IsDefined(TargetLowPriorityNodes))
            {
                if (TargetLowPriorityNodes != null)
                {
                    writer.WritePropertyName("targetLowPriorityNodes"u8);
                    writer.WriteNumberValue(TargetLowPriorityNodes.Value);
                }
                else
                {
                    writer.WriteNull("targetLowPriorityNodes");
                }
            }
            if (Optional.IsDefined(EnableAutoScale))
            {
                if (EnableAutoScale != null)
                {
                    writer.WritePropertyName("enableAutoScale"u8);
                    writer.WriteBooleanValue(EnableAutoScale.Value);
                }
                else
                {
                    writer.WriteNull("enableAutoScale");
                }
            }
            if (Optional.IsDefined(AutoScaleFormula))
            {
                writer.WritePropertyName("autoScaleFormula"u8);
                writer.WriteStringValue(AutoScaleFormula);
            }
            if (Optional.IsDefined(AutoScaleEvaluationInterval))
            {
                if (AutoScaleEvaluationInterval != null)
                {
                    writer.WritePropertyName("autoScaleEvaluationInterval"u8);
                    writer.WriteStringValue(AutoScaleEvaluationInterval.Value, "P");
                }
                else
                {
                    writer.WriteNull("autoScaleEvaluationInterval");
                }
            }
            if (Optional.IsDefined(EnableInterNodeCommunication))
            {
                if (EnableInterNodeCommunication != null)
                {
                    writer.WritePropertyName("enableInterNodeCommunication"u8);
                    writer.WriteBooleanValue(EnableInterNodeCommunication.Value);
                }
                else
                {
                    writer.WriteNull("enableInterNodeCommunication");
                }
            }
            if (Optional.IsDefined(NetworkConfiguration))
            {
                writer.WritePropertyName("networkConfiguration"u8);
                writer.WriteObjectValue(NetworkConfiguration);
            }
            if (Optional.IsDefined(StartTask))
            {
                writer.WritePropertyName("startTask"u8);
                writer.WriteObjectValue(StartTask);
            }
            if (Optional.IsCollectionDefined(CertificateReferences))
            {
                writer.WritePropertyName("certificateReferences"u8);
                writer.WriteStartArray();
                foreach (var item in CertificateReferences)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(ApplicationPackageReferences))
            {
                writer.WritePropertyName("applicationPackageReferences"u8);
                writer.WriteStartArray();
                foreach (var item in ApplicationPackageReferences)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(ApplicationLicenses))
            {
                writer.WritePropertyName("applicationLicenses"u8);
                writer.WriteStartArray();
                foreach (var item in ApplicationLicenses)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(TaskSlotsPerNode))
            {
                if (TaskSlotsPerNode != null)
                {
                    writer.WritePropertyName("taskSlotsPerNode"u8);
                    writer.WriteNumberValue(TaskSlotsPerNode.Value);
                }
                else
                {
                    writer.WriteNull("taskSlotsPerNode");
                }
            }
            if (Optional.IsDefined(TaskSchedulingPolicy))
            {
                writer.WritePropertyName("taskSchedulingPolicy"u8);
                writer.WriteObjectValue(TaskSchedulingPolicy);
            }
            if (Optional.IsCollectionDefined(UserAccounts))
            {
                writer.WritePropertyName("userAccounts"u8);
                writer.WriteStartArray();
                foreach (var item in UserAccounts)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Metadata))
            {
                writer.WritePropertyName("metadata"u8);
                writer.WriteStartArray();
                foreach (var item in Metadata)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(MountConfiguration))
            {
                writer.WritePropertyName("mountConfiguration"u8);
                writer.WriteStartArray();
                foreach (var item in MountConfiguration)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(TargetNodeCommunicationMode))
            {
                if (TargetNodeCommunicationMode != null)
                {
                    writer.WritePropertyName("targetNodeCommunicationMode"u8);
                    writer.WriteStringValue(TargetNodeCommunicationMode.Value.ToString());
                }
                else
                {
                    writer.WriteNull("targetNodeCommunicationMode");
                }
            }
            writer.WriteEndObject();
        }

        internal static BatchPool DeserializeBatchPool(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> id = default;
            Optional<string> displayName = default;
            Optional<string> url = default;
            Optional<string> eTag = default;
            Optional<DateTimeOffset?> lastModified = default;
            Optional<DateTimeOffset?> creationTime = default;
            Optional<PoolState?> state = default;
            Optional<DateTimeOffset?> stateTransitionTime = default;
            Optional<AllocationState?> allocationState = default;
            Optional<DateTimeOffset?> allocationStateTransitionTime = default;
            Optional<string> vmSize = default;
            Optional<CloudServiceConfiguration> cloudServiceConfiguration = default;
            Optional<VirtualMachineConfiguration> virtualMachineConfiguration = default;
            Optional<TimeSpan?> resizeTimeout = default;
            Optional<IReadOnlyList<ResizeError>> resizeErrors = default;
            Optional<int?> currentDedicatedNodes = default;
            Optional<int?> currentLowPriorityNodes = default;
            Optional<int?> targetDedicatedNodes = default;
            Optional<int?> targetLowPriorityNodes = default;
            Optional<bool?> enableAutoScale = default;
            Optional<string> autoScaleFormula = default;
            Optional<TimeSpan?> autoScaleEvaluationInterval = default;
            Optional<AutoScaleRun> autoScaleRun = default;
            Optional<bool?> enableInterNodeCommunication = default;
            Optional<NetworkConfiguration> networkConfiguration = default;
            Optional<StartTask> startTask = default;
            Optional<IList<CertificateReference>> certificateReferences = default;
            Optional<IList<ApplicationPackageReference>> applicationPackageReferences = default;
            Optional<IList<string>> applicationLicenses = default;
            Optional<int?> taskSlotsPerNode = default;
            Optional<TaskSchedulingPolicy> taskSchedulingPolicy = default;
            Optional<IList<UserAccount>> userAccounts = default;
            Optional<IList<MetadataItem>> metadata = default;
            Optional<PoolStatistics> stats = default;
            Optional<IList<MountConfiguration>> mountConfiguration = default;
            Optional<BatchPoolIdentity> identity = default;
            Optional<NodeCommunicationMode?> targetNodeCommunicationMode = default;
            Optional<NodeCommunicationMode?> currentNodeCommunicationMode = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("id"u8))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("displayName"u8))
                {
                    displayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("url"u8))
                {
                    url = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("eTag"u8))
                {
                    eTag = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("lastModified"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        lastModified = null;
                        continue;
                    }
                    lastModified = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("creationTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        creationTime = null;
                        continue;
                    }
                    creationTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("state"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        state = null;
                        continue;
                    }
                    state = new PoolState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("stateTransitionTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        stateTransitionTime = null;
                        continue;
                    }
                    stateTransitionTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("allocationState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        allocationState = null;
                        continue;
                    }
                    allocationState = new AllocationState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("allocationStateTransitionTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        allocationStateTransitionTime = null;
                        continue;
                    }
                    allocationStateTransitionTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("vmSize"u8))
                {
                    vmSize = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("cloudServiceConfiguration"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    cloudServiceConfiguration = CloudServiceConfiguration.DeserializeCloudServiceConfiguration(property.Value);
                    continue;
                }
                if (property.NameEquals("virtualMachineConfiguration"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    virtualMachineConfiguration = VirtualMachineConfiguration.DeserializeVirtualMachineConfiguration(property.Value);
                    continue;
                }
                if (property.NameEquals("resizeTimeout"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        resizeTimeout = null;
                        continue;
                    }
                    resizeTimeout = property.Value.GetTimeSpan("P");
                    continue;
                }
                if (property.NameEquals("resizeErrors"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<ResizeError> array = new List<ResizeError>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ResizeError.DeserializeResizeError(item));
                    }
                    resizeErrors = array;
                    continue;
                }
                if (property.NameEquals("currentDedicatedNodes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        currentDedicatedNodes = null;
                        continue;
                    }
                    currentDedicatedNodes = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("currentLowPriorityNodes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        currentLowPriorityNodes = null;
                        continue;
                    }
                    currentLowPriorityNodes = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("targetDedicatedNodes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        targetDedicatedNodes = null;
                        continue;
                    }
                    targetDedicatedNodes = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("targetLowPriorityNodes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        targetLowPriorityNodes = null;
                        continue;
                    }
                    targetLowPriorityNodes = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("enableAutoScale"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        enableAutoScale = null;
                        continue;
                    }
                    enableAutoScale = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("autoScaleFormula"u8))
                {
                    autoScaleFormula = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("autoScaleEvaluationInterval"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        autoScaleEvaluationInterval = null;
                        continue;
                    }
                    autoScaleEvaluationInterval = property.Value.GetTimeSpan("P");
                    continue;
                }
                if (property.NameEquals("autoScaleRun"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    autoScaleRun = AutoScaleRun.DeserializeAutoScaleRun(property.Value);
                    continue;
                }
                if (property.NameEquals("enableInterNodeCommunication"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        enableInterNodeCommunication = null;
                        continue;
                    }
                    enableInterNodeCommunication = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("networkConfiguration"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    networkConfiguration = NetworkConfiguration.DeserializeNetworkConfiguration(property.Value);
                    continue;
                }
                if (property.NameEquals("startTask"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    startTask = StartTask.DeserializeStartTask(property.Value);
                    continue;
                }
                if (property.NameEquals("certificateReferences"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<CertificateReference> array = new List<CertificateReference>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(CertificateReference.DeserializeCertificateReference(item));
                    }
                    certificateReferences = array;
                    continue;
                }
                if (property.NameEquals("applicationPackageReferences"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<ApplicationPackageReference> array = new List<ApplicationPackageReference>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ApplicationPackageReference.DeserializeApplicationPackageReference(item));
                    }
                    applicationPackageReferences = array;
                    continue;
                }
                if (property.NameEquals("applicationLicenses"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    applicationLicenses = array;
                    continue;
                }
                if (property.NameEquals("taskSlotsPerNode"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        taskSlotsPerNode = null;
                        continue;
                    }
                    taskSlotsPerNode = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("taskSchedulingPolicy"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    taskSchedulingPolicy = TaskSchedulingPolicy.DeserializeTaskSchedulingPolicy(property.Value);
                    continue;
                }
                if (property.NameEquals("userAccounts"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<UserAccount> array = new List<UserAccount>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(UserAccount.DeserializeUserAccount(item));
                    }
                    userAccounts = array;
                    continue;
                }
                if (property.NameEquals("metadata"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<MetadataItem> array = new List<MetadataItem>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MetadataItem.DeserializeMetadataItem(item));
                    }
                    metadata = array;
                    continue;
                }
                if (property.NameEquals("stats"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    stats = PoolStatistics.DeserializePoolStatistics(property.Value);
                    continue;
                }
                if (property.NameEquals("mountConfiguration"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<MountConfiguration> array = new List<MountConfiguration>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Models.MountConfiguration.DeserializeMountConfiguration(item));
                    }
                    mountConfiguration = array;
                    continue;
                }
                if (property.NameEquals("identity"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    identity = BatchPoolIdentity.DeserializeBatchPoolIdentity(property.Value);
                    continue;
                }
                if (property.NameEquals("targetNodeCommunicationMode"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        targetNodeCommunicationMode = null;
                        continue;
                    }
                    targetNodeCommunicationMode = new NodeCommunicationMode(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("currentNodeCommunicationMode"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        currentNodeCommunicationMode = null;
                        continue;
                    }
                    currentNodeCommunicationMode = new NodeCommunicationMode(property.Value.GetString());
                    continue;
                }
            }
            return new BatchPool(id, displayName, url, eTag, Optional.ToNullable(lastModified), Optional.ToNullable(creationTime), Optional.ToNullable(state), Optional.ToNullable(stateTransitionTime), Optional.ToNullable(allocationState), Optional.ToNullable(allocationStateTransitionTime), vmSize, cloudServiceConfiguration, virtualMachineConfiguration, Optional.ToNullable(resizeTimeout), Optional.ToList(resizeErrors), Optional.ToNullable(currentDedicatedNodes), Optional.ToNullable(currentLowPriorityNodes), Optional.ToNullable(targetDedicatedNodes), Optional.ToNullable(targetLowPriorityNodes), Optional.ToNullable(enableAutoScale), autoScaleFormula, Optional.ToNullable(autoScaleEvaluationInterval), autoScaleRun, Optional.ToNullable(enableInterNodeCommunication), networkConfiguration, startTask, Optional.ToList(certificateReferences), Optional.ToList(applicationPackageReferences), Optional.ToList(applicationLicenses), Optional.ToNullable(taskSlotsPerNode), taskSchedulingPolicy, Optional.ToList(userAccounts), Optional.ToList(metadata), stats, Optional.ToList(mountConfiguration), identity, Optional.ToNullable(targetNodeCommunicationMode), Optional.ToNullable(currentNodeCommunicationMode));
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static BatchPool FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeBatchPool(document.RootElement);
        }

        /// <summary> Convert into a Utf8JsonRequestContent. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }
    }
}
