// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace BatchService.Models
{
    public partial class TaskConstraints : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(MaxWallClockTime))
            {
                if (MaxWallClockTime != null)
                {
                    writer.WritePropertyName("maxWallClockTime"u8);
                    writer.WriteStringValue(MaxWallClockTime.Value, "P");
                }
                else
                {
                    writer.WriteNull("maxWallClockTime");
                }
            }
            if (Optional.IsDefined(RetentionTime))
            {
                if (RetentionTime != null)
                {
                    writer.WritePropertyName("retentionTime"u8);
                    writer.WriteStringValue(RetentionTime.Value, "P");
                }
                else
                {
                    writer.WriteNull("retentionTime");
                }
            }
            if (Optional.IsDefined(MaxTaskRetryCount))
            {
                if (MaxTaskRetryCount != null)
                {
                    writer.WritePropertyName("maxTaskRetryCount"u8);
                    writer.WriteNumberValue(MaxTaskRetryCount.Value);
                }
                else
                {
                    writer.WriteNull("maxTaskRetryCount");
                }
            }
            writer.WriteEndObject();
        }

        internal static TaskConstraints DeserializeTaskConstraints(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<TimeSpan?> maxWallClockTime = default;
            Optional<TimeSpan?> retentionTime = default;
            Optional<int?> maxTaskRetryCount = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("maxWallClockTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        maxWallClockTime = null;
                        continue;
                    }
                    maxWallClockTime = property.Value.GetTimeSpan("P");
                    continue;
                }
                if (property.NameEquals("retentionTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        retentionTime = null;
                        continue;
                    }
                    retentionTime = property.Value.GetTimeSpan("P");
                    continue;
                }
                if (property.NameEquals("maxTaskRetryCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        maxTaskRetryCount = null;
                        continue;
                    }
                    maxTaskRetryCount = property.Value.GetInt32();
                    continue;
                }
            }
            return new TaskConstraints(Optional.ToNullable(maxWallClockTime), Optional.ToNullable(retentionTime), Optional.ToNullable(maxTaskRetryCount));
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static TaskConstraints FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeTaskConstraints(document.RootElement);
        }

        /// <summary> Convert into a Utf8JsonRequestContent. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }
    }
}
