// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace BatchService.Models
{
    public partial class BatchPoolResizeParameters : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(TargetDedicatedNodes))
            {
                if (TargetDedicatedNodes != null)
                {
                    writer.WritePropertyName("targetDedicatedNodes"u8);
                    writer.WriteNumberValue(TargetDedicatedNodes.Value);
                }
                else
                {
                    writer.WriteNull("targetDedicatedNodes");
                }
            }
            if (Optional.IsDefined(TargetLowPriorityNodes))
            {
                if (TargetLowPriorityNodes != null)
                {
                    writer.WritePropertyName("targetLowPriorityNodes"u8);
                    writer.WriteNumberValue(TargetLowPriorityNodes.Value);
                }
                else
                {
                    writer.WriteNull("targetLowPriorityNodes");
                }
            }
            if (Optional.IsDefined(ResizeTimeout))
            {
                if (ResizeTimeout != null)
                {
                    writer.WritePropertyName("resizeTimeout"u8);
                    writer.WriteStringValue(ResizeTimeout.Value, "P");
                }
                else
                {
                    writer.WriteNull("resizeTimeout");
                }
            }
            if (Optional.IsDefined(NodeDeallocationOption))
            {
                if (NodeDeallocationOption != null)
                {
                    writer.WritePropertyName("nodeDeallocationOption"u8);
                    writer.WriteStringValue(NodeDeallocationOption.Value.ToString());
                }
                else
                {
                    writer.WriteNull("nodeDeallocationOption");
                }
            }
            writer.WriteEndObject();
        }

        /// <summary> Convert into a Utf8JsonRequestContent. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }
    }
}
