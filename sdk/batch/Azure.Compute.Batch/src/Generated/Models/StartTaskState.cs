// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace BatchService.Models
{
    public readonly partial struct StartTaskState : IEquatable<StartTaskState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="StartTaskState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public StartTaskState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string RunningValue = "running";
        private const string CompletedValue = "completed";

        /// <summary> The StartTask is currently running. </summary>
        public static StartTaskState Running { get; } = new StartTaskState(RunningValue);
        /// <summary> The StartTask has exited with exit code 0, or the StartTask has failed and the retry limit has reached, or the StartTask process did not run due to Task preparation errors (such as resource file download failures). </summary>
        public static StartTaskState Completed { get; } = new StartTaskState(CompletedValue);
        /// <summary> Determines if two <see cref="StartTaskState"/> values are the same. </summary>
        public static bool operator ==(StartTaskState left, StartTaskState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="StartTaskState"/> values are not the same. </summary>
        public static bool operator !=(StartTaskState left, StartTaskState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="StartTaskState"/>. </summary>
        public static implicit operator StartTaskState(string value) => new StartTaskState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is StartTaskState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(StartTaskState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
