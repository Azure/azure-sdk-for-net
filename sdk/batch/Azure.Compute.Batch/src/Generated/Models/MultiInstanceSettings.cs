// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace BatchService.Models
{
    /// <summary>
    /// Multi-instance Tasks are commonly used to support MPI Tasks. In the MPI case,
    /// if any of the subtasks fail (for example due to exiting with a non-zero exit
    /// code) the entire multi-instance Task fails. The multi-instance Task is then
    /// terminated and retried, up to its retry limit.
    /// </summary>
    public partial class MultiInstanceSettings
    {
        /// <summary> Initializes a new instance of MultiInstanceSettings. </summary>
        /// <param name="coordinationCommandLine">
        /// A typical coordination command line launches a background service and verifies
        /// that the service is ready to process inter-node messages.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="coordinationCommandLine"/> is null. </exception>
        public MultiInstanceSettings(string coordinationCommandLine)
        {
            Argument.AssertNotNull(coordinationCommandLine, nameof(coordinationCommandLine));

            CoordinationCommandLine = coordinationCommandLine;
            CommonResourceFiles = new ChangeTrackingList<ResourceFile>();
        }

        /// <summary> Initializes a new instance of MultiInstanceSettings. </summary>
        /// <param name="numberOfInstances"> If omitted, the default is 1. </param>
        /// <param name="coordinationCommandLine">
        /// A typical coordination command line launches a background service and verifies
        /// that the service is ready to process inter-node messages.
        /// </param>
        /// <param name="commonResourceFiles">
        /// The difference between common resource files and Task resource files is that
        /// common resource files are downloaded for all subtasks including the primary,
        /// whereas Task resource files are downloaded only for the primary. Also note that
        /// these resource files are not downloaded to the Task working directory, but
        /// instead are downloaded to the Task root directory (one directory above the
        /// working directory).  There is a maximum size for the list of resource files. 
        /// When the max size is exceeded, the request will fail and the response error
        /// code will be RequestEntityTooLarge. If this occurs, the collection of
        /// ResourceFiles must be reduced in size. This can be achieved using .zip files,
        /// Application Packages, or Docker Containers.
        /// </param>
        internal MultiInstanceSettings(int? numberOfInstances, string coordinationCommandLine, IList<ResourceFile> commonResourceFiles)
        {
            NumberOfInstances = numberOfInstances;
            CoordinationCommandLine = coordinationCommandLine;
            CommonResourceFiles = commonResourceFiles.ToList();
        }

        /// <summary> If omitted, the default is 1. </summary>
        public int? NumberOfInstances { get; set; }
        /// <summary>
        /// A typical coordination command line launches a background service and verifies
        /// that the service is ready to process inter-node messages.
        /// </summary>
        public string CoordinationCommandLine { get; set; }
        /// <summary>
        /// The difference between common resource files and Task resource files is that
        /// common resource files are downloaded for all subtasks including the primary,
        /// whereas Task resource files are downloaded only for the primary. Also note that
        /// these resource files are not downloaded to the Task working directory, but
        /// instead are downloaded to the Task root directory (one directory above the
        /// working directory).  There is a maximum size for the list of resource files. 
        /// When the max size is exceeded, the request will fail and the response error
        /// code will be RequestEntityTooLarge. If this occurs, the collection of
        /// ResourceFiles must be reduced in size. This can be achieved using .zip files,
        /// Application Packages, or Docker Containers.
        /// </summary>
        public IList<ResourceFile> CommonResourceFiles { get; }
    }
}
