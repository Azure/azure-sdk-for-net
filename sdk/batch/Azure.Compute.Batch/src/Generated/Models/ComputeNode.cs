// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace BatchService.Models
{
    /// <summary> A Compute Node in the Batch service. </summary>
    public partial class ComputeNode
    {
        /// <summary> Initializes a new instance of ComputeNode. </summary>
        internal ComputeNode()
        {
            RecentTasks = new ChangeTrackingList<TaskInformation>();
            CertificateReferences = new ChangeTrackingList<CertificateReference>();
            Errors = new ChangeTrackingList<ComputeNodeError>();
        }

        /// <summary> Initializes a new instance of ComputeNode. </summary>
        /// <param name="id">
        /// Every Compute Node that is added to a Pool is assigned a unique ID. Whenever a
        /// Compute Node is removed from a Pool, all of its local files are deleted, and
        /// the ID is reclaimed and could be reused for new Compute Nodes.
        /// </param>
        /// <param name="url"> The URL of the Compute Node. </param>
        /// <param name="state">
        /// The Spot/Low-priority Compute Node has been preempted. Tasks which were running
        /// on the Compute Node when it was preempted will be rescheduled when another
        /// Compute Node becomes available.
        /// </param>
        /// <param name="schedulingState"> Whether the Compute Node is available for Task scheduling. </param>
        /// <param name="stateTransitionTime"> The time at which the Compute Node entered its current state. </param>
        /// <param name="lastBootTime"> This property may not be present if the Compute Node state is unusable. </param>
        /// <param name="allocationTime">
        /// This is the time when the Compute Node was initially allocated and doesn't
        /// change once set. It is not updated when the Compute Node is service healed or
        /// preempted.
        /// </param>
        /// <param name="ipAddress">
        /// Every Compute Node that is added to a Pool is assigned a unique IP address.
        /// Whenever a Compute Node is removed from a Pool, all of its local files are
        /// deleted, and the IP address is reclaimed and could be reused for new Compute
        /// Nodes.
        /// </param>
        /// <param name="affinityId">
        /// Note that this is just a soft affinity. If the target Compute Node is busy or
        /// unavailable at the time the Task is scheduled, then the Task will be scheduled
        /// elsewhere.
        /// </param>
        /// <param name="vmSize">
        /// For information about available sizes of virtual machines in Pools, see Choose
        /// a VM size for Compute Nodes in an Azure Batch Pool
        /// (https://docs.microsoft.com/azure/batch/batch-pool-vm-sizes).
        /// </param>
        /// <param name="totalTasksRun">
        /// The total number of Job Tasks completed on the Compute Node. This includes Job
        /// Manager Tasks and normal Tasks, but not Job Preparation, Job Release or Start
        /// Tasks.
        /// </param>
        /// <param name="runningTasksCount">
        /// The total number of currently running Job Tasks on the Compute Node. This
        /// includes Job Manager Tasks and normal Tasks, but not Job Preparation, Job
        /// Release or Start Tasks.
        /// </param>
        /// <param name="runningTaskSlotsCount">
        /// The total number of scheduling slots used by currently running Job Tasks on the
        /// Compute Node. This includes Job Manager Tasks and normal Tasks, but not Job
        /// Preparation, Job Release or Start Tasks.
        /// </param>
        /// <param name="totalTasksSucceeded">
        /// The total number of Job Tasks which completed successfully (with exitCode 0) on
        /// the Compute Node. This includes Job Manager Tasks and normal Tasks, but not Job
        /// Preparation, Job Release or Start Tasks.
        /// </param>
        /// <param name="recentTasks">
        /// This property is present only if at least one Task has run on this Compute Node
        /// since it was assigned to the Pool.
        /// </param>
        /// <param name="startTask">
        /// Batch will retry Tasks when a recovery operation is triggered on a Node.
        /// Examples of recovery operations include (but are not limited to) when an
        /// unhealthy Node is rebooted or a Compute Node disappeared due to host failure.
        /// Retries due to recovery operations are independent of and are not counted
        /// against the maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal
        /// retry due to a recovery operation may occur. Because of this, all Tasks should
        /// be idempotent. This means Tasks need to tolerate being interrupted and
        /// restarted without causing any corruption or duplicate data. The best practice
        /// for long running Tasks is to use some form of checkpointing. In some cases the
        /// StartTask may be re-run even though the Compute Node was not rebooted. Special
        /// care should be taken to avoid StartTasks which create breakaway process or
        /// install/launch services from the StartTask working directory, as this will
        /// block Batch from being able to re-run the StartTask.
        /// </param>
        /// <param name="startTaskInfo"> Information about a StartTask running on a Compute Node. </param>
        /// <param name="certificateReferences">
        /// For Windows Nodes, the Batch service installs the Certificates to the specified
        /// Certificate store and location. For Linux Compute Nodes, the Certificates are
        /// stored in a directory inside the Task working directory and an environment
        /// variable AZ_BATCH_CERTIFICATES_DIR is supplied to the Task to query for this
        /// location. For Certificates with visibility of 'remoteUser', a 'certs' directory
        /// is created in the user's home directory (e.g., /home/{user-name}/certs) and
        /// Certificates are placed in that directory.
        /// </param>
        /// <param name="errors"> The list of errors that are currently being encountered by the Compute Node. </param>
        /// <param name="isDedicated">
        /// Whether this Compute Node is a dedicated Compute Node. If false, the Compute
        /// Node is a Spot/Low-priority Compute Node.
        /// </param>
        /// <param name="endpointConfiguration"> The endpoint configuration for the Compute Node. </param>
        /// <param name="nodeAgentInfo">
        /// The Batch Compute Node agent is a program that runs on each Compute Node in the
        /// Pool and provides Batch capability on the Compute Node.
        /// </param>
        /// <param name="virtualMachineInfo"> Info about the current state of the virtual machine. </param>
        internal ComputeNode(string id, string url, ComputeNodeState? state, SchedulingState? schedulingState, DateTimeOffset? stateTransitionTime, DateTimeOffset? lastBootTime, DateTimeOffset? allocationTime, string ipAddress, string affinityId, string vmSize, int? totalTasksRun, int? runningTasksCount, int? runningTaskSlotsCount, int? totalTasksSucceeded, IReadOnlyList<TaskInformation> recentTasks, StartTask startTask, StartTaskInformation startTaskInfo, IReadOnlyList<CertificateReference> certificateReferences, IReadOnlyList<ComputeNodeError> errors, bool? isDedicated, ComputeNodeEndpointConfiguration endpointConfiguration, NodeAgentInformation nodeAgentInfo, VirtualMachineInfo virtualMachineInfo)
        {
            Id = id;
            Url = url;
            State = state;
            SchedulingState = schedulingState;
            StateTransitionTime = stateTransitionTime;
            LastBootTime = lastBootTime;
            AllocationTime = allocationTime;
            IpAddress = ipAddress;
            AffinityId = affinityId;
            VmSize = vmSize;
            TotalTasksRun = totalTasksRun;
            RunningTasksCount = runningTasksCount;
            RunningTaskSlotsCount = runningTaskSlotsCount;
            TotalTasksSucceeded = totalTasksSucceeded;
            RecentTasks = recentTasks.ToList();
            StartTask = startTask;
            StartTaskInfo = startTaskInfo;
            CertificateReferences = certificateReferences.ToList();
            Errors = errors.ToList();
            IsDedicated = isDedicated;
            EndpointConfiguration = endpointConfiguration;
            NodeAgentInfo = nodeAgentInfo;
            VirtualMachineInfo = virtualMachineInfo;
        }

        /// <summary>
        /// Every Compute Node that is added to a Pool is assigned a unique ID. Whenever a
        /// Compute Node is removed from a Pool, all of its local files are deleted, and
        /// the ID is reclaimed and could be reused for new Compute Nodes.
        /// </summary>
        public string Id { get; }
        /// <summary> The URL of the Compute Node. </summary>
        public string Url { get; }
        /// <summary>
        /// The Spot/Low-priority Compute Node has been preempted. Tasks which were running
        /// on the Compute Node when it was preempted will be rescheduled when another
        /// Compute Node becomes available.
        /// </summary>
        public ComputeNodeState? State { get; }
        /// <summary> Whether the Compute Node is available for Task scheduling. </summary>
        public SchedulingState? SchedulingState { get; }
        /// <summary> The time at which the Compute Node entered its current state. </summary>
        public DateTimeOffset? StateTransitionTime { get; }
        /// <summary> This property may not be present if the Compute Node state is unusable. </summary>
        public DateTimeOffset? LastBootTime { get; }
        /// <summary>
        /// This is the time when the Compute Node was initially allocated and doesn't
        /// change once set. It is not updated when the Compute Node is service healed or
        /// preempted.
        /// </summary>
        public DateTimeOffset? AllocationTime { get; }
        /// <summary>
        /// Every Compute Node that is added to a Pool is assigned a unique IP address.
        /// Whenever a Compute Node is removed from a Pool, all of its local files are
        /// deleted, and the IP address is reclaimed and could be reused for new Compute
        /// Nodes.
        /// </summary>
        public string IpAddress { get; }
        /// <summary>
        /// Note that this is just a soft affinity. If the target Compute Node is busy or
        /// unavailable at the time the Task is scheduled, then the Task will be scheduled
        /// elsewhere.
        /// </summary>
        public string AffinityId { get; }
        /// <summary>
        /// For information about available sizes of virtual machines in Pools, see Choose
        /// a VM size for Compute Nodes in an Azure Batch Pool
        /// (https://docs.microsoft.com/azure/batch/batch-pool-vm-sizes).
        /// </summary>
        public string VmSize { get; }
        /// <summary>
        /// The total number of Job Tasks completed on the Compute Node. This includes Job
        /// Manager Tasks and normal Tasks, but not Job Preparation, Job Release or Start
        /// Tasks.
        /// </summary>
        public int? TotalTasksRun { get; }
        /// <summary>
        /// The total number of currently running Job Tasks on the Compute Node. This
        /// includes Job Manager Tasks and normal Tasks, but not Job Preparation, Job
        /// Release or Start Tasks.
        /// </summary>
        public int? RunningTasksCount { get; }
        /// <summary>
        /// The total number of scheduling slots used by currently running Job Tasks on the
        /// Compute Node. This includes Job Manager Tasks and normal Tasks, but not Job
        /// Preparation, Job Release or Start Tasks.
        /// </summary>
        public int? RunningTaskSlotsCount { get; }
        /// <summary>
        /// The total number of Job Tasks which completed successfully (with exitCode 0) on
        /// the Compute Node. This includes Job Manager Tasks and normal Tasks, but not Job
        /// Preparation, Job Release or Start Tasks.
        /// </summary>
        public int? TotalTasksSucceeded { get; }
        /// <summary>
        /// This property is present only if at least one Task has run on this Compute Node
        /// since it was assigned to the Pool.
        /// </summary>
        public IReadOnlyList<TaskInformation> RecentTasks { get; }
        /// <summary>
        /// Batch will retry Tasks when a recovery operation is triggered on a Node.
        /// Examples of recovery operations include (but are not limited to) when an
        /// unhealthy Node is rebooted or a Compute Node disappeared due to host failure.
        /// Retries due to recovery operations are independent of and are not counted
        /// against the maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal
        /// retry due to a recovery operation may occur. Because of this, all Tasks should
        /// be idempotent. This means Tasks need to tolerate being interrupted and
        /// restarted without causing any corruption or duplicate data. The best practice
        /// for long running Tasks is to use some form of checkpointing. In some cases the
        /// StartTask may be re-run even though the Compute Node was not rebooted. Special
        /// care should be taken to avoid StartTasks which create breakaway process or
        /// install/launch services from the StartTask working directory, as this will
        /// block Batch from being able to re-run the StartTask.
        /// </summary>
        public StartTask StartTask { get; }
        /// <summary> Information about a StartTask running on a Compute Node. </summary>
        public StartTaskInformation StartTaskInfo { get; }
        /// <summary>
        /// For Windows Nodes, the Batch service installs the Certificates to the specified
        /// Certificate store and location. For Linux Compute Nodes, the Certificates are
        /// stored in a directory inside the Task working directory and an environment
        /// variable AZ_BATCH_CERTIFICATES_DIR is supplied to the Task to query for this
        /// location. For Certificates with visibility of 'remoteUser', a 'certs' directory
        /// is created in the user's home directory (e.g., /home/{user-name}/certs) and
        /// Certificates are placed in that directory.
        /// </summary>
        public IReadOnlyList<CertificateReference> CertificateReferences { get; }
        /// <summary> The list of errors that are currently being encountered by the Compute Node. </summary>
        public IReadOnlyList<ComputeNodeError> Errors { get; }
        /// <summary>
        /// Whether this Compute Node is a dedicated Compute Node. If false, the Compute
        /// Node is a Spot/Low-priority Compute Node.
        /// </summary>
        public bool? IsDedicated { get; }
        /// <summary> The endpoint configuration for the Compute Node. </summary>
        public ComputeNodeEndpointConfiguration EndpointConfiguration { get; }
        /// <summary>
        /// The Batch Compute Node agent is a program that runs on each Compute Node in the
        /// Pool and provides Batch capability on the Compute Node.
        /// </summary>
        public NodeAgentInformation NodeAgentInfo { get; }
        /// <summary> Info about the current state of the virtual machine. </summary>
        public VirtualMachineInfo VirtualMachineInfo { get; }
    }
}
