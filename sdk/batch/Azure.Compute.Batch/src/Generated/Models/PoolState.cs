// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace BatchService.Models
{
    public readonly partial struct PoolState : IEquatable<PoolState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="PoolState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public PoolState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ActiveValue = "active";
        private const string DeletingValue = "deleting";

        /// <summary> The Pool is available to run Tasks subject to the availability of Compute Nodes. </summary>
        public static PoolState Active { get; } = new PoolState(ActiveValue);
        /// <summary> The user has requested that the Pool be deleted, but the delete operation has not yet completed. </summary>
        public static PoolState Deleting { get; } = new PoolState(DeletingValue);
        /// <summary> Determines if two <see cref="PoolState"/> values are the same. </summary>
        public static bool operator ==(PoolState left, PoolState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="PoolState"/> values are not the same. </summary>
        public static bool operator !=(PoolState left, PoolState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="PoolState"/>. </summary>
        public static implicit operator PoolState(string value) => new PoolState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is PoolState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(PoolState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
