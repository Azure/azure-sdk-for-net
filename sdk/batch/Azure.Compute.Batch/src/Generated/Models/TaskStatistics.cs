// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;

namespace BatchService.Models
{
    /// <summary> Resource usage statistics for a Task. </summary>
    public partial class TaskStatistics
    {
        /// <summary> Initializes a new instance of TaskStatistics. </summary>
        /// <param name="url"> The URL of the statistics. </param>
        /// <param name="startTime"> The start time of the time range covered by the statistics. </param>
        /// <param name="lastUpdateTime">
        /// The time at which the statistics were last updated. All statistics are limited
        /// to the range between startTime and lastUpdateTime.
        /// </param>
        /// <param name="userCPUTime">
        /// The total user mode CPU time (summed across all cores and all Compute Nodes)
        /// consumed by the Task.
        /// </param>
        /// <param name="kernelCPUTime">
        /// The total kernel mode CPU time (summed across all cores and all Compute Nodes)
        /// consumed by the Task.
        /// </param>
        /// <param name="wallClockTime">
        /// The wall clock time is the elapsed time from when the Task started running on a
        /// Compute Node to when it finished (or to the last time the statistics were
        /// updated, if the Task had not finished by then). If the Task was retried, this
        /// includes the wall clock time of all the Task retries.
        /// </param>
        /// <param name="readIOps"> The total number of disk read operations made by the Task. </param>
        /// <param name="writeIOps"> The total number of disk write operations made by the Task. </param>
        /// <param name="readIOGiB"> The total gibibytes read from disk by the Task. </param>
        /// <param name="writeIOGiB"> The total gibibytes written to disk by the Task. </param>
        /// <param name="waitTime">
        /// The total wait time of the Task. The wait time for a Task is defined as the
        /// elapsed time between the creation of the Task and the start of Task execution.
        /// (If the Task is retried due to failures, the wait time is the time to the most
        /// recent Task execution.)
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="url"/> is null. </exception>
        public TaskStatistics(string url, DateTimeOffset startTime, DateTimeOffset lastUpdateTime, TimeSpan userCPUTime, TimeSpan kernelCPUTime, TimeSpan wallClockTime, int readIOps, int writeIOps, float readIOGiB, float writeIOGiB, TimeSpan waitTime)
        {
            Argument.AssertNotNull(url, nameof(url));

            Url = url;
            StartTime = startTime;
            LastUpdateTime = lastUpdateTime;
            UserCPUTime = userCPUTime;
            KernelCPUTime = kernelCPUTime;
            WallClockTime = wallClockTime;
            ReadIOps = readIOps;
            WriteIOps = writeIOps;
            ReadIOGiB = readIOGiB;
            WriteIOGiB = writeIOGiB;
            WaitTime = waitTime;
        }

        /// <summary> The URL of the statistics. </summary>
        public string Url { get; set; }
        /// <summary> The start time of the time range covered by the statistics. </summary>
        public DateTimeOffset StartTime { get; set; }
        /// <summary>
        /// The time at which the statistics were last updated. All statistics are limited
        /// to the range between startTime and lastUpdateTime.
        /// </summary>
        public DateTimeOffset LastUpdateTime { get; set; }
        /// <summary>
        /// The total user mode CPU time (summed across all cores and all Compute Nodes)
        /// consumed by the Task.
        /// </summary>
        public TimeSpan UserCPUTime { get; set; }
        /// <summary>
        /// The total kernel mode CPU time (summed across all cores and all Compute Nodes)
        /// consumed by the Task.
        /// </summary>
        public TimeSpan KernelCPUTime { get; set; }
        /// <summary>
        /// The wall clock time is the elapsed time from when the Task started running on a
        /// Compute Node to when it finished (or to the last time the statistics were
        /// updated, if the Task had not finished by then). If the Task was retried, this
        /// includes the wall clock time of all the Task retries.
        /// </summary>
        public TimeSpan WallClockTime { get; set; }
        /// <summary> The total number of disk read operations made by the Task. </summary>
        public int ReadIOps { get; set; }
        /// <summary> The total number of disk write operations made by the Task. </summary>
        public int WriteIOps { get; set; }
        /// <summary> The total gibibytes read from disk by the Task. </summary>
        public float ReadIOGiB { get; set; }
        /// <summary> The total gibibytes written to disk by the Task. </summary>
        public float WriteIOGiB { get; set; }
        /// <summary>
        /// The total wait time of the Task. The wait time for a Task is defined as the
        /// elapsed time between the creation of the Task and the start of Task execution.
        /// (If the Task is retried due to failures, the wait time is the time to the most
        /// recent Task execution.)
        /// </summary>
        public TimeSpan WaitTime { get; set; }
    }
}
