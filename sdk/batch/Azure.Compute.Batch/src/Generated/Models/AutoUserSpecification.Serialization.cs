// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure;
using Azure.Core;

namespace BatchService.Models
{
    public partial class AutoUserSpecification : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Scope))
            {
                if (Scope != null)
                {
                    writer.WritePropertyName("scope"u8);
                    writer.WriteStringValue(Scope.Value.ToString());
                }
                else
                {
                    writer.WriteNull("scope");
                }
            }
            if (Optional.IsDefined(ElevationLevel))
            {
                if (ElevationLevel != null)
                {
                    writer.WritePropertyName("elevationLevel"u8);
                    writer.WriteStringValue(ElevationLevel.Value.ToString());
                }
                else
                {
                    writer.WriteNull("elevationLevel");
                }
            }
            writer.WriteEndObject();
        }

        internal static AutoUserSpecification DeserializeAutoUserSpecification(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<AutoUserScope?> scope = default;
            Optional<ElevationLevel?> elevationLevel = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("scope"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        scope = null;
                        continue;
                    }
                    scope = new AutoUserScope(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("elevationLevel"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        elevationLevel = null;
                        continue;
                    }
                    elevationLevel = new ElevationLevel(property.Value.GetString());
                    continue;
                }
            }
            return new AutoUserSpecification(Optional.ToNullable(scope), Optional.ToNullable(elevationLevel));
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static AutoUserSpecification FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeAutoUserSpecification(document.RootElement);
        }

        /// <summary> Convert into a Utf8JsonRequestContent. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }
    }
}
