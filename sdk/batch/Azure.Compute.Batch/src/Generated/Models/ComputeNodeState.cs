// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace BatchService.Models
{
    public readonly partial struct ComputeNodeState : IEquatable<ComputeNodeState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ComputeNodeState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ComputeNodeState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string IdleValue = "idle";
        private const string RebootingValue = "rebooting";
        private const string ReimagingValue = "reimaging";
        private const string RunningValue = "running";
        private const string UnusableValue = "unusable";
        private const string CreatingValue = "creating";
        private const string StartingValue = "starting";
        private const string WaitingForStartTaskValue = "waitingforstarttask";
        private const string StartTaskFailedValue = "starttaskfailed";
        private const string UnknownValue = "unknown";
        private const string LeavingPoolValue = "leavingpool";
        private const string OfflineValue = "offline";
        private const string PreemptedValue = "preempted";

        /// <summary> The Compute Node is not currently running a Task. </summary>
        public static ComputeNodeState Idle { get; } = new ComputeNodeState(IdleValue);
        /// <summary> The Compute Node is rebooting. </summary>
        public static ComputeNodeState Rebooting { get; } = new ComputeNodeState(RebootingValue);
        /// <summary> The Compute Node is reimaging. </summary>
        public static ComputeNodeState Reimaging { get; } = new ComputeNodeState(ReimagingValue);
        /// <summary> The Compute Node is running one or more Tasks (other than a StartTask). </summary>
        public static ComputeNodeState Running { get; } = new ComputeNodeState(RunningValue);
        /// <summary> The Compute Node cannot be used for Task execution due to errors. </summary>
        public static ComputeNodeState Unusable { get; } = new ComputeNodeState(UnusableValue);
        /// <summary> The Batch service has obtained the underlying virtual machine from Azure Compute, but it has not yet started to join the Pool. </summary>
        public static ComputeNodeState Creating { get; } = new ComputeNodeState(CreatingValue);
        /// <summary> The Batch service is starting on the underlying virtual machine. </summary>
        public static ComputeNodeState Starting { get; } = new ComputeNodeState(StartingValue);
        /// <summary> The StartTask has started running on the Compute Node, but waitForSuccess is set and the StartTask has not yet completed. </summary>
        public static ComputeNodeState WaitingForStartTask { get; } = new ComputeNodeState(WaitingForStartTaskValue);
        /// <summary> The StartTask has failed on the Compute Node (and exhausted all retries), and waitForSuccess is set. The Compute Node is not usable for running Tasks. </summary>
        public static ComputeNodeState StartTaskFailed { get; } = new ComputeNodeState(StartTaskFailedValue);
        /// <summary> The Batch service has lost contact with the Compute Node, and does not know its true state. </summary>
        public static ComputeNodeState Unknown { get; } = new ComputeNodeState(UnknownValue);
        /// <summary> The Compute Node is leaving the Pool, either because the user explicitly removed it or because the Pool is resizing or autoscaling down. </summary>
        public static ComputeNodeState LeavingPool { get; } = new ComputeNodeState(LeavingPoolValue);
        /// <summary> The Compute Node is not currently running a Task, and scheduling of new Tasks to the Compute Node is disabled. </summary>
        public static ComputeNodeState Offline { get; } = new ComputeNodeState(OfflineValue);
        /// <summary> The Spot/Low-priority Compute Node has been preempted. Tasks which were running on the Compute Node when it was preempted will be rescheduled when another Compute Node becomes available. </summary>
        public static ComputeNodeState Preempted { get; } = new ComputeNodeState(PreemptedValue);
        /// <summary> Determines if two <see cref="ComputeNodeState"/> values are the same. </summary>
        public static bool operator ==(ComputeNodeState left, ComputeNodeState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ComputeNodeState"/> values are not the same. </summary>
        public static bool operator !=(ComputeNodeState left, ComputeNodeState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ComputeNodeState"/>. </summary>
        public static implicit operator ComputeNodeState(string value) => new ComputeNodeState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ComputeNodeState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ComputeNodeState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
