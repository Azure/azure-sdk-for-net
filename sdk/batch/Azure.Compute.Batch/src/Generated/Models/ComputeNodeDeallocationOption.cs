// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace BatchService.Models
{
    public readonly partial struct ComputeNodeDeallocationOption : IEquatable<ComputeNodeDeallocationOption>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ComputeNodeDeallocationOption"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ComputeNodeDeallocationOption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string RequeueValue = "requeue";
        private const string TerminateValue = "terminate";
        private const string TaskCompletionValue = "taskcompletion";
        private const string RetainedDataValue = "retaineddata";

        /// <summary> Terminate running Task processes and requeue the Tasks. The Tasks will run again when a Compute Node is available. Remove Compute Nodes as soon as Tasks have been terminated. </summary>
        public static ComputeNodeDeallocationOption Requeue { get; } = new ComputeNodeDeallocationOption(RequeueValue);
        /// <summary> Terminate running Tasks. The Tasks will be completed with failureInfo indicating that they were terminated, and will not run again. Remove Compute Nodes as soon as Tasks have been terminated. </summary>
        public static ComputeNodeDeallocationOption Terminate { get; } = new ComputeNodeDeallocationOption(TerminateValue);
        /// <summary> Allow currently running Tasks to complete. Schedule no new Tasks while waiting. Remove Compute Nodes when all Tasks have completed. </summary>
        public static ComputeNodeDeallocationOption TaskCompletion { get; } = new ComputeNodeDeallocationOption(TaskCompletionValue);
        /// <summary> Allow currently running Tasks to complete, then wait for all Task data retention periods to expire. Schedule no new Tasks while waiting. Remove Compute Nodes when all Task retention periods have expired. </summary>
        public static ComputeNodeDeallocationOption RetainedData { get; } = new ComputeNodeDeallocationOption(RetainedDataValue);
        /// <summary> Determines if two <see cref="ComputeNodeDeallocationOption"/> values are the same. </summary>
        public static bool operator ==(ComputeNodeDeallocationOption left, ComputeNodeDeallocationOption right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ComputeNodeDeallocationOption"/> values are not the same. </summary>
        public static bool operator !=(ComputeNodeDeallocationOption left, ComputeNodeDeallocationOption right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ComputeNodeDeallocationOption"/>. </summary>
        public static implicit operator ComputeNodeDeallocationOption(string value) => new ComputeNodeDeallocationOption(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ComputeNodeDeallocationOption other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ComputeNodeDeallocationOption other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
