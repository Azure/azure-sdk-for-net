// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace BatchService.Models
{
    public readonly partial struct JobAction : IEquatable<JobAction>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="JobAction"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public JobAction(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NoneValue = "none";
        private const string DisableValue = "disable";
        private const string TerminateValue = "terminate";

        /// <summary> Take no action. </summary>
        public static JobAction None { get; } = new JobAction(NoneValue);
        /// <summary> Disable the Job. This is equivalent to calling the disable Job API, with a disableTasks value of requeue. </summary>
        public static JobAction Disable { get; } = new JobAction(DisableValue);
        /// <summary> Terminate the Job. The terminateReason in the Job&apos;s executionInfo is set to &quot;TaskFailed&quot;. </summary>
        public static JobAction Terminate { get; } = new JobAction(TerminateValue);
        /// <summary> Determines if two <see cref="JobAction"/> values are the same. </summary>
        public static bool operator ==(JobAction left, JobAction right) => left.Equals(right);
        /// <summary> Determines if two <see cref="JobAction"/> values are not the same. </summary>
        public static bool operator !=(JobAction left, JobAction right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="JobAction"/>. </summary>
        public static implicit operator JobAction(string value) => new JobAction(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is JobAction other && Equals(other);
        /// <inheritdoc />
        public bool Equals(JobAction other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
