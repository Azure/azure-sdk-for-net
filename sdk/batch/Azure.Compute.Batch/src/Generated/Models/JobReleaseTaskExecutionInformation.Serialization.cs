// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace BatchService.Models
{
    public partial class JobReleaseTaskExecutionInformation
    {
        internal static JobReleaseTaskExecutionInformation DeserializeJobReleaseTaskExecutionInformation(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            DateTimeOffset startTime = default;
            Optional<DateTimeOffset?> endTime = default;
            JobReleaseTaskState state = default;
            Optional<string> taskRootDirectory = default;
            Optional<string> taskRootDirectoryUrl = default;
            Optional<int?> exitCode = default;
            Optional<TaskContainerExecutionInformation> containerInfo = default;
            Optional<TaskFailureInformation> failureInfo = default;
            Optional<TaskExecutionResult?> result = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("startTime"u8))
                {
                    startTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("endTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        endTime = null;
                        continue;
                    }
                    endTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("state"u8))
                {
                    state = new JobReleaseTaskState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("taskRootDirectory"u8))
                {
                    taskRootDirectory = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("taskRootDirectoryUrl"u8))
                {
                    taskRootDirectoryUrl = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("exitCode"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        exitCode = null;
                        continue;
                    }
                    exitCode = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("containerInfo"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    containerInfo = TaskContainerExecutionInformation.DeserializeTaskContainerExecutionInformation(property.Value);
                    continue;
                }
                if (property.NameEquals("failureInfo"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    failureInfo = TaskFailureInformation.DeserializeTaskFailureInformation(property.Value);
                    continue;
                }
                if (property.NameEquals("result"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        result = null;
                        continue;
                    }
                    result = new TaskExecutionResult(property.Value.GetString());
                    continue;
                }
            }
            return new JobReleaseTaskExecutionInformation(startTime, Optional.ToNullable(endTime), state, taskRootDirectory, taskRootDirectoryUrl, Optional.ToNullable(exitCode), containerInfo, failureInfo, Optional.ToNullable(result));
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static JobReleaseTaskExecutionInformation FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeJobReleaseTaskExecutionInformation(document.RootElement);
        }
    }
}
