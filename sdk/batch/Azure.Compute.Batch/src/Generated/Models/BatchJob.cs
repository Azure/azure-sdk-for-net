// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace BatchService.Models
{
    /// <summary> An Azure Batch Job. </summary>
    public partial class BatchJob
    {
        /// <summary> Initializes a new instance of BatchJob. </summary>
        public BatchJob()
        {
            CommonEnvironmentSettings = new ChangeTrackingList<EnvironmentSetting>();
            Metadata = new ChangeTrackingList<MetadataItem>();
        }

        /// <summary> Initializes a new instance of BatchJob. </summary>
        /// <param name="id">
        /// The ID is case-preserving and case-insensitive (that is, you may not have two
        /// IDs within an Account that differ only by case).
        /// </param>
        /// <param name="displayName"> The display name for the Job. </param>
        /// <param name="usesTaskDependencies">
        /// Whether Tasks in the Job can define dependencies on each other. The default is
        /// false.
        /// </param>
        /// <param name="url"> The URL of the Job. </param>
        /// <param name="eTag">
        /// This is an opaque string. You can use it to detect whether the Job has changed
        /// between requests. In particular, you can be pass the ETag when updating a Job
        /// to specify that your changes should take effect only if nobody else has
        /// modified the Job in the meantime.
        /// </param>
        /// <param name="lastModified">
        /// This is the last time at which the Job level data, such as the Job state or
        /// priority, changed. It does not factor in task-level changes such as adding new
        /// Tasks or Tasks changing state.
        /// </param>
        /// <param name="creationTime"> The creation time of the Job. </param>
        /// <param name="state"> The state of the Job. </param>
        /// <param name="stateTransitionTime"> The time at which the Job entered its current state. </param>
        /// <param name="previousState"> This property is not set if the Job is in its initial Active state. </param>
        /// <param name="previousStateTransitionTime"> This property is not set if the Job is in its initial Active state. </param>
        /// <param name="priority">
        /// Priority values can range from -1000 to 1000, with -1000 being the lowest
        /// priority and 1000 being the highest priority. The default value is 0.
        /// </param>
        /// <param name="allowTaskPreemption">
        /// If the value is set to True, other high priority jobs submitted to the system
        /// will take precedence and will be able requeue tasks from this job. You can
        /// update a job's allowTaskPreemption after it has been created using the update
        /// job API.
        /// </param>
        /// <param name="maxParallelTasks">
        /// The value of maxParallelTasks must be -1 or greater than 0 if specified. If not
        /// specified, the default value is -1, which means there's no limit to the number
        /// of tasks that can be run at once. You can update a job's maxParallelTasks after
        /// it has been created using the update job API.
        /// </param>
        /// <param name="constraints"> The execution constraints for a Job. </param>
        /// <param name="jobManagerTask">
        /// The Job Manager Task is automatically started when the Job is created. The
        /// Batch service tries to schedule the Job Manager Task before any other Tasks in
        /// the Job. When shrinking a Pool, the Batch service tries to preserve Nodes where
        /// Job Manager Tasks are running for as long as possible (that is, Compute Nodes
        /// running 'normal' Tasks are removed before Compute Nodes running Job Manager
        /// Tasks). When a Job Manager Task fails and needs to be restarted, the system
        /// tries to schedule it at the highest priority. If there are no idle Compute
        /// Nodes available, the system may terminate one of the running Tasks in the Pool
        /// and return it to the queue in order to make room for the Job Manager Task to
        /// restart. Note that a Job Manager Task in one Job does not have priority over
        /// Tasks in other Jobs. Across Jobs, only Job level priorities are observed. For
        /// example, if a Job Manager in a priority 0 Job needs to be restarted, it will
        /// not displace Tasks of a priority 1 Job. Batch will retry Tasks when a recovery
        /// operation is triggered on a Node. Examples of recovery operations include (but
        /// are not limited to) when an unhealthy Node is rebooted or a Compute Node
        /// disappeared due to host failure. Retries due to recovery operations are
        /// independent of and are not counted against the maxTaskRetryCount. Even if the
        /// maxTaskRetryCount is 0, an internal retry due to a recovery operation may
        /// occur. Because of this, all Tasks should be idempotent. This means Tasks need
        /// to tolerate being interrupted and restarted without causing any corruption or
        /// duplicate data. The best practice for long running Tasks is to use some form of
        /// checkpointing.
        /// </param>
        /// <param name="jobPreparationTask">
        /// The Job Preparation Task is a special Task run on each Compute Node before any
        /// other Task of the Job.
        /// </param>
        /// <param name="jobReleaseTask">
        /// The Job Release Task is a special Task run at the end of the Job on each
        /// Compute Node that has run any other Task of the Job.
        /// </param>
        /// <param name="commonEnvironmentSettings">
        /// Individual Tasks can override an environment setting specified here by
        /// specifying the same setting name with a different value.
        /// </param>
        /// <param name="poolInfo"> Specifies how a Job should be assigned to a Pool. </param>
        /// <param name="onAllTasksComplete"> The default is noaction. </param>
        /// <param name="onTaskFailure">
        /// A Task is considered to have failed if has a failureInfo. A failureInfo is set
        /// if the Task completes with a non-zero exit code after exhausting its retry
        /// count, or if there was an error starting the Task, for example due to a
        /// resource file download error. The default is noaction.
        /// </param>
        /// <param name="networkConfiguration"> The network configuration for the Job. </param>
        /// <param name="metadata">
        /// The Batch service does not assign any meaning to metadata; it is solely for the
        /// use of user code.
        /// </param>
        /// <param name="executionInfo"> Contains information about the execution of a Job in the Azure Batch service. </param>
        /// <param name="stats">
        /// This property is populated only if the CloudJob was retrieved with an expand
        /// clause including the 'stats' attribute; otherwise it is null. The statistics
        /// may not be immediately available. The Batch service performs periodic roll-up
        /// of statistics. The typical delay is about 30 minutes.
        /// </param>
        internal BatchJob(string id, string displayName, bool? usesTaskDependencies, string url, string eTag, DateTimeOffset? lastModified, DateTimeOffset? creationTime, JobState? state, DateTimeOffset? stateTransitionTime, JobState? previousState, DateTimeOffset? previousStateTransitionTime, int? priority, bool? allowTaskPreemption, int? maxParallelTasks, JobConstraints constraints, JobManagerTask jobManagerTask, JobPreparationTask jobPreparationTask, JobReleaseTask jobReleaseTask, IList<EnvironmentSetting> commonEnvironmentSettings, PoolInformation poolInfo, OnAllTasksComplete? onAllTasksComplete, OnTaskFailure? onTaskFailure, JobNetworkConfiguration networkConfiguration, IList<MetadataItem> metadata, JobExecutionInformation executionInfo, JobStatistics stats)
        {
            Id = id;
            DisplayName = displayName;
            UsesTaskDependencies = usesTaskDependencies;
            Url = url;
            ETag = eTag;
            LastModified = lastModified;
            CreationTime = creationTime;
            State = state;
            StateTransitionTime = stateTransitionTime;
            PreviousState = previousState;
            PreviousStateTransitionTime = previousStateTransitionTime;
            Priority = priority;
            AllowTaskPreemption = allowTaskPreemption;
            MaxParallelTasks = maxParallelTasks;
            Constraints = constraints;
            JobManagerTask = jobManagerTask;
            JobPreparationTask = jobPreparationTask;
            JobReleaseTask = jobReleaseTask;
            CommonEnvironmentSettings = commonEnvironmentSettings.ToList();
            PoolInfo = poolInfo;
            OnAllTasksComplete = onAllTasksComplete;
            OnTaskFailure = onTaskFailure;
            NetworkConfiguration = networkConfiguration;
            Metadata = metadata.ToList();
            ExecutionInfo = executionInfo;
            Stats = stats;
        }

        /// <summary>
        /// The ID is case-preserving and case-insensitive (that is, you may not have two
        /// IDs within an Account that differ only by case).
        /// </summary>
        public string Id { get; set; }
        /// <summary> The display name for the Job. </summary>
        public string DisplayName { get; set; }
        /// <summary>
        /// Whether Tasks in the Job can define dependencies on each other. The default is
        /// false.
        /// </summary>
        public bool? UsesTaskDependencies { get; set; }
        /// <summary> The URL of the Job. </summary>
        public string Url { get; }
        /// <summary>
        /// This is an opaque string. You can use it to detect whether the Job has changed
        /// between requests. In particular, you can be pass the ETag when updating a Job
        /// to specify that your changes should take effect only if nobody else has
        /// modified the Job in the meantime.
        /// </summary>
        public string ETag { get; }
        /// <summary>
        /// This is the last time at which the Job level data, such as the Job state or
        /// priority, changed. It does not factor in task-level changes such as adding new
        /// Tasks or Tasks changing state.
        /// </summary>
        public DateTimeOffset? LastModified { get; }
        /// <summary> The creation time of the Job. </summary>
        public DateTimeOffset? CreationTime { get; }
        /// <summary> The state of the Job. </summary>
        public JobState? State { get; }
        /// <summary> The time at which the Job entered its current state. </summary>
        public DateTimeOffset? StateTransitionTime { get; }
        /// <summary> This property is not set if the Job is in its initial Active state. </summary>
        public JobState? PreviousState { get; }
        /// <summary> This property is not set if the Job is in its initial Active state. </summary>
        public DateTimeOffset? PreviousStateTransitionTime { get; }
        /// <summary>
        /// Priority values can range from -1000 to 1000, with -1000 being the lowest
        /// priority and 1000 being the highest priority. The default value is 0.
        /// </summary>
        public int? Priority { get; set; }
        /// <summary>
        /// If the value is set to True, other high priority jobs submitted to the system
        /// will take precedence and will be able requeue tasks from this job. You can
        /// update a job's allowTaskPreemption after it has been created using the update
        /// job API.
        /// </summary>
        public bool? AllowTaskPreemption { get; set; }
        /// <summary>
        /// The value of maxParallelTasks must be -1 or greater than 0 if specified. If not
        /// specified, the default value is -1, which means there's no limit to the number
        /// of tasks that can be run at once. You can update a job's maxParallelTasks after
        /// it has been created using the update job API.
        /// </summary>
        public int? MaxParallelTasks { get; set; }
        /// <summary> The execution constraints for a Job. </summary>
        public JobConstraints Constraints { get; set; }
        /// <summary>
        /// The Job Manager Task is automatically started when the Job is created. The
        /// Batch service tries to schedule the Job Manager Task before any other Tasks in
        /// the Job. When shrinking a Pool, the Batch service tries to preserve Nodes where
        /// Job Manager Tasks are running for as long as possible (that is, Compute Nodes
        /// running 'normal' Tasks are removed before Compute Nodes running Job Manager
        /// Tasks). When a Job Manager Task fails and needs to be restarted, the system
        /// tries to schedule it at the highest priority. If there are no idle Compute
        /// Nodes available, the system may terminate one of the running Tasks in the Pool
        /// and return it to the queue in order to make room for the Job Manager Task to
        /// restart. Note that a Job Manager Task in one Job does not have priority over
        /// Tasks in other Jobs. Across Jobs, only Job level priorities are observed. For
        /// example, if a Job Manager in a priority 0 Job needs to be restarted, it will
        /// not displace Tasks of a priority 1 Job. Batch will retry Tasks when a recovery
        /// operation is triggered on a Node. Examples of recovery operations include (but
        /// are not limited to) when an unhealthy Node is rebooted or a Compute Node
        /// disappeared due to host failure. Retries due to recovery operations are
        /// independent of and are not counted against the maxTaskRetryCount. Even if the
        /// maxTaskRetryCount is 0, an internal retry due to a recovery operation may
        /// occur. Because of this, all Tasks should be idempotent. This means Tasks need
        /// to tolerate being interrupted and restarted without causing any corruption or
        /// duplicate data. The best practice for long running Tasks is to use some form of
        /// checkpointing.
        /// </summary>
        public JobManagerTask JobManagerTask { get; set; }
        /// <summary>
        /// The Job Preparation Task is a special Task run on each Compute Node before any
        /// other Task of the Job.
        /// </summary>
        public JobPreparationTask JobPreparationTask { get; set; }
        /// <summary>
        /// The Job Release Task is a special Task run at the end of the Job on each
        /// Compute Node that has run any other Task of the Job.
        /// </summary>
        public JobReleaseTask JobReleaseTask { get; set; }
        /// <summary>
        /// Individual Tasks can override an environment setting specified here by
        /// specifying the same setting name with a different value.
        /// </summary>
        public IList<EnvironmentSetting> CommonEnvironmentSettings { get; }
        /// <summary> Specifies how a Job should be assigned to a Pool. </summary>
        public PoolInformation PoolInfo { get; set; }
        /// <summary> The default is noaction. </summary>
        public OnAllTasksComplete? OnAllTasksComplete { get; set; }
        /// <summary>
        /// A Task is considered to have failed if has a failureInfo. A failureInfo is set
        /// if the Task completes with a non-zero exit code after exhausting its retry
        /// count, or if there was an error starting the Task, for example due to a
        /// resource file download error. The default is noaction.
        /// </summary>
        public OnTaskFailure? OnTaskFailure { get; set; }
        /// <summary> The network configuration for the Job. </summary>
        public JobNetworkConfiguration NetworkConfiguration { get; set; }
        /// <summary>
        /// The Batch service does not assign any meaning to metadata; it is solely for the
        /// use of user code.
        /// </summary>
        public IList<MetadataItem> Metadata { get; }
        /// <summary> Contains information about the execution of a Job in the Azure Batch service. </summary>
        public JobExecutionInformation ExecutionInfo { get; }
        /// <summary>
        /// This property is populated only if the CloudJob was retrieved with an expand
        /// clause including the 'stats' attribute; otherwise it is null. The statistics
        /// may not be immediately available. The Batch service performs periodic roll-up
        /// of statistics. The typical delay is about 30 minutes.
        /// </summary>
        public JobStatistics Stats { get; }
    }
}
