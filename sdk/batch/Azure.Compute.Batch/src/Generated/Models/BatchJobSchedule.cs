// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace BatchService.Models
{
    /// <summary>
    /// A Job Schedule that allows recurring Jobs by specifying when to run Jobs and a
    /// specification used to create each Job.
    /// </summary>
    public partial class BatchJobSchedule
    {
        /// <summary> Initializes a new instance of BatchJobSchedule. </summary>
        public BatchJobSchedule()
        {
            Metadata = new ChangeTrackingList<MetadataItem>();
        }

        /// <summary> Initializes a new instance of BatchJobSchedule. </summary>
        /// <param name="id"> A string that uniquely identifies the schedule within the Account. </param>
        /// <param name="displayName"> The display name for the schedule. </param>
        /// <param name="url"> The URL of the Job Schedule. </param>
        /// <param name="eTag">
        /// This is an opaque string. You can use it to detect whether the Job Schedule has
        /// changed between requests. In particular, you can be pass the ETag with an
        /// Update Job Schedule request to specify that your changes should take effect
        /// only if nobody else has modified the schedule in the meantime.
        /// </param>
        /// <param name="lastModified">
        /// This is the last time at which the schedule level data, such as the Job
        /// specification or recurrence information, changed. It does not factor in
        /// job-level changes such as new Jobs being created or Jobs changing state.
        /// </param>
        /// <param name="creationTime"> The creation time of the Job Schedule. </param>
        /// <param name="state"> The state of the Job Schedule. </param>
        /// <param name="stateTransitionTime"> The time at which the Job Schedule entered the current state. </param>
        /// <param name="previousState"> This property is not present if the Job Schedule is in its initial active state. </param>
        /// <param name="previousStateTransitionTime"> This property is not present if the Job Schedule is in its initial active state. </param>
        /// <param name="schedule">
        /// All times are fixed respective to UTC and are not impacted by daylight saving
        /// time.
        /// </param>
        /// <param name="jobSpecification"> Specifies details of the Jobs to be created on a schedule. </param>
        /// <param name="executionInfo">
        /// Contains information about Jobs that have been and will be run under a Job
        /// Schedule.
        /// </param>
        /// <param name="metadata">
        /// The Batch service does not assign any meaning to metadata; it is solely for the
        /// use of user code.
        /// </param>
        /// <param name="stats"> Resource usage statistics for a Job Schedule. </param>
        internal BatchJobSchedule(string id, string displayName, string url, string eTag, DateTimeOffset? lastModified, DateTimeOffset? creationTime, JobScheduleState? state, DateTimeOffset? stateTransitionTime, JobScheduleState? previousState, DateTimeOffset? previousStateTransitionTime, Schedule schedule, JobSpecification jobSpecification, JobScheduleExecutionInformation executionInfo, IList<MetadataItem> metadata, JobScheduleStatistics stats)
        {
            Id = id;
            DisplayName = displayName;
            Url = url;
            ETag = eTag;
            LastModified = lastModified;
            CreationTime = creationTime;
            State = state;
            StateTransitionTime = stateTransitionTime;
            PreviousState = previousState;
            PreviousStateTransitionTime = previousStateTransitionTime;
            Schedule = schedule;
            JobSpecification = jobSpecification;
            ExecutionInfo = executionInfo;
            Metadata = metadata.ToList();
            Stats = stats;
        }

        /// <summary> A string that uniquely identifies the schedule within the Account. </summary>
        public string Id { get; set; }
        /// <summary> The display name for the schedule. </summary>
        public string DisplayName { get; set; }
        /// <summary> The URL of the Job Schedule. </summary>
        public string Url { get; }
        /// <summary>
        /// This is an opaque string. You can use it to detect whether the Job Schedule has
        /// changed between requests. In particular, you can be pass the ETag with an
        /// Update Job Schedule request to specify that your changes should take effect
        /// only if nobody else has modified the schedule in the meantime.
        /// </summary>
        public string ETag { get; }
        /// <summary>
        /// This is the last time at which the schedule level data, such as the Job
        /// specification or recurrence information, changed. It does not factor in
        /// job-level changes such as new Jobs being created or Jobs changing state.
        /// </summary>
        public DateTimeOffset? LastModified { get; }
        /// <summary> The creation time of the Job Schedule. </summary>
        public DateTimeOffset? CreationTime { get; }
        /// <summary> The state of the Job Schedule. </summary>
        public JobScheduleState? State { get; }
        /// <summary> The time at which the Job Schedule entered the current state. </summary>
        public DateTimeOffset? StateTransitionTime { get; }
        /// <summary> This property is not present if the Job Schedule is in its initial active state. </summary>
        public JobScheduleState? PreviousState { get; }
        /// <summary> This property is not present if the Job Schedule is in its initial active state. </summary>
        public DateTimeOffset? PreviousStateTransitionTime { get; }
        /// <summary>
        /// All times are fixed respective to UTC and are not impacted by daylight saving
        /// time.
        /// </summary>
        public Schedule Schedule { get; set; }
        /// <summary> Specifies details of the Jobs to be created on a schedule. </summary>
        public JobSpecification JobSpecification { get; set; }
        /// <summary>
        /// Contains information about Jobs that have been and will be run under a Job
        /// Schedule.
        /// </summary>
        public JobScheduleExecutionInformation ExecutionInfo { get; }
        /// <summary>
        /// The Batch service does not assign any meaning to metadata; it is solely for the
        /// use of user code.
        /// </summary>
        public IList<MetadataItem> Metadata { get; }
        /// <summary> Resource usage statistics for a Job Schedule. </summary>
        public JobScheduleStatistics Stats { get; }
    }
}
