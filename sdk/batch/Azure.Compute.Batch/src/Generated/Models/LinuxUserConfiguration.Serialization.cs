// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure;
using Azure.Core;

namespace BatchService.Models
{
    public partial class LinuxUserConfiguration : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Uid))
            {
                if (Uid != null)
                {
                    writer.WritePropertyName("uid"u8);
                    writer.WriteNumberValue(Uid.Value);
                }
                else
                {
                    writer.WriteNull("uid");
                }
            }
            if (Optional.IsDefined(Gid))
            {
                if (Gid != null)
                {
                    writer.WritePropertyName("gid"u8);
                    writer.WriteNumberValue(Gid.Value);
                }
                else
                {
                    writer.WriteNull("gid");
                }
            }
            if (Optional.IsDefined(SshPrivateKey))
            {
                writer.WritePropertyName("sshPrivateKey"u8);
                writer.WriteStringValue(SshPrivateKey);
            }
            writer.WriteEndObject();
        }

        internal static LinuxUserConfiguration DeserializeLinuxUserConfiguration(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<int?> uid = default;
            Optional<int?> gid = default;
            Optional<string> sshPrivateKey = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("uid"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        uid = null;
                        continue;
                    }
                    uid = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("gid"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        gid = null;
                        continue;
                    }
                    gid = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("sshPrivateKey"u8))
                {
                    sshPrivateKey = property.Value.GetString();
                    continue;
                }
            }
            return new LinuxUserConfiguration(Optional.ToNullable(uid), Optional.ToNullable(gid), sshPrivateKey);
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static LinuxUserConfiguration FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeLinuxUserConfiguration(document.RootElement);
        }

        /// <summary> Convert into a Utf8JsonRequestContent. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }
    }
}
