// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace BatchService.Models
{
    public partial class JobExecutionInformation : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("startTime"u8);
            writer.WriteStringValue(StartTime, "O");
            if (Optional.IsDefined(EndTime))
            {
                if (EndTime != null)
                {
                    writer.WritePropertyName("endTime"u8);
                    writer.WriteStringValue(EndTime.Value, "O");
                }
                else
                {
                    writer.WriteNull("endTime");
                }
            }
            if (Optional.IsDefined(PoolId))
            {
                writer.WritePropertyName("poolId"u8);
                writer.WriteStringValue(PoolId);
            }
            if (Optional.IsDefined(SchedulingError))
            {
                writer.WritePropertyName("schedulingError"u8);
                writer.WriteObjectValue(SchedulingError);
            }
            if (Optional.IsDefined(TerminateReason))
            {
                writer.WritePropertyName("terminateReason"u8);
                writer.WriteStringValue(TerminateReason);
            }
            writer.WriteEndObject();
        }

        internal static JobExecutionInformation DeserializeJobExecutionInformation(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            DateTimeOffset startTime = default;
            Optional<DateTimeOffset?> endTime = default;
            Optional<string> poolId = default;
            Optional<JobSchedulingError> schedulingError = default;
            Optional<string> terminateReason = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("startTime"u8))
                {
                    startTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("endTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        endTime = null;
                        continue;
                    }
                    endTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("poolId"u8))
                {
                    poolId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("schedulingError"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    schedulingError = JobSchedulingError.DeserializeJobSchedulingError(property.Value);
                    continue;
                }
                if (property.NameEquals("terminateReason"u8))
                {
                    terminateReason = property.Value.GetString();
                    continue;
                }
            }
            return new JobExecutionInformation(startTime, Optional.ToNullable(endTime), poolId, schedulingError, terminateReason);
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static JobExecutionInformation FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeJobExecutionInformation(document.RootElement);
        }

        /// <summary> Convert into a Utf8JsonRequestContent. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }
    }
}
