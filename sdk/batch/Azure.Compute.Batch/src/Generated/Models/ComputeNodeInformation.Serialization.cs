// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure;
using Azure.Core;

namespace BatchService.Models
{
    public partial class ComputeNodeInformation : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(AffinityId))
            {
                writer.WritePropertyName("affinityId"u8);
                writer.WriteStringValue(AffinityId);
            }
            if (Optional.IsDefined(NodeUrl))
            {
                writer.WritePropertyName("nodeUrl"u8);
                writer.WriteStringValue(NodeUrl);
            }
            if (Optional.IsDefined(PoolId))
            {
                writer.WritePropertyName("poolId"u8);
                writer.WriteStringValue(PoolId);
            }
            if (Optional.IsDefined(NodeId))
            {
                writer.WritePropertyName("nodeId"u8);
                writer.WriteStringValue(NodeId);
            }
            if (Optional.IsDefined(TaskRootDirectory))
            {
                writer.WritePropertyName("taskRootDirectory"u8);
                writer.WriteStringValue(TaskRootDirectory);
            }
            if (Optional.IsDefined(TaskRootDirectoryUrl))
            {
                writer.WritePropertyName("taskRootDirectoryUrl"u8);
                writer.WriteStringValue(TaskRootDirectoryUrl);
            }
            writer.WriteEndObject();
        }

        internal static ComputeNodeInformation DeserializeComputeNodeInformation(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> affinityId = default;
            Optional<string> nodeUrl = default;
            Optional<string> poolId = default;
            Optional<string> nodeId = default;
            Optional<string> taskRootDirectory = default;
            Optional<string> taskRootDirectoryUrl = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("affinityId"u8))
                {
                    affinityId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("nodeUrl"u8))
                {
                    nodeUrl = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("poolId"u8))
                {
                    poolId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("nodeId"u8))
                {
                    nodeId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("taskRootDirectory"u8))
                {
                    taskRootDirectory = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("taskRootDirectoryUrl"u8))
                {
                    taskRootDirectoryUrl = property.Value.GetString();
                    continue;
                }
            }
            return new ComputeNodeInformation(affinityId, nodeUrl, poolId, nodeId, taskRootDirectory, taskRootDirectoryUrl);
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static ComputeNodeInformation FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeComputeNodeInformation(document.RootElement);
        }

        /// <summary> Convert into a Utf8JsonRequestContent. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }
    }
}
