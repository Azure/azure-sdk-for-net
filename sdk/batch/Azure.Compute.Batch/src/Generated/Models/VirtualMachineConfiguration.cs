// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace BatchService.Models
{
    /// <summary>
    /// The configuration for Compute Nodes in a Pool based on the Azure Virtual
    /// Machines infrastructure.
    /// </summary>
    public partial class VirtualMachineConfiguration
    {
        /// <summary> Initializes a new instance of VirtualMachineConfiguration. </summary>
        /// <param name="imageReference">
        /// A reference to an Azure Virtual Machines Marketplace Image or a Shared Image
        /// Gallery Image. To get the list of all Azure Marketplace Image references
        /// verified by Azure Batch, see the 'List Supported Images' operation.
        /// </param>
        /// <param name="nodeAgentSKUId">
        /// The Batch Compute Node agent is a program that runs on each Compute Node in the
        /// Pool, and provides the command-and-control interface between the Compute Node
        /// and the Batch service. There are different implementations of the Compute Node
        /// agent, known as SKUs, for different operating systems. You must specify a
        /// Compute Node agent SKU which matches the selected Image reference. To get the
        /// list of supported Compute Node agent SKUs along with their list of verified
        /// Image references, see the 'List supported Compute Node agent SKUs' operation.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="imageReference"/> or <paramref name="nodeAgentSKUId"/> is null. </exception>
        public VirtualMachineConfiguration(ImageReference imageReference, string nodeAgentSKUId)
        {
            Argument.AssertNotNull(imageReference, nameof(imageReference));
            Argument.AssertNotNull(nodeAgentSKUId, nameof(nodeAgentSKUId));

            ImageReference = imageReference;
            NodeAgentSKUId = nodeAgentSKUId;
            DataDisks = new ChangeTrackingList<DataDisk>();
            Extensions = new ChangeTrackingList<VMExtension>();
        }

        /// <summary> Initializes a new instance of VirtualMachineConfiguration. </summary>
        /// <param name="imageReference">
        /// A reference to an Azure Virtual Machines Marketplace Image or a Shared Image
        /// Gallery Image. To get the list of all Azure Marketplace Image references
        /// verified by Azure Batch, see the 'List Supported Images' operation.
        /// </param>
        /// <param name="nodeAgentSKUId">
        /// The Batch Compute Node agent is a program that runs on each Compute Node in the
        /// Pool, and provides the command-and-control interface between the Compute Node
        /// and the Batch service. There are different implementations of the Compute Node
        /// agent, known as SKUs, for different operating systems. You must specify a
        /// Compute Node agent SKU which matches the selected Image reference. To get the
        /// list of supported Compute Node agent SKUs along with their list of verified
        /// Image references, see the 'List supported Compute Node agent SKUs' operation.
        /// </param>
        /// <param name="windowsConfiguration">
        /// This property must not be specified if the imageReference property specifies a
        /// Linux OS Image.
        /// </param>
        /// <param name="dataDisks">
        /// This property must be specified if the Compute Nodes in the Pool need to have
        /// empty data disks attached to them. This cannot be updated. Each Compute Node
        /// gets its own disk (the disk is not a file share). Existing disks cannot be
        /// attached, each attached disk is empty. When the Compute Node is removed from
        /// the Pool, the disk and all data associated with it is also deleted. The disk is
        /// not formatted after being attached, it must be formatted before use - for more
        /// information see
        /// https://docs.microsoft.com/en-us/azure/virtual-machines/linux/classic/attach-disk#initialize-a-new-data-disk-in-linux
        /// and
        /// https://docs.microsoft.com/en-us/azure/virtual-machines/windows/attach-disk-ps#add-an-empty-data-disk-to-a-virtual-machine.
        /// </param>
        /// <param name="licenseType">
        /// This only applies to Images that contain the Windows operating system, and
        /// should only be used when you hold valid on-premises licenses for the Compute
        /// Nodes which will be deployed. If omitted, no on-premises licensing discount is
        /// applied. Values are:
        /// 
        ///  Windows_Server - The on-premises license is for Windows
        /// Server.
        ///  Windows_Client - The on-premises license is for Windows Client.
        /// 
        /// </param>
        /// <param name="containerConfiguration">
        /// If specified, setup is performed on each Compute Node in the Pool to allow
        /// Tasks to run in containers. All regular Tasks and Job manager Tasks run on this
        /// Pool must specify the containerSettings property, and all other Tasks may
        /// specify it.
        /// </param>
        /// <param name="diskEncryptionConfiguration">
        /// If specified, encryption is performed on each node in the pool during node
        /// provisioning.
        /// </param>
        /// <param name="nodePlacementConfiguration">
        /// This configuration will specify rules on how nodes in the pool will be
        /// physically allocated.
        /// </param>
        /// <param name="extensions">
        /// If specified, the extensions mentioned in this configuration will be installed
        /// on each node.
        /// </param>
        /// <param name="osDisk"> Settings for the operating system disk of the compute node (VM). </param>
        internal VirtualMachineConfiguration(ImageReference imageReference, string nodeAgentSKUId, WindowsConfiguration windowsConfiguration, IList<DataDisk> dataDisks, string licenseType, ContainerConfiguration containerConfiguration, DiskEncryptionConfiguration diskEncryptionConfiguration, NodePlacementConfiguration nodePlacementConfiguration, IList<VMExtension> extensions, OSDisk osDisk)
        {
            ImageReference = imageReference;
            NodeAgentSKUId = nodeAgentSKUId;
            WindowsConfiguration = windowsConfiguration;
            DataDisks = dataDisks.ToList();
            LicenseType = licenseType;
            ContainerConfiguration = containerConfiguration;
            DiskEncryptionConfiguration = diskEncryptionConfiguration;
            NodePlacementConfiguration = nodePlacementConfiguration;
            Extensions = extensions.ToList();
            OsDisk = osDisk;
        }

        /// <summary>
        /// A reference to an Azure Virtual Machines Marketplace Image or a Shared Image
        /// Gallery Image. To get the list of all Azure Marketplace Image references
        /// verified by Azure Batch, see the 'List Supported Images' operation.
        /// </summary>
        public ImageReference ImageReference { get; set; }
        /// <summary>
        /// The Batch Compute Node agent is a program that runs on each Compute Node in the
        /// Pool, and provides the command-and-control interface between the Compute Node
        /// and the Batch service. There are different implementations of the Compute Node
        /// agent, known as SKUs, for different operating systems. You must specify a
        /// Compute Node agent SKU which matches the selected Image reference. To get the
        /// list of supported Compute Node agent SKUs along with their list of verified
        /// Image references, see the 'List supported Compute Node agent SKUs' operation.
        /// </summary>
        public string NodeAgentSKUId { get; set; }
        /// <summary>
        /// This property must not be specified if the imageReference property specifies a
        /// Linux OS Image.
        /// </summary>
        public WindowsConfiguration WindowsConfiguration { get; set; }
        /// <summary>
        /// This property must be specified if the Compute Nodes in the Pool need to have
        /// empty data disks attached to them. This cannot be updated. Each Compute Node
        /// gets its own disk (the disk is not a file share). Existing disks cannot be
        /// attached, each attached disk is empty. When the Compute Node is removed from
        /// the Pool, the disk and all data associated with it is also deleted. The disk is
        /// not formatted after being attached, it must be formatted before use - for more
        /// information see
        /// https://docs.microsoft.com/en-us/azure/virtual-machines/linux/classic/attach-disk#initialize-a-new-data-disk-in-linux
        /// and
        /// https://docs.microsoft.com/en-us/azure/virtual-machines/windows/attach-disk-ps#add-an-empty-data-disk-to-a-virtual-machine.
        /// </summary>
        public IList<DataDisk> DataDisks { get; }
        /// <summary>
        /// This only applies to Images that contain the Windows operating system, and
        /// should only be used when you hold valid on-premises licenses for the Compute
        /// Nodes which will be deployed. If omitted, no on-premises licensing discount is
        /// applied. Values are:
        /// 
        ///  Windows_Server - The on-premises license is for Windows
        /// Server.
        ///  Windows_Client - The on-premises license is for Windows Client.
        /// 
        /// </summary>
        public string LicenseType { get; set; }
        /// <summary>
        /// If specified, setup is performed on each Compute Node in the Pool to allow
        /// Tasks to run in containers. All regular Tasks and Job manager Tasks run on this
        /// Pool must specify the containerSettings property, and all other Tasks may
        /// specify it.
        /// </summary>
        public ContainerConfiguration ContainerConfiguration { get; set; }
        /// <summary>
        /// If specified, encryption is performed on each node in the pool during node
        /// provisioning.
        /// </summary>
        public DiskEncryptionConfiguration DiskEncryptionConfiguration { get; set; }
        /// <summary>
        /// This configuration will specify rules on how nodes in the pool will be
        /// physically allocated.
        /// </summary>
        public NodePlacementConfiguration NodePlacementConfiguration { get; set; }
        /// <summary>
        /// If specified, the extensions mentioned in this configuration will be installed
        /// on each node.
        /// </summary>
        public IList<VMExtension> Extensions { get; }
        /// <summary> Settings for the operating system disk of the compute node (VM). </summary>
        public OSDisk OsDisk { get; set; }
    }
}
