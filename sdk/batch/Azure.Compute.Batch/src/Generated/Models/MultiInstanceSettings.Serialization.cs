// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace BatchService.Models
{
    public partial class MultiInstanceSettings : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(NumberOfInstances))
            {
                if (NumberOfInstances != null)
                {
                    writer.WritePropertyName("numberOfInstances"u8);
                    writer.WriteNumberValue(NumberOfInstances.Value);
                }
                else
                {
                    writer.WriteNull("numberOfInstances");
                }
            }
            writer.WritePropertyName("coordinationCommandLine"u8);
            writer.WriteStringValue(CoordinationCommandLine);
            if (Optional.IsCollectionDefined(CommonResourceFiles))
            {
                writer.WritePropertyName("commonResourceFiles"u8);
                writer.WriteStartArray();
                foreach (var item in CommonResourceFiles)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static MultiInstanceSettings DeserializeMultiInstanceSettings(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<int?> numberOfInstances = default;
            string coordinationCommandLine = default;
            Optional<IList<ResourceFile>> commonResourceFiles = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("numberOfInstances"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        numberOfInstances = null;
                        continue;
                    }
                    numberOfInstances = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("coordinationCommandLine"u8))
                {
                    coordinationCommandLine = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("commonResourceFiles"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<ResourceFile> array = new List<ResourceFile>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(ResourceFile.DeserializeResourceFile(item));
                    }
                    commonResourceFiles = array;
                    continue;
                }
            }
            return new MultiInstanceSettings(Optional.ToNullable(numberOfInstances), coordinationCommandLine, Optional.ToList(commonResourceFiles));
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static MultiInstanceSettings FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeMultiInstanceSettings(document.RootElement);
        }

        /// <summary> Convert into a Utf8JsonRequestContent. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }
    }
}
