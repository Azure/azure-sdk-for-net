// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace BatchService.Models
{
    /// <summary> Information about a StartTask running on a Compute Node. </summary>
    public partial class StartTaskInformation
    {
        /// <summary> Initializes a new instance of StartTaskInformation. </summary>
        /// <param name="state"> The state of the StartTask on the Compute Node. </param>
        /// <param name="startTime">
        /// This value is reset every time the Task is restarted or retried (that is, this
        /// is the most recent time at which the StartTask started running).
        /// </param>
        /// <param name="retryCount">
        /// Task application failures (non-zero exit code) are retried, pre-processing
        /// errors (the Task could not be run) and file upload errors are not retried. The
        /// Batch service will retry the Task up to the limit specified by the constraints.
        /// </param>
        internal StartTaskInformation(StartTaskState state, DateTimeOffset startTime, int retryCount)
        {
            State = state;
            StartTime = startTime;
            RetryCount = retryCount;
        }

        /// <summary> Initializes a new instance of StartTaskInformation. </summary>
        /// <param name="state"> The state of the StartTask on the Compute Node. </param>
        /// <param name="startTime">
        /// This value is reset every time the Task is restarted or retried (that is, this
        /// is the most recent time at which the StartTask started running).
        /// </param>
        /// <param name="endTime">
        /// This is the end time of the most recent run of the StartTask, if that run has
        /// completed (even if that run failed and a retry is pending). This element is not
        /// present if the StartTask is currently running.
        /// </param>
        /// <param name="exitCode">
        /// This property is set only if the StartTask is in the completed state. In
        /// general, the exit code for a process reflects the specific convention
        /// implemented by the application developer for that process. If you use the exit
        /// code value to make decisions in your code, be sure that you know the exit code
        /// convention used by the application process. However, if the Batch service
        /// terminates the StartTask (due to timeout, or user termination via the API) you
        /// may see an operating system-defined exit code.
        /// </param>
        /// <param name="containerInfo"> This property is set only if the Task runs in a container context. </param>
        /// <param name="failureInfo">
        /// This property is set only if the Task is in the completed state and encountered
        /// a failure.
        /// </param>
        /// <param name="retryCount">
        /// Task application failures (non-zero exit code) are retried, pre-processing
        /// errors (the Task could not be run) and file upload errors are not retried. The
        /// Batch service will retry the Task up to the limit specified by the constraints.
        /// </param>
        /// <param name="lastRetryTime">
        /// This element is present only if the Task was retried (i.e. retryCount is
        /// nonzero). If present, this is typically the same as startTime, but may be
        /// different if the Task has been restarted for reasons other than retry; for
        /// example, if the Compute Node was rebooted during a retry, then the startTime is
        /// updated but the lastRetryTime is not.
        /// </param>
        /// <param name="result">
        /// If the value is 'failed', then the details of the failure can be found in the
        /// failureInfo property.
        /// </param>
        internal StartTaskInformation(StartTaskState state, DateTimeOffset startTime, DateTimeOffset? endTime, int? exitCode, TaskContainerExecutionInformation containerInfo, TaskFailureInformation failureInfo, int retryCount, DateTimeOffset? lastRetryTime, TaskExecutionResult? result)
        {
            State = state;
            StartTime = startTime;
            EndTime = endTime;
            ExitCode = exitCode;
            ContainerInfo = containerInfo;
            FailureInfo = failureInfo;
            RetryCount = retryCount;
            LastRetryTime = lastRetryTime;
            Result = result;
        }

        /// <summary> The state of the StartTask on the Compute Node. </summary>
        public StartTaskState State { get; }
        /// <summary>
        /// This value is reset every time the Task is restarted or retried (that is, this
        /// is the most recent time at which the StartTask started running).
        /// </summary>
        public DateTimeOffset StartTime { get; }
        /// <summary>
        /// This is the end time of the most recent run of the StartTask, if that run has
        /// completed (even if that run failed and a retry is pending). This element is not
        /// present if the StartTask is currently running.
        /// </summary>
        public DateTimeOffset? EndTime { get; }
        /// <summary>
        /// This property is set only if the StartTask is in the completed state. In
        /// general, the exit code for a process reflects the specific convention
        /// implemented by the application developer for that process. If you use the exit
        /// code value to make decisions in your code, be sure that you know the exit code
        /// convention used by the application process. However, if the Batch service
        /// terminates the StartTask (due to timeout, or user termination via the API) you
        /// may see an operating system-defined exit code.
        /// </summary>
        public int? ExitCode { get; }
        /// <summary> This property is set only if the Task runs in a container context. </summary>
        public TaskContainerExecutionInformation ContainerInfo { get; }
        /// <summary>
        /// This property is set only if the Task is in the completed state and encountered
        /// a failure.
        /// </summary>
        public TaskFailureInformation FailureInfo { get; }
        /// <summary>
        /// Task application failures (non-zero exit code) are retried, pre-processing
        /// errors (the Task could not be run) and file upload errors are not retried. The
        /// Batch service will retry the Task up to the limit specified by the constraints.
        /// </summary>
        public int RetryCount { get; }
        /// <summary>
        /// This element is present only if the Task was retried (i.e. retryCount is
        /// nonzero). If present, this is typically the same as startTime, but may be
        /// different if the Task has been restarted for reasons other than retry; for
        /// example, if the Compute Node was rebooted during a retry, then the startTime is
        /// updated but the lastRetryTime is not.
        /// </summary>
        public DateTimeOffset? LastRetryTime { get; }
        /// <summary>
        /// If the value is 'failed', then the details of the failure can be found in the
        /// failureInfo property.
        /// </summary>
        public TaskExecutionResult? Result { get; }
    }
}
