// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace BatchService.Models
{
    public readonly partial struct TaskAddStatus : IEquatable<TaskAddStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="TaskAddStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TaskAddStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SuccessValue = "success";
        private const string ClientErrorValue = "clienterror";
        private const string ServerErrorValue = "servererror";

        /// <summary> The Task was added successfully. </summary>
        public static TaskAddStatus Success { get; } = new TaskAddStatus(SuccessValue);
        /// <summary> The Task failed to add due to a client error and should not be retried without modifying the request as appropriate. </summary>
        public static TaskAddStatus ClientError { get; } = new TaskAddStatus(ClientErrorValue);
        /// <summary> Task failed to add due to a server error and can be retried without modification. </summary>
        public static TaskAddStatus ServerError { get; } = new TaskAddStatus(ServerErrorValue);
        /// <summary> Determines if two <see cref="TaskAddStatus"/> values are the same. </summary>
        public static bool operator ==(TaskAddStatus left, TaskAddStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="TaskAddStatus"/> values are not the same. </summary>
        public static bool operator !=(TaskAddStatus left, TaskAddStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="TaskAddStatus"/>. </summary>
        public static implicit operator TaskAddStatus(string value) => new TaskAddStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TaskAddStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(TaskAddStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
