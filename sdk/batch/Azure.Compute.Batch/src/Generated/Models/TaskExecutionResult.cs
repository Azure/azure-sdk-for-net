// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace BatchService.Models
{
    public readonly partial struct TaskExecutionResult : IEquatable<TaskExecutionResult>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="TaskExecutionResult"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TaskExecutionResult(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SuccessValue = "success";
        private const string FailureValue = "failure";

        /// <summary> The Task ran successfully. </summary>
        public static TaskExecutionResult Success { get; } = new TaskExecutionResult(SuccessValue);
        /// <summary> There was an error during processing of the Task. The failure may have occurred before the Task process was launched, while the Task process was executing, or after the Task process exited. </summary>
        public static TaskExecutionResult Failure { get; } = new TaskExecutionResult(FailureValue);
        /// <summary> Determines if two <see cref="TaskExecutionResult"/> values are the same. </summary>
        public static bool operator ==(TaskExecutionResult left, TaskExecutionResult right) => left.Equals(right);
        /// <summary> Determines if two <see cref="TaskExecutionResult"/> values are not the same. </summary>
        public static bool operator !=(TaskExecutionResult left, TaskExecutionResult right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="TaskExecutionResult"/>. </summary>
        public static implicit operator TaskExecutionResult(string value) => new TaskExecutionResult(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TaskExecutionResult other && Equals(other);
        /// <inheritdoc />
        public bool Equals(TaskExecutionResult other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
