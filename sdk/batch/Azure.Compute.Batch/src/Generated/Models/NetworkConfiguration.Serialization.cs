// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure;
using Azure.Core;

namespace BatchService.Models
{
    public partial class NetworkConfiguration : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(SubnetId))
            {
                writer.WritePropertyName("subnetId"u8);
                writer.WriteStringValue(SubnetId);
            }
            if (Optional.IsDefined(DynamicVNetAssignmentScope))
            {
                if (DynamicVNetAssignmentScope != null)
                {
                    writer.WritePropertyName("dynamicVNetAssignmentScope"u8);
                    writer.WriteStringValue(DynamicVNetAssignmentScope.Value.ToString());
                }
                else
                {
                    writer.WriteNull("dynamicVNetAssignmentScope");
                }
            }
            if (Optional.IsDefined(EndpointConfiguration))
            {
                writer.WritePropertyName("endpointConfiguration"u8);
                writer.WriteObjectValue(EndpointConfiguration);
            }
            if (Optional.IsDefined(PublicIPAddressConfiguration))
            {
                writer.WritePropertyName("publicIPAddressConfiguration"u8);
                writer.WriteObjectValue(PublicIPAddressConfiguration);
            }
            writer.WriteEndObject();
        }

        internal static NetworkConfiguration DeserializeNetworkConfiguration(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> subnetId = default;
            Optional<DynamicVNetAssignmentScope?> dynamicVNetAssignmentScope = default;
            Optional<PoolEndpointConfiguration> endpointConfiguration = default;
            Optional<PublicIPAddressConfiguration> publicIPAddressConfiguration = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("subnetId"u8))
                {
                    subnetId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("dynamicVNetAssignmentScope"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        dynamicVNetAssignmentScope = null;
                        continue;
                    }
                    dynamicVNetAssignmentScope = new DynamicVNetAssignmentScope(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("endpointConfiguration"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    endpointConfiguration = PoolEndpointConfiguration.DeserializePoolEndpointConfiguration(property.Value);
                    continue;
                }
                if (property.NameEquals("publicIPAddressConfiguration"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    publicIPAddressConfiguration = PublicIPAddressConfiguration.DeserializePublicIPAddressConfiguration(property.Value);
                    continue;
                }
            }
            return new NetworkConfiguration(subnetId, Optional.ToNullable(dynamicVNetAssignmentScope), endpointConfiguration, publicIPAddressConfiguration);
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static NetworkConfiguration FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeNetworkConfiguration(document.RootElement);
        }

        /// <summary> Convert into a Utf8JsonRequestContent. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }
    }
}
