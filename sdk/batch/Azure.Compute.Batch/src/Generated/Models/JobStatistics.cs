// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace BatchService.Models
{
    /// <summary> Resource usage statistics for a Job. </summary>
    public partial class JobStatistics
    {
        /// <summary> Initializes a new instance of JobStatistics. </summary>
        /// <param name="startTime"> The start time of the time range covered by the statistics. </param>
        /// <param name="lastUpdateTime">
        /// The time at which the statistics were last updated. All statistics are limited
        /// to the range between startTime and lastUpdateTime.
        /// </param>
        /// <param name="userCPUTime">
        /// The total user mode CPU time (summed across all cores and all Compute Nodes)
        /// consumed by all Tasks in the Job.
        /// </param>
        /// <param name="kernelCPUTime">
        /// The total kernel mode CPU time (summed across all cores and all Compute Nodes)
        /// consumed by all Tasks in the Job.
        /// </param>
        /// <param name="wallClockTime">
        ///  The wall clock time is the elapsed time from when the Task started running on
        /// a Compute Node to when it finished (or to the last time the statistics were
        /// updated, if the Task had not finished by then). If a Task was retried, this
        /// includes the wall clock time of all the Task retries.
        /// </param>
        /// <param name="readIOps"> The total number of disk read operations made by all Tasks in the Job. </param>
        /// <param name="writeIOps"> The total number of disk write operations made by all Tasks in the Job. </param>
        /// <param name="readIOGiB"> The total amount of data in GiB read from disk by all Tasks in the Job. </param>
        /// <param name="writeIOGiB"> The total amount of data in GiB written to disk by all Tasks in the Job. </param>
        /// <param name="numSucceededTasks"> A Task completes successfully if it returns exit code 0. </param>
        /// <param name="numFailedTasks">
        /// A Task fails if it exhausts its maximum retry count without returning exit code
        /// 0.
        /// </param>
        /// <param name="numTaskRetries">
        /// The total number of retries on all the Tasks in the Job during the given time
        /// range.
        /// </param>
        /// <param name="waitTime">
        /// The wait time for a Task is defined as the elapsed time between the creation of
        /// the Task and the start of Task execution. (If the Task is retried due to
        /// failures, the wait time is the time to the most recent Task execution.) This
        /// value is only reported in the Account lifetime statistics; it is not included
        /// in the Job statistics.
        /// </param>
        public JobStatistics(DateTimeOffset startTime, DateTimeOffset lastUpdateTime, TimeSpan userCPUTime, TimeSpan kernelCPUTime, TimeSpan wallClockTime, int readIOps, int writeIOps, float readIOGiB, float writeIOGiB, int numSucceededTasks, int numFailedTasks, int numTaskRetries, TimeSpan waitTime)
        {
            StartTime = startTime;
            LastUpdateTime = lastUpdateTime;
            UserCPUTime = userCPUTime;
            KernelCPUTime = kernelCPUTime;
            WallClockTime = wallClockTime;
            ReadIOps = readIOps;
            WriteIOps = writeIOps;
            ReadIOGiB = readIOGiB;
            WriteIOGiB = writeIOGiB;
            NumSucceededTasks = numSucceededTasks;
            NumFailedTasks = numFailedTasks;
            NumTaskRetries = numTaskRetries;
            WaitTime = waitTime;
        }

        /// <summary> Initializes a new instance of JobStatistics. </summary>
        /// <param name="url"> The URL of the statistics. </param>
        /// <param name="startTime"> The start time of the time range covered by the statistics. </param>
        /// <param name="lastUpdateTime">
        /// The time at which the statistics were last updated. All statistics are limited
        /// to the range between startTime and lastUpdateTime.
        /// </param>
        /// <param name="userCPUTime">
        /// The total user mode CPU time (summed across all cores and all Compute Nodes)
        /// consumed by all Tasks in the Job.
        /// </param>
        /// <param name="kernelCPUTime">
        /// The total kernel mode CPU time (summed across all cores and all Compute Nodes)
        /// consumed by all Tasks in the Job.
        /// </param>
        /// <param name="wallClockTime">
        ///  The wall clock time is the elapsed time from when the Task started running on
        /// a Compute Node to when it finished (or to the last time the statistics were
        /// updated, if the Task had not finished by then). If a Task was retried, this
        /// includes the wall clock time of all the Task retries.
        /// </param>
        /// <param name="readIOps"> The total number of disk read operations made by all Tasks in the Job. </param>
        /// <param name="writeIOps"> The total number of disk write operations made by all Tasks in the Job. </param>
        /// <param name="readIOGiB"> The total amount of data in GiB read from disk by all Tasks in the Job. </param>
        /// <param name="writeIOGiB"> The total amount of data in GiB written to disk by all Tasks in the Job. </param>
        /// <param name="numSucceededTasks"> A Task completes successfully if it returns exit code 0. </param>
        /// <param name="numFailedTasks">
        /// A Task fails if it exhausts its maximum retry count without returning exit code
        /// 0.
        /// </param>
        /// <param name="numTaskRetries">
        /// The total number of retries on all the Tasks in the Job during the given time
        /// range.
        /// </param>
        /// <param name="waitTime">
        /// The wait time for a Task is defined as the elapsed time between the creation of
        /// the Task and the start of Task execution. (If the Task is retried due to
        /// failures, the wait time is the time to the most recent Task execution.) This
        /// value is only reported in the Account lifetime statistics; it is not included
        /// in the Job statistics.
        /// </param>
        internal JobStatistics(string url, DateTimeOffset startTime, DateTimeOffset lastUpdateTime, TimeSpan userCPUTime, TimeSpan kernelCPUTime, TimeSpan wallClockTime, int readIOps, int writeIOps, float readIOGiB, float writeIOGiB, int numSucceededTasks, int numFailedTasks, int numTaskRetries, TimeSpan waitTime)
        {
            Url = url;
            StartTime = startTime;
            LastUpdateTime = lastUpdateTime;
            UserCPUTime = userCPUTime;
            KernelCPUTime = kernelCPUTime;
            WallClockTime = wallClockTime;
            ReadIOps = readIOps;
            WriteIOps = writeIOps;
            ReadIOGiB = readIOGiB;
            WriteIOGiB = writeIOGiB;
            NumSucceededTasks = numSucceededTasks;
            NumFailedTasks = numFailedTasks;
            NumTaskRetries = numTaskRetries;
            WaitTime = waitTime;
        }

        /// <summary> The URL of the statistics. </summary>
        public string Url { get; }
        /// <summary> The start time of the time range covered by the statistics. </summary>
        public DateTimeOffset StartTime { get; set; }
        /// <summary>
        /// The time at which the statistics were last updated. All statistics are limited
        /// to the range between startTime and lastUpdateTime.
        /// </summary>
        public DateTimeOffset LastUpdateTime { get; set; }
        /// <summary>
        /// The total user mode CPU time (summed across all cores and all Compute Nodes)
        /// consumed by all Tasks in the Job.
        /// </summary>
        public TimeSpan UserCPUTime { get; set; }
        /// <summary>
        /// The total kernel mode CPU time (summed across all cores and all Compute Nodes)
        /// consumed by all Tasks in the Job.
        /// </summary>
        public TimeSpan KernelCPUTime { get; set; }
        /// <summary>
        ///  The wall clock time is the elapsed time from when the Task started running on
        /// a Compute Node to when it finished (or to the last time the statistics were
        /// updated, if the Task had not finished by then). If a Task was retried, this
        /// includes the wall clock time of all the Task retries.
        /// </summary>
        public TimeSpan WallClockTime { get; set; }
        /// <summary> The total number of disk read operations made by all Tasks in the Job. </summary>
        public int ReadIOps { get; set; }
        /// <summary> The total number of disk write operations made by all Tasks in the Job. </summary>
        public int WriteIOps { get; set; }
        /// <summary> The total amount of data in GiB read from disk by all Tasks in the Job. </summary>
        public float ReadIOGiB { get; set; }
        /// <summary> The total amount of data in GiB written to disk by all Tasks in the Job. </summary>
        public float WriteIOGiB { get; set; }
        /// <summary> A Task completes successfully if it returns exit code 0. </summary>
        public int NumSucceededTasks { get; set; }
        /// <summary>
        /// A Task fails if it exhausts its maximum retry count without returning exit code
        /// 0.
        /// </summary>
        public int NumFailedTasks { get; set; }
        /// <summary>
        /// The total number of retries on all the Tasks in the Job during the given time
        /// range.
        /// </summary>
        public int NumTaskRetries { get; set; }
        /// <summary>
        /// The wait time for a Task is defined as the elapsed time between the creation of
        /// the Task and the start of Task execution. (If the Task is retried due to
        /// failures, the wait time is the time to the most recent Task execution.) This
        /// value is only reported in the Account lifetime statistics; it is not included
        /// in the Job statistics.
        /// </summary>
        public TimeSpan WaitTime { get; set; }
    }
}
