// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace BatchService.Models
{
    /// <summary>
    /// Specifies any dependencies of a Task. Any Task that is explicitly specified or
    /// within a dependency range must complete before the dependant Task will be
    /// scheduled.
    /// </summary>
    public partial class TaskDependencies
    {
        /// <summary> Initializes a new instance of TaskDependencies. </summary>
        public TaskDependencies()
        {
            TaskIds = new ChangeTrackingList<string>();
            TaskIdRanges = new ChangeTrackingList<TaskIdRange>();
        }

        /// <summary> Initializes a new instance of TaskDependencies. </summary>
        /// <param name="taskIds">
        /// The taskIds collection is limited to 64000 characters total (i.e. the combined
        /// length of all Task IDs). If the taskIds collection exceeds the maximum length,
        /// the Add Task request fails with error code TaskDependencyListTooLong. In this
        /// case consider using Task ID ranges instead.
        /// </param>
        /// <param name="taskIdRanges">
        /// The list of Task ID ranges that this Task depends on. All Tasks in all ranges
        /// must complete successfully before the dependent Task can be scheduled.
        /// </param>
        internal TaskDependencies(IList<string> taskIds, IList<TaskIdRange> taskIdRanges)
        {
            TaskIds = taskIds.ToList();
            TaskIdRanges = taskIdRanges.ToList();
        }

        /// <summary>
        /// The taskIds collection is limited to 64000 characters total (i.e. the combined
        /// length of all Task IDs). If the taskIds collection exceeds the maximum length,
        /// the Add Task request fails with error code TaskDependencyListTooLong. In this
        /// case consider using Task ID ranges instead.
        /// </summary>
        public IList<string> TaskIds { get; }
        /// <summary>
        /// The list of Task ID ranges that this Task depends on. All Tasks in all ranges
        /// must complete successfully before the dependent Task can be scheduled.
        /// </summary>
        public IList<TaskIdRange> TaskIdRanges { get; }
    }
}
