// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace BatchService.Models
{
    /// <summary> Specifies how the Batch service should respond when the Task completes. </summary>
    public partial class ExitConditions
    {
        /// <summary> Initializes a new instance of ExitConditions. </summary>
        public ExitConditions()
        {
            ExitCodes = new ChangeTrackingList<ExitCodeMapping>();
            ExitCodeRanges = new ChangeTrackingList<ExitCodeRangeMapping>();
        }

        /// <summary> Initializes a new instance of ExitConditions. </summary>
        /// <param name="exitCodes">
        /// A list of individual Task exit codes and how the Batch service should respond
        /// to them.
        /// </param>
        /// <param name="exitCodeRanges">
        /// A list of Task exit code ranges and how the Batch service should respond to
        /// them.
        /// </param>
        /// <param name="preProcessingError"> Specifies how the Batch service responds to a particular exit condition. </param>
        /// <param name="fileUploadError">
        /// If the Task exited with an exit code that was specified via exitCodes or
        /// exitCodeRanges, and then encountered a file upload error, then the action
        /// specified by the exit code takes precedence.
        /// </param>
        /// <param name="default">
        /// This value is used if the Task exits with any nonzero exit code not listed in
        /// the exitCodes or exitCodeRanges collection, with a pre-processing error if the
        /// preProcessingError property is not present, or with a file upload error if the
        /// fileUploadError property is not present. If you want non-default behavior on
        /// exit code 0, you must list it explicitly using the exitCodes or exitCodeRanges
        /// collection.
        /// </param>
        internal ExitConditions(IList<ExitCodeMapping> exitCodes, IList<ExitCodeRangeMapping> exitCodeRanges, ExitOptions preProcessingError, ExitOptions fileUploadError, ExitOptions @default)
        {
            ExitCodes = exitCodes.ToList();
            ExitCodeRanges = exitCodeRanges.ToList();
            PreProcessingError = preProcessingError;
            FileUploadError = fileUploadError;
            Default = @default;
        }

        /// <summary>
        /// A list of individual Task exit codes and how the Batch service should respond
        /// to them.
        /// </summary>
        public IList<ExitCodeMapping> ExitCodes { get; }
        /// <summary>
        /// A list of Task exit code ranges and how the Batch service should respond to
        /// them.
        /// </summary>
        public IList<ExitCodeRangeMapping> ExitCodeRanges { get; }
        /// <summary> Specifies how the Batch service responds to a particular exit condition. </summary>
        public ExitOptions PreProcessingError { get; set; }
        /// <summary>
        /// If the Task exited with an exit code that was specified via exitCodes or
        /// exitCodeRanges, and then encountered a file upload error, then the action
        /// specified by the exit code takes precedence.
        /// </summary>
        public ExitOptions FileUploadError { get; set; }
        /// <summary>
        /// This value is used if the Task exits with any nonzero exit code not listed in
        /// the exitCodes or exitCodeRanges collection, with a pre-processing error if the
        /// preProcessingError property is not present, or with a file upload error if the
        /// fileUploadError property is not present. If you want non-default behavior on
        /// exit code 0, you must list it explicitly using the exitCodes or exitCodeRanges
        /// collection.
        /// </summary>
        public ExitOptions Default { get; set; }
    }
}
