// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace BatchService.Models
{
    public readonly partial struct PoolLifetimeOption : IEquatable<PoolLifetimeOption>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="PoolLifetimeOption"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public PoolLifetimeOption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string JobScheduleValue = "jobschedule";
        private const string JobValue = "job";

        /// <summary> The Pool exists for the lifetime of the Job Schedule. The Batch Service creates the Pool when it creates the first Job on the schedule. You may apply this option only to Job Schedules, not to Jobs. </summary>
        public static PoolLifetimeOption JobSchedule { get; } = new PoolLifetimeOption(JobScheduleValue);
        /// <summary> The Pool exists for the lifetime of the Job to which it is dedicated. The Batch service creates the Pool when it creates the Job. If the &apos;job&apos; option is applied to a Job Schedule, the Batch service creates a new auto Pool for every Job created on the schedule. </summary>
        public static PoolLifetimeOption Job { get; } = new PoolLifetimeOption(JobValue);
        /// <summary> Determines if two <see cref="PoolLifetimeOption"/> values are the same. </summary>
        public static bool operator ==(PoolLifetimeOption left, PoolLifetimeOption right) => left.Equals(right);
        /// <summary> Determines if two <see cref="PoolLifetimeOption"/> values are not the same. </summary>
        public static bool operator !=(PoolLifetimeOption left, PoolLifetimeOption right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="PoolLifetimeOption"/>. </summary>
        public static implicit operator PoolLifetimeOption(string value) => new PoolLifetimeOption(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is PoolLifetimeOption other && Equals(other);
        /// <inheritdoc />
        public bool Equals(PoolLifetimeOption other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
