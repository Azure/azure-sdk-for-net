// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace BatchService.Models
{
    public readonly partial struct JobReleaseTaskState : IEquatable<JobReleaseTaskState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="JobReleaseTaskState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public JobReleaseTaskState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string RunningValue = "running";
        private const string CompletedValue = "completed";

        /// <summary> The Task is currently running (including retrying). </summary>
        public static JobReleaseTaskState Running { get; } = new JobReleaseTaskState(RunningValue);
        /// <summary> The Task has exited with exit code 0, or the Task has exhausted its retry limit, or the Batch service was unable to start the Task due to Task preparation errors (such as resource file download failures). </summary>
        public static JobReleaseTaskState Completed { get; } = new JobReleaseTaskState(CompletedValue);
        /// <summary> Determines if two <see cref="JobReleaseTaskState"/> values are the same. </summary>
        public static bool operator ==(JobReleaseTaskState left, JobReleaseTaskState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="JobReleaseTaskState"/> values are not the same. </summary>
        public static bool operator !=(JobReleaseTaskState left, JobReleaseTaskState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="JobReleaseTaskState"/>. </summary>
        public static implicit operator JobReleaseTaskState(string value) => new JobReleaseTaskState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is JobReleaseTaskState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(JobReleaseTaskState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
