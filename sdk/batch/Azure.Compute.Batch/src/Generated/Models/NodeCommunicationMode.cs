// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace BatchService.Models
{
    public readonly partial struct NodeCommunicationMode : IEquatable<NodeCommunicationMode>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="NodeCommunicationMode"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public NodeCommunicationMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string DefaultValue = "default";
        private const string ClassicValue = "classic";
        private const string SimplifiedValue = "simplified";

        /// <summary> The node communication mode is automatically set by the Batch service. </summary>
        public static NodeCommunicationMode Default { get; } = new NodeCommunicationMode(DefaultValue);
        /// <summary> Nodes using the classic communication mode require inbound TCP communication on ports 29876 and 29877 from the &quot;BatchNodeManagement.{region}&quot; service tag and outbound TCP communication on port 443 to the &quot;Storage.region&quot; and &quot;BatchNodeManagement.{region}&quot; service tags. </summary>
        public static NodeCommunicationMode Classic { get; } = new NodeCommunicationMode(ClassicValue);
        /// <summary> Nodes using the simplified communication mode require outbound TCP communication on port 443 to the &quot;BatchNodeManagement.{region}&quot; service tag. No open inbound ports are required. </summary>
        public static NodeCommunicationMode Simplified { get; } = new NodeCommunicationMode(SimplifiedValue);
        /// <summary> Determines if two <see cref="NodeCommunicationMode"/> values are the same. </summary>
        public static bool operator ==(NodeCommunicationMode left, NodeCommunicationMode right) => left.Equals(right);
        /// <summary> Determines if two <see cref="NodeCommunicationMode"/> values are not the same. </summary>
        public static bool operator !=(NodeCommunicationMode left, NodeCommunicationMode right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="NodeCommunicationMode"/>. </summary>
        public static implicit operator NodeCommunicationMode(string value) => new NodeCommunicationMode(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is NodeCommunicationMode other && Equals(other);
        /// <inheritdoc />
        public bool Equals(NodeCommunicationMode other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
