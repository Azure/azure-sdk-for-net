// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace BatchService.Models
{
    public readonly partial struct DisableJobOption : IEquatable<DisableJobOption>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DisableJobOption"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DisableJobOption(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string RequeueValue = "requeue";
        private const string TerminateValue = "terminate";
        private const string WaitValue = "wait";

        /// <summary> Terminate running Tasks and requeue them. The Tasks will run again when the Job is enabled. </summary>
        public static DisableJobOption Requeue { get; } = new DisableJobOption(RequeueValue);
        /// <summary> Terminate running Tasks. The Tasks will be completed with failureInfo indicating that they were terminated, and will not run again. </summary>
        public static DisableJobOption Terminate { get; } = new DisableJobOption(TerminateValue);
        /// <summary> Allow currently running Tasks to complete. </summary>
        public static DisableJobOption Wait { get; } = new DisableJobOption(WaitValue);
        /// <summary> Determines if two <see cref="DisableJobOption"/> values are the same. </summary>
        public static bool operator ==(DisableJobOption left, DisableJobOption right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DisableJobOption"/> values are not the same. </summary>
        public static bool operator !=(DisableJobOption left, DisableJobOption right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DisableJobOption"/>. </summary>
        public static implicit operator DisableJobOption(string value) => new DisableJobOption(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DisableJobOption other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DisableJobOption other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
