// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace BatchService.Models
{
    public readonly partial struct ComputeNodeFillType : IEquatable<ComputeNodeFillType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ComputeNodeFillType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ComputeNodeFillType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SpreadValue = "spread";
        private const string PackValue = "pack";

        /// <summary> Tasks should be assigned evenly across all Compute Nodes in the Pool. </summary>
        public static ComputeNodeFillType Spread { get; } = new ComputeNodeFillType(SpreadValue);
        /// <summary> As many Tasks as possible (taskSlotsPerNode) should be assigned to each Compute Node in the Pool before any Tasks are assigned to the next Compute Node in the Pool. </summary>
        public static ComputeNodeFillType Pack { get; } = new ComputeNodeFillType(PackValue);
        /// <summary> Determines if two <see cref="ComputeNodeFillType"/> values are the same. </summary>
        public static bool operator ==(ComputeNodeFillType left, ComputeNodeFillType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ComputeNodeFillType"/> values are not the same. </summary>
        public static bool operator !=(ComputeNodeFillType left, ComputeNodeFillType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ComputeNodeFillType"/>. </summary>
        public static implicit operator ComputeNodeFillType(string value) => new ComputeNodeFillType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ComputeNodeFillType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ComputeNodeFillType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
