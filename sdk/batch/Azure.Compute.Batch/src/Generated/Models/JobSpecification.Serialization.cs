// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace BatchService.Models
{
    public partial class JobSpecification : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Priority))
            {
                if (Priority != null)
                {
                    writer.WritePropertyName("priority"u8);
                    writer.WriteNumberValue(Priority.Value);
                }
                else
                {
                    writer.WriteNull("priority");
                }
            }
            if (Optional.IsDefined(AllowTaskPreemption))
            {
                if (AllowTaskPreemption != null)
                {
                    writer.WritePropertyName("allowTaskPreemption"u8);
                    writer.WriteBooleanValue(AllowTaskPreemption.Value);
                }
                else
                {
                    writer.WriteNull("allowTaskPreemption");
                }
            }
            if (Optional.IsDefined(MaxParallelTasks))
            {
                if (MaxParallelTasks != null)
                {
                    writer.WritePropertyName("maxParallelTasks"u8);
                    writer.WriteNumberValue(MaxParallelTasks.Value);
                }
                else
                {
                    writer.WriteNull("maxParallelTasks");
                }
            }
            if (Optional.IsDefined(DisplayName))
            {
                writer.WritePropertyName("displayName"u8);
                writer.WriteStringValue(DisplayName);
            }
            if (Optional.IsDefined(UsesTaskDependencies))
            {
                if (UsesTaskDependencies != null)
                {
                    writer.WritePropertyName("usesTaskDependencies"u8);
                    writer.WriteBooleanValue(UsesTaskDependencies.Value);
                }
                else
                {
                    writer.WriteNull("usesTaskDependencies");
                }
            }
            if (Optional.IsDefined(OnAllTasksComplete))
            {
                if (OnAllTasksComplete != null)
                {
                    writer.WritePropertyName("onAllTasksComplete"u8);
                    writer.WriteStringValue(OnAllTasksComplete.Value.ToString());
                }
                else
                {
                    writer.WriteNull("onAllTasksComplete");
                }
            }
            if (Optional.IsDefined(OnTaskFailure))
            {
                if (OnTaskFailure != null)
                {
                    writer.WritePropertyName("onTaskFailure"u8);
                    writer.WriteStringValue(OnTaskFailure.Value.ToString());
                }
                else
                {
                    writer.WriteNull("onTaskFailure");
                }
            }
            if (Optional.IsDefined(NetworkConfiguration))
            {
                writer.WritePropertyName("networkConfiguration"u8);
                writer.WriteObjectValue(NetworkConfiguration);
            }
            if (Optional.IsDefined(Constraints))
            {
                writer.WritePropertyName("constraints"u8);
                writer.WriteObjectValue(Constraints);
            }
            if (Optional.IsDefined(JobManagerTask))
            {
                writer.WritePropertyName("jobManagerTask"u8);
                writer.WriteObjectValue(JobManagerTask);
            }
            if (Optional.IsDefined(JobPreparationTask))
            {
                writer.WritePropertyName("jobPreparationTask"u8);
                writer.WriteObjectValue(JobPreparationTask);
            }
            if (Optional.IsDefined(JobReleaseTask))
            {
                writer.WritePropertyName("jobReleaseTask"u8);
                writer.WriteObjectValue(JobReleaseTask);
            }
            if (Optional.IsCollectionDefined(CommonEnvironmentSettings))
            {
                writer.WritePropertyName("commonEnvironmentSettings"u8);
                writer.WriteStartArray();
                foreach (var item in CommonEnvironmentSettings)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WritePropertyName("poolInfo"u8);
            writer.WriteObjectValue(PoolInfo);
            if (Optional.IsCollectionDefined(Metadata))
            {
                writer.WritePropertyName("metadata"u8);
                writer.WriteStartArray();
                foreach (var item in Metadata)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static JobSpecification DeserializeJobSpecification(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<int?> priority = default;
            Optional<bool?> allowTaskPreemption = default;
            Optional<int?> maxParallelTasks = default;
            Optional<string> displayName = default;
            Optional<bool?> usesTaskDependencies = default;
            Optional<OnAllTasksComplete?> onAllTasksComplete = default;
            Optional<OnTaskFailure?> onTaskFailure = default;
            Optional<JobNetworkConfiguration> networkConfiguration = default;
            Optional<JobConstraints> constraints = default;
            Optional<JobManagerTask> jobManagerTask = default;
            Optional<JobPreparationTask> jobPreparationTask = default;
            Optional<JobReleaseTask> jobReleaseTask = default;
            Optional<IList<EnvironmentSetting>> commonEnvironmentSettings = default;
            PoolInformation poolInfo = default;
            Optional<IList<MetadataItem>> metadata = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("priority"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        priority = null;
                        continue;
                    }
                    priority = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("allowTaskPreemption"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        allowTaskPreemption = null;
                        continue;
                    }
                    allowTaskPreemption = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("maxParallelTasks"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        maxParallelTasks = null;
                        continue;
                    }
                    maxParallelTasks = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("displayName"u8))
                {
                    displayName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("usesTaskDependencies"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        usesTaskDependencies = null;
                        continue;
                    }
                    usesTaskDependencies = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("onAllTasksComplete"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        onAllTasksComplete = null;
                        continue;
                    }
                    onAllTasksComplete = new OnAllTasksComplete(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("onTaskFailure"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        onTaskFailure = null;
                        continue;
                    }
                    onTaskFailure = new OnTaskFailure(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("networkConfiguration"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    networkConfiguration = JobNetworkConfiguration.DeserializeJobNetworkConfiguration(property.Value);
                    continue;
                }
                if (property.NameEquals("constraints"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    constraints = JobConstraints.DeserializeJobConstraints(property.Value);
                    continue;
                }
                if (property.NameEquals("jobManagerTask"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    jobManagerTask = JobManagerTask.DeserializeJobManagerTask(property.Value);
                    continue;
                }
                if (property.NameEquals("jobPreparationTask"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    jobPreparationTask = JobPreparationTask.DeserializeJobPreparationTask(property.Value);
                    continue;
                }
                if (property.NameEquals("jobReleaseTask"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    jobReleaseTask = JobReleaseTask.DeserializeJobReleaseTask(property.Value);
                    continue;
                }
                if (property.NameEquals("commonEnvironmentSettings"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<EnvironmentSetting> array = new List<EnvironmentSetting>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(EnvironmentSetting.DeserializeEnvironmentSetting(item));
                    }
                    commonEnvironmentSettings = array;
                    continue;
                }
                if (property.NameEquals("poolInfo"u8))
                {
                    poolInfo = PoolInformation.DeserializePoolInformation(property.Value);
                    continue;
                }
                if (property.NameEquals("metadata"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<MetadataItem> array = new List<MetadataItem>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MetadataItem.DeserializeMetadataItem(item));
                    }
                    metadata = array;
                    continue;
                }
            }
            return new JobSpecification(Optional.ToNullable(priority), Optional.ToNullable(allowTaskPreemption), Optional.ToNullable(maxParallelTasks), displayName, Optional.ToNullable(usesTaskDependencies), Optional.ToNullable(onAllTasksComplete), Optional.ToNullable(onTaskFailure), networkConfiguration, constraints, jobManagerTask, jobPreparationTask, jobReleaseTask, Optional.ToList(commonEnvironmentSettings), poolInfo, Optional.ToList(metadata));
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static JobSpecification FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeJobSpecification(document.RootElement);
        }

        /// <summary> Convert into a Utf8JsonRequestContent. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }
    }
}
