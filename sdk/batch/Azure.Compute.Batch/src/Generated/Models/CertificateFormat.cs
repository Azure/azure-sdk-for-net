// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace BatchService.Models
{
    public readonly partial struct CertificateFormat : IEquatable<CertificateFormat>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="CertificateFormat"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public CertificateFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string PfxValue = "pfx";
        private const string CerValue = "cer";

        /// <summary> The Certificate is a PFX (PKCS#12) formatted Certificate or Certificate chain. </summary>
        public static CertificateFormat Pfx { get; } = new CertificateFormat(PfxValue);
        /// <summary> The Certificate is a base64-encoded X.509 Certificate. </summary>
        public static CertificateFormat Cer { get; } = new CertificateFormat(CerValue);
        /// <summary> Determines if two <see cref="CertificateFormat"/> values are the same. </summary>
        public static bool operator ==(CertificateFormat left, CertificateFormat right) => left.Equals(right);
        /// <summary> Determines if two <see cref="CertificateFormat"/> values are not the same. </summary>
        public static bool operator !=(CertificateFormat left, CertificateFormat right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="CertificateFormat"/>. </summary>
        public static implicit operator CertificateFormat(string value) => new CertificateFormat(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is CertificateFormat other && Equals(other);
        /// <inheritdoc />
        public bool Equals(CertificateFormat other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
