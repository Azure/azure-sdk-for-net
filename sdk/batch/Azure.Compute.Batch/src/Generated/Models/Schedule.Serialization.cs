// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace BatchService.Models
{
    public partial class Schedule : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(DoNotRunUntil))
            {
                if (DoNotRunUntil != null)
                {
                    writer.WritePropertyName("doNotRunUntil"u8);
                    writer.WriteStringValue(DoNotRunUntil.Value, "O");
                }
                else
                {
                    writer.WriteNull("doNotRunUntil");
                }
            }
            if (Optional.IsDefined(DoNotRunAfter))
            {
                if (DoNotRunAfter != null)
                {
                    writer.WritePropertyName("doNotRunAfter"u8);
                    writer.WriteStringValue(DoNotRunAfter.Value, "O");
                }
                else
                {
                    writer.WriteNull("doNotRunAfter");
                }
            }
            if (Optional.IsDefined(StartWindow))
            {
                if (StartWindow != null)
                {
                    writer.WritePropertyName("startWindow"u8);
                    writer.WriteStringValue(StartWindow.Value, "P");
                }
                else
                {
                    writer.WriteNull("startWindow");
                }
            }
            if (Optional.IsDefined(RecurrenceInterval))
            {
                if (RecurrenceInterval != null)
                {
                    writer.WritePropertyName("recurrenceInterval"u8);
                    writer.WriteStringValue(RecurrenceInterval.Value, "P");
                }
                else
                {
                    writer.WriteNull("recurrenceInterval");
                }
            }
            writer.WriteEndObject();
        }

        internal static Schedule DeserializeSchedule(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<DateTimeOffset?> doNotRunUntil = default;
            Optional<DateTimeOffset?> doNotRunAfter = default;
            Optional<TimeSpan?> startWindow = default;
            Optional<TimeSpan?> recurrenceInterval = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("doNotRunUntil"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        doNotRunUntil = null;
                        continue;
                    }
                    doNotRunUntil = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("doNotRunAfter"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        doNotRunAfter = null;
                        continue;
                    }
                    doNotRunAfter = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("startWindow"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        startWindow = null;
                        continue;
                    }
                    startWindow = property.Value.GetTimeSpan("P");
                    continue;
                }
                if (property.NameEquals("recurrenceInterval"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        recurrenceInterval = null;
                        continue;
                    }
                    recurrenceInterval = property.Value.GetTimeSpan("P");
                    continue;
                }
            }
            return new Schedule(Optional.ToNullable(doNotRunUntil), Optional.ToNullable(doNotRunAfter), Optional.ToNullable(startWindow), Optional.ToNullable(recurrenceInterval));
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static Schedule FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeSchedule(document.RootElement);
        }

        /// <summary> Convert into a Utf8JsonRequestContent. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }
    }
}
