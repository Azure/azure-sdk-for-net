// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure;
using Azure.Core;

namespace BatchService.Models
{
    public partial class AutoPoolSpecification : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(AutoPoolIdPrefix))
            {
                writer.WritePropertyName("autoPoolIdPrefix"u8);
                writer.WriteStringValue(AutoPoolIdPrefix);
            }
            writer.WritePropertyName("poolLifetimeOption"u8);
            writer.WriteStringValue(PoolLifetimeOption.ToString());
            if (Optional.IsDefined(KeepAlive))
            {
                if (KeepAlive != null)
                {
                    writer.WritePropertyName("keepAlive"u8);
                    writer.WriteBooleanValue(KeepAlive.Value);
                }
                else
                {
                    writer.WriteNull("keepAlive");
                }
            }
            if (Optional.IsDefined(Pool))
            {
                writer.WritePropertyName("pool"u8);
                writer.WriteObjectValue(Pool);
            }
            writer.WriteEndObject();
        }

        internal static AutoPoolSpecification DeserializeAutoPoolSpecification(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> autoPoolIdPrefix = default;
            PoolLifetimeOption poolLifetimeOption = default;
            Optional<bool?> keepAlive = default;
            Optional<PoolSpecification> pool = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("autoPoolIdPrefix"u8))
                {
                    autoPoolIdPrefix = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("poolLifetimeOption"u8))
                {
                    poolLifetimeOption = new PoolLifetimeOption(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("keepAlive"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        keepAlive = null;
                        continue;
                    }
                    keepAlive = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("pool"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    pool = PoolSpecification.DeserializePoolSpecification(property.Value);
                    continue;
                }
            }
            return new AutoPoolSpecification(autoPoolIdPrefix, poolLifetimeOption, Optional.ToNullable(keepAlive), pool);
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static AutoPoolSpecification FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeAutoPoolSpecification(document.RootElement);
        }

        /// <summary> Convert into a Utf8JsonRequestContent. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }
    }
}
