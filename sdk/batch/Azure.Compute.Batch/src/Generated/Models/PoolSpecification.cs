// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace BatchService.Models
{
    /// <summary> Specification for creating a new Pool. </summary>
    public partial class PoolSpecification
    {
        /// <summary> Initializes a new instance of PoolSpecification. </summary>
        /// <param name="vmSize">
        /// For information about available sizes of virtual machines in Pools, see Choose
        /// a VM size for Compute Nodes in an Azure Batch Pool
        /// (https://docs.microsoft.com/azure/batch/batch-pool-vm-sizes).
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="vmSize"/> is null. </exception>
        public PoolSpecification(string vmSize)
        {
            Argument.AssertNotNull(vmSize, nameof(vmSize));

            VmSize = vmSize;
            CertificateReferences = new ChangeTrackingList<CertificateReference>();
            ApplicationPackageReferences = new ChangeTrackingList<ApplicationPackageReference>();
            ApplicationLicenses = new ChangeTrackingList<string>();
            UserAccounts = new ChangeTrackingList<UserAccount>();
            Metadata = new ChangeTrackingList<MetadataItem>();
            MountConfiguration = new ChangeTrackingList<MountConfiguration>();
        }

        /// <summary> Initializes a new instance of PoolSpecification. </summary>
        /// <param name="displayName">
        /// The display name need not be unique and can contain any Unicode characters up
        /// to a maximum length of 1024.
        /// </param>
        /// <param name="vmSize">
        /// For information about available sizes of virtual machines in Pools, see Choose
        /// a VM size for Compute Nodes in an Azure Batch Pool
        /// (https://docs.microsoft.com/azure/batch/batch-pool-vm-sizes).
        /// </param>
        /// <param name="cloudServiceConfiguration">
        /// This property must be specified if the Pool needs to be created with Azure PaaS
        /// VMs. This property and virtualMachineConfiguration are mutually exclusive and
        /// one of the properties must be specified. If neither is specified then the Batch
        /// service returns an error; if you are calling the REST API directly, the HTTP
        /// status code is 400 (Bad Request). This property cannot be specified if the
        /// Batch Account was created with its poolAllocationMode property set to
        /// 'UserSubscription'.
        /// </param>
        /// <param name="virtualMachineConfiguration">
        /// This property must be specified if the Pool needs to be created with Azure IaaS
        /// VMs. This property and cloudServiceConfiguration are mutually exclusive and one
        /// of the properties must be specified. If neither is specified then the Batch
        /// service returns an error; if you are calling the REST API directly, the HTTP
        /// status code is 400 (Bad Request).
        /// </param>
        /// <param name="taskSlotsPerNode">
        /// The default value is 1. The maximum value is the smaller of 4 times the number
        /// of cores of the vmSize of the pool or 256.
        /// </param>
        /// <param name="taskSchedulingPolicy"> If not specified, the default is spread. </param>
        /// <param name="resizeTimeout">
        /// This timeout applies only to manual scaling; it has no effect when
        /// enableAutoScale is set to true. The default value is 15 minutes. The minimum
        /// value is 5 minutes. If you specify a value less than 5 minutes, the Batch
        /// service rejects the request with an error; if you are calling the REST API
        /// directly, the HTTP status code is 400 (Bad Request).
        /// </param>
        /// <param name="targetDedicatedNodes">
        /// This property must not be specified if enableAutoScale is set to true. If
        /// enableAutoScale is set to false, then you must set either targetDedicatedNodes,
        /// targetLowPriorityNodes, or both.
        /// </param>
        /// <param name="targetLowPriorityNodes">
        /// This property must not be specified if enableAutoScale is set to true. If
        /// enableAutoScale is set to false, then you must set either targetDedicatedNodes,
        /// targetLowPriorityNodes, or both.
        /// </param>
        /// <param name="enableAutoScale">
        /// If false, at least one of targetDedicatedNodes and targetLowPriorityNodes must
        /// be specified. If true, the autoScaleFormula element is required. The Pool
        /// automatically resizes according to the formula. The default value is false.
        /// </param>
        /// <param name="autoScaleFormula">
        /// This property must not be specified if enableAutoScale is set to false. It is
        /// required if enableAutoScale is set to true. The formula is checked for validity
        /// before the Pool is created. If the formula is not valid, the Batch service
        /// rejects the request with detailed error information.
        /// </param>
        /// <param name="autoScaleEvaluationInterval">
        /// The default value is 15 minutes. The minimum and maximum value are 5 minutes
        /// and 168 hours respectively. If you specify a value less than 5 minutes or
        /// greater than 168 hours, the Batch service rejects the request with an invalid
        /// property value error; if you are calling the REST API directly, the HTTP status
        /// code is 400 (Bad Request).
        /// </param>
        /// <param name="enableInterNodeCommunication">
        /// Enabling inter-node communication limits the maximum size of the Pool due to
        /// deployment restrictions on the Compute Nodes of the Pool. This may result in
        /// the Pool not reaching its desired size. The default value is false.
        /// </param>
        /// <param name="networkConfiguration"> The network configuration for a Pool. </param>
        /// <param name="startTask">
        /// Batch will retry Tasks when a recovery operation is triggered on a Node.
        /// Examples of recovery operations include (but are not limited to) when an
        /// unhealthy Node is rebooted or a Compute Node disappeared due to host failure.
        /// Retries due to recovery operations are independent of and are not counted
        /// against the maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal
        /// retry due to a recovery operation may occur. Because of this, all Tasks should
        /// be idempotent. This means Tasks need to tolerate being interrupted and
        /// restarted without causing any corruption or duplicate data. The best practice
        /// for long running Tasks is to use some form of checkpointing. In some cases the
        /// StartTask may be re-run even though the Compute Node was not rebooted. Special
        /// care should be taken to avoid StartTasks which create breakaway process or
        /// install/launch services from the StartTask working directory, as this will
        /// block Batch from being able to re-run the StartTask.
        /// </param>
        /// <param name="certificateReferences">
        /// For Windows Nodes, the Batch service installs the Certificates to the specified
        /// Certificate store and location. For Linux Compute Nodes, the Certificates are
        /// stored in a directory inside the Task working directory and an environment
        /// variable AZ_BATCH_CERTIFICATES_DIR is supplied to the Task to query for this
        /// location. For Certificates with visibility of 'remoteUser', a 'certs' directory
        /// is created in the user's home directory (e.g., /home/{user-name}/certs) and
        /// Certificates are placed in that directory.
        /// </param>
        /// <param name="applicationPackageReferences">
        /// When creating a pool, the package's application ID must be fully qualified
        /// (/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/applications/{applicationName}).
        /// Changes to Package references affect all new Nodes joining the Pool, but do not
        /// affect Compute Nodes that are already in the Pool until they are rebooted or
        /// reimaged. There is a maximum of 10 Package references on any given Pool.
        /// </param>
        /// <param name="applicationLicenses">
        /// The list of application licenses must be a subset of available Batch service
        /// application licenses. If a license is requested which is not supported, Pool
        /// creation will fail. The permitted licenses available on the Pool are 'maya',
        /// 'vray', '3dsmax', 'arnold'. An additional charge applies for each application
        /// license added to the Pool.
        /// </param>
        /// <param name="userAccounts"> The list of user Accounts to be created on each Compute Node in the Pool. </param>
        /// <param name="metadata">
        /// The Batch service does not assign any meaning to metadata; it is solely for the
        /// use of user code.
        /// </param>
        /// <param name="mountConfiguration"> This supports Azure Files, NFS, CIFS/SMB, and Blobfuse. </param>
        /// <param name="targetNodeCommunicationMode"> If omitted, the default value is Default. </param>
        internal PoolSpecification(string displayName, string vmSize, CloudServiceConfiguration cloudServiceConfiguration, VirtualMachineConfiguration virtualMachineConfiguration, int? taskSlotsPerNode, TaskSchedulingPolicy taskSchedulingPolicy, TimeSpan? resizeTimeout, int? targetDedicatedNodes, int? targetLowPriorityNodes, bool? enableAutoScale, string autoScaleFormula, TimeSpan? autoScaleEvaluationInterval, bool? enableInterNodeCommunication, NetworkConfiguration networkConfiguration, StartTask startTask, IList<CertificateReference> certificateReferences, IList<ApplicationPackageReference> applicationPackageReferences, IList<string> applicationLicenses, IList<UserAccount> userAccounts, IList<MetadataItem> metadata, IList<MountConfiguration> mountConfiguration, NodeCommunicationMode? targetNodeCommunicationMode)
        {
            DisplayName = displayName;
            VmSize = vmSize;
            CloudServiceConfiguration = cloudServiceConfiguration;
            VirtualMachineConfiguration = virtualMachineConfiguration;
            TaskSlotsPerNode = taskSlotsPerNode;
            TaskSchedulingPolicy = taskSchedulingPolicy;
            ResizeTimeout = resizeTimeout;
            TargetDedicatedNodes = targetDedicatedNodes;
            TargetLowPriorityNodes = targetLowPriorityNodes;
            EnableAutoScale = enableAutoScale;
            AutoScaleFormula = autoScaleFormula;
            AutoScaleEvaluationInterval = autoScaleEvaluationInterval;
            EnableInterNodeCommunication = enableInterNodeCommunication;
            NetworkConfiguration = networkConfiguration;
            StartTask = startTask;
            CertificateReferences = certificateReferences.ToList();
            ApplicationPackageReferences = applicationPackageReferences.ToList();
            ApplicationLicenses = applicationLicenses.ToList();
            UserAccounts = userAccounts.ToList();
            Metadata = metadata.ToList();
            MountConfiguration = mountConfiguration.ToList();
            TargetNodeCommunicationMode = targetNodeCommunicationMode;
        }

        /// <summary>
        /// The display name need not be unique and can contain any Unicode characters up
        /// to a maximum length of 1024.
        /// </summary>
        public string DisplayName { get; set; }
        /// <summary>
        /// For information about available sizes of virtual machines in Pools, see Choose
        /// a VM size for Compute Nodes in an Azure Batch Pool
        /// (https://docs.microsoft.com/azure/batch/batch-pool-vm-sizes).
        /// </summary>
        public string VmSize { get; set; }
        /// <summary>
        /// This property must be specified if the Pool needs to be created with Azure PaaS
        /// VMs. This property and virtualMachineConfiguration are mutually exclusive and
        /// one of the properties must be specified. If neither is specified then the Batch
        /// service returns an error; if you are calling the REST API directly, the HTTP
        /// status code is 400 (Bad Request). This property cannot be specified if the
        /// Batch Account was created with its poolAllocationMode property set to
        /// 'UserSubscription'.
        /// </summary>
        public CloudServiceConfiguration CloudServiceConfiguration { get; set; }
        /// <summary>
        /// This property must be specified if the Pool needs to be created with Azure IaaS
        /// VMs. This property and cloudServiceConfiguration are mutually exclusive and one
        /// of the properties must be specified. If neither is specified then the Batch
        /// service returns an error; if you are calling the REST API directly, the HTTP
        /// status code is 400 (Bad Request).
        /// </summary>
        public VirtualMachineConfiguration VirtualMachineConfiguration { get; set; }
        /// <summary>
        /// The default value is 1. The maximum value is the smaller of 4 times the number
        /// of cores of the vmSize of the pool or 256.
        /// </summary>
        public int? TaskSlotsPerNode { get; set; }
        /// <summary> If not specified, the default is spread. </summary>
        public TaskSchedulingPolicy TaskSchedulingPolicy { get; set; }
        /// <summary>
        /// This timeout applies only to manual scaling; it has no effect when
        /// enableAutoScale is set to true. The default value is 15 minutes. The minimum
        /// value is 5 minutes. If you specify a value less than 5 minutes, the Batch
        /// service rejects the request with an error; if you are calling the REST API
        /// directly, the HTTP status code is 400 (Bad Request).
        /// </summary>
        public TimeSpan? ResizeTimeout { get; set; }
        /// <summary>
        /// This property must not be specified if enableAutoScale is set to true. If
        /// enableAutoScale is set to false, then you must set either targetDedicatedNodes,
        /// targetLowPriorityNodes, or both.
        /// </summary>
        public int? TargetDedicatedNodes { get; set; }
        /// <summary>
        /// This property must not be specified if enableAutoScale is set to true. If
        /// enableAutoScale is set to false, then you must set either targetDedicatedNodes,
        /// targetLowPriorityNodes, or both.
        /// </summary>
        public int? TargetLowPriorityNodes { get; set; }
        /// <summary>
        /// If false, at least one of targetDedicatedNodes and targetLowPriorityNodes must
        /// be specified. If true, the autoScaleFormula element is required. The Pool
        /// automatically resizes according to the formula. The default value is false.
        /// </summary>
        public bool? EnableAutoScale { get; set; }
        /// <summary>
        /// This property must not be specified if enableAutoScale is set to false. It is
        /// required if enableAutoScale is set to true. The formula is checked for validity
        /// before the Pool is created. If the formula is not valid, the Batch service
        /// rejects the request with detailed error information.
        /// </summary>
        public string AutoScaleFormula { get; set; }
        /// <summary>
        /// The default value is 15 minutes. The minimum and maximum value are 5 minutes
        /// and 168 hours respectively. If you specify a value less than 5 minutes or
        /// greater than 168 hours, the Batch service rejects the request with an invalid
        /// property value error; if you are calling the REST API directly, the HTTP status
        /// code is 400 (Bad Request).
        /// </summary>
        public TimeSpan? AutoScaleEvaluationInterval { get; set; }
        /// <summary>
        /// Enabling inter-node communication limits the maximum size of the Pool due to
        /// deployment restrictions on the Compute Nodes of the Pool. This may result in
        /// the Pool not reaching its desired size. The default value is false.
        /// </summary>
        public bool? EnableInterNodeCommunication { get; set; }
        /// <summary> The network configuration for a Pool. </summary>
        public NetworkConfiguration NetworkConfiguration { get; set; }
        /// <summary>
        /// Batch will retry Tasks when a recovery operation is triggered on a Node.
        /// Examples of recovery operations include (but are not limited to) when an
        /// unhealthy Node is rebooted or a Compute Node disappeared due to host failure.
        /// Retries due to recovery operations are independent of and are not counted
        /// against the maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal
        /// retry due to a recovery operation may occur. Because of this, all Tasks should
        /// be idempotent. This means Tasks need to tolerate being interrupted and
        /// restarted without causing any corruption or duplicate data. The best practice
        /// for long running Tasks is to use some form of checkpointing. In some cases the
        /// StartTask may be re-run even though the Compute Node was not rebooted. Special
        /// care should be taken to avoid StartTasks which create breakaway process or
        /// install/launch services from the StartTask working directory, as this will
        /// block Batch from being able to re-run the StartTask.
        /// </summary>
        public StartTask StartTask { get; set; }
        /// <summary>
        /// For Windows Nodes, the Batch service installs the Certificates to the specified
        /// Certificate store and location. For Linux Compute Nodes, the Certificates are
        /// stored in a directory inside the Task working directory and an environment
        /// variable AZ_BATCH_CERTIFICATES_DIR is supplied to the Task to query for this
        /// location. For Certificates with visibility of 'remoteUser', a 'certs' directory
        /// is created in the user's home directory (e.g., /home/{user-name}/certs) and
        /// Certificates are placed in that directory.
        /// </summary>
        public IList<CertificateReference> CertificateReferences { get; }
        /// <summary>
        /// When creating a pool, the package's application ID must be fully qualified
        /// (/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Batch/batchAccounts/{accountName}/applications/{applicationName}).
        /// Changes to Package references affect all new Nodes joining the Pool, but do not
        /// affect Compute Nodes that are already in the Pool until they are rebooted or
        /// reimaged. There is a maximum of 10 Package references on any given Pool.
        /// </summary>
        public IList<ApplicationPackageReference> ApplicationPackageReferences { get; }
        /// <summary>
        /// The list of application licenses must be a subset of available Batch service
        /// application licenses. If a license is requested which is not supported, Pool
        /// creation will fail. The permitted licenses available on the Pool are 'maya',
        /// 'vray', '3dsmax', 'arnold'. An additional charge applies for each application
        /// license added to the Pool.
        /// </summary>
        public IList<string> ApplicationLicenses { get; }
        /// <summary> The list of user Accounts to be created on each Compute Node in the Pool. </summary>
        public IList<UserAccount> UserAccounts { get; }
        /// <summary>
        /// The Batch service does not assign any meaning to metadata; it is solely for the
        /// use of user code.
        /// </summary>
        public IList<MetadataItem> Metadata { get; }
        /// <summary> This supports Azure Files, NFS, CIFS/SMB, and Blobfuse. </summary>
        public IList<MountConfiguration> MountConfiguration { get; }
        /// <summary> If omitted, the default value is Default. </summary>
        public NodeCommunicationMode? TargetNodeCommunicationMode { get; set; }
    }
}
