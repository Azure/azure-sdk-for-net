// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace BatchService.Models
{
    public readonly partial struct NodePlacementPolicyType : IEquatable<NodePlacementPolicyType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="NodePlacementPolicyType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public NodePlacementPolicyType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string RegionalValue = "regional";
        private const string ZonalValue = "zonal";

        /// <summary> All nodes in the pool will be allocated in the same region. </summary>
        public static NodePlacementPolicyType Regional { get; } = new NodePlacementPolicyType(RegionalValue);
        /// <summary> Nodes in the pool will be spread across different availability zones with best effort balancing. </summary>
        public static NodePlacementPolicyType Zonal { get; } = new NodePlacementPolicyType(ZonalValue);
        /// <summary> Determines if two <see cref="NodePlacementPolicyType"/> values are the same. </summary>
        public static bool operator ==(NodePlacementPolicyType left, NodePlacementPolicyType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="NodePlacementPolicyType"/> values are not the same. </summary>
        public static bool operator !=(NodePlacementPolicyType left, NodePlacementPolicyType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="NodePlacementPolicyType"/>. </summary>
        public static implicit operator NodePlacementPolicyType(string value) => new NodePlacementPolicyType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is NodePlacementPolicyType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(NodePlacementPolicyType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
