// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace BatchService.Models
{
    public partial class JobScheduleStatistics : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("url"u8);
            writer.WriteStringValue(Url);
            writer.WritePropertyName("startTime"u8);
            writer.WriteStringValue(StartTime, "O");
            writer.WritePropertyName("lastUpdateTime"u8);
            writer.WriteStringValue(LastUpdateTime, "O");
            writer.WritePropertyName("userCPUTime"u8);
            writer.WriteStringValue(UserCPUTime, "P");
            writer.WritePropertyName("kernelCPUTime"u8);
            writer.WriteStringValue(KernelCPUTime, "P");
            writer.WritePropertyName("wallClockTime"u8);
            writer.WriteStringValue(WallClockTime, "P");
            writer.WritePropertyName("readIOps"u8);
            writer.WriteNumberValue(ReadIOps);
            writer.WritePropertyName("writeIOps"u8);
            writer.WriteNumberValue(WriteIOps);
            writer.WritePropertyName("readIOGiB"u8);
            writer.WriteNumberValue(ReadIOGiB);
            writer.WritePropertyName("writeIOGiB"u8);
            writer.WriteNumberValue(WriteIOGiB);
            writer.WritePropertyName("numSucceededTasks"u8);
            writer.WriteNumberValue(NumSucceededTasks);
            writer.WritePropertyName("numFailedTasks"u8);
            writer.WriteNumberValue(NumFailedTasks);
            writer.WritePropertyName("numTaskRetries"u8);
            writer.WriteNumberValue(NumTaskRetries);
            writer.WritePropertyName("waitTime"u8);
            writer.WriteStringValue(WaitTime, "P");
            writer.WriteEndObject();
        }

        internal static JobScheduleStatistics DeserializeJobScheduleStatistics(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string url = default;
            DateTimeOffset startTime = default;
            DateTimeOffset lastUpdateTime = default;
            TimeSpan userCPUTime = default;
            TimeSpan kernelCPUTime = default;
            TimeSpan wallClockTime = default;
            int readIOps = default;
            int writeIOps = default;
            float readIOGiB = default;
            float writeIOGiB = default;
            int numSucceededTasks = default;
            int numFailedTasks = default;
            int numTaskRetries = default;
            TimeSpan waitTime = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("url"u8))
                {
                    url = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("startTime"u8))
                {
                    startTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("lastUpdateTime"u8))
                {
                    lastUpdateTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("userCPUTime"u8))
                {
                    userCPUTime = property.Value.GetTimeSpan("P");
                    continue;
                }
                if (property.NameEquals("kernelCPUTime"u8))
                {
                    kernelCPUTime = property.Value.GetTimeSpan("P");
                    continue;
                }
                if (property.NameEquals("wallClockTime"u8))
                {
                    wallClockTime = property.Value.GetTimeSpan("P");
                    continue;
                }
                if (property.NameEquals("readIOps"u8))
                {
                    readIOps = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("writeIOps"u8))
                {
                    writeIOps = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("readIOGiB"u8))
                {
                    readIOGiB = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("writeIOGiB"u8))
                {
                    writeIOGiB = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("numSucceededTasks"u8))
                {
                    numSucceededTasks = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("numFailedTasks"u8))
                {
                    numFailedTasks = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("numTaskRetries"u8))
                {
                    numTaskRetries = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("waitTime"u8))
                {
                    waitTime = property.Value.GetTimeSpan("P");
                    continue;
                }
            }
            return new JobScheduleStatistics(url, startTime, lastUpdateTime, userCPUTime, kernelCPUTime, wallClockTime, readIOps, writeIOps, readIOGiB, writeIOGiB, numSucceededTasks, numFailedTasks, numTaskRetries, waitTime);
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static JobScheduleStatistics FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeJobScheduleStatistics(document.RootElement);
        }

        /// <summary> Convert into a Utf8JsonRequestContent. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }
    }
}
