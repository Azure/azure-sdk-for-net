// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace BatchService.Models
{
    /// <summary>
    /// The Job Release Task runs when the Job ends, because of one of the following:
    /// The user calls the Terminate Job API, or the Delete Job API while the Job is
    /// still active, the Job's maximum wall clock time constraint is reached, and the
    /// Job is still active, or the Job's Job Manager Task completed, and the Job is
    /// configured to terminate when the Job Manager completes. The Job Release Task
    /// runs on each Node where Tasks of the Job have run and the Job Preparation Task
    /// ran and completed. If you reimage a Node after it has run the Job Preparation
    /// Task, and the Job ends without any further Tasks of the Job running on that
    /// Node (and hence the Job Preparation Task does not re-run), then the Job Release
    /// Task does not run on that Compute Node. If a Node reboots while the Job Release
    /// Task is still running, the Job Release Task runs again when the Compute Node
    /// starts up. The Job is not marked as complete until all Job Release Tasks have
    /// completed. The Job Release Task runs in the background. It does not occupy a
    /// scheduling slot; that is, it does not count towards the taskSlotsPerNode limit
    /// specified on the Pool.
    /// </summary>
    public partial class JobReleaseTask
    {
        /// <summary> Initializes a new instance of JobReleaseTask. </summary>
        /// <param name="commandLine">
        /// The command line does not run under a shell, and therefore cannot take
        /// advantage of shell features such as environment variable expansion. If you want
        /// to take advantage of such features, you should invoke the shell in the command
        /// line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c
        /// MyCommand" in Linux. If the command line refers to file paths, it should use a
        /// relative path (relative to the Task working directory), or use the Batch
        /// provided environment variable
        /// (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables).
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="commandLine"/> is null. </exception>
        public JobReleaseTask(string commandLine)
        {
            Argument.AssertNotNull(commandLine, nameof(commandLine));

            CommandLine = commandLine;
            ResourceFiles = new ChangeTrackingList<ResourceFile>();
            EnvironmentSettings = new ChangeTrackingList<EnvironmentSetting>();
        }

        /// <summary> Initializes a new instance of JobReleaseTask. </summary>
        /// <param name="id">
        /// The ID can contain any combination of alphanumeric characters including hyphens
        /// and underscores and cannot contain more than 64 characters. If you do not
        /// specify this property, the Batch service assigns a default value of
        /// 'jobrelease'. No other Task in the Job can have the same ID as the Job Release
        /// Task. If you try to submit a Task with the same id, the Batch service rejects
        /// the request with error code TaskIdSameAsJobReleaseTask; if you are calling the
        /// REST API directly, the HTTP status code is 409 (Conflict).
        /// </param>
        /// <param name="commandLine">
        /// The command line does not run under a shell, and therefore cannot take
        /// advantage of shell features such as environment variable expansion. If you want
        /// to take advantage of such features, you should invoke the shell in the command
        /// line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c
        /// MyCommand" in Linux. If the command line refers to file paths, it should use a
        /// relative path (relative to the Task working directory), or use the Batch
        /// provided environment variable
        /// (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables).
        /// </param>
        /// <param name="containerSettings">
        /// When this is specified, all directories recursively below the
        /// AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are
        /// mapped into the container, all Task environment variables are mapped into the
        /// container, and the Task command line is executed in the container. Files
        /// produced in the container outside of AZ_BATCH_NODE_ROOT_DIR might not be
        /// reflected to the host disk, meaning that Batch file APIs will not be able to
        /// access those files.
        /// </param>
        /// <param name="resourceFiles"> Files listed under this element are located in the Task's working directory. </param>
        /// <param name="environmentSettings"> A list of environment variable settings for the Job Release Task. </param>
        /// <param name="maxWallClockTime">
        /// The maximum elapsed time that the Job Release Task may run on a given Compute
        /// Node, measured from the time the Task starts. If the Task does not complete
        /// within the time limit, the Batch service terminates it. The default value is 15
        /// minutes. You may not specify a timeout longer than 15 minutes. If you do, the
        /// Batch service rejects it with an error; if you are calling the REST API
        /// directly, the HTTP status code is 400 (Bad Request).
        /// </param>
        /// <param name="retentionTime">
        /// The default is 7 days, i.e. the Task directory will be retained for 7 days
        /// unless the Compute Node is removed or the Job is deleted.
        /// </param>
        /// <param name="userIdentity"> If omitted, the Task runs as a non-administrative user unique to the Task. </param>
        internal JobReleaseTask(string id, string commandLine, TaskContainerSettings containerSettings, IList<ResourceFile> resourceFiles, IList<EnvironmentSetting> environmentSettings, TimeSpan? maxWallClockTime, TimeSpan? retentionTime, UserIdentity userIdentity)
        {
            Id = id;
            CommandLine = commandLine;
            ContainerSettings = containerSettings;
            ResourceFiles = resourceFiles.ToList();
            EnvironmentSettings = environmentSettings.ToList();
            MaxWallClockTime = maxWallClockTime;
            RetentionTime = retentionTime;
            UserIdentity = userIdentity;
        }

        /// <summary>
        /// The ID can contain any combination of alphanumeric characters including hyphens
        /// and underscores and cannot contain more than 64 characters. If you do not
        /// specify this property, the Batch service assigns a default value of
        /// 'jobrelease'. No other Task in the Job can have the same ID as the Job Release
        /// Task. If you try to submit a Task with the same id, the Batch service rejects
        /// the request with error code TaskIdSameAsJobReleaseTask; if you are calling the
        /// REST API directly, the HTTP status code is 409 (Conflict).
        /// </summary>
        public string Id { get; set; }
        /// <summary>
        /// The command line does not run under a shell, and therefore cannot take
        /// advantage of shell features such as environment variable expansion. If you want
        /// to take advantage of such features, you should invoke the shell in the command
        /// line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c
        /// MyCommand" in Linux. If the command line refers to file paths, it should use a
        /// relative path (relative to the Task working directory), or use the Batch
        /// provided environment variable
        /// (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables).
        /// </summary>
        public string CommandLine { get; set; }
        /// <summary>
        /// When this is specified, all directories recursively below the
        /// AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are
        /// mapped into the container, all Task environment variables are mapped into the
        /// container, and the Task command line is executed in the container. Files
        /// produced in the container outside of AZ_BATCH_NODE_ROOT_DIR might not be
        /// reflected to the host disk, meaning that Batch file APIs will not be able to
        /// access those files.
        /// </summary>
        public TaskContainerSettings ContainerSettings { get; set; }
        /// <summary> Files listed under this element are located in the Task's working directory. </summary>
        public IList<ResourceFile> ResourceFiles { get; }
        /// <summary> A list of environment variable settings for the Job Release Task. </summary>
        public IList<EnvironmentSetting> EnvironmentSettings { get; }
        /// <summary>
        /// The maximum elapsed time that the Job Release Task may run on a given Compute
        /// Node, measured from the time the Task starts. If the Task does not complete
        /// within the time limit, the Batch service terminates it. The default value is 15
        /// minutes. You may not specify a timeout longer than 15 minutes. If you do, the
        /// Batch service rejects it with an error; if you are calling the REST API
        /// directly, the HTTP status code is 400 (Bad Request).
        /// </summary>
        public TimeSpan? MaxWallClockTime { get; set; }
        /// <summary>
        /// The default is 7 days, i.e. the Task directory will be retained for 7 days
        /// unless the Compute Node is removed or the Job is deleted.
        /// </summary>
        public TimeSpan? RetentionTime { get; set; }
        /// <summary> If omitted, the Task runs as a non-administrative user unique to the Task. </summary>
        public UserIdentity UserIdentity { get; set; }
    }
}
