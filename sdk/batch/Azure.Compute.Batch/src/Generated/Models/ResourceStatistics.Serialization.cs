// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace BatchService.Models
{
    public partial class ResourceStatistics : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("startTime"u8);
            writer.WriteStringValue(StartTime, "O");
            writer.WritePropertyName("lastUpdateTime"u8);
            writer.WriteStringValue(LastUpdateTime, "O");
            writer.WritePropertyName("avgCPUPercentage"u8);
            writer.WriteNumberValue(AvgCPUPercentage);
            writer.WritePropertyName("avgMemoryGiB"u8);
            writer.WriteNumberValue(AvgMemoryGiB);
            writer.WritePropertyName("peakMemoryGiB"u8);
            writer.WriteNumberValue(PeakMemoryGiB);
            writer.WritePropertyName("avgDiskGiB"u8);
            writer.WriteNumberValue(AvgDiskGiB);
            writer.WritePropertyName("peakDiskGiB"u8);
            writer.WriteNumberValue(PeakDiskGiB);
            writer.WritePropertyName("diskReadIOps"u8);
            writer.WriteNumberValue(DiskReadIOps);
            writer.WritePropertyName("diskWriteIOps"u8);
            writer.WriteNumberValue(DiskWriteIOps);
            writer.WritePropertyName("diskReadGiB"u8);
            writer.WriteNumberValue(DiskReadGiB);
            writer.WritePropertyName("diskWriteGiB"u8);
            writer.WriteNumberValue(DiskWriteGiB);
            writer.WritePropertyName("networkReadGiB"u8);
            writer.WriteNumberValue(NetworkReadGiB);
            writer.WritePropertyName("networkWriteGiB"u8);
            writer.WriteNumberValue(NetworkWriteGiB);
            writer.WriteEndObject();
        }

        internal static ResourceStatistics DeserializeResourceStatistics(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            DateTimeOffset startTime = default;
            DateTimeOffset lastUpdateTime = default;
            float avgCPUPercentage = default;
            float avgMemoryGiB = default;
            float peakMemoryGiB = default;
            float avgDiskGiB = default;
            float peakDiskGiB = default;
            int diskReadIOps = default;
            int diskWriteIOps = default;
            float diskReadGiB = default;
            float diskWriteGiB = default;
            float networkReadGiB = default;
            float networkWriteGiB = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("startTime"u8))
                {
                    startTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("lastUpdateTime"u8))
                {
                    lastUpdateTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("avgCPUPercentage"u8))
                {
                    avgCPUPercentage = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("avgMemoryGiB"u8))
                {
                    avgMemoryGiB = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("peakMemoryGiB"u8))
                {
                    peakMemoryGiB = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("avgDiskGiB"u8))
                {
                    avgDiskGiB = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("peakDiskGiB"u8))
                {
                    peakDiskGiB = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("diskReadIOps"u8))
                {
                    diskReadIOps = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("diskWriteIOps"u8))
                {
                    diskWriteIOps = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("diskReadGiB"u8))
                {
                    diskReadGiB = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("diskWriteGiB"u8))
                {
                    diskWriteGiB = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("networkReadGiB"u8))
                {
                    networkReadGiB = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("networkWriteGiB"u8))
                {
                    networkWriteGiB = property.Value.GetSingle();
                    continue;
                }
            }
            return new ResourceStatistics(startTime, lastUpdateTime, avgCPUPercentage, avgMemoryGiB, peakMemoryGiB, avgDiskGiB, peakDiskGiB, diskReadIOps, diskWriteIOps, diskReadGiB, diskWriteGiB, networkReadGiB, networkWriteGiB);
        }

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The response to deserialize the model from. </param>
        internal static ResourceStatistics FromResponse(Response response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeResourceStatistics(document.RootElement);
        }

        /// <summary> Convert into a Utf8JsonRequestContent. </summary>
        internal virtual RequestContent ToRequestContent()
        {
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(this);
            return content;
        }
    }
}
