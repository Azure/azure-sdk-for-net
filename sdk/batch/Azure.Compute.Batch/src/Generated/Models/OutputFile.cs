// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;

namespace BatchService.Models
{
    /// <summary>
    /// On every file uploads, Batch service writes two log files to the compute node,
    /// 'fileuploadout.txt' and 'fileuploaderr.txt'. These log files are used to learn
    /// more about a specific failure.
    /// </summary>
    public partial class OutputFile
    {
        /// <summary> Initializes a new instance of OutputFile. </summary>
        /// <param name="filePattern">
        /// Both relative and absolute paths are supported. Relative paths are relative to
        /// the Task working directory. The following wildcards are supported: * matches 0
        /// or more characters (for example pattern abc* would match abc or abcdef), **
        /// matches any directory, ? matches any single character, [abc] matches one
        /// character in the brackets, and [a-c] matches one character in the range.
        /// Brackets can include a negation to match any character not specified (for
        /// example [!abc] matches any character but a, b, or c). If a file name starts
        /// with "." it is ignored by default but may be matched by specifying it
        /// explicitly (for example *.gif will not match .a.gif, but .*.gif will). A simple
        /// example: **\*.txt matches any file that does not start in '.' and ends with
        /// .txt in the Task working directory or any subdirectory. If the filename
        /// contains a wildcard character it can be escaped using brackets (for example
        /// abc[*] would match a file named abc*). Note that both \ and / are treated as
        /// directory separators on Windows, but only / is on Linux. Environment variables
        /// (%var% on Windows or $var on Linux) are expanded prior to the pattern being
        /// applied.
        /// </param>
        /// <param name="destination"> The destination to which a file should be uploaded. </param>
        /// <param name="uploadOptions">
        /// Details about an output file upload operation, including under what conditions
        /// to perform the upload.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="filePattern"/>, <paramref name="destination"/> or <paramref name="uploadOptions"/> is null. </exception>
        public OutputFile(string filePattern, OutputFileDestination destination, OutputFileUploadOptions uploadOptions)
        {
            Argument.AssertNotNull(filePattern, nameof(filePattern));
            Argument.AssertNotNull(destination, nameof(destination));
            Argument.AssertNotNull(uploadOptions, nameof(uploadOptions));

            FilePattern = filePattern;
            Destination = destination;
            UploadOptions = uploadOptions;
        }

        /// <summary>
        /// Both relative and absolute paths are supported. Relative paths are relative to
        /// the Task working directory. The following wildcards are supported: * matches 0
        /// or more characters (for example pattern abc* would match abc or abcdef), **
        /// matches any directory, ? matches any single character, [abc] matches one
        /// character in the brackets, and [a-c] matches one character in the range.
        /// Brackets can include a negation to match any character not specified (for
        /// example [!abc] matches any character but a, b, or c). If a file name starts
        /// with "." it is ignored by default but may be matched by specifying it
        /// explicitly (for example *.gif will not match .a.gif, but .*.gif will). A simple
        /// example: **\*.txt matches any file that does not start in '.' and ends with
        /// .txt in the Task working directory or any subdirectory. If the filename
        /// contains a wildcard character it can be escaped using brackets (for example
        /// abc[*] would match a file named abc*). Note that both \ and / are treated as
        /// directory separators on Windows, but only / is on Linux. Environment variables
        /// (%var% on Windows or $var on Linux) are expanded prior to the pattern being
        /// applied.
        /// </summary>
        public string FilePattern { get; set; }
        /// <summary> The destination to which a file should be uploaded. </summary>
        public OutputFileDestination Destination { get; set; }
        /// <summary>
        /// Details about an output file upload operation, including under what conditions
        /// to perform the upload.
        /// </summary>
        public OutputFileUploadOptions UploadOptions { get; set; }
    }
}
