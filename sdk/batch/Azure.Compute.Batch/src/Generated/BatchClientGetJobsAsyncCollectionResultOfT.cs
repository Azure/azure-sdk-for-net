// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Client;

namespace Azure.Batch
{
    internal partial class BatchClientGetJobsAsyncCollectionResultOfT : AsyncPageable<BatchJob>
    {
        private readonly BatchClient _client;
        private readonly int? _timeOutInSeconds;
        private readonly string _clientRequestId;
        private readonly bool? _returnClientRequestId;
        private readonly DateTimeOffset? _ocpdate;
        private readonly int? _maxresults;
        private readonly string _filter;
        private readonly IEnumerable<string> _select;
        private readonly IEnumerable<string> _expand;
        private readonly RequestContext _context;

        /// <summary> Initializes a new instance of BatchClientGetJobsAsyncCollectionResultOfT, which is used to iterate over the pages of a collection. </summary>
        /// <param name="client"> The BatchClient client used to send requests. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-jobs.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="expand"> An OData $expand clause. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        public BatchClientGetJobsAsyncCollectionResultOfT(BatchClient client, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, int? maxresults, string filter, IEnumerable<string> @select, IEnumerable<string> expand, RequestContext context) : base(context?.CancellationToken ?? default)
        {
            _client = client;
            _timeOutInSeconds = timeOutInSeconds;
            _clientRequestId = clientRequestId;
            _returnClientRequestId = returnClientRequestId;
            _ocpdate = ocpdate;
            _maxresults = maxresults;
            _filter = filter;
            _select = @select;
            _expand = expand;
            _context = context;
        }

        /// <summary> Gets the pages of BatchClientGetJobsAsyncCollectionResultOfT as an enumerable collection. </summary>
        /// <param name="continuationToken"> A continuation token indicating where to resume paging. </param>
        /// <param name="pageSizeHint"> The number of items per page. </param>
        /// <returns> The pages of BatchClientGetJobsAsyncCollectionResultOfT as an enumerable collection. </returns>
        public override async IAsyncEnumerable<Page<BatchJob>> AsPages(string continuationToken, int? pageSizeHint)
        {
            Uri nextPage = continuationToken != null ? new Uri(continuationToken) : null;
            do
            {
                Response response = await GetNextResponse(pageSizeHint, nextPage).ConfigureAwait(false);
                if (response is null)
                {
                    yield break;
                }
                BatchJobListResult responseWithType = (BatchJobListResult)response;
                nextPage = responseWithType.OdataNextLink;
                yield return Page<BatchJob>.FromValues((IReadOnlyList<BatchJob>)responseWithType.Value, nextPage?.AbsoluteUri, response);
            }
            while (nextPage != null);
        }

        /// <summary> Get next page. </summary>
        /// <param name="pageSizeHint"> The number of items per page. </param>
        /// <param name="nextLink"> The next link to use for the next page of results. </param>
        private async ValueTask<Response> GetNextResponse(int? pageSizeHint, Uri nextLink)
        {
            HttpMessage message = nextLink != null ? _client.CreateNextListJobsRequest(nextLink, _timeOutInSeconds, _clientRequestId, _returnClientRequestId, _ocpdate, _maxresults, _filter, _select, _expand, _context) : _client.CreateListJobsRequest(_timeOutInSeconds, _clientRequestId, _returnClientRequestId, _ocpdate, _maxresults, _filter, _select, _expand, _context);
            using DiagnosticScope scope = _client.ClientDiagnostics.CreateScope("BatchClient.GetJobs");
            scope.Start();
            try
            {
                return await _client.Pipeline.ProcessMessageAsync(message, _context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
