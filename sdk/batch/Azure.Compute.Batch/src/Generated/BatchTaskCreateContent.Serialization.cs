// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Batch
{
    /// <summary> Parameters for creating an Azure Batch Task. </summary>
    public partial class BatchTaskCreateContent : IJsonModel<BatchTaskCreateContent>
    {
        /// <summary> Initializes a new instance of <see cref="BatchTaskCreateContent"/> for deserialization. </summary>
        internal BatchTaskCreateContent()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<BatchTaskCreateContent>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<BatchTaskCreateContent>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(BatchTaskCreateContent)} does not support writing '{format}' format.");
            }
            writer.WritePropertyName("id"u8);
            writer.WriteStringValue(Id);
            if (Optional.IsDefined(DisplayName))
            {
                writer.WritePropertyName("displayName"u8);
                writer.WriteStringValue(DisplayName);
            }
            if (Optional.IsDefined(ExitConditions))
            {
                writer.WritePropertyName("exitConditions"u8);
                writer.WriteObjectValue(ExitConditions, options);
            }
            writer.WritePropertyName("commandLine"u8);
            writer.WriteStringValue(CommandLine);
            if (Optional.IsDefined(ContainerSettings))
            {
                writer.WritePropertyName("containerSettings"u8);
                writer.WriteObjectValue(ContainerSettings, options);
            }
            if (Optional.IsCollectionDefined(ResourceFiles))
            {
                writer.WritePropertyName("resourceFiles"u8);
                writer.WriteStartArray();
                foreach (ResourceFile item in ResourceFiles)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(OutputFiles))
            {
                writer.WritePropertyName("outputFiles"u8);
                writer.WriteStartArray();
                foreach (OutputFile item in OutputFiles)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(EnvironmentSettings))
            {
                writer.WritePropertyName("environmentSettings"u8);
                writer.WriteStartArray();
                foreach (EnvironmentSetting item in EnvironmentSettings)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(AffinityInfo))
            {
                writer.WritePropertyName("affinityInfo"u8);
                writer.WriteObjectValue(AffinityInfo, options);
            }
            if (Optional.IsDefined(Constraints))
            {
                writer.WritePropertyName("constraints"u8);
                writer.WriteObjectValue(Constraints, options);
            }
            if (Optional.IsDefined(RequiredSlots))
            {
                writer.WritePropertyName("requiredSlots"u8);
                writer.WriteNumberValue(RequiredSlots.Value);
            }
            if (Optional.IsDefined(UserIdentity))
            {
                writer.WritePropertyName("userIdentity"u8);
                writer.WriteObjectValue(UserIdentity, options);
            }
            if (Optional.IsDefined(MultiInstanceSettings))
            {
                writer.WritePropertyName("multiInstanceSettings"u8);
                writer.WriteObjectValue(MultiInstanceSettings, options);
            }
            if (Optional.IsDefined(DependsOn))
            {
                writer.WritePropertyName("dependsOn"u8);
                writer.WriteObjectValue(DependsOn, options);
            }
            if (Optional.IsCollectionDefined(ApplicationPackageReferences))
            {
                writer.WritePropertyName("applicationPackageReferences"u8);
                writer.WriteStartArray();
                foreach (BatchApplicationPackageReference item in ApplicationPackageReferences)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(AuthenticationTokenSettings))
            {
                writer.WritePropertyName("authenticationTokenSettings"u8);
                writer.WriteObjectValue(AuthenticationTokenSettings, options);
            }
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        BatchTaskCreateContent IJsonModel<BatchTaskCreateContent>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BatchTaskCreateContent JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<BatchTaskCreateContent>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(BatchTaskCreateContent)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeBatchTaskCreateContent(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static BatchTaskCreateContent DeserializeBatchTaskCreateContent(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string id = default;
            string displayName = default;
            ExitConditions exitConditions = default;
            string commandLine = default;
            BatchTaskContainerSettings containerSettings = default;
            IList<ResourceFile> resourceFiles = default;
            IList<OutputFile> outputFiles = default;
            IList<EnvironmentSetting> environmentSettings = default;
            AffinityInfo affinityInfo = default;
            BatchTaskConstraints constraints = default;
            int? requiredSlots = default;
            UserIdentity userIdentity = default;
            MultiInstanceSettings multiInstanceSettings = default;
            BatchTaskDependencies dependsOn = default;
            IList<BatchApplicationPackageReference> applicationPackageReferences = default;
            AuthenticationTokenSettings authenticationTokenSettings = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("id"u8))
                {
                    id = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("displayName"u8))
                {
                    displayName = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("exitConditions"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    exitConditions = ExitConditions.DeserializeExitConditions(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("commandLine"u8))
                {
                    commandLine = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("containerSettings"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    containerSettings = BatchTaskContainerSettings.DeserializeBatchTaskContainerSettings(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("resourceFiles"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ResourceFile> array = new List<ResourceFile>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(ResourceFile.DeserializeResourceFile(item, options));
                    }
                    resourceFiles = array;
                    continue;
                }
                if (prop.NameEquals("outputFiles"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<OutputFile> array = new List<OutputFile>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(OutputFile.DeserializeOutputFile(item, options));
                    }
                    outputFiles = array;
                    continue;
                }
                if (prop.NameEquals("environmentSettings"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<EnvironmentSetting> array = new List<EnvironmentSetting>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(EnvironmentSetting.DeserializeEnvironmentSetting(item, options));
                    }
                    environmentSettings = array;
                    continue;
                }
                if (prop.NameEquals("affinityInfo"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    affinityInfo = AffinityInfo.DeserializeAffinityInfo(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("constraints"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    constraints = BatchTaskConstraints.DeserializeBatchTaskConstraints(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("requiredSlots"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    requiredSlots = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("userIdentity"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    userIdentity = UserIdentity.DeserializeUserIdentity(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("multiInstanceSettings"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    multiInstanceSettings = MultiInstanceSettings.DeserializeMultiInstanceSettings(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("dependsOn"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dependsOn = BatchTaskDependencies.DeserializeBatchTaskDependencies(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("applicationPackageReferences"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<BatchApplicationPackageReference> array = new List<BatchApplicationPackageReference>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(BatchApplicationPackageReference.DeserializeBatchApplicationPackageReference(item, options));
                    }
                    applicationPackageReferences = array;
                    continue;
                }
                if (prop.NameEquals("authenticationTokenSettings"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    authenticationTokenSettings = AuthenticationTokenSettings.DeserializeAuthenticationTokenSettings(prop.Value, options);
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new BatchTaskCreateContent(
                id,
                displayName,
                exitConditions,
                commandLine,
                containerSettings,
                resourceFiles ?? new ChangeTrackingList<ResourceFile>(),
                outputFiles ?? new ChangeTrackingList<OutputFile>(),
                environmentSettings ?? new ChangeTrackingList<EnvironmentSetting>(),
                affinityInfo,
                constraints,
                requiredSlots,
                userIdentity,
                multiInstanceSettings,
                dependsOn,
                applicationPackageReferences ?? new ChangeTrackingList<BatchApplicationPackageReference>(),
                authenticationTokenSettings,
                additionalBinaryDataProperties);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<BatchTaskCreateContent>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<BatchTaskCreateContent>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureBatchContext.Default);
                default:
                    throw new FormatException($"The model {nameof(BatchTaskCreateContent)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        BatchTaskCreateContent IPersistableModel<BatchTaskCreateContent>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BatchTaskCreateContent PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<BatchTaskCreateContent>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeBatchTaskCreateContent(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(BatchTaskCreateContent)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<BatchTaskCreateContent>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <param name="batchTaskCreateContent"> The <see cref="BatchTaskCreateContent"/> to serialize into <see cref="RequestContent"/>. </param>
        public static implicit operator RequestContent(BatchTaskCreateContent batchTaskCreateContent)
        {
            if (batchTaskCreateContent == null)
            {
                return null;
            }
            Utf8JsonRequestContent content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(batchTaskCreateContent, ModelSerializationExtensions.WireOptions);
            return content;
        }
    }
}
