// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using BatchService.Models;

namespace BatchService
{
    // Data plane generated sub-client.
    /// <summary> The Applications sub-client. </summary>
    public partial class Applications
    {
        private static readonly string[] AuthorizationScopes = new string[] { "https://batch.core.windows.net//.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of Applications for mocking. </summary>
        protected Applications()
        {
        }

        /// <summary> Initializes a new instance of Applications. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="tokenCredential"> The token credential to copy. </param>
        /// <param name="apiVersion"> The String to use. </param>
        internal Applications(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, TokenCredential tokenCredential, string apiVersion)
        {
            ClientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
            _tokenCredential = tokenCredential;
            _apiVersion = apiVersion;
        }

        /// <summary> Lists all of the applications available in the specified Account. </summary>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="ocpDate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="timeOut">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// This operation returns only Applications and versions that are available for
        /// use on Compute Nodes; that is, that can be used in an Package reference. For
        /// administrator information about applications and versions that are not yet
        /// available to Compute Nodes, use the Azure portal or the Azure Resource Manager
        /// API.
        /// </remarks>
        public virtual async Task<Response<ApplicationListResult>> GetApplicationValuesAsync(int? maxresults = null, string ocpDate = null, int? timeOut = null, string clientRequestId = null, bool? returnClientRequestId = null, CancellationToken cancellationToken = default)
        {
            using var scope = ClientDiagnostics.CreateScope("Applications.GetApplicationValues");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = await GetApplicationsAsync(maxresults, ocpDate, timeOut, clientRequestId, returnClientRequestId, context).ConfigureAwait(false);
                return Response.FromValue(ApplicationListResult.FromResponse(response), response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists all of the applications available in the specified Account. </summary>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="ocpDate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="timeOut">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <remarks>
        /// This operation returns only Applications and versions that are available for
        /// use on Compute Nodes; that is, that can be used in an Package reference. For
        /// administrator information about applications and versions that are not yet
        /// available to Compute Nodes, use the Azure portal or the Azure Resource Manager
        /// API.
        /// </remarks>
        public virtual Response<ApplicationListResult> GetApplicationValues(int? maxresults = null, string ocpDate = null, int? timeOut = null, string clientRequestId = null, bool? returnClientRequestId = null, CancellationToken cancellationToken = default)
        {
            using var scope = ClientDiagnostics.CreateScope("Applications.GetApplicationValues");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = GetApplications(maxresults, ocpDate, timeOut, clientRequestId, returnClientRequestId, context);
                return Response.FromValue(ApplicationListResult.FromResponse(response), response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists all of the applications available in the specified Account. </summary>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="ocpDate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="timeOut">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/Applications.xml" path="doc/members/member[@name='GetApplicationsAsync(Int32,String,Int32,String,Boolean,RequestContext)']/*" />
        public virtual async Task<Response> GetApplicationsAsync(int? maxresults = null, string ocpDate = null, int? timeOut = null, string clientRequestId = null, bool? returnClientRequestId = null, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("Applications.GetApplications");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetApplicationsRequest(maxresults, ocpDate, timeOut, clientRequestId, returnClientRequestId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists all of the applications available in the specified Account. </summary>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="ocpDate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="timeOut">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/Applications.xml" path="doc/members/member[@name='GetApplications(Int32,String,Int32,String,Boolean,RequestContext)']/*" />
        public virtual Response GetApplications(int? maxresults = null, string ocpDate = null, int? timeOut = null, string clientRequestId = null, bool? returnClientRequestId = null, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("Applications.GetApplications");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetApplicationsRequest(maxresults, ocpDate, timeOut, clientRequestId, returnClientRequestId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets information about the specified Application. </summary>
        /// <param name="applicationId"> A string that uniquely identifies the application within the Account. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="applicationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="applicationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// This operation returns only Applications and versions that are available for
        /// use on Compute Nodes; that is, that can be used in an Package reference. For
        /// administrator information about Applications and versions that are not yet
        /// available to Compute Nodes, use the Azure portal or the Azure Resource Manager
        /// API.
        /// </remarks>
        public virtual async Task<Response<Application>> GetApplicationValueAsync(string applicationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(applicationId, nameof(applicationId));

            using var scope = ClientDiagnostics.CreateScope("Applications.GetApplicationValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = await GetApplicationAsync(applicationId, context).ConfigureAwait(false);
                return Response.FromValue(Application.FromResponse(response), response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets information about the specified Application. </summary>
        /// <param name="applicationId"> A string that uniquely identifies the application within the Account. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="applicationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="applicationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <remarks>
        /// This operation returns only Applications and versions that are available for
        /// use on Compute Nodes; that is, that can be used in an Package reference. For
        /// administrator information about Applications and versions that are not yet
        /// available to Compute Nodes, use the Azure portal or the Azure Resource Manager
        /// API.
        /// </remarks>
        public virtual Response<Application> GetApplicationValue(string applicationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(applicationId, nameof(applicationId));

            using var scope = ClientDiagnostics.CreateScope("Applications.GetApplicationValue");
            scope.Start();
            try
            {
                RequestContext context = FromCancellationToken(cancellationToken);
                Response response = GetApplication(applicationId, context);
                return Response.FromValue(Application.FromResponse(response), response);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets information about the specified Application. </summary>
        /// <param name="applicationId"> A string that uniquely identifies the application within the Account. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="applicationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="applicationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/Applications.xml" path="doc/members/member[@name='GetApplicationAsync(String,RequestContext)']/*" />
        public virtual async Task<Response> GetApplicationAsync(string applicationId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(applicationId, nameof(applicationId));

            using var scope = ClientDiagnostics.CreateScope("Applications.GetApplication");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetApplicationRequest(applicationId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets information about the specified Application. </summary>
        /// <param name="applicationId"> A string that uniquely identifies the application within the Account. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="applicationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="applicationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <include file="Docs/Applications.xml" path="doc/members/member[@name='GetApplication(String,RequestContext)']/*" />
        public virtual Response GetApplication(string applicationId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(applicationId, nameof(applicationId));

            using var scope = ClientDiagnostics.CreateScope("Applications.GetApplication");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetApplicationRequest(applicationId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateGetApplicationsRequest(int? maxresults, string ocpDate, int? timeOut, string clientRequestId, bool? returnClientRequestId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendPath("/applications", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (maxresults != null)
            {
                uri.AppendQuery("maxresults", maxresults.Value, true);
            }
            if (timeOut != null)
            {
                uri.AppendQuery("timeOut", timeOut.Value, true);
            }
            request.Uri = uri;
            if (ocpDate != null)
            {
                request.Headers.Add("ocp-date", ocpDate);
            }
            if (clientRequestId != null)
            {
                request.Headers.Add("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", returnClientRequestId.Value);
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetApplicationRequest(string applicationId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendPath("/applications/", false);
            uri.AppendPath(applicationId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static RequestContext DefaultRequestContext = new RequestContext();
        internal static RequestContext FromCancellationToken(CancellationToken cancellationToken = default)
        {
            if (!cancellationToken.CanBeCanceled)
            {
                return DefaultRequestContext;
            }

            return new RequestContext() { CancellationToken = cancellationToken };
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
    }
}
