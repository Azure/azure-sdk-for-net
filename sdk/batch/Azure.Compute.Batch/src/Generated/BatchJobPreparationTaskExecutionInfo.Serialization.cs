// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;

namespace Azure.Compute.Batch
{
    /// <summary>
    /// Contains information about the execution of a Job Preparation Task on a Compute
    /// Node.
    /// </summary>
    public partial class BatchJobPreparationTaskExecutionInfo : IJsonModel<BatchJobPreparationTaskExecutionInfo>
    {
        /// <summary> Initializes a new instance of <see cref="BatchJobPreparationTaskExecutionInfo"/> for deserialization. </summary>
        internal BatchJobPreparationTaskExecutionInfo()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<BatchJobPreparationTaskExecutionInfo>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<BatchJobPreparationTaskExecutionInfo>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(BatchJobPreparationTaskExecutionInfo)} does not support writing '{format}' format.");
            }
            writer.WritePropertyName("startTime"u8);
            writer.WriteStringValue(StartTime, "O");
            if (Optional.IsDefined(EndTime))
            {
                writer.WritePropertyName("endTime"u8);
                writer.WriteStringValue(EndTime.Value, "O");
            }
            writer.WritePropertyName("state"u8);
            writer.WriteStringValue(State.ToString());
            if (Optional.IsDefined(TaskRootDirectory))
            {
                writer.WritePropertyName("taskRootDirectory"u8);
                writer.WriteStringValue(TaskRootDirectory);
            }
            if (Optional.IsDefined(TaskRootDirectoryUri))
            {
                writer.WritePropertyName("taskRootDirectoryUrl"u8);
                writer.WriteStringValue(TaskRootDirectoryUri.AbsoluteUri);
            }
            if (Optional.IsDefined(ExitCode))
            {
                writer.WritePropertyName("exitCode"u8);
                writer.WriteNumberValue(ExitCode.Value);
            }
            if (Optional.IsDefined(ContainerInfo))
            {
                writer.WritePropertyName("containerInfo"u8);
                writer.WriteObjectValue(ContainerInfo, options);
            }
            if (Optional.IsDefined(FailureInfo))
            {
                writer.WritePropertyName("failureInfo"u8);
                writer.WriteObjectValue(FailureInfo, options);
            }
            writer.WritePropertyName("retryCount"u8);
            writer.WriteNumberValue(RetryCount);
            if (Optional.IsDefined(LastRetryTime))
            {
                writer.WritePropertyName("lastRetryTime"u8);
                writer.WriteStringValue(LastRetryTime.Value, "O");
            }
            if (Optional.IsDefined(Result))
            {
                writer.WritePropertyName("result"u8);
                writer.WriteStringValue(Result.Value.ToString());
            }
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        BatchJobPreparationTaskExecutionInfo IJsonModel<BatchJobPreparationTaskExecutionInfo>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BatchJobPreparationTaskExecutionInfo JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<BatchJobPreparationTaskExecutionInfo>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(BatchJobPreparationTaskExecutionInfo)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeBatchJobPreparationTaskExecutionInfo(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static BatchJobPreparationTaskExecutionInfo DeserializeBatchJobPreparationTaskExecutionInfo(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            DateTimeOffset startTime = default;
            DateTimeOffset? endTime = default;
            BatchJobPreparationTaskState state = default;
            string taskRootDirectory = default;
            Uri taskRootDirectoryUri = default;
            int? exitCode = default;
            BatchTaskContainerExecutionInfo containerInfo = default;
            BatchTaskFailureInfo failureInfo = default;
            int retryCount = default;
            DateTimeOffset? lastRetryTime = default;
            BatchTaskExecutionResult? result = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("startTime"u8))
                {
                    startTime = prop.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (prop.NameEquals("endTime"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    endTime = prop.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (prop.NameEquals("state"u8))
                {
                    state = new BatchJobPreparationTaskState(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("taskRootDirectory"u8))
                {
                    taskRootDirectory = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("taskRootDirectoryUrl"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    taskRootDirectoryUri = new Uri(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("exitCode"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    exitCode = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("containerInfo"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    containerInfo = BatchTaskContainerExecutionInfo.DeserializeBatchTaskContainerExecutionInfo(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("failureInfo"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    failureInfo = BatchTaskFailureInfo.DeserializeBatchTaskFailureInfo(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("retryCount"u8))
                {
                    retryCount = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("lastRetryTime"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastRetryTime = prop.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (prop.NameEquals("result"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    result = new BatchTaskExecutionResult(prop.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new BatchJobPreparationTaskExecutionInfo(
                startTime,
                endTime,
                state,
                taskRootDirectory,
                taskRootDirectoryUri,
                exitCode,
                containerInfo,
                failureInfo,
                retryCount,
                lastRetryTime,
                result,
                additionalBinaryDataProperties);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<BatchJobPreparationTaskExecutionInfo>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<BatchJobPreparationTaskExecutionInfo>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureComputeBatchContext.Default);
                default:
                    throw new FormatException($"The model {nameof(BatchJobPreparationTaskExecutionInfo)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        BatchJobPreparationTaskExecutionInfo IPersistableModel<BatchJobPreparationTaskExecutionInfo>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BatchJobPreparationTaskExecutionInfo PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<BatchJobPreparationTaskExecutionInfo>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeBatchJobPreparationTaskExecutionInfo(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(BatchJobPreparationTaskExecutionInfo)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<BatchJobPreparationTaskExecutionInfo>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
