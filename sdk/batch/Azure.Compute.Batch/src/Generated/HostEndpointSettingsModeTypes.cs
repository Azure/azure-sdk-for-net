// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Compute.Batch
{
    /// <summary> HostEndpointSettingsModeTypes enums. </summary>
    public readonly partial struct HostEndpointSettingsModeTypes : IEquatable<HostEndpointSettingsModeTypes>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="HostEndpointSettingsModeTypes"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public HostEndpointSettingsModeTypes(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AuditValue = "Audit";
        private const string EnforceValue = "Enforce";

        /// <summary> In Audit mode, the system acts as if it is enforcing the access control policy, including emitting access denial entries in the logs but it does not actually deny any requests to host endpoints. </summary>
        public static HostEndpointSettingsModeTypes Audit { get; } = new HostEndpointSettingsModeTypes(AuditValue);
        /// <summary> Enforce mode is the recommended mode of operation and system will enforce the access control policy. This property cannot be used together with 'inVMAccessControlProfileReferenceId'. </summary>
        public static HostEndpointSettingsModeTypes Enforce { get; } = new HostEndpointSettingsModeTypes(EnforceValue);
        /// <summary> Determines if two <see cref="HostEndpointSettingsModeTypes"/> values are the same. </summary>
        public static bool operator ==(HostEndpointSettingsModeTypes left, HostEndpointSettingsModeTypes right) => left.Equals(right);
        /// <summary> Determines if two <see cref="HostEndpointSettingsModeTypes"/> values are not the same. </summary>
        public static bool operator !=(HostEndpointSettingsModeTypes left, HostEndpointSettingsModeTypes right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="HostEndpointSettingsModeTypes"/>. </summary>
        public static implicit operator HostEndpointSettingsModeTypes(string value) => new HostEndpointSettingsModeTypes(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is HostEndpointSettingsModeTypes other && Equals(other);
        /// <inheritdoc />
        public bool Equals(HostEndpointSettingsModeTypes other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
