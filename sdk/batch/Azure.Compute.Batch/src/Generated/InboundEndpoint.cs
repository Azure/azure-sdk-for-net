// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Net;

namespace Azure.Compute.Batch
{
    /// <summary> An inbound endpoint on a Compute Node. </summary>
    public partial class InboundEndpoint
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="InboundEndpoint"/>. </summary>
        /// <param name="name"> The name of the endpoint. </param>
        /// <param name="protocol"> The protocol of the endpoint. </param>
        /// <param name="publicIpAddress"> The public IP address of the Compute Node. </param>
        /// <param name="publicFQDN"> The public fully qualified domain name for the Compute Node. </param>
        /// <param name="frontendPort"> The public port number of the endpoint. </param>
        /// <param name="backendPort"> The backend port number of the endpoint. </param>
        internal InboundEndpoint(string name, InboundEndpointProtocol protocol, IPAddress publicIpAddress, string publicFQDN, int frontendPort, int backendPort)
        {
            Name = name;
            Protocol = protocol;
            PublicIpAddress = publicIpAddress;
            PublicFQDN = publicFQDN;
            FrontendPort = frontendPort;
            BackendPort = backendPort;
        }

        /// <summary> Initializes a new instance of <see cref="InboundEndpoint"/>. </summary>
        /// <param name="name"> The name of the endpoint. </param>
        /// <param name="protocol"> The protocol of the endpoint. </param>
        /// <param name="publicIpAddress"> The public IP address of the Compute Node. </param>
        /// <param name="publicFQDN"> The public fully qualified domain name for the Compute Node. </param>
        /// <param name="frontendPort"> The public port number of the endpoint. </param>
        /// <param name="backendPort"> The backend port number of the endpoint. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal InboundEndpoint(string name, InboundEndpointProtocol protocol, IPAddress publicIpAddress, string publicFQDN, int frontendPort, int backendPort, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            Name = name;
            Protocol = protocol;
            PublicIpAddress = publicIpAddress;
            PublicFQDN = publicFQDN;
            FrontendPort = frontendPort;
            BackendPort = backendPort;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> The name of the endpoint. </summary>
        public string Name { get; }

        /// <summary> The protocol of the endpoint. </summary>
        public InboundEndpointProtocol Protocol { get; }

        /// <summary> The public IP address of the Compute Node. </summary>
        public IPAddress PublicIpAddress { get; }

        /// <summary> The public fully qualified domain name for the Compute Node. </summary>
        public string PublicFQDN { get; }

        /// <summary> The public port number of the endpoint. </summary>
        public int FrontendPort { get; }

        /// <summary> The backend port number of the endpoint. </summary>
        public int BackendPort { get; }
    }
}
