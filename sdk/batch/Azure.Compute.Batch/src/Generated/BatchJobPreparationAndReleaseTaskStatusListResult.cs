// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Compute.Batch
{
    /// <summary>
    /// The result of listing the status of the Job Preparation and Job Release Tasks
    /// for a Job.
    /// </summary>
    internal partial class BatchJobPreparationAndReleaseTaskStatusListResult
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="BatchJobPreparationAndReleaseTaskStatusListResult"/>. </summary>
        internal BatchJobPreparationAndReleaseTaskStatusListResult()
        {
            Value = new ChangeTrackingList<BatchJobPreparationAndReleaseTaskStatus>();
        }

        /// <summary> Initializes a new instance of <see cref="BatchJobPreparationAndReleaseTaskStatusListResult"/>. </summary>
        /// <param name="value"> A list of Job Preparation and Job Release Task execution information. </param>
        /// <param name="odataNextLink"> The URL to get the next set of results. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal BatchJobPreparationAndReleaseTaskStatusListResult(IList<BatchJobPreparationAndReleaseTaskStatus> value, string odataNextLink, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            Value = value;
            OdataNextLink = odataNextLink;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> A list of Job Preparation and Job Release Task execution information. </summary>
        public IList<BatchJobPreparationAndReleaseTaskStatus> Value { get; }

        /// <summary> The URL to get the next set of results. </summary>
        public string OdataNextLink { get; }
    }
}
