// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Compute.Batch
{
    /// <summary> Information about a Task running on a Compute Node. </summary>
    public partial class BatchTaskInfo
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="BatchTaskInfo"/>. </summary>
        /// <param name="taskState"> The current state of the Task. </param>
        internal BatchTaskInfo(BatchTaskState taskState)
        {
            TaskState = taskState;
        }

        /// <summary> Initializes a new instance of <see cref="BatchTaskInfo"/>. </summary>
        /// <param name="taskUri"> The URL of the Task. </param>
        /// <param name="jobId"> The ID of the Job to which the Task belongs. </param>
        /// <param name="taskId"> The ID of the Task. </param>
        /// <param name="subtaskId"> The ID of the subtask if the Task is a multi-instance Task. </param>
        /// <param name="taskState"> The current state of the Task. </param>
        /// <param name="executionInfo"> Information about the execution of the Task. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal BatchTaskInfo(Uri taskUri, string jobId, string taskId, int? subtaskId, BatchTaskState taskState, BatchTaskExecutionInfo executionInfo, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            TaskUri = taskUri;
            JobId = jobId;
            TaskId = taskId;
            SubtaskId = subtaskId;
            TaskState = taskState;
            ExecutionInfo = executionInfo;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> The URL of the Task. </summary>
        public Uri TaskUri { get; }

        /// <summary> The ID of the Job to which the Task belongs. </summary>
        public string JobId { get; }

        /// <summary> The ID of the Task. </summary>
        public string TaskId { get; }

        /// <summary> The ID of the subtask if the Task is a multi-instance Task. </summary>
        public int? SubtaskId { get; }

        /// <summary> The current state of the Task. </summary>
        public BatchTaskState TaskState { get; }

        /// <summary> Information about the execution of the Task. </summary>
        public BatchTaskExecutionInfo ExecutionInfo { get; }
    }
}
