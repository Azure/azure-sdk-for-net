// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Compute.Batch
{
    /// <summary> The Customer Managed Key reference to encrypt the Disk. </summary>
    public partial class DiskCustomerManagedKey
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="DiskCustomerManagedKey"/>. </summary>
        public DiskCustomerManagedKey()
        {
        }

        /// <summary> Initializes a new instance of <see cref="DiskCustomerManagedKey"/>. </summary>
        /// <param name="identityReference"> The reference of one of the pool identities to encrypt Disk. This identity will be used to access the KeyVault. </param>
        /// <param name="keyUrl"> Fully versioned Key Url pointing to a key in KeyVault. Version segment of the Url is required regardless of rotationToLatestKeyVersionEnabled value. </param>
        /// <param name="rotationToLatestKeyVersionEnabled"> Set this flag to true to enable auto-updating of the Disk Encryption to the latest key version. Default is false. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal DiskCustomerManagedKey(BatchPoolIdentityReference identityReference, string keyUrl, bool? rotationToLatestKeyVersionEnabled, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            IdentityReference = identityReference;
            KeyUrl = keyUrl;
            RotationToLatestKeyVersionEnabled = rotationToLatestKeyVersionEnabled;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The reference of one of the pool identities to encrypt Disk. This identity will be used to access the KeyVault. </summary>
        public BatchPoolIdentityReference IdentityReference { get; set; }
        /// <summary> Fully versioned Key Url pointing to a key in KeyVault. Version segment of the Url is required regardless of rotationToLatestKeyVersionEnabled value. </summary>
        public string KeyUrl { get; set; }
        /// <summary> Set this flag to true to enable auto-updating of the Disk Encryption to the latest key version. Default is false. </summary>
        public bool? RotationToLatestKeyVersionEnabled { get; set; }
    }
}
