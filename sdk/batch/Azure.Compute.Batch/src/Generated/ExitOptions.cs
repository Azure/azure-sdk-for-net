// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Batch
{
    /// <summary> Specifies how the Batch service responds to a particular exit condition. </summary>
    public partial class ExitOptions
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="ExitOptions"/>. </summary>
        public ExitOptions()
        {
        }

        /// <summary> Initializes a new instance of <see cref="ExitOptions"/>. </summary>
        /// <param name="jobAction"> An action to take on the Job containing the Task, if the Task completes with the given exit condition and the Job's onTaskFailed property is 'performExitOptionsJobAction'. The default is none for exit code 0 and terminate for all other exit conditions. If the Job's onTaskFailed property is noaction, then specifying this property returns an error and the add Task request fails with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request). </param>
        /// <param name="dependencyAction"> An action that the Batch service performs on Tasks that depend on this Task. Possible values are 'satisfy' (allowing dependent tasks to progress) and 'block' (dependent tasks continue to wait). Batch does not yet support cancellation of dependent tasks. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal ExitOptions(BatchJobAction? jobAction, DependencyAction? dependencyAction, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            JobAction = jobAction;
            DependencyAction = dependencyAction;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> An action to take on the Job containing the Task, if the Task completes with the given exit condition and the Job's onTaskFailed property is 'performExitOptionsJobAction'. The default is none for exit code 0 and terminate for all other exit conditions. If the Job's onTaskFailed property is noaction, then specifying this property returns an error and the add Task request fails with an invalid property value error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request). </summary>
        public BatchJobAction? JobAction { get; set; }

        /// <summary> An action that the Batch service performs on Tasks that depend on this Task. Possible values are 'satisfy' (allowing dependent tasks to progress) and 'block' (dependent tasks continue to wait). Batch does not yet support cancellation of dependent tasks. </summary>
        public DependencyAction? DependencyAction { get; set; }
    }
}
