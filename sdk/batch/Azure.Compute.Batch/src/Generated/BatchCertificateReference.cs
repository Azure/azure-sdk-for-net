// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Compute.Batch
{
    /// <summary> A reference to a Certificate to be installed on Compute Nodes in a Pool. Warning: This object is deprecated and will be removed after February, 2024. Please use the [Azure KeyVault Extension](https://learn.microsoft.com/azure/batch/batch-certificate-migration-guide) instead. </summary>
    public partial class BatchCertificateReference
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="BatchCertificateReference"/>. </summary>
        /// <param name="thumbprint"> The thumbprint of the Certificate. </param>
        /// <param name="thumbprintAlgorithm"> The algorithm with which the thumbprint is associated. This must be sha1. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="thumbprint"/> or <paramref name="thumbprintAlgorithm"/> is null. </exception>
        public BatchCertificateReference(string thumbprint, string thumbprintAlgorithm)
        {
            Argument.AssertNotNull(thumbprint, nameof(thumbprint));
            Argument.AssertNotNull(thumbprintAlgorithm, nameof(thumbprintAlgorithm));

            Thumbprint = thumbprint;
            ThumbprintAlgorithm = thumbprintAlgorithm;
            Visibility = new ChangeTrackingList<BatchCertificateVisibility>();
        }

        /// <summary> Initializes a new instance of <see cref="BatchCertificateReference"/>. </summary>
        /// <param name="thumbprint"> The thumbprint of the Certificate. </param>
        /// <param name="thumbprintAlgorithm"> The algorithm with which the thumbprint is associated. This must be sha1. </param>
        /// <param name="storeLocation"> The location of the Certificate store on the Compute Node into which to install the Certificate. The default value is currentuser. This property is applicable only for Pools configured with Windows Compute Nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows Image reference). For Linux Compute Nodes, the Certificates are stored in a directory inside the Task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the Task to query for this location. For Certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and Certificates are placed in that directory. </param>
        /// <param name="storeName"> The name of the Certificate store on the Compute Node into which to install the Certificate. This property is applicable only for Pools configured with Windows Compute Nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows Image reference). Common store names include: My, Root, CA, Trust, Disallowed, TrustedPeople, TrustedPublisher, AuthRoot, AddressBook, but any custom store name can also be used. The default value is My. </param>
        /// <param name="visibility"> Which user Accounts on the Compute Node should have access to the private data of the Certificate. You can specify more than one visibility in this collection. The default is all Accounts. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal BatchCertificateReference(string thumbprint, string thumbprintAlgorithm, BatchCertificateStoreLocation? storeLocation, string storeName, IList<BatchCertificateVisibility> visibility, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Thumbprint = thumbprint;
            ThumbprintAlgorithm = thumbprintAlgorithm;
            StoreLocation = storeLocation;
            StoreName = storeName;
            Visibility = visibility;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="BatchCertificateReference"/> for deserialization. </summary>
        internal BatchCertificateReference()
        {
        }

        /// <summary> The thumbprint of the Certificate. </summary>
        public string Thumbprint { get; set; }
        /// <summary> The algorithm with which the thumbprint is associated. This must be sha1. </summary>
        public string ThumbprintAlgorithm { get; set; }
        /// <summary> The location of the Certificate store on the Compute Node into which to install the Certificate. The default value is currentuser. This property is applicable only for Pools configured with Windows Compute Nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows Image reference). For Linux Compute Nodes, the Certificates are stored in a directory inside the Task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the Task to query for this location. For Certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and Certificates are placed in that directory. </summary>
        public BatchCertificateStoreLocation? StoreLocation { get; set; }
        /// <summary> The name of the Certificate store on the Compute Node into which to install the Certificate. This property is applicable only for Pools configured with Windows Compute Nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows Image reference). Common store names include: My, Root, CA, Trust, Disallowed, TrustedPeople, TrustedPublisher, AuthRoot, AddressBook, but any custom store name can also be used. The default value is My. </summary>
        public string StoreName { get; set; }
        /// <summary> Which user Accounts on the Compute Node should have access to the private data of the Certificate. You can specify more than one visibility in this collection. The default is all Accounts. </summary>
        public IList<BatchCertificateVisibility> Visibility { get; }
    }
}
