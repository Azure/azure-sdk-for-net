// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure;
using Azure.Batch;
using Azure.Core;

namespace Client
{
    /// <summary></summary>
    public partial class BatchClient
    {
        private static ResponseClassifier _pipelineMessageClassifier200;
        private static ResponseClassifier _pipelineMessageClassifier201;
        private static ResponseClassifier _pipelineMessageClassifier202;
        private static ResponseClassifier _pipelineMessageClassifier204;

        private static ResponseClassifier PipelineMessageClassifier200 => _pipelineMessageClassifier200 = new StatusCodeClassifier(stackalloc ushort[] { 200 });

        private static ResponseClassifier PipelineMessageClassifier201 => _pipelineMessageClassifier201 = new StatusCodeClassifier(stackalloc ushort[] { 201 });

        private static ResponseClassifier PipelineMessageClassifier202 => _pipelineMessageClassifier202 = new StatusCodeClassifier(stackalloc ushort[] { 202 });

        private static ResponseClassifier PipelineMessageClassifier204 => _pipelineMessageClassifier204 = new StatusCodeClassifier(stackalloc ushort[] { 204 });

        internal HttpMessage CreateGetApplicationsRequest(int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, int? maxresults, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/applications", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            if (maxresults != null)
            {
                uri.AppendQuery("maxresults", Azure.Batch.TypeFormatters.ConvertToString(maxresults, null), true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateNextGetApplicationsRequest(Uri nextPage, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, int? maxresults, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(nextPage);
            request.Uri = uri;
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetApplicationRequest(string applicationId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/applications/", false);
            uri.AppendPath(applicationId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateListPoolUsageMetricsRequest(int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, int? maxresults, DateTimeOffset? starttime, DateTimeOffset? endtime, string filter, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/poolusagemetrics", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            if (maxresults != null)
            {
                uri.AppendQuery("maxresults", Azure.Batch.TypeFormatters.ConvertToString(maxresults, null), true);
            }
            if (starttime != null)
            {
                uri.AppendQuery("startTime", Azure.Batch.TypeFormatters.ConvertToString(starttime, "O"), true);
            }
            if (endtime != null)
            {
                uri.AppendQuery("endtime", Azure.Batch.TypeFormatters.ConvertToString(endtime, "O"), true);
            }
            if (filter != null)
            {
                uri.AppendQuery("$filter", filter, true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateNextListPoolUsageMetricsRequest(Uri nextPage, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, int? maxresults, DateTimeOffset? starttime, DateTimeOffset? endtime, string filter, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(nextPage);
            request.Uri = uri;
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCreatePoolRequest(RequestContent content, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier201);
            Request request = message.Request;
            request.Method = RequestMethod.Post;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/pools", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            request.Headers.SetValue("Content-Type", "application/json; odata=minimalmetadata");
            request.Headers.SetValue("Accept", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateListPoolsRequest(int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, int? maxresults, string filter, IEnumerable<string> @select, IEnumerable<string> expand, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/pools", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            if (maxresults != null)
            {
                uri.AppendQuery("maxresults", Azure.Batch.TypeFormatters.ConvertToString(maxresults, null), true);
            }
            if (filter != null)
            {
                uri.AppendQuery("$filter", filter, true);
            }
            if (@select != null && !(@select is ChangeTrackingList<string> changeTrackingList && changeTrackingList.IsUndefined))
            {
                uri.AppendQueryDelimited("$select", @select, ",", null, true);
            }
            if (expand != null && !(expand is ChangeTrackingList<string> changeTrackingList0 && changeTrackingList0.IsUndefined))
            {
                uri.AppendQueryDelimited("$expand", expand, ",", null, true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateNextListPoolsRequest(Uri nextPage, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, int? maxresults, string filter, IEnumerable<string> @select, IEnumerable<string> expand, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(nextPage);
            request.Uri = uri;
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateDeletePoolRequest(string poolId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ifMatch, string ifNoneMatch, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier202);
            Request request = message.Request;
            request.Method = RequestMethod.Delete;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/pools/", false);
            uri.AppendPath(poolId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            if (ifModifiedSince != null)
            {
                request.Headers.SetValue("If-Modified-Since", Azure.Batch.TypeFormatters.ConvertToString(ifModifiedSince, "R"));
            }
            if (ifUnmodifiedSince != null)
            {
                request.Headers.SetValue("If-Unmodified-Since", Azure.Batch.TypeFormatters.ConvertToString(ifUnmodifiedSince, "R"));
            }
            if (ifMatch != null)
            {
                request.Headers.SetValue("If-Match", ifMatch);
            }
            if (ifNoneMatch != null)
            {
                request.Headers.SetValue("If-None-Match", ifNoneMatch);
            }
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreatePoolExistsRequest(string poolId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ifMatch, string ifNoneMatch, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Head;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/pools/", false);
            uri.AppendPath(poolId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            if (ifModifiedSince != null)
            {
                request.Headers.SetValue("If-Modified-Since", Azure.Batch.TypeFormatters.ConvertToString(ifModifiedSince, "R"));
            }
            if (ifUnmodifiedSince != null)
            {
                request.Headers.SetValue("If-Unmodified-Since", Azure.Batch.TypeFormatters.ConvertToString(ifUnmodifiedSince, "R"));
            }
            if (ifMatch != null)
            {
                request.Headers.SetValue("If-Match", ifMatch);
            }
            if (ifNoneMatch != null)
            {
                request.Headers.SetValue("If-None-Match", ifNoneMatch);
            }
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetPoolRequest(string poolId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ifMatch, string ifNoneMatch, IEnumerable<string> @select, IEnumerable<string> expand, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/pools/", false);
            uri.AppendPath(poolId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            if (@select != null && !(@select is ChangeTrackingList<string> changeTrackingList && changeTrackingList.IsUndefined))
            {
                uri.AppendQueryDelimited("$select", @select, ",", null, true);
            }
            if (expand != null && !(expand is ChangeTrackingList<string> changeTrackingList0 && changeTrackingList0.IsUndefined))
            {
                uri.AppendQueryDelimited("$expand", expand, ",", null, true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            if (ifModifiedSince != null)
            {
                request.Headers.SetValue("If-Modified-Since", Azure.Batch.TypeFormatters.ConvertToString(ifModifiedSince, "R"));
            }
            if (ifUnmodifiedSince != null)
            {
                request.Headers.SetValue("If-Unmodified-Since", Azure.Batch.TypeFormatters.ConvertToString(ifUnmodifiedSince, "R"));
            }
            if (ifMatch != null)
            {
                request.Headers.SetValue("If-Match", ifMatch);
            }
            if (ifNoneMatch != null)
            {
                request.Headers.SetValue("If-None-Match", ifNoneMatch);
            }
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateUpdatePoolRequest(string poolId, RequestContent content, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ifMatch, string ifNoneMatch, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Patch;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/pools/", false);
            uri.AppendPath(poolId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            request.Headers.SetValue("Content-Type", "application/json; odata=minimalmetadata");
            if (ifModifiedSince != null)
            {
                request.Headers.SetValue("If-Modified-Since", Azure.Batch.TypeFormatters.ConvertToString(ifModifiedSince, "R"));
            }
            if (ifUnmodifiedSince != null)
            {
                request.Headers.SetValue("If-Unmodified-Since", Azure.Batch.TypeFormatters.ConvertToString(ifUnmodifiedSince, "R"));
            }
            if (ifMatch != null)
            {
                request.Headers.SetValue("If-Match", ifMatch);
            }
            if (ifNoneMatch != null)
            {
                request.Headers.SetValue("If-None-Match", ifNoneMatch);
            }
            request.Headers.SetValue("Accept", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDisablePoolAutoScaleRequest(string poolId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Post;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/pools/", false);
            uri.AppendPath(poolId, true);
            uri.AppendPath("/disableautoscale", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateEnablePoolAutoScaleRequest(string poolId, RequestContent content, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ifMatch, string ifNoneMatch, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Post;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/pools/", false);
            uri.AppendPath(poolId, true);
            uri.AppendPath("/enableautoscale", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            request.Headers.SetValue("Content-Type", "application/json; odata=minimalmetadata");
            if (ifModifiedSince != null)
            {
                request.Headers.SetValue("If-Modified-Since", Azure.Batch.TypeFormatters.ConvertToString(ifModifiedSince, "R"));
            }
            if (ifUnmodifiedSince != null)
            {
                request.Headers.SetValue("If-Unmodified-Since", Azure.Batch.TypeFormatters.ConvertToString(ifUnmodifiedSince, "R"));
            }
            if (ifMatch != null)
            {
                request.Headers.SetValue("If-Match", ifMatch);
            }
            if (ifNoneMatch != null)
            {
                request.Headers.SetValue("If-None-Match", ifNoneMatch);
            }
            request.Headers.SetValue("Accept", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateEvaluatePoolAutoScaleRequest(string poolId, RequestContent content, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Post;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/pools/", false);
            uri.AppendPath(poolId, true);
            uri.AppendPath("/evaluateautoscale", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            request.Headers.SetValue("Content-Type", "application/json; odata=minimalmetadata");
            request.Headers.SetValue("Accept", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateResizePoolRequest(string poolId, RequestContent content, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ifMatch, string ifNoneMatch, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier202);
            Request request = message.Request;
            request.Method = RequestMethod.Post;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/pools/", false);
            uri.AppendPath(poolId, true);
            uri.AppendPath("/resize", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            request.Headers.SetValue("Content-Type", "application/json; odata=minimalmetadata");
            if (ifModifiedSince != null)
            {
                request.Headers.SetValue("If-Modified-Since", Azure.Batch.TypeFormatters.ConvertToString(ifModifiedSince, "R"));
            }
            if (ifUnmodifiedSince != null)
            {
                request.Headers.SetValue("If-Unmodified-Since", Azure.Batch.TypeFormatters.ConvertToString(ifUnmodifiedSince, "R"));
            }
            if (ifMatch != null)
            {
                request.Headers.SetValue("If-Match", ifMatch);
            }
            if (ifNoneMatch != null)
            {
                request.Headers.SetValue("If-None-Match", ifNoneMatch);
            }
            request.Headers.SetValue("Accept", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateStopPoolResizeRequest(string poolId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ifMatch, string ifNoneMatch, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier202);
            Request request = message.Request;
            request.Method = RequestMethod.Post;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/pools/", false);
            uri.AppendPath(poolId, true);
            uri.AppendPath("/stopresize", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            if (ifModifiedSince != null)
            {
                request.Headers.SetValue("If-Modified-Since", Azure.Batch.TypeFormatters.ConvertToString(ifModifiedSince, "R"));
            }
            if (ifUnmodifiedSince != null)
            {
                request.Headers.SetValue("If-Unmodified-Since", Azure.Batch.TypeFormatters.ConvertToString(ifUnmodifiedSince, "R"));
            }
            if (ifMatch != null)
            {
                request.Headers.SetValue("If-Match", ifMatch);
            }
            if (ifNoneMatch != null)
            {
                request.Headers.SetValue("If-None-Match", ifNoneMatch);
            }
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateReplacePoolPropertiesRequest(string poolId, RequestContent content, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier204);
            Request request = message.Request;
            request.Method = RequestMethod.Post;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/pools/", false);
            uri.AppendPath(poolId, true);
            uri.AppendPath("/updateproperties", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            request.Headers.SetValue("Content-Type", "application/json; odata=minimalmetadata");
            request.Headers.SetValue("Accept", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateRemoveNodesRequest(string poolId, RequestContent content, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ifMatch, string ifNoneMatch, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier202);
            Request request = message.Request;
            request.Method = RequestMethod.Post;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/pools/", false);
            uri.AppendPath(poolId, true);
            uri.AppendPath("/removenodes", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            request.Headers.SetValue("Content-Type", "application/json; odata=minimalmetadata");
            if (ifModifiedSince != null)
            {
                request.Headers.SetValue("If-Modified-Since", Azure.Batch.TypeFormatters.ConvertToString(ifModifiedSince, "R"));
            }
            if (ifUnmodifiedSince != null)
            {
                request.Headers.SetValue("If-Unmodified-Since", Azure.Batch.TypeFormatters.ConvertToString(ifUnmodifiedSince, "R"));
            }
            if (ifMatch != null)
            {
                request.Headers.SetValue("If-Match", ifMatch);
            }
            if (ifNoneMatch != null)
            {
                request.Headers.SetValue("If-None-Match", ifNoneMatch);
            }
            request.Headers.SetValue("Accept", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateListSupportedImagesRequest(int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, int? maxresults, string filter, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/supportedimages", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            if (maxresults != null)
            {
                uri.AppendQuery("maxresults", Azure.Batch.TypeFormatters.ConvertToString(maxresults, null), true);
            }
            if (filter != null)
            {
                uri.AppendQuery("$filter", filter, true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateNextListSupportedImagesRequest(Uri nextPage, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, int? maxresults, string filter, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(nextPage);
            request.Uri = uri;
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateListPoolNodeCountsRequest(int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, int? maxresults, string filter, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/nodecounts", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            if (maxresults != null)
            {
                uri.AppendQuery("maxresults", Azure.Batch.TypeFormatters.ConvertToString(maxresults, null), true);
            }
            if (filter != null)
            {
                uri.AppendQuery("$filter", filter, true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateNextListPoolNodeCountsRequest(Uri nextPage, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, int? maxresults, string filter, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(nextPage);
            request.Uri = uri;
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateDeleteJobRequest(string jobId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ifMatch, string ifNoneMatch, bool? force, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier202);
            Request request = message.Request;
            request.Method = RequestMethod.Delete;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/jobs/", false);
            uri.AppendPath(jobId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            if (force != null)
            {
                uri.AppendQuery("force", Azure.Batch.TypeFormatters.ConvertToString(force, null), true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            if (ifModifiedSince != null)
            {
                request.Headers.SetValue("If-Modified-Since", Azure.Batch.TypeFormatters.ConvertToString(ifModifiedSince, "R"));
            }
            if (ifUnmodifiedSince != null)
            {
                request.Headers.SetValue("If-Unmodified-Since", Azure.Batch.TypeFormatters.ConvertToString(ifUnmodifiedSince, "R"));
            }
            if (ifMatch != null)
            {
                request.Headers.SetValue("If-Match", ifMatch);
            }
            if (ifNoneMatch != null)
            {
                request.Headers.SetValue("If-None-Match", ifNoneMatch);
            }
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetJobRequest(string jobId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ifMatch, string ifNoneMatch, IEnumerable<string> @select, IEnumerable<string> expand, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/jobs/", false);
            uri.AppendPath(jobId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            if (@select != null && !(@select is ChangeTrackingList<string> changeTrackingList && changeTrackingList.IsUndefined))
            {
                uri.AppendQueryDelimited("$select", @select, ",", null, true);
            }
            if (expand != null && !(expand is ChangeTrackingList<string> changeTrackingList0 && changeTrackingList0.IsUndefined))
            {
                uri.AppendQueryDelimited("$expand", expand, ",", null, true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            if (ifModifiedSince != null)
            {
                request.Headers.SetValue("If-Modified-Since", Azure.Batch.TypeFormatters.ConvertToString(ifModifiedSince, "R"));
            }
            if (ifUnmodifiedSince != null)
            {
                request.Headers.SetValue("If-Unmodified-Since", Azure.Batch.TypeFormatters.ConvertToString(ifUnmodifiedSince, "R"));
            }
            if (ifMatch != null)
            {
                request.Headers.SetValue("If-Match", ifMatch);
            }
            if (ifNoneMatch != null)
            {
                request.Headers.SetValue("If-None-Match", ifNoneMatch);
            }
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateUpdateJobRequest(string jobId, RequestContent content, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ifMatch, string ifNoneMatch, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Patch;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/jobs/", false);
            uri.AppendPath(jobId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            request.Headers.SetValue("Content-Type", "application/json; odata=minimalmetadata");
            if (ifModifiedSince != null)
            {
                request.Headers.SetValue("If-Modified-Since", Azure.Batch.TypeFormatters.ConvertToString(ifModifiedSince, "R"));
            }
            if (ifUnmodifiedSince != null)
            {
                request.Headers.SetValue("If-Unmodified-Since", Azure.Batch.TypeFormatters.ConvertToString(ifUnmodifiedSince, "R"));
            }
            if (ifMatch != null)
            {
                request.Headers.SetValue("If-Match", ifMatch);
            }
            if (ifNoneMatch != null)
            {
                request.Headers.SetValue("If-None-Match", ifNoneMatch);
            }
            request.Headers.SetValue("Accept", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateReplaceJobRequest(string jobId, RequestContent content, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ifMatch, string ifNoneMatch, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Put;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/jobs/", false);
            uri.AppendPath(jobId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            request.Headers.SetValue("Content-Type", "application/json; odata=minimalmetadata");
            if (ifModifiedSince != null)
            {
                request.Headers.SetValue("If-Modified-Since", Azure.Batch.TypeFormatters.ConvertToString(ifModifiedSince, "R"));
            }
            if (ifUnmodifiedSince != null)
            {
                request.Headers.SetValue("If-Unmodified-Since", Azure.Batch.TypeFormatters.ConvertToString(ifUnmodifiedSince, "R"));
            }
            if (ifMatch != null)
            {
                request.Headers.SetValue("If-Match", ifMatch);
            }
            if (ifNoneMatch != null)
            {
                request.Headers.SetValue("If-None-Match", ifNoneMatch);
            }
            request.Headers.SetValue("Accept", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDisableJobRequest(string jobId, RequestContent content, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ifMatch, string ifNoneMatch, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier202);
            Request request = message.Request;
            request.Method = RequestMethod.Post;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/jobs/", false);
            uri.AppendPath(jobId, true);
            uri.AppendPath("/disable", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            request.Headers.SetValue("Content-Type", "application/json; odata=minimalmetadata");
            if (ifModifiedSince != null)
            {
                request.Headers.SetValue("If-Modified-Since", Azure.Batch.TypeFormatters.ConvertToString(ifModifiedSince, "R"));
            }
            if (ifUnmodifiedSince != null)
            {
                request.Headers.SetValue("If-Unmodified-Since", Azure.Batch.TypeFormatters.ConvertToString(ifUnmodifiedSince, "R"));
            }
            if (ifMatch != null)
            {
                request.Headers.SetValue("If-Match", ifMatch);
            }
            if (ifNoneMatch != null)
            {
                request.Headers.SetValue("If-None-Match", ifNoneMatch);
            }
            request.Headers.SetValue("Accept", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateEnableJobRequest(string jobId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ifMatch, string ifNoneMatch, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier202);
            Request request = message.Request;
            request.Method = RequestMethod.Post;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/jobs/", false);
            uri.AppendPath(jobId, true);
            uri.AppendPath("/enable", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            if (ifModifiedSince != null)
            {
                request.Headers.SetValue("If-Modified-Since", Azure.Batch.TypeFormatters.ConvertToString(ifModifiedSince, "R"));
            }
            if (ifUnmodifiedSince != null)
            {
                request.Headers.SetValue("If-Unmodified-Since", Azure.Batch.TypeFormatters.ConvertToString(ifUnmodifiedSince, "R"));
            }
            if (ifMatch != null)
            {
                request.Headers.SetValue("If-Match", ifMatch);
            }
            if (ifNoneMatch != null)
            {
                request.Headers.SetValue("If-None-Match", ifNoneMatch);
            }
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateTerminateJobRequest(string jobId, RequestContent content, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ifMatch, string ifNoneMatch, bool? force, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier202);
            Request request = message.Request;
            request.Method = RequestMethod.Post;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/jobs/", false);
            uri.AppendPath(jobId, true);
            uri.AppendPath("/terminate", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            if (force != null)
            {
                uri.AppendQuery("force", Azure.Batch.TypeFormatters.ConvertToString(force, null), true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            request.Headers.SetValue("Content-Type", "application/json; odata=minimalmetadata");
            if (ifModifiedSince != null)
            {
                request.Headers.SetValue("If-Modified-Since", Azure.Batch.TypeFormatters.ConvertToString(ifModifiedSince, "R"));
            }
            if (ifUnmodifiedSince != null)
            {
                request.Headers.SetValue("If-Unmodified-Since", Azure.Batch.TypeFormatters.ConvertToString(ifUnmodifiedSince, "R"));
            }
            if (ifMatch != null)
            {
                request.Headers.SetValue("If-Match", ifMatch);
            }
            if (ifNoneMatch != null)
            {
                request.Headers.SetValue("If-None-Match", ifNoneMatch);
            }
            request.Headers.SetValue("Accept", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateCreateJobRequest(RequestContent content, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier201);
            Request request = message.Request;
            request.Method = RequestMethod.Post;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/jobs", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            request.Headers.SetValue("Content-Type", "application/json; odata=minimalmetadata");
            request.Headers.SetValue("Accept", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateListJobsRequest(int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, int? maxresults, string filter, IEnumerable<string> @select, IEnumerable<string> expand, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/jobs", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            if (maxresults != null)
            {
                uri.AppendQuery("maxresults", Azure.Batch.TypeFormatters.ConvertToString(maxresults, null), true);
            }
            if (filter != null)
            {
                uri.AppendQuery("$filter", filter, true);
            }
            if (@select != null && !(@select is ChangeTrackingList<string> changeTrackingList && changeTrackingList.IsUndefined))
            {
                uri.AppendQueryDelimited("$select", @select, ",", null, true);
            }
            if (expand != null && !(expand is ChangeTrackingList<string> changeTrackingList0 && changeTrackingList0.IsUndefined))
            {
                uri.AppendQueryDelimited("$expand", expand, ",", null, true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateNextListJobsRequest(Uri nextPage, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, int? maxresults, string filter, IEnumerable<string> @select, IEnumerable<string> expand, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(nextPage);
            request.Uri = uri;
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateListJobsFromScheduleRequest(string jobScheduleId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, int? maxresults, string filter, IEnumerable<string> @select, IEnumerable<string> expand, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/jobschedules/", false);
            uri.AppendPath(jobScheduleId, true);
            uri.AppendPath("/jobs", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            if (maxresults != null)
            {
                uri.AppendQuery("maxresults", Azure.Batch.TypeFormatters.ConvertToString(maxresults, null), true);
            }
            if (filter != null)
            {
                uri.AppendQuery("$filter", filter, true);
            }
            if (@select != null && !(@select is ChangeTrackingList<string> changeTrackingList && changeTrackingList.IsUndefined))
            {
                uri.AppendQueryDelimited("$select", @select, ",", null, true);
            }
            if (expand != null && !(expand is ChangeTrackingList<string> changeTrackingList0 && changeTrackingList0.IsUndefined))
            {
                uri.AppendQueryDelimited("$expand", expand, ",", null, true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateNextListJobsFromScheduleRequest(Uri nextPage, string jobScheduleId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, int? maxresults, string filter, IEnumerable<string> @select, IEnumerable<string> expand, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(nextPage);
            request.Uri = uri;
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateListJobPreparationAndReleaseTaskStatusRequest(string jobId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, int? maxresults, string filter, IEnumerable<string> @select, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/jobs/", false);
            uri.AppendPath(jobId, true);
            uri.AppendPath("/jobpreparationandreleasetaskstatus", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            if (maxresults != null)
            {
                uri.AppendQuery("maxresults", Azure.Batch.TypeFormatters.ConvertToString(maxresults, null), true);
            }
            if (filter != null)
            {
                uri.AppendQuery("$filter", filter, true);
            }
            if (@select != null && !(@select is ChangeTrackingList<string> changeTrackingList && changeTrackingList.IsUndefined))
            {
                uri.AppendQueryDelimited("$select", @select, ",", null, true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateNextListJobPreparationAndReleaseTaskStatusRequest(Uri nextPage, string jobId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, int? maxresults, string filter, IEnumerable<string> @select, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(nextPage);
            request.Uri = uri;
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetJobTaskCountsRequest(string jobId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/jobs/", false);
            uri.AppendPath(jobId, true);
            uri.AppendPath("/taskcounts", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCreateCertificateRequest(RequestContent content, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier201);
            Request request = message.Request;
            request.Method = RequestMethod.Post;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/certificates", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            request.Headers.SetValue("Content-Type", "application/json; odata=minimalmetadata");
            request.Headers.SetValue("Accept", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateListCertificatesRequest(int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, int? maxresults, string filter, IEnumerable<string> @select, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/certificates", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            if (maxresults != null)
            {
                uri.AppendQuery("maxresults", Azure.Batch.TypeFormatters.ConvertToString(maxresults, null), true);
            }
            if (filter != null)
            {
                uri.AppendQuery("$filter", filter, true);
            }
            if (@select != null && !(@select is ChangeTrackingList<string> changeTrackingList && changeTrackingList.IsUndefined))
            {
                uri.AppendQueryDelimited("$select", @select, ",", null, true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateNextListCertificatesRequest(Uri nextPage, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, int? maxresults, string filter, IEnumerable<string> @select, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(nextPage);
            request.Uri = uri;
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCancelCertificateDeletionRequest(string thumbprintAlgorithm, string thumbprint, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier204);
            Request request = message.Request;
            request.Method = RequestMethod.Post;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/certificates(thumbprintAlgorithm=", false);
            uri.AppendPath(thumbprintAlgorithm, true);
            uri.AppendPath(",thumbprint=", false);
            uri.AppendPath(thumbprint, true);
            uri.AppendPath(")/canceldelete", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateDeleteCertificateRequest(string thumbprintAlgorithm, string thumbprint, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier202);
            Request request = message.Request;
            request.Method = RequestMethod.Delete;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/certificates(thumbprintAlgorithm=", false);
            uri.AppendPath(thumbprintAlgorithm, true);
            uri.AppendPath(",thumbprint=", false);
            uri.AppendPath(thumbprint, true);
            uri.AppendPath(")", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetCertificateRequest(string thumbprintAlgorithm, string thumbprint, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, IEnumerable<string> @select, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/certificates(thumbprintAlgorithm=", false);
            uri.AppendPath(thumbprintAlgorithm, true);
            uri.AppendPath(",thumbprint=", false);
            uri.AppendPath(thumbprint, true);
            uri.AppendPath(")", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            if (@select != null && !(@select is ChangeTrackingList<string> changeTrackingList && changeTrackingList.IsUndefined))
            {
                uri.AppendQueryDelimited("$select", @select, ",", null, true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateJobScheduleExistsRequest(string jobScheduleId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ifMatch, string ifNoneMatch, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Head;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/jobschedules/", false);
            uri.AppendPath(jobScheduleId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            if (ifModifiedSince != null)
            {
                request.Headers.SetValue("If-Modified-Since", Azure.Batch.TypeFormatters.ConvertToString(ifModifiedSince, "R"));
            }
            if (ifUnmodifiedSince != null)
            {
                request.Headers.SetValue("If-Unmodified-Since", Azure.Batch.TypeFormatters.ConvertToString(ifUnmodifiedSince, "R"));
            }
            if (ifMatch != null)
            {
                request.Headers.SetValue("If-Match", ifMatch);
            }
            if (ifNoneMatch != null)
            {
                request.Headers.SetValue("If-None-Match", ifNoneMatch);
            }
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateDeleteJobScheduleRequest(string jobScheduleId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ifMatch, string ifNoneMatch, bool? force, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier202);
            Request request = message.Request;
            request.Method = RequestMethod.Delete;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/jobschedules/", false);
            uri.AppendPath(jobScheduleId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            if (force != null)
            {
                uri.AppendQuery("force", Azure.Batch.TypeFormatters.ConvertToString(force, null), true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            if (ifModifiedSince != null)
            {
                request.Headers.SetValue("If-Modified-Since", Azure.Batch.TypeFormatters.ConvertToString(ifModifiedSince, "R"));
            }
            if (ifUnmodifiedSince != null)
            {
                request.Headers.SetValue("If-Unmodified-Since", Azure.Batch.TypeFormatters.ConvertToString(ifUnmodifiedSince, "R"));
            }
            if (ifMatch != null)
            {
                request.Headers.SetValue("If-Match", ifMatch);
            }
            if (ifNoneMatch != null)
            {
                request.Headers.SetValue("If-None-Match", ifNoneMatch);
            }
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetJobScheduleRequest(string jobScheduleId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ifMatch, string ifNoneMatch, IEnumerable<string> @select, IEnumerable<string> expand, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/jobschedules/", false);
            uri.AppendPath(jobScheduleId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            if (@select != null && !(@select is ChangeTrackingList<string> changeTrackingList && changeTrackingList.IsUndefined))
            {
                uri.AppendQueryDelimited("$select", @select, ",", null, true);
            }
            if (expand != null && !(expand is ChangeTrackingList<string> changeTrackingList0 && changeTrackingList0.IsUndefined))
            {
                uri.AppendQueryDelimited("$expand", expand, ",", null, true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            if (ifModifiedSince != null)
            {
                request.Headers.SetValue("If-Modified-Since", Azure.Batch.TypeFormatters.ConvertToString(ifModifiedSince, "R"));
            }
            if (ifUnmodifiedSince != null)
            {
                request.Headers.SetValue("If-Unmodified-Since", Azure.Batch.TypeFormatters.ConvertToString(ifUnmodifiedSince, "R"));
            }
            if (ifMatch != null)
            {
                request.Headers.SetValue("If-Match", ifMatch);
            }
            if (ifNoneMatch != null)
            {
                request.Headers.SetValue("If-None-Match", ifNoneMatch);
            }
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateUpdateJobScheduleRequest(string jobScheduleId, RequestContent content, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ifMatch, string ifNoneMatch, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Patch;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/jobschedules/", false);
            uri.AppendPath(jobScheduleId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            request.Headers.SetValue("Content-Type", "application/json; odata=minimalmetadata");
            if (ifModifiedSince != null)
            {
                request.Headers.SetValue("If-Modified-Since", Azure.Batch.TypeFormatters.ConvertToString(ifModifiedSince, "R"));
            }
            if (ifUnmodifiedSince != null)
            {
                request.Headers.SetValue("If-Unmodified-Since", Azure.Batch.TypeFormatters.ConvertToString(ifUnmodifiedSince, "R"));
            }
            if (ifMatch != null)
            {
                request.Headers.SetValue("If-Match", ifMatch);
            }
            if (ifNoneMatch != null)
            {
                request.Headers.SetValue("If-None-Match", ifNoneMatch);
            }
            request.Headers.SetValue("Accept", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateReplaceJobScheduleRequest(string jobScheduleId, RequestContent content, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ifMatch, string ifNoneMatch, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Put;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/jobschedules/", false);
            uri.AppendPath(jobScheduleId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            request.Headers.SetValue("Content-Type", "application/json; odata=minimalmetadata");
            if (ifModifiedSince != null)
            {
                request.Headers.SetValue("If-Modified-Since", Azure.Batch.TypeFormatters.ConvertToString(ifModifiedSince, "R"));
            }
            if (ifUnmodifiedSince != null)
            {
                request.Headers.SetValue("If-Unmodified-Since", Azure.Batch.TypeFormatters.ConvertToString(ifUnmodifiedSince, "R"));
            }
            if (ifMatch != null)
            {
                request.Headers.SetValue("If-Match", ifMatch);
            }
            if (ifNoneMatch != null)
            {
                request.Headers.SetValue("If-None-Match", ifNoneMatch);
            }
            request.Headers.SetValue("Accept", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDisableJobScheduleRequest(string jobScheduleId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ifMatch, string ifNoneMatch, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier204);
            Request request = message.Request;
            request.Method = RequestMethod.Post;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/jobschedules/", false);
            uri.AppendPath(jobScheduleId, true);
            uri.AppendPath("/disable", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            if (ifModifiedSince != null)
            {
                request.Headers.SetValue("If-Modified-Since", Azure.Batch.TypeFormatters.ConvertToString(ifModifiedSince, "R"));
            }
            if (ifUnmodifiedSince != null)
            {
                request.Headers.SetValue("If-Unmodified-Since", Azure.Batch.TypeFormatters.ConvertToString(ifUnmodifiedSince, "R"));
            }
            if (ifMatch != null)
            {
                request.Headers.SetValue("If-Match", ifMatch);
            }
            if (ifNoneMatch != null)
            {
                request.Headers.SetValue("If-None-Match", ifNoneMatch);
            }
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateEnableJobScheduleRequest(string jobScheduleId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ifMatch, string ifNoneMatch, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier204);
            Request request = message.Request;
            request.Method = RequestMethod.Post;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/jobschedules/", false);
            uri.AppendPath(jobScheduleId, true);
            uri.AppendPath("/enable", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            if (ifModifiedSince != null)
            {
                request.Headers.SetValue("If-Modified-Since", Azure.Batch.TypeFormatters.ConvertToString(ifModifiedSince, "R"));
            }
            if (ifUnmodifiedSince != null)
            {
                request.Headers.SetValue("If-Unmodified-Since", Azure.Batch.TypeFormatters.ConvertToString(ifUnmodifiedSince, "R"));
            }
            if (ifMatch != null)
            {
                request.Headers.SetValue("If-Match", ifMatch);
            }
            if (ifNoneMatch != null)
            {
                request.Headers.SetValue("If-None-Match", ifNoneMatch);
            }
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateTerminateJobScheduleRequest(string jobScheduleId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ifMatch, string ifNoneMatch, bool? force, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier202);
            Request request = message.Request;
            request.Method = RequestMethod.Post;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/jobschedules/", false);
            uri.AppendPath(jobScheduleId, true);
            uri.AppendPath("/terminate", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            if (force != null)
            {
                uri.AppendQuery("force", Azure.Batch.TypeFormatters.ConvertToString(force, null), true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            if (ifModifiedSince != null)
            {
                request.Headers.SetValue("If-Modified-Since", Azure.Batch.TypeFormatters.ConvertToString(ifModifiedSince, "R"));
            }
            if (ifUnmodifiedSince != null)
            {
                request.Headers.SetValue("If-Unmodified-Since", Azure.Batch.TypeFormatters.ConvertToString(ifUnmodifiedSince, "R"));
            }
            if (ifMatch != null)
            {
                request.Headers.SetValue("If-Match", ifMatch);
            }
            if (ifNoneMatch != null)
            {
                request.Headers.SetValue("If-None-Match", ifNoneMatch);
            }
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCreateJobScheduleRequest(RequestContent content, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier201);
            Request request = message.Request;
            request.Method = RequestMethod.Post;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/jobschedules", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            request.Headers.SetValue("Content-Type", "application/json; odata=minimalmetadata");
            request.Headers.SetValue("Accept", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateListJobSchedulesRequest(int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, int? maxresults, string filter, IEnumerable<string> @select, IEnumerable<string> expand, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/jobschedules", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            if (maxresults != null)
            {
                uri.AppendQuery("maxresults", Azure.Batch.TypeFormatters.ConvertToString(maxresults, null), true);
            }
            if (filter != null)
            {
                uri.AppendQuery("$filter", filter, true);
            }
            if (@select != null && !(@select is ChangeTrackingList<string> changeTrackingList && changeTrackingList.IsUndefined))
            {
                uri.AppendQueryDelimited("$select", @select, ",", null, true);
            }
            if (expand != null && !(expand is ChangeTrackingList<string> changeTrackingList0 && changeTrackingList0.IsUndefined))
            {
                uri.AppendQueryDelimited("$expand", expand, ",", null, true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateNextListJobSchedulesRequest(Uri nextPage, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, int? maxresults, string filter, IEnumerable<string> @select, IEnumerable<string> expand, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(nextPage);
            request.Uri = uri;
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCreateTaskRequest(string jobId, RequestContent content, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier201);
            Request request = message.Request;
            request.Method = RequestMethod.Post;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/jobs/", false);
            uri.AppendPath(jobId, true);
            uri.AppendPath("/tasks", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            request.Headers.SetValue("Content-Type", "application/json; odata=minimalmetadata");
            request.Headers.SetValue("Accept", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateListTasksRequest(string jobId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, int? maxresults, string filter, IEnumerable<string> @select, IEnumerable<string> expand, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/jobs/", false);
            uri.AppendPath(jobId, true);
            uri.AppendPath("/tasks", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            if (maxresults != null)
            {
                uri.AppendQuery("maxresults", Azure.Batch.TypeFormatters.ConvertToString(maxresults, null), true);
            }
            if (filter != null)
            {
                uri.AppendQuery("$filter", filter, true);
            }
            if (@select != null && !(@select is ChangeTrackingList<string> changeTrackingList && changeTrackingList.IsUndefined))
            {
                uri.AppendQueryDelimited("$select", @select, ",", null, true);
            }
            if (expand != null && !(expand is ChangeTrackingList<string> changeTrackingList0 && changeTrackingList0.IsUndefined))
            {
                uri.AppendQueryDelimited("$expand", expand, ",", null, true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateNextListTasksRequest(Uri nextPage, string jobId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, int? maxresults, string filter, IEnumerable<string> @select, IEnumerable<string> expand, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(nextPage);
            request.Uri = uri;
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCreateTaskCollectionRequest(string jobId, RequestContent content, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Post;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/jobs/", false);
            uri.AppendPath(jobId, true);
            uri.AppendPath("/addtaskcollection", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            request.Headers.SetValue("Content-Type", "application/json; odata=minimalmetadata");
            request.Headers.SetValue("Accept", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteTaskRequest(string jobId, string taskId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ifMatch, string ifNoneMatch, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Delete;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/jobs/", false);
            uri.AppendPath(jobId, true);
            uri.AppendPath("/tasks/", false);
            uri.AppendPath(taskId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            if (ifModifiedSince != null)
            {
                request.Headers.SetValue("If-Modified-Since", Azure.Batch.TypeFormatters.ConvertToString(ifModifiedSince, "R"));
            }
            if (ifUnmodifiedSince != null)
            {
                request.Headers.SetValue("If-Unmodified-Since", Azure.Batch.TypeFormatters.ConvertToString(ifUnmodifiedSince, "R"));
            }
            if (ifMatch != null)
            {
                request.Headers.SetValue("If-Match", ifMatch);
            }
            if (ifNoneMatch != null)
            {
                request.Headers.SetValue("If-None-Match", ifNoneMatch);
            }
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetTaskRequest(string jobId, string taskId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ifMatch, string ifNoneMatch, IEnumerable<string> @select, IEnumerable<string> expand, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/jobs/", false);
            uri.AppendPath(jobId, true);
            uri.AppendPath("/tasks/", false);
            uri.AppendPath(taskId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            if (@select != null && !(@select is ChangeTrackingList<string> changeTrackingList && changeTrackingList.IsUndefined))
            {
                uri.AppendQueryDelimited("$select", @select, ",", null, true);
            }
            if (expand != null && !(expand is ChangeTrackingList<string> changeTrackingList0 && changeTrackingList0.IsUndefined))
            {
                uri.AppendQueryDelimited("$expand", expand, ",", null, true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            if (ifModifiedSince != null)
            {
                request.Headers.SetValue("If-Modified-Since", Azure.Batch.TypeFormatters.ConvertToString(ifModifiedSince, "R"));
            }
            if (ifUnmodifiedSince != null)
            {
                request.Headers.SetValue("If-Unmodified-Since", Azure.Batch.TypeFormatters.ConvertToString(ifUnmodifiedSince, "R"));
            }
            if (ifMatch != null)
            {
                request.Headers.SetValue("If-Match", ifMatch);
            }
            if (ifNoneMatch != null)
            {
                request.Headers.SetValue("If-None-Match", ifNoneMatch);
            }
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateReplaceTaskRequest(string jobId, string taskId, RequestContent content, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ifMatch, string ifNoneMatch, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Put;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/jobs/", false);
            uri.AppendPath(jobId, true);
            uri.AppendPath("/tasks/", false);
            uri.AppendPath(taskId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            request.Headers.SetValue("Content-Type", "application/json; odata=minimalmetadata");
            if (ifModifiedSince != null)
            {
                request.Headers.SetValue("If-Modified-Since", Azure.Batch.TypeFormatters.ConvertToString(ifModifiedSince, "R"));
            }
            if (ifUnmodifiedSince != null)
            {
                request.Headers.SetValue("If-Unmodified-Since", Azure.Batch.TypeFormatters.ConvertToString(ifUnmodifiedSince, "R"));
            }
            if (ifMatch != null)
            {
                request.Headers.SetValue("If-Match", ifMatch);
            }
            if (ifNoneMatch != null)
            {
                request.Headers.SetValue("If-None-Match", ifNoneMatch);
            }
            request.Headers.SetValue("Accept", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateListSubTasksRequest(string jobId, string taskId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, IEnumerable<string> @select, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/jobs/", false);
            uri.AppendPath(jobId, true);
            uri.AppendPath("/tasks/", false);
            uri.AppendPath(taskId, true);
            uri.AppendPath("/subtasksinfo", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            if (@select != null && !(@select is ChangeTrackingList<string> changeTrackingList && changeTrackingList.IsUndefined))
            {
                uri.AppendQueryDelimited("$select", @select, ",", null, true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateNextListSubTasksRequest(Uri nextPage, string jobId, string taskId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, IEnumerable<string> @select, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(nextPage);
            request.Uri = uri;
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateTerminateTaskRequest(string jobId, string taskId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ifMatch, string ifNoneMatch, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier204);
            Request request = message.Request;
            request.Method = RequestMethod.Post;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/jobs/", false);
            uri.AppendPath(jobId, true);
            uri.AppendPath("/tasks/", false);
            uri.AppendPath(taskId, true);
            uri.AppendPath("/terminate", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            if (ifModifiedSince != null)
            {
                request.Headers.SetValue("If-Modified-Since", Azure.Batch.TypeFormatters.ConvertToString(ifModifiedSince, "R"));
            }
            if (ifUnmodifiedSince != null)
            {
                request.Headers.SetValue("If-Unmodified-Since", Azure.Batch.TypeFormatters.ConvertToString(ifUnmodifiedSince, "R"));
            }
            if (ifMatch != null)
            {
                request.Headers.SetValue("If-Match", ifMatch);
            }
            if (ifNoneMatch != null)
            {
                request.Headers.SetValue("If-None-Match", ifNoneMatch);
            }
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateReactivateTaskRequest(string jobId, string taskId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ifMatch, string ifNoneMatch, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier204);
            Request request = message.Request;
            request.Method = RequestMethod.Post;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/jobs/", false);
            uri.AppendPath(jobId, true);
            uri.AppendPath("/tasks/", false);
            uri.AppendPath(taskId, true);
            uri.AppendPath("/reactivate", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            if (ifModifiedSince != null)
            {
                request.Headers.SetValue("If-Modified-Since", Azure.Batch.TypeFormatters.ConvertToString(ifModifiedSince, "R"));
            }
            if (ifUnmodifiedSince != null)
            {
                request.Headers.SetValue("If-Unmodified-Since", Azure.Batch.TypeFormatters.ConvertToString(ifUnmodifiedSince, "R"));
            }
            if (ifMatch != null)
            {
                request.Headers.SetValue("If-Match", ifMatch);
            }
            if (ifNoneMatch != null)
            {
                request.Headers.SetValue("If-None-Match", ifNoneMatch);
            }
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateDeleteTaskFileRequest(string jobId, string taskId, string filePath, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, bool? recursive, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Delete;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/jobs/", false);
            uri.AppendPath(jobId, true);
            uri.AppendPath("/tasks/", false);
            uri.AppendPath(taskId, true);
            uri.AppendPath("/files/", false);
            uri.AppendPath(filePath, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            if (recursive != null)
            {
                uri.AppendQuery("recursive", Azure.Batch.TypeFormatters.ConvertToString(recursive, null), true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetTaskFileRequest(string jobId, string taskId, string filePath, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ocpRange, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/jobs/", false);
            uri.AppendPath(jobId, true);
            uri.AppendPath("/tasks/", false);
            uri.AppendPath(taskId, true);
            uri.AppendPath("/files/", false);
            uri.AppendPath(filePath, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            if (ifModifiedSince != null)
            {
                request.Headers.SetValue("If-Modified-Since", Azure.Batch.TypeFormatters.ConvertToString(ifModifiedSince, "R"));
            }
            if (ifUnmodifiedSince != null)
            {
                request.Headers.SetValue("If-Unmodified-Since", Azure.Batch.TypeFormatters.ConvertToString(ifUnmodifiedSince, "R"));
            }
            if (ocpRange != null)
            {
                request.Headers.SetValue("ocp-range", ocpRange);
            }
            request.Headers.SetValue("Accept", "application/octet-stream");
            return message;
        }

        internal HttpMessage CreateGetTaskFilePropertiesInternalRequest(string jobId, string taskId, string filePath, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Head;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/jobs/", false);
            uri.AppendPath(jobId, true);
            uri.AppendPath("/tasks/", false);
            uri.AppendPath(taskId, true);
            uri.AppendPath("/files/", false);
            uri.AppendPath(filePath, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            if (ifModifiedSince != null)
            {
                request.Headers.SetValue("If-Modified-Since", Azure.Batch.TypeFormatters.ConvertToString(ifModifiedSince, "R"));
            }
            if (ifUnmodifiedSince != null)
            {
                request.Headers.SetValue("If-Unmodified-Since", Azure.Batch.TypeFormatters.ConvertToString(ifUnmodifiedSince, "R"));
            }
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateListTaskFilesRequest(string jobId, string taskId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, int? maxresults, string filter, bool? recursive, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/jobs/", false);
            uri.AppendPath(jobId, true);
            uri.AppendPath("/tasks/", false);
            uri.AppendPath(taskId, true);
            uri.AppendPath("/files", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            if (maxresults != null)
            {
                uri.AppendQuery("maxresults", Azure.Batch.TypeFormatters.ConvertToString(maxresults, null), true);
            }
            if (filter != null)
            {
                uri.AppendQuery("$filter", filter, true);
            }
            if (recursive != null)
            {
                uri.AppendQuery("recursive", Azure.Batch.TypeFormatters.ConvertToString(recursive, null), true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateNextListTaskFilesRequest(Uri nextPage, string jobId, string taskId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, int? maxresults, string filter, bool? recursive, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(nextPage);
            request.Uri = uri;
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCreateNodeUserRequest(string poolId, string nodeId, RequestContent content, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier201);
            Request request = message.Request;
            request.Method = RequestMethod.Post;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/pools/", false);
            uri.AppendPath(poolId, true);
            uri.AppendPath("/nodes/", false);
            uri.AppendPath(nodeId, true);
            uri.AppendPath("/users", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            request.Headers.SetValue("Content-Type", "application/json; odata=minimalmetadata");
            request.Headers.SetValue("Accept", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteNodeUserRequest(string poolId, string nodeId, string userName, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Delete;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/pools/", false);
            uri.AppendPath(poolId, true);
            uri.AppendPath("/nodes/", false);
            uri.AppendPath(nodeId, true);
            uri.AppendPath("/users/", false);
            uri.AppendPath(userName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateReplaceNodeUserRequest(string poolId, string nodeId, string userName, RequestContent content, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Put;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/pools/", false);
            uri.AppendPath(poolId, true);
            uri.AppendPath("/nodes/", false);
            uri.AppendPath(nodeId, true);
            uri.AppendPath("/users/", false);
            uri.AppendPath(userName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            request.Headers.SetValue("Content-Type", "application/json; odata=minimalmetadata");
            request.Headers.SetValue("Accept", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetNodeRequest(string poolId, string nodeId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, IEnumerable<string> @select, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/pools/", false);
            uri.AppendPath(poolId, true);
            uri.AppendPath("/nodes/", false);
            uri.AppendPath(nodeId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            if (@select != null && !(@select is ChangeTrackingList<string> changeTrackingList && changeTrackingList.IsUndefined))
            {
                uri.AppendQueryDelimited("$select", @select, ",", null, true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateRebootNodeRequest(string poolId, string nodeId, RequestContent content, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier202);
            Request request = message.Request;
            request.Method = RequestMethod.Post;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/pools/", false);
            uri.AppendPath(poolId, true);
            uri.AppendPath("/nodes/", false);
            uri.AppendPath(nodeId, true);
            uri.AppendPath("/reboot", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            request.Headers.SetValue("Content-Type", "application/json; odata=minimalmetadata");
            request.Headers.SetValue("Accept", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateStartNodeRequest(string poolId, string nodeId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier202);
            Request request = message.Request;
            request.Method = RequestMethod.Post;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/pools/", false);
            uri.AppendPath(poolId, true);
            uri.AppendPath("/nodes/", false);
            uri.AppendPath(nodeId, true);
            uri.AppendPath("/start", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateReimageNodeRequest(string poolId, string nodeId, RequestContent content, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier202);
            Request request = message.Request;
            request.Method = RequestMethod.Post;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/pools/", false);
            uri.AppendPath(poolId, true);
            uri.AppendPath("/nodes/", false);
            uri.AppendPath(nodeId, true);
            uri.AppendPath("/reimage", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            request.Headers.SetValue("Content-Type", "application/json; odata=minimalmetadata");
            request.Headers.SetValue("Accept", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeallocateNodeRequest(string poolId, string nodeId, RequestContent content, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier202);
            Request request = message.Request;
            request.Method = RequestMethod.Post;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/pools/", false);
            uri.AppendPath(poolId, true);
            uri.AppendPath("/nodes/", false);
            uri.AppendPath(nodeId, true);
            uri.AppendPath("/deallocate", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            request.Headers.SetValue("Content-Type", "application/json; odata=minimalmetadata");
            request.Headers.SetValue("Accept", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDisableNodeSchedulingRequest(string poolId, string nodeId, RequestContent content, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Post;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/pools/", false);
            uri.AppendPath(poolId, true);
            uri.AppendPath("/nodes/", false);
            uri.AppendPath(nodeId, true);
            uri.AppendPath("/disablescheduling", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            request.Headers.SetValue("Content-Type", "application/json; odata=minimalmetadata");
            request.Headers.SetValue("Accept", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateEnableNodeSchedulingRequest(string poolId, string nodeId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Post;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/pools/", false);
            uri.AppendPath(poolId, true);
            uri.AppendPath("/nodes/", false);
            uri.AppendPath(nodeId, true);
            uri.AppendPath("/enablescheduling", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetNodeRemoteLoginSettingsRequest(string poolId, string nodeId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/pools/", false);
            uri.AppendPath(poolId, true);
            uri.AppendPath("/nodes/", false);
            uri.AppendPath(nodeId, true);
            uri.AppendPath("/remoteloginsettings", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateUploadNodeLogsRequest(string poolId, string nodeId, RequestContent content, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Post;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/pools/", false);
            uri.AppendPath(poolId, true);
            uri.AppendPath("/nodes/", false);
            uri.AppendPath(nodeId, true);
            uri.AppendPath("/uploadbatchservicelogs", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            request.Headers.SetValue("Content-Type", "application/json; odata=minimalmetadata");
            request.Headers.SetValue("Accept", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateListNodesRequest(string poolId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, int? maxresults, string filter, IEnumerable<string> @select, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/pools/", false);
            uri.AppendPath(poolId, true);
            uri.AppendPath("/nodes", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            if (maxresults != null)
            {
                uri.AppendQuery("maxresults", Azure.Batch.TypeFormatters.ConvertToString(maxresults, null), true);
            }
            if (filter != null)
            {
                uri.AppendQuery("$filter", filter, true);
            }
            if (@select != null && !(@select is ChangeTrackingList<string> changeTrackingList && changeTrackingList.IsUndefined))
            {
                uri.AppendQueryDelimited("$select", @select, ",", null, true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateNextListNodesRequest(Uri nextPage, string poolId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, int? maxresults, string filter, IEnumerable<string> @select, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(nextPage);
            request.Uri = uri;
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetNodeExtensionRequest(string poolId, string nodeId, string extensionName, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, IEnumerable<string> @select, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/pools/", false);
            uri.AppendPath(poolId, true);
            uri.AppendPath("/nodes/", false);
            uri.AppendPath(nodeId, true);
            uri.AppendPath("/extensions/", false);
            uri.AppendPath(extensionName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            if (@select != null && !(@select is ChangeTrackingList<string> changeTrackingList && changeTrackingList.IsUndefined))
            {
                uri.AppendQueryDelimited("$select", @select, ",", null, true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateListNodeExtensionsRequest(string poolId, string nodeId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, int? maxresults, IEnumerable<string> @select, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/pools/", false);
            uri.AppendPath(poolId, true);
            uri.AppendPath("/nodes/", false);
            uri.AppendPath(nodeId, true);
            uri.AppendPath("/extensions", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            if (maxresults != null)
            {
                uri.AppendQuery("maxresults", Azure.Batch.TypeFormatters.ConvertToString(maxresults, null), true);
            }
            if (@select != null && !(@select is ChangeTrackingList<string> changeTrackingList && changeTrackingList.IsUndefined))
            {
                uri.AppendQueryDelimited("$select", @select, ",", null, true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateNextListNodeExtensionsRequest(Uri nextPage, string poolId, string nodeId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, int? maxresults, IEnumerable<string> @select, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(nextPage);
            request.Uri = uri;
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateDeleteNodeFileRequest(string poolId, string nodeId, string filePath, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, bool? recursive, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Delete;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/pools/", false);
            uri.AppendPath(poolId, true);
            uri.AppendPath("/nodes/", false);
            uri.AppendPath(nodeId, true);
            uri.AppendPath("/files/", false);
            uri.AppendPath(filePath, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            if (recursive != null)
            {
                uri.AppendQuery("recursive", Azure.Batch.TypeFormatters.ConvertToString(recursive, null), true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetNodeFileRequest(string poolId, string nodeId, string filePath, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ocpRange, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/pools/", false);
            uri.AppendPath(poolId, true);
            uri.AppendPath("/nodes/", false);
            uri.AppendPath(nodeId, true);
            uri.AppendPath("/files/", false);
            uri.AppendPath(filePath, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            if (ifModifiedSince != null)
            {
                request.Headers.SetValue("If-Modified-Since", Azure.Batch.TypeFormatters.ConvertToString(ifModifiedSince, "R"));
            }
            if (ifUnmodifiedSince != null)
            {
                request.Headers.SetValue("If-Unmodified-Since", Azure.Batch.TypeFormatters.ConvertToString(ifUnmodifiedSince, "R"));
            }
            if (ocpRange != null)
            {
                request.Headers.SetValue("ocp-range", ocpRange);
            }
            request.Headers.SetValue("Accept", "application/octet-stream");
            return message;
        }

        internal HttpMessage CreateGetNodeFilePropertiesInternalRequest(string poolId, string nodeId, string filePath, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Head;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/pools/", false);
            uri.AppendPath(poolId, true);
            uri.AppendPath("/nodes/", false);
            uri.AppendPath(nodeId, true);
            uri.AppendPath("/files/", false);
            uri.AppendPath(filePath, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            if (ifModifiedSince != null)
            {
                request.Headers.SetValue("If-Modified-Since", Azure.Batch.TypeFormatters.ConvertToString(ifModifiedSince, "R"));
            }
            if (ifUnmodifiedSince != null)
            {
                request.Headers.SetValue("If-Unmodified-Since", Azure.Batch.TypeFormatters.ConvertToString(ifUnmodifiedSince, "R"));
            }
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateListNodeFilesRequest(string poolId, string nodeId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, int? maxresults, string filter, bool? recursive, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/pools/", false);
            uri.AppendPath(poolId, true);
            uri.AppendPath("/nodes/", false);
            uri.AppendPath(nodeId, true);
            uri.AppendPath("/files", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            if (timeOutInSeconds != null)
            {
                uri.AppendQuery("timeOut", Azure.Batch.TypeFormatters.ConvertToString(timeOutInSeconds, null), true);
            }
            if (maxresults != null)
            {
                uri.AppendQuery("maxresults", Azure.Batch.TypeFormatters.ConvertToString(maxresults, null), true);
            }
            if (filter != null)
            {
                uri.AppendQuery("$filter", filter, true);
            }
            if (recursive != null)
            {
                uri.AppendQuery("recursive", Azure.Batch.TypeFormatters.ConvertToString(recursive, null), true);
            }
            request.Uri = uri;
            if (clientRequestId != null)
            {
                request.Headers.SetValue("client-request-id", clientRequestId);
            }
            if (returnClientRequestId != null)
            {
                request.Headers.SetValue("return-client-request-id", Azure.Batch.TypeFormatters.ConvertToString(returnClientRequestId, null));
            }
            if (ocpdate != null)
            {
                request.Headers.SetValue("ocp-date", Azure.Batch.TypeFormatters.ConvertToString(ocpdate, "R"));
            }
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateNextListNodeFilesRequest(Uri nextPage, string poolId, string nodeId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, int? maxresults, string filter, bool? recursive, RequestContext context)
        {
            HttpMessage message = Pipeline.CreateMessage(context, PipelineMessageClassifier200);
            Request request = message.Request;
            request.Method = RequestMethod.Get;
            RawRequestUriBuilder uri = new RawRequestUriBuilder();
            uri.Reset(nextPage);
            request.Uri = uri;
            request.Headers.SetValue("Accept", "application/json");
            return message;
        }
    }
}
