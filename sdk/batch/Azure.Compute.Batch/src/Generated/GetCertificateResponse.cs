// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Compute.Batch
{
    /// <summary> The GetCertificateResponse. </summary>
    public partial class GetCertificateResponse
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="GetCertificateResponse"/>. </summary>
        /// <param name="thumbprint"> The X.509 thumbprint of the Certificate. This is a sequence of up to 40 hex digits (it may include spaces but these are removed). </param>
        /// <param name="thumbprintAlgorithm"> The algorithm used to derive the thumbprint. This must be sha1. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="thumbprint"/> or <paramref name="thumbprintAlgorithm"/> is null. </exception>
        internal GetCertificateResponse(string thumbprint, string thumbprintAlgorithm)
        {
            Argument.AssertNotNull(thumbprint, nameof(thumbprint));
            Argument.AssertNotNull(thumbprintAlgorithm, nameof(thumbprintAlgorithm));

            Thumbprint = thumbprint;
            ThumbprintAlgorithm = thumbprintAlgorithm;
        }

        /// <summary> Initializes a new instance of <see cref="GetCertificateResponse"/>. </summary>
        /// <param name="thumbprint"> The X.509 thumbprint of the Certificate. This is a sequence of up to 40 hex digits (it may include spaces but these are removed). </param>
        /// <param name="thumbprintAlgorithm"> The algorithm used to derive the thumbprint. This must be sha1. </param>
        /// <param name="url"> The URL of the Certificate. </param>
        /// <param name="state"> The state of the Certificate. </param>
        /// <param name="stateTransitionTime"> The time at which the Certificate entered its current state. </param>
        /// <param name="previousState"> The previous state of the Certificate. This property is not set if the Certificate is in its initial active state. </param>
        /// <param name="previousStateTransitionTime"> The time at which the Certificate entered its previous state. This property is not set if the Certificate is in its initial Active state. </param>
        /// <param name="publicData"> The public part of the Certificate as a base-64 encoded .cer file. </param>
        /// <param name="deleteCertificateError"> The error that occurred on the last attempt to delete this Certificate. This property is set only if the Certificate is in the DeleteFailed state. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal GetCertificateResponse(string thumbprint, string thumbprintAlgorithm, string url, BatchCertificateState? state, DateTimeOffset? stateTransitionTime, BatchCertificateState? previousState, DateTimeOffset? previousStateTransitionTime, string publicData, DeleteBatchCertificateError deleteCertificateError, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            Thumbprint = thumbprint;
            ThumbprintAlgorithm = thumbprintAlgorithm;
            Url = url;
            State = state;
            StateTransitionTime = stateTransitionTime;
            PreviousState = previousState;
            PreviousStateTransitionTime = previousStateTransitionTime;
            PublicData = publicData;
            DeleteCertificateError = deleteCertificateError;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="GetCertificateResponse"/> for deserialization. </summary>
        internal GetCertificateResponse()
        {
        }

        /// <summary> The X.509 thumbprint of the Certificate. This is a sequence of up to 40 hex digits (it may include spaces but these are removed). </summary>
        public string Thumbprint { get; }
        /// <summary> The algorithm used to derive the thumbprint. This must be sha1. </summary>
        public string ThumbprintAlgorithm { get; }
        /// <summary> The URL of the Certificate. </summary>
        public string Url { get; }
        /// <summary> The state of the Certificate. </summary>
        public BatchCertificateState? State { get; }
        /// <summary> The time at which the Certificate entered its current state. </summary>
        public DateTimeOffset? StateTransitionTime { get; }
        /// <summary> The previous state of the Certificate. This property is not set if the Certificate is in its initial active state. </summary>
        public BatchCertificateState? PreviousState { get; }
        /// <summary> The time at which the Certificate entered its previous state. This property is not set if the Certificate is in its initial Active state. </summary>
        public DateTimeOffset? PreviousStateTransitionTime { get; }
        /// <summary> The public part of the Certificate as a base-64 encoded .cer file. </summary>
        public string PublicData { get; }
        /// <summary> The error that occurred on the last attempt to delete this Certificate. This property is set only if the Certificate is in the DeleteFailed state. </summary>
        public DeleteBatchCertificateError DeleteCertificateError { get; }
    }
}
