// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Batch
{
    /// <summary>
    /// The start and end of the range are inclusive. For example, if a range has start
    /// 9 and end 12, then it represents Tasks '9', '10', '11' and '12'.
    /// </summary>
    public partial class BatchTaskIdRange
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="BatchTaskIdRange"/>. </summary>
        /// <param name="start"> The first Task ID in the range. </param>
        /// <param name="end"> The last Task ID in the range. </param>
        public BatchTaskIdRange(int start, int end)
        {
            Start = start;
            End = end;
        }

        /// <summary> Initializes a new instance of <see cref="BatchTaskIdRange"/>. </summary>
        /// <param name="start"> The first Task ID in the range. </param>
        /// <param name="end"> The last Task ID in the range. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal BatchTaskIdRange(int start, int end, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            Start = start;
            End = end;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> The first Task ID in the range. </summary>
        public int Start { get; set; }

        /// <summary> The last Task ID in the range. </summary>
        public int End { get; set; }
    }
}
