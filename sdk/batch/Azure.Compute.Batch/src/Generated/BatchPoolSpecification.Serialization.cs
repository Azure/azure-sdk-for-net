// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;

namespace Azure.Batch
{
    /// <summary> Specification for creating a new Pool. </summary>
    public partial class BatchPoolSpecification : IJsonModel<BatchPoolSpecification>
    {
        /// <summary> Initializes a new instance of <see cref="BatchPoolSpecification"/> for deserialization. </summary>
        internal BatchPoolSpecification()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<BatchPoolSpecification>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<BatchPoolSpecification>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(BatchPoolSpecification)} does not support writing '{format}' format.");
            }
            if (Optional.IsDefined(DisplayName))
            {
                writer.WritePropertyName("displayName"u8);
                writer.WriteStringValue(DisplayName);
            }
            writer.WritePropertyName("vmSize"u8);
            writer.WriteStringValue(VmSize);
            if (Optional.IsDefined(VirtualMachineConfiguration))
            {
                writer.WritePropertyName("virtualMachineConfiguration"u8);
                writer.WriteObjectValue(VirtualMachineConfiguration, options);
            }
            if (Optional.IsDefined(TaskSlotsPerNode))
            {
                writer.WritePropertyName("taskSlotsPerNode"u8);
                writer.WriteNumberValue(TaskSlotsPerNode.Value);
            }
            if (Optional.IsDefined(TaskSchedulingPolicy))
            {
                writer.WritePropertyName("taskSchedulingPolicy"u8);
                writer.WriteObjectValue(TaskSchedulingPolicy, options);
            }
            if (Optional.IsDefined(ResizeTimeout))
            {
                writer.WritePropertyName("resizeTimeout"u8);
                writer.WriteStringValue(ResizeTimeout.Value, "P");
            }
            if (Optional.IsDefined(ResourceTags))
            {
                writer.WritePropertyName("resourceTags"u8);
                writer.WriteStringValue(ResourceTags);
            }
            if (Optional.IsDefined(TargetDedicatedNodes))
            {
                writer.WritePropertyName("targetDedicatedNodes"u8);
                writer.WriteNumberValue(TargetDedicatedNodes.Value);
            }
            if (Optional.IsDefined(TargetLowPriorityNodes))
            {
                writer.WritePropertyName("targetLowPriorityNodes"u8);
                writer.WriteNumberValue(TargetLowPriorityNodes.Value);
            }
            if (Optional.IsDefined(EnableAutoScale))
            {
                writer.WritePropertyName("enableAutoScale"u8);
                writer.WriteBooleanValue(EnableAutoScale.Value);
            }
            if (Optional.IsDefined(AutoScaleFormula))
            {
                writer.WritePropertyName("autoScaleFormula"u8);
                writer.WriteStringValue(AutoScaleFormula);
            }
            if (Optional.IsDefined(AutoScaleEvaluationInterval))
            {
                writer.WritePropertyName("autoScaleEvaluationInterval"u8);
                writer.WriteStringValue(AutoScaleEvaluationInterval.Value, "P");
            }
            if (Optional.IsDefined(EnableInterNodeCommunication))
            {
                writer.WritePropertyName("enableInterNodeCommunication"u8);
                writer.WriteBooleanValue(EnableInterNodeCommunication.Value);
            }
            if (Optional.IsDefined(NetworkConfiguration))
            {
                writer.WritePropertyName("networkConfiguration"u8);
                writer.WriteObjectValue(NetworkConfiguration, options);
            }
            if (Optional.IsDefined(StartTask))
            {
                writer.WritePropertyName("startTask"u8);
                writer.WriteObjectValue(StartTask, options);
            }
            if (Optional.IsCollectionDefined(CertificateReferences))
            {
                writer.WritePropertyName("certificateReferences"u8);
                writer.WriteStartArray();
                foreach (BatchCertificateReference item in CertificateReferences)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(ApplicationPackageReferences))
            {
                writer.WritePropertyName("applicationPackageReferences"u8);
                writer.WriteStartArray();
                foreach (BatchApplicationPackageReference item in ApplicationPackageReferences)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(UserAccounts))
            {
                writer.WritePropertyName("userAccounts"u8);
                writer.WriteStartArray();
                foreach (UserAccount item in UserAccounts)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Metadata))
            {
                writer.WritePropertyName("metadata"u8);
                writer.WriteStartArray();
                foreach (MetadataItem item in Metadata)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(MountConfiguration))
            {
                writer.WritePropertyName("mountConfiguration"u8);
                writer.WriteStartArray();
                foreach (MountConfiguration item in MountConfiguration)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(TargetNodeCommunicationMode))
            {
                writer.WritePropertyName("targetNodeCommunicationMode"u8);
                writer.WriteStringValue(TargetNodeCommunicationMode.Value.ToString());
            }
            if (Optional.IsDefined(UpgradePolicy))
            {
                writer.WritePropertyName("upgradePolicy"u8);
                writer.WriteObjectValue(UpgradePolicy, options);
            }
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        BatchPoolSpecification IJsonModel<BatchPoolSpecification>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BatchPoolSpecification JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<BatchPoolSpecification>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(BatchPoolSpecification)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeBatchPoolSpecification(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static BatchPoolSpecification DeserializeBatchPoolSpecification(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string displayName = default;
            string vmSize = default;
            VirtualMachineConfiguration virtualMachineConfiguration = default;
            int? taskSlotsPerNode = default;
            BatchTaskSchedulingPolicy taskSchedulingPolicy = default;
            TimeSpan? resizeTimeout = default;
            string resourceTags = default;
            int? targetDedicatedNodes = default;
            int? targetLowPriorityNodes = default;
            bool? enableAutoScale = default;
            string autoScaleFormula = default;
            TimeSpan? autoScaleEvaluationInterval = default;
            bool? enableInterNodeCommunication = default;
            NetworkConfiguration networkConfiguration = default;
            BatchStartTask startTask = default;
            IList<BatchCertificateReference> certificateReferences = default;
            IList<BatchApplicationPackageReference> applicationPackageReferences = default;
            IList<UserAccount> userAccounts = default;
            IList<MetadataItem> metadata = default;
            IList<MountConfiguration> mountConfiguration = default;
            BatchNodeCommunicationMode? targetNodeCommunicationMode = default;
            UpgradePolicy upgradePolicy = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("displayName"u8))
                {
                    displayName = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("vmSize"u8))
                {
                    vmSize = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("virtualMachineConfiguration"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    virtualMachineConfiguration = VirtualMachineConfiguration.DeserializeVirtualMachineConfiguration(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("taskSlotsPerNode"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    taskSlotsPerNode = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("taskSchedulingPolicy"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    taskSchedulingPolicy = BatchTaskSchedulingPolicy.DeserializeBatchTaskSchedulingPolicy(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("resizeTimeout"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    resizeTimeout = prop.Value.GetTimeSpan("P");
                    continue;
                }
                if (prop.NameEquals("resourceTags"u8))
                {
                    resourceTags = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("targetDedicatedNodes"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    targetDedicatedNodes = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("targetLowPriorityNodes"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    targetLowPriorityNodes = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("enableAutoScale"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enableAutoScale = prop.Value.GetBoolean();
                    continue;
                }
                if (prop.NameEquals("autoScaleFormula"u8))
                {
                    autoScaleFormula = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("autoScaleEvaluationInterval"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    autoScaleEvaluationInterval = prop.Value.GetTimeSpan("P");
                    continue;
                }
                if (prop.NameEquals("enableInterNodeCommunication"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enableInterNodeCommunication = prop.Value.GetBoolean();
                    continue;
                }
                if (prop.NameEquals("networkConfiguration"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    networkConfiguration = NetworkConfiguration.DeserializeNetworkConfiguration(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("startTask"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    startTask = BatchStartTask.DeserializeBatchStartTask(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("certificateReferences"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<BatchCertificateReference> array = new List<BatchCertificateReference>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(BatchCertificateReference.DeserializeBatchCertificateReference(item, options));
                    }
                    certificateReferences = array;
                    continue;
                }
                if (prop.NameEquals("applicationPackageReferences"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<BatchApplicationPackageReference> array = new List<BatchApplicationPackageReference>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(BatchApplicationPackageReference.DeserializeBatchApplicationPackageReference(item, options));
                    }
                    applicationPackageReferences = array;
                    continue;
                }
                if (prop.NameEquals("userAccounts"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<UserAccount> array = new List<UserAccount>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(UserAccount.DeserializeUserAccount(item, options));
                    }
                    userAccounts = array;
                    continue;
                }
                if (prop.NameEquals("metadata"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MetadataItem> array = new List<MetadataItem>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(MetadataItem.DeserializeMetadataItem(item, options));
                    }
                    metadata = array;
                    continue;
                }
                if (prop.NameEquals("mountConfiguration"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MountConfiguration> array = new List<MountConfiguration>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(Batch.MountConfiguration.DeserializeMountConfiguration(item, options));
                    }
                    mountConfiguration = array;
                    continue;
                }
                if (prop.NameEquals("targetNodeCommunicationMode"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    targetNodeCommunicationMode = new BatchNodeCommunicationMode(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("upgradePolicy"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    upgradePolicy = UpgradePolicy.DeserializeUpgradePolicy(prop.Value, options);
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new BatchPoolSpecification(
                displayName,
                vmSize,
                virtualMachineConfiguration,
                taskSlotsPerNode,
                taskSchedulingPolicy,
                resizeTimeout,
                resourceTags,
                targetDedicatedNodes,
                targetLowPriorityNodes,
                enableAutoScale,
                autoScaleFormula,
                autoScaleEvaluationInterval,
                enableInterNodeCommunication,
                networkConfiguration,
                startTask,
                certificateReferences ?? new ChangeTrackingList<BatchCertificateReference>(),
                applicationPackageReferences ?? new ChangeTrackingList<BatchApplicationPackageReference>(),
                userAccounts ?? new ChangeTrackingList<UserAccount>(),
                metadata ?? new ChangeTrackingList<MetadataItem>(),
                mountConfiguration ?? new ChangeTrackingList<MountConfiguration>(),
                targetNodeCommunicationMode,
                upgradePolicy,
                additionalBinaryDataProperties);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<BatchPoolSpecification>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<BatchPoolSpecification>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureBatchContext.Default);
                default:
                    throw new FormatException($"The model {nameof(BatchPoolSpecification)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        BatchPoolSpecification IPersistableModel<BatchPoolSpecification>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BatchPoolSpecification PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<BatchPoolSpecification>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeBatchPoolSpecification(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(BatchPoolSpecification)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<BatchPoolSpecification>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
