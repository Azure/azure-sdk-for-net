// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Compute.Batch
{
    /// <summary> BatchCertificateVisibility enums. </summary>
    public readonly partial struct BatchCertificateVisibility : IEquatable<BatchCertificateVisibility>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="BatchCertificateVisibility"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public BatchCertificateVisibility(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string StartTaskValue = "starttask";
        private const string TaskValue = "task";
        private const string RemoteUserValue = "remoteuser";

        /// <summary> The Certificate should be visible to the user account under which the StartTask is run. Note that if AutoUser Scope is Pool for both the StartTask and a Task, this certificate will be visible to the Task as well. </summary>
        public static BatchCertificateVisibility StartTask { get; } = new BatchCertificateVisibility(StartTaskValue);
        /// <summary> The Certificate should be visible to the user accounts under which Job Tasks are run. </summary>
        public static BatchCertificateVisibility Task { get; } = new BatchCertificateVisibility(TaskValue);
        /// <summary> The Certificate should be visible to the user accounts under which users remotely access the Compute Node. </summary>
        public static BatchCertificateVisibility RemoteUser { get; } = new BatchCertificateVisibility(RemoteUserValue);
        /// <summary> Determines if two <see cref="BatchCertificateVisibility"/> values are the same. </summary>
        public static bool operator ==(BatchCertificateVisibility left, BatchCertificateVisibility right) => left.Equals(right);
        /// <summary> Determines if two <see cref="BatchCertificateVisibility"/> values are not the same. </summary>
        public static bool operator !=(BatchCertificateVisibility left, BatchCertificateVisibility right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="BatchCertificateVisibility"/>. </summary>
        public static implicit operator BatchCertificateVisibility(string value) => new BatchCertificateVisibility(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is BatchCertificateVisibility other && Equals(other);
        /// <inheritdoc />
        public bool Equals(BatchCertificateVisibility other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
