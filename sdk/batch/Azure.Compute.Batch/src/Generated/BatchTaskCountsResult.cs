// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Batch
{
    /// <summary> The Task and TaskSlot counts for a Job. </summary>
    public partial class BatchTaskCountsResult
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="BatchTaskCountsResult"/>. </summary>
        /// <param name="taskCounts"> The number of Tasks per state. </param>
        /// <param name="taskSlotCounts"> The number of TaskSlots required by Tasks per state. </param>
        internal BatchTaskCountsResult(BatchTaskCounts taskCounts, BatchTaskSlotCounts taskSlotCounts)
        {
            TaskCounts = taskCounts;
            TaskSlotCounts = taskSlotCounts;
        }

        /// <summary> Initializes a new instance of <see cref="BatchTaskCountsResult"/>. </summary>
        /// <param name="taskCounts"> The number of Tasks per state. </param>
        /// <param name="taskSlotCounts"> The number of TaskSlots required by Tasks per state. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal BatchTaskCountsResult(BatchTaskCounts taskCounts, BatchTaskSlotCounts taskSlotCounts, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            TaskCounts = taskCounts;
            TaskSlotCounts = taskSlotCounts;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> The number of Tasks per state. </summary>
        public BatchTaskCounts TaskCounts { get; }

        /// <summary> The number of TaskSlots required by Tasks per state. </summary>
        public BatchTaskSlotCounts TaskSlotCounts { get; }
    }
}
