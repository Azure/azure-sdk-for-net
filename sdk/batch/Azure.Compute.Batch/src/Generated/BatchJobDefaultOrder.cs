// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Compute.Batch
{
    /// <summary> BatchJobDefaultOrder enums. </summary>
    public readonly partial struct BatchJobDefaultOrder : IEquatable<BatchJobDefaultOrder>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="BatchJobDefaultOrder"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public BatchJobDefaultOrder(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NoneValue = "none";
        private const string CreationTimeValue = "creationtime";

        /// <summary> Tasks should be scheduled uniformly from all equal-priority jobs for the pool. </summary>
        public static BatchJobDefaultOrder None { get; } = new BatchJobDefaultOrder(NoneValue);
        /// <summary> If jobs have equal priority, tasks from jobs that were created earlier should be scheduled first. </summary>
        public static BatchJobDefaultOrder CreationTime { get; } = new BatchJobDefaultOrder(CreationTimeValue);
        /// <summary> Determines if two <see cref="BatchJobDefaultOrder"/> values are the same. </summary>
        public static bool operator ==(BatchJobDefaultOrder left, BatchJobDefaultOrder right) => left.Equals(right);
        /// <summary> Determines if two <see cref="BatchJobDefaultOrder"/> values are not the same. </summary>
        public static bool operator !=(BatchJobDefaultOrder left, BatchJobDefaultOrder right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="BatchJobDefaultOrder"/>. </summary>
        public static implicit operator BatchJobDefaultOrder(string value) => new BatchJobDefaultOrder(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is BatchJobDefaultOrder other && Equals(other);
        /// <inheritdoc />
        public bool Equals(BatchJobDefaultOrder other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
