// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;

namespace Azure.Compute.Batch
{
    /// <summary> Statistics related to resource consumption by Compute Nodes in a Pool. </summary>
    public partial class BatchPoolResourceStatistics : IJsonModel<BatchPoolResourceStatistics>
    {
        /// <summary> Initializes a new instance of <see cref="BatchPoolResourceStatistics"/> for deserialization. </summary>
        internal BatchPoolResourceStatistics()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<BatchPoolResourceStatistics>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<BatchPoolResourceStatistics>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(BatchPoolResourceStatistics)} does not support writing '{format}' format.");
            }
            writer.WritePropertyName("startTime"u8);
            writer.WriteStringValue(StartTime, "O");
            writer.WritePropertyName("lastUpdateTime"u8);
            writer.WriteStringValue(LastUpdateTime, "O");
            writer.WritePropertyName("avgCPUPercentage"u8);
            writer.WriteNumberValue(AvgCpuPercentage);
            writer.WritePropertyName("avgMemoryGiB"u8);
            writer.WriteNumberValue(AvgMemoryGiB);
            writer.WritePropertyName("peakMemoryGiB"u8);
            writer.WriteNumberValue(PeakMemoryGiB);
            writer.WritePropertyName("avgDiskGiB"u8);
            writer.WriteNumberValue(AvgDiskGiB);
            writer.WritePropertyName("peakDiskGiB"u8);
            writer.WriteNumberValue(PeakDiskGiB);
            writer.WritePropertyName("diskReadIOps"u8);
            writer.WriteStringValue(DiskReadIops.ToString());
            writer.WritePropertyName("diskWriteIOps"u8);
            writer.WriteStringValue(DiskWriteIops.ToString());
            writer.WritePropertyName("diskReadGiB"u8);
            writer.WriteNumberValue(DiskReadGiB);
            writer.WritePropertyName("diskWriteGiB"u8);
            writer.WriteNumberValue(DiskWriteGiB);
            writer.WritePropertyName("networkReadGiB"u8);
            writer.WriteNumberValue(NetworkReadGiB);
            writer.WritePropertyName("networkWriteGiB"u8);
            writer.WriteNumberValue(NetworkWriteGiB);
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        BatchPoolResourceStatistics IJsonModel<BatchPoolResourceStatistics>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BatchPoolResourceStatistics JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<BatchPoolResourceStatistics>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(BatchPoolResourceStatistics)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeBatchPoolResourceStatistics(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static BatchPoolResourceStatistics DeserializeBatchPoolResourceStatistics(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            DateTimeOffset startTime = default;
            DateTimeOffset lastUpdateTime = default;
            float avgCpuPercentage = default;
            float avgMemoryGiB = default;
            float peakMemoryGiB = default;
            float avgDiskGiB = default;
            float peakDiskGiB = default;
            long diskReadIops = default;
            long diskWriteIops = default;
            float diskReadGiB = default;
            float diskWriteGiB = default;
            float networkReadGiB = default;
            float networkWriteGiB = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("startTime"u8))
                {
                    startTime = prop.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (prop.NameEquals("lastUpdateTime"u8))
                {
                    lastUpdateTime = prop.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (prop.NameEquals("avgCPUPercentage"u8))
                {
                    avgCpuPercentage = prop.Value.GetSingle();
                    continue;
                }
                if (prop.NameEquals("avgMemoryGiB"u8))
                {
                    avgMemoryGiB = prop.Value.GetSingle();
                    continue;
                }
                if (prop.NameEquals("peakMemoryGiB"u8))
                {
                    peakMemoryGiB = prop.Value.GetSingle();
                    continue;
                }
                if (prop.NameEquals("avgDiskGiB"u8))
                {
                    avgDiskGiB = prop.Value.GetSingle();
                    continue;
                }
                if (prop.NameEquals("peakDiskGiB"u8))
                {
                    peakDiskGiB = prop.Value.GetSingle();
                    continue;
                }
                if (prop.NameEquals("diskReadIOps"u8))
                {
                    diskReadIops = long.Parse(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("diskWriteIOps"u8))
                {
                    diskWriteIops = long.Parse(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("diskReadGiB"u8))
                {
                    diskReadGiB = prop.Value.GetSingle();
                    continue;
                }
                if (prop.NameEquals("diskWriteGiB"u8))
                {
                    diskWriteGiB = prop.Value.GetSingle();
                    continue;
                }
                if (prop.NameEquals("networkReadGiB"u8))
                {
                    networkReadGiB = prop.Value.GetSingle();
                    continue;
                }
                if (prop.NameEquals("networkWriteGiB"u8))
                {
                    networkWriteGiB = prop.Value.GetSingle();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new BatchPoolResourceStatistics(
                startTime,
                lastUpdateTime,
                avgCpuPercentage,
                avgMemoryGiB,
                peakMemoryGiB,
                avgDiskGiB,
                peakDiskGiB,
                diskReadIops,
                diskWriteIops,
                diskReadGiB,
                diskWriteGiB,
                networkReadGiB,
                networkWriteGiB,
                additionalBinaryDataProperties);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<BatchPoolResourceStatistics>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<BatchPoolResourceStatistics>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureComputeBatchContext.Default);
                default:
                    throw new FormatException($"The model {nameof(BatchPoolResourceStatistics)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        BatchPoolResourceStatistics IPersistableModel<BatchPoolResourceStatistics>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BatchPoolResourceStatistics PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<BatchPoolResourceStatistics>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeBatchPoolResourceStatistics(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(BatchPoolResourceStatistics)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<BatchPoolResourceStatistics>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
