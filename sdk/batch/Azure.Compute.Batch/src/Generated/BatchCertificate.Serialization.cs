// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;

namespace Azure.Compute.Batch
{
    /// <summary>
    /// A Certificate that can be installed on Compute Nodes and can be used to
    /// authenticate operations on the machine.
    /// </summary>
    public partial class BatchCertificate : IJsonModel<BatchCertificate>
    {
        /// <summary> Initializes a new instance of <see cref="BatchCertificate"/> for deserialization. </summary>
        internal BatchCertificate()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<BatchCertificate>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<BatchCertificate>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(BatchCertificate)} does not support writing '{format}' format.");
            }
            writer.WritePropertyName("thumbprint"u8);
            writer.WriteStringValue(Thumbprint);
            writer.WritePropertyName("thumbprintAlgorithm"u8);
            writer.WriteStringValue(ThumbprintAlgorithm);
            if (options.Format != "W" && Optional.IsDefined(Uri))
            {
                writer.WritePropertyName("url"u8);
                writer.WriteStringValue(Uri.AbsoluteUri);
            }
            if (options.Format != "W" && Optional.IsDefined(State))
            {
                writer.WritePropertyName("state"u8);
                writer.WriteStringValue(State.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(StateTransitionTime))
            {
                writer.WritePropertyName("stateTransitionTime"u8);
                writer.WriteStringValue(StateTransitionTime.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(PreviousState))
            {
                writer.WritePropertyName("previousState"u8);
                writer.WriteStringValue(PreviousState.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(PreviousStateTransitionTime))
            {
                writer.WritePropertyName("previousStateTransitionTime"u8);
                writer.WriteStringValue(PreviousStateTransitionTime.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(PublicData))
            {
                writer.WritePropertyName("publicData"u8);
                writer.WriteStringValue(PublicData);
            }
            if (options.Format != "W" && Optional.IsDefined(DeleteCertificateError))
            {
                writer.WritePropertyName("deleteCertificateError"u8);
                writer.WriteObjectValue(DeleteCertificateError, options);
            }
            writer.WritePropertyName("data"u8);
            writer.WriteBase64StringValue(Data.ToArray(), "D");
            if (Optional.IsDefined(CertificateFormat))
            {
                writer.WritePropertyName("certificateFormat"u8);
                writer.WriteStringValue(CertificateFormat.Value.ToString());
            }
            if (Optional.IsDefined(Password))
            {
                writer.WritePropertyName("password"u8);
                writer.WriteStringValue(Password);
            }
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        BatchCertificate IJsonModel<BatchCertificate>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BatchCertificate JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<BatchCertificate>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(BatchCertificate)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeBatchCertificate(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static BatchCertificate DeserializeBatchCertificate(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string thumbprint = default;
            string thumbprintAlgorithm = default;
            Uri uri = default;
            BatchCertificateState? state = default;
            DateTimeOffset? stateTransitionTime = default;
            BatchCertificateState? previousState = default;
            DateTimeOffset? previousStateTransitionTime = default;
            string publicData = default;
            BatchCertificateDeleteError deleteCertificateError = default;
            BinaryData data = default;
            BatchCertificateFormat? certificateFormat = default;
            string password = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("thumbprint"u8))
                {
                    thumbprint = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("thumbprintAlgorithm"u8))
                {
                    thumbprintAlgorithm = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("url"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    uri = new Uri(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("state"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    state = new BatchCertificateState(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("stateTransitionTime"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    stateTransitionTime = prop.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (prop.NameEquals("previousState"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    previousState = new BatchCertificateState(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("previousStateTransitionTime"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    previousStateTransitionTime = prop.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (prop.NameEquals("publicData"u8))
                {
                    publicData = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("deleteCertificateError"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    deleteCertificateError = BatchCertificateDeleteError.DeserializeBatchCertificateDeleteError(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("data"u8))
                {
                    data = BinaryData.FromBytes(prop.Value.GetBytesFromBase64("D"));
                    continue;
                }
                if (prop.NameEquals("certificateFormat"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    certificateFormat = new BatchCertificateFormat(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("password"u8))
                {
                    password = prop.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new BatchCertificate(
                thumbprint,
                thumbprintAlgorithm,
                uri,
                state,
                stateTransitionTime,
                previousState,
                previousStateTransitionTime,
                publicData,
                deleteCertificateError,
                data,
                certificateFormat,
                password,
                additionalBinaryDataProperties);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<BatchCertificate>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<BatchCertificate>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureComputeBatchContext.Default);
                default:
                    throw new FormatException($"The model {nameof(BatchCertificate)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        BatchCertificate IPersistableModel<BatchCertificate>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BatchCertificate PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<BatchCertificate>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeBatchCertificate(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(BatchCertificate)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<BatchCertificate>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <param name="batchCertificate"> The <see cref="BatchCertificate"/> to serialize into <see cref="RequestContent"/>. </param>
        public static implicit operator RequestContent(BatchCertificate batchCertificate)
        {
            if (batchCertificate == null)
            {
                return null;
            }
            Utf8JsonRequestContent content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(batchCertificate, ModelSerializationExtensions.WireOptions);
            return content;
        }

        /// <param name="result"> The <see cref="Response"/> to deserialize the <see cref="BatchCertificate"/> from. </param>
        public static explicit operator BatchCertificate(Response result)
        {
            using Response response = result;
            using JsonDocument document = JsonDocument.Parse(response.Content);
            return DeserializeBatchCertificate(document.RootElement, ModelSerializationExtensions.WireOptions);
        }
    }
}
