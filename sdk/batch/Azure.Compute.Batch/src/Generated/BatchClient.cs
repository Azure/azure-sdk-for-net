// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Batch;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Client
{
    /// <summary></summary>
    public partial class BatchClient
    {
        private readonly Uri _endpoint;
        /// <summary> A credential used to authenticate to the service. </summary>
        private readonly TokenCredential _tokenCredential;
        private static readonly string[] AuthorizationScopes = new string[] { "https://batch.core.windows.net//.default" };
        private readonly string _apiVersion;

        /// <summary> Initializes a new instance of BatchClient for mocking. </summary>
        protected BatchClient()
        {
        }

        /// <summary> Initializes a new instance of BatchClient. </summary>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <param name="credential"> A credential used to authenticate to the service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public BatchClient(Uri endpoint, TokenCredential credential) : this(endpoint, credential, new BatchClientOptions())
        {
        }

        /// <summary> Initializes a new instance of BatchClient. </summary>
        /// <param name="endpoint"> Service endpoint. </param>
        /// <param name="credential"> A credential used to authenticate to the service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public BatchClient(Uri endpoint, TokenCredential credential, BatchClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(credential, nameof(credential));

            options ??= new BatchClientOptions();

            _endpoint = endpoint;
            _tokenCredential = credential;
            Pipeline = HttpPipelineBuilder.Build(options, new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) });
            _apiVersion = options.Version;
            ClientDiagnostics = new ClientDiagnostics(options, true);
        }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline { get; }

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary>
        /// [Protocol Method] This operation returns only Applications and versions that are available for
        /// use on Compute Nodes; that is, that can be used in an Package reference. For
        /// administrator information about applications and versions that are not yet
        /// available to Compute Nodes, use the Azure portal or the Azure Resource Manager
        /// API.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Pageable<BinaryData> GetApplications(int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, int? maxresults, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.GetApplications");
            scope.Start();
            try
            {
                return new BatchClientGetApplicationsCollectionResult(
                    this,
                    timeOutInSeconds,
                    clientRequestId,
                    returnClientRequestId,
                    ocpdate,
                    maxresults,
                    context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] This operation returns only Applications and versions that are available for
        /// use on Compute Nodes; that is, that can be used in an Package reference. For
        /// administrator information about applications and versions that are not yet
        /// available to Compute Nodes, use the Azure portal or the Azure Resource Manager
        /// API.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual AsyncPageable<BinaryData> GetApplicationsAsync(int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, int? maxresults, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.GetApplications");
            scope.Start();
            try
            {
                return new BatchClientGetApplicationsAsyncCollectionResult(
                    this,
                    timeOutInSeconds,
                    clientRequestId,
                    returnClientRequestId,
                    ocpdate,
                    maxresults,
                    context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// This operation returns only Applications and versions that are available for
        /// use on Compute Nodes; that is, that can be used in an Package reference. For
        /// administrator information about applications and versions that are not yet
        /// available to Compute Nodes, use the Azure portal or the Azure Resource Manager
        /// API.
        /// </summary>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Pageable<BatchApplication> GetApplications(int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, int? maxresults = default, CancellationToken cancellationToken = default)
        {
            return new BatchClientGetApplicationsCollectionResultOfT(
                this,
                timeOutInSeconds,
                clientRequestId,
                returnClientRequestId,
                ocpdate,
                maxresults,
                cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary>
        /// This operation returns only Applications and versions that are available for
        /// use on Compute Nodes; that is, that can be used in an Package reference. For
        /// administrator information about applications and versions that are not yet
        /// available to Compute Nodes, use the Azure portal or the Azure Resource Manager
        /// API.
        /// </summary>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual AsyncPageable<BatchApplication> GetApplicationsAsync(int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, int? maxresults = default, CancellationToken cancellationToken = default)
        {
            return new BatchClientGetApplicationsAsyncCollectionResultOfT(
                this,
                timeOutInSeconds,
                clientRequestId,
                returnClientRequestId,
                ocpdate,
                maxresults,
                cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary>
        /// [Protocol Method] This operation returns only Applications and versions that are available for
        /// use on Compute Nodes; that is, that can be used in an Package reference. For
        /// administrator information about Applications and versions that are not yet
        /// available to Compute Nodes, use the Azure portal or the Azure Resource Manager
        /// API.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="applicationId"> The ID of the Application. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="applicationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="applicationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetApplication(string applicationId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.GetApplication");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(applicationId, nameof(applicationId));

                using HttpMessage message = CreateGetApplicationRequest(applicationId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] This operation returns only Applications and versions that are available for
        /// use on Compute Nodes; that is, that can be used in an Package reference. For
        /// administrator information about Applications and versions that are not yet
        /// available to Compute Nodes, use the Azure portal or the Azure Resource Manager
        /// API.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="applicationId"> The ID of the Application. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="applicationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="applicationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetApplicationAsync(string applicationId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.GetApplication");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(applicationId, nameof(applicationId));

                using HttpMessage message = CreateGetApplicationRequest(applicationId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// This operation returns only Applications and versions that are available for
        /// use on Compute Nodes; that is, that can be used in an Package reference. For
        /// administrator information about Applications and versions that are not yet
        /// available to Compute Nodes, use the Azure portal or the Azure Resource Manager
        /// API.
        /// </summary>
        /// <param name="applicationId"> The ID of the Application. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="applicationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="applicationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<BatchApplication> GetApplication(string applicationId, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(applicationId, nameof(applicationId));

            Response result = GetApplication(applicationId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((BatchApplication)result, result);
        }

        /// <summary>
        /// This operation returns only Applications and versions that are available for
        /// use on Compute Nodes; that is, that can be used in an Package reference. For
        /// administrator information about Applications and versions that are not yet
        /// available to Compute Nodes, use the Azure portal or the Azure Resource Manager
        /// API.
        /// </summary>
        /// <param name="applicationId"> The ID of the Application. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="applicationId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="applicationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<BatchApplication>> GetApplicationAsync(string applicationId, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(applicationId, nameof(applicationId));

            Response result = await GetApplicationAsync(applicationId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((BatchApplication)result, result);
        }

        /// <summary>
        /// [Protocol Method] If you do not specify a $filter clause including a poolId, the response
        /// includes all Pools that existed in the Account in the time range of the
        /// returned aggregation intervals. If you do not specify a $filter clause
        /// including a startTime or endTime these filters default to the start and end
        /// times of the last aggregation interval currently available; that is, only the
        /// last aggregation interval is returned.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="starttime">
        /// The earliest time from which to include metrics. This must be at least two and
        /// a half hours before the current time. If not specified this defaults to the
        /// start time of the last aggregation interval currently available.
        /// </param>
        /// <param name="endtime">
        /// The latest time from which to include metrics. This must be at least two hours
        /// before the current time. If not specified this defaults to the end time of the
        /// last aggregation interval currently available.
        /// </param>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-account-usage-metrics.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Pageable<BinaryData> GetPoolUsageMetrics(int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, int? maxresults, DateTimeOffset? starttime, DateTimeOffset? endtime, string filter, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.GetPoolUsageMetrics");
            scope.Start();
            try
            {
                return new BatchClientGetPoolUsageMetricsCollectionResult(
                    this,
                    timeOutInSeconds,
                    clientRequestId,
                    returnClientRequestId,
                    ocpdate,
                    maxresults,
                    starttime,
                    endtime,
                    filter,
                    context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] If you do not specify a $filter clause including a poolId, the response
        /// includes all Pools that existed in the Account in the time range of the
        /// returned aggregation intervals. If you do not specify a $filter clause
        /// including a startTime or endTime these filters default to the start and end
        /// times of the last aggregation interval currently available; that is, only the
        /// last aggregation interval is returned.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="starttime">
        /// The earliest time from which to include metrics. This must be at least two and
        /// a half hours before the current time. If not specified this defaults to the
        /// start time of the last aggregation interval currently available.
        /// </param>
        /// <param name="endtime">
        /// The latest time from which to include metrics. This must be at least two hours
        /// before the current time. If not specified this defaults to the end time of the
        /// last aggregation interval currently available.
        /// </param>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-account-usage-metrics.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual AsyncPageable<BinaryData> GetPoolUsageMetricsAsync(int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, int? maxresults, DateTimeOffset? starttime, DateTimeOffset? endtime, string filter, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.GetPoolUsageMetrics");
            scope.Start();
            try
            {
                return new BatchClientGetPoolUsageMetricsAsyncCollectionResult(
                    this,
                    timeOutInSeconds,
                    clientRequestId,
                    returnClientRequestId,
                    ocpdate,
                    maxresults,
                    starttime,
                    endtime,
                    filter,
                    context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// If you do not specify a $filter clause including a poolId, the response
        /// includes all Pools that existed in the Account in the time range of the
        /// returned aggregation intervals. If you do not specify a $filter clause
        /// including a startTime or endTime these filters default to the start and end
        /// times of the last aggregation interval currently available; that is, only the
        /// last aggregation interval is returned.
        /// </summary>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="starttime">
        /// The earliest time from which to include metrics. This must be at least two and
        /// a half hours before the current time. If not specified this defaults to the
        /// start time of the last aggregation interval currently available.
        /// </param>
        /// <param name="endtime">
        /// The latest time from which to include metrics. This must be at least two hours
        /// before the current time. If not specified this defaults to the end time of the
        /// last aggregation interval currently available.
        /// </param>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-account-usage-metrics.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Pageable<BatchPoolUsageMetrics> GetPoolUsageMetrics(int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, int? maxresults = default, DateTimeOffset? starttime = default, DateTimeOffset? endtime = default, string filter = default, CancellationToken cancellationToken = default)
        {
            return new BatchClientGetPoolUsageMetricsCollectionResultOfT(
                this,
                timeOutInSeconds,
                clientRequestId,
                returnClientRequestId,
                ocpdate,
                maxresults,
                starttime,
                endtime,
                filter,
                cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary>
        /// If you do not specify a $filter clause including a poolId, the response
        /// includes all Pools that existed in the Account in the time range of the
        /// returned aggregation intervals. If you do not specify a $filter clause
        /// including a startTime or endTime these filters default to the start and end
        /// times of the last aggregation interval currently available; that is, only the
        /// last aggregation interval is returned.
        /// </summary>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="starttime">
        /// The earliest time from which to include metrics. This must be at least two and
        /// a half hours before the current time. If not specified this defaults to the
        /// start time of the last aggregation interval currently available.
        /// </param>
        /// <param name="endtime">
        /// The latest time from which to include metrics. This must be at least two hours
        /// before the current time. If not specified this defaults to the end time of the
        /// last aggregation interval currently available.
        /// </param>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-account-usage-metrics.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual AsyncPageable<BatchPoolUsageMetrics> GetPoolUsageMetricsAsync(int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, int? maxresults = default, DateTimeOffset? starttime = default, DateTimeOffset? endtime = default, string filter = default, CancellationToken cancellationToken = default)
        {
            return new BatchClientGetPoolUsageMetricsAsyncCollectionResultOfT(
                this,
                timeOutInSeconds,
                clientRequestId,
                returnClientRequestId,
                ocpdate,
                maxresults,
                starttime,
                endtime,
                filter,
                cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary>
        /// [Protocol Method] When naming Pools, avoid including sensitive information such as user names or
        /// secret project names. This information may appear in telemetry logs accessible
        /// to Microsoft Support engineers.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response CreatePool(RequestContent content, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.CreatePool");
            scope.Start();
            try
            {
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateCreatePoolRequest(content, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] When naming Pools, avoid including sensitive information such as user names or
        /// secret project names. This information may appear in telemetry logs accessible
        /// to Microsoft Support engineers.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> CreatePoolAsync(RequestContent content, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.CreatePool");
            scope.Start();
            try
            {
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateCreatePoolRequest(content, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// When naming Pools, avoid including sensitive information such as user names or
        /// secret project names. This information may appear in telemetry logs accessible
        /// to Microsoft Support engineers.
        /// </summary>
        /// <param name="pool"> The Pool to be created. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="pool"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response CreatePool(BatchPoolCreateContent pool, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(pool, nameof(pool));

            return CreatePool(pool, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary>
        /// When naming Pools, avoid including sensitive information such as user names or
        /// secret project names. This information may appear in telemetry logs accessible
        /// to Microsoft Support engineers.
        /// </summary>
        /// <param name="pool"> The Pool to be created. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="pool"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> CreatePoolAsync(BatchPoolCreateContent pool, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(pool, nameof(pool));

            return await CreatePoolAsync(pool, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] Lists all of the Pools which be mounted.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-pools.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="expand"> An OData $expand clause. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Pageable<BinaryData> GetPools(int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, int? maxresults, string filter, IEnumerable<string> @select, IEnumerable<string> expand, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.GetPools");
            scope.Start();
            try
            {
                return new BatchClientGetPoolsCollectionResult(
                    this,
                    timeOutInSeconds,
                    clientRequestId,
                    returnClientRequestId,
                    ocpdate,
                    maxresults,
                    filter,
                    @select,
                    expand,
                    context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Lists all of the Pools which be mounted.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-pools.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="expand"> An OData $expand clause. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual AsyncPageable<BinaryData> GetPoolsAsync(int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, int? maxresults, string filter, IEnumerable<string> @select, IEnumerable<string> expand, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.GetPools");
            scope.Start();
            try
            {
                return new BatchClientGetPoolsAsyncCollectionResult(
                    this,
                    timeOutInSeconds,
                    clientRequestId,
                    returnClientRequestId,
                    ocpdate,
                    maxresults,
                    filter,
                    @select,
                    expand,
                    context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists all of the Pools which be mounted. </summary>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-pools.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="expand"> An OData $expand clause. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Pageable<BatchPool> GetPools(int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, int? maxresults = default, string filter = default, IEnumerable<string> @select = default, IEnumerable<string> expand = default, CancellationToken cancellationToken = default)
        {
            return new BatchClientGetPoolsCollectionResultOfT(
                this,
                timeOutInSeconds,
                clientRequestId,
                returnClientRequestId,
                ocpdate,
                maxresults,
                filter,
                @select,
                expand,
                cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Lists all of the Pools which be mounted. </summary>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-pools.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="expand"> An OData $expand clause. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual AsyncPageable<BatchPool> GetPoolsAsync(int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, int? maxresults = default, string filter = default, IEnumerable<string> @select = default, IEnumerable<string> expand = default, CancellationToken cancellationToken = default)
        {
            return new BatchClientGetPoolsAsyncCollectionResultOfT(
                this,
                timeOutInSeconds,
                clientRequestId,
                returnClientRequestId,
                ocpdate,
                maxresults,
                filter,
                @select,
                expand,
                cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary>
        /// [Protocol Method] When you request that a Pool be deleted, the following actions occur: the Pool
        /// state is set to deleting; any ongoing resize operation on the Pool are stopped;
        /// the Batch service starts resizing the Pool to zero Compute Nodes; any Tasks
        /// running on existing Compute Nodes are terminated and requeued (as if a resize
        /// Pool operation had been requested with the default requeue option); finally,
        /// the Pool is removed from the system. Because running Tasks are requeued, the
        /// user can rerun these Tasks by updating their Job to target a different Pool.
        /// The Tasks can then run on the new Pool. If you want to override the requeue
        /// behavior, then you should call resize Pool explicitly to shrink the Pool to
        /// zero size before deleting the Pool. If you call an Update, Patch or Delete API
        /// on a Pool in the deleting state, it will fail with HTTP status code 409 with
        /// error code PoolBeingDeleted.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="poolId"> The ID of the Pool to get. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response DeletePool(string poolId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ifMatch, string ifNoneMatch, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.DeletePool");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));

                using HttpMessage message = CreateDeletePoolRequest(poolId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] When you request that a Pool be deleted, the following actions occur: the Pool
        /// state is set to deleting; any ongoing resize operation on the Pool are stopped;
        /// the Batch service starts resizing the Pool to zero Compute Nodes; any Tasks
        /// running on existing Compute Nodes are terminated and requeued (as if a resize
        /// Pool operation had been requested with the default requeue option); finally,
        /// the Pool is removed from the system. Because running Tasks are requeued, the
        /// user can rerun these Tasks by updating their Job to target a different Pool.
        /// The Tasks can then run on the new Pool. If you want to override the requeue
        /// behavior, then you should call resize Pool explicitly to shrink the Pool to
        /// zero size before deleting the Pool. If you call an Update, Patch or Delete API
        /// on a Pool in the deleting state, it will fail with HTTP status code 409 with
        /// error code PoolBeingDeleted.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="poolId"> The ID of the Pool to get. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> DeletePoolAsync(string poolId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ifMatch, string ifNoneMatch, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.DeletePool");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));

                using HttpMessage message = CreateDeletePoolRequest(poolId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// When you request that a Pool be deleted, the following actions occur: the Pool
        /// state is set to deleting; any ongoing resize operation on the Pool are stopped;
        /// the Batch service starts resizing the Pool to zero Compute Nodes; any Tasks
        /// running on existing Compute Nodes are terminated and requeued (as if a resize
        /// Pool operation had been requested with the default requeue option); finally,
        /// the Pool is removed from the system. Because running Tasks are requeued, the
        /// user can rerun these Tasks by updating their Job to target a different Pool.
        /// The Tasks can then run on the new Pool. If you want to override the requeue
        /// behavior, then you should call resize Pool explicitly to shrink the Pool to
        /// zero size before deleting the Pool. If you call an Update, Patch or Delete API
        /// on a Pool in the deleting state, it will fail with HTTP status code 409 with
        /// error code PoolBeingDeleted.
        /// </summary>
        /// <param name="poolId"> The ID of the Pool to get. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response DeletePool(string poolId, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));

            return DeletePool(poolId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary>
        /// When you request that a Pool be deleted, the following actions occur: the Pool
        /// state is set to deleting; any ongoing resize operation on the Pool are stopped;
        /// the Batch service starts resizing the Pool to zero Compute Nodes; any Tasks
        /// running on existing Compute Nodes are terminated and requeued (as if a resize
        /// Pool operation had been requested with the default requeue option); finally,
        /// the Pool is removed from the system. Because running Tasks are requeued, the
        /// user can rerun these Tasks by updating their Job to target a different Pool.
        /// The Tasks can then run on the new Pool. If you want to override the requeue
        /// behavior, then you should call resize Pool explicitly to shrink the Pool to
        /// zero size before deleting the Pool. If you call an Update, Patch or Delete API
        /// on a Pool in the deleting state, it will fail with HTTP status code 409 with
        /// error code PoolBeingDeleted.
        /// </summary>
        /// <param name="poolId"> The ID of the Pool to get. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> DeletePoolAsync(string poolId, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));

            return await DeletePoolAsync(poolId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] Gets basic properties of a Pool.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="poolId"> The ID of the Pool to get. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        internal virtual Response PoolExists(string poolId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ifMatch, string ifNoneMatch, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.PoolExists");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePoolExistsRequest(poolId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Gets basic properties of a Pool.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="poolId"> The ID of the Pool to get. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        internal virtual async Task<Response> PoolExistsAsync(string poolId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ifMatch, string ifNoneMatch, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.PoolExists");
            scope.Start();
            try
            {
                using HttpMessage message = CreatePoolExistsRequest(poolId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets basic properties of a Pool. </summary>
        /// <param name="poolId"> The ID of the Pool to get. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        internal virtual Response PoolExists(string poolId, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, CancellationToken cancellationToken = default)
        {
            return PoolExists(poolId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Gets basic properties of a Pool. </summary>
        /// <param name="poolId"> The ID of the Pool to get. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        internal virtual async Task<Response> PoolExistsAsync(string poolId, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, CancellationToken cancellationToken = default)
        {
            return await PoolExistsAsync(poolId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] Gets information about the specified Pool.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="poolId"> The ID of the Pool to get. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="expand"> An OData $expand clause. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetPool(string poolId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ifMatch, string ifNoneMatch, IEnumerable<string> @select, IEnumerable<string> expand, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.GetPool");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));

                using HttpMessage message = CreateGetPoolRequest(poolId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, @select, expand, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Gets information about the specified Pool.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="poolId"> The ID of the Pool to get. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="expand"> An OData $expand clause. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetPoolAsync(string poolId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ifMatch, string ifNoneMatch, IEnumerable<string> @select, IEnumerable<string> expand, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.GetPool");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));

                using HttpMessage message = CreateGetPoolRequest(poolId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, @select, expand, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets information about the specified Pool. </summary>
        /// <param name="poolId"> The ID of the Pool to get. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="expand"> An OData $expand clause. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<BatchPool> GetPool(string poolId, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, IEnumerable<string> @select = default, IEnumerable<string> expand = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));

            Response result = GetPool(poolId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, @select, expand, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((BatchPool)result, result);
        }

        /// <summary> Gets information about the specified Pool. </summary>
        /// <param name="poolId"> The ID of the Pool to get. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="expand"> An OData $expand clause. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<BatchPool>> GetPoolAsync(string poolId, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, IEnumerable<string> @select = default, IEnumerable<string> expand = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));

            Response result = await GetPoolAsync(poolId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, @select, expand, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((BatchPool)result, result);
        }

        /// <summary>
        /// [Protocol Method] This only replaces the Pool properties specified in the request. For example,
        /// if the Pool has a StartTask associated with it, and a request does not specify
        /// a StartTask element, then the Pool keeps the existing StartTask.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="poolId"> The ID of the Pool to get. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response UpdatePool(string poolId, RequestContent content, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.UpdatePool");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateUpdatePoolRequest(poolId, content, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] This only replaces the Pool properties specified in the request. For example,
        /// if the Pool has a StartTask associated with it, and a request does not specify
        /// a StartTask element, then the Pool keeps the existing StartTask.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="poolId"> The ID of the Pool to get. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> UpdatePoolAsync(string poolId, RequestContent content, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.UpdatePool");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateUpdatePoolRequest(poolId, content, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Disables automatic scaling for a Pool.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="poolId"> The ID of the Pool on which to disable automatic scaling. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response DisablePoolAutoScale(string poolId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.DisablePoolAutoScale");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));

                using HttpMessage message = CreateDisablePoolAutoScaleRequest(poolId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Disables automatic scaling for a Pool.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="poolId"> The ID of the Pool on which to disable automatic scaling. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> DisablePoolAutoScaleAsync(string poolId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.DisablePoolAutoScale");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));

                using HttpMessage message = CreateDisablePoolAutoScaleRequest(poolId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Disables automatic scaling for a Pool. </summary>
        /// <param name="poolId"> The ID of the Pool on which to disable automatic scaling. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response DisablePoolAutoScale(string poolId, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));

            return DisablePoolAutoScale(poolId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Disables automatic scaling for a Pool. </summary>
        /// <param name="poolId"> The ID of the Pool on which to disable automatic scaling. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> DisablePoolAutoScaleAsync(string poolId, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));

            return await DisablePoolAutoScaleAsync(poolId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] You cannot enable automatic scaling on a Pool if a resize operation is in
        /// progress on the Pool. If automatic scaling of the Pool is currently disabled,
        /// you must specify a valid autoscale formula as part of the request. If automatic
        /// scaling of the Pool is already enabled, you may specify a new autoscale formula
        /// and/or a new evaluation interval. You cannot call this API for the same Pool
        /// more than once every 30 seconds.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="poolId"> The ID of the Pool to get. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response EnablePoolAutoScale(string poolId, RequestContent content, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.EnablePoolAutoScale");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateEnablePoolAutoScaleRequest(poolId, content, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] You cannot enable automatic scaling on a Pool if a resize operation is in
        /// progress on the Pool. If automatic scaling of the Pool is currently disabled,
        /// you must specify a valid autoscale formula as part of the request. If automatic
        /// scaling of the Pool is already enabled, you may specify a new autoscale formula
        /// and/or a new evaluation interval. You cannot call this API for the same Pool
        /// more than once every 30 seconds.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="poolId"> The ID of the Pool to get. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> EnablePoolAutoScaleAsync(string poolId, RequestContent content, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.EnablePoolAutoScale");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateEnablePoolAutoScaleRequest(poolId, content, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// You cannot enable automatic scaling on a Pool if a resize operation is in
        /// progress on the Pool. If automatic scaling of the Pool is currently disabled,
        /// you must specify a valid autoscale formula as part of the request. If automatic
        /// scaling of the Pool is already enabled, you may specify a new autoscale formula
        /// and/or a new evaluation interval. You cannot call this API for the same Pool
        /// more than once every 30 seconds.
        /// </summary>
        /// <param name="poolId"> The ID of the Pool to get. </param>
        /// <param name="content"> The options to use for enabling automatic scaling. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response EnablePoolAutoScale(string poolId, BatchPoolEnableAutoScaleContent content, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
            Argument.AssertNotNull(content, nameof(content));

            return EnablePoolAutoScale(poolId, content, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary>
        /// You cannot enable automatic scaling on a Pool if a resize operation is in
        /// progress on the Pool. If automatic scaling of the Pool is currently disabled,
        /// you must specify a valid autoscale formula as part of the request. If automatic
        /// scaling of the Pool is already enabled, you may specify a new autoscale formula
        /// and/or a new evaluation interval. You cannot call this API for the same Pool
        /// more than once every 30 seconds.
        /// </summary>
        /// <param name="poolId"> The ID of the Pool to get. </param>
        /// <param name="content"> The options to use for enabling automatic scaling. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> EnablePoolAutoScaleAsync(string poolId, BatchPoolEnableAutoScaleContent content, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
            Argument.AssertNotNull(content, nameof(content));

            return await EnablePoolAutoScaleAsync(poolId, content, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] This API is primarily for validating an autoscale formula, as it simply returns
        /// the result without applying the formula to the Pool. The Pool must have auto
        /// scaling enabled in order to evaluate a formula.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="poolId"> The ID of the Pool on which to evaluate the automatic scaling formula. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response EvaluatePoolAutoScale(string poolId, RequestContent content, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.EvaluatePoolAutoScale");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateEvaluatePoolAutoScaleRequest(poolId, content, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] This API is primarily for validating an autoscale formula, as it simply returns
        /// the result without applying the formula to the Pool. The Pool must have auto
        /// scaling enabled in order to evaluate a formula.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="poolId"> The ID of the Pool on which to evaluate the automatic scaling formula. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> EvaluatePoolAutoScaleAsync(string poolId, RequestContent content, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.EvaluatePoolAutoScale");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateEvaluatePoolAutoScaleRequest(poolId, content, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// This API is primarily for validating an autoscale formula, as it simply returns
        /// the result without applying the formula to the Pool. The Pool must have auto
        /// scaling enabled in order to evaluate a formula.
        /// </summary>
        /// <param name="poolId"> The ID of the Pool on which to evaluate the automatic scaling formula. </param>
        /// <param name="content"> The options to use for evaluating the automatic scaling formula. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<AutoScaleRun> EvaluatePoolAutoScale(string poolId, BatchPoolEvaluateAutoScaleContent content, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
            Argument.AssertNotNull(content, nameof(content));

            Response result = EvaluatePoolAutoScale(poolId, content, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((AutoScaleRun)result, result);
        }

        /// <summary>
        /// This API is primarily for validating an autoscale formula, as it simply returns
        /// the result without applying the formula to the Pool. The Pool must have auto
        /// scaling enabled in order to evaluate a formula.
        /// </summary>
        /// <param name="poolId"> The ID of the Pool on which to evaluate the automatic scaling formula. </param>
        /// <param name="content"> The options to use for evaluating the automatic scaling formula. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<AutoScaleRun>> EvaluatePoolAutoScaleAsync(string poolId, BatchPoolEvaluateAutoScaleContent content, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
            Argument.AssertNotNull(content, nameof(content));

            Response result = await EvaluatePoolAutoScaleAsync(poolId, content, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((AutoScaleRun)result, result);
        }

        /// <summary>
        /// [Protocol Method] You can only resize a Pool when its allocation state is steady. If the Pool is
        /// already resizing, the request fails with status code 409. When you resize a
        /// Pool, the Pool's allocation state changes from steady to resizing. You cannot
        /// resize Pools which are configured for automatic scaling. If you try to do this,
        /// the Batch service returns an error 409. If you resize a Pool downwards, the
        /// Batch service chooses which Compute Nodes to remove. To remove specific Compute
        /// Nodes, use the Pool remove Compute Nodes API instead.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="poolId"> The ID of the Pool to get. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response ResizePool(string poolId, RequestContent content, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.ResizePool");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateResizePoolRequest(poolId, content, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] You can only resize a Pool when its allocation state is steady. If the Pool is
        /// already resizing, the request fails with status code 409. When you resize a
        /// Pool, the Pool's allocation state changes from steady to resizing. You cannot
        /// resize Pools which are configured for automatic scaling. If you try to do this,
        /// the Batch service returns an error 409. If you resize a Pool downwards, the
        /// Batch service chooses which Compute Nodes to remove. To remove specific Compute
        /// Nodes, use the Pool remove Compute Nodes API instead.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="poolId"> The ID of the Pool to get. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> ResizePoolAsync(string poolId, RequestContent content, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.ResizePool");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateResizePoolRequest(poolId, content, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// You can only resize a Pool when its allocation state is steady. If the Pool is
        /// already resizing, the request fails with status code 409. When you resize a
        /// Pool, the Pool's allocation state changes from steady to resizing. You cannot
        /// resize Pools which are configured for automatic scaling. If you try to do this,
        /// the Batch service returns an error 409. If you resize a Pool downwards, the
        /// Batch service chooses which Compute Nodes to remove. To remove specific Compute
        /// Nodes, use the Pool remove Compute Nodes API instead.
        /// </summary>
        /// <param name="poolId"> The ID of the Pool to get. </param>
        /// <param name="content"> The options to use for resizing the pool. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response ResizePool(string poolId, BatchPoolResizeContent content, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
            Argument.AssertNotNull(content, nameof(content));

            return ResizePool(poolId, content, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary>
        /// You can only resize a Pool when its allocation state is steady. If the Pool is
        /// already resizing, the request fails with status code 409. When you resize a
        /// Pool, the Pool's allocation state changes from steady to resizing. You cannot
        /// resize Pools which are configured for automatic scaling. If you try to do this,
        /// the Batch service returns an error 409. If you resize a Pool downwards, the
        /// Batch service chooses which Compute Nodes to remove. To remove specific Compute
        /// Nodes, use the Pool remove Compute Nodes API instead.
        /// </summary>
        /// <param name="poolId"> The ID of the Pool to get. </param>
        /// <param name="content"> The options to use for resizing the pool. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> ResizePoolAsync(string poolId, BatchPoolResizeContent content, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
            Argument.AssertNotNull(content, nameof(content));

            return await ResizePoolAsync(poolId, content, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] This does not restore the Pool to its previous state before the resize
        /// operation: it only stops any further changes being made, and the Pool maintains
        /// its current state. After stopping, the Pool stabilizes at the number of Compute
        /// Nodes it was at when the stop operation was done. During the stop operation,
        /// the Pool allocation state changes first to stopping and then to steady. A
        /// resize operation need not be an explicit resize Pool request; this API can also
        /// be used to halt the initial sizing of the Pool when it is created.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="poolId"> The ID of the Pool to get. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response StopPoolResize(string poolId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ifMatch, string ifNoneMatch, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.StopPoolResize");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));

                using HttpMessage message = CreateStopPoolResizeRequest(poolId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] This does not restore the Pool to its previous state before the resize
        /// operation: it only stops any further changes being made, and the Pool maintains
        /// its current state. After stopping, the Pool stabilizes at the number of Compute
        /// Nodes it was at when the stop operation was done. During the stop operation,
        /// the Pool allocation state changes first to stopping and then to steady. A
        /// resize operation need not be an explicit resize Pool request; this API can also
        /// be used to halt the initial sizing of the Pool when it is created.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="poolId"> The ID of the Pool to get. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> StopPoolResizeAsync(string poolId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ifMatch, string ifNoneMatch, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.StopPoolResize");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));

                using HttpMessage message = CreateStopPoolResizeRequest(poolId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// This does not restore the Pool to its previous state before the resize
        /// operation: it only stops any further changes being made, and the Pool maintains
        /// its current state. After stopping, the Pool stabilizes at the number of Compute
        /// Nodes it was at when the stop operation was done. During the stop operation,
        /// the Pool allocation state changes first to stopping and then to steady. A
        /// resize operation need not be an explicit resize Pool request; this API can also
        /// be used to halt the initial sizing of the Pool when it is created.
        /// </summary>
        /// <param name="poolId"> The ID of the Pool to get. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response StopPoolResize(string poolId, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));

            return StopPoolResize(poolId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary>
        /// This does not restore the Pool to its previous state before the resize
        /// operation: it only stops any further changes being made, and the Pool maintains
        /// its current state. After stopping, the Pool stabilizes at the number of Compute
        /// Nodes it was at when the stop operation was done. During the stop operation,
        /// the Pool allocation state changes first to stopping and then to steady. A
        /// resize operation need not be an explicit resize Pool request; this API can also
        /// be used to halt the initial sizing of the Pool when it is created.
        /// </summary>
        /// <param name="poolId"> The ID of the Pool to get. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> StopPoolResizeAsync(string poolId, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));

            return await StopPoolResizeAsync(poolId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] This fully replaces all the updatable properties of the Pool. For example, if
        /// the Pool has a StartTask associated with it and if StartTask is not specified
        /// with this request, then the Batch service will remove the existing StartTask.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="poolId"> The ID of the Pool to update. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response ReplacePoolProperties(string poolId, RequestContent content, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.ReplacePoolProperties");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateReplacePoolPropertiesRequest(poolId, content, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] This fully replaces all the updatable properties of the Pool. For example, if
        /// the Pool has a StartTask associated with it and if StartTask is not specified
        /// with this request, then the Batch service will remove the existing StartTask.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="poolId"> The ID of the Pool to update. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> ReplacePoolPropertiesAsync(string poolId, RequestContent content, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.ReplacePoolProperties");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateReplacePoolPropertiesRequest(poolId, content, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// This fully replaces all the updatable properties of the Pool. For example, if
        /// the Pool has a StartTask associated with it and if StartTask is not specified
        /// with this request, then the Batch service will remove the existing StartTask.
        /// </summary>
        /// <param name="poolId"> The ID of the Pool to update. </param>
        /// <param name="pool"> The options to use for replacing properties on the pool. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="pool"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response ReplacePoolProperties(string poolId, BatchPoolReplaceContent pool, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
            Argument.AssertNotNull(pool, nameof(pool));

            return ReplacePoolProperties(poolId, pool, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary>
        /// This fully replaces all the updatable properties of the Pool. For example, if
        /// the Pool has a StartTask associated with it and if StartTask is not specified
        /// with this request, then the Batch service will remove the existing StartTask.
        /// </summary>
        /// <param name="poolId"> The ID of the Pool to update. </param>
        /// <param name="pool"> The options to use for replacing properties on the pool. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="pool"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> ReplacePoolPropertiesAsync(string poolId, BatchPoolReplaceContent pool, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
            Argument.AssertNotNull(pool, nameof(pool));

            return await ReplacePoolPropertiesAsync(poolId, pool, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] This operation can only run when the allocation state of the Pool is steady.
        /// When this operation runs, the allocation state changes from steady to resizing.
        /// Each request may remove up to 100 nodes.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="poolId"> The ID of the Pool to get. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response RemoveNodes(string poolId, RequestContent content, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.RemoveNodes");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateRemoveNodesRequest(poolId, content, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] This operation can only run when the allocation state of the Pool is steady.
        /// When this operation runs, the allocation state changes from steady to resizing.
        /// Each request may remove up to 100 nodes.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="poolId"> The ID of the Pool to get. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> RemoveNodesAsync(string poolId, RequestContent content, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.RemoveNodes");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateRemoveNodesRequest(poolId, content, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// This operation can only run when the allocation state of the Pool is steady.
        /// When this operation runs, the allocation state changes from steady to resizing.
        /// Each request may remove up to 100 nodes.
        /// </summary>
        /// <param name="poolId"> The ID of the Pool to get. </param>
        /// <param name="content"> The options to use for removing the node. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response RemoveNodes(string poolId, BatchNodeRemoveContent content, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
            Argument.AssertNotNull(content, nameof(content));

            return RemoveNodes(poolId, content, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary>
        /// This operation can only run when the allocation state of the Pool is steady.
        /// When this operation runs, the allocation state changes from steady to resizing.
        /// Each request may remove up to 100 nodes.
        /// </summary>
        /// <param name="poolId"> The ID of the Pool to get. </param>
        /// <param name="content"> The options to use for removing the node. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> RemoveNodesAsync(string poolId, BatchNodeRemoveContent content, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
            Argument.AssertNotNull(content, nameof(content));

            return await RemoveNodesAsync(poolId, content, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] Lists all Virtual Machine Images supported by the Azure Batch service.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-support-images.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Pageable<BinaryData> GetSupportedImages(int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, int? maxresults, string filter, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.GetSupportedImages");
            scope.Start();
            try
            {
                return new BatchClientGetSupportedImagesCollectionResult(
                    this,
                    timeOutInSeconds,
                    clientRequestId,
                    returnClientRequestId,
                    ocpdate,
                    maxresults,
                    filter,
                    context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Lists all Virtual Machine Images supported by the Azure Batch service.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-support-images.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual AsyncPageable<BinaryData> GetSupportedImagesAsync(int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, int? maxresults, string filter, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.GetSupportedImages");
            scope.Start();
            try
            {
                return new BatchClientGetSupportedImagesAsyncCollectionResult(
                    this,
                    timeOutInSeconds,
                    clientRequestId,
                    returnClientRequestId,
                    ocpdate,
                    maxresults,
                    filter,
                    context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists all Virtual Machine Images supported by the Azure Batch service. </summary>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-support-images.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Pageable<BatchSupportedImage> GetSupportedImages(int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, int? maxresults = default, string filter = default, CancellationToken cancellationToken = default)
        {
            return new BatchClientGetSupportedImagesCollectionResultOfT(
                this,
                timeOutInSeconds,
                clientRequestId,
                returnClientRequestId,
                ocpdate,
                maxresults,
                filter,
                cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Lists all Virtual Machine Images supported by the Azure Batch service. </summary>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-support-images.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual AsyncPageable<BatchSupportedImage> GetSupportedImagesAsync(int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, int? maxresults = default, string filter = default, CancellationToken cancellationToken = default)
        {
            return new BatchClientGetSupportedImagesAsyncCollectionResultOfT(
                this,
                timeOutInSeconds,
                clientRequestId,
                returnClientRequestId,
                ocpdate,
                maxresults,
                filter,
                cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary>
        /// [Protocol Method] Gets the number of Compute Nodes in each state, grouped by Pool. Note that the
        /// numbers returned may not always be up to date. If you need exact node counts,
        /// use a list query.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-support-images.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Pageable<BinaryData> GetPoolNodeCounts(int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, int? maxresults, string filter, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.GetPoolNodeCounts");
            scope.Start();
            try
            {
                return new BatchClientGetPoolNodeCountsCollectionResult(
                    this,
                    timeOutInSeconds,
                    clientRequestId,
                    returnClientRequestId,
                    ocpdate,
                    maxresults,
                    filter,
                    context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Gets the number of Compute Nodes in each state, grouped by Pool. Note that the
        /// numbers returned may not always be up to date. If you need exact node counts,
        /// use a list query.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-support-images.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual AsyncPageable<BinaryData> GetPoolNodeCountsAsync(int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, int? maxresults, string filter, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.GetPoolNodeCounts");
            scope.Start();
            try
            {
                return new BatchClientGetPoolNodeCountsAsyncCollectionResult(
                    this,
                    timeOutInSeconds,
                    clientRequestId,
                    returnClientRequestId,
                    ocpdate,
                    maxresults,
                    filter,
                    context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the number of Compute Nodes in each state, grouped by Pool. Note that the
        /// numbers returned may not always be up to date. If you need exact node counts,
        /// use a list query.
        /// </summary>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-support-images.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Pageable<BatchPoolNodeCounts> GetPoolNodeCounts(int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, int? maxresults = default, string filter = default, CancellationToken cancellationToken = default)
        {
            return new BatchClientGetPoolNodeCountsCollectionResultOfT(
                this,
                timeOutInSeconds,
                clientRequestId,
                returnClientRequestId,
                ocpdate,
                maxresults,
                filter,
                cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary>
        /// Gets the number of Compute Nodes in each state, grouped by Pool. Note that the
        /// numbers returned may not always be up to date. If you need exact node counts,
        /// use a list query.
        /// </summary>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-support-images.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual AsyncPageable<BatchPoolNodeCounts> GetPoolNodeCountsAsync(int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, int? maxresults = default, string filter = default, CancellationToken cancellationToken = default)
        {
            return new BatchClientGetPoolNodeCountsAsyncCollectionResultOfT(
                this,
                timeOutInSeconds,
                clientRequestId,
                returnClientRequestId,
                ocpdate,
                maxresults,
                filter,
                cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary>
        /// [Protocol Method] Deleting a Job also deletes all Tasks that are part of that Job, and all Job
        /// statistics. This also overrides the retention period for Task data; that is, if
        /// the Job contains Tasks which are still retained on Compute Nodes, the Batch
        /// services deletes those Tasks' working directories and all their contents.  When
        /// a Delete Job request is received, the Batch service sets the Job to the
        /// deleting state. All update operations on a Job that is in deleting state will
        /// fail with status code 409 (Conflict), with additional information indicating
        /// that the Job is being deleted.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobId"> The ID of the Job to delete. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="force"> If true, the server will delete the Job even if the corresponding nodes have not fully processed the deletion. The default value is false. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response DeleteJob(string jobId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ifMatch, string ifNoneMatch, bool? force, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.DeleteJob");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

                using HttpMessage message = CreateDeleteJobRequest(jobId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, force, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Deleting a Job also deletes all Tasks that are part of that Job, and all Job
        /// statistics. This also overrides the retention period for Task data; that is, if
        /// the Job contains Tasks which are still retained on Compute Nodes, the Batch
        /// services deletes those Tasks' working directories and all their contents.  When
        /// a Delete Job request is received, the Batch service sets the Job to the
        /// deleting state. All update operations on a Job that is in deleting state will
        /// fail with status code 409 (Conflict), with additional information indicating
        /// that the Job is being deleted.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobId"> The ID of the Job to delete. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="force"> If true, the server will delete the Job even if the corresponding nodes have not fully processed the deletion. The default value is false. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> DeleteJobAsync(string jobId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ifMatch, string ifNoneMatch, bool? force, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.DeleteJob");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

                using HttpMessage message = CreateDeleteJobRequest(jobId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, force, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Deleting a Job also deletes all Tasks that are part of that Job, and all Job
        /// statistics. This also overrides the retention period for Task data; that is, if
        /// the Job contains Tasks which are still retained on Compute Nodes, the Batch
        /// services deletes those Tasks' working directories and all their contents.  When
        /// a Delete Job request is received, the Batch service sets the Job to the
        /// deleting state. All update operations on a Job that is in deleting state will
        /// fail with status code 409 (Conflict), with additional information indicating
        /// that the Job is being deleted.
        /// </summary>
        /// <param name="jobId"> The ID of the Job to delete. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="force"> If true, the server will delete the Job even if the corresponding nodes have not fully processed the deletion. The default value is false. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response DeleteJob(string jobId, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, bool? force = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

            return DeleteJob(jobId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, force, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary>
        /// Deleting a Job also deletes all Tasks that are part of that Job, and all Job
        /// statistics. This also overrides the retention period for Task data; that is, if
        /// the Job contains Tasks which are still retained on Compute Nodes, the Batch
        /// services deletes those Tasks' working directories and all their contents.  When
        /// a Delete Job request is received, the Batch service sets the Job to the
        /// deleting state. All update operations on a Job that is in deleting state will
        /// fail with status code 409 (Conflict), with additional information indicating
        /// that the Job is being deleted.
        /// </summary>
        /// <param name="jobId"> The ID of the Job to delete. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="force"> If true, the server will delete the Job even if the corresponding nodes have not fully processed the deletion. The default value is false. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> DeleteJobAsync(string jobId, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, bool? force = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

            return await DeleteJobAsync(jobId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, force, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] Gets information about the specified Job.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobId"> The ID of the Job. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="expand"> An OData $expand clause. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetJob(string jobId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ifMatch, string ifNoneMatch, IEnumerable<string> @select, IEnumerable<string> expand, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.GetJob");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

                using HttpMessage message = CreateGetJobRequest(jobId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, @select, expand, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Gets information about the specified Job.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobId"> The ID of the Job. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="expand"> An OData $expand clause. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetJobAsync(string jobId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ifMatch, string ifNoneMatch, IEnumerable<string> @select, IEnumerable<string> expand, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.GetJob");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

                using HttpMessage message = CreateGetJobRequest(jobId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, @select, expand, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets information about the specified Job. </summary>
        /// <param name="jobId"> The ID of the Job. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="expand"> An OData $expand clause. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<BatchJob> GetJob(string jobId, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, IEnumerable<string> @select = default, IEnumerable<string> expand = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

            Response result = GetJob(jobId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, @select, expand, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((BatchJob)result, result);
        }

        /// <summary> Gets information about the specified Job. </summary>
        /// <param name="jobId"> The ID of the Job. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="expand"> An OData $expand clause. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<BatchJob>> GetJobAsync(string jobId, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, IEnumerable<string> @select = default, IEnumerable<string> expand = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

            Response result = await GetJobAsync(jobId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, @select, expand, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((BatchJob)result, result);
        }

        /// <summary>
        /// [Protocol Method] This replaces only the Job properties specified in the request. For example, if
        /// the Job has constraints, and a request does not specify the constraints
        /// element, then the Job keeps the existing constraints.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobId"> The ID of the Job whose properties you want to update. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response UpdateJob(string jobId, RequestContent content, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.UpdateJob");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateUpdateJobRequest(jobId, content, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] This replaces only the Job properties specified in the request. For example, if
        /// the Job has constraints, and a request does not specify the constraints
        /// element, then the Job keeps the existing constraints.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobId"> The ID of the Job whose properties you want to update. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> UpdateJobAsync(string jobId, RequestContent content, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.UpdateJob");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateUpdateJobRequest(jobId, content, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] This fully replaces all the updatable properties of the Job. For example, if
        /// the Job has constraints associated with it and if constraints is not specified
        /// with this request, then the Batch service will remove the existing constraints.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobId"> The ID of the Job whose properties you want to update. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response ReplaceJob(string jobId, RequestContent content, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.ReplaceJob");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateReplaceJobRequest(jobId, content, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] This fully replaces all the updatable properties of the Job. For example, if
        /// the Job has constraints associated with it and if constraints is not specified
        /// with this request, then the Batch service will remove the existing constraints.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobId"> The ID of the Job whose properties you want to update. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> ReplaceJobAsync(string jobId, RequestContent content, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.ReplaceJob");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateReplaceJobRequest(jobId, content, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// This fully replaces all the updatable properties of the Job. For example, if
        /// the Job has constraints associated with it and if constraints is not specified
        /// with this request, then the Batch service will remove the existing constraints.
        /// </summary>
        /// <param name="jobId"> The ID of the Job whose properties you want to update. </param>
        /// <param name="job"> A job with updated properties. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="job"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response ReplaceJob(string jobId, BatchJob job, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
            Argument.AssertNotNull(job, nameof(job));

            return ReplaceJob(jobId, job, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary>
        /// This fully replaces all the updatable properties of the Job. For example, if
        /// the Job has constraints associated with it and if constraints is not specified
        /// with this request, then the Batch service will remove the existing constraints.
        /// </summary>
        /// <param name="jobId"> The ID of the Job whose properties you want to update. </param>
        /// <param name="job"> A job with updated properties. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="job"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> ReplaceJobAsync(string jobId, BatchJob job, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
            Argument.AssertNotNull(job, nameof(job));

            return await ReplaceJobAsync(jobId, job, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] The Batch Service immediately moves the Job to the disabling state. Batch then
        /// uses the disableTasks parameter to determine what to do with the currently
        /// running Tasks of the Job. The Job remains in the disabling state until the
        /// disable operation is completed and all Tasks have been dealt with according to
        /// the disableTasks option; the Job then moves to the disabled state. No new Tasks
        /// are started under the Job until it moves back to active state. If you try to
        /// disable a Job that is in any state other than active, disabling, or disabled,
        /// the request fails with status code 409.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobId"> The ID of the Job to disable. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response DisableJob(string jobId, RequestContent content, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.DisableJob");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateDisableJobRequest(jobId, content, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] The Batch Service immediately moves the Job to the disabling state. Batch then
        /// uses the disableTasks parameter to determine what to do with the currently
        /// running Tasks of the Job. The Job remains in the disabling state until the
        /// disable operation is completed and all Tasks have been dealt with according to
        /// the disableTasks option; the Job then moves to the disabled state. No new Tasks
        /// are started under the Job until it moves back to active state. If you try to
        /// disable a Job that is in any state other than active, disabling, or disabled,
        /// the request fails with status code 409.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobId"> The ID of the Job to disable. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> DisableJobAsync(string jobId, RequestContent content, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.DisableJob");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateDisableJobRequest(jobId, content, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// The Batch Service immediately moves the Job to the disabling state. Batch then
        /// uses the disableTasks parameter to determine what to do with the currently
        /// running Tasks of the Job. The Job remains in the disabling state until the
        /// disable operation is completed and all Tasks have been dealt with according to
        /// the disableTasks option; the Job then moves to the disabled state. No new Tasks
        /// are started under the Job until it moves back to active state. If you try to
        /// disable a Job that is in any state other than active, disabling, or disabled,
        /// the request fails with status code 409.
        /// </summary>
        /// <param name="jobId"> The ID of the Job to disable. </param>
        /// <param name="content"> The options to use for disabling the Job. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response DisableJob(string jobId, BatchJobDisableContent content, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
            Argument.AssertNotNull(content, nameof(content));

            return DisableJob(jobId, content, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary>
        /// The Batch Service immediately moves the Job to the disabling state. Batch then
        /// uses the disableTasks parameter to determine what to do with the currently
        /// running Tasks of the Job. The Job remains in the disabling state until the
        /// disable operation is completed and all Tasks have been dealt with according to
        /// the disableTasks option; the Job then moves to the disabled state. No new Tasks
        /// are started under the Job until it moves back to active state. If you try to
        /// disable a Job that is in any state other than active, disabling, or disabled,
        /// the request fails with status code 409.
        /// </summary>
        /// <param name="jobId"> The ID of the Job to disable. </param>
        /// <param name="content"> The options to use for disabling the Job. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> DisableJobAsync(string jobId, BatchJobDisableContent content, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
            Argument.AssertNotNull(content, nameof(content));

            return await DisableJobAsync(jobId, content, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] When you call this API, the Batch service sets a disabled Job to the enabling
        /// state. After the this operation is completed, the Job moves to the active
        /// state, and scheduling of new Tasks under the Job resumes. The Batch service
        /// does not allow a Task to remain in the active state for more than 180 days.
        /// Therefore, if you enable a Job containing active Tasks which were added more
        /// than 180 days ago, those Tasks will not run.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobId"> The ID of the Job to enable. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response EnableJob(string jobId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ifMatch, string ifNoneMatch, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.EnableJob");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

                using HttpMessage message = CreateEnableJobRequest(jobId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] When you call this API, the Batch service sets a disabled Job to the enabling
        /// state. After the this operation is completed, the Job moves to the active
        /// state, and scheduling of new Tasks under the Job resumes. The Batch service
        /// does not allow a Task to remain in the active state for more than 180 days.
        /// Therefore, if you enable a Job containing active Tasks which were added more
        /// than 180 days ago, those Tasks will not run.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobId"> The ID of the Job to enable. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> EnableJobAsync(string jobId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ifMatch, string ifNoneMatch, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.EnableJob");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

                using HttpMessage message = CreateEnableJobRequest(jobId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// When you call this API, the Batch service sets a disabled Job to the enabling
        /// state. After the this operation is completed, the Job moves to the active
        /// state, and scheduling of new Tasks under the Job resumes. The Batch service
        /// does not allow a Task to remain in the active state for more than 180 days.
        /// Therefore, if you enable a Job containing active Tasks which were added more
        /// than 180 days ago, those Tasks will not run.
        /// </summary>
        /// <param name="jobId"> The ID of the Job to enable. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response EnableJob(string jobId, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

            return EnableJob(jobId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary>
        /// When you call this API, the Batch service sets a disabled Job to the enabling
        /// state. After the this operation is completed, the Job moves to the active
        /// state, and scheduling of new Tasks under the Job resumes. The Batch service
        /// does not allow a Task to remain in the active state for more than 180 days.
        /// Therefore, if you enable a Job containing active Tasks which were added more
        /// than 180 days ago, those Tasks will not run.
        /// </summary>
        /// <param name="jobId"> The ID of the Job to enable. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> EnableJobAsync(string jobId, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

            return await EnableJobAsync(jobId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] When a Terminate Job request is received, the Batch service sets the Job to the
        /// terminating state. The Batch service then terminates any running Tasks
        /// associated with the Job and runs any required Job release Tasks. Then the Job
        /// moves into the completed state. If there are any Tasks in the Job in the active
        /// state, they will remain in the active state. Once a Job is terminated, new
        /// Tasks cannot be added and any remaining active Tasks will not be scheduled.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobId"> The ID of the Job to terminate. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="force"> If true, the server will terminate the Job even if the corresponding nodes have not fully processed the termination. The default value is false. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response TerminateJob(string jobId, RequestContent content, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ifMatch, string ifNoneMatch, bool? force, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.TerminateJob");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

                using HttpMessage message = CreateTerminateJobRequest(jobId, content, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, force, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] When a Terminate Job request is received, the Batch service sets the Job to the
        /// terminating state. The Batch service then terminates any running Tasks
        /// associated with the Job and runs any required Job release Tasks. Then the Job
        /// moves into the completed state. If there are any Tasks in the Job in the active
        /// state, they will remain in the active state. Once a Job is terminated, new
        /// Tasks cannot be added and any remaining active Tasks will not be scheduled.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobId"> The ID of the Job to terminate. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="force"> If true, the server will terminate the Job even if the corresponding nodes have not fully processed the termination. The default value is false. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> TerminateJobAsync(string jobId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ifMatch, string ifNoneMatch, bool? force, RequestContent content, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.TerminateJob");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

                using HttpMessage message = this.CreateTerminateJobRequest(jobId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, force, content, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// When a Terminate Job request is received, the Batch service sets the Job to the
        /// terminating state. The Batch service then terminates any running Tasks
        /// associated with the Job and runs any required Job release Tasks. Then the Job
        /// moves into the completed state. If there are any Tasks in the Job in the active
        /// state, they will remain in the active state. Once a Job is terminated, new
        /// Tasks cannot be added and any remaining active Tasks will not be scheduled.
        /// </summary>
        /// <param name="jobId"> The ID of the Job to terminate. </param>
        /// <param name="parameters"> The options to use for terminating the Job. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="force"> If true, the server will terminate the Job even if the corresponding nodes have not fully processed the termination. The default value is false. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response TerminateJob(string jobId, BatchJobTerminateContent parameters = default, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, bool? force = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

            return TerminateJob(jobId, parameters, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, force, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary>
        /// When a Terminate Job request is received, the Batch service sets the Job to the
        /// terminating state. The Batch service then terminates any running Tasks
        /// associated with the Job and runs any required Job release Tasks. Then the Job
        /// moves into the completed state. If there are any Tasks in the Job in the active
        /// state, they will remain in the active state. Once a Job is terminated, new
        /// Tasks cannot be added and any remaining active Tasks will not be scheduled.
        /// </summary>
        /// <param name="jobId"> The ID of the Job to terminate. </param>
        /// <param name="parameters"> The options to use for terminating the Job. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="force"> If true, the server will terminate the Job even if the corresponding nodes have not fully processed the termination. The default value is false. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> TerminateJobAsync(string jobId, BatchJobTerminateContent parameters = default, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, bool? force = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

            return await this.TerminateJobAsync(jobId, parameters, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, force, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] The Batch service supports two ways to control the work done as part of a Job.
        /// In the first approach, the user specifies a Job Manager Task. The Batch service
        /// launches this Task when it is ready to start the Job. The Job Manager Task
        /// controls all other Tasks that run under this Job, by using the Task APIs. In
        /// the second approach, the user directly controls the execution of Tasks under an
        /// active Job, by using the Task APIs. Also note: when naming Jobs, avoid
        /// including sensitive information such as user names or secret project names.
        /// This information may appear in telemetry logs accessible to Microsoft Support
        /// engineers.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response CreateJob(RequestContent content, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.CreateJob");
            scope.Start();
            try
            {
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateCreateJobRequest(content, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] The Batch service supports two ways to control the work done as part of a Job.
        /// In the first approach, the user specifies a Job Manager Task. The Batch service
        /// launches this Task when it is ready to start the Job. The Job Manager Task
        /// controls all other Tasks that run under this Job, by using the Task APIs. In
        /// the second approach, the user directly controls the execution of Tasks under an
        /// active Job, by using the Task APIs. Also note: when naming Jobs, avoid
        /// including sensitive information such as user names or secret project names.
        /// This information may appear in telemetry logs accessible to Microsoft Support
        /// engineers.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> CreateJobAsync(RequestContent content, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.CreateJob");
            scope.Start();
            try
            {
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateCreateJobRequest(content, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// The Batch service supports two ways to control the work done as part of a Job.
        /// In the first approach, the user specifies a Job Manager Task. The Batch service
        /// launches this Task when it is ready to start the Job. The Job Manager Task
        /// controls all other Tasks that run under this Job, by using the Task APIs. In
        /// the second approach, the user directly controls the execution of Tasks under an
        /// active Job, by using the Task APIs. Also note: when naming Jobs, avoid
        /// including sensitive information such as user names or secret project names.
        /// This information may appear in telemetry logs accessible to Microsoft Support
        /// engineers.
        /// </summary>
        /// <param name="job"> The Job to be created. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="job"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response CreateJob(BatchJobCreateContent job, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(job, nameof(job));

            return CreateJob(job, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary>
        /// The Batch service supports two ways to control the work done as part of a Job.
        /// In the first approach, the user specifies a Job Manager Task. The Batch service
        /// launches this Task when it is ready to start the Job. The Job Manager Task
        /// controls all other Tasks that run under this Job, by using the Task APIs. In
        /// the second approach, the user directly controls the execution of Tasks under an
        /// active Job, by using the Task APIs. Also note: when naming Jobs, avoid
        /// including sensitive information such as user names or secret project names.
        /// This information may appear in telemetry logs accessible to Microsoft Support
        /// engineers.
        /// </summary>
        /// <param name="job"> The Job to be created. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="job"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> CreateJobAsync(BatchJobCreateContent job, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(job, nameof(job));

            return await CreateJobAsync(job, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] Lists all of the Jobs in the specified Account.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-jobs.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="expand"> An OData $expand clause. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Pageable<BinaryData> GetJobs(int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, int? maxresults, string filter, IEnumerable<string> @select, IEnumerable<string> expand, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.GetJobs");
            scope.Start();
            try
            {
                return new BatchClientGetJobsCollectionResult(
                    this,
                    timeOutInSeconds,
                    clientRequestId,
                    returnClientRequestId,
                    ocpdate,
                    maxresults,
                    filter,
                    @select,
                    expand,
                    context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Lists all of the Jobs in the specified Account.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-jobs.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="expand"> An OData $expand clause. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual AsyncPageable<BinaryData> GetJobsAsync(int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, int? maxresults, string filter, IEnumerable<string> @select, IEnumerable<string> expand, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.GetJobs");
            scope.Start();
            try
            {
                return new BatchClientGetJobsAsyncCollectionResult(
                    this,
                    timeOutInSeconds,
                    clientRequestId,
                    returnClientRequestId,
                    ocpdate,
                    maxresults,
                    filter,
                    @select,
                    expand,
                    context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists all of the Jobs in the specified Account. </summary>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-jobs.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="expand"> An OData $expand clause. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Pageable<BatchJob> GetJobs(int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, int? maxresults = default, string filter = default, IEnumerable<string> @select = default, IEnumerable<string> expand = default, CancellationToken cancellationToken = default)
        {
            return new BatchClientGetJobsCollectionResultOfT(
                this,
                timeOutInSeconds,
                clientRequestId,
                returnClientRequestId,
                ocpdate,
                maxresults,
                filter,
                @select,
                expand,
                cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Lists all of the Jobs in the specified Account. </summary>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-jobs.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="expand"> An OData $expand clause. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual AsyncPageable<BatchJob> GetJobsAsync(int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, int? maxresults = default, string filter = default, IEnumerable<string> @select = default, IEnumerable<string> expand = default, CancellationToken cancellationToken = default)
        {
            return new BatchClientGetJobsAsyncCollectionResultOfT(
                this,
                timeOutInSeconds,
                clientRequestId,
                returnClientRequestId,
                ocpdate,
                maxresults,
                filter,
                @select,
                expand,
                cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary>
        /// [Protocol Method] Lists the Jobs that have been created under the specified Job Schedule.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule from which you want to get a list of Jobs. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-jobs-in-a-job-schedule.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="expand"> An OData $expand clause. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobScheduleId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobScheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Pageable<BinaryData> GetJobsFromSchedule(string jobScheduleId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, int? maxresults, string filter, IEnumerable<string> @select, IEnumerable<string> expand, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.GetJobsFromSchedule");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(jobScheduleId, nameof(jobScheduleId));

                return new BatchClientGetJobsFromScheduleCollectionResult(
                    this,
                    jobScheduleId,
                    timeOutInSeconds,
                    clientRequestId,
                    returnClientRequestId,
                    ocpdate,
                    maxresults,
                    filter,
                    @select,
                    expand,
                    context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Lists the Jobs that have been created under the specified Job Schedule.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule from which you want to get a list of Jobs. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-jobs-in-a-job-schedule.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="expand"> An OData $expand clause. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobScheduleId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobScheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual AsyncPageable<BinaryData> GetJobsFromScheduleAsync(string jobScheduleId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, int? maxresults, string filter, IEnumerable<string> @select, IEnumerable<string> expand, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.GetJobsFromSchedule");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(jobScheduleId, nameof(jobScheduleId));

                return new BatchClientGetJobsFromScheduleAsyncCollectionResult(
                    this,
                    jobScheduleId,
                    timeOutInSeconds,
                    clientRequestId,
                    returnClientRequestId,
                    ocpdate,
                    maxresults,
                    filter,
                    @select,
                    expand,
                    context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists the Jobs that have been created under the specified Job Schedule. </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule from which you want to get a list of Jobs. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-jobs-in-a-job-schedule.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="expand"> An OData $expand clause. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobScheduleId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobScheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Pageable<BatchJob> GetJobsFromSchedule(string jobScheduleId, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, int? maxresults = default, string filter = default, IEnumerable<string> @select = default, IEnumerable<string> expand = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobScheduleId, nameof(jobScheduleId));

            return new BatchClientGetJobsFromScheduleCollectionResultOfT(
                this,
                jobScheduleId,
                timeOutInSeconds,
                clientRequestId,
                returnClientRequestId,
                ocpdate,
                maxresults,
                filter,
                @select,
                expand,
                cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Lists the Jobs that have been created under the specified Job Schedule. </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule from which you want to get a list of Jobs. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-jobs-in-a-job-schedule.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="expand"> An OData $expand clause. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobScheduleId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobScheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual AsyncPageable<BatchJob> GetJobsFromScheduleAsync(string jobScheduleId, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, int? maxresults = default, string filter = default, IEnumerable<string> @select = default, IEnumerable<string> expand = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobScheduleId, nameof(jobScheduleId));

            return new BatchClientGetJobsFromScheduleAsyncCollectionResultOfT(
                this,
                jobScheduleId,
                timeOutInSeconds,
                clientRequestId,
                returnClientRequestId,
                ocpdate,
                maxresults,
                filter,
                @select,
                expand,
                cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary>
        /// [Protocol Method] This API returns the Job Preparation and Job Release Task status on all Compute
        /// Nodes that have run the Job Preparation or Job Release Task. This includes
        /// Compute Nodes which have since been removed from the Pool. If this API is
        /// invoked on a Job which has no Job Preparation or Job Release Task, the Batch
        /// service returns HTTP status code 409 (Conflict) with an error code of
        /// JobPreparationTaskNotSpecified.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobId"> The ID of the Job. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-job-preparation-and-release-status.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Pageable<BinaryData> GetJobPreparationAndReleaseTaskStatus(string jobId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, int? maxresults, string filter, IEnumerable<string> @select, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.GetJobPreparationAndReleaseTaskStatus");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

                return new BatchClientGetJobPreparationAndReleaseTaskStatusCollectionResult(
                    this,
                    jobId,
                    timeOutInSeconds,
                    clientRequestId,
                    returnClientRequestId,
                    ocpdate,
                    maxresults,
                    filter,
                    @select,
                    context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] This API returns the Job Preparation and Job Release Task status on all Compute
        /// Nodes that have run the Job Preparation or Job Release Task. This includes
        /// Compute Nodes which have since been removed from the Pool. If this API is
        /// invoked on a Job which has no Job Preparation or Job Release Task, the Batch
        /// service returns HTTP status code 409 (Conflict) with an error code of
        /// JobPreparationTaskNotSpecified.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobId"> The ID of the Job. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-job-preparation-and-release-status.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual AsyncPageable<BinaryData> GetJobPreparationAndReleaseTaskStatusAsync(string jobId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, int? maxresults, string filter, IEnumerable<string> @select, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.GetJobPreparationAndReleaseTaskStatus");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

                return new BatchClientGetJobPreparationAndReleaseTaskStatusAsyncCollectionResult(
                    this,
                    jobId,
                    timeOutInSeconds,
                    clientRequestId,
                    returnClientRequestId,
                    ocpdate,
                    maxresults,
                    filter,
                    @select,
                    context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// This API returns the Job Preparation and Job Release Task status on all Compute
        /// Nodes that have run the Job Preparation or Job Release Task. This includes
        /// Compute Nodes which have since been removed from the Pool. If this API is
        /// invoked on a Job which has no Job Preparation or Job Release Task, the Batch
        /// service returns HTTP status code 409 (Conflict) with an error code of
        /// JobPreparationTaskNotSpecified.
        /// </summary>
        /// <param name="jobId"> The ID of the Job. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-job-preparation-and-release-status.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Pageable<BatchJobPreparationAndReleaseTaskStatus> GetJobPreparationAndReleaseTaskStatus(string jobId, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, int? maxresults = default, string filter = default, IEnumerable<string> @select = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

            return new BatchClientGetJobPreparationAndReleaseTaskStatusCollectionResultOfT(
                this,
                jobId,
                timeOutInSeconds,
                clientRequestId,
                returnClientRequestId,
                ocpdate,
                maxresults,
                filter,
                @select,
                cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary>
        /// This API returns the Job Preparation and Job Release Task status on all Compute
        /// Nodes that have run the Job Preparation or Job Release Task. This includes
        /// Compute Nodes which have since been removed from the Pool. If this API is
        /// invoked on a Job which has no Job Preparation or Job Release Task, the Batch
        /// service returns HTTP status code 409 (Conflict) with an error code of
        /// JobPreparationTaskNotSpecified.
        /// </summary>
        /// <param name="jobId"> The ID of the Job. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-job-preparation-and-release-status.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual AsyncPageable<BatchJobPreparationAndReleaseTaskStatus> GetJobPreparationAndReleaseTaskStatusAsync(string jobId, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, int? maxresults = default, string filter = default, IEnumerable<string> @select = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

            return new BatchClientGetJobPreparationAndReleaseTaskStatusAsyncCollectionResultOfT(
                this,
                jobId,
                timeOutInSeconds,
                clientRequestId,
                returnClientRequestId,
                ocpdate,
                maxresults,
                filter,
                @select,
                cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary>
        /// [Protocol Method] Task counts provide a count of the Tasks by active, running or completed Task
        /// state, and a count of Tasks which succeeded or failed. Tasks in the preparing
        /// state are counted as running. Note that the numbers returned may not always be
        /// up to date. If you need exact task counts, use a list query.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobId"> The ID of the Job. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetJobTaskCounts(string jobId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.GetJobTaskCounts");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

                using HttpMessage message = CreateGetJobTaskCountsRequest(jobId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Task counts provide a count of the Tasks by active, running or completed Task
        /// state, and a count of Tasks which succeeded or failed. Tasks in the preparing
        /// state are counted as running. Note that the numbers returned may not always be
        /// up to date. If you need exact task counts, use a list query.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobId"> The ID of the Job. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetJobTaskCountsAsync(string jobId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.GetJobTaskCounts");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

                using HttpMessage message = CreateGetJobTaskCountsRequest(jobId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Task counts provide a count of the Tasks by active, running or completed Task
        /// state, and a count of Tasks which succeeded or failed. Tasks in the preparing
        /// state are counted as running. Note that the numbers returned may not always be
        /// up to date. If you need exact task counts, use a list query.
        /// </summary>
        /// <param name="jobId"> The ID of the Job. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<BatchTaskCountsResult> GetJobTaskCounts(string jobId, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

            Response result = GetJobTaskCounts(jobId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((BatchTaskCountsResult)result, result);
        }

        /// <summary>
        /// Task counts provide a count of the Tasks by active, running or completed Task
        /// state, and a count of Tasks which succeeded or failed. Tasks in the preparing
        /// state are counted as running. Note that the numbers returned may not always be
        /// up to date. If you need exact task counts, use a list query.
        /// </summary>
        /// <param name="jobId"> The ID of the Job. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<BatchTaskCountsResult>> GetJobTaskCountsAsync(string jobId, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

            Response result = await GetJobTaskCountsAsync(jobId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((BatchTaskCountsResult)result, result);
        }

        /// <summary>
        /// [Protocol Method] Creates a Certificate to the specified Account.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response CreateCertificate(RequestContent content, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.CreateCertificate");
            scope.Start();
            try
            {
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateCreateCertificateRequest(content, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Creates a Certificate to the specified Account.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> CreateCertificateAsync(RequestContent content, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.CreateCertificate");
            scope.Start();
            try
            {
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateCreateCertificateRequest(content, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates a Certificate to the specified Account. </summary>
        /// <param name="certificate"> The Certificate to be created. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="certificate"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response CreateCertificate(BatchCertificate certificate, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(certificate, nameof(certificate));

            return CreateCertificate(certificate, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Creates a Certificate to the specified Account. </summary>
        /// <param name="certificate"> The Certificate to be created. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="certificate"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> CreateCertificateAsync(BatchCertificate certificate, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(certificate, nameof(certificate));

            return await CreateCertificateAsync(certificate, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] Lists all of the Certificates that have been added to the specified Account.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-certificates.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Pageable<BinaryData> GetCertificates(int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, int? maxresults, string filter, IEnumerable<string> @select, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.GetCertificates");
            scope.Start();
            try
            {
                return new BatchClientGetCertificatesCollectionResult(
                    this,
                    timeOutInSeconds,
                    clientRequestId,
                    returnClientRequestId,
                    ocpdate,
                    maxresults,
                    filter,
                    @select,
                    context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Lists all of the Certificates that have been added to the specified Account.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-certificates.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual AsyncPageable<BinaryData> GetCertificatesAsync(int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, int? maxresults, string filter, IEnumerable<string> @select, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.GetCertificates");
            scope.Start();
            try
            {
                return new BatchClientGetCertificatesAsyncCollectionResult(
                    this,
                    timeOutInSeconds,
                    clientRequestId,
                    returnClientRequestId,
                    ocpdate,
                    maxresults,
                    filter,
                    @select,
                    context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists all of the Certificates that have been added to the specified Account. </summary>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-certificates.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Pageable<BatchCertificate> GetCertificates(int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, int? maxresults = default, string filter = default, IEnumerable<string> @select = default, CancellationToken cancellationToken = default)
        {
            return new BatchClientGetCertificatesCollectionResultOfT(
                this,
                timeOutInSeconds,
                clientRequestId,
                returnClientRequestId,
                ocpdate,
                maxresults,
                filter,
                @select,
                cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Lists all of the Certificates that have been added to the specified Account. </summary>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-certificates.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual AsyncPageable<BatchCertificate> GetCertificatesAsync(int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, int? maxresults = default, string filter = default, IEnumerable<string> @select = default, CancellationToken cancellationToken = default)
        {
            return new BatchClientGetCertificatesAsyncCollectionResultOfT(
                this,
                timeOutInSeconds,
                clientRequestId,
                returnClientRequestId,
                ocpdate,
                maxresults,
                filter,
                @select,
                cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary>
        /// [Protocol Method] If you try to delete a Certificate that is being used by a Pool or Compute
        /// Node, the status of the Certificate changes to deleteFailed. If you decide that
        /// you want to continue using the Certificate, you can use this operation to set
        /// the status of the Certificate back to active. If you intend to delete the
        /// Certificate, you do not need to run this operation after the deletion failed.
        /// You must make sure that the Certificate is not being used by any resources, and
        /// then you can try again to delete the Certificate.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="thumbprintAlgorithm"> The algorithm used to derive the thumbprint parameter. This must be sha1. </param>
        /// <param name="thumbprint"> The thumbprint of the Certificate being deleted. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="thumbprintAlgorithm"/> or <paramref name="thumbprint"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="thumbprintAlgorithm"/> or <paramref name="thumbprint"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response CancelCertificateDeletion(string thumbprintAlgorithm, string thumbprint, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.CancelCertificateDeletion");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(thumbprintAlgorithm, nameof(thumbprintAlgorithm));
                Argument.AssertNotNullOrEmpty(thumbprint, nameof(thumbprint));

                using HttpMessage message = CreateCancelCertificateDeletionRequest(thumbprintAlgorithm, thumbprint, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] If you try to delete a Certificate that is being used by a Pool or Compute
        /// Node, the status of the Certificate changes to deleteFailed. If you decide that
        /// you want to continue using the Certificate, you can use this operation to set
        /// the status of the Certificate back to active. If you intend to delete the
        /// Certificate, you do not need to run this operation after the deletion failed.
        /// You must make sure that the Certificate is not being used by any resources, and
        /// then you can try again to delete the Certificate.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="thumbprintAlgorithm"> The algorithm used to derive the thumbprint parameter. This must be sha1. </param>
        /// <param name="thumbprint"> The thumbprint of the Certificate being deleted. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="thumbprintAlgorithm"/> or <paramref name="thumbprint"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="thumbprintAlgorithm"/> or <paramref name="thumbprint"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> CancelCertificateDeletionAsync(string thumbprintAlgorithm, string thumbprint, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.CancelCertificateDeletion");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(thumbprintAlgorithm, nameof(thumbprintAlgorithm));
                Argument.AssertNotNullOrEmpty(thumbprint, nameof(thumbprint));

                using HttpMessage message = CreateCancelCertificateDeletionRequest(thumbprintAlgorithm, thumbprint, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// If you try to delete a Certificate that is being used by a Pool or Compute
        /// Node, the status of the Certificate changes to deleteFailed. If you decide that
        /// you want to continue using the Certificate, you can use this operation to set
        /// the status of the Certificate back to active. If you intend to delete the
        /// Certificate, you do not need to run this operation after the deletion failed.
        /// You must make sure that the Certificate is not being used by any resources, and
        /// then you can try again to delete the Certificate.
        /// </summary>
        /// <param name="thumbprintAlgorithm"> The algorithm used to derive the thumbprint parameter. This must be sha1. </param>
        /// <param name="thumbprint"> The thumbprint of the Certificate being deleted. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="thumbprintAlgorithm"/> or <paramref name="thumbprint"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="thumbprintAlgorithm"/> or <paramref name="thumbprint"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response CancelCertificateDeletion(string thumbprintAlgorithm, string thumbprint, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(thumbprintAlgorithm, nameof(thumbprintAlgorithm));
            Argument.AssertNotNullOrEmpty(thumbprint, nameof(thumbprint));

            return CancelCertificateDeletion(thumbprintAlgorithm, thumbprint, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary>
        /// If you try to delete a Certificate that is being used by a Pool or Compute
        /// Node, the status of the Certificate changes to deleteFailed. If you decide that
        /// you want to continue using the Certificate, you can use this operation to set
        /// the status of the Certificate back to active. If you intend to delete the
        /// Certificate, you do not need to run this operation after the deletion failed.
        /// You must make sure that the Certificate is not being used by any resources, and
        /// then you can try again to delete the Certificate.
        /// </summary>
        /// <param name="thumbprintAlgorithm"> The algorithm used to derive the thumbprint parameter. This must be sha1. </param>
        /// <param name="thumbprint"> The thumbprint of the Certificate being deleted. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="thumbprintAlgorithm"/> or <paramref name="thumbprint"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="thumbprintAlgorithm"/> or <paramref name="thumbprint"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> CancelCertificateDeletionAsync(string thumbprintAlgorithm, string thumbprint, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(thumbprintAlgorithm, nameof(thumbprintAlgorithm));
            Argument.AssertNotNullOrEmpty(thumbprint, nameof(thumbprint));

            return await CancelCertificateDeletionAsync(thumbprintAlgorithm, thumbprint, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] You cannot delete a Certificate if a resource (Pool or Compute Node) is using
        /// it. Before you can delete a Certificate, you must therefore make sure that the
        /// Certificate is not associated with any existing Pools, the Certificate is not
        /// installed on any Nodes (even if you remove a Certificate from a Pool, it is not
        /// removed from existing Compute Nodes in that Pool until they restart), and no
        /// running Tasks depend on the Certificate. If you try to delete a Certificate
        /// that is in use, the deletion fails. The Certificate status changes to
        /// deleteFailed. You can use Cancel Delete Certificate to set the status back to
        /// active if you decide that you want to continue using the Certificate.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="thumbprintAlgorithm"> The algorithm used to derive the thumbprint parameter. This must be sha1. </param>
        /// <param name="thumbprint"> The thumbprint of the Certificate to be deleted. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="thumbprintAlgorithm"/> or <paramref name="thumbprint"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="thumbprintAlgorithm"/> or <paramref name="thumbprint"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response DeleteCertificate(string thumbprintAlgorithm, string thumbprint, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.DeleteCertificate");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(thumbprintAlgorithm, nameof(thumbprintAlgorithm));
                Argument.AssertNotNullOrEmpty(thumbprint, nameof(thumbprint));

                using HttpMessage message = CreateDeleteCertificateRequest(thumbprintAlgorithm, thumbprint, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] You cannot delete a Certificate if a resource (Pool or Compute Node) is using
        /// it. Before you can delete a Certificate, you must therefore make sure that the
        /// Certificate is not associated with any existing Pools, the Certificate is not
        /// installed on any Nodes (even if you remove a Certificate from a Pool, it is not
        /// removed from existing Compute Nodes in that Pool until they restart), and no
        /// running Tasks depend on the Certificate. If you try to delete a Certificate
        /// that is in use, the deletion fails. The Certificate status changes to
        /// deleteFailed. You can use Cancel Delete Certificate to set the status back to
        /// active if you decide that you want to continue using the Certificate.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="thumbprintAlgorithm"> The algorithm used to derive the thumbprint parameter. This must be sha1. </param>
        /// <param name="thumbprint"> The thumbprint of the Certificate to be deleted. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="thumbprintAlgorithm"/> or <paramref name="thumbprint"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="thumbprintAlgorithm"/> or <paramref name="thumbprint"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> DeleteCertificateAsync(string thumbprintAlgorithm, string thumbprint, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.DeleteCertificate");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(thumbprintAlgorithm, nameof(thumbprintAlgorithm));
                Argument.AssertNotNullOrEmpty(thumbprint, nameof(thumbprint));

                using HttpMessage message = CreateDeleteCertificateRequest(thumbprintAlgorithm, thumbprint, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// You cannot delete a Certificate if a resource (Pool or Compute Node) is using
        /// it. Before you can delete a Certificate, you must therefore make sure that the
        /// Certificate is not associated with any existing Pools, the Certificate is not
        /// installed on any Nodes (even if you remove a Certificate from a Pool, it is not
        /// removed from existing Compute Nodes in that Pool until they restart), and no
        /// running Tasks depend on the Certificate. If you try to delete a Certificate
        /// that is in use, the deletion fails. The Certificate status changes to
        /// deleteFailed. You can use Cancel Delete Certificate to set the status back to
        /// active if you decide that you want to continue using the Certificate.
        /// </summary>
        /// <param name="thumbprintAlgorithm"> The algorithm used to derive the thumbprint parameter. This must be sha1. </param>
        /// <param name="thumbprint"> The thumbprint of the Certificate to be deleted. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="thumbprintAlgorithm"/> or <paramref name="thumbprint"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="thumbprintAlgorithm"/> or <paramref name="thumbprint"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response DeleteCertificate(string thumbprintAlgorithm, string thumbprint, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(thumbprintAlgorithm, nameof(thumbprintAlgorithm));
            Argument.AssertNotNullOrEmpty(thumbprint, nameof(thumbprint));

            return DeleteCertificate(thumbprintAlgorithm, thumbprint, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary>
        /// You cannot delete a Certificate if a resource (Pool or Compute Node) is using
        /// it. Before you can delete a Certificate, you must therefore make sure that the
        /// Certificate is not associated with any existing Pools, the Certificate is not
        /// installed on any Nodes (even if you remove a Certificate from a Pool, it is not
        /// removed from existing Compute Nodes in that Pool until they restart), and no
        /// running Tasks depend on the Certificate. If you try to delete a Certificate
        /// that is in use, the deletion fails. The Certificate status changes to
        /// deleteFailed. You can use Cancel Delete Certificate to set the status back to
        /// active if you decide that you want to continue using the Certificate.
        /// </summary>
        /// <param name="thumbprintAlgorithm"> The algorithm used to derive the thumbprint parameter. This must be sha1. </param>
        /// <param name="thumbprint"> The thumbprint of the Certificate to be deleted. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="thumbprintAlgorithm"/> or <paramref name="thumbprint"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="thumbprintAlgorithm"/> or <paramref name="thumbprint"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> DeleteCertificateAsync(string thumbprintAlgorithm, string thumbprint, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(thumbprintAlgorithm, nameof(thumbprintAlgorithm));
            Argument.AssertNotNullOrEmpty(thumbprint, nameof(thumbprint));

            return await DeleteCertificateAsync(thumbprintAlgorithm, thumbprint, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] Gets information about the specified Certificate.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="thumbprintAlgorithm"> The algorithm used to derive the thumbprint parameter. This must be sha1. </param>
        /// <param name="thumbprint"> The thumbprint of the Certificate to get. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="thumbprintAlgorithm"/> or <paramref name="thumbprint"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="thumbprintAlgorithm"/> or <paramref name="thumbprint"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetCertificate(string thumbprintAlgorithm, string thumbprint, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, IEnumerable<string> @select, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.GetCertificate");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(thumbprintAlgorithm, nameof(thumbprintAlgorithm));
                Argument.AssertNotNullOrEmpty(thumbprint, nameof(thumbprint));

                using HttpMessage message = CreateGetCertificateRequest(thumbprintAlgorithm, thumbprint, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, @select, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Gets information about the specified Certificate.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="thumbprintAlgorithm"> The algorithm used to derive the thumbprint parameter. This must be sha1. </param>
        /// <param name="thumbprint"> The thumbprint of the Certificate to get. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="thumbprintAlgorithm"/> or <paramref name="thumbprint"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="thumbprintAlgorithm"/> or <paramref name="thumbprint"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetCertificateAsync(string thumbprintAlgorithm, string thumbprint, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, IEnumerable<string> @select, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.GetCertificate");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(thumbprintAlgorithm, nameof(thumbprintAlgorithm));
                Argument.AssertNotNullOrEmpty(thumbprint, nameof(thumbprint));

                using HttpMessage message = CreateGetCertificateRequest(thumbprintAlgorithm, thumbprint, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, @select, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets information about the specified Certificate. </summary>
        /// <param name="thumbprintAlgorithm"> The algorithm used to derive the thumbprint parameter. This must be sha1. </param>
        /// <param name="thumbprint"> The thumbprint of the Certificate to get. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="thumbprintAlgorithm"/> or <paramref name="thumbprint"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="thumbprintAlgorithm"/> or <paramref name="thumbprint"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<BatchCertificate> GetCertificate(string thumbprintAlgorithm, string thumbprint, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, IEnumerable<string> @select = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(thumbprintAlgorithm, nameof(thumbprintAlgorithm));
            Argument.AssertNotNullOrEmpty(thumbprint, nameof(thumbprint));

            Response result = GetCertificate(thumbprintAlgorithm, thumbprint, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, @select, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((BatchCertificate)result, result);
        }

        /// <summary> Gets information about the specified Certificate. </summary>
        /// <param name="thumbprintAlgorithm"> The algorithm used to derive the thumbprint parameter. This must be sha1. </param>
        /// <param name="thumbprint"> The thumbprint of the Certificate to get. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="thumbprintAlgorithm"/> or <paramref name="thumbprint"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="thumbprintAlgorithm"/> or <paramref name="thumbprint"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<BatchCertificate>> GetCertificateAsync(string thumbprintAlgorithm, string thumbprint, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, IEnumerable<string> @select = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(thumbprintAlgorithm, nameof(thumbprintAlgorithm));
            Argument.AssertNotNullOrEmpty(thumbprint, nameof(thumbprint));

            Response result = await GetCertificateAsync(thumbprintAlgorithm, thumbprint, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, @select, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((BatchCertificate)result, result);
        }

        /// <summary>
        /// [Protocol Method] Checks the specified Job Schedule exists.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule which you want to check. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        internal virtual Response JobScheduleExists(string jobScheduleId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ifMatch, string ifNoneMatch, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.JobScheduleExists");
            scope.Start();
            try
            {
                using HttpMessage message = CreateJobScheduleExistsRequest(jobScheduleId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Checks the specified Job Schedule exists.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule which you want to check. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        internal virtual async Task<Response> JobScheduleExistsAsync(string jobScheduleId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ifMatch, string ifNoneMatch, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.JobScheduleExists");
            scope.Start();
            try
            {
                using HttpMessage message = CreateJobScheduleExistsRequest(jobScheduleId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Checks the specified Job Schedule exists. </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule which you want to check. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        internal virtual Response JobScheduleExists(string jobScheduleId, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, CancellationToken cancellationToken = default)
        {
            return JobScheduleExists(jobScheduleId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Checks the specified Job Schedule exists. </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule which you want to check. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        internal virtual async Task<Response> JobScheduleExistsAsync(string jobScheduleId, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, CancellationToken cancellationToken = default)
        {
            return await JobScheduleExistsAsync(jobScheduleId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] When you delete a Job Schedule, this also deletes all Jobs and Tasks under that
        /// schedule. When Tasks are deleted, all the files in their working directories on
        /// the Compute Nodes are also deleted (the retention period is ignored). The Job
        /// Schedule statistics are no longer accessible once the Job Schedule is deleted,
        /// though they are still counted towards Account lifetime statistics.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule to delete. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="force"> If true, the server will delete the JobSchedule even if the corresponding nodes have not fully processed the deletion. The default value is false. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobScheduleId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobScheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response DeleteJobSchedule(string jobScheduleId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ifMatch, string ifNoneMatch, bool? force, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.DeleteJobSchedule");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(jobScheduleId, nameof(jobScheduleId));

                using HttpMessage message = CreateDeleteJobScheduleRequest(jobScheduleId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, force, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] When you delete a Job Schedule, this also deletes all Jobs and Tasks under that
        /// schedule. When Tasks are deleted, all the files in their working directories on
        /// the Compute Nodes are also deleted (the retention period is ignored). The Job
        /// Schedule statistics are no longer accessible once the Job Schedule is deleted,
        /// though they are still counted towards Account lifetime statistics.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule to delete. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="force"> If true, the server will delete the JobSchedule even if the corresponding nodes have not fully processed the deletion. The default value is false. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobScheduleId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobScheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> DeleteJobScheduleAsync(string jobScheduleId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ifMatch, string ifNoneMatch, bool? force, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.DeleteJobSchedule");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(jobScheduleId, nameof(jobScheduleId));

                using HttpMessage message = CreateDeleteJobScheduleRequest(jobScheduleId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, force, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// When you delete a Job Schedule, this also deletes all Jobs and Tasks under that
        /// schedule. When Tasks are deleted, all the files in their working directories on
        /// the Compute Nodes are also deleted (the retention period is ignored). The Job
        /// Schedule statistics are no longer accessible once the Job Schedule is deleted,
        /// though they are still counted towards Account lifetime statistics.
        /// </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule to delete. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="force"> If true, the server will delete the JobSchedule even if the corresponding nodes have not fully processed the deletion. The default value is false. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobScheduleId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobScheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response DeleteJobSchedule(string jobScheduleId, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, bool? force = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobScheduleId, nameof(jobScheduleId));

            return DeleteJobSchedule(jobScheduleId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, force, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary>
        /// When you delete a Job Schedule, this also deletes all Jobs and Tasks under that
        /// schedule. When Tasks are deleted, all the files in their working directories on
        /// the Compute Nodes are also deleted (the retention period is ignored). The Job
        /// Schedule statistics are no longer accessible once the Job Schedule is deleted,
        /// though they are still counted towards Account lifetime statistics.
        /// </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule to delete. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="force"> If true, the server will delete the JobSchedule even if the corresponding nodes have not fully processed the deletion. The default value is false. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobScheduleId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobScheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> DeleteJobScheduleAsync(string jobScheduleId, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, bool? force = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobScheduleId, nameof(jobScheduleId));

            return await DeleteJobScheduleAsync(jobScheduleId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, force, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] Gets information about the specified Job Schedule.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule to get. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="expand"> An OData $expand clause. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobScheduleId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobScheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetJobSchedule(string jobScheduleId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ifMatch, string ifNoneMatch, IEnumerable<string> @select, IEnumerable<string> expand, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.GetJobSchedule");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(jobScheduleId, nameof(jobScheduleId));

                using HttpMessage message = CreateGetJobScheduleRequest(jobScheduleId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, @select, expand, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Gets information about the specified Job Schedule.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule to get. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="expand"> An OData $expand clause. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobScheduleId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobScheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetJobScheduleAsync(string jobScheduleId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ifMatch, string ifNoneMatch, IEnumerable<string> @select, IEnumerable<string> expand, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.GetJobSchedule");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(jobScheduleId, nameof(jobScheduleId));

                using HttpMessage message = CreateGetJobScheduleRequest(jobScheduleId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, @select, expand, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets information about the specified Job Schedule. </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule to get. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="expand"> An OData $expand clause. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobScheduleId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobScheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<BatchJobSchedule> GetJobSchedule(string jobScheduleId, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, IEnumerable<string> @select = default, IEnumerable<string> expand = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobScheduleId, nameof(jobScheduleId));

            Response result = GetJobSchedule(jobScheduleId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, @select, expand, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((BatchJobSchedule)result, result);
        }

        /// <summary> Gets information about the specified Job Schedule. </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule to get. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="expand"> An OData $expand clause. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobScheduleId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobScheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<BatchJobSchedule>> GetJobScheduleAsync(string jobScheduleId, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, IEnumerable<string> @select = default, IEnumerable<string> expand = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobScheduleId, nameof(jobScheduleId));

            Response result = await GetJobScheduleAsync(jobScheduleId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, @select, expand, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((BatchJobSchedule)result, result);
        }

        /// <summary>
        /// [Protocol Method] This replaces only the Job Schedule properties specified in the request. For
        /// example, if the schedule property is not specified with this request, then the
        /// Batch service will keep the existing schedule. Changes to a Job Schedule only
        /// impact Jobs created by the schedule after the update has taken place; currently
        /// running Jobs are unaffected.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule to update. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobScheduleId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobScheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response UpdateJobSchedule(string jobScheduleId, RequestContent content, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.UpdateJobSchedule");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(jobScheduleId, nameof(jobScheduleId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateUpdateJobScheduleRequest(jobScheduleId, content, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] This replaces only the Job Schedule properties specified in the request. For
        /// example, if the schedule property is not specified with this request, then the
        /// Batch service will keep the existing schedule. Changes to a Job Schedule only
        /// impact Jobs created by the schedule after the update has taken place; currently
        /// running Jobs are unaffected.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule to update. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobScheduleId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobScheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> UpdateJobScheduleAsync(string jobScheduleId, RequestContent content, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.UpdateJobSchedule");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(jobScheduleId, nameof(jobScheduleId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateUpdateJobScheduleRequest(jobScheduleId, content, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] This fully replaces all the updatable properties of the Job Schedule. For
        /// example, if the schedule property is not specified with this request, then the
        /// Batch service will remove the existing schedule. Changes to a Job Schedule only
        /// impact Jobs created by the schedule after the update has taken place; currently
        /// running Jobs are unaffected.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule to update. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobScheduleId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobScheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response ReplaceJobSchedule(string jobScheduleId, RequestContent content, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.ReplaceJobSchedule");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(jobScheduleId, nameof(jobScheduleId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateReplaceJobScheduleRequest(jobScheduleId, content, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] This fully replaces all the updatable properties of the Job Schedule. For
        /// example, if the schedule property is not specified with this request, then the
        /// Batch service will remove the existing schedule. Changes to a Job Schedule only
        /// impact Jobs created by the schedule after the update has taken place; currently
        /// running Jobs are unaffected.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule to update. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobScheduleId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobScheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> ReplaceJobScheduleAsync(string jobScheduleId, RequestContent content, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.ReplaceJobSchedule");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(jobScheduleId, nameof(jobScheduleId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateReplaceJobScheduleRequest(jobScheduleId, content, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// This fully replaces all the updatable properties of the Job Schedule. For
        /// example, if the schedule property is not specified with this request, then the
        /// Batch service will remove the existing schedule. Changes to a Job Schedule only
        /// impact Jobs created by the schedule after the update has taken place; currently
        /// running Jobs are unaffected.
        /// </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule to update. </param>
        /// <param name="jobSchedule"> A Job Schedule with updated properties. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobScheduleId"/> or <paramref name="jobSchedule"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobScheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response ReplaceJobSchedule(string jobScheduleId, BatchJobSchedule jobSchedule, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobScheduleId, nameof(jobScheduleId));
            Argument.AssertNotNull(jobSchedule, nameof(jobSchedule));

            return ReplaceJobSchedule(jobScheduleId, jobSchedule, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary>
        /// This fully replaces all the updatable properties of the Job Schedule. For
        /// example, if the schedule property is not specified with this request, then the
        /// Batch service will remove the existing schedule. Changes to a Job Schedule only
        /// impact Jobs created by the schedule after the update has taken place; currently
        /// running Jobs are unaffected.
        /// </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule to update. </param>
        /// <param name="jobSchedule"> A Job Schedule with updated properties. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobScheduleId"/> or <paramref name="jobSchedule"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobScheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> ReplaceJobScheduleAsync(string jobScheduleId, BatchJobSchedule jobSchedule, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobScheduleId, nameof(jobScheduleId));
            Argument.AssertNotNull(jobSchedule, nameof(jobSchedule));

            return await ReplaceJobScheduleAsync(jobScheduleId, jobSchedule, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] No new Jobs will be created until the Job Schedule is enabled again.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule to disable. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobScheduleId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobScheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response DisableJobSchedule(string jobScheduleId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ifMatch, string ifNoneMatch, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.DisableJobSchedule");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(jobScheduleId, nameof(jobScheduleId));

                using HttpMessage message = CreateDisableJobScheduleRequest(jobScheduleId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] No new Jobs will be created until the Job Schedule is enabled again.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule to disable. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobScheduleId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobScheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> DisableJobScheduleAsync(string jobScheduleId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ifMatch, string ifNoneMatch, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.DisableJobSchedule");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(jobScheduleId, nameof(jobScheduleId));

                using HttpMessage message = CreateDisableJobScheduleRequest(jobScheduleId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> No new Jobs will be created until the Job Schedule is enabled again. </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule to disable. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobScheduleId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobScheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response DisableJobSchedule(string jobScheduleId, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobScheduleId, nameof(jobScheduleId));

            return DisableJobSchedule(jobScheduleId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> No new Jobs will be created until the Job Schedule is enabled again. </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule to disable. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobScheduleId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobScheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> DisableJobScheduleAsync(string jobScheduleId, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobScheduleId, nameof(jobScheduleId));

            return await DisableJobScheduleAsync(jobScheduleId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] Enables a Job Schedule.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule to enable. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobScheduleId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobScheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response EnableJobSchedule(string jobScheduleId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ifMatch, string ifNoneMatch, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.EnableJobSchedule");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(jobScheduleId, nameof(jobScheduleId));

                using HttpMessage message = CreateEnableJobScheduleRequest(jobScheduleId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Enables a Job Schedule.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule to enable. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobScheduleId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobScheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> EnableJobScheduleAsync(string jobScheduleId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ifMatch, string ifNoneMatch, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.EnableJobSchedule");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(jobScheduleId, nameof(jobScheduleId));

                using HttpMessage message = CreateEnableJobScheduleRequest(jobScheduleId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Enables a Job Schedule. </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule to enable. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobScheduleId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobScheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response EnableJobSchedule(string jobScheduleId, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobScheduleId, nameof(jobScheduleId));

            return EnableJobSchedule(jobScheduleId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Enables a Job Schedule. </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule to enable. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobScheduleId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobScheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> EnableJobScheduleAsync(string jobScheduleId, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobScheduleId, nameof(jobScheduleId));

            return await EnableJobScheduleAsync(jobScheduleId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] Terminates a Job Schedule.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule to terminates. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="force"> If true, the server will terminate the JobSchedule even if the corresponding nodes have not fully processed the termination. The default value is false. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobScheduleId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobScheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response TerminateJobSchedule(string jobScheduleId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ifMatch, string ifNoneMatch, bool? force, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.TerminateJobSchedule");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(jobScheduleId, nameof(jobScheduleId));

                using HttpMessage message = CreateTerminateJobScheduleRequest(jobScheduleId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, force, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Terminates a Job Schedule.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule to terminates. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="force"> If true, the server will terminate the JobSchedule even if the corresponding nodes have not fully processed the termination. The default value is false. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobScheduleId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobScheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> TerminateJobScheduleAsync(string jobScheduleId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ifMatch, string ifNoneMatch, bool? force, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.TerminateJobSchedule");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(jobScheduleId, nameof(jobScheduleId));

                using HttpMessage message = CreateTerminateJobScheduleRequest(jobScheduleId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, force, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Terminates a Job Schedule. </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule to terminates. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="force"> If true, the server will terminate the JobSchedule even if the corresponding nodes have not fully processed the termination. The default value is false. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobScheduleId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobScheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response TerminateJobSchedule(string jobScheduleId, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, bool? force = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobScheduleId, nameof(jobScheduleId));

            return TerminateJobSchedule(jobScheduleId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, force, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Terminates a Job Schedule. </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule to terminates. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="force"> If true, the server will terminate the JobSchedule even if the corresponding nodes have not fully processed the termination. The default value is false. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobScheduleId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobScheduleId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> TerminateJobScheduleAsync(string jobScheduleId, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, bool? force = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobScheduleId, nameof(jobScheduleId));

            return await TerminateJobScheduleAsync(jobScheduleId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, force, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] Creates a Job Schedule to the specified Account.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response CreateJobSchedule(RequestContent content, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.CreateJobSchedule");
            scope.Start();
            try
            {
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateCreateJobScheduleRequest(content, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Creates a Job Schedule to the specified Account.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> CreateJobScheduleAsync(RequestContent content, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.CreateJobSchedule");
            scope.Start();
            try
            {
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateCreateJobScheduleRequest(content, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates a Job Schedule to the specified Account. </summary>
        /// <param name="jobSchedule"> The Job Schedule to be created. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobSchedule"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response CreateJobSchedule(BatchJobScheduleCreateContent jobSchedule, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(jobSchedule, nameof(jobSchedule));

            return CreateJobSchedule(jobSchedule, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Creates a Job Schedule to the specified Account. </summary>
        /// <param name="jobSchedule"> The Job Schedule to be created. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobSchedule"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> CreateJobScheduleAsync(BatchJobScheduleCreateContent jobSchedule, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(jobSchedule, nameof(jobSchedule));

            return await CreateJobScheduleAsync(jobSchedule, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] Lists all of the Job Schedules in the specified Account.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-job-schedules.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="expand"> An OData $expand clause. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Pageable<BinaryData> GetJobSchedules(int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, int? maxresults, string filter, IEnumerable<string> @select, IEnumerable<string> expand, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.GetJobSchedules");
            scope.Start();
            try
            {
                return new BatchClientGetJobSchedulesCollectionResult(
                    this,
                    timeOutInSeconds,
                    clientRequestId,
                    returnClientRequestId,
                    ocpdate,
                    maxresults,
                    filter,
                    @select,
                    expand,
                    context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Lists all of the Job Schedules in the specified Account.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-job-schedules.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="expand"> An OData $expand clause. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual AsyncPageable<BinaryData> GetJobSchedulesAsync(int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, int? maxresults, string filter, IEnumerable<string> @select, IEnumerable<string> expand, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.GetJobSchedules");
            scope.Start();
            try
            {
                return new BatchClientGetJobSchedulesAsyncCollectionResult(
                    this,
                    timeOutInSeconds,
                    clientRequestId,
                    returnClientRequestId,
                    ocpdate,
                    maxresults,
                    filter,
                    @select,
                    expand,
                    context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists all of the Job Schedules in the specified Account. </summary>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-job-schedules.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="expand"> An OData $expand clause. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Pageable<BatchJobSchedule> GetJobSchedules(int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, int? maxresults = default, string filter = default, IEnumerable<string> @select = default, IEnumerable<string> expand = default, CancellationToken cancellationToken = default)
        {
            return new BatchClientGetJobSchedulesCollectionResultOfT(
                this,
                timeOutInSeconds,
                clientRequestId,
                returnClientRequestId,
                ocpdate,
                maxresults,
                filter,
                @select,
                expand,
                cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Lists all of the Job Schedules in the specified Account. </summary>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-job-schedules.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="expand"> An OData $expand clause. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual AsyncPageable<BatchJobSchedule> GetJobSchedulesAsync(int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, int? maxresults = default, string filter = default, IEnumerable<string> @select = default, IEnumerable<string> expand = default, CancellationToken cancellationToken = default)
        {
            return new BatchClientGetJobSchedulesAsyncCollectionResultOfT(
                this,
                timeOutInSeconds,
                clientRequestId,
                returnClientRequestId,
                ocpdate,
                maxresults,
                filter,
                @select,
                expand,
                cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary>
        /// [Protocol Method] The maximum lifetime of a Task from addition to completion is 180 days. If a
        /// Task has not completed within 180 days of being added it will be terminated by
        /// the Batch service and left in whatever state it was in at that time.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobId"> The ID of the Job to which the Task is to be created. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response CreateTask(string jobId, RequestContent content, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.CreateTask");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateCreateTaskRequest(jobId, content, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] The maximum lifetime of a Task from addition to completion is 180 days. If a
        /// Task has not completed within 180 days of being added it will be terminated by
        /// the Batch service and left in whatever state it was in at that time.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobId"> The ID of the Job to which the Task is to be created. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> CreateTaskAsync(string jobId, RequestContent content, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.CreateTask");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateCreateTaskRequest(jobId, content, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// The maximum lifetime of a Task from addition to completion is 180 days. If a
        /// Task has not completed within 180 days of being added it will be terminated by
        /// the Batch service and left in whatever state it was in at that time.
        /// </summary>
        /// <param name="jobId"> The ID of the Job to which the Task is to be created. </param>
        /// <param name="task"> The Task to be created. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="task"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response CreateTask(string jobId, BatchTaskCreateContent task, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
            Argument.AssertNotNull(task, nameof(task));

            return CreateTask(jobId, task, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary>
        /// The maximum lifetime of a Task from addition to completion is 180 days. If a
        /// Task has not completed within 180 days of being added it will be terminated by
        /// the Batch service and left in whatever state it was in at that time.
        /// </summary>
        /// <param name="jobId"> The ID of the Job to which the Task is to be created. </param>
        /// <param name="task"> The Task to be created. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="task"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> CreateTaskAsync(string jobId, BatchTaskCreateContent task, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
            Argument.AssertNotNull(task, nameof(task));

            return await CreateTaskAsync(jobId, task, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] For multi-instance Tasks, information such as affinityId, executionInfo and
        /// nodeInfo refer to the primary Task. Use the list subtasks API to retrieve
        /// information about subtasks.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobId"> The ID of the Job. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-tasks.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="expand"> An OData $expand clause. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Pageable<BinaryData> GetTasks(string jobId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, int? maxresults, string filter, IEnumerable<string> @select, IEnumerable<string> expand, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.GetTasks");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

                return new BatchClientGetTasksCollectionResult(
                    this,
                    jobId,
                    timeOutInSeconds,
                    clientRequestId,
                    returnClientRequestId,
                    ocpdate,
                    maxresults,
                    filter,
                    @select,
                    expand,
                    context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] For multi-instance Tasks, information such as affinityId, executionInfo and
        /// nodeInfo refer to the primary Task. Use the list subtasks API to retrieve
        /// information about subtasks.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobId"> The ID of the Job. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-tasks.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="expand"> An OData $expand clause. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual AsyncPageable<BinaryData> GetTasksAsync(string jobId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, int? maxresults, string filter, IEnumerable<string> @select, IEnumerable<string> expand, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.GetTasks");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

                return new BatchClientGetTasksAsyncCollectionResult(
                    this,
                    jobId,
                    timeOutInSeconds,
                    clientRequestId,
                    returnClientRequestId,
                    ocpdate,
                    maxresults,
                    filter,
                    @select,
                    expand,
                    context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// For multi-instance Tasks, information such as affinityId, executionInfo and
        /// nodeInfo refer to the primary Task. Use the list subtasks API to retrieve
        /// information about subtasks.
        /// </summary>
        /// <param name="jobId"> The ID of the Job. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-tasks.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="expand"> An OData $expand clause. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Pageable<BatchTask> GetTasks(string jobId, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, int? maxresults = default, string filter = default, IEnumerable<string> @select = default, IEnumerable<string> expand = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

            return new BatchClientGetTasksCollectionResultOfT(
                this,
                jobId,
                timeOutInSeconds,
                clientRequestId,
                returnClientRequestId,
                ocpdate,
                maxresults,
                filter,
                @select,
                expand,
                cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary>
        /// For multi-instance Tasks, information such as affinityId, executionInfo and
        /// nodeInfo refer to the primary Task. Use the list subtasks API to retrieve
        /// information about subtasks.
        /// </summary>
        /// <param name="jobId"> The ID of the Job. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-tasks.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="expand"> An OData $expand clause. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual AsyncPageable<BatchTask> GetTasksAsync(string jobId, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, int? maxresults = default, string filter = default, IEnumerable<string> @select = default, IEnumerable<string> expand = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

            return new BatchClientGetTasksAsyncCollectionResultOfT(
                this,
                jobId,
                timeOutInSeconds,
                clientRequestId,
                returnClientRequestId,
                ocpdate,
                maxresults,
                filter,
                @select,
                expand,
                cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary>
        /// [Protocol Method] Note that each Task must have a unique ID. The Batch service may not return the
        /// results for each Task in the same order the Tasks were submitted in this
        /// request. If the server times out or the connection is closed during the
        /// request, the request may have been partially or fully processed, or not at all.
        /// In such cases, the user should re-issue the request. Note that it is up to the
        /// user to correctly handle failures when re-issuing a request. For example, you
        /// should use the same Task IDs during a retry so that if the prior operation
        /// succeeded, the retry will not create extra Tasks unexpectedly. If the response
        /// contains any Tasks which failed to add, a client can retry the request. In a
        /// retry, it is most efficient to resubmit only Tasks that failed to add, and to
        /// omit Tasks that were successfully added on the first attempt. The maximum
        /// lifetime of a Task from addition to completion is 180 days. If a Task has not
        /// completed within 180 days of being added it will be terminated by the Batch
        /// service and left in whatever state it was in at that time.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobId"> The ID of the Job to which the Task collection is to be added. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response CreateTaskCollection(string jobId, RequestContent content, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.CreateTaskCollection");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateCreateTaskCollectionRequest(jobId, content, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Note that each Task must have a unique ID. The Batch service may not return the
        /// results for each Task in the same order the Tasks were submitted in this
        /// request. If the server times out or the connection is closed during the
        /// request, the request may have been partially or fully processed, or not at all.
        /// In such cases, the user should re-issue the request. Note that it is up to the
        /// user to correctly handle failures when re-issuing a request. For example, you
        /// should use the same Task IDs during a retry so that if the prior operation
        /// succeeded, the retry will not create extra Tasks unexpectedly. If the response
        /// contains any Tasks which failed to add, a client can retry the request. In a
        /// retry, it is most efficient to resubmit only Tasks that failed to add, and to
        /// omit Tasks that were successfully added on the first attempt. The maximum
        /// lifetime of a Task from addition to completion is 180 days. If a Task has not
        /// completed within 180 days of being added it will be terminated by the Batch
        /// service and left in whatever state it was in at that time.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobId"> The ID of the Job to which the Task collection is to be added. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> CreateTaskCollectionAsync(string jobId, RequestContent content, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.CreateTaskCollection");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateCreateTaskCollectionRequest(jobId, content, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Note that each Task must have a unique ID. The Batch service may not return the
        /// results for each Task in the same order the Tasks were submitted in this
        /// request. If the server times out or the connection is closed during the
        /// request, the request may have been partially or fully processed, or not at all.
        /// In such cases, the user should re-issue the request. Note that it is up to the
        /// user to correctly handle failures when re-issuing a request. For example, you
        /// should use the same Task IDs during a retry so that if the prior operation
        /// succeeded, the retry will not create extra Tasks unexpectedly. If the response
        /// contains any Tasks which failed to add, a client can retry the request. In a
        /// retry, it is most efficient to resubmit only Tasks that failed to add, and to
        /// omit Tasks that were successfully added on the first attempt. The maximum
        /// lifetime of a Task from addition to completion is 180 days. If a Task has not
        /// completed within 180 days of being added it will be terminated by the Batch
        /// service and left in whatever state it was in at that time.
        /// </summary>
        /// <param name="jobId"> The ID of the Job to which the Task collection is to be added. </param>
        /// <param name="taskCollection"> The Tasks to be added. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="taskCollection"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<BatchTaskAddCollectionResult> CreateTaskCollection(string jobId, BatchTaskGroup taskCollection, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
            Argument.AssertNotNull(taskCollection, nameof(taskCollection));

            Response result = CreateTaskCollection(jobId, taskCollection, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((BatchTaskAddCollectionResult)result, result);
        }

        /// <summary>
        /// Note that each Task must have a unique ID. The Batch service may not return the
        /// results for each Task in the same order the Tasks were submitted in this
        /// request. If the server times out or the connection is closed during the
        /// request, the request may have been partially or fully processed, or not at all.
        /// In such cases, the user should re-issue the request. Note that it is up to the
        /// user to correctly handle failures when re-issuing a request. For example, you
        /// should use the same Task IDs during a retry so that if the prior operation
        /// succeeded, the retry will not create extra Tasks unexpectedly. If the response
        /// contains any Tasks which failed to add, a client can retry the request. In a
        /// retry, it is most efficient to resubmit only Tasks that failed to add, and to
        /// omit Tasks that were successfully added on the first attempt. The maximum
        /// lifetime of a Task from addition to completion is 180 days. If a Task has not
        /// completed within 180 days of being added it will be terminated by the Batch
        /// service and left in whatever state it was in at that time.
        /// </summary>
        /// <param name="jobId"> The ID of the Job to which the Task collection is to be added. </param>
        /// <param name="taskCollection"> The Tasks to be added. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="taskCollection"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<BatchTaskAddCollectionResult>> CreateTaskCollectionAsync(string jobId, BatchTaskGroup taskCollection, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
            Argument.AssertNotNull(taskCollection, nameof(taskCollection));

            Response result = await CreateTaskCollectionAsync(jobId, taskCollection, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((BatchTaskAddCollectionResult)result, result);
        }

        /// <summary>
        /// [Protocol Method] When a Task is deleted, all of the files in its directory on the Compute Node
        /// where it ran are also deleted (regardless of the retention time). For
        /// multi-instance Tasks, the delete Task operation applies synchronously to the
        /// primary task; subtasks and their files are then deleted asynchronously in the
        /// background.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobId"> The ID of the Job from which to delete the Task. </param>
        /// <param name="taskId"> The ID of the Task to delete. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="taskId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> or <paramref name="taskId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response DeleteTask(string jobId, string taskId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ifMatch, string ifNoneMatch, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.DeleteTask");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
                Argument.AssertNotNullOrEmpty(taskId, nameof(taskId));

                using HttpMessage message = CreateDeleteTaskRequest(jobId, taskId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] When a Task is deleted, all of the files in its directory on the Compute Node
        /// where it ran are also deleted (regardless of the retention time). For
        /// multi-instance Tasks, the delete Task operation applies synchronously to the
        /// primary task; subtasks and their files are then deleted asynchronously in the
        /// background.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobId"> The ID of the Job from which to delete the Task. </param>
        /// <param name="taskId"> The ID of the Task to delete. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="taskId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> or <paramref name="taskId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> DeleteTaskAsync(string jobId, string taskId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ifMatch, string ifNoneMatch, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.DeleteTask");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
                Argument.AssertNotNullOrEmpty(taskId, nameof(taskId));

                using HttpMessage message = CreateDeleteTaskRequest(jobId, taskId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// When a Task is deleted, all of the files in its directory on the Compute Node
        /// where it ran are also deleted (regardless of the retention time). For
        /// multi-instance Tasks, the delete Task operation applies synchronously to the
        /// primary task; subtasks and their files are then deleted asynchronously in the
        /// background.
        /// </summary>
        /// <param name="jobId"> The ID of the Job from which to delete the Task. </param>
        /// <param name="taskId"> The ID of the Task to delete. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="taskId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> or <paramref name="taskId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response DeleteTask(string jobId, string taskId, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
            Argument.AssertNotNullOrEmpty(taskId, nameof(taskId));

            return DeleteTask(jobId, taskId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary>
        /// When a Task is deleted, all of the files in its directory on the Compute Node
        /// where it ran are also deleted (regardless of the retention time). For
        /// multi-instance Tasks, the delete Task operation applies synchronously to the
        /// primary task; subtasks and their files are then deleted asynchronously in the
        /// background.
        /// </summary>
        /// <param name="jobId"> The ID of the Job from which to delete the Task. </param>
        /// <param name="taskId"> The ID of the Task to delete. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="taskId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> or <paramref name="taskId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> DeleteTaskAsync(string jobId, string taskId, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
            Argument.AssertNotNullOrEmpty(taskId, nameof(taskId));

            return await DeleteTaskAsync(jobId, taskId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] For multi-instance Tasks, information such as affinityId, executionInfo and
        /// nodeInfo refer to the primary Task. Use the list subtasks API to retrieve
        /// information about subtasks.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobId"> The ID of the Job that contains the Task. </param>
        /// <param name="taskId"> The ID of the Task to get information about. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="expand"> An OData $expand clause. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="taskId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> or <paramref name="taskId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetTask(string jobId, string taskId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ifMatch, string ifNoneMatch, IEnumerable<string> @select, IEnumerable<string> expand, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.GetTask");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
                Argument.AssertNotNullOrEmpty(taskId, nameof(taskId));

                using HttpMessage message = CreateGetTaskRequest(jobId, taskId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, @select, expand, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] For multi-instance Tasks, information such as affinityId, executionInfo and
        /// nodeInfo refer to the primary Task. Use the list subtasks API to retrieve
        /// information about subtasks.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobId"> The ID of the Job that contains the Task. </param>
        /// <param name="taskId"> The ID of the Task to get information about. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="expand"> An OData $expand clause. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="taskId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> or <paramref name="taskId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetTaskAsync(string jobId, string taskId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ifMatch, string ifNoneMatch, IEnumerable<string> @select, IEnumerable<string> expand, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.GetTask");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
                Argument.AssertNotNullOrEmpty(taskId, nameof(taskId));

                using HttpMessage message = CreateGetTaskRequest(jobId, taskId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, @select, expand, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// For multi-instance Tasks, information such as affinityId, executionInfo and
        /// nodeInfo refer to the primary Task. Use the list subtasks API to retrieve
        /// information about subtasks.
        /// </summary>
        /// <param name="jobId"> The ID of the Job that contains the Task. </param>
        /// <param name="taskId"> The ID of the Task to get information about. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="expand"> An OData $expand clause. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="taskId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> or <paramref name="taskId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<BatchTask> GetTask(string jobId, string taskId, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, IEnumerable<string> @select = default, IEnumerable<string> expand = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
            Argument.AssertNotNullOrEmpty(taskId, nameof(taskId));

            Response result = GetTask(jobId, taskId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, @select, expand, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((BatchTask)result, result);
        }

        /// <summary>
        /// For multi-instance Tasks, information such as affinityId, executionInfo and
        /// nodeInfo refer to the primary Task. Use the list subtasks API to retrieve
        /// information about subtasks.
        /// </summary>
        /// <param name="jobId"> The ID of the Job that contains the Task. </param>
        /// <param name="taskId"> The ID of the Task to get information about. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="expand"> An OData $expand clause. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="taskId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> or <paramref name="taskId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<BatchTask>> GetTaskAsync(string jobId, string taskId, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, IEnumerable<string> @select = default, IEnumerable<string> expand = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
            Argument.AssertNotNullOrEmpty(taskId, nameof(taskId));

            Response result = await GetTaskAsync(jobId, taskId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, @select, expand, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((BatchTask)result, result);
        }

        /// <summary>
        /// [Protocol Method] Updates the properties of the specified Task.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobId"> The ID of the Job containing the Task. </param>
        /// <param name="taskId"> The ID of the Task to update. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/>, <paramref name="taskId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> or <paramref name="taskId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response ReplaceTask(string jobId, string taskId, RequestContent content, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.ReplaceTask");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
                Argument.AssertNotNullOrEmpty(taskId, nameof(taskId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateReplaceTaskRequest(jobId, taskId, content, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Updates the properties of the specified Task.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobId"> The ID of the Job containing the Task. </param>
        /// <param name="taskId"> The ID of the Task to update. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/>, <paramref name="taskId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> or <paramref name="taskId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> ReplaceTaskAsync(string jobId, string taskId, RequestContent content, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.ReplaceTask");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
                Argument.AssertNotNullOrEmpty(taskId, nameof(taskId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateReplaceTaskRequest(jobId, taskId, content, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Updates the properties of the specified Task. </summary>
        /// <param name="jobId"> The ID of the Job containing the Task. </param>
        /// <param name="taskId"> The ID of the Task to update. </param>
        /// <param name="task"> The Task to update. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/>, <paramref name="taskId"/> or <paramref name="task"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> or <paramref name="taskId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response ReplaceTask(string jobId, string taskId, BatchTask task, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
            Argument.AssertNotNullOrEmpty(taskId, nameof(taskId));
            Argument.AssertNotNull(task, nameof(task));

            return ReplaceTask(jobId, taskId, task, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Updates the properties of the specified Task. </summary>
        /// <param name="jobId"> The ID of the Job containing the Task. </param>
        /// <param name="taskId"> The ID of the Task to update. </param>
        /// <param name="task"> The Task to update. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/>, <paramref name="taskId"/> or <paramref name="task"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> or <paramref name="taskId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> ReplaceTaskAsync(string jobId, string taskId, BatchTask task, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
            Argument.AssertNotNullOrEmpty(taskId, nameof(taskId));
            Argument.AssertNotNull(task, nameof(task));

            return await ReplaceTaskAsync(jobId, taskId, task, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] If the Task is not a multi-instance Task then this returns an empty collection.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobId"> The ID of the Job. </param>
        /// <param name="taskId"> The ID of the Task. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="taskId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> or <paramref name="taskId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Pageable<BinaryData> GetSubTasks(string jobId, string taskId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, IEnumerable<string> @select, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.GetSubTasks");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
                Argument.AssertNotNullOrEmpty(taskId, nameof(taskId));

                return new BatchClientGetSubTasksCollectionResult(
                    this,
                    jobId,
                    taskId,
                    timeOutInSeconds,
                    clientRequestId,
                    returnClientRequestId,
                    ocpdate,
                    @select,
                    context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] If the Task is not a multi-instance Task then this returns an empty collection.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobId"> The ID of the Job. </param>
        /// <param name="taskId"> The ID of the Task. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="taskId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> or <paramref name="taskId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual AsyncPageable<BinaryData> GetSubTasksAsync(string jobId, string taskId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, IEnumerable<string> @select, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.GetSubTasks");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
                Argument.AssertNotNullOrEmpty(taskId, nameof(taskId));

                return new BatchClientGetSubTasksAsyncCollectionResult(
                    this,
                    jobId,
                    taskId,
                    timeOutInSeconds,
                    clientRequestId,
                    returnClientRequestId,
                    ocpdate,
                    @select,
                    context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> If the Task is not a multi-instance Task then this returns an empty collection. </summary>
        /// <param name="jobId"> The ID of the Job. </param>
        /// <param name="taskId"> The ID of the Task. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="taskId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> or <paramref name="taskId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Pageable<BatchSubtask> GetSubTasks(string jobId, string taskId, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, IEnumerable<string> @select = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
            Argument.AssertNotNullOrEmpty(taskId, nameof(taskId));

            return new BatchClientGetSubTasksCollectionResultOfT(
                this,
                jobId,
                taskId,
                timeOutInSeconds,
                clientRequestId,
                returnClientRequestId,
                ocpdate,
                @select,
                cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> If the Task is not a multi-instance Task then this returns an empty collection. </summary>
        /// <param name="jobId"> The ID of the Job. </param>
        /// <param name="taskId"> The ID of the Task. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="taskId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> or <paramref name="taskId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual AsyncPageable<BatchSubtask> GetSubTasksAsync(string jobId, string taskId, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, IEnumerable<string> @select = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
            Argument.AssertNotNullOrEmpty(taskId, nameof(taskId));

            return new BatchClientGetSubTasksAsyncCollectionResultOfT(
                this,
                jobId,
                taskId,
                timeOutInSeconds,
                clientRequestId,
                returnClientRequestId,
                ocpdate,
                @select,
                cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary>
        /// [Protocol Method] When the Task has been terminated, it moves to the completed state. For
        /// multi-instance Tasks, the terminate Task operation applies synchronously to the
        /// primary task; subtasks are then terminated asynchronously in the background.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobId"> The ID of the Job containing the Task. </param>
        /// <param name="taskId"> The ID of the Task to terminate. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="taskId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> or <paramref name="taskId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response TerminateTask(string jobId, string taskId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ifMatch, string ifNoneMatch, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.TerminateTask");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
                Argument.AssertNotNullOrEmpty(taskId, nameof(taskId));

                using HttpMessage message = CreateTerminateTaskRequest(jobId, taskId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] When the Task has been terminated, it moves to the completed state. For
        /// multi-instance Tasks, the terminate Task operation applies synchronously to the
        /// primary task; subtasks are then terminated asynchronously in the background.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobId"> The ID of the Job containing the Task. </param>
        /// <param name="taskId"> The ID of the Task to terminate. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="taskId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> or <paramref name="taskId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> TerminateTaskAsync(string jobId, string taskId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ifMatch, string ifNoneMatch, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.TerminateTask");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
                Argument.AssertNotNullOrEmpty(taskId, nameof(taskId));

                using HttpMessage message = CreateTerminateTaskRequest(jobId, taskId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// When the Task has been terminated, it moves to the completed state. For
        /// multi-instance Tasks, the terminate Task operation applies synchronously to the
        /// primary task; subtasks are then terminated asynchronously in the background.
        /// </summary>
        /// <param name="jobId"> The ID of the Job containing the Task. </param>
        /// <param name="taskId"> The ID of the Task to terminate. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="taskId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> or <paramref name="taskId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response TerminateTask(string jobId, string taskId, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
            Argument.AssertNotNullOrEmpty(taskId, nameof(taskId));

            return TerminateTask(jobId, taskId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary>
        /// When the Task has been terminated, it moves to the completed state. For
        /// multi-instance Tasks, the terminate Task operation applies synchronously to the
        /// primary task; subtasks are then terminated asynchronously in the background.
        /// </summary>
        /// <param name="jobId"> The ID of the Job containing the Task. </param>
        /// <param name="taskId"> The ID of the Task to terminate. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="taskId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> or <paramref name="taskId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> TerminateTaskAsync(string jobId, string taskId, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
            Argument.AssertNotNullOrEmpty(taskId, nameof(taskId));

            return await TerminateTaskAsync(jobId, taskId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] Reactivation makes a Task eligible to be retried again up to its maximum retry
        /// count. The Task's state is changed to active. As the Task is no longer in the
        /// completed state, any previous exit code or failure information is no longer
        /// available after reactivation. Each time a Task is reactivated, its retry count
        /// is reset to 0. Reactivation will fail for Tasks that are not completed or that
        /// previously completed successfully (with an exit code of 0). Additionally, it
        /// will fail if the Job has completed (or is terminating or deleting).
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobId"> The ID of the Job containing the Task. </param>
        /// <param name="taskId"> The ID of the Task to reactivate. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="taskId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> or <paramref name="taskId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response ReactivateTask(string jobId, string taskId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ifMatch, string ifNoneMatch, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.ReactivateTask");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
                Argument.AssertNotNullOrEmpty(taskId, nameof(taskId));

                using HttpMessage message = CreateReactivateTaskRequest(jobId, taskId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Reactivation makes a Task eligible to be retried again up to its maximum retry
        /// count. The Task's state is changed to active. As the Task is no longer in the
        /// completed state, any previous exit code or failure information is no longer
        /// available after reactivation. Each time a Task is reactivated, its retry count
        /// is reset to 0. Reactivation will fail for Tasks that are not completed or that
        /// previously completed successfully (with an exit code of 0). Additionally, it
        /// will fail if the Job has completed (or is terminating or deleting).
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobId"> The ID of the Job containing the Task. </param>
        /// <param name="taskId"> The ID of the Task to reactivate. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="taskId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> or <paramref name="taskId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> ReactivateTaskAsync(string jobId, string taskId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ifMatch, string ifNoneMatch, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.ReactivateTask");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
                Argument.AssertNotNullOrEmpty(taskId, nameof(taskId));

                using HttpMessage message = CreateReactivateTaskRequest(jobId, taskId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Reactivation makes a Task eligible to be retried again up to its maximum retry
        /// count. The Task's state is changed to active. As the Task is no longer in the
        /// completed state, any previous exit code or failure information is no longer
        /// available after reactivation. Each time a Task is reactivated, its retry count
        /// is reset to 0. Reactivation will fail for Tasks that are not completed or that
        /// previously completed successfully (with an exit code of 0). Additionally, it
        /// will fail if the Job has completed (or is terminating or deleting).
        /// </summary>
        /// <param name="jobId"> The ID of the Job containing the Task. </param>
        /// <param name="taskId"> The ID of the Task to reactivate. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="taskId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> or <paramref name="taskId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response ReactivateTask(string jobId, string taskId, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
            Argument.AssertNotNullOrEmpty(taskId, nameof(taskId));

            return ReactivateTask(jobId, taskId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary>
        /// Reactivation makes a Task eligible to be retried again up to its maximum retry
        /// count. The Task's state is changed to active. As the Task is no longer in the
        /// completed state, any previous exit code or failure information is no longer
        /// available after reactivation. Each time a Task is reactivated, its retry count
        /// is reset to 0. Reactivation will fail for Tasks that are not completed or that
        /// previously completed successfully (with an exit code of 0). Additionally, it
        /// will fail if the Job has completed (or is terminating or deleting).
        /// </summary>
        /// <param name="jobId"> The ID of the Job containing the Task. </param>
        /// <param name="taskId"> The ID of the Task to reactivate. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ifMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service exactly matches the value specified by the client.
        /// </param>
        /// <param name="ifNoneMatch">
        /// An ETag value associated with the version of the resource known to the client.
        /// The operation will be performed only if the resource's current ETag on the
        /// service does not match the value specified by the client.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="taskId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> or <paramref name="taskId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> ReactivateTaskAsync(string jobId, string taskId, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ifMatch = default, string ifNoneMatch = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
            Argument.AssertNotNullOrEmpty(taskId, nameof(taskId));

            return await ReactivateTaskAsync(jobId, taskId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ifMatch, ifNoneMatch, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] Deletes the specified Task file from the Compute Node where the Task ran.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobId"> The ID of the Job that contains the Task. </param>
        /// <param name="taskId"> The ID of the Task whose file you want to retrieve. </param>
        /// <param name="filePath"> The path to the Task file that you want to get the content of. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="recursive">
        /// Whether to delete children of a directory. If the filePath parameter represents
        /// a directory instead of a file, you can set recursive to true to delete the
        /// directory and all of the files and subdirectories in it. If recursive is false
        /// then the directory must be empty or deletion will fail.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/>, <paramref name="taskId"/> or <paramref name="filePath"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/>, <paramref name="taskId"/> or <paramref name="filePath"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response DeleteTaskFile(string jobId, string taskId, string filePath, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, bool? recursive, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.DeleteTaskFile");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
                Argument.AssertNotNullOrEmpty(taskId, nameof(taskId));
                Argument.AssertNotNullOrEmpty(filePath, nameof(filePath));

                using HttpMessage message = CreateDeleteTaskFileRequest(jobId, taskId, filePath, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, recursive, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Deletes the specified Task file from the Compute Node where the Task ran.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobId"> The ID of the Job that contains the Task. </param>
        /// <param name="taskId"> The ID of the Task whose file you want to retrieve. </param>
        /// <param name="filePath"> The path to the Task file that you want to get the content of. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="recursive">
        /// Whether to delete children of a directory. If the filePath parameter represents
        /// a directory instead of a file, you can set recursive to true to delete the
        /// directory and all of the files and subdirectories in it. If recursive is false
        /// then the directory must be empty or deletion will fail.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/>, <paramref name="taskId"/> or <paramref name="filePath"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/>, <paramref name="taskId"/> or <paramref name="filePath"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> DeleteTaskFileAsync(string jobId, string taskId, string filePath, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, bool? recursive, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.DeleteTaskFile");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
                Argument.AssertNotNullOrEmpty(taskId, nameof(taskId));
                Argument.AssertNotNullOrEmpty(filePath, nameof(filePath));

                using HttpMessage message = CreateDeleteTaskFileRequest(jobId, taskId, filePath, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, recursive, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes the specified Task file from the Compute Node where the Task ran. </summary>
        /// <param name="jobId"> The ID of the Job that contains the Task. </param>
        /// <param name="taskId"> The ID of the Task whose file you want to retrieve. </param>
        /// <param name="filePath"> The path to the Task file that you want to get the content of. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="recursive">
        /// Whether to delete children of a directory. If the filePath parameter represents
        /// a directory instead of a file, you can set recursive to true to delete the
        /// directory and all of the files and subdirectories in it. If recursive is false
        /// then the directory must be empty or deletion will fail.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/>, <paramref name="taskId"/> or <paramref name="filePath"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/>, <paramref name="taskId"/> or <paramref name="filePath"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response DeleteTaskFile(string jobId, string taskId, string filePath, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, bool? recursive = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
            Argument.AssertNotNullOrEmpty(taskId, nameof(taskId));
            Argument.AssertNotNullOrEmpty(filePath, nameof(filePath));

            return DeleteTaskFile(jobId, taskId, filePath, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, recursive, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Deletes the specified Task file from the Compute Node where the Task ran. </summary>
        /// <param name="jobId"> The ID of the Job that contains the Task. </param>
        /// <param name="taskId"> The ID of the Task whose file you want to retrieve. </param>
        /// <param name="filePath"> The path to the Task file that you want to get the content of. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="recursive">
        /// Whether to delete children of a directory. If the filePath parameter represents
        /// a directory instead of a file, you can set recursive to true to delete the
        /// directory and all of the files and subdirectories in it. If recursive is false
        /// then the directory must be empty or deletion will fail.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/>, <paramref name="taskId"/> or <paramref name="filePath"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/>, <paramref name="taskId"/> or <paramref name="filePath"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> DeleteTaskFileAsync(string jobId, string taskId, string filePath, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, bool? recursive = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
            Argument.AssertNotNullOrEmpty(taskId, nameof(taskId));
            Argument.AssertNotNullOrEmpty(filePath, nameof(filePath));

            return await DeleteTaskFileAsync(jobId, taskId, filePath, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, recursive, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] Returns the content of the specified Task file.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobId"> The ID of the Job that contains the Task. </param>
        /// <param name="taskId"> The ID of the Task whose file you want to retrieve. </param>
        /// <param name="filePath"> The path to the Task file that you want to get the content of. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ocpRange">
        /// The byte range to be retrieved. The default is to retrieve the entire file. The
        /// format is bytes=startRange-endRange.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/>, <paramref name="taskId"/> or <paramref name="filePath"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/>, <paramref name="taskId"/> or <paramref name="filePath"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetTaskFile(string jobId, string taskId, string filePath, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ocpRange, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.GetTaskFile");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
                Argument.AssertNotNullOrEmpty(taskId, nameof(taskId));
                Argument.AssertNotNullOrEmpty(filePath, nameof(filePath));

                using HttpMessage message = CreateGetTaskFileRequest(jobId, taskId, filePath, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ocpRange, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Returns the content of the specified Task file.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobId"> The ID of the Job that contains the Task. </param>
        /// <param name="taskId"> The ID of the Task whose file you want to retrieve. </param>
        /// <param name="filePath"> The path to the Task file that you want to get the content of. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ocpRange">
        /// The byte range to be retrieved. The default is to retrieve the entire file. The
        /// format is bytes=startRange-endRange.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/>, <paramref name="taskId"/> or <paramref name="filePath"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/>, <paramref name="taskId"/> or <paramref name="filePath"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetTaskFileAsync(string jobId, string taskId, string filePath, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ocpRange, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.GetTaskFile");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
                Argument.AssertNotNullOrEmpty(taskId, nameof(taskId));
                Argument.AssertNotNullOrEmpty(filePath, nameof(filePath));

                using HttpMessage message = CreateGetTaskFileRequest(jobId, taskId, filePath, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ocpRange, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the content of the specified Task file. </summary>
        /// <param name="jobId"> The ID of the Job that contains the Task. </param>
        /// <param name="taskId"> The ID of the Task whose file you want to retrieve. </param>
        /// <param name="filePath"> The path to the Task file that you want to get the content of. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ocpRange">
        /// The byte range to be retrieved. The default is to retrieve the entire file. The
        /// format is bytes=startRange-endRange.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/>, <paramref name="taskId"/> or <paramref name="filePath"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/>, <paramref name="taskId"/> or <paramref name="filePath"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<BinaryData> GetTaskFile(string jobId, string taskId, string filePath, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ocpRange = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
            Argument.AssertNotNullOrEmpty(taskId, nameof(taskId));
            Argument.AssertNotNullOrEmpty(filePath, nameof(filePath));

            Response result = GetTaskFile(jobId, taskId, filePath, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ocpRange, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue(result.Content, result);
        }

        /// <summary> Returns the content of the specified Task file. </summary>
        /// <param name="jobId"> The ID of the Job that contains the Task. </param>
        /// <param name="taskId"> The ID of the Task whose file you want to retrieve. </param>
        /// <param name="filePath"> The path to the Task file that you want to get the content of. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ocpRange">
        /// The byte range to be retrieved. The default is to retrieve the entire file. The
        /// format is bytes=startRange-endRange.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/>, <paramref name="taskId"/> or <paramref name="filePath"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/>, <paramref name="taskId"/> or <paramref name="filePath"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<BinaryData>> GetTaskFileAsync(string jobId, string taskId, string filePath, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ocpRange = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
            Argument.AssertNotNullOrEmpty(taskId, nameof(taskId));
            Argument.AssertNotNullOrEmpty(filePath, nameof(filePath));

            Response result = await GetTaskFileAsync(jobId, taskId, filePath, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ocpRange, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue(result.Content, result);
        }

        /// <summary>
        /// [Protocol Method] Gets the properties of the specified Task file.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobId"> The ID of the Job that contains the Task. </param>
        /// <param name="taskId"> The ID of the Task whose file you want to retrieve. </param>
        /// <param name="filePath"> The path to the Task file that you want to get the content of. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        internal virtual Response GetTaskFilePropertiesInternal(string jobId, string taskId, string filePath, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.GetTaskFilePropertiesInternal");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetTaskFilePropertiesInternalRequest(jobId, taskId, filePath, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Gets the properties of the specified Task file.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobId"> The ID of the Job that contains the Task. </param>
        /// <param name="taskId"> The ID of the Task whose file you want to retrieve. </param>
        /// <param name="filePath"> The path to the Task file that you want to get the content of. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        internal virtual async Task<Response> GetTaskFilePropertiesInternalAsync(string jobId, string taskId, string filePath, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.GetTaskFilePropertiesInternal");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetTaskFilePropertiesInternalRequest(jobId, taskId, filePath, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the properties of the specified Task file. </summary>
        /// <param name="jobId"> The ID of the Job that contains the Task. </param>
        /// <param name="taskId"> The ID of the Task whose file you want to retrieve. </param>
        /// <param name="filePath"> The path to the Task file that you want to get the content of. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        internal virtual Response GetTaskFilePropertiesInternal(string jobId, string taskId, string filePath, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, CancellationToken cancellationToken = default)
        {
            return GetTaskFilePropertiesInternal(jobId, taskId, filePath, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Gets the properties of the specified Task file. </summary>
        /// <param name="jobId"> The ID of the Job that contains the Task. </param>
        /// <param name="taskId"> The ID of the Task whose file you want to retrieve. </param>
        /// <param name="filePath"> The path to the Task file that you want to get the content of. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        internal virtual async Task<Response> GetTaskFilePropertiesInternalAsync(string jobId, string taskId, string filePath, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, CancellationToken cancellationToken = default)
        {
            return await GetTaskFilePropertiesInternalAsync(jobId, taskId, filePath, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] Lists the files in a Task's directory on its Compute Node.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobId"> The ID of the Job that contains the Task. </param>
        /// <param name="taskId"> The ID of the Task whose files you want to list. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-task-files.
        /// </param>
        /// <param name="recursive">
        /// Whether to list children of the Task directory. This parameter can be used in
        /// combination with the filter parameter to list specific type of files.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="taskId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> or <paramref name="taskId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Pageable<BinaryData> GetTaskFiles(string jobId, string taskId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, int? maxresults, string filter, bool? recursive, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.GetTaskFiles");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
                Argument.AssertNotNullOrEmpty(taskId, nameof(taskId));

                return new BatchClientGetTaskFilesCollectionResult(
                    this,
                    jobId,
                    taskId,
                    timeOutInSeconds,
                    clientRequestId,
                    returnClientRequestId,
                    ocpdate,
                    maxresults,
                    filter,
                    recursive,
                    context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Lists the files in a Task's directory on its Compute Node.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="jobId"> The ID of the Job that contains the Task. </param>
        /// <param name="taskId"> The ID of the Task whose files you want to list. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-task-files.
        /// </param>
        /// <param name="recursive">
        /// Whether to list children of the Task directory. This parameter can be used in
        /// combination with the filter parameter to list specific type of files.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="taskId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> or <paramref name="taskId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual AsyncPageable<BinaryData> GetTaskFilesAsync(string jobId, string taskId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, int? maxresults, string filter, bool? recursive, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.GetTaskFiles");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
                Argument.AssertNotNullOrEmpty(taskId, nameof(taskId));

                return new BatchClientGetTaskFilesAsyncCollectionResult(
                    this,
                    jobId,
                    taskId,
                    timeOutInSeconds,
                    clientRequestId,
                    returnClientRequestId,
                    ocpdate,
                    maxresults,
                    filter,
                    recursive,
                    context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists the files in a Task's directory on its Compute Node. </summary>
        /// <param name="jobId"> The ID of the Job that contains the Task. </param>
        /// <param name="taskId"> The ID of the Task whose files you want to list. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-task-files.
        /// </param>
        /// <param name="recursive">
        /// Whether to list children of the Task directory. This parameter can be used in
        /// combination with the filter parameter to list specific type of files.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="taskId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> or <paramref name="taskId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Pageable<BatchNodeFile> GetTaskFiles(string jobId, string taskId, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, int? maxresults = default, string filter = default, bool? recursive = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
            Argument.AssertNotNullOrEmpty(taskId, nameof(taskId));

            return new BatchClientGetTaskFilesCollectionResultOfT(
                this,
                jobId,
                taskId,
                timeOutInSeconds,
                clientRequestId,
                returnClientRequestId,
                ocpdate,
                maxresults,
                filter,
                recursive,
                cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Lists the files in a Task's directory on its Compute Node. </summary>
        /// <param name="jobId"> The ID of the Job that contains the Task. </param>
        /// <param name="taskId"> The ID of the Task whose files you want to list. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-task-files.
        /// </param>
        /// <param name="recursive">
        /// Whether to list children of the Task directory. This parameter can be used in
        /// combination with the filter parameter to list specific type of files.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="taskId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> or <paramref name="taskId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual AsyncPageable<BatchNodeFile> GetTaskFilesAsync(string jobId, string taskId, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, int? maxresults = default, string filter = default, bool? recursive = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
            Argument.AssertNotNullOrEmpty(taskId, nameof(taskId));

            return new BatchClientGetTaskFilesAsyncCollectionResultOfT(
                this,
                jobId,
                taskId,
                timeOutInSeconds,
                clientRequestId,
                returnClientRequestId,
                ocpdate,
                maxresults,
                filter,
                recursive,
                cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary>
        /// [Protocol Method] You can add a user Account to a Compute Node only when it is in the idle or
        /// running state.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the machine on which you want to create a user Account. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/>, <paramref name="nodeId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response CreateNodeUser(string poolId, string nodeId, RequestContent content, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.CreateNodeUser");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
                Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateCreateNodeUserRequest(poolId, nodeId, content, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] You can add a user Account to a Compute Node only when it is in the idle or
        /// running state.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the machine on which you want to create a user Account. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/>, <paramref name="nodeId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> CreateNodeUserAsync(string poolId, string nodeId, RequestContent content, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.CreateNodeUser");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
                Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateCreateNodeUserRequest(poolId, nodeId, content, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// You can add a user Account to a Compute Node only when it is in the idle or
        /// running state.
        /// </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the machine on which you want to create a user Account. </param>
        /// <param name="user"> The options to use for creating the user. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/>, <paramref name="nodeId"/> or <paramref name="user"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response CreateNodeUser(string poolId, string nodeId, BatchNodeUserCreateContent user, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
            Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));
            Argument.AssertNotNull(user, nameof(user));

            return CreateNodeUser(poolId, nodeId, user, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary>
        /// You can add a user Account to a Compute Node only when it is in the idle or
        /// running state.
        /// </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the machine on which you want to create a user Account. </param>
        /// <param name="user"> The options to use for creating the user. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/>, <paramref name="nodeId"/> or <paramref name="user"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> CreateNodeUserAsync(string poolId, string nodeId, BatchNodeUserCreateContent user, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
            Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));
            Argument.AssertNotNull(user, nameof(user));

            return await CreateNodeUserAsync(poolId, nodeId, user, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] You can delete a user Account to a Compute Node only when it is in the idle or
        /// running state.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the machine on which you want to delete a user Account. </param>
        /// <param name="userName"> The name of the user Account to delete. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/>, <paramref name="nodeId"/> or <paramref name="userName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/>, <paramref name="nodeId"/> or <paramref name="userName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response DeleteNodeUser(string poolId, string nodeId, string userName, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.DeleteNodeUser");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
                Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));
                Argument.AssertNotNullOrEmpty(userName, nameof(userName));

                using HttpMessage message = CreateDeleteNodeUserRequest(poolId, nodeId, userName, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] You can delete a user Account to a Compute Node only when it is in the idle or
        /// running state.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the machine on which you want to delete a user Account. </param>
        /// <param name="userName"> The name of the user Account to delete. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/>, <paramref name="nodeId"/> or <paramref name="userName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/>, <paramref name="nodeId"/> or <paramref name="userName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> DeleteNodeUserAsync(string poolId, string nodeId, string userName, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.DeleteNodeUser");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
                Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));
                Argument.AssertNotNullOrEmpty(userName, nameof(userName));

                using HttpMessage message = CreateDeleteNodeUserRequest(poolId, nodeId, userName, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// You can delete a user Account to a Compute Node only when it is in the idle or
        /// running state.
        /// </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the machine on which you want to delete a user Account. </param>
        /// <param name="userName"> The name of the user Account to delete. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/>, <paramref name="nodeId"/> or <paramref name="userName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/>, <paramref name="nodeId"/> or <paramref name="userName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response DeleteNodeUser(string poolId, string nodeId, string userName, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
            Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));
            Argument.AssertNotNullOrEmpty(userName, nameof(userName));

            return DeleteNodeUser(poolId, nodeId, userName, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary>
        /// You can delete a user Account to a Compute Node only when it is in the idle or
        /// running state.
        /// </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the machine on which you want to delete a user Account. </param>
        /// <param name="userName"> The name of the user Account to delete. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/>, <paramref name="nodeId"/> or <paramref name="userName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/>, <paramref name="nodeId"/> or <paramref name="userName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> DeleteNodeUserAsync(string poolId, string nodeId, string userName, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
            Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));
            Argument.AssertNotNullOrEmpty(userName, nameof(userName));

            return await DeleteNodeUserAsync(poolId, nodeId, userName, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] This operation replaces of all the updatable properties of the Account. For
        /// example, if the expiryTime element is not specified, the current value is
        /// replaced with the default value, not left unmodified. You can update a user
        /// Account on a Compute Node only when it is in the idle or running state.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the machine on which you want to update a user Account. </param>
        /// <param name="userName"> The name of the user Account to update. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/>, <paramref name="nodeId"/>, <paramref name="userName"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/>, <paramref name="nodeId"/> or <paramref name="userName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response ReplaceNodeUser(string poolId, string nodeId, string userName, RequestContent content, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.ReplaceNodeUser");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
                Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));
                Argument.AssertNotNullOrEmpty(userName, nameof(userName));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateReplaceNodeUserRequest(poolId, nodeId, userName, content, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] This operation replaces of all the updatable properties of the Account. For
        /// example, if the expiryTime element is not specified, the current value is
        /// replaced with the default value, not left unmodified. You can update a user
        /// Account on a Compute Node only when it is in the idle or running state.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the machine on which you want to update a user Account. </param>
        /// <param name="userName"> The name of the user Account to update. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/>, <paramref name="nodeId"/>, <paramref name="userName"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/>, <paramref name="nodeId"/> or <paramref name="userName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> ReplaceNodeUserAsync(string poolId, string nodeId, string userName, RequestContent content, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.ReplaceNodeUser");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
                Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));
                Argument.AssertNotNullOrEmpty(userName, nameof(userName));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateReplaceNodeUserRequest(poolId, nodeId, userName, content, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// This operation replaces of all the updatable properties of the Account. For
        /// example, if the expiryTime element is not specified, the current value is
        /// replaced with the default value, not left unmodified. You can update a user
        /// Account on a Compute Node only when it is in the idle or running state.
        /// </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the machine on which you want to update a user Account. </param>
        /// <param name="userName"> The name of the user Account to update. </param>
        /// <param name="content"> The options to use for updating the user. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/>, <paramref name="nodeId"/>, <paramref name="userName"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/>, <paramref name="nodeId"/> or <paramref name="userName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response ReplaceNodeUser(string poolId, string nodeId, string userName, BatchNodeUserUpdateContent content, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
            Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));
            Argument.AssertNotNullOrEmpty(userName, nameof(userName));
            Argument.AssertNotNull(content, nameof(content));

            return ReplaceNodeUser(poolId, nodeId, userName, content, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary>
        /// This operation replaces of all the updatable properties of the Account. For
        /// example, if the expiryTime element is not specified, the current value is
        /// replaced with the default value, not left unmodified. You can update a user
        /// Account on a Compute Node only when it is in the idle or running state.
        /// </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the machine on which you want to update a user Account. </param>
        /// <param name="userName"> The name of the user Account to update. </param>
        /// <param name="content"> The options to use for updating the user. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/>, <paramref name="nodeId"/>, <paramref name="userName"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/>, <paramref name="nodeId"/> or <paramref name="userName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> ReplaceNodeUserAsync(string poolId, string nodeId, string userName, BatchNodeUserUpdateContent content, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
            Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));
            Argument.AssertNotNullOrEmpty(userName, nameof(userName));
            Argument.AssertNotNull(content, nameof(content));

            return await ReplaceNodeUserAsync(poolId, nodeId, userName, content, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] Gets information about the specified Compute Node.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node that you want to get information about. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetNode(string poolId, string nodeId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, IEnumerable<string> @select, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.GetNode");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
                Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));

                using HttpMessage message = CreateGetNodeRequest(poolId, nodeId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, @select, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Gets information about the specified Compute Node.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node that you want to get information about. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetNodeAsync(string poolId, string nodeId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, IEnumerable<string> @select, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.GetNode");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
                Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));

                using HttpMessage message = CreateGetNodeRequest(poolId, nodeId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, @select, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets information about the specified Compute Node. </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node that you want to get information about. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<BatchNode> GetNode(string poolId, string nodeId, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, IEnumerable<string> @select = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
            Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));

            Response result = GetNode(poolId, nodeId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, @select, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((BatchNode)result, result);
        }

        /// <summary> Gets information about the specified Compute Node. </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node that you want to get information about. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<BatchNode>> GetNodeAsync(string poolId, string nodeId, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, IEnumerable<string> @select = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
            Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));

            Response result = await GetNodeAsync(poolId, nodeId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, @select, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((BatchNode)result, result);
        }

        /// <summary>
        /// [Protocol Method] You can restart a Compute Node only if it is in an idle or running state.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node that you want to restart. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response RebootNode(string poolId, string nodeId, RequestContent content, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.RebootNode");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
                Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));

                using HttpMessage message = CreateRebootNodeRequest(poolId, nodeId, content, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] You can restart a Compute Node only if it is in an idle or running state.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node that you want to restart. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> RebootNodeAsync(string poolId, string nodeId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, RequestContent content, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.RebootNode");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
                Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));

                using HttpMessage message = this.CreateRebootNodeRequest(poolId, nodeId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, content, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> You can restart a Compute Node only if it is in an idle or running state. </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node that you want to restart. </param>
        /// <param name="parameters"> The options to use for rebooting the Compute Node. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response RebootNode(string poolId, string nodeId, BatchNodeRebootContent parameters = default, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
            Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));

            return RebootNode(poolId, nodeId, parameters, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> You can restart a Compute Node only if it is in an idle or running state. </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node that you want to restart. </param>
        /// <param name="parameters"> The options to use for rebooting the Compute Node. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> RebootNodeAsync(string poolId, string nodeId, BatchNodeRebootContent parameters = default, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
            Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));

            return await this.RebootNodeAsync(poolId, nodeId, parameters, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] You can start a Compute Node only if it has been deallocated.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node that you want to restart. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response StartNode(string poolId, string nodeId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.StartNode");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
                Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));

                using HttpMessage message = CreateStartNodeRequest(poolId, nodeId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] You can start a Compute Node only if it has been deallocated.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node that you want to restart. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> StartNodeAsync(string poolId, string nodeId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.StartNode");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
                Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));

                using HttpMessage message = CreateStartNodeRequest(poolId, nodeId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> You can start a Compute Node only if it has been deallocated. </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node that you want to restart. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response StartNode(string poolId, string nodeId, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
            Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));

            return StartNode(poolId, nodeId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> You can start a Compute Node only if it has been deallocated. </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node that you want to restart. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> StartNodeAsync(string poolId, string nodeId, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
            Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));

            return await StartNodeAsync(poolId, nodeId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] You can reinstall the operating system on a Compute Node only if it is in an
        /// idle or running state. This API can be invoked only on Pools created with the
        /// cloud service configuration property.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node that you want to restart. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response ReimageNode(string poolId, string nodeId, RequestContent content, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.ReimageNode");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
                Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));

                using HttpMessage message = CreateReimageNodeRequest(poolId, nodeId, content, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] You can reinstall the operating system on a Compute Node only if it is in an
        /// idle or running state. This API can be invoked only on Pools created with the
        /// cloud service configuration property.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node that you want to restart. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> ReimageNodeAsync(string poolId, string nodeId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, RequestContent content, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.ReimageNode");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
                Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));

                using HttpMessage message = this.CreateReimageNodeRequest(poolId, nodeId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, content, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// You can reinstall the operating system on a Compute Node only if it is in an
        /// idle or running state. This API can be invoked only on Pools created with the
        /// cloud service configuration property.
        /// </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node that you want to restart. </param>
        /// <param name="parameters"> The options to use for reimaging the Compute Node. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response ReimageNode(string poolId, string nodeId, BatchNodeReimageContent parameters = default, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
            Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));

            return ReimageNode(poolId, nodeId, parameters, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary>
        /// You can reinstall the operating system on a Compute Node only if it is in an
        /// idle or running state. This API can be invoked only on Pools created with the
        /// cloud service configuration property.
        /// </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node that you want to restart. </param>
        /// <param name="parameters"> The options to use for reimaging the Compute Node. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> ReimageNodeAsync(string poolId, string nodeId, BatchNodeReimageContent parameters = default, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
            Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));

            return await this.ReimageNodeAsync(poolId, nodeId, parameters, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] You can deallocate a Compute Node only if it is in an idle or running state.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node that you want to restart. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response DeallocateNode(string poolId, string nodeId, RequestContent content, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.DeallocateNode");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
                Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));

                using HttpMessage message = CreateDeallocateNodeRequest(poolId, nodeId, content, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] You can deallocate a Compute Node only if it is in an idle or running state.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node that you want to restart. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> DeallocateNodeAsync(string poolId, string nodeId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, RequestContent content, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.DeallocateNode");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
                Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));

                using HttpMessage message = this.CreateDeallocateNodeRequest(poolId, nodeId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, content, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> You can deallocate a Compute Node only if it is in an idle or running state. </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node that you want to restart. </param>
        /// <param name="parameters"> The options to use for deallocating the Compute Node. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response DeallocateNode(string poolId, string nodeId, BatchNodeDeallocateContent parameters = default, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
            Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));

            return DeallocateNode(poolId, nodeId, parameters, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> You can deallocate a Compute Node only if it is in an idle or running state. </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node that you want to restart. </param>
        /// <param name="parameters"> The options to use for deallocating the Compute Node. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> DeallocateNodeAsync(string poolId, string nodeId, BatchNodeDeallocateContent parameters = default, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
            Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));

            return await this.DeallocateNodeAsync(poolId, nodeId, parameters, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] You can disable Task scheduling on a Compute Node only if its current
        /// scheduling state is enabled.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node on which you want to disable Task scheduling. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response DisableNodeScheduling(string poolId, string nodeId, RequestContent content, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.DisableNodeScheduling");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
                Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));

                using HttpMessage message = CreateDisableNodeSchedulingRequest(poolId, nodeId, content, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] You can disable Task scheduling on a Compute Node only if its current
        /// scheduling state is enabled.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node on which you want to disable Task scheduling. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> DisableNodeSchedulingAsync(string poolId, string nodeId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, RequestContent content, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.DisableNodeScheduling");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
                Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));

                using HttpMessage message = this.CreateDisableNodeSchedulingRequest(poolId, nodeId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, content, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// You can disable Task scheduling on a Compute Node only if its current
        /// scheduling state is enabled.
        /// </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node on which you want to disable Task scheduling. </param>
        /// <param name="parameters"> The options to use for disabling scheduling on the Compute Node. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response DisableNodeScheduling(string poolId, string nodeId, BatchNodeDisableSchedulingContent parameters = default, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
            Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));

            return DisableNodeScheduling(poolId, nodeId, parameters, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary>
        /// You can disable Task scheduling on a Compute Node only if its current
        /// scheduling state is enabled.
        /// </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node on which you want to disable Task scheduling. </param>
        /// <param name="parameters"> The options to use for disabling scheduling on the Compute Node. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> DisableNodeSchedulingAsync(string poolId, string nodeId, BatchNodeDisableSchedulingContent parameters = default, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
            Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));

            return await this.DisableNodeSchedulingAsync(poolId, nodeId, parameters, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] You can enable Task scheduling on a Compute Node only if its current scheduling
        /// state is disabled
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node on which you want to enable Task scheduling. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response EnableNodeScheduling(string poolId, string nodeId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.EnableNodeScheduling");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
                Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));

                using HttpMessage message = CreateEnableNodeSchedulingRequest(poolId, nodeId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] You can enable Task scheduling on a Compute Node only if its current scheduling
        /// state is disabled
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node on which you want to enable Task scheduling. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> EnableNodeSchedulingAsync(string poolId, string nodeId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.EnableNodeScheduling");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
                Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));

                using HttpMessage message = CreateEnableNodeSchedulingRequest(poolId, nodeId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// You can enable Task scheduling on a Compute Node only if its current scheduling
        /// state is disabled
        /// </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node on which you want to enable Task scheduling. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response EnableNodeScheduling(string poolId, string nodeId, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
            Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));

            return EnableNodeScheduling(poolId, nodeId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary>
        /// You can enable Task scheduling on a Compute Node only if its current scheduling
        /// state is disabled
        /// </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node on which you want to enable Task scheduling. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> EnableNodeSchedulingAsync(string poolId, string nodeId, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
            Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));

            return await EnableNodeSchedulingAsync(poolId, nodeId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] Before you can remotely login to a Compute Node using the remote login settings, 
        /// you must create a user Account on the Compute Node.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node for which to obtain the remote login settings. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetNodeRemoteLoginSettings(string poolId, string nodeId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.GetNodeRemoteLoginSettings");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
                Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));

                using HttpMessage message = CreateGetNodeRemoteLoginSettingsRequest(poolId, nodeId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Before you can remotely login to a Compute Node using the remote login settings, 
        /// you must create a user Account on the Compute Node.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node for which to obtain the remote login settings. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetNodeRemoteLoginSettingsAsync(string poolId, string nodeId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.GetNodeRemoteLoginSettings");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
                Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));

                using HttpMessage message = CreateGetNodeRemoteLoginSettingsRequest(poolId, nodeId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Before you can remotely login to a Compute Node using the remote login settings, 
        /// you must create a user Account on the Compute Node.
        /// </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node for which to obtain the remote login settings. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<BatchNodeRemoteLoginSettings> GetNodeRemoteLoginSettings(string poolId, string nodeId, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
            Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));

            Response result = GetNodeRemoteLoginSettings(poolId, nodeId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((BatchNodeRemoteLoginSettings)result, result);
        }

        /// <summary>
        /// Before you can remotely login to a Compute Node using the remote login settings, 
        /// you must create a user Account on the Compute Node.
        /// </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node for which to obtain the remote login settings. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<BatchNodeRemoteLoginSettings>> GetNodeRemoteLoginSettingsAsync(string poolId, string nodeId, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
            Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));

            Response result = await GetNodeRemoteLoginSettingsAsync(poolId, nodeId, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((BatchNodeRemoteLoginSettings)result, result);
        }

        /// <summary>
        /// [Protocol Method] This is for gathering Azure Batch service log files in an automated fashion
        /// from Compute Nodes if you are experiencing an error and wish to escalate to
        /// Azure support. The Azure Batch service log files should be shared with Azure
        /// support to aid in debugging issues with the Batch service.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId">
        /// The ID of the Compute Node for which you want to get the Remote Desktop
        /// Protocol file.
        /// </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/>, <paramref name="nodeId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response UploadNodeLogs(string poolId, string nodeId, RequestContent content, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.UploadNodeLogs");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
                Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateUploadNodeLogsRequest(poolId, nodeId, content, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] This is for gathering Azure Batch service log files in an automated fashion
        /// from Compute Nodes if you are experiencing an error and wish to escalate to
        /// Azure support. The Azure Batch service log files should be shared with Azure
        /// support to aid in debugging issues with the Batch service.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId">
        /// The ID of the Compute Node for which you want to get the Remote Desktop
        /// Protocol file.
        /// </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/>, <paramref name="nodeId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> UploadNodeLogsAsync(string poolId, string nodeId, RequestContent content, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, RequestContext context = null)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.UploadNodeLogs");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
                Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));
                Argument.AssertNotNull(content, nameof(content));

                using HttpMessage message = CreateUploadNodeLogsRequest(poolId, nodeId, content, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// This is for gathering Azure Batch service log files in an automated fashion
        /// from Compute Nodes if you are experiencing an error and wish to escalate to
        /// Azure support. The Azure Batch service log files should be shared with Azure
        /// support to aid in debugging issues with the Batch service.
        /// </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId">
        /// The ID of the Compute Node for which you want to get the Remote Desktop
        /// Protocol file.
        /// </param>
        /// <param name="content"> The Azure Batch service log files upload options. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/>, <paramref name="nodeId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<UploadBatchServiceLogsResult> UploadNodeLogs(string poolId, string nodeId, UploadBatchServiceLogsContent content, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
            Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));
            Argument.AssertNotNull(content, nameof(content));

            Response result = UploadNodeLogs(poolId, nodeId, content, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((UploadBatchServiceLogsResult)result, result);
        }

        /// <summary>
        /// This is for gathering Azure Batch service log files in an automated fashion
        /// from Compute Nodes if you are experiencing an error and wish to escalate to
        /// Azure support. The Azure Batch service log files should be shared with Azure
        /// support to aid in debugging issues with the Batch service.
        /// </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId">
        /// The ID of the Compute Node for which you want to get the Remote Desktop
        /// Protocol file.
        /// </param>
        /// <param name="content"> The Azure Batch service log files upload options. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/>, <paramref name="nodeId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<UploadBatchServiceLogsResult>> UploadNodeLogsAsync(string poolId, string nodeId, UploadBatchServiceLogsContent content, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
            Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));
            Argument.AssertNotNull(content, nameof(content));

            Response result = await UploadNodeLogsAsync(poolId, nodeId, content, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((UploadBatchServiceLogsResult)result, result);
        }

        /// <summary>
        /// [Protocol Method] Lists the Compute Nodes in the specified Pool.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="poolId"> The ID of the Pool from which you want to list Compute Nodes. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-nodes-in-a-pool.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Pageable<BinaryData> GetNodes(string poolId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, int? maxresults, string filter, IEnumerable<string> @select, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.GetNodes");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));

                return new BatchClientGetNodesCollectionResult(
                    this,
                    poolId,
                    timeOutInSeconds,
                    clientRequestId,
                    returnClientRequestId,
                    ocpdate,
                    maxresults,
                    filter,
                    @select,
                    context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Lists the Compute Nodes in the specified Pool.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="poolId"> The ID of the Pool from which you want to list Compute Nodes. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-nodes-in-a-pool.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual AsyncPageable<BinaryData> GetNodesAsync(string poolId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, int? maxresults, string filter, IEnumerable<string> @select, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.GetNodes");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));

                return new BatchClientGetNodesAsyncCollectionResult(
                    this,
                    poolId,
                    timeOutInSeconds,
                    clientRequestId,
                    returnClientRequestId,
                    ocpdate,
                    maxresults,
                    filter,
                    @select,
                    context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists the Compute Nodes in the specified Pool. </summary>
        /// <param name="poolId"> The ID of the Pool from which you want to list Compute Nodes. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-nodes-in-a-pool.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Pageable<BatchNode> GetNodes(string poolId, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, int? maxresults = default, string filter = default, IEnumerable<string> @select = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));

            return new BatchClientGetNodesCollectionResultOfT(
                this,
                poolId,
                timeOutInSeconds,
                clientRequestId,
                returnClientRequestId,
                ocpdate,
                maxresults,
                filter,
                @select,
                cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Lists the Compute Nodes in the specified Pool. </summary>
        /// <param name="poolId"> The ID of the Pool from which you want to list Compute Nodes. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-nodes-in-a-pool.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual AsyncPageable<BatchNode> GetNodesAsync(string poolId, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, int? maxresults = default, string filter = default, IEnumerable<string> @select = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));

            return new BatchClientGetNodesAsyncCollectionResultOfT(
                this,
                poolId,
                timeOutInSeconds,
                clientRequestId,
                returnClientRequestId,
                ocpdate,
                maxresults,
                filter,
                @select,
                cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary>
        /// [Protocol Method] Gets information about the specified Compute Node Extension.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node that contains the extensions. </param>
        /// <param name="extensionName"> The name of the Compute Node Extension that you want to get information about. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/>, <paramref name="nodeId"/> or <paramref name="extensionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/>, <paramref name="nodeId"/> or <paramref name="extensionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetNodeExtension(string poolId, string nodeId, string extensionName, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, IEnumerable<string> @select, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.GetNodeExtension");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
                Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));
                Argument.AssertNotNullOrEmpty(extensionName, nameof(extensionName));

                using HttpMessage message = CreateGetNodeExtensionRequest(poolId, nodeId, extensionName, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, @select, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Gets information about the specified Compute Node Extension.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node that contains the extensions. </param>
        /// <param name="extensionName"> The name of the Compute Node Extension that you want to get information about. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/>, <paramref name="nodeId"/> or <paramref name="extensionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/>, <paramref name="nodeId"/> or <paramref name="extensionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetNodeExtensionAsync(string poolId, string nodeId, string extensionName, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, IEnumerable<string> @select, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.GetNodeExtension");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
                Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));
                Argument.AssertNotNullOrEmpty(extensionName, nameof(extensionName));

                using HttpMessage message = CreateGetNodeExtensionRequest(poolId, nodeId, extensionName, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, @select, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets information about the specified Compute Node Extension. </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node that contains the extensions. </param>
        /// <param name="extensionName"> The name of the Compute Node Extension that you want to get information about. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/>, <paramref name="nodeId"/> or <paramref name="extensionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/>, <paramref name="nodeId"/> or <paramref name="extensionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<BatchNodeVMExtension> GetNodeExtension(string poolId, string nodeId, string extensionName, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, IEnumerable<string> @select = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
            Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));
            Argument.AssertNotNullOrEmpty(extensionName, nameof(extensionName));

            Response result = GetNodeExtension(poolId, nodeId, extensionName, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, @select, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue((BatchNodeVMExtension)result, result);
        }

        /// <summary> Gets information about the specified Compute Node Extension. </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node that contains the extensions. </param>
        /// <param name="extensionName"> The name of the Compute Node Extension that you want to get information about. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/>, <paramref name="nodeId"/> or <paramref name="extensionName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/>, <paramref name="nodeId"/> or <paramref name="extensionName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<BatchNodeVMExtension>> GetNodeExtensionAsync(string poolId, string nodeId, string extensionName, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, IEnumerable<string> @select = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
            Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));
            Argument.AssertNotNullOrEmpty(extensionName, nameof(extensionName));

            Response result = await GetNodeExtensionAsync(poolId, nodeId, extensionName, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, @select, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue((BatchNodeVMExtension)result, result);
        }

        /// <summary>
        /// [Protocol Method] Lists the Compute Nodes Extensions in the specified Pool.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="poolId"> The ID of the Pool that contains Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node that you want to list extensions. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Pageable<BinaryData> GetNodeExtensions(string poolId, string nodeId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, int? maxresults, IEnumerable<string> @select, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.GetNodeExtensions");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
                Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));

                return new BatchClientGetNodeExtensionsCollectionResult(
                    this,
                    poolId,
                    nodeId,
                    timeOutInSeconds,
                    clientRequestId,
                    returnClientRequestId,
                    ocpdate,
                    maxresults,
                    @select,
                    context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Lists the Compute Nodes Extensions in the specified Pool.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="poolId"> The ID of the Pool that contains Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node that you want to list extensions. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual AsyncPageable<BinaryData> GetNodeExtensionsAsync(string poolId, string nodeId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, int? maxresults, IEnumerable<string> @select, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.GetNodeExtensions");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
                Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));

                return new BatchClientGetNodeExtensionsAsyncCollectionResult(
                    this,
                    poolId,
                    nodeId,
                    timeOutInSeconds,
                    clientRequestId,
                    returnClientRequestId,
                    ocpdate,
                    maxresults,
                    @select,
                    context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists the Compute Nodes Extensions in the specified Pool. </summary>
        /// <param name="poolId"> The ID of the Pool that contains Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node that you want to list extensions. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Pageable<BatchNodeVMExtension> GetNodeExtensions(string poolId, string nodeId, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, int? maxresults = default, IEnumerable<string> @select = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
            Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));

            return new BatchClientGetNodeExtensionsCollectionResultOfT(
                this,
                poolId,
                nodeId,
                timeOutInSeconds,
                clientRequestId,
                returnClientRequestId,
                ocpdate,
                maxresults,
                @select,
                cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Lists the Compute Nodes Extensions in the specified Pool. </summary>
        /// <param name="poolId"> The ID of the Pool that contains Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node that you want to list extensions. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="select"> An OData $select clause. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual AsyncPageable<BatchNodeVMExtension> GetNodeExtensionsAsync(string poolId, string nodeId, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, int? maxresults = default, IEnumerable<string> @select = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
            Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));

            return new BatchClientGetNodeExtensionsAsyncCollectionResultOfT(
                this,
                poolId,
                nodeId,
                timeOutInSeconds,
                clientRequestId,
                returnClientRequestId,
                ocpdate,
                maxresults,
                @select,
                cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary>
        /// [Protocol Method] Deletes the specified file from the Compute Node.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node. </param>
        /// <param name="filePath"> The path to the file or directory. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="recursive">
        /// Whether to delete children of a directory. If the filePath parameter represents
        /// a directory instead of a file, you can set recursive to true to delete the
        /// directory and all of the files and subdirectories in it. If recursive is false
        /// then the directory must be empty or deletion will fail.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/>, <paramref name="nodeId"/> or <paramref name="filePath"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/>, <paramref name="nodeId"/> or <paramref name="filePath"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response DeleteNodeFile(string poolId, string nodeId, string filePath, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, bool? recursive, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.DeleteNodeFile");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
                Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));
                Argument.AssertNotNullOrEmpty(filePath, nameof(filePath));

                using HttpMessage message = CreateDeleteNodeFileRequest(poolId, nodeId, filePath, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, recursive, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Deletes the specified file from the Compute Node.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node. </param>
        /// <param name="filePath"> The path to the file or directory. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="recursive">
        /// Whether to delete children of a directory. If the filePath parameter represents
        /// a directory instead of a file, you can set recursive to true to delete the
        /// directory and all of the files and subdirectories in it. If recursive is false
        /// then the directory must be empty or deletion will fail.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/>, <paramref name="nodeId"/> or <paramref name="filePath"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/>, <paramref name="nodeId"/> or <paramref name="filePath"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> DeleteNodeFileAsync(string poolId, string nodeId, string filePath, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, bool? recursive, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.DeleteNodeFile");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
                Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));
                Argument.AssertNotNullOrEmpty(filePath, nameof(filePath));

                using HttpMessage message = CreateDeleteNodeFileRequest(poolId, nodeId, filePath, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, recursive, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes the specified file from the Compute Node. </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node. </param>
        /// <param name="filePath"> The path to the file or directory. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="recursive">
        /// Whether to delete children of a directory. If the filePath parameter represents
        /// a directory instead of a file, you can set recursive to true to delete the
        /// directory and all of the files and subdirectories in it. If recursive is false
        /// then the directory must be empty or deletion will fail.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/>, <paramref name="nodeId"/> or <paramref name="filePath"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/>, <paramref name="nodeId"/> or <paramref name="filePath"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response DeleteNodeFile(string poolId, string nodeId, string filePath, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, bool? recursive = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
            Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));
            Argument.AssertNotNullOrEmpty(filePath, nameof(filePath));

            return DeleteNodeFile(poolId, nodeId, filePath, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, recursive, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Deletes the specified file from the Compute Node. </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node. </param>
        /// <param name="filePath"> The path to the file or directory. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="recursive">
        /// Whether to delete children of a directory. If the filePath parameter represents
        /// a directory instead of a file, you can set recursive to true to delete the
        /// directory and all of the files and subdirectories in it. If recursive is false
        /// then the directory must be empty or deletion will fail.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/>, <paramref name="nodeId"/> or <paramref name="filePath"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/>, <paramref name="nodeId"/> or <paramref name="filePath"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response> DeleteNodeFileAsync(string poolId, string nodeId, string filePath, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, bool? recursive = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
            Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));
            Argument.AssertNotNullOrEmpty(filePath, nameof(filePath));

            return await DeleteNodeFileAsync(poolId, nodeId, filePath, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, recursive, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] Returns the content of the specified Compute Node file.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node. </param>
        /// <param name="filePath"> The path to the file or directory. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ocpRange">
        /// The byte range to be retrieved. The default is to retrieve the entire file. The
        /// format is bytes=startRange-endRange.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/>, <paramref name="nodeId"/> or <paramref name="filePath"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/>, <paramref name="nodeId"/> or <paramref name="filePath"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Response GetNodeFile(string poolId, string nodeId, string filePath, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ocpRange, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.GetNodeFile");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
                Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));
                Argument.AssertNotNullOrEmpty(filePath, nameof(filePath));

                using HttpMessage message = CreateGetNodeFileRequest(poolId, nodeId, filePath, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ocpRange, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Returns the content of the specified Compute Node file.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node. </param>
        /// <param name="filePath"> The path to the file or directory. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ocpRange">
        /// The byte range to be retrieved. The default is to retrieve the entire file. The
        /// format is bytes=startRange-endRange.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/>, <paramref name="nodeId"/> or <paramref name="filePath"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/>, <paramref name="nodeId"/> or <paramref name="filePath"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual async Task<Response> GetNodeFileAsync(string poolId, string nodeId, string filePath, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, string ocpRange, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.GetNodeFile");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
                Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));
                Argument.AssertNotNullOrEmpty(filePath, nameof(filePath));

                using HttpMessage message = CreateGetNodeFileRequest(poolId, nodeId, filePath, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ocpRange, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns the content of the specified Compute Node file. </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node. </param>
        /// <param name="filePath"> The path to the file or directory. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ocpRange">
        /// The byte range to be retrieved. The default is to retrieve the entire file. The
        /// format is bytes=startRange-endRange.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/>, <paramref name="nodeId"/> or <paramref name="filePath"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/>, <paramref name="nodeId"/> or <paramref name="filePath"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Response<BinaryData> GetNodeFile(string poolId, string nodeId, string filePath, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ocpRange = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
            Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));
            Argument.AssertNotNullOrEmpty(filePath, nameof(filePath));

            Response result = GetNodeFile(poolId, nodeId, filePath, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ocpRange, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
            return Response.FromValue(result.Content, result);
        }

        /// <summary> Returns the content of the specified Compute Node file. </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node. </param>
        /// <param name="filePath"> The path to the file or directory. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="ocpRange">
        /// The byte range to be retrieved. The default is to retrieve the entire file. The
        /// format is bytes=startRange-endRange.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/>, <paramref name="nodeId"/> or <paramref name="filePath"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/>, <paramref name="nodeId"/> or <paramref name="filePath"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual async Task<Response<BinaryData>> GetNodeFileAsync(string poolId, string nodeId, string filePath, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, string ocpRange = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
            Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));
            Argument.AssertNotNullOrEmpty(filePath, nameof(filePath));

            Response result = await GetNodeFileAsync(poolId, nodeId, filePath, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, ocpRange, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
            return Response.FromValue(result.Content, result);
        }

        /// <summary>
        /// [Protocol Method] Gets the properties of the specified Compute Node file.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node. </param>
        /// <param name="filePath"> The path to the file or directory. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        internal virtual Response GetNodeFilePropertiesInternal(string poolId, string nodeId, string filePath, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.GetNodeFilePropertiesInternal");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetNodeFilePropertiesInternalRequest(poolId, nodeId, filePath, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, context);
                return Pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Gets the properties of the specified Compute Node file.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node. </param>
        /// <param name="filePath"> The path to the file or directory. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        internal virtual async Task<Response> GetNodeFilePropertiesInternalAsync(string poolId, string nodeId, string filePath, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, DateTimeOffset? ifModifiedSince, DateTimeOffset? ifUnmodifiedSince, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.GetNodeFilePropertiesInternal");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetNodeFilePropertiesInternalRequest(poolId, nodeId, filePath, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, context);
                return await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets the properties of the specified Compute Node file. </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node. </param>
        /// <param name="filePath"> The path to the file or directory. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        internal virtual Response GetNodeFilePropertiesInternal(string poolId, string nodeId, string filePath, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, CancellationToken cancellationToken = default)
        {
            return GetNodeFilePropertiesInternal(poolId, nodeId, filePath, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Gets the properties of the specified Compute Node file. </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node. </param>
        /// <param name="filePath"> The path to the file or directory. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="ifModifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// been modified since the specified time.
        /// </param>
        /// <param name="ifUnmodifiedSince">
        /// A timestamp indicating the last modified time of the resource known to the
        /// client. The operation will be performed only if the resource on the service has
        /// not been modified since the specified time.
        /// </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        internal virtual async Task<Response> GetNodeFilePropertiesInternalAsync(string poolId, string nodeId, string filePath, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, DateTimeOffset? ifModifiedSince = default, DateTimeOffset? ifUnmodifiedSince = default, CancellationToken cancellationToken = default)
        {
            return await GetNodeFilePropertiesInternalAsync(poolId, nodeId, filePath, timeOutInSeconds, clientRequestId, returnClientRequestId, ocpdate, ifModifiedSince, ifUnmodifiedSince, cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null).ConfigureAwait(false);
        }

        /// <summary>
        /// [Protocol Method] Lists all of the files in Task directories on the specified Compute Node.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node whose files you want to list. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-compute-node-files.
        /// </param>
        /// <param name="recursive"> Whether to list children of a directory. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual Pageable<BinaryData> GetNodeFiles(string poolId, string nodeId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, int? maxresults, string filter, bool? recursive, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.GetNodeFiles");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
                Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));

                return new BatchClientGetNodeFilesCollectionResult(
                    this,
                    poolId,
                    nodeId,
                    timeOutInSeconds,
                    clientRequestId,
                    returnClientRequestId,
                    ocpdate,
                    maxresults,
                    filter,
                    recursive,
                    context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// [Protocol Method] Lists all of the files in Task directories on the specified Compute Node.
        /// <list type="bullet">
        /// <item>
        /// <description> This <see href="https://aka.ms/azsdk/net/protocol-methods">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios. </description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node whose files you want to list. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-compute-node-files.
        /// </param>
        /// <param name="recursive"> Whether to list children of a directory. </param>
        /// <param name="context"> The request options, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        public virtual AsyncPageable<BinaryData> GetNodeFilesAsync(string poolId, string nodeId, int? timeOutInSeconds, string clientRequestId, bool? returnClientRequestId, DateTimeOffset? ocpdate, int? maxresults, string filter, bool? recursive, RequestContext context)
        {
            using DiagnosticScope scope = ClientDiagnostics.CreateScope("BatchClient.GetNodeFiles");
            scope.Start();
            try
            {
                Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
                Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));

                return new BatchClientGetNodeFilesAsyncCollectionResult(
                    this,
                    poolId,
                    nodeId,
                    timeOutInSeconds,
                    clientRequestId,
                    returnClientRequestId,
                    ocpdate,
                    maxresults,
                    filter,
                    recursive,
                    context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Lists all of the files in Task directories on the specified Compute Node. </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node whose files you want to list. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-compute-node-files.
        /// </param>
        /// <param name="recursive"> Whether to list children of a directory. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual Pageable<BatchNodeFile> GetNodeFiles(string poolId, string nodeId, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, int? maxresults = default, string filter = default, bool? recursive = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
            Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));

            return new BatchClientGetNodeFilesCollectionResultOfT(
                this,
                poolId,
                nodeId,
                timeOutInSeconds,
                clientRequestId,
                returnClientRequestId,
                ocpdate,
                maxresults,
                filter,
                recursive,
                cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }

        /// <summary> Lists all of the files in Task directories on the specified Compute Node. </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node whose files you want to list. </param>
        /// <param name="timeOutInSeconds"> The maximum time that the server can spend processing the request, in seconds. The default is 30 seconds. If the value is larger than 30, the default will be used instead.". </param>
        /// <param name="clientRequestId">
        /// The caller-generated request identity, in the form of a GUID with no decoration
        /// such as curly braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
        /// </param>
        /// <param name="returnClientRequestId"> Whether the server should return the client-request-id in the response. </param>
        /// <param name="ocpdate">
        /// The time the request was issued. Client libraries typically set this to the
        /// current system clock time; set it explicitly if you are calling the REST API
        /// directly.
        /// </param>
        /// <param name="maxresults">
        /// The maximum number of items to return in the response. A maximum of 1000
        /// applications can be returned.
        /// </param>
        /// <param name="filter">
        /// An OData $filter clause. For more information on constructing this filter, see
        /// https://learn.microsoft.com/rest/api/batchservice/odata-filters-in-batch#list-compute-node-files.
        /// </param>
        /// <param name="recursive"> Whether to list children of a directory. </param>
        /// <param name="cancellationToken"> The cancellation token that can be used to cancel the operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        public virtual AsyncPageable<BatchNodeFile> GetNodeFilesAsync(string poolId, string nodeId, int? timeOutInSeconds = default, string clientRequestId = default, bool? returnClientRequestId = default, DateTimeOffset? ocpdate = default, int? maxresults = default, string filter = default, bool? recursive = default, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(poolId, nameof(poolId));
            Argument.AssertNotNullOrEmpty(nodeId, nameof(nodeId));

            return new BatchClientGetNodeFilesAsyncCollectionResultOfT(
                this,
                poolId,
                nodeId,
                timeOutInSeconds,
                clientRequestId,
                returnClientRequestId,
                ocpdate,
                maxresults,
                filter,
                recursive,
                cancellationToken.CanBeCanceled ? new RequestContext { CancellationToken = cancellationToken } : null);
        }
    }
}
