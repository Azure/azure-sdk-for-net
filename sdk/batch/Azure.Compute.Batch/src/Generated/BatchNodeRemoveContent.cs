// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.Batch
{
    /// <summary> Parameters for removing nodes from an Azure Batch Pool. </summary>
    public partial class BatchNodeRemoveContent
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="BatchNodeRemoveContent"/>. </summary>
        /// <param name="nodeList"> A list containing the IDs of the Compute Nodes to be removed from the specified Pool. A maximum of 100 nodes may be removed per request. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nodeList"/> is null. </exception>
        public BatchNodeRemoveContent(IEnumerable<string> nodeList)
        {
            Argument.AssertNotNull(nodeList, nameof(nodeList));

            NodeList = nodeList.ToList();
        }

        /// <summary> Initializes a new instance of <see cref="BatchNodeRemoveContent"/>. </summary>
        /// <param name="nodeList"> A list containing the IDs of the Compute Nodes to be removed from the specified Pool. A maximum of 100 nodes may be removed per request. </param>
        /// <param name="resizeTimeout"> The timeout for removal of Compute Nodes to the Pool. The default value is 15 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request). </param>
        /// <param name="nodeDeallocationOption"> Determines what to do with a Compute Node and its running task(s) after it has been selected for deallocation. The default value is requeue. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal BatchNodeRemoveContent(IList<string> nodeList, TimeSpan? resizeTimeout, BatchNodeDeallocationOption? nodeDeallocationOption, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            NodeList = nodeList;
            ResizeTimeout = resizeTimeout;
            NodeDeallocationOption = nodeDeallocationOption;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> A list containing the IDs of the Compute Nodes to be removed from the specified Pool. A maximum of 100 nodes may be removed per request. </summary>
        public IList<string> NodeList { get; }

        /// <summary> The timeout for removal of Compute Nodes to the Pool. The default value is 15 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request). </summary>
        public TimeSpan? ResizeTimeout { get; set; }

        /// <summary> Determines what to do with a Compute Node and its running task(s) after it has been selected for deallocation. The default value is requeue. </summary>
        public BatchNodeDeallocationOption? NodeDeallocationOption { get; set; }
    }
}
