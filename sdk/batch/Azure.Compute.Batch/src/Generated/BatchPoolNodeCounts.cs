// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Batch
{
    /// <summary> The number of Compute Nodes in each state for a Pool. </summary>
    public partial class BatchPoolNodeCounts
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="BatchPoolNodeCounts"/>. </summary>
        /// <param name="poolId"> The ID of the Pool. </param>
        internal BatchPoolNodeCounts(string poolId)
        {
            PoolId = poolId;
        }

        /// <summary> Initializes a new instance of <see cref="BatchPoolNodeCounts"/>. </summary>
        /// <param name="poolId"> The ID of the Pool. </param>
        /// <param name="dedicated"> The number of dedicated Compute Nodes in each state. </param>
        /// <param name="lowPriority"> The number of Spot/Low-priority Compute Nodes in each state. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal BatchPoolNodeCounts(string poolId, BatchNodeCounts dedicated, BatchNodeCounts lowPriority, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            PoolId = poolId;
            Dedicated = dedicated;
            LowPriority = lowPriority;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> The ID of the Pool. </summary>
        public string PoolId { get; }

        /// <summary> The number of dedicated Compute Nodes in each state. </summary>
        public BatchNodeCounts Dedicated { get; }

        /// <summary> The number of Spot/Low-priority Compute Nodes in each state. </summary>
        public BatchNodeCounts LowPriority { get; }
    }
}
