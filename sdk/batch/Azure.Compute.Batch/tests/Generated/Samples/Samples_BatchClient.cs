// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using System.Xml;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Compute.Batch.Samples
{
    public partial class Samples_BatchClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetApplication_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = client.GetApplication("<applicationId>", null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("versions")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetApplication_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = await client.GetApplicationAsync("<applicationId>", null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("versions")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetApplication_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response<BatchApplication> response = client.GetApplication("<applicationId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetApplication_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response<BatchApplication> response = await client.GetApplicationAsync("<applicationId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetApplication_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = client.GetApplication("<applicationId>", 1234, DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("versions")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetApplication_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = await client.GetApplicationAsync("<applicationId>", 1234, DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("versions")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetApplication_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response<BatchApplication> response = client.GetApplication("<applicationId>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetApplication_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response<BatchApplication> response = await client.GetApplicationAsync("<applicationId>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_CreatePool_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
                vmSize = "<vmSize>",
            });
            Response response = client.CreatePool(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_CreatePool_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
                vmSize = "<vmSize>",
            });
            Response response = await client.CreatePoolAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_CreatePool_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchPoolCreateContent pool = new BatchPoolCreateContent("<id>", "<vmSize>");
            Response response = client.CreatePool(pool);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_CreatePool_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchPoolCreateContent pool = new BatchPoolCreateContent("<id>", "<vmSize>");
            Response response = await client.CreatePoolAsync(pool);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_CreatePool_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
                displayName = "<displayName>",
                vmSize = "<vmSize>",
                virtualMachineConfiguration = new
                {
                    imageReference = new
                    {
                        publisher = "<publisher>",
                        offer = "<offer>",
                        sku = "<sku>",
                        version = "<version>",
                        virtualMachineImageId = "<virtualMachineImageId>",
                    },
                    nodeAgentSKUId = "<nodeAgentSKUId>",
                    windowsConfiguration = new
                    {
                        enableAutomaticUpdates = true,
                    },
                    dataDisks = new object[]
            {
new
{
lun = 1234,
caching = "none",
diskSizeGB = 1234,
storageAccountType = "standard_lrs",
}
            },
                    licenseType = "<licenseType>",
                    containerConfiguration = new
                    {
                        type = "dockerCompatible",
                        containerImageNames = new object[]
            {
"<containerImageNames>"
            },
                        containerRegistries = new object[]
            {
new
{
username = "<username>",
password = "<password>",
registryServer = "<registryServer>",
identityReference = new
{
resourceId = "<resourceId>",
},
}
            },
                    },
                    diskEncryptionConfiguration = new
                    {
                        targets = new object[]
            {
"osdisk"
            },
                    },
                    nodePlacementConfiguration = new
                    {
                        policy = "regional",
                    },
                    extensions = new object[]
            {
new
{
name = "<name>",
publisher = "<publisher>",
type = "<type>",
typeHandlerVersion = "<typeHandlerVersion>",
autoUpgradeMinorVersion = true,
enableAutomaticUpgrade = true,
settings = new
{
key = "<settings>",
},
protectedSettings = new
{
key = "<protectedSettings>",
},
provisionAfterExtensions = new object[]
{
"<provisionAfterExtensions>"
},
}
            },
                    osDisk = new
                    {
                        ephemeralOSDiskSettings = new
                        {
                            placement = "cachedisk",
                        },
                        caching = "none",
                        diskSizeGB = 1234,
                        managedDisk = new
                        {
                            storageAccountType = "standard_lrs",
                        },
                        writeAcceleratorEnabled = true,
                    },
                    securityProfile = new
                    {
                        encryptionAtHost = true,
                        securityType = "trustedLaunch",
                        uefiSettings = new
                        {
                            secureBootEnabled = true,
                            vTpmEnabled = true,
                        },
                    },
                    serviceArtifactReference = new
                    {
                        id = "<id>",
                    },
                },
                resizeTimeout = "PT1H23M45S",
                resourceTags = new
                {
                    key = "<resourceTags>",
                },
                targetDedicatedNodes = 1234,
                targetLowPriorityNodes = 1234,
                enableAutoScale = true,
                autoScaleFormula = "<autoScaleFormula>",
                autoScaleEvaluationInterval = "PT1H23M45S",
                enableInterNodeCommunication = true,
                networkConfiguration = new
                {
                    subnetId = "<subnetId>",
                    dynamicVNetAssignmentScope = "none",
                    endpointConfiguration = new
                    {
                        inboundNATPools = new object[]
            {
new
{
name = "<name>",
protocol = "tcp",
backendPort = 1234,
frontendPortRangeStart = 1234,
frontendPortRangeEnd = 1234,
networkSecurityGroupRules = new object[]
{
new
{
priority = 1234,
access = "allow",
sourceAddressPrefix = "<sourceAddressPrefix>",
sourcePortRanges = new object[]
{
"<sourcePortRanges>"
},
}
},
}
            },
                    },
                    publicIPAddressConfiguration = new
                    {
                        provision = "batchmanaged",
                        ipAddressIds = new object[]
            {
"<ipAddressIds>"
            },
                    },
                    enableAcceleratedNetworking = true,
                },
                startTask = new
                {
                    commandLine = "<commandLine>",
                    containerSettings = new
                    {
                        containerRunOptions = "<containerRunOptions>",
                        imageName = "<imageName>",
                        workingDirectory = "taskWorkingDirectory",
                    },
                    resourceFiles = new object[]
            {
new
{
autoStorageContainerName = "<autoStorageContainerName>",
storageContainerUrl = "<storageContainerUrl>",
httpUrl = "<httpUrl>",
blobPrefix = "<blobPrefix>",
filePath = "<filePath>",
fileMode = "<fileMode>",
}
            },
                    environmentSettings = new object[]
            {
new
{
name = "<name>",
value = "<value>",
}
            },
                    userIdentity = new
                    {
                        username = "<username>",
                        autoUser = new
                        {
                            scope = "task",
                            elevationLevel = "nonadmin",
                        },
                    },
                    maxTaskRetryCount = 1234,
                    waitForSuccess = true,
                },
                applicationPackageReferences = new object[]
            {
new
{
applicationId = "<applicationId>",
version = "<version>",
}
            },
                taskSlotsPerNode = 1234,
                taskSchedulingPolicy = new
                {
                    nodeFillType = "spread",
                },
                userAccounts = new object[]
            {
new
{
name = "<name>",
password = "<password>",
elevationLevel = "nonadmin",
linuxUserConfiguration = new
{
uid = 1234,
gid = 1234,
sshPrivateKey = "<sshPrivateKey>",
},
windowsUserConfiguration = new
{
loginMode = "batch",
},
}
            },
                metadata = new object[]
            {
new
{
name = "<name>",
value = "<value>",
}
            },
                mountConfiguration = new object[]
            {
new
{
azureBlobFileSystemConfiguration = new
{
accountName = "<accountName>",
containerName = "<containerName>",
accountKey = "<accountKey>",
sasKey = "<sasKey>",
blobfuseOptions = "<blobfuseOptions>",
relativeMountPath = "<relativeMountPath>",
},
nfsMountConfiguration = new
{
source = "<source>",
relativeMountPath = "<relativeMountPath>",
mountOptions = "<mountOptions>",
},
cifsMountConfiguration = new
{
username = "<username>",
source = "<source>",
relativeMountPath = "<relativeMountPath>",
mountOptions = "<mountOptions>",
password = "<password>",
},
azureFileShareConfiguration = new
{
accountName = "<accountName>",
azureFileUrl = "<azureFileUrl>",
accountKey = "<accountKey>",
relativeMountPath = "<relativeMountPath>",
mountOptions = "<mountOptions>",
},
}
            },
                targetNodeCommunicationMode = "default",
                upgradePolicy = new
                {
                    mode = "automatic",
                    automaticOSUpgradePolicy = new
                    {
                        disableAutomaticRollback = true,
                        enableAutomaticOSUpgrade = true,
                        useRollingUpgradePolicy = true,
                        osRollingUpgradeDeferral = true,
                    },
                    rollingUpgradePolicy = new
                    {
                        enableCrossZoneUpgrade = true,
                        maxBatchInstancePercent = 1234,
                        maxUnhealthyInstancePercent = 1234,
                        maxUnhealthyUpgradedInstancePercent = 1234,
                        pauseTimeBetweenBatches = "PT1H23M45S",
                        prioritizeUnhealthyInstances = true,
                        rollbackFailedInstancesOnPolicyBreach = true,
                    },
                },
            });
            Response response = client.CreatePool(content, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_CreatePool_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
                displayName = "<displayName>",
                vmSize = "<vmSize>",
                virtualMachineConfiguration = new
                {
                    imageReference = new
                    {
                        publisher = "<publisher>",
                        offer = "<offer>",
                        sku = "<sku>",
                        version = "<version>",
                        virtualMachineImageId = "<virtualMachineImageId>",
                    },
                    nodeAgentSKUId = "<nodeAgentSKUId>",
                    windowsConfiguration = new
                    {
                        enableAutomaticUpdates = true,
                    },
                    dataDisks = new object[]
            {
new
{
lun = 1234,
caching = "none",
diskSizeGB = 1234,
storageAccountType = "standard_lrs",
}
            },
                    licenseType = "<licenseType>",
                    containerConfiguration = new
                    {
                        type = "dockerCompatible",
                        containerImageNames = new object[]
            {
"<containerImageNames>"
            },
                        containerRegistries = new object[]
            {
new
{
username = "<username>",
password = "<password>",
registryServer = "<registryServer>",
identityReference = new
{
resourceId = "<resourceId>",
},
}
            },
                    },
                    diskEncryptionConfiguration = new
                    {
                        targets = new object[]
            {
"osdisk"
            },
                    },
                    nodePlacementConfiguration = new
                    {
                        policy = "regional",
                    },
                    extensions = new object[]
            {
new
{
name = "<name>",
publisher = "<publisher>",
type = "<type>",
typeHandlerVersion = "<typeHandlerVersion>",
autoUpgradeMinorVersion = true,
enableAutomaticUpgrade = true,
settings = new
{
key = "<settings>",
},
protectedSettings = new
{
key = "<protectedSettings>",
},
provisionAfterExtensions = new object[]
{
"<provisionAfterExtensions>"
},
}
            },
                    osDisk = new
                    {
                        ephemeralOSDiskSettings = new
                        {
                            placement = "cachedisk",
                        },
                        caching = "none",
                        diskSizeGB = 1234,
                        managedDisk = new
                        {
                            storageAccountType = "standard_lrs",
                        },
                        writeAcceleratorEnabled = true,
                    },
                    securityProfile = new
                    {
                        encryptionAtHost = true,
                        securityType = "trustedLaunch",
                        uefiSettings = new
                        {
                            secureBootEnabled = true,
                            vTpmEnabled = true,
                        },
                    },
                    serviceArtifactReference = new
                    {
                        id = "<id>",
                    },
                },
                resizeTimeout = "PT1H23M45S",
                resourceTags = new
                {
                    key = "<resourceTags>",
                },
                targetDedicatedNodes = 1234,
                targetLowPriorityNodes = 1234,
                enableAutoScale = true,
                autoScaleFormula = "<autoScaleFormula>",
                autoScaleEvaluationInterval = "PT1H23M45S",
                enableInterNodeCommunication = true,
                networkConfiguration = new
                {
                    subnetId = "<subnetId>",
                    dynamicVNetAssignmentScope = "none",
                    endpointConfiguration = new
                    {
                        inboundNATPools = new object[]
            {
new
{
name = "<name>",
protocol = "tcp",
backendPort = 1234,
frontendPortRangeStart = 1234,
frontendPortRangeEnd = 1234,
networkSecurityGroupRules = new object[]
{
new
{
priority = 1234,
access = "allow",
sourceAddressPrefix = "<sourceAddressPrefix>",
sourcePortRanges = new object[]
{
"<sourcePortRanges>"
},
}
},
}
            },
                    },
                    publicIPAddressConfiguration = new
                    {
                        provision = "batchmanaged",
                        ipAddressIds = new object[]
            {
"<ipAddressIds>"
            },
                    },
                    enableAcceleratedNetworking = true,
                },
                startTask = new
                {
                    commandLine = "<commandLine>",
                    containerSettings = new
                    {
                        containerRunOptions = "<containerRunOptions>",
                        imageName = "<imageName>",
                        workingDirectory = "taskWorkingDirectory",
                    },
                    resourceFiles = new object[]
            {
new
{
autoStorageContainerName = "<autoStorageContainerName>",
storageContainerUrl = "<storageContainerUrl>",
httpUrl = "<httpUrl>",
blobPrefix = "<blobPrefix>",
filePath = "<filePath>",
fileMode = "<fileMode>",
}
            },
                    environmentSettings = new object[]
            {
new
{
name = "<name>",
value = "<value>",
}
            },
                    userIdentity = new
                    {
                        username = "<username>",
                        autoUser = new
                        {
                            scope = "task",
                            elevationLevel = "nonadmin",
                        },
                    },
                    maxTaskRetryCount = 1234,
                    waitForSuccess = true,
                },
                applicationPackageReferences = new object[]
            {
new
{
applicationId = "<applicationId>",
version = "<version>",
}
            },
                taskSlotsPerNode = 1234,
                taskSchedulingPolicy = new
                {
                    nodeFillType = "spread",
                },
                userAccounts = new object[]
            {
new
{
name = "<name>",
password = "<password>",
elevationLevel = "nonadmin",
linuxUserConfiguration = new
{
uid = 1234,
gid = 1234,
sshPrivateKey = "<sshPrivateKey>",
},
windowsUserConfiguration = new
{
loginMode = "batch",
},
}
            },
                metadata = new object[]
            {
new
{
name = "<name>",
value = "<value>",
}
            },
                mountConfiguration = new object[]
            {
new
{
azureBlobFileSystemConfiguration = new
{
accountName = "<accountName>",
containerName = "<containerName>",
accountKey = "<accountKey>",
sasKey = "<sasKey>",
blobfuseOptions = "<blobfuseOptions>",
relativeMountPath = "<relativeMountPath>",
},
nfsMountConfiguration = new
{
source = "<source>",
relativeMountPath = "<relativeMountPath>",
mountOptions = "<mountOptions>",
},
cifsMountConfiguration = new
{
username = "<username>",
source = "<source>",
relativeMountPath = "<relativeMountPath>",
mountOptions = "<mountOptions>",
password = "<password>",
},
azureFileShareConfiguration = new
{
accountName = "<accountName>",
azureFileUrl = "<azureFileUrl>",
accountKey = "<accountKey>",
relativeMountPath = "<relativeMountPath>",
mountOptions = "<mountOptions>",
},
}
            },
                targetNodeCommunicationMode = "default",
                upgradePolicy = new
                {
                    mode = "automatic",
                    automaticOSUpgradePolicy = new
                    {
                        disableAutomaticRollback = true,
                        enableAutomaticOSUpgrade = true,
                        useRollingUpgradePolicy = true,
                        osRollingUpgradeDeferral = true,
                    },
                    rollingUpgradePolicy = new
                    {
                        enableCrossZoneUpgrade = true,
                        maxBatchInstancePercent = 1234,
                        maxUnhealthyInstancePercent = 1234,
                        maxUnhealthyUpgradedInstancePercent = 1234,
                        pauseTimeBetweenBatches = "PT1H23M45S",
                        prioritizeUnhealthyInstances = true,
                        rollbackFailedInstancesOnPolicyBreach = true,
                    },
                },
            });
            Response response = await client.CreatePoolAsync(content, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_CreatePool_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchPoolCreateContent pool = new BatchPoolCreateContent("<id>", "<vmSize>")
            {
                DisplayName = "<displayName>",
                VirtualMachineConfiguration = new VirtualMachineConfiguration(new ImageReference
                {
                    Publisher = "<publisher>",
                    Offer = "<offer>",
                    Sku = "<sku>",
                    Version = "<version>",
                    VirtualMachineImageId = "<virtualMachineImageId>",
                }, "<nodeAgentSKUId>")
                {
                    WindowsConfiguration = new WindowsConfiguration
                    {
                        EnableAutomaticUpdates = true,
                    },
                    DataDisks = {new DataDisk(1234, 1234)
{
Caching = CachingType.None,
StorageAccountType = StorageAccountType.StandardLRS,
}},
                    LicenseType = "<licenseType>",
                    ContainerConfiguration = new ContainerConfiguration(ContainerType.DockerCompatible)
                    {
                        ContainerImageNames = { "<containerImageNames>" },
                        ContainerRegistries = {new ContainerRegistryReference
{
Username = "<username>",
Password = "<password>",
RegistryServer = "<registryServer>",
IdentityReference = new BatchNodeIdentityReference
{
ResourceId = "<resourceId>",
},
}},
                    },
                    DiskEncryptionConfiguration = new DiskEncryptionConfiguration
                    {
                        Targets = { DiskEncryptionTarget.OsDisk },
                    },
                    NodePlacementConfiguration = new BatchNodePlacementConfiguration
                    {
                        Policy = BatchNodePlacementPolicyType.Regional,
                    },
                    Extensions = {new VMExtension("<name>", "<publisher>", "<type>")
{
TypeHandlerVersion = "<typeHandlerVersion>",
AutoUpgradeMinorVersion = true,
EnableAutomaticUpgrade = true,
Settings =
{
["key"] = "<settings>"
},
ProtectedSettings =
{
["key"] = "<protectedSettings>"
},
ProvisionAfterExtensions = {"<provisionAfterExtensions>"},
}},
                    OsDisk = new OSDisk
                    {
                        EphemeralOSDiskSettings = new DiffDiskSettings
                        {
                            Placement = DiffDiskPlacement.CacheDisk,
                        },
                        Caching = CachingType.None,
                        DiskSizeGB = 1234,
                        ManagedDisk = new ManagedDisk(StorageAccountType.StandardLRS),
                        WriteAcceleratorEnabled = true,
                    },
                    SecurityProfile = new SecurityProfile(true, SecurityTypes.TrustedLaunch, new UefiSettings
                    {
                        SecureBootEnabled = true,
                        VTpmEnabled = true,
                    }),
                    ServiceArtifactReference = new ServiceArtifactReference("<id>"),
                },
                ResizeTimeout = XmlConvert.ToTimeSpan("PT1H23M45S"),
                ResourceTags =
{
["key"] = "<resourceTags>"
},
                TargetDedicatedNodes = 1234,
                TargetLowPriorityNodes = 1234,
                EnableAutoScale = true,
                AutoScaleFormula = "<autoScaleFormula>",
                AutoScaleEvaluationInterval = XmlConvert.ToTimeSpan("PT1H23M45S"),
                EnableInterNodeCommunication = true,
                NetworkConfiguration = new NetworkConfiguration
                {
                    SubnetId = "<subnetId>",
                    DynamicVNetAssignmentScope = DynamicVNetAssignmentScope.None,
                    EndpointConfiguration = new BatchPoolEndpointConfiguration(new InboundNatPool[]
            {
new InboundNatPool("<name>", InboundEndpointProtocol.Tcp, 1234, 1234, 1234)
{
NetworkSecurityGroupRules = {new NetworkSecurityGroupRule(1234, NetworkSecurityGroupRuleAccess.Allow, "<sourceAddressPrefix>")
{
SourcePortRanges = {"<sourcePortRanges>"},
}},
}
            }),
                    PublicIpAddressConfiguration = new PublicIpAddressConfiguration
                    {
                        IpAddressProvisioningType = IpAddressProvisioningType.BatchManaged,
                        IpAddressIds = { "<ipAddressIds>" },
                    },
                    EnableAcceleratedNetworking = true,
                },
                StartTask = new BatchStartTask("<commandLine>")
                {
                    ContainerSettings = new BatchTaskContainerSettings("<imageName>")
                    {
                        ContainerRunOptions = "<containerRunOptions>",
                        Registry = default,
                        WorkingDirectory = ContainerWorkingDirectory.TaskWorkingDirectory,
                    },
                    ResourceFiles = {new ResourceFile
{
AutoStorageContainerName = "<autoStorageContainerName>",
StorageContainerUrl = "<storageContainerUrl>",
HttpUrl = "<httpUrl>",
BlobPrefix = "<blobPrefix>",
FilePath = "<filePath>",
FileMode = "<fileMode>",
IdentityReference = default,
}},
                    EnvironmentSettings = {new EnvironmentSetting("<name>")
{
Value = "<value>",
}},
                    UserIdentity = new UserIdentity
                    {
                        Username = "<username>",
                        AutoUser = new AutoUserSpecification
                        {
                            Scope = AutoUserScope.Task,
                            ElevationLevel = ElevationLevel.NonAdmin,
                        },
                    },
                    MaxTaskRetryCount = 1234,
                    WaitForSuccess = true,
                },
                ApplicationPackageReferences = {new BatchApplicationPackageReference("<applicationId>")
{
Version = "<version>",
}},
                TaskSlotsPerNode = 1234,
                TaskSchedulingPolicy = new BatchTaskSchedulingPolicy(BatchNodeFillType.Spread),
                UserAccounts = {new UserAccount("<name>", "<password>")
{
ElevationLevel = ElevationLevel.NonAdmin,
LinuxUserConfiguration = new LinuxUserConfiguration
{
Uid = 1234,
Gid = 1234,
SshPrivateKey = "<sshPrivateKey>",
},
WindowsUserConfiguration = new WindowsUserConfiguration
{
LoginMode = LoginMode.Batch,
},
}},
                Metadata = { new MetadataItem("<name>", "<value>") },
                MountConfiguration = {new MountConfiguration
{
AzureBlobFileSystemConfiguration = new AzureBlobFileSystemConfiguration("<accountName>", "<containerName>", "<relativeMountPath>")
{
AccountKey = "<accountKey>",
SasKey = "<sasKey>",
BlobfuseOptions = "<blobfuseOptions>",
IdentityReference = default,
},
NfsMountConfiguration = new NfsMountConfiguration("<source>", "<relativeMountPath>")
{
MountOptions = "<mountOptions>",
},
CifsMountConfiguration = new CifsMountConfiguration("<username>", "<source>", "<relativeMountPath>", "<password>")
{
MountOptions = "<mountOptions>",
},
AzureFileShareConfiguration = new AzureFileShareConfiguration("<accountName>", "<azureFileUrl>", "<accountKey>", "<relativeMountPath>")
{
MountOptions = "<mountOptions>",
},
}},
                TargetNodeCommunicationMode = BatchNodeCommunicationMode.Default,
                UpgradePolicy = new UpgradePolicy(UpgradeMode.Automatic)
                {
                    AutomaticOsUpgradePolicy = new AutomaticOsUpgradePolicy
                    {
                        DisableAutomaticRollback = true,
                        EnableAutomaticOsUpgrade = true,
                        UseRollingUpgradePolicy = true,
                        OsRollingUpgradeDeferral = true,
                    },
                    RollingUpgradePolicy = new RollingUpgradePolicy
                    {
                        EnableCrossZoneUpgrade = true,
                        MaxBatchInstancePercent = 1234,
                        MaxUnhealthyInstancePercent = 1234,
                        MaxUnhealthyUpgradedInstancePercent = 1234,
                        PauseTimeBetweenBatches = XmlConvert.ToTimeSpan("PT1H23M45S"),
                        PrioritizeUnhealthyInstances = true,
                        RollbackFailedInstancesOnPolicyBreach = true,
                    },
                },
            };
            Response response = client.CreatePool(pool, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_CreatePool_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchPoolCreateContent pool = new BatchPoolCreateContent("<id>", "<vmSize>")
            {
                DisplayName = "<displayName>",
                VirtualMachineConfiguration = new VirtualMachineConfiguration(new ImageReference
                {
                    Publisher = "<publisher>",
                    Offer = "<offer>",
                    Sku = "<sku>",
                    Version = "<version>",
                    VirtualMachineImageId = "<virtualMachineImageId>",
                }, "<nodeAgentSKUId>")
                {
                    WindowsConfiguration = new WindowsConfiguration
                    {
                        EnableAutomaticUpdates = true,
                    },
                    DataDisks = {new DataDisk(1234, 1234)
{
Caching = CachingType.None,
StorageAccountType = StorageAccountType.StandardLRS,
}},
                    LicenseType = "<licenseType>",
                    ContainerConfiguration = new ContainerConfiguration(ContainerType.DockerCompatible)
                    {
                        ContainerImageNames = { "<containerImageNames>" },
                        ContainerRegistries = {new ContainerRegistryReference
{
Username = "<username>",
Password = "<password>",
RegistryServer = "<registryServer>",
IdentityReference = new BatchNodeIdentityReference
{
ResourceId = "<resourceId>",
},
}},
                    },
                    DiskEncryptionConfiguration = new DiskEncryptionConfiguration
                    {
                        Targets = { DiskEncryptionTarget.OsDisk },
                    },
                    NodePlacementConfiguration = new BatchNodePlacementConfiguration
                    {
                        Policy = BatchNodePlacementPolicyType.Regional,
                    },
                    Extensions = {new VMExtension("<name>", "<publisher>", "<type>")
{
TypeHandlerVersion = "<typeHandlerVersion>",
AutoUpgradeMinorVersion = true,
EnableAutomaticUpgrade = true,
Settings =
{
["key"] = "<settings>"
},
ProtectedSettings =
{
["key"] = "<protectedSettings>"
},
ProvisionAfterExtensions = {"<provisionAfterExtensions>"},
}},
                    OsDisk = new OSDisk
                    {
                        EphemeralOSDiskSettings = new DiffDiskSettings
                        {
                            Placement = DiffDiskPlacement.CacheDisk,
                        },
                        Caching = CachingType.None,
                        DiskSizeGB = 1234,
                        ManagedDisk = new ManagedDisk(StorageAccountType.StandardLRS),
                        WriteAcceleratorEnabled = true,
                    },
                    SecurityProfile = new SecurityProfile(true, SecurityTypes.TrustedLaunch, new UefiSettings
                    {
                        SecureBootEnabled = true,
                        VTpmEnabled = true,
                    }),
                    ServiceArtifactReference = new ServiceArtifactReference("<id>"),
                },
                ResizeTimeout = XmlConvert.ToTimeSpan("PT1H23M45S"),
                ResourceTags =
{
["key"] = "<resourceTags>"
},
                TargetDedicatedNodes = 1234,
                TargetLowPriorityNodes = 1234,
                EnableAutoScale = true,
                AutoScaleFormula = "<autoScaleFormula>",
                AutoScaleEvaluationInterval = XmlConvert.ToTimeSpan("PT1H23M45S"),
                EnableInterNodeCommunication = true,
                NetworkConfiguration = new NetworkConfiguration
                {
                    SubnetId = "<subnetId>",
                    DynamicVNetAssignmentScope = DynamicVNetAssignmentScope.None,
                    EndpointConfiguration = new BatchPoolEndpointConfiguration(new InboundNatPool[]
            {
new InboundNatPool("<name>", InboundEndpointProtocol.Tcp, 1234, 1234, 1234)
{
NetworkSecurityGroupRules = {new NetworkSecurityGroupRule(1234, NetworkSecurityGroupRuleAccess.Allow, "<sourceAddressPrefix>")
{
SourcePortRanges = {"<sourcePortRanges>"},
}},
}
            }),
                    PublicIpAddressConfiguration = new PublicIpAddressConfiguration
                    {
                        IpAddressProvisioningType = IpAddressProvisioningType.BatchManaged,
                        IpAddressIds = { "<ipAddressIds>" },
                    },
                    EnableAcceleratedNetworking = true,
                },
                StartTask = new BatchStartTask("<commandLine>")
                {
                    ContainerSettings = new BatchTaskContainerSettings("<imageName>")
                    {
                        ContainerRunOptions = "<containerRunOptions>",
                        Registry = default,
                        WorkingDirectory = ContainerWorkingDirectory.TaskWorkingDirectory,
                    },
                    ResourceFiles = {new ResourceFile
{
AutoStorageContainerName = "<autoStorageContainerName>",
StorageContainerUrl = "<storageContainerUrl>",
HttpUrl = "<httpUrl>",
BlobPrefix = "<blobPrefix>",
FilePath = "<filePath>",
FileMode = "<fileMode>",
IdentityReference = default,
}},
                    EnvironmentSettings = {new EnvironmentSetting("<name>")
{
Value = "<value>",
}},
                    UserIdentity = new UserIdentity
                    {
                        Username = "<username>",
                        AutoUser = new AutoUserSpecification
                        {
                            Scope = AutoUserScope.Task,
                            ElevationLevel = ElevationLevel.NonAdmin,
                        },
                    },
                    MaxTaskRetryCount = 1234,
                    WaitForSuccess = true,
                },
                ApplicationPackageReferences = {new BatchApplicationPackageReference("<applicationId>")
{
Version = "<version>",
}},
                TaskSlotsPerNode = 1234,
                TaskSchedulingPolicy = new BatchTaskSchedulingPolicy(BatchNodeFillType.Spread),
                UserAccounts = {new UserAccount("<name>", "<password>")
{
ElevationLevel = ElevationLevel.NonAdmin,
LinuxUserConfiguration = new LinuxUserConfiguration
{
Uid = 1234,
Gid = 1234,
SshPrivateKey = "<sshPrivateKey>",
},
WindowsUserConfiguration = new WindowsUserConfiguration
{
LoginMode = LoginMode.Batch,
},
}},
                Metadata = { new MetadataItem("<name>", "<value>") },
                MountConfiguration = {new MountConfiguration
{
AzureBlobFileSystemConfiguration = new AzureBlobFileSystemConfiguration("<accountName>", "<containerName>", "<relativeMountPath>")
{
AccountKey = "<accountKey>",
SasKey = "<sasKey>",
BlobfuseOptions = "<blobfuseOptions>",
IdentityReference = default,
},
NfsMountConfiguration = new NfsMountConfiguration("<source>", "<relativeMountPath>")
{
MountOptions = "<mountOptions>",
},
CifsMountConfiguration = new CifsMountConfiguration("<username>", "<source>", "<relativeMountPath>", "<password>")
{
MountOptions = "<mountOptions>",
},
AzureFileShareConfiguration = new AzureFileShareConfiguration("<accountName>", "<azureFileUrl>", "<accountKey>", "<relativeMountPath>")
{
MountOptions = "<mountOptions>",
},
}},
                TargetNodeCommunicationMode = BatchNodeCommunicationMode.Default,
                UpgradePolicy = new UpgradePolicy(UpgradeMode.Automatic)
                {
                    AutomaticOsUpgradePolicy = new AutomaticOsUpgradePolicy
                    {
                        DisableAutomaticRollback = true,
                        EnableAutomaticOsUpgrade = true,
                        UseRollingUpgradePolicy = true,
                        OsRollingUpgradeDeferral = true,
                    },
                    RollingUpgradePolicy = new RollingUpgradePolicy
                    {
                        EnableCrossZoneUpgrade = true,
                        MaxBatchInstancePercent = 1234,
                        MaxUnhealthyInstancePercent = 1234,
                        MaxUnhealthyUpgradedInstancePercent = 1234,
                        PauseTimeBetweenBatches = XmlConvert.ToTimeSpan("PT1H23M45S"),
                        PrioritizeUnhealthyInstances = true,
                        RollbackFailedInstancesOnPolicyBreach = true,
                    },
                },
            };
            Response response = await client.CreatePoolAsync(pool, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_DeletePool_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = client.DeletePool("<poolId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_DeletePool_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = await client.DeletePoolAsync("<poolId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_DeletePool_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = client.DeletePool("<poolId>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), requestConditions: null);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_DeletePool_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = await client.DeletePoolAsync("<poolId>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), requestConditions: null);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetPool_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = client.GetPool("<poolId>", null, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetPool_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = await client.GetPoolAsync("<poolId>", null, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetPool_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response<BatchPool> response = client.GetPool("<poolId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetPool_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response<BatchPool> response = await client.GetPoolAsync("<poolId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetPool_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = client.GetPool("<poolId>", 1234, DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), new string[] { "<select>" }, new string[] { "<expand>" }, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("url").ToString());
            Console.WriteLine(result.GetProperty("eTag").ToString());
            Console.WriteLine(result.GetProperty("lastModified").ToString());
            Console.WriteLine(result.GetProperty("creationTime").ToString());
            Console.WriteLine(result.GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("stateTransitionTime").ToString());
            Console.WriteLine(result.GetProperty("allocationState").ToString());
            Console.WriteLine(result.GetProperty("allocationStateTransitionTime").ToString());
            Console.WriteLine(result.GetProperty("vmSize").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("publisher").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("offer").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("sku").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("virtualMachineImageId").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("exactVersion").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("nodeAgentSKUId").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("windowsConfiguration").GetProperty("enableAutomaticUpdates").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("lun").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("caching").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("diskSizeGB").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("storageAccountType").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("licenseType").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerImageNames")[0].ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("password").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("registryServer").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("diskEncryptionConfiguration").GetProperty("targets")[0].ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("nodePlacementConfiguration").GetProperty("policy").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("publisher").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("typeHandlerVersion").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("autoUpgradeMinorVersion").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("enableAutomaticUpgrade").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("settings").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("protectedSettings").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("provisionAfterExtensions")[0].ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("ephemeralOSDiskSettings").GetProperty("placement").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("caching").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("managedDisk").GetProperty("storageAccountType").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("writeAcceleratorEnabled").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("securityProfile").GetProperty("encryptionAtHost").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("securityProfile").GetProperty("securityType").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("secureBootEnabled").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("vTpmEnabled").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("serviceArtifactReference").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("resizeTimeout").ToString());
            Console.WriteLine(result.GetProperty("resizeErrors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("resizeErrors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("resizeErrors")[0].GetProperty("values")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("resizeErrors")[0].GetProperty("values")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("resourceTags").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("currentDedicatedNodes").ToString());
            Console.WriteLine(result.GetProperty("currentLowPriorityNodes").ToString());
            Console.WriteLine(result.GetProperty("targetDedicatedNodes").ToString());
            Console.WriteLine(result.GetProperty("targetLowPriorityNodes").ToString());
            Console.WriteLine(result.GetProperty("enableAutoScale").ToString());
            Console.WriteLine(result.GetProperty("autoScaleFormula").ToString());
            Console.WriteLine(result.GetProperty("autoScaleEvaluationInterval").ToString());
            Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("timestamp").ToString());
            Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("results").ToString());
            Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("error").GetProperty("values")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("error").GetProperty("values")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("enableInterNodeCommunication").ToString());
            Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("subnetId").ToString());
            Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("dynamicVNetAssignmentScope").ToString());
            Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("protocol").ToString());
            Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("backendPort").ToString());
            Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("frontendPortRangeStart").ToString());
            Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("frontendPortRangeEnd").ToString());
            Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("priority").ToString());
            Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("access").ToString());
            Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("sourceAddressPrefix").ToString());
            Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("sourcePortRanges")[0].ToString());
            Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("publicIPAddressConfiguration").GetProperty("provision").ToString());
            Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("publicIPAddressConfiguration").GetProperty("ipAddressIds")[0].ToString());
            Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("enableAcceleratedNetworking").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("commandLine").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("containerRunOptions").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("imageName").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("password").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("registryServer").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("workingDirectory").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("autoStorageContainerName").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("storageContainerUrl").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("httpUrl").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("blobPrefix").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("filePath").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("fileMode").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("environmentSettings")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("environmentSettings")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("userIdentity").GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("scope").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("elevationLevel").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("maxTaskRetryCount").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("waitForSuccess").ToString());
            Console.WriteLine(result.GetProperty("applicationPackageReferences")[0].GetProperty("applicationId").ToString());
            Console.WriteLine(result.GetProperty("applicationPackageReferences")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("taskSlotsPerNode").ToString());
            Console.WriteLine(result.GetProperty("taskSchedulingPolicy").GetProperty("nodeFillType").ToString());
            Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("password").ToString());
            Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("elevationLevel").ToString());
            Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("uid").ToString());
            Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("gid").ToString());
            Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("sshPrivateKey").ToString());
            Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("windowsUserConfiguration").GetProperty("loginMode").ToString());
            Console.WriteLine(result.GetProperty("metadata")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("metadata")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("url").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("lastUpdateTime").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("usageStats").GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("usageStats").GetProperty("lastUpdateTime").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("usageStats").GetProperty("dedicatedCoreTime").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("lastUpdateTime").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("avgCPUPercentage").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("avgMemoryGiB").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("peakMemoryGiB").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("avgDiskGiB").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("peakDiskGiB").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("diskReadIOps").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("diskWriteIOps").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("diskReadGiB").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("diskWriteGiB").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("networkReadGiB").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("networkWriteGiB").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("accountName").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("containerName").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("accountKey").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("sasKey").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("blobfuseOptions").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("relativeMountPath").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("relativeMountPath").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("mountOptions").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("relativeMountPath").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("mountOptions").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("password").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("accountName").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("azureFileUrl").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("accountKey").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("relativeMountPath").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("mountOptions").ToString());
            Console.WriteLine(result.GetProperty("identity").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("identity").GetProperty("userAssignedIdentities")[0].GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("identity").GetProperty("userAssignedIdentities")[0].GetProperty("clientId").ToString());
            Console.WriteLine(result.GetProperty("identity").GetProperty("userAssignedIdentities")[0].GetProperty("principalId").ToString());
            Console.WriteLine(result.GetProperty("targetNodeCommunicationMode").ToString());
            Console.WriteLine(result.GetProperty("currentNodeCommunicationMode").ToString());
            Console.WriteLine(result.GetProperty("upgradePolicy").GetProperty("mode").ToString());
            Console.WriteLine(result.GetProperty("upgradePolicy").GetProperty("automaticOSUpgradePolicy").GetProperty("disableAutomaticRollback").ToString());
            Console.WriteLine(result.GetProperty("upgradePolicy").GetProperty("automaticOSUpgradePolicy").GetProperty("enableAutomaticOSUpgrade").ToString());
            Console.WriteLine(result.GetProperty("upgradePolicy").GetProperty("automaticOSUpgradePolicy").GetProperty("useRollingUpgradePolicy").ToString());
            Console.WriteLine(result.GetProperty("upgradePolicy").GetProperty("automaticOSUpgradePolicy").GetProperty("osRollingUpgradeDeferral").ToString());
            Console.WriteLine(result.GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("enableCrossZoneUpgrade").ToString());
            Console.WriteLine(result.GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("maxBatchInstancePercent").ToString());
            Console.WriteLine(result.GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("maxUnhealthyInstancePercent").ToString());
            Console.WriteLine(result.GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("maxUnhealthyUpgradedInstancePercent").ToString());
            Console.WriteLine(result.GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("pauseTimeBetweenBatches").ToString());
            Console.WriteLine(result.GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("prioritizeUnhealthyInstances").ToString());
            Console.WriteLine(result.GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("rollbackFailedInstancesOnPolicyBreach").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetPool_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = await client.GetPoolAsync("<poolId>", 1234, DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), new string[] { "<select>" }, new string[] { "<expand>" }, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("url").ToString());
            Console.WriteLine(result.GetProperty("eTag").ToString());
            Console.WriteLine(result.GetProperty("lastModified").ToString());
            Console.WriteLine(result.GetProperty("creationTime").ToString());
            Console.WriteLine(result.GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("stateTransitionTime").ToString());
            Console.WriteLine(result.GetProperty("allocationState").ToString());
            Console.WriteLine(result.GetProperty("allocationStateTransitionTime").ToString());
            Console.WriteLine(result.GetProperty("vmSize").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("publisher").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("offer").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("sku").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("virtualMachineImageId").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("exactVersion").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("nodeAgentSKUId").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("windowsConfiguration").GetProperty("enableAutomaticUpdates").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("lun").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("caching").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("diskSizeGB").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("storageAccountType").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("licenseType").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerImageNames")[0].ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("password").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("registryServer").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("diskEncryptionConfiguration").GetProperty("targets")[0].ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("nodePlacementConfiguration").GetProperty("policy").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("publisher").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("typeHandlerVersion").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("autoUpgradeMinorVersion").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("enableAutomaticUpgrade").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("settings").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("protectedSettings").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("provisionAfterExtensions")[0].ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("ephemeralOSDiskSettings").GetProperty("placement").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("caching").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("managedDisk").GetProperty("storageAccountType").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("writeAcceleratorEnabled").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("securityProfile").GetProperty("encryptionAtHost").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("securityProfile").GetProperty("securityType").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("secureBootEnabled").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("vTpmEnabled").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("serviceArtifactReference").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("resizeTimeout").ToString());
            Console.WriteLine(result.GetProperty("resizeErrors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("resizeErrors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("resizeErrors")[0].GetProperty("values")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("resizeErrors")[0].GetProperty("values")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("resourceTags").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("currentDedicatedNodes").ToString());
            Console.WriteLine(result.GetProperty("currentLowPriorityNodes").ToString());
            Console.WriteLine(result.GetProperty("targetDedicatedNodes").ToString());
            Console.WriteLine(result.GetProperty("targetLowPriorityNodes").ToString());
            Console.WriteLine(result.GetProperty("enableAutoScale").ToString());
            Console.WriteLine(result.GetProperty("autoScaleFormula").ToString());
            Console.WriteLine(result.GetProperty("autoScaleEvaluationInterval").ToString());
            Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("timestamp").ToString());
            Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("results").ToString());
            Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("error").GetProperty("values")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("error").GetProperty("values")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("enableInterNodeCommunication").ToString());
            Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("subnetId").ToString());
            Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("dynamicVNetAssignmentScope").ToString());
            Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("protocol").ToString());
            Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("backendPort").ToString());
            Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("frontendPortRangeStart").ToString());
            Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("frontendPortRangeEnd").ToString());
            Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("priority").ToString());
            Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("access").ToString());
            Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("sourceAddressPrefix").ToString());
            Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("sourcePortRanges")[0].ToString());
            Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("publicIPAddressConfiguration").GetProperty("provision").ToString());
            Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("publicIPAddressConfiguration").GetProperty("ipAddressIds")[0].ToString());
            Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("enableAcceleratedNetworking").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("commandLine").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("containerRunOptions").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("imageName").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("password").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("registryServer").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("workingDirectory").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("autoStorageContainerName").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("storageContainerUrl").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("httpUrl").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("blobPrefix").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("filePath").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("fileMode").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("environmentSettings")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("environmentSettings")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("userIdentity").GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("scope").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("elevationLevel").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("maxTaskRetryCount").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("waitForSuccess").ToString());
            Console.WriteLine(result.GetProperty("applicationPackageReferences")[0].GetProperty("applicationId").ToString());
            Console.WriteLine(result.GetProperty("applicationPackageReferences")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("taskSlotsPerNode").ToString());
            Console.WriteLine(result.GetProperty("taskSchedulingPolicy").GetProperty("nodeFillType").ToString());
            Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("password").ToString());
            Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("elevationLevel").ToString());
            Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("uid").ToString());
            Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("gid").ToString());
            Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("sshPrivateKey").ToString());
            Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("windowsUserConfiguration").GetProperty("loginMode").ToString());
            Console.WriteLine(result.GetProperty("metadata")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("metadata")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("url").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("lastUpdateTime").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("usageStats").GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("usageStats").GetProperty("lastUpdateTime").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("usageStats").GetProperty("dedicatedCoreTime").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("lastUpdateTime").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("avgCPUPercentage").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("avgMemoryGiB").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("peakMemoryGiB").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("avgDiskGiB").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("peakDiskGiB").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("diskReadIOps").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("diskWriteIOps").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("diskReadGiB").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("diskWriteGiB").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("networkReadGiB").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("networkWriteGiB").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("accountName").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("containerName").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("accountKey").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("sasKey").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("blobfuseOptions").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("relativeMountPath").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("relativeMountPath").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("mountOptions").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("relativeMountPath").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("mountOptions").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("password").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("accountName").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("azureFileUrl").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("accountKey").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("relativeMountPath").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("mountOptions").ToString());
            Console.WriteLine(result.GetProperty("identity").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("identity").GetProperty("userAssignedIdentities")[0].GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("identity").GetProperty("userAssignedIdentities")[0].GetProperty("clientId").ToString());
            Console.WriteLine(result.GetProperty("identity").GetProperty("userAssignedIdentities")[0].GetProperty("principalId").ToString());
            Console.WriteLine(result.GetProperty("targetNodeCommunicationMode").ToString());
            Console.WriteLine(result.GetProperty("currentNodeCommunicationMode").ToString());
            Console.WriteLine(result.GetProperty("upgradePolicy").GetProperty("mode").ToString());
            Console.WriteLine(result.GetProperty("upgradePolicy").GetProperty("automaticOSUpgradePolicy").GetProperty("disableAutomaticRollback").ToString());
            Console.WriteLine(result.GetProperty("upgradePolicy").GetProperty("automaticOSUpgradePolicy").GetProperty("enableAutomaticOSUpgrade").ToString());
            Console.WriteLine(result.GetProperty("upgradePolicy").GetProperty("automaticOSUpgradePolicy").GetProperty("useRollingUpgradePolicy").ToString());
            Console.WriteLine(result.GetProperty("upgradePolicy").GetProperty("automaticOSUpgradePolicy").GetProperty("osRollingUpgradeDeferral").ToString());
            Console.WriteLine(result.GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("enableCrossZoneUpgrade").ToString());
            Console.WriteLine(result.GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("maxBatchInstancePercent").ToString());
            Console.WriteLine(result.GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("maxUnhealthyInstancePercent").ToString());
            Console.WriteLine(result.GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("maxUnhealthyUpgradedInstancePercent").ToString());
            Console.WriteLine(result.GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("pauseTimeBetweenBatches").ToString());
            Console.WriteLine(result.GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("prioritizeUnhealthyInstances").ToString());
            Console.WriteLine(result.GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("rollbackFailedInstancesOnPolicyBreach").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetPool_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response<BatchPool> response = client.GetPool("<poolId>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), select: new string[] { "<select>" }, expand: new string[] { "<expand>" }, requestConditions: null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetPool_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response<BatchPool> response = await client.GetPoolAsync("<poolId>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), select: new string[] { "<select>" }, expand: new string[] { "<expand>" }, requestConditions: null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_UpdatePool_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.UpdatePool("<poolId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_UpdatePool_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.UpdatePoolAsync("<poolId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_UpdatePool_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                startTask = new
                {
                    commandLine = "<commandLine>",
                    containerSettings = new
                    {
                        containerRunOptions = "<containerRunOptions>",
                        imageName = "<imageName>",
                        registry = new
                        {
                            username = "<username>",
                            password = "<password>",
                            registryServer = "<registryServer>",
                            identityReference = new
                            {
                                resourceId = "<resourceId>",
                            },
                        },
                        workingDirectory = "taskWorkingDirectory",
                    },
                    resourceFiles = new object[]
            {
new
{
autoStorageContainerName = "<autoStorageContainerName>",
storageContainerUrl = "<storageContainerUrl>",
httpUrl = "<httpUrl>",
blobPrefix = "<blobPrefix>",
filePath = "<filePath>",
fileMode = "<fileMode>",
}
            },
                    environmentSettings = new object[]
            {
new
{
name = "<name>",
value = "<value>",
}
            },
                    userIdentity = new
                    {
                        username = "<username>",
                        autoUser = new
                        {
                            scope = "task",
                            elevationLevel = "nonadmin",
                        },
                    },
                    maxTaskRetryCount = 1234,
                    waitForSuccess = true,
                },
                applicationPackageReferences = new object[]
            {
new
{
applicationId = "<applicationId>",
version = "<version>",
}
            },
                metadata = new object[]
            {
new
{
name = "<name>",
value = "<value>",
}
            },
                targetNodeCommunicationMode = "default",
            });
            Response response = client.UpdatePool("<poolId>", content, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), requestConditions: null);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_UpdatePool_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                startTask = new
                {
                    commandLine = "<commandLine>",
                    containerSettings = new
                    {
                        containerRunOptions = "<containerRunOptions>",
                        imageName = "<imageName>",
                        registry = new
                        {
                            username = "<username>",
                            password = "<password>",
                            registryServer = "<registryServer>",
                            identityReference = new
                            {
                                resourceId = "<resourceId>",
                            },
                        },
                        workingDirectory = "taskWorkingDirectory",
                    },
                    resourceFiles = new object[]
            {
new
{
autoStorageContainerName = "<autoStorageContainerName>",
storageContainerUrl = "<storageContainerUrl>",
httpUrl = "<httpUrl>",
blobPrefix = "<blobPrefix>",
filePath = "<filePath>",
fileMode = "<fileMode>",
}
            },
                    environmentSettings = new object[]
            {
new
{
name = "<name>",
value = "<value>",
}
            },
                    userIdentity = new
                    {
                        username = "<username>",
                        autoUser = new
                        {
                            scope = "task",
                            elevationLevel = "nonadmin",
                        },
                    },
                    maxTaskRetryCount = 1234,
                    waitForSuccess = true,
                },
                applicationPackageReferences = new object[]
            {
new
{
applicationId = "<applicationId>",
version = "<version>",
}
            },
                metadata = new object[]
            {
new
{
name = "<name>",
value = "<value>",
}
            },
                targetNodeCommunicationMode = "default",
            });
            Response response = await client.UpdatePoolAsync("<poolId>", content, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), requestConditions: null);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_DisablePoolAutoScale_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = client.DisablePoolAutoScale("<poolId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_DisablePoolAutoScale_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = await client.DisablePoolAutoScaleAsync("<poolId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_DisablePoolAutoScale_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = client.DisablePoolAutoScale("<poolId>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_DisablePoolAutoScale_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = await client.DisablePoolAutoScaleAsync("<poolId>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_EnablePoolAutoScale_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.EnablePoolAutoScale("<poolId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_EnablePoolAutoScale_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.EnablePoolAutoScaleAsync("<poolId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_EnablePoolAutoScale_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchPoolEnableAutoScaleContent content = new BatchPoolEnableAutoScaleContent();
            Response response = client.EnablePoolAutoScale("<poolId>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_EnablePoolAutoScale_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchPoolEnableAutoScaleContent content = new BatchPoolEnableAutoScaleContent();
            Response response = await client.EnablePoolAutoScaleAsync("<poolId>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_EnablePoolAutoScale_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                autoScaleFormula = "<autoScaleFormula>",
                autoScaleEvaluationInterval = "PT1H23M45S",
            });
            Response response = client.EnablePoolAutoScale("<poolId>", content, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), requestConditions: null);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_EnablePoolAutoScale_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                autoScaleFormula = "<autoScaleFormula>",
                autoScaleEvaluationInterval = "PT1H23M45S",
            });
            Response response = await client.EnablePoolAutoScaleAsync("<poolId>", content, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), requestConditions: null);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_EnablePoolAutoScale_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchPoolEnableAutoScaleContent content = new BatchPoolEnableAutoScaleContent
            {
                AutoScaleFormula = "<autoScaleFormula>",
                AutoScaleEvaluationInterval = XmlConvert.ToTimeSpan("PT1H23M45S"),
            };
            Response response = client.EnablePoolAutoScale("<poolId>", content, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), requestConditions: null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_EnablePoolAutoScale_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchPoolEnableAutoScaleContent content = new BatchPoolEnableAutoScaleContent
            {
                AutoScaleFormula = "<autoScaleFormula>",
                AutoScaleEvaluationInterval = XmlConvert.ToTimeSpan("PT1H23M45S"),
            };
            Response response = await client.EnablePoolAutoScaleAsync("<poolId>", content, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), requestConditions: null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_EvaluatePoolAutoScale_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                autoScaleFormula = "<autoScaleFormula>",
            });
            Response response = client.EvaluatePoolAutoScale("<poolId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("timestamp").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_EvaluatePoolAutoScale_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                autoScaleFormula = "<autoScaleFormula>",
            });
            Response response = await client.EvaluatePoolAutoScaleAsync("<poolId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("timestamp").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_EvaluatePoolAutoScale_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchPoolEvaluateAutoScaleContent content = new BatchPoolEvaluateAutoScaleContent("<autoScaleFormula>");
            Response<AutoScaleRun> response = client.EvaluatePoolAutoScale("<poolId>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_EvaluatePoolAutoScale_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchPoolEvaluateAutoScaleContent content = new BatchPoolEvaluateAutoScaleContent("<autoScaleFormula>");
            Response<AutoScaleRun> response = await client.EvaluatePoolAutoScaleAsync("<poolId>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_EvaluatePoolAutoScale_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                autoScaleFormula = "<autoScaleFormula>",
            });
            Response response = client.EvaluatePoolAutoScale("<poolId>", content, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("timestamp").ToString());
            Console.WriteLine(result.GetProperty("results").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("values")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("values")[0].GetProperty("value").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_EvaluatePoolAutoScale_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                autoScaleFormula = "<autoScaleFormula>",
            });
            Response response = await client.EvaluatePoolAutoScaleAsync("<poolId>", content, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("timestamp").ToString());
            Console.WriteLine(result.GetProperty("results").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("values")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("values")[0].GetProperty("value").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_EvaluatePoolAutoScale_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchPoolEvaluateAutoScaleContent content = new BatchPoolEvaluateAutoScaleContent("<autoScaleFormula>");
            Response<AutoScaleRun> response = client.EvaluatePoolAutoScale("<poolId>", content, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_EvaluatePoolAutoScale_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchPoolEvaluateAutoScaleContent content = new BatchPoolEvaluateAutoScaleContent("<autoScaleFormula>");
            Response<AutoScaleRun> response = await client.EvaluatePoolAutoScaleAsync("<poolId>", content, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_ResizePool_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.ResizePool("<poolId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_ResizePool_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.ResizePoolAsync("<poolId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_ResizePool_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchPoolResizeContent content = new BatchPoolResizeContent();
            Response response = client.ResizePool("<poolId>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_ResizePool_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchPoolResizeContent content = new BatchPoolResizeContent();
            Response response = await client.ResizePoolAsync("<poolId>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_ResizePool_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                targetDedicatedNodes = 1234,
                targetLowPriorityNodes = 1234,
                resizeTimeout = "PT1H23M45S",
                nodeDeallocationOption = "requeue",
            });
            Response response = client.ResizePool("<poolId>", content, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), requestConditions: null);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_ResizePool_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                targetDedicatedNodes = 1234,
                targetLowPriorityNodes = 1234,
                resizeTimeout = "PT1H23M45S",
                nodeDeallocationOption = "requeue",
            });
            Response response = await client.ResizePoolAsync("<poolId>", content, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), requestConditions: null);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_ResizePool_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchPoolResizeContent content = new BatchPoolResizeContent
            {
                TargetDedicatedNodes = 1234,
                TargetLowPriorityNodes = 1234,
                ResizeTimeout = XmlConvert.ToTimeSpan("PT1H23M45S"),
                NodeDeallocationOption = BatchNodeDeallocationOption.Requeue,
            };
            Response response = client.ResizePool("<poolId>", content, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), requestConditions: null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_ResizePool_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchPoolResizeContent content = new BatchPoolResizeContent
            {
                TargetDedicatedNodes = 1234,
                TargetLowPriorityNodes = 1234,
                ResizeTimeout = XmlConvert.ToTimeSpan("PT1H23M45S"),
                NodeDeallocationOption = BatchNodeDeallocationOption.Requeue,
            };
            Response response = await client.ResizePoolAsync("<poolId>", content, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), requestConditions: null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_StopPoolResize_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = client.StopPoolResize("<poolId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_StopPoolResize_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = await client.StopPoolResizeAsync("<poolId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_StopPoolResize_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = client.StopPoolResize("<poolId>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), requestConditions: null);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_StopPoolResize_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = await client.StopPoolResizeAsync("<poolId>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), requestConditions: null);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_ReplacePoolProperties_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                applicationPackageReferences = new object[]
            {
new
{
applicationId = "<applicationId>",
}
            },
                metadata = new object[]
            {
new
{
name = "<name>",
value = "<value>",
}
            },
            });
            Response response = client.ReplacePoolProperties("<poolId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_ReplacePoolProperties_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                applicationPackageReferences = new object[]
            {
new
{
applicationId = "<applicationId>",
}
            },
                metadata = new object[]
            {
new
{
name = "<name>",
value = "<value>",
}
            },
            });
            Response response = await client.ReplacePoolPropertiesAsync("<poolId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_ReplacePoolProperties_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchPoolReplaceContent pool = new BatchPoolReplaceContent(new BatchApplicationPackageReference[]
            {
new BatchApplicationPackageReference("<applicationId>")
            }, new MetadataItem[]
            {
new MetadataItem("<name>", "<value>")
            });
            Response response = client.ReplacePoolProperties("<poolId>", pool);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_ReplacePoolProperties_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchPoolReplaceContent pool = new BatchPoolReplaceContent(new BatchApplicationPackageReference[]
            {
new BatchApplicationPackageReference("<applicationId>")
            }, new MetadataItem[]
            {
new MetadataItem("<name>", "<value>")
            });
            Response response = await client.ReplacePoolPropertiesAsync("<poolId>", pool);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_ReplacePoolProperties_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                startTask = new
                {
                    commandLine = "<commandLine>",
                    containerSettings = new
                    {
                        containerRunOptions = "<containerRunOptions>",
                        imageName = "<imageName>",
                        registry = new
                        {
                            username = "<username>",
                            password = "<password>",
                            registryServer = "<registryServer>",
                            identityReference = new
                            {
                                resourceId = "<resourceId>",
                            },
                        },
                        workingDirectory = "taskWorkingDirectory",
                    },
                    resourceFiles = new object[]
            {
new
{
autoStorageContainerName = "<autoStorageContainerName>",
storageContainerUrl = "<storageContainerUrl>",
httpUrl = "<httpUrl>",
blobPrefix = "<blobPrefix>",
filePath = "<filePath>",
fileMode = "<fileMode>",
}
            },
                    environmentSettings = new object[]
            {
new
{
name = "<name>",
value = "<value>",
}
            },
                    userIdentity = new
                    {
                        username = "<username>",
                        autoUser = new
                        {
                            scope = "task",
                            elevationLevel = "nonadmin",
                        },
                    },
                    maxTaskRetryCount = 1234,
                    waitForSuccess = true,
                },
                applicationPackageReferences = new object[]
            {
new
{
applicationId = "<applicationId>",
version = "<version>",
}
            },
                metadata = new object[]
            {
new
{
name = "<name>",
value = "<value>",
}
            },
                targetNodeCommunicationMode = "default",
            });
            Response response = client.ReplacePoolProperties("<poolId>", content, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_ReplacePoolProperties_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                startTask = new
                {
                    commandLine = "<commandLine>",
                    containerSettings = new
                    {
                        containerRunOptions = "<containerRunOptions>",
                        imageName = "<imageName>",
                        registry = new
                        {
                            username = "<username>",
                            password = "<password>",
                            registryServer = "<registryServer>",
                            identityReference = new
                            {
                                resourceId = "<resourceId>",
                            },
                        },
                        workingDirectory = "taskWorkingDirectory",
                    },
                    resourceFiles = new object[]
            {
new
{
autoStorageContainerName = "<autoStorageContainerName>",
storageContainerUrl = "<storageContainerUrl>",
httpUrl = "<httpUrl>",
blobPrefix = "<blobPrefix>",
filePath = "<filePath>",
fileMode = "<fileMode>",
}
            },
                    environmentSettings = new object[]
            {
new
{
name = "<name>",
value = "<value>",
}
            },
                    userIdentity = new
                    {
                        username = "<username>",
                        autoUser = new
                        {
                            scope = "task",
                            elevationLevel = "nonadmin",
                        },
                    },
                    maxTaskRetryCount = 1234,
                    waitForSuccess = true,
                },
                applicationPackageReferences = new object[]
            {
new
{
applicationId = "<applicationId>",
version = "<version>",
}
            },
                metadata = new object[]
            {
new
{
name = "<name>",
value = "<value>",
}
            },
                targetNodeCommunicationMode = "default",
            });
            Response response = await client.ReplacePoolPropertiesAsync("<poolId>", content, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_ReplacePoolProperties_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchPoolReplaceContent pool = new BatchPoolReplaceContent(new BatchApplicationPackageReference[]
            {
new BatchApplicationPackageReference("<applicationId>")
{
Version = "<version>",
}
            }, new MetadataItem[]
            {
new MetadataItem("<name>", "<value>")
            })
            {
                StartTask = new BatchStartTask("<commandLine>")
                {
                    ContainerSettings = new BatchTaskContainerSettings("<imageName>")
                    {
                        ContainerRunOptions = "<containerRunOptions>",
                        Registry = new ContainerRegistryReference
                        {
                            Username = "<username>",
                            Password = "<password>",
                            RegistryServer = "<registryServer>",
                            IdentityReference = new BatchNodeIdentityReference
                            {
                                ResourceId = "<resourceId>",
                            },
                        },
                        WorkingDirectory = ContainerWorkingDirectory.TaskWorkingDirectory,
                    },
                    ResourceFiles = {new ResourceFile
{
AutoStorageContainerName = "<autoStorageContainerName>",
StorageContainerUrl = "<storageContainerUrl>",
HttpUrl = "<httpUrl>",
BlobPrefix = "<blobPrefix>",
FilePath = "<filePath>",
FileMode = "<fileMode>",
IdentityReference = default,
}},
                    EnvironmentSettings = {new EnvironmentSetting("<name>")
{
Value = "<value>",
}},
                    UserIdentity = new UserIdentity
                    {
                        Username = "<username>",
                        AutoUser = new AutoUserSpecification
                        {
                            Scope = AutoUserScope.Task,
                            ElevationLevel = ElevationLevel.NonAdmin,
                        },
                    },
                    MaxTaskRetryCount = 1234,
                    WaitForSuccess = true,
                },
                TargetNodeCommunicationMode = BatchNodeCommunicationMode.Default,
            };
            Response response = client.ReplacePoolProperties("<poolId>", pool, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_ReplacePoolProperties_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchPoolReplaceContent pool = new BatchPoolReplaceContent(new BatchApplicationPackageReference[]
            {
new BatchApplicationPackageReference("<applicationId>")
{
Version = "<version>",
}
            }, new MetadataItem[]
            {
new MetadataItem("<name>", "<value>")
            })
            {
                StartTask = new BatchStartTask("<commandLine>")
                {
                    ContainerSettings = new BatchTaskContainerSettings("<imageName>")
                    {
                        ContainerRunOptions = "<containerRunOptions>",
                        Registry = new ContainerRegistryReference
                        {
                            Username = "<username>",
                            Password = "<password>",
                            RegistryServer = "<registryServer>",
                            IdentityReference = new BatchNodeIdentityReference
                            {
                                ResourceId = "<resourceId>",
                            },
                        },
                        WorkingDirectory = ContainerWorkingDirectory.TaskWorkingDirectory,
                    },
                    ResourceFiles = {new ResourceFile
{
AutoStorageContainerName = "<autoStorageContainerName>",
StorageContainerUrl = "<storageContainerUrl>",
HttpUrl = "<httpUrl>",
BlobPrefix = "<blobPrefix>",
FilePath = "<filePath>",
FileMode = "<fileMode>",
IdentityReference = default,
}},
                    EnvironmentSettings = {new EnvironmentSetting("<name>")
{
Value = "<value>",
}},
                    UserIdentity = new UserIdentity
                    {
                        Username = "<username>",
                        AutoUser = new AutoUserSpecification
                        {
                            Scope = AutoUserScope.Task,
                            ElevationLevel = ElevationLevel.NonAdmin,
                        },
                    },
                    MaxTaskRetryCount = 1234,
                    WaitForSuccess = true,
                },
                TargetNodeCommunicationMode = BatchNodeCommunicationMode.Default,
            };
            Response response = await client.ReplacePoolPropertiesAsync("<poolId>", pool, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_RemoveNodes_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                nodeList = new object[]
            {
"<nodeList>"
            },
            });
            Response response = client.RemoveNodes("<poolId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_RemoveNodes_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                nodeList = new object[]
            {
"<nodeList>"
            },
            });
            Response response = await client.RemoveNodesAsync("<poolId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_RemoveNodes_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchNodeRemoveContent content = new BatchNodeRemoveContent(new string[] { "<nodeList>" });
            Response response = client.RemoveNodes("<poolId>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_RemoveNodes_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchNodeRemoveContent content = new BatchNodeRemoveContent(new string[] { "<nodeList>" });
            Response response = await client.RemoveNodesAsync("<poolId>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_RemoveNodes_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                nodeList = new object[]
            {
"<nodeList>"
            },
                resizeTimeout = "PT1H23M45S",
                nodeDeallocationOption = "requeue",
            });
            Response response = client.RemoveNodes("<poolId>", content, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), requestConditions: null);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_RemoveNodes_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                nodeList = new object[]
            {
"<nodeList>"
            },
                resizeTimeout = "PT1H23M45S",
                nodeDeallocationOption = "requeue",
            });
            Response response = await client.RemoveNodesAsync("<poolId>", content, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), requestConditions: null);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_RemoveNodes_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchNodeRemoveContent content = new BatchNodeRemoveContent(new string[] { "<nodeList>" })
            {
                ResizeTimeout = XmlConvert.ToTimeSpan("PT1H23M45S"),
                NodeDeallocationOption = BatchNodeDeallocationOption.Requeue,
            };
            Response response = client.RemoveNodes("<poolId>", content, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), requestConditions: null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_RemoveNodes_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchNodeRemoveContent content = new BatchNodeRemoveContent(new string[] { "<nodeList>" })
            {
                ResizeTimeout = XmlConvert.ToTimeSpan("PT1H23M45S"),
                NodeDeallocationOption = BatchNodeDeallocationOption.Requeue,
            };
            Response response = await client.RemoveNodesAsync("<poolId>", content, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), requestConditions: null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_DeleteJob_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = client.DeleteJob("<jobId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_DeleteJob_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = await client.DeleteJobAsync("<jobId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_DeleteJob_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = client.DeleteJob("<jobId>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), requestConditions: null);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_DeleteJob_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = await client.DeleteJobAsync("<jobId>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), requestConditions: null);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetJob_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = client.GetJob("<jobId>", null, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("poolInfo").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetJob_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = await client.GetJobAsync("<jobId>", null, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("poolInfo").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetJob_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response<BatchJob> response = client.GetJob("<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetJob_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response<BatchJob> response = await client.GetJobAsync("<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetJob_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = client.GetJob("<jobId>", 1234, DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), new string[] { "<select>" }, new string[] { "<expand>" }, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("usesTaskDependencies").ToString());
            Console.WriteLine(result.GetProperty("url").ToString());
            Console.WriteLine(result.GetProperty("eTag").ToString());
            Console.WriteLine(result.GetProperty("lastModified").ToString());
            Console.WriteLine(result.GetProperty("creationTime").ToString());
            Console.WriteLine(result.GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("stateTransitionTime").ToString());
            Console.WriteLine(result.GetProperty("previousState").ToString());
            Console.WriteLine(result.GetProperty("previousStateTransitionTime").ToString());
            Console.WriteLine(result.GetProperty("priority").ToString());
            Console.WriteLine(result.GetProperty("allowTaskPreemption").ToString());
            Console.WriteLine(result.GetProperty("maxParallelTasks").ToString());
            Console.WriteLine(result.GetProperty("constraints").GetProperty("maxWallClockTime").ToString());
            Console.WriteLine(result.GetProperty("constraints").GetProperty("maxTaskRetryCount").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("commandLine").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("containerRunOptions").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("imageName").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("password").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("registryServer").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("workingDirectory").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("autoStorageContainerName").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("storageContainerUrl").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("httpUrl").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("blobPrefix").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("filePath").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("fileMode").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("filePattern").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("path").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("containerUrl").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("uploadHeaders")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("uploadHeaders")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("uploadOptions").GetProperty("uploadCondition").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("environmentSettings")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("environmentSettings")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("constraints").GetProperty("maxWallClockTime").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("constraints").GetProperty("retentionTime").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("constraints").GetProperty("maxTaskRetryCount").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("requiredSlots").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("killJobOnCompletion").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("userIdentity").GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("scope").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("elevationLevel").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("runExclusive").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("applicationPackageReferences")[0].GetProperty("applicationId").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("applicationPackageReferences")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("authenticationTokenSettings").GetProperty("access")[0].ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("allowLowPriorityNode").ToString());
            Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("commandLine").ToString());
            Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("containerRunOptions").ToString());
            Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("imageName").ToString());
            Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("password").ToString());
            Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("registryServer").ToString());
            Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("workingDirectory").ToString());
            Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("autoStorageContainerName").ToString());
            Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("storageContainerUrl").ToString());
            Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("httpUrl").ToString());
            Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("blobPrefix").ToString());
            Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("filePath").ToString());
            Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("fileMode").ToString());
            Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("environmentSettings")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("environmentSettings")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("constraints").GetProperty("maxWallClockTime").ToString());
            Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("constraints").GetProperty("retentionTime").ToString());
            Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("constraints").GetProperty("maxTaskRetryCount").ToString());
            Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("waitForSuccess").ToString());
            Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("userIdentity").GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("scope").ToString());
            Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("elevationLevel").ToString());
            Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("rerunOnNodeRebootAfterSuccess").ToString());
            Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("commandLine").ToString());
            Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("containerRunOptions").ToString());
            Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("imageName").ToString());
            Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("password").ToString());
            Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("registryServer").ToString());
            Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("workingDirectory").ToString());
            Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("autoStorageContainerName").ToString());
            Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("storageContainerUrl").ToString());
            Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("httpUrl").ToString());
            Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("blobPrefix").ToString());
            Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("filePath").ToString());
            Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("fileMode").ToString());
            Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("environmentSettings")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("environmentSettings")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("maxWallClockTime").ToString());
            Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("retentionTime").ToString());
            Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("userIdentity").GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("scope").ToString());
            Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("elevationLevel").ToString());
            Console.WriteLine(result.GetProperty("commonEnvironmentSettings")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("commonEnvironmentSettings")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("poolId").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("autoPoolIdPrefix").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("poolLifetimeOption").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("keepAlive").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("vmSize").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("publisher").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("offer").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("sku").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("virtualMachineImageId").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("exactVersion").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("nodeAgentSKUId").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("windowsConfiguration").GetProperty("enableAutomaticUpdates").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("lun").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("caching").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("diskSizeGB").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("storageAccountType").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("licenseType").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerImageNames")[0].ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("password").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("registryServer").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("diskEncryptionConfiguration").GetProperty("targets")[0].ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("nodePlacementConfiguration").GetProperty("policy").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("publisher").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("typeHandlerVersion").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("autoUpgradeMinorVersion").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("enableAutomaticUpgrade").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("settings").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("protectedSettings").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("provisionAfterExtensions")[0].ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("ephemeralOSDiskSettings").GetProperty("placement").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("caching").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("managedDisk").GetProperty("storageAccountType").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("writeAcceleratorEnabled").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("securityProfile").GetProperty("encryptionAtHost").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("securityProfile").GetProperty("securityType").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("secureBootEnabled").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("vTpmEnabled").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("serviceArtifactReference").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("taskSlotsPerNode").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("taskSchedulingPolicy").GetProperty("nodeFillType").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("resizeTimeout").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("resourceTags").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("targetDedicatedNodes").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("targetLowPriorityNodes").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("enableAutoScale").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("autoScaleFormula").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("autoScaleEvaluationInterval").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("enableInterNodeCommunication").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("subnetId").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("dynamicVNetAssignmentScope").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("protocol").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("backendPort").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("frontendPortRangeStart").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("frontendPortRangeEnd").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("priority").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("access").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("sourceAddressPrefix").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("sourcePortRanges")[0].ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("publicIPAddressConfiguration").GetProperty("provision").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("publicIPAddressConfiguration").GetProperty("ipAddressIds")[0].ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("enableAcceleratedNetworking").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("commandLine").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("containerRunOptions").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("imageName").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("password").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("registryServer").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("workingDirectory").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("autoStorageContainerName").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("storageContainerUrl").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("httpUrl").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("blobPrefix").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("filePath").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("fileMode").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("environmentSettings")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("environmentSettings")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("userIdentity").GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("scope").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("elevationLevel").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("maxTaskRetryCount").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("waitForSuccess").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("applicationPackageReferences")[0].GetProperty("applicationId").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("applicationPackageReferences")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("password").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("elevationLevel").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("uid").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("gid").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("sshPrivateKey").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("windowsUserConfiguration").GetProperty("loginMode").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("metadata")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("metadata")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("accountName").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("containerName").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("accountKey").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("sasKey").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("blobfuseOptions").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("relativeMountPath").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("relativeMountPath").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("mountOptions").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("relativeMountPath").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("mountOptions").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("password").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("accountName").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("azureFileUrl").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("accountKey").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("relativeMountPath").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("mountOptions").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("targetNodeCommunicationMode").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("mode").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("automaticOSUpgradePolicy").GetProperty("disableAutomaticRollback").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("automaticOSUpgradePolicy").GetProperty("enableAutomaticOSUpgrade").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("automaticOSUpgradePolicy").GetProperty("useRollingUpgradePolicy").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("automaticOSUpgradePolicy").GetProperty("osRollingUpgradeDeferral").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("enableCrossZoneUpgrade").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("maxBatchInstancePercent").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("maxUnhealthyInstancePercent").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("maxUnhealthyUpgradedInstancePercent").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("pauseTimeBetweenBatches").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("prioritizeUnhealthyInstances").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("rollbackFailedInstancesOnPolicyBreach").ToString());
            Console.WriteLine(result.GetProperty("onAllTasksComplete").ToString());
            Console.WriteLine(result.GetProperty("onTaskFailure").ToString());
            Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("subnetId").ToString());
            Console.WriteLine(result.GetProperty("metadata")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("metadata")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("executionInfo").GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("executionInfo").GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("executionInfo").GetProperty("poolId").ToString());
            Console.WriteLine(result.GetProperty("executionInfo").GetProperty("schedulingError").GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("executionInfo").GetProperty("schedulingError").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("executionInfo").GetProperty("schedulingError").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("executionInfo").GetProperty("schedulingError").GetProperty("details")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("executionInfo").GetProperty("schedulingError").GetProperty("details")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("executionInfo").GetProperty("terminateReason").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("url").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("lastUpdateTime").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("userCPUTime").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("kernelCPUTime").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("wallClockTime").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("readIOps").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("writeIOps").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("readIOGiB").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("writeIOGiB").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("numSucceededTasks").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("numFailedTasks").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("numTaskRetries").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("waitTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetJob_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = await client.GetJobAsync("<jobId>", 1234, DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), new string[] { "<select>" }, new string[] { "<expand>" }, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("usesTaskDependencies").ToString());
            Console.WriteLine(result.GetProperty("url").ToString());
            Console.WriteLine(result.GetProperty("eTag").ToString());
            Console.WriteLine(result.GetProperty("lastModified").ToString());
            Console.WriteLine(result.GetProperty("creationTime").ToString());
            Console.WriteLine(result.GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("stateTransitionTime").ToString());
            Console.WriteLine(result.GetProperty("previousState").ToString());
            Console.WriteLine(result.GetProperty("previousStateTransitionTime").ToString());
            Console.WriteLine(result.GetProperty("priority").ToString());
            Console.WriteLine(result.GetProperty("allowTaskPreemption").ToString());
            Console.WriteLine(result.GetProperty("maxParallelTasks").ToString());
            Console.WriteLine(result.GetProperty("constraints").GetProperty("maxWallClockTime").ToString());
            Console.WriteLine(result.GetProperty("constraints").GetProperty("maxTaskRetryCount").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("commandLine").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("containerRunOptions").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("imageName").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("password").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("registryServer").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("workingDirectory").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("autoStorageContainerName").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("storageContainerUrl").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("httpUrl").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("blobPrefix").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("filePath").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("fileMode").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("filePattern").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("path").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("containerUrl").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("uploadHeaders")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("uploadHeaders")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("uploadOptions").GetProperty("uploadCondition").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("environmentSettings")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("environmentSettings")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("constraints").GetProperty("maxWallClockTime").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("constraints").GetProperty("retentionTime").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("constraints").GetProperty("maxTaskRetryCount").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("requiredSlots").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("killJobOnCompletion").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("userIdentity").GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("scope").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("elevationLevel").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("runExclusive").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("applicationPackageReferences")[0].GetProperty("applicationId").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("applicationPackageReferences")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("authenticationTokenSettings").GetProperty("access")[0].ToString());
            Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("allowLowPriorityNode").ToString());
            Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("commandLine").ToString());
            Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("containerRunOptions").ToString());
            Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("imageName").ToString());
            Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("password").ToString());
            Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("registryServer").ToString());
            Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("workingDirectory").ToString());
            Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("autoStorageContainerName").ToString());
            Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("storageContainerUrl").ToString());
            Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("httpUrl").ToString());
            Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("blobPrefix").ToString());
            Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("filePath").ToString());
            Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("fileMode").ToString());
            Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("environmentSettings")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("environmentSettings")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("constraints").GetProperty("maxWallClockTime").ToString());
            Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("constraints").GetProperty("retentionTime").ToString());
            Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("constraints").GetProperty("maxTaskRetryCount").ToString());
            Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("waitForSuccess").ToString());
            Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("userIdentity").GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("scope").ToString());
            Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("elevationLevel").ToString());
            Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("rerunOnNodeRebootAfterSuccess").ToString());
            Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("commandLine").ToString());
            Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("containerRunOptions").ToString());
            Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("imageName").ToString());
            Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("password").ToString());
            Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("registryServer").ToString());
            Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("workingDirectory").ToString());
            Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("autoStorageContainerName").ToString());
            Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("storageContainerUrl").ToString());
            Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("httpUrl").ToString());
            Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("blobPrefix").ToString());
            Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("filePath").ToString());
            Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("fileMode").ToString());
            Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("environmentSettings")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("environmentSettings")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("maxWallClockTime").ToString());
            Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("retentionTime").ToString());
            Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("userIdentity").GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("scope").ToString());
            Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("elevationLevel").ToString());
            Console.WriteLine(result.GetProperty("commonEnvironmentSettings")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("commonEnvironmentSettings")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("poolId").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("autoPoolIdPrefix").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("poolLifetimeOption").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("keepAlive").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("vmSize").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("publisher").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("offer").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("sku").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("virtualMachineImageId").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("exactVersion").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("nodeAgentSKUId").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("windowsConfiguration").GetProperty("enableAutomaticUpdates").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("lun").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("caching").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("diskSizeGB").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("storageAccountType").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("licenseType").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerImageNames")[0].ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("password").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("registryServer").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("diskEncryptionConfiguration").GetProperty("targets")[0].ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("nodePlacementConfiguration").GetProperty("policy").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("publisher").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("typeHandlerVersion").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("autoUpgradeMinorVersion").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("enableAutomaticUpgrade").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("settings").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("protectedSettings").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("provisionAfterExtensions")[0].ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("ephemeralOSDiskSettings").GetProperty("placement").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("caching").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("managedDisk").GetProperty("storageAccountType").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("writeAcceleratorEnabled").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("securityProfile").GetProperty("encryptionAtHost").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("securityProfile").GetProperty("securityType").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("secureBootEnabled").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("vTpmEnabled").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("serviceArtifactReference").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("taskSlotsPerNode").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("taskSchedulingPolicy").GetProperty("nodeFillType").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("resizeTimeout").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("resourceTags").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("targetDedicatedNodes").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("targetLowPriorityNodes").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("enableAutoScale").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("autoScaleFormula").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("autoScaleEvaluationInterval").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("enableInterNodeCommunication").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("subnetId").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("dynamicVNetAssignmentScope").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("protocol").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("backendPort").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("frontendPortRangeStart").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("frontendPortRangeEnd").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("priority").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("access").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("sourceAddressPrefix").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("sourcePortRanges")[0].ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("publicIPAddressConfiguration").GetProperty("provision").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("publicIPAddressConfiguration").GetProperty("ipAddressIds")[0].ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("enableAcceleratedNetworking").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("commandLine").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("containerRunOptions").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("imageName").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("password").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("registryServer").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("workingDirectory").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("autoStorageContainerName").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("storageContainerUrl").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("httpUrl").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("blobPrefix").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("filePath").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("fileMode").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("environmentSettings")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("environmentSettings")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("userIdentity").GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("scope").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("elevationLevel").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("maxTaskRetryCount").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("waitForSuccess").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("applicationPackageReferences")[0].GetProperty("applicationId").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("applicationPackageReferences")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("password").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("elevationLevel").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("uid").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("gid").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("sshPrivateKey").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("windowsUserConfiguration").GetProperty("loginMode").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("metadata")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("metadata")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("accountName").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("containerName").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("accountKey").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("sasKey").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("blobfuseOptions").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("relativeMountPath").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("relativeMountPath").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("mountOptions").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("relativeMountPath").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("mountOptions").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("password").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("accountName").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("azureFileUrl").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("accountKey").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("relativeMountPath").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("mountOptions").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("targetNodeCommunicationMode").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("mode").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("automaticOSUpgradePolicy").GetProperty("disableAutomaticRollback").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("automaticOSUpgradePolicy").GetProperty("enableAutomaticOSUpgrade").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("automaticOSUpgradePolicy").GetProperty("useRollingUpgradePolicy").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("automaticOSUpgradePolicy").GetProperty("osRollingUpgradeDeferral").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("enableCrossZoneUpgrade").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("maxBatchInstancePercent").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("maxUnhealthyInstancePercent").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("maxUnhealthyUpgradedInstancePercent").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("pauseTimeBetweenBatches").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("prioritizeUnhealthyInstances").ToString());
            Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("rollbackFailedInstancesOnPolicyBreach").ToString());
            Console.WriteLine(result.GetProperty("onAllTasksComplete").ToString());
            Console.WriteLine(result.GetProperty("onTaskFailure").ToString());
            Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("subnetId").ToString());
            Console.WriteLine(result.GetProperty("metadata")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("metadata")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("executionInfo").GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("executionInfo").GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("executionInfo").GetProperty("poolId").ToString());
            Console.WriteLine(result.GetProperty("executionInfo").GetProperty("schedulingError").GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("executionInfo").GetProperty("schedulingError").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("executionInfo").GetProperty("schedulingError").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("executionInfo").GetProperty("schedulingError").GetProperty("details")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("executionInfo").GetProperty("schedulingError").GetProperty("details")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("executionInfo").GetProperty("terminateReason").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("url").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("lastUpdateTime").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("userCPUTime").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("kernelCPUTime").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("wallClockTime").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("readIOps").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("writeIOps").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("readIOGiB").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("writeIOGiB").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("numSucceededTasks").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("numFailedTasks").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("numTaskRetries").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("waitTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetJob_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response<BatchJob> response = client.GetJob("<jobId>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), select: new string[] { "<select>" }, expand: new string[] { "<expand>" }, requestConditions: null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetJob_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response<BatchJob> response = await client.GetJobAsync("<jobId>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), select: new string[] { "<select>" }, expand: new string[] { "<expand>" }, requestConditions: null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_UpdateJob_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.UpdateJob("<jobId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_UpdateJob_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.UpdateJobAsync("<jobId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_UpdateJob_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                priority = 1234,
                allowTaskPreemption = true,
                maxParallelTasks = 1234,
                constraints = new
                {
                    maxWallClockTime = "PT1H23M45S",
                    maxTaskRetryCount = 1234,
                },
                poolInfo = new
                {
                    poolId = "<poolId>",
                    autoPoolSpecification = new
                    {
                        autoPoolIdPrefix = "<autoPoolIdPrefix>",
                        poolLifetimeOption = "jobschedule",
                        keepAlive = true,
                        pool = new
                        {
                            displayName = "<displayName>",
                            vmSize = "<vmSize>",
                            virtualMachineConfiguration = new
                            {
                                imageReference = new
                                {
                                    publisher = "<publisher>",
                                    offer = "<offer>",
                                    sku = "<sku>",
                                    version = "<version>",
                                    virtualMachineImageId = "<virtualMachineImageId>",
                                },
                                nodeAgentSKUId = "<nodeAgentSKUId>",
                                windowsConfiguration = new
                                {
                                    enableAutomaticUpdates = true,
                                },
                                dataDisks = new object[]
            {
new
{
lun = 1234,
caching = "none",
diskSizeGB = 1234,
storageAccountType = "standard_lrs",
}
            },
                                licenseType = "<licenseType>",
                                containerConfiguration = new
                                {
                                    type = "dockerCompatible",
                                    containerImageNames = new object[]
            {
"<containerImageNames>"
            },
                                    containerRegistries = new object[]
            {
new
{
username = "<username>",
password = "<password>",
registryServer = "<registryServer>",
identityReference = new
{
resourceId = "<resourceId>",
},
}
            },
                                },
                                diskEncryptionConfiguration = new
                                {
                                    targets = new object[]
            {
"osdisk"
            },
                                },
                                nodePlacementConfiguration = new
                                {
                                    policy = "regional",
                                },
                                extensions = new object[]
            {
new
{
name = "<name>",
publisher = "<publisher>",
type = "<type>",
typeHandlerVersion = "<typeHandlerVersion>",
autoUpgradeMinorVersion = true,
enableAutomaticUpgrade = true,
settings = new
{
key = "<settings>",
},
protectedSettings = new
{
key = "<protectedSettings>",
},
provisionAfterExtensions = new object[]
{
"<provisionAfterExtensions>"
},
}
            },
                                osDisk = new
                                {
                                    ephemeralOSDiskSettings = new
                                    {
                                        placement = "cachedisk",
                                    },
                                    caching = "none",
                                    diskSizeGB = 1234,
                                    managedDisk = new
                                    {
                                        storageAccountType = "standard_lrs",
                                    },
                                    writeAcceleratorEnabled = true,
                                },
                                securityProfile = new
                                {
                                    encryptionAtHost = true,
                                    securityType = "trustedLaunch",
                                    uefiSettings = new
                                    {
                                        secureBootEnabled = true,
                                        vTpmEnabled = true,
                                    },
                                },
                                serviceArtifactReference = new
                                {
                                    id = "<id>",
                                },
                            },
                            taskSlotsPerNode = 1234,
                            taskSchedulingPolicy = new
                            {
                                nodeFillType = "spread",
                            },
                            resizeTimeout = "PT1H23M45S",
                            resourceTags = "<resourceTags>",
                            targetDedicatedNodes = 1234,
                            targetLowPriorityNodes = 1234,
                            enableAutoScale = true,
                            autoScaleFormula = "<autoScaleFormula>",
                            autoScaleEvaluationInterval = "PT1H23M45S",
                            enableInterNodeCommunication = true,
                            networkConfiguration = new
                            {
                                subnetId = "<subnetId>",
                                dynamicVNetAssignmentScope = "none",
                                endpointConfiguration = new
                                {
                                    inboundNATPools = new object[]
            {
new
{
name = "<name>",
protocol = "tcp",
backendPort = 1234,
frontendPortRangeStart = 1234,
frontendPortRangeEnd = 1234,
networkSecurityGroupRules = new object[]
{
new
{
priority = 1234,
access = "allow",
sourceAddressPrefix = "<sourceAddressPrefix>",
sourcePortRanges = new object[]
{
"<sourcePortRanges>"
},
}
},
}
            },
                                },
                                publicIPAddressConfiguration = new
                                {
                                    provision = "batchmanaged",
                                    ipAddressIds = new object[]
            {
"<ipAddressIds>"
            },
                                },
                                enableAcceleratedNetworking = true,
                            },
                            startTask = new
                            {
                                commandLine = "<commandLine>",
                                containerSettings = new
                                {
                                    containerRunOptions = "<containerRunOptions>",
                                    imageName = "<imageName>",
                                    workingDirectory = "taskWorkingDirectory",
                                },
                                resourceFiles = new object[]
            {
new
{
autoStorageContainerName = "<autoStorageContainerName>",
storageContainerUrl = "<storageContainerUrl>",
httpUrl = "<httpUrl>",
blobPrefix = "<blobPrefix>",
filePath = "<filePath>",
fileMode = "<fileMode>",
}
            },
                                environmentSettings = new object[]
            {
new
{
name = "<name>",
value = "<value>",
}
            },
                                userIdentity = new
                                {
                                    username = "<username>",
                                    autoUser = new
                                    {
                                        scope = "task",
                                        elevationLevel = "nonadmin",
                                    },
                                },
                                maxTaskRetryCount = 1234,
                                waitForSuccess = true,
                            },
                            applicationPackageReferences = new object[]
            {
new
{
applicationId = "<applicationId>",
version = "<version>",
}
            },
                            userAccounts = new object[]
            {
new
{
name = "<name>",
password = "<password>",
elevationLevel = "nonadmin",
linuxUserConfiguration = new
{
uid = 1234,
gid = 1234,
sshPrivateKey = "<sshPrivateKey>",
},
windowsUserConfiguration = new
{
loginMode = "batch",
},
}
            },
                            metadata = new object[]
            {
new
{
name = "<name>",
value = "<value>",
}
            },
                            mountConfiguration = new object[]
            {
new
{
azureBlobFileSystemConfiguration = new
{
accountName = "<accountName>",
containerName = "<containerName>",
accountKey = "<accountKey>",
sasKey = "<sasKey>",
blobfuseOptions = "<blobfuseOptions>",
relativeMountPath = "<relativeMountPath>",
},
nfsMountConfiguration = new
{
source = "<source>",
relativeMountPath = "<relativeMountPath>",
mountOptions = "<mountOptions>",
},
cifsMountConfiguration = new
{
username = "<username>",
source = "<source>",
relativeMountPath = "<relativeMountPath>",
mountOptions = "<mountOptions>",
password = "<password>",
},
azureFileShareConfiguration = new
{
accountName = "<accountName>",
azureFileUrl = "<azureFileUrl>",
accountKey = "<accountKey>",
relativeMountPath = "<relativeMountPath>",
mountOptions = "<mountOptions>",
},
}
            },
                            targetNodeCommunicationMode = "default",
                            upgradePolicy = new
                            {
                                mode = "automatic",
                                automaticOSUpgradePolicy = new
                                {
                                    disableAutomaticRollback = true,
                                    enableAutomaticOSUpgrade = true,
                                    useRollingUpgradePolicy = true,
                                    osRollingUpgradeDeferral = true,
                                },
                                rollingUpgradePolicy = new
                                {
                                    enableCrossZoneUpgrade = true,
                                    maxBatchInstancePercent = 1234,
                                    maxUnhealthyInstancePercent = 1234,
                                    maxUnhealthyUpgradedInstancePercent = 1234,
                                    pauseTimeBetweenBatches = "PT1H23M45S",
                                    prioritizeUnhealthyInstances = true,
                                    rollbackFailedInstancesOnPolicyBreach = true,
                                },
                            },
                        },
                    },
                },
                onAllTasksComplete = "noaction",
                metadata = new object[]
            {
null
            },
            });
            Response response = client.UpdateJob("<jobId>", content, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), requestConditions: null);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_UpdateJob_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                priority = 1234,
                allowTaskPreemption = true,
                maxParallelTasks = 1234,
                constraints = new
                {
                    maxWallClockTime = "PT1H23M45S",
                    maxTaskRetryCount = 1234,
                },
                poolInfo = new
                {
                    poolId = "<poolId>",
                    autoPoolSpecification = new
                    {
                        autoPoolIdPrefix = "<autoPoolIdPrefix>",
                        poolLifetimeOption = "jobschedule",
                        keepAlive = true,
                        pool = new
                        {
                            displayName = "<displayName>",
                            vmSize = "<vmSize>",
                            virtualMachineConfiguration = new
                            {
                                imageReference = new
                                {
                                    publisher = "<publisher>",
                                    offer = "<offer>",
                                    sku = "<sku>",
                                    version = "<version>",
                                    virtualMachineImageId = "<virtualMachineImageId>",
                                },
                                nodeAgentSKUId = "<nodeAgentSKUId>",
                                windowsConfiguration = new
                                {
                                    enableAutomaticUpdates = true,
                                },
                                dataDisks = new object[]
            {
new
{
lun = 1234,
caching = "none",
diskSizeGB = 1234,
storageAccountType = "standard_lrs",
}
            },
                                licenseType = "<licenseType>",
                                containerConfiguration = new
                                {
                                    type = "dockerCompatible",
                                    containerImageNames = new object[]
            {
"<containerImageNames>"
            },
                                    containerRegistries = new object[]
            {
new
{
username = "<username>",
password = "<password>",
registryServer = "<registryServer>",
identityReference = new
{
resourceId = "<resourceId>",
},
}
            },
                                },
                                diskEncryptionConfiguration = new
                                {
                                    targets = new object[]
            {
"osdisk"
            },
                                },
                                nodePlacementConfiguration = new
                                {
                                    policy = "regional",
                                },
                                extensions = new object[]
            {
new
{
name = "<name>",
publisher = "<publisher>",
type = "<type>",
typeHandlerVersion = "<typeHandlerVersion>",
autoUpgradeMinorVersion = true,
enableAutomaticUpgrade = true,
settings = new
{
key = "<settings>",
},
protectedSettings = new
{
key = "<protectedSettings>",
},
provisionAfterExtensions = new object[]
{
"<provisionAfterExtensions>"
},
}
            },
                                osDisk = new
                                {
                                    ephemeralOSDiskSettings = new
                                    {
                                        placement = "cachedisk",
                                    },
                                    caching = "none",
                                    diskSizeGB = 1234,
                                    managedDisk = new
                                    {
                                        storageAccountType = "standard_lrs",
                                    },
                                    writeAcceleratorEnabled = true,
                                },
                                securityProfile = new
                                {
                                    encryptionAtHost = true,
                                    securityType = "trustedLaunch",
                                    uefiSettings = new
                                    {
                                        secureBootEnabled = true,
                                        vTpmEnabled = true,
                                    },
                                },
                                serviceArtifactReference = new
                                {
                                    id = "<id>",
                                },
                            },
                            taskSlotsPerNode = 1234,
                            taskSchedulingPolicy = new
                            {
                                nodeFillType = "spread",
                            },
                            resizeTimeout = "PT1H23M45S",
                            resourceTags = "<resourceTags>",
                            targetDedicatedNodes = 1234,
                            targetLowPriorityNodes = 1234,
                            enableAutoScale = true,
                            autoScaleFormula = "<autoScaleFormula>",
                            autoScaleEvaluationInterval = "PT1H23M45S",
                            enableInterNodeCommunication = true,
                            networkConfiguration = new
                            {
                                subnetId = "<subnetId>",
                                dynamicVNetAssignmentScope = "none",
                                endpointConfiguration = new
                                {
                                    inboundNATPools = new object[]
            {
new
{
name = "<name>",
protocol = "tcp",
backendPort = 1234,
frontendPortRangeStart = 1234,
frontendPortRangeEnd = 1234,
networkSecurityGroupRules = new object[]
{
new
{
priority = 1234,
access = "allow",
sourceAddressPrefix = "<sourceAddressPrefix>",
sourcePortRanges = new object[]
{
"<sourcePortRanges>"
},
}
},
}
            },
                                },
                                publicIPAddressConfiguration = new
                                {
                                    provision = "batchmanaged",
                                    ipAddressIds = new object[]
            {
"<ipAddressIds>"
            },
                                },
                                enableAcceleratedNetworking = true,
                            },
                            startTask = new
                            {
                                commandLine = "<commandLine>",
                                containerSettings = new
                                {
                                    containerRunOptions = "<containerRunOptions>",
                                    imageName = "<imageName>",
                                    workingDirectory = "taskWorkingDirectory",
                                },
                                resourceFiles = new object[]
            {
new
{
autoStorageContainerName = "<autoStorageContainerName>",
storageContainerUrl = "<storageContainerUrl>",
httpUrl = "<httpUrl>",
blobPrefix = "<blobPrefix>",
filePath = "<filePath>",
fileMode = "<fileMode>",
}
            },
                                environmentSettings = new object[]
            {
new
{
name = "<name>",
value = "<value>",
}
            },
                                userIdentity = new
                                {
                                    username = "<username>",
                                    autoUser = new
                                    {
                                        scope = "task",
                                        elevationLevel = "nonadmin",
                                    },
                                },
                                maxTaskRetryCount = 1234,
                                waitForSuccess = true,
                            },
                            applicationPackageReferences = new object[]
            {
new
{
applicationId = "<applicationId>",
version = "<version>",
}
            },
                            userAccounts = new object[]
            {
new
{
name = "<name>",
password = "<password>",
elevationLevel = "nonadmin",
linuxUserConfiguration = new
{
uid = 1234,
gid = 1234,
sshPrivateKey = "<sshPrivateKey>",
},
windowsUserConfiguration = new
{
loginMode = "batch",
},
}
            },
                            metadata = new object[]
            {
new
{
name = "<name>",
value = "<value>",
}
            },
                            mountConfiguration = new object[]
            {
new
{
azureBlobFileSystemConfiguration = new
{
accountName = "<accountName>",
containerName = "<containerName>",
accountKey = "<accountKey>",
sasKey = "<sasKey>",
blobfuseOptions = "<blobfuseOptions>",
relativeMountPath = "<relativeMountPath>",
},
nfsMountConfiguration = new
{
source = "<source>",
relativeMountPath = "<relativeMountPath>",
mountOptions = "<mountOptions>",
},
cifsMountConfiguration = new
{
username = "<username>",
source = "<source>",
relativeMountPath = "<relativeMountPath>",
mountOptions = "<mountOptions>",
password = "<password>",
},
azureFileShareConfiguration = new
{
accountName = "<accountName>",
azureFileUrl = "<azureFileUrl>",
accountKey = "<accountKey>",
relativeMountPath = "<relativeMountPath>",
mountOptions = "<mountOptions>",
},
}
            },
                            targetNodeCommunicationMode = "default",
                            upgradePolicy = new
                            {
                                mode = "automatic",
                                automaticOSUpgradePolicy = new
                                {
                                    disableAutomaticRollback = true,
                                    enableAutomaticOSUpgrade = true,
                                    useRollingUpgradePolicy = true,
                                    osRollingUpgradeDeferral = true,
                                },
                                rollingUpgradePolicy = new
                                {
                                    enableCrossZoneUpgrade = true,
                                    maxBatchInstancePercent = 1234,
                                    maxUnhealthyInstancePercent = 1234,
                                    maxUnhealthyUpgradedInstancePercent = 1234,
                                    pauseTimeBetweenBatches = "PT1H23M45S",
                                    prioritizeUnhealthyInstances = true,
                                    rollbackFailedInstancesOnPolicyBreach = true,
                                },
                            },
                        },
                    },
                },
                onAllTasksComplete = "noaction",
                metadata = new object[]
            {
null
            },
            });
            Response response = await client.UpdateJobAsync("<jobId>", content, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), requestConditions: null);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_ReplaceJob_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                poolInfo = new object(),
            });
            Response response = client.ReplaceJob("<jobId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_ReplaceJob_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                poolInfo = new object(),
            });
            Response response = await client.ReplaceJobAsync("<jobId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_ReplaceJob_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchJob job = new BatchJob(new BatchPoolInfo());
            Response response = client.ReplaceJob("<jobId>", job);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_ReplaceJob_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchJob job = new BatchJob(new BatchPoolInfo());
            Response response = await client.ReplaceJobAsync("<jobId>", job);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_ReplaceJob_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                priority = 1234,
                allowTaskPreemption = true,
                maxParallelTasks = 1234,
                constraints = new
                {
                    maxWallClockTime = "PT1H23M45S",
                    maxTaskRetryCount = 1234,
                },
                poolInfo = new
                {
                    poolId = "<poolId>",
                    autoPoolSpecification = new
                    {
                        autoPoolIdPrefix = "<autoPoolIdPrefix>",
                        poolLifetimeOption = "jobschedule",
                        keepAlive = true,
                        pool = new
                        {
                            displayName = "<displayName>",
                            vmSize = "<vmSize>",
                            virtualMachineConfiguration = new
                            {
                                imageReference = new
                                {
                                    publisher = "<publisher>",
                                    offer = "<offer>",
                                    sku = "<sku>",
                                    version = "<version>",
                                    virtualMachineImageId = "<virtualMachineImageId>",
                                },
                                nodeAgentSKUId = "<nodeAgentSKUId>",
                                windowsConfiguration = new
                                {
                                    enableAutomaticUpdates = true,
                                },
                                dataDisks = new object[]
            {
new
{
lun = 1234,
caching = "none",
diskSizeGB = 1234,
storageAccountType = "standard_lrs",
}
            },
                                licenseType = "<licenseType>",
                                containerConfiguration = new
                                {
                                    type = "dockerCompatible",
                                    containerImageNames = new object[]
            {
"<containerImageNames>"
            },
                                    containerRegistries = new object[]
            {
new
{
username = "<username>",
password = "<password>",
registryServer = "<registryServer>",
identityReference = new
{
resourceId = "<resourceId>",
},
}
            },
                                },
                                diskEncryptionConfiguration = new
                                {
                                    targets = new object[]
            {
"osdisk"
            },
                                },
                                nodePlacementConfiguration = new
                                {
                                    policy = "regional",
                                },
                                extensions = new object[]
            {
new
{
name = "<name>",
publisher = "<publisher>",
type = "<type>",
typeHandlerVersion = "<typeHandlerVersion>",
autoUpgradeMinorVersion = true,
enableAutomaticUpgrade = true,
settings = new
{
key = "<settings>",
},
protectedSettings = new
{
key = "<protectedSettings>",
},
provisionAfterExtensions = new object[]
{
"<provisionAfterExtensions>"
},
}
            },
                                osDisk = new
                                {
                                    ephemeralOSDiskSettings = new
                                    {
                                        placement = "cachedisk",
                                    },
                                    caching = "none",
                                    diskSizeGB = 1234,
                                    managedDisk = new
                                    {
                                        storageAccountType = "standard_lrs",
                                    },
                                    writeAcceleratorEnabled = true,
                                },
                                securityProfile = new
                                {
                                    encryptionAtHost = true,
                                    securityType = "trustedLaunch",
                                    uefiSettings = new
                                    {
                                        secureBootEnabled = true,
                                        vTpmEnabled = true,
                                    },
                                },
                                serviceArtifactReference = new
                                {
                                    id = "<id>",
                                },
                            },
                            taskSlotsPerNode = 1234,
                            taskSchedulingPolicy = new
                            {
                                nodeFillType = "spread",
                            },
                            resizeTimeout = "PT1H23M45S",
                            resourceTags = "<resourceTags>",
                            targetDedicatedNodes = 1234,
                            targetLowPriorityNodes = 1234,
                            enableAutoScale = true,
                            autoScaleFormula = "<autoScaleFormula>",
                            autoScaleEvaluationInterval = "PT1H23M45S",
                            enableInterNodeCommunication = true,
                            networkConfiguration = new
                            {
                                subnetId = "<subnetId>",
                                dynamicVNetAssignmentScope = "none",
                                endpointConfiguration = new
                                {
                                    inboundNATPools = new object[]
            {
new
{
name = "<name>",
protocol = "tcp",
backendPort = 1234,
frontendPortRangeStart = 1234,
frontendPortRangeEnd = 1234,
networkSecurityGroupRules = new object[]
{
new
{
priority = 1234,
access = "allow",
sourceAddressPrefix = "<sourceAddressPrefix>",
sourcePortRanges = new object[]
{
"<sourcePortRanges>"
},
}
},
}
            },
                                },
                                publicIPAddressConfiguration = new
                                {
                                    provision = "batchmanaged",
                                    ipAddressIds = new object[]
            {
"<ipAddressIds>"
            },
                                },
                                enableAcceleratedNetworking = true,
                            },
                            startTask = new
                            {
                                commandLine = "<commandLine>",
                                containerSettings = new
                                {
                                    containerRunOptions = "<containerRunOptions>",
                                    imageName = "<imageName>",
                                    workingDirectory = "taskWorkingDirectory",
                                },
                                resourceFiles = new object[]
            {
new
{
autoStorageContainerName = "<autoStorageContainerName>",
storageContainerUrl = "<storageContainerUrl>",
httpUrl = "<httpUrl>",
blobPrefix = "<blobPrefix>",
filePath = "<filePath>",
fileMode = "<fileMode>",
}
            },
                                environmentSettings = new object[]
            {
new
{
name = "<name>",
value = "<value>",
}
            },
                                userIdentity = new
                                {
                                    username = "<username>",
                                    autoUser = new
                                    {
                                        scope = "task",
                                        elevationLevel = "nonadmin",
                                    },
                                },
                                maxTaskRetryCount = 1234,
                                waitForSuccess = true,
                            },
                            applicationPackageReferences = new object[]
            {
new
{
applicationId = "<applicationId>",
version = "<version>",
}
            },
                            userAccounts = new object[]
            {
new
{
name = "<name>",
password = "<password>",
elevationLevel = "nonadmin",
linuxUserConfiguration = new
{
uid = 1234,
gid = 1234,
sshPrivateKey = "<sshPrivateKey>",
},
windowsUserConfiguration = new
{
loginMode = "batch",
},
}
            },
                            metadata = new object[]
            {
new
{
name = "<name>",
value = "<value>",
}
            },
                            mountConfiguration = new object[]
            {
new
{
azureBlobFileSystemConfiguration = new
{
accountName = "<accountName>",
containerName = "<containerName>",
accountKey = "<accountKey>",
sasKey = "<sasKey>",
blobfuseOptions = "<blobfuseOptions>",
relativeMountPath = "<relativeMountPath>",
},
nfsMountConfiguration = new
{
source = "<source>",
relativeMountPath = "<relativeMountPath>",
mountOptions = "<mountOptions>",
},
cifsMountConfiguration = new
{
username = "<username>",
source = "<source>",
relativeMountPath = "<relativeMountPath>",
mountOptions = "<mountOptions>",
password = "<password>",
},
azureFileShareConfiguration = new
{
accountName = "<accountName>",
azureFileUrl = "<azureFileUrl>",
accountKey = "<accountKey>",
relativeMountPath = "<relativeMountPath>",
mountOptions = "<mountOptions>",
},
}
            },
                            targetNodeCommunicationMode = "default",
                            upgradePolicy = new
                            {
                                mode = "automatic",
                                automaticOSUpgradePolicy = new
                                {
                                    disableAutomaticRollback = true,
                                    enableAutomaticOSUpgrade = true,
                                    useRollingUpgradePolicy = true,
                                    osRollingUpgradeDeferral = true,
                                },
                                rollingUpgradePolicy = new
                                {
                                    enableCrossZoneUpgrade = true,
                                    maxBatchInstancePercent = 1234,
                                    maxUnhealthyInstancePercent = 1234,
                                    maxUnhealthyUpgradedInstancePercent = 1234,
                                    pauseTimeBetweenBatches = "PT1H23M45S",
                                    prioritizeUnhealthyInstances = true,
                                    rollbackFailedInstancesOnPolicyBreach = true,
                                },
                            },
                        },
                    },
                },
                onAllTasksComplete = "noaction",
                metadata = new object[]
            {
null
            },
            });
            Response response = client.ReplaceJob("<jobId>", content, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), requestConditions: null);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_ReplaceJob_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                priority = 1234,
                allowTaskPreemption = true,
                maxParallelTasks = 1234,
                constraints = new
                {
                    maxWallClockTime = "PT1H23M45S",
                    maxTaskRetryCount = 1234,
                },
                poolInfo = new
                {
                    poolId = "<poolId>",
                    autoPoolSpecification = new
                    {
                        autoPoolIdPrefix = "<autoPoolIdPrefix>",
                        poolLifetimeOption = "jobschedule",
                        keepAlive = true,
                        pool = new
                        {
                            displayName = "<displayName>",
                            vmSize = "<vmSize>",
                            virtualMachineConfiguration = new
                            {
                                imageReference = new
                                {
                                    publisher = "<publisher>",
                                    offer = "<offer>",
                                    sku = "<sku>",
                                    version = "<version>",
                                    virtualMachineImageId = "<virtualMachineImageId>",
                                },
                                nodeAgentSKUId = "<nodeAgentSKUId>",
                                windowsConfiguration = new
                                {
                                    enableAutomaticUpdates = true,
                                },
                                dataDisks = new object[]
            {
new
{
lun = 1234,
caching = "none",
diskSizeGB = 1234,
storageAccountType = "standard_lrs",
}
            },
                                licenseType = "<licenseType>",
                                containerConfiguration = new
                                {
                                    type = "dockerCompatible",
                                    containerImageNames = new object[]
            {
"<containerImageNames>"
            },
                                    containerRegistries = new object[]
            {
new
{
username = "<username>",
password = "<password>",
registryServer = "<registryServer>",
identityReference = new
{
resourceId = "<resourceId>",
},
}
            },
                                },
                                diskEncryptionConfiguration = new
                                {
                                    targets = new object[]
            {
"osdisk"
            },
                                },
                                nodePlacementConfiguration = new
                                {
                                    policy = "regional",
                                },
                                extensions = new object[]
            {
new
{
name = "<name>",
publisher = "<publisher>",
type = "<type>",
typeHandlerVersion = "<typeHandlerVersion>",
autoUpgradeMinorVersion = true,
enableAutomaticUpgrade = true,
settings = new
{
key = "<settings>",
},
protectedSettings = new
{
key = "<protectedSettings>",
},
provisionAfterExtensions = new object[]
{
"<provisionAfterExtensions>"
},
}
            },
                                osDisk = new
                                {
                                    ephemeralOSDiskSettings = new
                                    {
                                        placement = "cachedisk",
                                    },
                                    caching = "none",
                                    diskSizeGB = 1234,
                                    managedDisk = new
                                    {
                                        storageAccountType = "standard_lrs",
                                    },
                                    writeAcceleratorEnabled = true,
                                },
                                securityProfile = new
                                {
                                    encryptionAtHost = true,
                                    securityType = "trustedLaunch",
                                    uefiSettings = new
                                    {
                                        secureBootEnabled = true,
                                        vTpmEnabled = true,
                                    },
                                },
                                serviceArtifactReference = new
                                {
                                    id = "<id>",
                                },
                            },
                            taskSlotsPerNode = 1234,
                            taskSchedulingPolicy = new
                            {
                                nodeFillType = "spread",
                            },
                            resizeTimeout = "PT1H23M45S",
                            resourceTags = "<resourceTags>",
                            targetDedicatedNodes = 1234,
                            targetLowPriorityNodes = 1234,
                            enableAutoScale = true,
                            autoScaleFormula = "<autoScaleFormula>",
                            autoScaleEvaluationInterval = "PT1H23M45S",
                            enableInterNodeCommunication = true,
                            networkConfiguration = new
                            {
                                subnetId = "<subnetId>",
                                dynamicVNetAssignmentScope = "none",
                                endpointConfiguration = new
                                {
                                    inboundNATPools = new object[]
            {
new
{
name = "<name>",
protocol = "tcp",
backendPort = 1234,
frontendPortRangeStart = 1234,
frontendPortRangeEnd = 1234,
networkSecurityGroupRules = new object[]
{
new
{
priority = 1234,
access = "allow",
sourceAddressPrefix = "<sourceAddressPrefix>",
sourcePortRanges = new object[]
{
"<sourcePortRanges>"
},
}
},
}
            },
                                },
                                publicIPAddressConfiguration = new
                                {
                                    provision = "batchmanaged",
                                    ipAddressIds = new object[]
            {
"<ipAddressIds>"
            },
                                },
                                enableAcceleratedNetworking = true,
                            },
                            startTask = new
                            {
                                commandLine = "<commandLine>",
                                containerSettings = new
                                {
                                    containerRunOptions = "<containerRunOptions>",
                                    imageName = "<imageName>",
                                    workingDirectory = "taskWorkingDirectory",
                                },
                                resourceFiles = new object[]
            {
new
{
autoStorageContainerName = "<autoStorageContainerName>",
storageContainerUrl = "<storageContainerUrl>",
httpUrl = "<httpUrl>",
blobPrefix = "<blobPrefix>",
filePath = "<filePath>",
fileMode = "<fileMode>",
}
            },
                                environmentSettings = new object[]
            {
new
{
name = "<name>",
value = "<value>",
}
            },
                                userIdentity = new
                                {
                                    username = "<username>",
                                    autoUser = new
                                    {
                                        scope = "task",
                                        elevationLevel = "nonadmin",
                                    },
                                },
                                maxTaskRetryCount = 1234,
                                waitForSuccess = true,
                            },
                            applicationPackageReferences = new object[]
            {
new
{
applicationId = "<applicationId>",
version = "<version>",
}
            },
                            userAccounts = new object[]
            {
new
{
name = "<name>",
password = "<password>",
elevationLevel = "nonadmin",
linuxUserConfiguration = new
{
uid = 1234,
gid = 1234,
sshPrivateKey = "<sshPrivateKey>",
},
windowsUserConfiguration = new
{
loginMode = "batch",
},
}
            },
                            metadata = new object[]
            {
new
{
name = "<name>",
value = "<value>",
}
            },
                            mountConfiguration = new object[]
            {
new
{
azureBlobFileSystemConfiguration = new
{
accountName = "<accountName>",
containerName = "<containerName>",
accountKey = "<accountKey>",
sasKey = "<sasKey>",
blobfuseOptions = "<blobfuseOptions>",
relativeMountPath = "<relativeMountPath>",
},
nfsMountConfiguration = new
{
source = "<source>",
relativeMountPath = "<relativeMountPath>",
mountOptions = "<mountOptions>",
},
cifsMountConfiguration = new
{
username = "<username>",
source = "<source>",
relativeMountPath = "<relativeMountPath>",
mountOptions = "<mountOptions>",
password = "<password>",
},
azureFileShareConfiguration = new
{
accountName = "<accountName>",
azureFileUrl = "<azureFileUrl>",
accountKey = "<accountKey>",
relativeMountPath = "<relativeMountPath>",
mountOptions = "<mountOptions>",
},
}
            },
                            targetNodeCommunicationMode = "default",
                            upgradePolicy = new
                            {
                                mode = "automatic",
                                automaticOSUpgradePolicy = new
                                {
                                    disableAutomaticRollback = true,
                                    enableAutomaticOSUpgrade = true,
                                    useRollingUpgradePolicy = true,
                                    osRollingUpgradeDeferral = true,
                                },
                                rollingUpgradePolicy = new
                                {
                                    enableCrossZoneUpgrade = true,
                                    maxBatchInstancePercent = 1234,
                                    maxUnhealthyInstancePercent = 1234,
                                    maxUnhealthyUpgradedInstancePercent = 1234,
                                    pauseTimeBetweenBatches = "PT1H23M45S",
                                    prioritizeUnhealthyInstances = true,
                                    rollbackFailedInstancesOnPolicyBreach = true,
                                },
                            },
                        },
                    },
                },
                onAllTasksComplete = "noaction",
                metadata = new object[]
            {
null
            },
            });
            Response response = await client.ReplaceJobAsync("<jobId>", content, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), requestConditions: null);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_ReplaceJob_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchJob job = new BatchJob(new BatchPoolInfo
            {
                PoolId = "<poolId>",
                AutoPoolSpecification = new BatchAutoPoolSpecification(BatchPoolLifetimeOption.JobSchedule)
                {
                    AutoPoolIdPrefix = "<autoPoolIdPrefix>",
                    KeepAlive = true,
                    Pool = new BatchPoolSpecification("<vmSize>")
                    {
                        DisplayName = "<displayName>",
                        VirtualMachineConfiguration = new VirtualMachineConfiguration(new ImageReference
                        {
                            Publisher = "<publisher>",
                            Offer = "<offer>",
                            Sku = "<sku>",
                            Version = "<version>",
                            VirtualMachineImageId = "<virtualMachineImageId>",
                        }, "<nodeAgentSKUId>")
                        {
                            WindowsConfiguration = new WindowsConfiguration
                            {
                                EnableAutomaticUpdates = true,
                            },
                            DataDisks = {new DataDisk(1234, 1234)
{
Caching = CachingType.None,
StorageAccountType = StorageAccountType.StandardLRS,
}},
                            LicenseType = "<licenseType>",
                            ContainerConfiguration = new ContainerConfiguration(ContainerType.DockerCompatible)
                            {
                                ContainerImageNames = { "<containerImageNames>" },
                                ContainerRegistries = {new ContainerRegistryReference
{
Username = "<username>",
Password = "<password>",
RegistryServer = "<registryServer>",
IdentityReference = new BatchNodeIdentityReference
{
ResourceId = "<resourceId>",
},
}},
                            },
                            DiskEncryptionConfiguration = new DiskEncryptionConfiguration
                            {
                                Targets = { DiskEncryptionTarget.OsDisk },
                            },
                            NodePlacementConfiguration = new BatchNodePlacementConfiguration
                            {
                                Policy = BatchNodePlacementPolicyType.Regional,
                            },
                            Extensions = {new VMExtension("<name>", "<publisher>", "<type>")
{
TypeHandlerVersion = "<typeHandlerVersion>",
AutoUpgradeMinorVersion = true,
EnableAutomaticUpgrade = true,
Settings =
{
["key"] = "<settings>"
},
ProtectedSettings =
{
["key"] = "<protectedSettings>"
},
ProvisionAfterExtensions = {"<provisionAfterExtensions>"},
}},
                            OsDisk = new OSDisk
                            {
                                EphemeralOSDiskSettings = new DiffDiskSettings
                                {
                                    Placement = DiffDiskPlacement.CacheDisk,
                                },
                                Caching = CachingType.None,
                                DiskSizeGB = 1234,
                                ManagedDisk = new ManagedDisk(StorageAccountType.StandardLRS),
                                WriteAcceleratorEnabled = true,
                            },
                            SecurityProfile = new SecurityProfile(true, SecurityTypes.TrustedLaunch, new UefiSettings
                            {
                                SecureBootEnabled = true,
                                VTpmEnabled = true,
                            }),
                            ServiceArtifactReference = new ServiceArtifactReference("<id>"),
                        },
                        TaskSlotsPerNode = 1234,
                        TaskSchedulingPolicy = new BatchTaskSchedulingPolicy(BatchNodeFillType.Spread),
                        ResizeTimeout = XmlConvert.ToTimeSpan("PT1H23M45S"),
                        ResourceTags = "<resourceTags>",
                        TargetDedicatedNodes = 1234,
                        TargetLowPriorityNodes = 1234,
                        EnableAutoScale = true,
                        AutoScaleFormula = "<autoScaleFormula>",
                        AutoScaleEvaluationInterval = XmlConvert.ToTimeSpan("PT1H23M45S"),
                        EnableInterNodeCommunication = true,
                        NetworkConfiguration = new NetworkConfiguration
                        {
                            SubnetId = "<subnetId>",
                            DynamicVNetAssignmentScope = DynamicVNetAssignmentScope.None,
                            EndpointConfiguration = new BatchPoolEndpointConfiguration(new InboundNatPool[]
            {
new InboundNatPool("<name>", InboundEndpointProtocol.Tcp, 1234, 1234, 1234)
{
NetworkSecurityGroupRules = {new NetworkSecurityGroupRule(1234, NetworkSecurityGroupRuleAccess.Allow, "<sourceAddressPrefix>")
{
SourcePortRanges = {"<sourcePortRanges>"},
}},
}
            }),
                            PublicIpAddressConfiguration = new PublicIpAddressConfiguration
                            {
                                IpAddressProvisioningType = IpAddressProvisioningType.BatchManaged,
                                IpAddressIds = { "<ipAddressIds>" },
                            },
                            EnableAcceleratedNetworking = true,
                        },
                        StartTask = new BatchStartTask("<commandLine>")
                        {
                            ContainerSettings = new BatchTaskContainerSettings("<imageName>")
                            {
                                ContainerRunOptions = "<containerRunOptions>",
                                Registry = default,
                                WorkingDirectory = ContainerWorkingDirectory.TaskWorkingDirectory,
                            },
                            ResourceFiles = {new ResourceFile
{
AutoStorageContainerName = "<autoStorageContainerName>",
StorageContainerUrl = "<storageContainerUrl>",
HttpUrl = "<httpUrl>",
BlobPrefix = "<blobPrefix>",
FilePath = "<filePath>",
FileMode = "<fileMode>",
IdentityReference = default,
}},
                            EnvironmentSettings = {new EnvironmentSetting("<name>")
{
Value = "<value>",
}},
                            UserIdentity = new UserIdentity
                            {
                                Username = "<username>",
                                AutoUser = new AutoUserSpecification
                                {
                                    Scope = AutoUserScope.Task,
                                    ElevationLevel = ElevationLevel.NonAdmin,
                                },
                            },
                            MaxTaskRetryCount = 1234,
                            WaitForSuccess = true,
                        },
                        ApplicationPackageReferences = {new BatchApplicationPackageReference("<applicationId>")
{
Version = "<version>",
}},
                        UserAccounts = {new UserAccount("<name>", "<password>")
{
ElevationLevel = ElevationLevel.NonAdmin,
LinuxUserConfiguration = new LinuxUserConfiguration
{
Uid = 1234,
Gid = 1234,
SshPrivateKey = "<sshPrivateKey>",
},
WindowsUserConfiguration = new WindowsUserConfiguration
{
LoginMode = LoginMode.Batch,
},
}},
                        Metadata = { new MetadataItem("<name>", "<value>") },
                        MountConfiguration = {new MountConfiguration
{
AzureBlobFileSystemConfiguration = new AzureBlobFileSystemConfiguration("<accountName>", "<containerName>", "<relativeMountPath>")
{
AccountKey = "<accountKey>",
SasKey = "<sasKey>",
BlobfuseOptions = "<blobfuseOptions>",
IdentityReference = default,
},
NfsMountConfiguration = new NfsMountConfiguration("<source>", "<relativeMountPath>")
{
MountOptions = "<mountOptions>",
},
CifsMountConfiguration = new CifsMountConfiguration("<username>", "<source>", "<relativeMountPath>", "<password>")
{
MountOptions = "<mountOptions>",
},
AzureFileShareConfiguration = new AzureFileShareConfiguration("<accountName>", "<azureFileUrl>", "<accountKey>", "<relativeMountPath>")
{
MountOptions = "<mountOptions>",
},
}},
                        TargetNodeCommunicationMode = BatchNodeCommunicationMode.Default,
                        UpgradePolicy = new UpgradePolicy(UpgradeMode.Automatic)
                        {
                            AutomaticOsUpgradePolicy = new AutomaticOsUpgradePolicy
                            {
                                DisableAutomaticRollback = true,
                                EnableAutomaticOsUpgrade = true,
                                UseRollingUpgradePolicy = true,
                                OsRollingUpgradeDeferral = true,
                            },
                            RollingUpgradePolicy = new RollingUpgradePolicy
                            {
                                EnableCrossZoneUpgrade = true,
                                MaxBatchInstancePercent = 1234,
                                MaxUnhealthyInstancePercent = 1234,
                                MaxUnhealthyUpgradedInstancePercent = 1234,
                                PauseTimeBetweenBatches = XmlConvert.ToTimeSpan("PT1H23M45S"),
                                PrioritizeUnhealthyInstances = true,
                                RollbackFailedInstancesOnPolicyBreach = true,
                            },
                        },
                    },
                },
            })
            {
                Priority = 1234,
                AllowTaskPreemption = true,
                MaxParallelTasks = 1234,
                Constraints = new BatchJobConstraints
                {
                    MaxWallClockTime = XmlConvert.ToTimeSpan("PT1H23M45S"),
                    MaxTaskRetryCount = 1234,
                },
                OnAllTasksComplete = OnAllBatchTasksComplete.NoAction,
                Metadata = { default },
            };
            Response response = client.ReplaceJob("<jobId>", job, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), requestConditions: null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_ReplaceJob_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchJob job = new BatchJob(new BatchPoolInfo
            {
                PoolId = "<poolId>",
                AutoPoolSpecification = new BatchAutoPoolSpecification(BatchPoolLifetimeOption.JobSchedule)
                {
                    AutoPoolIdPrefix = "<autoPoolIdPrefix>",
                    KeepAlive = true,
                    Pool = new BatchPoolSpecification("<vmSize>")
                    {
                        DisplayName = "<displayName>",
                        VirtualMachineConfiguration = new VirtualMachineConfiguration(new ImageReference
                        {
                            Publisher = "<publisher>",
                            Offer = "<offer>",
                            Sku = "<sku>",
                            Version = "<version>",
                            VirtualMachineImageId = "<virtualMachineImageId>",
                        }, "<nodeAgentSKUId>")
                        {
                            WindowsConfiguration = new WindowsConfiguration
                            {
                                EnableAutomaticUpdates = true,
                            },
                            DataDisks = {new DataDisk(1234, 1234)
{
Caching = CachingType.None,
StorageAccountType = StorageAccountType.StandardLRS,
}},
                            LicenseType = "<licenseType>",
                            ContainerConfiguration = new ContainerConfiguration(ContainerType.DockerCompatible)
                            {
                                ContainerImageNames = { "<containerImageNames>" },
                                ContainerRegistries = {new ContainerRegistryReference
{
Username = "<username>",
Password = "<password>",
RegistryServer = "<registryServer>",
IdentityReference = new BatchNodeIdentityReference
{
ResourceId = "<resourceId>",
},
}},
                            },
                            DiskEncryptionConfiguration = new DiskEncryptionConfiguration
                            {
                                Targets = { DiskEncryptionTarget.OsDisk },
                            },
                            NodePlacementConfiguration = new BatchNodePlacementConfiguration
                            {
                                Policy = BatchNodePlacementPolicyType.Regional,
                            },
                            Extensions = {new VMExtension("<name>", "<publisher>", "<type>")
{
TypeHandlerVersion = "<typeHandlerVersion>",
AutoUpgradeMinorVersion = true,
EnableAutomaticUpgrade = true,
Settings =
{
["key"] = "<settings>"
},
ProtectedSettings =
{
["key"] = "<protectedSettings>"
},
ProvisionAfterExtensions = {"<provisionAfterExtensions>"},
}},
                            OsDisk = new OSDisk
                            {
                                EphemeralOSDiskSettings = new DiffDiskSettings
                                {
                                    Placement = DiffDiskPlacement.CacheDisk,
                                },
                                Caching = CachingType.None,
                                DiskSizeGB = 1234,
                                ManagedDisk = new ManagedDisk(StorageAccountType.StandardLRS),
                                WriteAcceleratorEnabled = true,
                            },
                            SecurityProfile = new SecurityProfile(true, SecurityTypes.TrustedLaunch, new UefiSettings
                            {
                                SecureBootEnabled = true,
                                VTpmEnabled = true,
                            }),
                            ServiceArtifactReference = new ServiceArtifactReference("<id>"),
                        },
                        TaskSlotsPerNode = 1234,
                        TaskSchedulingPolicy = new BatchTaskSchedulingPolicy(BatchNodeFillType.Spread),
                        ResizeTimeout = XmlConvert.ToTimeSpan("PT1H23M45S"),
                        ResourceTags = "<resourceTags>",
                        TargetDedicatedNodes = 1234,
                        TargetLowPriorityNodes = 1234,
                        EnableAutoScale = true,
                        AutoScaleFormula = "<autoScaleFormula>",
                        AutoScaleEvaluationInterval = XmlConvert.ToTimeSpan("PT1H23M45S"),
                        EnableInterNodeCommunication = true,
                        NetworkConfiguration = new NetworkConfiguration
                        {
                            SubnetId = "<subnetId>",
                            DynamicVNetAssignmentScope = DynamicVNetAssignmentScope.None,
                            EndpointConfiguration = new BatchPoolEndpointConfiguration(new InboundNatPool[]
            {
new InboundNatPool("<name>", InboundEndpointProtocol.Tcp, 1234, 1234, 1234)
{
NetworkSecurityGroupRules = {new NetworkSecurityGroupRule(1234, NetworkSecurityGroupRuleAccess.Allow, "<sourceAddressPrefix>")
{
SourcePortRanges = {"<sourcePortRanges>"},
}},
}
            }),
                            PublicIpAddressConfiguration = new PublicIpAddressConfiguration
                            {
                                IpAddressProvisioningType = IpAddressProvisioningType.BatchManaged,
                                IpAddressIds = { "<ipAddressIds>" },
                            },
                            EnableAcceleratedNetworking = true,
                        },
                        StartTask = new BatchStartTask("<commandLine>")
                        {
                            ContainerSettings = new BatchTaskContainerSettings("<imageName>")
                            {
                                ContainerRunOptions = "<containerRunOptions>",
                                Registry = default,
                                WorkingDirectory = ContainerWorkingDirectory.TaskWorkingDirectory,
                            },
                            ResourceFiles = {new ResourceFile
{
AutoStorageContainerName = "<autoStorageContainerName>",
StorageContainerUrl = "<storageContainerUrl>",
HttpUrl = "<httpUrl>",
BlobPrefix = "<blobPrefix>",
FilePath = "<filePath>",
FileMode = "<fileMode>",
IdentityReference = default,
}},
                            EnvironmentSettings = {new EnvironmentSetting("<name>")
{
Value = "<value>",
}},
                            UserIdentity = new UserIdentity
                            {
                                Username = "<username>",
                                AutoUser = new AutoUserSpecification
                                {
                                    Scope = AutoUserScope.Task,
                                    ElevationLevel = ElevationLevel.NonAdmin,
                                },
                            },
                            MaxTaskRetryCount = 1234,
                            WaitForSuccess = true,
                        },
                        ApplicationPackageReferences = {new BatchApplicationPackageReference("<applicationId>")
{
Version = "<version>",
}},
                        UserAccounts = {new UserAccount("<name>", "<password>")
{
ElevationLevel = ElevationLevel.NonAdmin,
LinuxUserConfiguration = new LinuxUserConfiguration
{
Uid = 1234,
Gid = 1234,
SshPrivateKey = "<sshPrivateKey>",
},
WindowsUserConfiguration = new WindowsUserConfiguration
{
LoginMode = LoginMode.Batch,
},
}},
                        Metadata = { new MetadataItem("<name>", "<value>") },
                        MountConfiguration = {new MountConfiguration
{
AzureBlobFileSystemConfiguration = new AzureBlobFileSystemConfiguration("<accountName>", "<containerName>", "<relativeMountPath>")
{
AccountKey = "<accountKey>",
SasKey = "<sasKey>",
BlobfuseOptions = "<blobfuseOptions>",
IdentityReference = default,
},
NfsMountConfiguration = new NfsMountConfiguration("<source>", "<relativeMountPath>")
{
MountOptions = "<mountOptions>",
},
CifsMountConfiguration = new CifsMountConfiguration("<username>", "<source>", "<relativeMountPath>", "<password>")
{
MountOptions = "<mountOptions>",
},
AzureFileShareConfiguration = new AzureFileShareConfiguration("<accountName>", "<azureFileUrl>", "<accountKey>", "<relativeMountPath>")
{
MountOptions = "<mountOptions>",
},
}},
                        TargetNodeCommunicationMode = BatchNodeCommunicationMode.Default,
                        UpgradePolicy = new UpgradePolicy(UpgradeMode.Automatic)
                        {
                            AutomaticOsUpgradePolicy = new AutomaticOsUpgradePolicy
                            {
                                DisableAutomaticRollback = true,
                                EnableAutomaticOsUpgrade = true,
                                UseRollingUpgradePolicy = true,
                                OsRollingUpgradeDeferral = true,
                            },
                            RollingUpgradePolicy = new RollingUpgradePolicy
                            {
                                EnableCrossZoneUpgrade = true,
                                MaxBatchInstancePercent = 1234,
                                MaxUnhealthyInstancePercent = 1234,
                                MaxUnhealthyUpgradedInstancePercent = 1234,
                                PauseTimeBetweenBatches = XmlConvert.ToTimeSpan("PT1H23M45S"),
                                PrioritizeUnhealthyInstances = true,
                                RollbackFailedInstancesOnPolicyBreach = true,
                            },
                        },
                    },
                },
            })
            {
                Priority = 1234,
                AllowTaskPreemption = true,
                MaxParallelTasks = 1234,
                Constraints = new BatchJobConstraints
                {
                    MaxWallClockTime = XmlConvert.ToTimeSpan("PT1H23M45S"),
                    MaxTaskRetryCount = 1234,
                },
                OnAllTasksComplete = OnAllBatchTasksComplete.NoAction,
                Metadata = { default },
            };
            Response response = await client.ReplaceJobAsync("<jobId>", job, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), requestConditions: null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_DisableJob_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                disableTasks = "requeue",
            });
            Response response = client.DisableJob("<jobId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_DisableJob_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                disableTasks = "requeue",
            });
            Response response = await client.DisableJobAsync("<jobId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_DisableJob_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchJobDisableContent content = new BatchJobDisableContent(DisableBatchJobOption.Requeue);
            Response response = client.DisableJob("<jobId>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_DisableJob_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchJobDisableContent content = new BatchJobDisableContent(DisableBatchJobOption.Requeue);
            Response response = await client.DisableJobAsync("<jobId>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_DisableJob_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                disableTasks = "requeue",
            });
            Response response = client.DisableJob("<jobId>", content, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), requestConditions: null);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_DisableJob_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                disableTasks = "requeue",
            });
            Response response = await client.DisableJobAsync("<jobId>", content, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), requestConditions: null);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_DisableJob_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchJobDisableContent content = new BatchJobDisableContent(DisableBatchJobOption.Requeue);
            Response response = client.DisableJob("<jobId>", content, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), requestConditions: null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_DisableJob_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchJobDisableContent content = new BatchJobDisableContent(DisableBatchJobOption.Requeue);
            Response response = await client.DisableJobAsync("<jobId>", content, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), requestConditions: null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_EnableJob_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = client.EnableJob("<jobId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_EnableJob_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = await client.EnableJobAsync("<jobId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_EnableJob_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = client.EnableJob("<jobId>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), requestConditions: null);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_EnableJob_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = await client.EnableJobAsync("<jobId>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), requestConditions: null);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_TerminateJob_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = null;
            Response response = client.TerminateJob("<jobId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_TerminateJob_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = null;
            Response response = await client.TerminateJobAsync("<jobId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_TerminateJob_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = client.TerminateJob("<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_TerminateJob_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = await client.TerminateJobAsync("<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_TerminateJob_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                terminateReason = "<terminateReason>",
            });
            Response response = client.TerminateJob("<jobId>", content, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), requestConditions: null);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_TerminateJob_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                terminateReason = "<terminateReason>",
            });
            Response response = await client.TerminateJobAsync("<jobId>", content, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), requestConditions: null);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_TerminateJob_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchJobTerminateContent parameters = new BatchJobTerminateContent
            {
                TerminationReason = "<terminateReason>",
            };
            Response response = client.TerminateJob("<jobId>", parameters: parameters, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), requestConditions: null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_TerminateJob_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchJobTerminateContent parameters = new BatchJobTerminateContent
            {
                TerminationReason = "<terminateReason>",
            };
            Response response = await client.TerminateJobAsync("<jobId>", parameters: parameters, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), requestConditions: null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_CreateJob_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
                poolInfo = new object(),
            });
            Response response = client.CreateJob(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_CreateJob_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
                poolInfo = new object(),
            });
            Response response = await client.CreateJobAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_CreateJob_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchJobCreateContent job = new BatchJobCreateContent("<id>", new BatchPoolInfo());
            Response response = client.CreateJob(job);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_CreateJob_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchJobCreateContent job = new BatchJobCreateContent("<id>", new BatchPoolInfo());
            Response response = await client.CreateJobAsync(job);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_CreateJob_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
                displayName = "<displayName>",
                usesTaskDependencies = true,
                priority = 1234,
                allowTaskPreemption = true,
                maxParallelTasks = 1234,
                constraints = new
                {
                    maxWallClockTime = "PT1H23M45S",
                    maxTaskRetryCount = 1234,
                },
                jobManagerTask = new
                {
                    id = "<id>",
                    displayName = "<displayName>",
                    commandLine = "<commandLine>",
                    containerSettings = new
                    {
                        containerRunOptions = "<containerRunOptions>",
                        imageName = "<imageName>",
                        registry = new
                        {
                            username = "<username>",
                            password = "<password>",
                            registryServer = "<registryServer>",
                            identityReference = new
                            {
                                resourceId = "<resourceId>",
                            },
                        },
                        workingDirectory = "taskWorkingDirectory",
                    },
                    resourceFiles = new object[]
            {
new
{
autoStorageContainerName = "<autoStorageContainerName>",
storageContainerUrl = "<storageContainerUrl>",
httpUrl = "<httpUrl>",
blobPrefix = "<blobPrefix>",
filePath = "<filePath>",
fileMode = "<fileMode>",
}
            },
                    outputFiles = new object[]
            {
new
{
filePattern = "<filePattern>",
destination = new
{
container = new
{
path = "<path>",
containerUrl = "<containerUrl>",
uploadHeaders = new object[]
{
new
{
name = "<name>",
value = "<value>",
}
},
},
},
uploadOptions = new
{
uploadCondition = "tasksuccess",
},
}
            },
                    environmentSettings = new object[]
            {
new
{
name = "<name>",
value = "<value>",
}
            },
                    constraints = new
                    {
                        maxWallClockTime = "PT1H23M45S",
                        retentionTime = "PT1H23M45S",
                        maxTaskRetryCount = 1234,
                    },
                    requiredSlots = 1234,
                    killJobOnCompletion = true,
                    userIdentity = new
                    {
                        username = "<username>",
                        autoUser = new
                        {
                            scope = "task",
                            elevationLevel = "nonadmin",
                        },
                    },
                    runExclusive = true,
                    applicationPackageReferences = new object[]
            {
new
{
applicationId = "<applicationId>",
version = "<version>",
}
            },
                    authenticationTokenSettings = new
                    {
                        access = new object[]
            {
"job"
            },
                    },
                    allowLowPriorityNode = true,
                },
                jobPreparationTask = new
                {
                    id = "<id>",
                    commandLine = "<commandLine>",
                    resourceFiles = new object[]
            {
null
            },
                    environmentSettings = new object[]
            {
null
            },
                    waitForSuccess = true,
                    rerunOnNodeRebootAfterSuccess = true,
                },
                jobReleaseTask = new
                {
                    id = "<id>",
                    commandLine = "<commandLine>",
                    resourceFiles = new object[]
            {
null
            },
                    environmentSettings = new object[]
            {
null
            },
                    maxWallClockTime = "PT1H23M45S",
                    retentionTime = "PT1H23M45S",
                },
                commonEnvironmentSettings = new object[]
            {
null
            },
                poolInfo = new
                {
                    poolId = "<poolId>",
                    autoPoolSpecification = new
                    {
                        autoPoolIdPrefix = "<autoPoolIdPrefix>",
                        poolLifetimeOption = "jobschedule",
                        keepAlive = true,
                        pool = new
                        {
                            displayName = "<displayName>",
                            vmSize = "<vmSize>",
                            virtualMachineConfiguration = new
                            {
                                imageReference = new
                                {
                                    publisher = "<publisher>",
                                    offer = "<offer>",
                                    sku = "<sku>",
                                    version = "<version>",
                                    virtualMachineImageId = "<virtualMachineImageId>",
                                },
                                nodeAgentSKUId = "<nodeAgentSKUId>",
                                windowsConfiguration = new
                                {
                                    enableAutomaticUpdates = true,
                                },
                                dataDisks = new object[]
            {
new
{
lun = 1234,
caching = "none",
diskSizeGB = 1234,
storageAccountType = "standard_lrs",
}
            },
                                licenseType = "<licenseType>",
                                containerConfiguration = new
                                {
                                    type = "dockerCompatible",
                                    containerImageNames = new object[]
            {
"<containerImageNames>"
            },
                                    containerRegistries = new object[]
            {
null
            },
                                },
                                diskEncryptionConfiguration = new
                                {
                                    targets = new object[]
            {
"osdisk"
            },
                                },
                                nodePlacementConfiguration = new
                                {
                                    policy = "regional",
                                },
                                extensions = new object[]
            {
new
{
name = "<name>",
publisher = "<publisher>",
type = "<type>",
typeHandlerVersion = "<typeHandlerVersion>",
autoUpgradeMinorVersion = true,
enableAutomaticUpgrade = true,
settings = new
{
key = "<settings>",
},
protectedSettings = new
{
key = "<protectedSettings>",
},
provisionAfterExtensions = new object[]
{
"<provisionAfterExtensions>"
},
}
            },
                                osDisk = new
                                {
                                    ephemeralOSDiskSettings = new
                                    {
                                        placement = "cachedisk",
                                    },
                                    caching = "none",
                                    diskSizeGB = 1234,
                                    managedDisk = new
                                    {
                                        storageAccountType = "standard_lrs",
                                    },
                                    writeAcceleratorEnabled = true,
                                },
                                securityProfile = new
                                {
                                    encryptionAtHost = true,
                                    securityType = "trustedLaunch",
                                    uefiSettings = new
                                    {
                                        secureBootEnabled = true,
                                        vTpmEnabled = true,
                                    },
                                },
                                serviceArtifactReference = new
                                {
                                    id = "<id>",
                                },
                            },
                            taskSlotsPerNode = 1234,
                            taskSchedulingPolicy = new
                            {
                                nodeFillType = "spread",
                            },
                            resizeTimeout = "PT1H23M45S",
                            resourceTags = "<resourceTags>",
                            targetDedicatedNodes = 1234,
                            targetLowPriorityNodes = 1234,
                            enableAutoScale = true,
                            autoScaleFormula = "<autoScaleFormula>",
                            autoScaleEvaluationInterval = "PT1H23M45S",
                            enableInterNodeCommunication = true,
                            networkConfiguration = new
                            {
                                subnetId = "<subnetId>",
                                dynamicVNetAssignmentScope = "none",
                                endpointConfiguration = new
                                {
                                    inboundNATPools = new object[]
            {
new
{
name = "<name>",
protocol = "tcp",
backendPort = 1234,
frontendPortRangeStart = 1234,
frontendPortRangeEnd = 1234,
networkSecurityGroupRules = new object[]
{
new
{
priority = 1234,
access = "allow",
sourceAddressPrefix = "<sourceAddressPrefix>",
sourcePortRanges = new object[]
{
"<sourcePortRanges>"
},
}
},
}
            },
                                },
                                publicIPAddressConfiguration = new
                                {
                                    provision = "batchmanaged",
                                    ipAddressIds = new object[]
            {
"<ipAddressIds>"
            },
                                },
                                enableAcceleratedNetworking = true,
                            },
                            startTask = new
                            {
                                commandLine = "<commandLine>",
                                resourceFiles = new object[]
            {
null
            },
                                environmentSettings = new object[]
            {
null
            },
                                maxTaskRetryCount = 1234,
                                waitForSuccess = true,
                            },
                            applicationPackageReferences = new object[]
            {
null
            },
                            userAccounts = new object[]
            {
new
{
name = "<name>",
password = "<password>",
elevationLevel = "nonadmin",
linuxUserConfiguration = new
{
uid = 1234,
gid = 1234,
sshPrivateKey = "<sshPrivateKey>",
},
windowsUserConfiguration = new
{
loginMode = "batch",
},
}
            },
                            metadata = new object[]
            {
new
{
name = "<name>",
value = "<value>",
}
            },
                            mountConfiguration = new object[]
            {
new
{
azureBlobFileSystemConfiguration = new
{
accountName = "<accountName>",
containerName = "<containerName>",
accountKey = "<accountKey>",
sasKey = "<sasKey>",
blobfuseOptions = "<blobfuseOptions>",
relativeMountPath = "<relativeMountPath>",
},
nfsMountConfiguration = new
{
source = "<source>",
relativeMountPath = "<relativeMountPath>",
mountOptions = "<mountOptions>",
},
cifsMountConfiguration = new
{
username = "<username>",
source = "<source>",
relativeMountPath = "<relativeMountPath>",
mountOptions = "<mountOptions>",
password = "<password>",
},
azureFileShareConfiguration = new
{
accountName = "<accountName>",
azureFileUrl = "<azureFileUrl>",
accountKey = "<accountKey>",
relativeMountPath = "<relativeMountPath>",
mountOptions = "<mountOptions>",
},
}
            },
                            targetNodeCommunicationMode = "default",
                            upgradePolicy = new
                            {
                                mode = "automatic",
                                automaticOSUpgradePolicy = new
                                {
                                    disableAutomaticRollback = true,
                                    enableAutomaticOSUpgrade = true,
                                    useRollingUpgradePolicy = true,
                                    osRollingUpgradeDeferral = true,
                                },
                                rollingUpgradePolicy = new
                                {
                                    enableCrossZoneUpgrade = true,
                                    maxBatchInstancePercent = 1234,
                                    maxUnhealthyInstancePercent = 1234,
                                    maxUnhealthyUpgradedInstancePercent = 1234,
                                    pauseTimeBetweenBatches = "PT1H23M45S",
                                    prioritizeUnhealthyInstances = true,
                                    rollbackFailedInstancesOnPolicyBreach = true,
                                },
                            },
                        },
                    },
                },
                onAllTasksComplete = "noaction",
                onTaskFailure = "noaction",
                networkConfiguration = new
                {
                    subnetId = "<subnetId>",
                },
                metadata = new object[]
            {
null
            },
            });
            Response response = client.CreateJob(content, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_CreateJob_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
                displayName = "<displayName>",
                usesTaskDependencies = true,
                priority = 1234,
                allowTaskPreemption = true,
                maxParallelTasks = 1234,
                constraints = new
                {
                    maxWallClockTime = "PT1H23M45S",
                    maxTaskRetryCount = 1234,
                },
                jobManagerTask = new
                {
                    id = "<id>",
                    displayName = "<displayName>",
                    commandLine = "<commandLine>",
                    containerSettings = new
                    {
                        containerRunOptions = "<containerRunOptions>",
                        imageName = "<imageName>",
                        registry = new
                        {
                            username = "<username>",
                            password = "<password>",
                            registryServer = "<registryServer>",
                            identityReference = new
                            {
                                resourceId = "<resourceId>",
                            },
                        },
                        workingDirectory = "taskWorkingDirectory",
                    },
                    resourceFiles = new object[]
            {
new
{
autoStorageContainerName = "<autoStorageContainerName>",
storageContainerUrl = "<storageContainerUrl>",
httpUrl = "<httpUrl>",
blobPrefix = "<blobPrefix>",
filePath = "<filePath>",
fileMode = "<fileMode>",
}
            },
                    outputFiles = new object[]
            {
new
{
filePattern = "<filePattern>",
destination = new
{
container = new
{
path = "<path>",
containerUrl = "<containerUrl>",
uploadHeaders = new object[]
{
new
{
name = "<name>",
value = "<value>",
}
},
},
},
uploadOptions = new
{
uploadCondition = "tasksuccess",
},
}
            },
                    environmentSettings = new object[]
            {
new
{
name = "<name>",
value = "<value>",
}
            },
                    constraints = new
                    {
                        maxWallClockTime = "PT1H23M45S",
                        retentionTime = "PT1H23M45S",
                        maxTaskRetryCount = 1234,
                    },
                    requiredSlots = 1234,
                    killJobOnCompletion = true,
                    userIdentity = new
                    {
                        username = "<username>",
                        autoUser = new
                        {
                            scope = "task",
                            elevationLevel = "nonadmin",
                        },
                    },
                    runExclusive = true,
                    applicationPackageReferences = new object[]
            {
new
{
applicationId = "<applicationId>",
version = "<version>",
}
            },
                    authenticationTokenSettings = new
                    {
                        access = new object[]
            {
"job"
            },
                    },
                    allowLowPriorityNode = true,
                },
                jobPreparationTask = new
                {
                    id = "<id>",
                    commandLine = "<commandLine>",
                    resourceFiles = new object[]
            {
null
            },
                    environmentSettings = new object[]
            {
null
            },
                    waitForSuccess = true,
                    rerunOnNodeRebootAfterSuccess = true,
                },
                jobReleaseTask = new
                {
                    id = "<id>",
                    commandLine = "<commandLine>",
                    resourceFiles = new object[]
            {
null
            },
                    environmentSettings = new object[]
            {
null
            },
                    maxWallClockTime = "PT1H23M45S",
                    retentionTime = "PT1H23M45S",
                },
                commonEnvironmentSettings = new object[]
            {
null
            },
                poolInfo = new
                {
                    poolId = "<poolId>",
                    autoPoolSpecification = new
                    {
                        autoPoolIdPrefix = "<autoPoolIdPrefix>",
                        poolLifetimeOption = "jobschedule",
                        keepAlive = true,
                        pool = new
                        {
                            displayName = "<displayName>",
                            vmSize = "<vmSize>",
                            virtualMachineConfiguration = new
                            {
                                imageReference = new
                                {
                                    publisher = "<publisher>",
                                    offer = "<offer>",
                                    sku = "<sku>",
                                    version = "<version>",
                                    virtualMachineImageId = "<virtualMachineImageId>",
                                },
                                nodeAgentSKUId = "<nodeAgentSKUId>",
                                windowsConfiguration = new
                                {
                                    enableAutomaticUpdates = true,
                                },
                                dataDisks = new object[]
            {
new
{
lun = 1234,
caching = "none",
diskSizeGB = 1234,
storageAccountType = "standard_lrs",
}
            },
                                licenseType = "<licenseType>",
                                containerConfiguration = new
                                {
                                    type = "dockerCompatible",
                                    containerImageNames = new object[]
            {
"<containerImageNames>"
            },
                                    containerRegistries = new object[]
            {
null
            },
                                },
                                diskEncryptionConfiguration = new
                                {
                                    targets = new object[]
            {
"osdisk"
            },
                                },
                                nodePlacementConfiguration = new
                                {
                                    policy = "regional",
                                },
                                extensions = new object[]
            {
new
{
name = "<name>",
publisher = "<publisher>",
type = "<type>",
typeHandlerVersion = "<typeHandlerVersion>",
autoUpgradeMinorVersion = true,
enableAutomaticUpgrade = true,
settings = new
{
key = "<settings>",
},
protectedSettings = new
{
key = "<protectedSettings>",
},
provisionAfterExtensions = new object[]
{
"<provisionAfterExtensions>"
},
}
            },
                                osDisk = new
                                {
                                    ephemeralOSDiskSettings = new
                                    {
                                        placement = "cachedisk",
                                    },
                                    caching = "none",
                                    diskSizeGB = 1234,
                                    managedDisk = new
                                    {
                                        storageAccountType = "standard_lrs",
                                    },
                                    writeAcceleratorEnabled = true,
                                },
                                securityProfile = new
                                {
                                    encryptionAtHost = true,
                                    securityType = "trustedLaunch",
                                    uefiSettings = new
                                    {
                                        secureBootEnabled = true,
                                        vTpmEnabled = true,
                                    },
                                },
                                serviceArtifactReference = new
                                {
                                    id = "<id>",
                                },
                            },
                            taskSlotsPerNode = 1234,
                            taskSchedulingPolicy = new
                            {
                                nodeFillType = "spread",
                            },
                            resizeTimeout = "PT1H23M45S",
                            resourceTags = "<resourceTags>",
                            targetDedicatedNodes = 1234,
                            targetLowPriorityNodes = 1234,
                            enableAutoScale = true,
                            autoScaleFormula = "<autoScaleFormula>",
                            autoScaleEvaluationInterval = "PT1H23M45S",
                            enableInterNodeCommunication = true,
                            networkConfiguration = new
                            {
                                subnetId = "<subnetId>",
                                dynamicVNetAssignmentScope = "none",
                                endpointConfiguration = new
                                {
                                    inboundNATPools = new object[]
            {
new
{
name = "<name>",
protocol = "tcp",
backendPort = 1234,
frontendPortRangeStart = 1234,
frontendPortRangeEnd = 1234,
networkSecurityGroupRules = new object[]
{
new
{
priority = 1234,
access = "allow",
sourceAddressPrefix = "<sourceAddressPrefix>",
sourcePortRanges = new object[]
{
"<sourcePortRanges>"
},
}
},
}
            },
                                },
                                publicIPAddressConfiguration = new
                                {
                                    provision = "batchmanaged",
                                    ipAddressIds = new object[]
            {
"<ipAddressIds>"
            },
                                },
                                enableAcceleratedNetworking = true,
                            },
                            startTask = new
                            {
                                commandLine = "<commandLine>",
                                resourceFiles = new object[]
            {
null
            },
                                environmentSettings = new object[]
            {
null
            },
                                maxTaskRetryCount = 1234,
                                waitForSuccess = true,
                            },
                            applicationPackageReferences = new object[]
            {
null
            },
                            userAccounts = new object[]
            {
new
{
name = "<name>",
password = "<password>",
elevationLevel = "nonadmin",
linuxUserConfiguration = new
{
uid = 1234,
gid = 1234,
sshPrivateKey = "<sshPrivateKey>",
},
windowsUserConfiguration = new
{
loginMode = "batch",
},
}
            },
                            metadata = new object[]
            {
new
{
name = "<name>",
value = "<value>",
}
            },
                            mountConfiguration = new object[]
            {
new
{
azureBlobFileSystemConfiguration = new
{
accountName = "<accountName>",
containerName = "<containerName>",
accountKey = "<accountKey>",
sasKey = "<sasKey>",
blobfuseOptions = "<blobfuseOptions>",
relativeMountPath = "<relativeMountPath>",
},
nfsMountConfiguration = new
{
source = "<source>",
relativeMountPath = "<relativeMountPath>",
mountOptions = "<mountOptions>",
},
cifsMountConfiguration = new
{
username = "<username>",
source = "<source>",
relativeMountPath = "<relativeMountPath>",
mountOptions = "<mountOptions>",
password = "<password>",
},
azureFileShareConfiguration = new
{
accountName = "<accountName>",
azureFileUrl = "<azureFileUrl>",
accountKey = "<accountKey>",
relativeMountPath = "<relativeMountPath>",
mountOptions = "<mountOptions>",
},
}
            },
                            targetNodeCommunicationMode = "default",
                            upgradePolicy = new
                            {
                                mode = "automatic",
                                automaticOSUpgradePolicy = new
                                {
                                    disableAutomaticRollback = true,
                                    enableAutomaticOSUpgrade = true,
                                    useRollingUpgradePolicy = true,
                                    osRollingUpgradeDeferral = true,
                                },
                                rollingUpgradePolicy = new
                                {
                                    enableCrossZoneUpgrade = true,
                                    maxBatchInstancePercent = 1234,
                                    maxUnhealthyInstancePercent = 1234,
                                    maxUnhealthyUpgradedInstancePercent = 1234,
                                    pauseTimeBetweenBatches = "PT1H23M45S",
                                    prioritizeUnhealthyInstances = true,
                                    rollbackFailedInstancesOnPolicyBreach = true,
                                },
                            },
                        },
                    },
                },
                onAllTasksComplete = "noaction",
                onTaskFailure = "noaction",
                networkConfiguration = new
                {
                    subnetId = "<subnetId>",
                },
                metadata = new object[]
            {
null
            },
            });
            Response response = await client.CreateJobAsync(content, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_CreateJob_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchJobCreateContent job = new BatchJobCreateContent("<id>", new BatchPoolInfo
            {
                PoolId = "<poolId>",
                AutoPoolSpecification = new BatchAutoPoolSpecification(BatchPoolLifetimeOption.JobSchedule)
                {
                    AutoPoolIdPrefix = "<autoPoolIdPrefix>",
                    KeepAlive = true,
                    Pool = new BatchPoolSpecification("<vmSize>")
                    {
                        DisplayName = "<displayName>",
                        VirtualMachineConfiguration = new VirtualMachineConfiguration(new ImageReference
                        {
                            Publisher = "<publisher>",
                            Offer = "<offer>",
                            Sku = "<sku>",
                            Version = "<version>",
                            VirtualMachineImageId = "<virtualMachineImageId>",
                        }, "<nodeAgentSKUId>")
                        {
                            WindowsConfiguration = new WindowsConfiguration
                            {
                                EnableAutomaticUpdates = true,
                            },
                            DataDisks = {new DataDisk(1234, 1234)
{
Caching = CachingType.None,
StorageAccountType = StorageAccountType.StandardLRS,
}},
                            LicenseType = "<licenseType>",
                            ContainerConfiguration = new ContainerConfiguration(ContainerType.DockerCompatible)
                            {
                                ContainerImageNames = { "<containerImageNames>" },
                                ContainerRegistries = { default },
                            },
                            DiskEncryptionConfiguration = new DiskEncryptionConfiguration
                            {
                                Targets = { DiskEncryptionTarget.OsDisk },
                            },
                            NodePlacementConfiguration = new BatchNodePlacementConfiguration
                            {
                                Policy = BatchNodePlacementPolicyType.Regional,
                            },
                            Extensions = {new VMExtension("<name>", "<publisher>", "<type>")
{
TypeHandlerVersion = "<typeHandlerVersion>",
AutoUpgradeMinorVersion = true,
EnableAutomaticUpgrade = true,
Settings =
{
["key"] = "<settings>"
},
ProtectedSettings =
{
["key"] = "<protectedSettings>"
},
ProvisionAfterExtensions = {"<provisionAfterExtensions>"},
}},
                            OsDisk = new OSDisk
                            {
                                EphemeralOSDiskSettings = new DiffDiskSettings
                                {
                                    Placement = DiffDiskPlacement.CacheDisk,
                                },
                                Caching = CachingType.None,
                                DiskSizeGB = 1234,
                                ManagedDisk = new ManagedDisk(StorageAccountType.StandardLRS),
                                WriteAcceleratorEnabled = true,
                            },
                            SecurityProfile = new SecurityProfile(true, SecurityTypes.TrustedLaunch, new UefiSettings
                            {
                                SecureBootEnabled = true,
                                VTpmEnabled = true,
                            }),
                            ServiceArtifactReference = new ServiceArtifactReference("<id>"),
                        },
                        TaskSlotsPerNode = 1234,
                        TaskSchedulingPolicy = new BatchTaskSchedulingPolicy(BatchNodeFillType.Spread),
                        ResizeTimeout = XmlConvert.ToTimeSpan("PT1H23M45S"),
                        ResourceTags = "<resourceTags>",
                        TargetDedicatedNodes = 1234,
                        TargetLowPriorityNodes = 1234,
                        EnableAutoScale = true,
                        AutoScaleFormula = "<autoScaleFormula>",
                        AutoScaleEvaluationInterval = XmlConvert.ToTimeSpan("PT1H23M45S"),
                        EnableInterNodeCommunication = true,
                        NetworkConfiguration = new NetworkConfiguration
                        {
                            SubnetId = "<subnetId>",
                            DynamicVNetAssignmentScope = DynamicVNetAssignmentScope.None,
                            EndpointConfiguration = new BatchPoolEndpointConfiguration(new InboundNatPool[]
            {
new InboundNatPool("<name>", InboundEndpointProtocol.Tcp, 1234, 1234, 1234)
{
NetworkSecurityGroupRules = {new NetworkSecurityGroupRule(1234, NetworkSecurityGroupRuleAccess.Allow, "<sourceAddressPrefix>")
{
SourcePortRanges = {"<sourcePortRanges>"},
}},
}
            }),
                            PublicIpAddressConfiguration = new PublicIpAddressConfiguration
                            {
                                IpAddressProvisioningType = IpAddressProvisioningType.BatchManaged,
                                IpAddressIds = { "<ipAddressIds>" },
                            },
                            EnableAcceleratedNetworking = true,
                        },
                        StartTask = new BatchStartTask("<commandLine>")
                        {
                            ContainerSettings = default,
                            ResourceFiles = { default },
                            EnvironmentSettings = { default },
                            UserIdentity = default,
                            MaxTaskRetryCount = 1234,
                            WaitForSuccess = true,
                        },
                        ApplicationPackageReferences = { default },
                        UserAccounts = {new UserAccount("<name>", "<password>")
{
ElevationLevel = ElevationLevel.NonAdmin,
LinuxUserConfiguration = new LinuxUserConfiguration
{
Uid = 1234,
Gid = 1234,
SshPrivateKey = "<sshPrivateKey>",
},
WindowsUserConfiguration = new WindowsUserConfiguration
{
LoginMode = LoginMode.Batch,
},
}},
                        Metadata = { new MetadataItem("<name>", "<value>") },
                        MountConfiguration = {new MountConfiguration
{
AzureBlobFileSystemConfiguration = new AzureBlobFileSystemConfiguration("<accountName>", "<containerName>", "<relativeMountPath>")
{
AccountKey = "<accountKey>",
SasKey = "<sasKey>",
BlobfuseOptions = "<blobfuseOptions>",
IdentityReference = default,
},
NfsMountConfiguration = new NfsMountConfiguration("<source>", "<relativeMountPath>")
{
MountOptions = "<mountOptions>",
},
CifsMountConfiguration = new CifsMountConfiguration("<username>", "<source>", "<relativeMountPath>", "<password>")
{
MountOptions = "<mountOptions>",
},
AzureFileShareConfiguration = new AzureFileShareConfiguration("<accountName>", "<azureFileUrl>", "<accountKey>", "<relativeMountPath>")
{
MountOptions = "<mountOptions>",
},
}},
                        TargetNodeCommunicationMode = BatchNodeCommunicationMode.Default,
                        UpgradePolicy = new UpgradePolicy(UpgradeMode.Automatic)
                        {
                            AutomaticOsUpgradePolicy = new AutomaticOsUpgradePolicy
                            {
                                DisableAutomaticRollback = true,
                                EnableAutomaticOsUpgrade = true,
                                UseRollingUpgradePolicy = true,
                                OsRollingUpgradeDeferral = true,
                            },
                            RollingUpgradePolicy = new RollingUpgradePolicy
                            {
                                EnableCrossZoneUpgrade = true,
                                MaxBatchInstancePercent = 1234,
                                MaxUnhealthyInstancePercent = 1234,
                                MaxUnhealthyUpgradedInstancePercent = 1234,
                                PauseTimeBetweenBatches = XmlConvert.ToTimeSpan("PT1H23M45S"),
                                PrioritizeUnhealthyInstances = true,
                                RollbackFailedInstancesOnPolicyBreach = true,
                            },
                        },
                    },
                },
            })
            {
                DisplayName = "<displayName>",
                UsesTaskDependencies = true,
                Priority = 1234,
                AllowTaskPreemption = true,
                MaxParallelTasks = 1234,
                Constraints = new BatchJobConstraints
                {
                    MaxWallClockTime = XmlConvert.ToTimeSpan("PT1H23M45S"),
                    MaxTaskRetryCount = 1234,
                },
                JobManagerTask = new BatchJobManagerTask("<id>", "<commandLine>")
                {
                    DisplayName = "<displayName>",
                    ContainerSettings = new BatchTaskContainerSettings("<imageName>")
                    {
                        ContainerRunOptions = "<containerRunOptions>",
                        Registry = new ContainerRegistryReference
                        {
                            Username = "<username>",
                            Password = "<password>",
                            RegistryServer = "<registryServer>",
                            IdentityReference = new BatchNodeIdentityReference
                            {
                                ResourceId = "<resourceId>",
                            },
                        },
                        WorkingDirectory = ContainerWorkingDirectory.TaskWorkingDirectory,
                    },
                    ResourceFiles = {new ResourceFile
{
AutoStorageContainerName = "<autoStorageContainerName>",
StorageContainerUrl = "<storageContainerUrl>",
HttpUrl = "<httpUrl>",
BlobPrefix = "<blobPrefix>",
FilePath = "<filePath>",
FileMode = "<fileMode>",
IdentityReference = default,
}},
                    OutputFiles = {new OutputFile("<filePattern>", new OutputFileDestination
{
Container = new OutputFileBlobContainerDestination("<containerUrl>")
{
Path = "<path>",
IdentityReference = default,
UploadHeaders = {new HttpHeader("<name>")
{
Value = "<value>",
}},
},
}, new OutputFileUploadConfig(OutputFileUploadCondition.TaskSuccess))},
                    EnvironmentSettings = {new EnvironmentSetting("<name>")
{
Value = "<value>",
}},
                    Constraints = new BatchTaskConstraints
                    {
                        MaxWallClockTime = XmlConvert.ToTimeSpan("PT1H23M45S"),
                        RetentionTime = XmlConvert.ToTimeSpan("PT1H23M45S"),
                        MaxTaskRetryCount = 1234,
                    },
                    RequiredSlots = 1234,
                    KillJobOnCompletion = true,
                    UserIdentity = new UserIdentity
                    {
                        Username = "<username>",
                        AutoUser = new AutoUserSpecification
                        {
                            Scope = AutoUserScope.Task,
                            ElevationLevel = ElevationLevel.NonAdmin,
                        },
                    },
                    RunExclusive = true,
                    ApplicationPackageReferences = {new BatchApplicationPackageReference("<applicationId>")
{
Version = "<version>",
}},
                    AuthenticationTokenSettings = new AuthenticationTokenSettings
                    {
                        Access = { AccessScope.Job },
                    },
                    AllowLowPriorityNode = true,
                },
                JobPreparationTask = new BatchJobPreparationTask("<commandLine>")
                {
                    Id = "<id>",
                    ContainerSettings = default,
                    ResourceFiles = { default },
                    EnvironmentSettings = { default },
                    Constraints = default,
                    WaitForSuccess = true,
                    UserIdentity = default,
                    RerunOnNodeRebootAfterSuccess = true,
                },
                JobReleaseTask = new BatchJobReleaseTask("<commandLine>")
                {
                    Id = "<id>",
                    ContainerSettings = default,
                    ResourceFiles = { default },
                    EnvironmentSettings = { default },
                    MaxWallClockTime = XmlConvert.ToTimeSpan("PT1H23M45S"),
                    RetentionTime = XmlConvert.ToTimeSpan("PT1H23M45S"),
                    UserIdentity = default,
                },
                CommonEnvironmentSettings = { default },
                OnAllTasksComplete = OnAllBatchTasksComplete.NoAction,
                OnTaskFailure = OnBatchTaskFailure.NoAction,
                NetworkConfiguration = new BatchJobNetworkConfiguration("<subnetId>"),
                Metadata = { default },
            };
            Response response = client.CreateJob(job, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_CreateJob_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchJobCreateContent job = new BatchJobCreateContent("<id>", new BatchPoolInfo
            {
                PoolId = "<poolId>",
                AutoPoolSpecification = new BatchAutoPoolSpecification(BatchPoolLifetimeOption.JobSchedule)
                {
                    AutoPoolIdPrefix = "<autoPoolIdPrefix>",
                    KeepAlive = true,
                    Pool = new BatchPoolSpecification("<vmSize>")
                    {
                        DisplayName = "<displayName>",
                        VirtualMachineConfiguration = new VirtualMachineConfiguration(new ImageReference
                        {
                            Publisher = "<publisher>",
                            Offer = "<offer>",
                            Sku = "<sku>",
                            Version = "<version>",
                            VirtualMachineImageId = "<virtualMachineImageId>",
                        }, "<nodeAgentSKUId>")
                        {
                            WindowsConfiguration = new WindowsConfiguration
                            {
                                EnableAutomaticUpdates = true,
                            },
                            DataDisks = {new DataDisk(1234, 1234)
{
Caching = CachingType.None,
StorageAccountType = StorageAccountType.StandardLRS,
}},
                            LicenseType = "<licenseType>",
                            ContainerConfiguration = new ContainerConfiguration(ContainerType.DockerCompatible)
                            {
                                ContainerImageNames = { "<containerImageNames>" },
                                ContainerRegistries = { default },
                            },
                            DiskEncryptionConfiguration = new DiskEncryptionConfiguration
                            {
                                Targets = { DiskEncryptionTarget.OsDisk },
                            },
                            NodePlacementConfiguration = new BatchNodePlacementConfiguration
                            {
                                Policy = BatchNodePlacementPolicyType.Regional,
                            },
                            Extensions = {new VMExtension("<name>", "<publisher>", "<type>")
{
TypeHandlerVersion = "<typeHandlerVersion>",
AutoUpgradeMinorVersion = true,
EnableAutomaticUpgrade = true,
Settings =
{
["key"] = "<settings>"
},
ProtectedSettings =
{
["key"] = "<protectedSettings>"
},
ProvisionAfterExtensions = {"<provisionAfterExtensions>"},
}},
                            OsDisk = new OSDisk
                            {
                                EphemeralOSDiskSettings = new DiffDiskSettings
                                {
                                    Placement = DiffDiskPlacement.CacheDisk,
                                },
                                Caching = CachingType.None,
                                DiskSizeGB = 1234,
                                ManagedDisk = new ManagedDisk(StorageAccountType.StandardLRS),
                                WriteAcceleratorEnabled = true,
                            },
                            SecurityProfile = new SecurityProfile(true, SecurityTypes.TrustedLaunch, new UefiSettings
                            {
                                SecureBootEnabled = true,
                                VTpmEnabled = true,
                            }),
                            ServiceArtifactReference = new ServiceArtifactReference("<id>"),
                        },
                        TaskSlotsPerNode = 1234,
                        TaskSchedulingPolicy = new BatchTaskSchedulingPolicy(BatchNodeFillType.Spread),
                        ResizeTimeout = XmlConvert.ToTimeSpan("PT1H23M45S"),
                        ResourceTags = "<resourceTags>",
                        TargetDedicatedNodes = 1234,
                        TargetLowPriorityNodes = 1234,
                        EnableAutoScale = true,
                        AutoScaleFormula = "<autoScaleFormula>",
                        AutoScaleEvaluationInterval = XmlConvert.ToTimeSpan("PT1H23M45S"),
                        EnableInterNodeCommunication = true,
                        NetworkConfiguration = new NetworkConfiguration
                        {
                            SubnetId = "<subnetId>",
                            DynamicVNetAssignmentScope = DynamicVNetAssignmentScope.None,
                            EndpointConfiguration = new BatchPoolEndpointConfiguration(new InboundNatPool[]
            {
new InboundNatPool("<name>", InboundEndpointProtocol.Tcp, 1234, 1234, 1234)
{
NetworkSecurityGroupRules = {new NetworkSecurityGroupRule(1234, NetworkSecurityGroupRuleAccess.Allow, "<sourceAddressPrefix>")
{
SourcePortRanges = {"<sourcePortRanges>"},
}},
}
            }),
                            PublicIpAddressConfiguration = new PublicIpAddressConfiguration
                            {
                                IpAddressProvisioningType = IpAddressProvisioningType.BatchManaged,
                                IpAddressIds = { "<ipAddressIds>" },
                            },
                            EnableAcceleratedNetworking = true,
                        },
                        StartTask = new BatchStartTask("<commandLine>")
                        {
                            ContainerSettings = default,
                            ResourceFiles = { default },
                            EnvironmentSettings = { default },
                            UserIdentity = default,
                            MaxTaskRetryCount = 1234,
                            WaitForSuccess = true,
                        },
                        ApplicationPackageReferences = { default },
                        UserAccounts = {new UserAccount("<name>", "<password>")
{
ElevationLevel = ElevationLevel.NonAdmin,
LinuxUserConfiguration = new LinuxUserConfiguration
{
Uid = 1234,
Gid = 1234,
SshPrivateKey = "<sshPrivateKey>",
},
WindowsUserConfiguration = new WindowsUserConfiguration
{
LoginMode = LoginMode.Batch,
},
}},
                        Metadata = { new MetadataItem("<name>", "<value>") },
                        MountConfiguration = {new MountConfiguration
{
AzureBlobFileSystemConfiguration = new AzureBlobFileSystemConfiguration("<accountName>", "<containerName>", "<relativeMountPath>")
{
AccountKey = "<accountKey>",
SasKey = "<sasKey>",
BlobfuseOptions = "<blobfuseOptions>",
IdentityReference = default,
},
NfsMountConfiguration = new NfsMountConfiguration("<source>", "<relativeMountPath>")
{
MountOptions = "<mountOptions>",
},
CifsMountConfiguration = new CifsMountConfiguration("<username>", "<source>", "<relativeMountPath>", "<password>")
{
MountOptions = "<mountOptions>",
},
AzureFileShareConfiguration = new AzureFileShareConfiguration("<accountName>", "<azureFileUrl>", "<accountKey>", "<relativeMountPath>")
{
MountOptions = "<mountOptions>",
},
}},
                        TargetNodeCommunicationMode = BatchNodeCommunicationMode.Default,
                        UpgradePolicy = new UpgradePolicy(UpgradeMode.Automatic)
                        {
                            AutomaticOsUpgradePolicy = new AutomaticOsUpgradePolicy
                            {
                                DisableAutomaticRollback = true,
                                EnableAutomaticOsUpgrade = true,
                                UseRollingUpgradePolicy = true,
                                OsRollingUpgradeDeferral = true,
                            },
                            RollingUpgradePolicy = new RollingUpgradePolicy
                            {
                                EnableCrossZoneUpgrade = true,
                                MaxBatchInstancePercent = 1234,
                                MaxUnhealthyInstancePercent = 1234,
                                MaxUnhealthyUpgradedInstancePercent = 1234,
                                PauseTimeBetweenBatches = XmlConvert.ToTimeSpan("PT1H23M45S"),
                                PrioritizeUnhealthyInstances = true,
                                RollbackFailedInstancesOnPolicyBreach = true,
                            },
                        },
                    },
                },
            })
            {
                DisplayName = "<displayName>",
                UsesTaskDependencies = true,
                Priority = 1234,
                AllowTaskPreemption = true,
                MaxParallelTasks = 1234,
                Constraints = new BatchJobConstraints
                {
                    MaxWallClockTime = XmlConvert.ToTimeSpan("PT1H23M45S"),
                    MaxTaskRetryCount = 1234,
                },
                JobManagerTask = new BatchJobManagerTask("<id>", "<commandLine>")
                {
                    DisplayName = "<displayName>",
                    ContainerSettings = new BatchTaskContainerSettings("<imageName>")
                    {
                        ContainerRunOptions = "<containerRunOptions>",
                        Registry = new ContainerRegistryReference
                        {
                            Username = "<username>",
                            Password = "<password>",
                            RegistryServer = "<registryServer>",
                            IdentityReference = new BatchNodeIdentityReference
                            {
                                ResourceId = "<resourceId>",
                            },
                        },
                        WorkingDirectory = ContainerWorkingDirectory.TaskWorkingDirectory,
                    },
                    ResourceFiles = {new ResourceFile
{
AutoStorageContainerName = "<autoStorageContainerName>",
StorageContainerUrl = "<storageContainerUrl>",
HttpUrl = "<httpUrl>",
BlobPrefix = "<blobPrefix>",
FilePath = "<filePath>",
FileMode = "<fileMode>",
IdentityReference = default,
}},
                    OutputFiles = {new OutputFile("<filePattern>", new OutputFileDestination
{
Container = new OutputFileBlobContainerDestination("<containerUrl>")
{
Path = "<path>",
IdentityReference = default,
UploadHeaders = {new HttpHeader("<name>")
{
Value = "<value>",
}},
},
}, new OutputFileUploadConfig(OutputFileUploadCondition.TaskSuccess))},
                    EnvironmentSettings = {new EnvironmentSetting("<name>")
{
Value = "<value>",
}},
                    Constraints = new BatchTaskConstraints
                    {
                        MaxWallClockTime = XmlConvert.ToTimeSpan("PT1H23M45S"),
                        RetentionTime = XmlConvert.ToTimeSpan("PT1H23M45S"),
                        MaxTaskRetryCount = 1234,
                    },
                    RequiredSlots = 1234,
                    KillJobOnCompletion = true,
                    UserIdentity = new UserIdentity
                    {
                        Username = "<username>",
                        AutoUser = new AutoUserSpecification
                        {
                            Scope = AutoUserScope.Task,
                            ElevationLevel = ElevationLevel.NonAdmin,
                        },
                    },
                    RunExclusive = true,
                    ApplicationPackageReferences = {new BatchApplicationPackageReference("<applicationId>")
{
Version = "<version>",
}},
                    AuthenticationTokenSettings = new AuthenticationTokenSettings
                    {
                        Access = { AccessScope.Job },
                    },
                    AllowLowPriorityNode = true,
                },
                JobPreparationTask = new BatchJobPreparationTask("<commandLine>")
                {
                    Id = "<id>",
                    ContainerSettings = default,
                    ResourceFiles = { default },
                    EnvironmentSettings = { default },
                    Constraints = default,
                    WaitForSuccess = true,
                    UserIdentity = default,
                    RerunOnNodeRebootAfterSuccess = true,
                },
                JobReleaseTask = new BatchJobReleaseTask("<commandLine>")
                {
                    Id = "<id>",
                    ContainerSettings = default,
                    ResourceFiles = { default },
                    EnvironmentSettings = { default },
                    MaxWallClockTime = XmlConvert.ToTimeSpan("PT1H23M45S"),
                    RetentionTime = XmlConvert.ToTimeSpan("PT1H23M45S"),
                    UserIdentity = default,
                },
                CommonEnvironmentSettings = { default },
                OnAllTasksComplete = OnAllBatchTasksComplete.NoAction,
                OnTaskFailure = OnBatchTaskFailure.NoAction,
                NetworkConfiguration = new BatchJobNetworkConfiguration("<subnetId>"),
                Metadata = { default },
            };
            Response response = await client.CreateJobAsync(job, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetJobTaskCounts_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = client.GetJobTaskCounts("<jobId>", null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("taskCounts").GetProperty("active").ToString());
            Console.WriteLine(result.GetProperty("taskCounts").GetProperty("running").ToString());
            Console.WriteLine(result.GetProperty("taskCounts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("taskCounts").GetProperty("succeeded").ToString());
            Console.WriteLine(result.GetProperty("taskCounts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("taskSlotCounts").GetProperty("active").ToString());
            Console.WriteLine(result.GetProperty("taskSlotCounts").GetProperty("running").ToString());
            Console.WriteLine(result.GetProperty("taskSlotCounts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("taskSlotCounts").GetProperty("succeeded").ToString());
            Console.WriteLine(result.GetProperty("taskSlotCounts").GetProperty("failed").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetJobTaskCounts_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = await client.GetJobTaskCountsAsync("<jobId>", null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("taskCounts").GetProperty("active").ToString());
            Console.WriteLine(result.GetProperty("taskCounts").GetProperty("running").ToString());
            Console.WriteLine(result.GetProperty("taskCounts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("taskCounts").GetProperty("succeeded").ToString());
            Console.WriteLine(result.GetProperty("taskCounts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("taskSlotCounts").GetProperty("active").ToString());
            Console.WriteLine(result.GetProperty("taskSlotCounts").GetProperty("running").ToString());
            Console.WriteLine(result.GetProperty("taskSlotCounts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("taskSlotCounts").GetProperty("succeeded").ToString());
            Console.WriteLine(result.GetProperty("taskSlotCounts").GetProperty("failed").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetJobTaskCounts_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response<BatchTaskCountsResult> response = client.GetJobTaskCounts("<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetJobTaskCounts_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response<BatchTaskCountsResult> response = await client.GetJobTaskCountsAsync("<jobId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetJobTaskCounts_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = client.GetJobTaskCounts("<jobId>", 1234, DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("taskCounts").GetProperty("active").ToString());
            Console.WriteLine(result.GetProperty("taskCounts").GetProperty("running").ToString());
            Console.WriteLine(result.GetProperty("taskCounts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("taskCounts").GetProperty("succeeded").ToString());
            Console.WriteLine(result.GetProperty("taskCounts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("taskSlotCounts").GetProperty("active").ToString());
            Console.WriteLine(result.GetProperty("taskSlotCounts").GetProperty("running").ToString());
            Console.WriteLine(result.GetProperty("taskSlotCounts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("taskSlotCounts").GetProperty("succeeded").ToString());
            Console.WriteLine(result.GetProperty("taskSlotCounts").GetProperty("failed").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetJobTaskCounts_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = await client.GetJobTaskCountsAsync("<jobId>", 1234, DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("taskCounts").GetProperty("active").ToString());
            Console.WriteLine(result.GetProperty("taskCounts").GetProperty("running").ToString());
            Console.WriteLine(result.GetProperty("taskCounts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("taskCounts").GetProperty("succeeded").ToString());
            Console.WriteLine(result.GetProperty("taskCounts").GetProperty("failed").ToString());
            Console.WriteLine(result.GetProperty("taskSlotCounts").GetProperty("active").ToString());
            Console.WriteLine(result.GetProperty("taskSlotCounts").GetProperty("running").ToString());
            Console.WriteLine(result.GetProperty("taskSlotCounts").GetProperty("completed").ToString());
            Console.WriteLine(result.GetProperty("taskSlotCounts").GetProperty("succeeded").ToString());
            Console.WriteLine(result.GetProperty("taskSlotCounts").GetProperty("failed").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetJobTaskCounts_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response<BatchTaskCountsResult> response = client.GetJobTaskCounts("<jobId>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetJobTaskCounts_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response<BatchTaskCountsResult> response = await client.GetJobTaskCountsAsync("<jobId>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_DeleteJobSchedule_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = client.DeleteJobSchedule("<jobScheduleId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_DeleteJobSchedule_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = await client.DeleteJobScheduleAsync("<jobScheduleId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_DeleteJobSchedule_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = client.DeleteJobSchedule("<jobScheduleId>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), requestConditions: null);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_DeleteJobSchedule_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = await client.DeleteJobScheduleAsync("<jobScheduleId>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), requestConditions: null);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetJobSchedule_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = client.GetJobSchedule("<jobScheduleId>", null, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetJobSchedule_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = await client.GetJobScheduleAsync("<jobScheduleId>", null, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetJobSchedule_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response<BatchJobSchedule> response = client.GetJobSchedule("<jobScheduleId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetJobSchedule_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response<BatchJobSchedule> response = await client.GetJobScheduleAsync("<jobScheduleId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetJobSchedule_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = client.GetJobSchedule("<jobScheduleId>", 1234, DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), new string[] { "<select>" }, new string[] { "<expand>" }, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("url").ToString());
            Console.WriteLine(result.GetProperty("eTag").ToString());
            Console.WriteLine(result.GetProperty("lastModified").ToString());
            Console.WriteLine(result.GetProperty("creationTime").ToString());
            Console.WriteLine(result.GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("stateTransitionTime").ToString());
            Console.WriteLine(result.GetProperty("previousState").ToString());
            Console.WriteLine(result.GetProperty("previousStateTransitionTime").ToString());
            Console.WriteLine(result.GetProperty("schedule").GetProperty("doNotRunUntil").ToString());
            Console.WriteLine(result.GetProperty("schedule").GetProperty("doNotRunAfter").ToString());
            Console.WriteLine(result.GetProperty("schedule").GetProperty("startWindow").ToString());
            Console.WriteLine(result.GetProperty("schedule").GetProperty("recurrenceInterval").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("priority").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("allowTaskPreemption").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("maxParallelTasks").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("usesTaskDependencies").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("onAllTasksComplete").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("onTaskFailure").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("networkConfiguration").GetProperty("subnetId").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("constraints").GetProperty("maxWallClockTime").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("constraints").GetProperty("maxTaskRetryCount").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("commandLine").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("containerRunOptions").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("imageName").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("password").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("registryServer").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("workingDirectory").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("autoStorageContainerName").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("storageContainerUrl").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("httpUrl").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("blobPrefix").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("filePath").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("fileMode").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("filePattern").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("path").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("containerUrl").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("uploadHeaders")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("uploadHeaders")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("uploadOptions").GetProperty("uploadCondition").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("environmentSettings")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("environmentSettings")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("constraints").GetProperty("maxWallClockTime").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("constraints").GetProperty("retentionTime").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("constraints").GetProperty("maxTaskRetryCount").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("requiredSlots").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("killJobOnCompletion").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("userIdentity").GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("scope").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("elevationLevel").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("runExclusive").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("applicationPackageReferences")[0].GetProperty("applicationId").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("applicationPackageReferences")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("authenticationTokenSettings").GetProperty("access")[0].ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("allowLowPriorityNode").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("commandLine").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("containerRunOptions").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("imageName").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("password").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("registryServer").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("workingDirectory").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("autoStorageContainerName").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("storageContainerUrl").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("httpUrl").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("blobPrefix").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("filePath").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("fileMode").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("environmentSettings")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("environmentSettings")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("constraints").GetProperty("maxWallClockTime").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("constraints").GetProperty("retentionTime").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("constraints").GetProperty("maxTaskRetryCount").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("waitForSuccess").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("userIdentity").GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("scope").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("elevationLevel").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("rerunOnNodeRebootAfterSuccess").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("commandLine").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("containerRunOptions").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("imageName").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("password").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("registryServer").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("workingDirectory").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("autoStorageContainerName").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("storageContainerUrl").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("httpUrl").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("blobPrefix").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("filePath").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("fileMode").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("environmentSettings")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("environmentSettings")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("maxWallClockTime").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("retentionTime").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("userIdentity").GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("scope").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("elevationLevel").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("commonEnvironmentSettings")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("commonEnvironmentSettings")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("poolId").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("autoPoolIdPrefix").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("poolLifetimeOption").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("keepAlive").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("vmSize").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("publisher").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("offer").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("sku").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("virtualMachineImageId").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("exactVersion").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("nodeAgentSKUId").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("windowsConfiguration").GetProperty("enableAutomaticUpdates").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("lun").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("caching").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("diskSizeGB").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("storageAccountType").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("licenseType").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerImageNames")[0].ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("password").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("registryServer").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("diskEncryptionConfiguration").GetProperty("targets")[0].ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("nodePlacementConfiguration").GetProperty("policy").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("publisher").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("typeHandlerVersion").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("autoUpgradeMinorVersion").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("enableAutomaticUpgrade").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("settings").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("protectedSettings").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("provisionAfterExtensions")[0].ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("ephemeralOSDiskSettings").GetProperty("placement").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("caching").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("managedDisk").GetProperty("storageAccountType").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("writeAcceleratorEnabled").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("securityProfile").GetProperty("encryptionAtHost").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("securityProfile").GetProperty("securityType").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("secureBootEnabled").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("vTpmEnabled").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("serviceArtifactReference").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("taskSlotsPerNode").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("taskSchedulingPolicy").GetProperty("nodeFillType").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("resizeTimeout").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("resourceTags").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("targetDedicatedNodes").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("targetLowPriorityNodes").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("enableAutoScale").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("autoScaleFormula").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("autoScaleEvaluationInterval").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("enableInterNodeCommunication").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("subnetId").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("dynamicVNetAssignmentScope").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("protocol").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("backendPort").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("frontendPortRangeStart").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("frontendPortRangeEnd").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("priority").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("access").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("sourceAddressPrefix").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("sourcePortRanges")[0].ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("publicIPAddressConfiguration").GetProperty("provision").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("publicIPAddressConfiguration").GetProperty("ipAddressIds")[0].ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("enableAcceleratedNetworking").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("commandLine").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("containerRunOptions").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("imageName").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("password").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("registryServer").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("workingDirectory").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("autoStorageContainerName").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("storageContainerUrl").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("httpUrl").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("blobPrefix").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("filePath").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("fileMode").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("environmentSettings")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("environmentSettings")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("userIdentity").GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("scope").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("elevationLevel").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("maxTaskRetryCount").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("waitForSuccess").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("applicationPackageReferences")[0].GetProperty("applicationId").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("applicationPackageReferences")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("password").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("elevationLevel").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("uid").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("gid").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("sshPrivateKey").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("windowsUserConfiguration").GetProperty("loginMode").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("metadata")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("metadata")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("accountName").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("containerName").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("accountKey").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("sasKey").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("blobfuseOptions").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("relativeMountPath").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("relativeMountPath").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("mountOptions").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("relativeMountPath").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("mountOptions").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("password").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("accountName").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("azureFileUrl").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("accountKey").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("relativeMountPath").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("mountOptions").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("targetNodeCommunicationMode").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("mode").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("automaticOSUpgradePolicy").GetProperty("disableAutomaticRollback").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("automaticOSUpgradePolicy").GetProperty("enableAutomaticOSUpgrade").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("automaticOSUpgradePolicy").GetProperty("useRollingUpgradePolicy").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("automaticOSUpgradePolicy").GetProperty("osRollingUpgradeDeferral").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("enableCrossZoneUpgrade").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("maxBatchInstancePercent").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("maxUnhealthyInstancePercent").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("maxUnhealthyUpgradedInstancePercent").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("pauseTimeBetweenBatches").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("prioritizeUnhealthyInstances").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("rollbackFailedInstancesOnPolicyBreach").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("metadata")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("metadata")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("executionInfo").GetProperty("nextRunTime").ToString());
            Console.WriteLine(result.GetProperty("executionInfo").GetProperty("recentJob").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("executionInfo").GetProperty("recentJob").GetProperty("url").ToString());
            Console.WriteLine(result.GetProperty("executionInfo").GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("metadata")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("metadata")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("url").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("lastUpdateTime").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("userCPUTime").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("kernelCPUTime").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("wallClockTime").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("readIOps").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("writeIOps").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("readIOGiB").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("writeIOGiB").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("numSucceededTasks").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("numFailedTasks").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("numTaskRetries").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("waitTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetJobSchedule_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = await client.GetJobScheduleAsync("<jobScheduleId>", 1234, DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), new string[] { "<select>" }, new string[] { "<expand>" }, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("url").ToString());
            Console.WriteLine(result.GetProperty("eTag").ToString());
            Console.WriteLine(result.GetProperty("lastModified").ToString());
            Console.WriteLine(result.GetProperty("creationTime").ToString());
            Console.WriteLine(result.GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("stateTransitionTime").ToString());
            Console.WriteLine(result.GetProperty("previousState").ToString());
            Console.WriteLine(result.GetProperty("previousStateTransitionTime").ToString());
            Console.WriteLine(result.GetProperty("schedule").GetProperty("doNotRunUntil").ToString());
            Console.WriteLine(result.GetProperty("schedule").GetProperty("doNotRunAfter").ToString());
            Console.WriteLine(result.GetProperty("schedule").GetProperty("startWindow").ToString());
            Console.WriteLine(result.GetProperty("schedule").GetProperty("recurrenceInterval").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("priority").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("allowTaskPreemption").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("maxParallelTasks").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("usesTaskDependencies").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("onAllTasksComplete").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("onTaskFailure").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("networkConfiguration").GetProperty("subnetId").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("constraints").GetProperty("maxWallClockTime").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("constraints").GetProperty("maxTaskRetryCount").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("commandLine").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("containerRunOptions").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("imageName").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("password").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("registryServer").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("workingDirectory").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("autoStorageContainerName").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("storageContainerUrl").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("httpUrl").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("blobPrefix").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("filePath").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("fileMode").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("filePattern").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("path").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("containerUrl").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("uploadHeaders")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("uploadHeaders")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("uploadOptions").GetProperty("uploadCondition").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("environmentSettings")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("environmentSettings")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("constraints").GetProperty("maxWallClockTime").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("constraints").GetProperty("retentionTime").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("constraints").GetProperty("maxTaskRetryCount").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("requiredSlots").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("killJobOnCompletion").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("userIdentity").GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("scope").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("elevationLevel").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("runExclusive").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("applicationPackageReferences")[0].GetProperty("applicationId").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("applicationPackageReferences")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("authenticationTokenSettings").GetProperty("access")[0].ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("allowLowPriorityNode").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("commandLine").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("containerRunOptions").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("imageName").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("password").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("registryServer").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("workingDirectory").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("autoStorageContainerName").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("storageContainerUrl").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("httpUrl").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("blobPrefix").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("filePath").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("fileMode").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("environmentSettings")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("environmentSettings")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("constraints").GetProperty("maxWallClockTime").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("constraints").GetProperty("retentionTime").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("constraints").GetProperty("maxTaskRetryCount").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("waitForSuccess").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("userIdentity").GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("scope").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("elevationLevel").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("rerunOnNodeRebootAfterSuccess").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("commandLine").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("containerRunOptions").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("imageName").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("password").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("registryServer").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("workingDirectory").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("autoStorageContainerName").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("storageContainerUrl").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("httpUrl").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("blobPrefix").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("filePath").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("fileMode").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("environmentSettings")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("environmentSettings")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("maxWallClockTime").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("retentionTime").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("userIdentity").GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("scope").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("elevationLevel").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("commonEnvironmentSettings")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("commonEnvironmentSettings")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("poolId").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("autoPoolIdPrefix").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("poolLifetimeOption").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("keepAlive").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("vmSize").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("publisher").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("offer").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("sku").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("virtualMachineImageId").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("exactVersion").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("nodeAgentSKUId").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("windowsConfiguration").GetProperty("enableAutomaticUpdates").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("lun").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("caching").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("diskSizeGB").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("storageAccountType").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("licenseType").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerImageNames")[0].ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("password").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("registryServer").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("diskEncryptionConfiguration").GetProperty("targets")[0].ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("nodePlacementConfiguration").GetProperty("policy").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("publisher").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("typeHandlerVersion").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("autoUpgradeMinorVersion").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("enableAutomaticUpgrade").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("settings").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("protectedSettings").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("provisionAfterExtensions")[0].ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("ephemeralOSDiskSettings").GetProperty("placement").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("caching").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("managedDisk").GetProperty("storageAccountType").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("writeAcceleratorEnabled").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("securityProfile").GetProperty("encryptionAtHost").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("securityProfile").GetProperty("securityType").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("secureBootEnabled").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("vTpmEnabled").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("serviceArtifactReference").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("taskSlotsPerNode").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("taskSchedulingPolicy").GetProperty("nodeFillType").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("resizeTimeout").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("resourceTags").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("targetDedicatedNodes").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("targetLowPriorityNodes").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("enableAutoScale").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("autoScaleFormula").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("autoScaleEvaluationInterval").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("enableInterNodeCommunication").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("subnetId").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("dynamicVNetAssignmentScope").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("protocol").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("backendPort").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("frontendPortRangeStart").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("frontendPortRangeEnd").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("priority").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("access").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("sourceAddressPrefix").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("sourcePortRanges")[0].ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("publicIPAddressConfiguration").GetProperty("provision").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("publicIPAddressConfiguration").GetProperty("ipAddressIds")[0].ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("enableAcceleratedNetworking").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("commandLine").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("containerRunOptions").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("imageName").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("password").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("registryServer").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("workingDirectory").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("autoStorageContainerName").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("storageContainerUrl").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("httpUrl").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("blobPrefix").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("filePath").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("fileMode").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("environmentSettings")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("environmentSettings")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("userIdentity").GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("scope").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("elevationLevel").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("maxTaskRetryCount").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("waitForSuccess").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("applicationPackageReferences")[0].GetProperty("applicationId").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("applicationPackageReferences")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("password").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("elevationLevel").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("uid").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("gid").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("sshPrivateKey").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("windowsUserConfiguration").GetProperty("loginMode").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("metadata")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("metadata")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("accountName").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("containerName").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("accountKey").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("sasKey").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("blobfuseOptions").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("relativeMountPath").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("relativeMountPath").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("mountOptions").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("relativeMountPath").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("mountOptions").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("password").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("accountName").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("azureFileUrl").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("accountKey").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("relativeMountPath").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("mountOptions").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("targetNodeCommunicationMode").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("mode").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("automaticOSUpgradePolicy").GetProperty("disableAutomaticRollback").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("automaticOSUpgradePolicy").GetProperty("enableAutomaticOSUpgrade").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("automaticOSUpgradePolicy").GetProperty("useRollingUpgradePolicy").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("automaticOSUpgradePolicy").GetProperty("osRollingUpgradeDeferral").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("enableCrossZoneUpgrade").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("maxBatchInstancePercent").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("maxUnhealthyInstancePercent").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("maxUnhealthyUpgradedInstancePercent").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("pauseTimeBetweenBatches").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("prioritizeUnhealthyInstances").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("rollbackFailedInstancesOnPolicyBreach").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("metadata")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("metadata")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("executionInfo").GetProperty("nextRunTime").ToString());
            Console.WriteLine(result.GetProperty("executionInfo").GetProperty("recentJob").GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("executionInfo").GetProperty("recentJob").GetProperty("url").ToString());
            Console.WriteLine(result.GetProperty("executionInfo").GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("metadata")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("metadata")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("url").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("lastUpdateTime").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("userCPUTime").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("kernelCPUTime").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("wallClockTime").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("readIOps").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("writeIOps").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("readIOGiB").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("writeIOGiB").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("numSucceededTasks").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("numFailedTasks").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("numTaskRetries").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("waitTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetJobSchedule_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response<BatchJobSchedule> response = client.GetJobSchedule("<jobScheduleId>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), select: new string[] { "<select>" }, expand: new string[] { "<expand>" }, requestConditions: null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetJobSchedule_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response<BatchJobSchedule> response = await client.GetJobScheduleAsync("<jobScheduleId>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), select: new string[] { "<select>" }, expand: new string[] { "<expand>" }, requestConditions: null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_UpdateJobSchedule_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.UpdateJobSchedule("<jobScheduleId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_UpdateJobSchedule_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.UpdateJobScheduleAsync("<jobScheduleId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_UpdateJobSchedule_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                schedule = new
                {
                    doNotRunUntil = "2022-05-10T18:57:31.2311892Z",
                    doNotRunAfter = "2022-05-10T18:57:31.2311892Z",
                    startWindow = "PT1H23M45S",
                    recurrenceInterval = "PT1H23M45S",
                },
                jobSpecification = new
                {
                    priority = 1234,
                    allowTaskPreemption = true,
                    maxParallelTasks = 1234,
                    displayName = "<displayName>",
                    usesTaskDependencies = true,
                    onAllTasksComplete = "noaction",
                    onTaskFailure = "noaction",
                    networkConfiguration = new
                    {
                        subnetId = "<subnetId>",
                    },
                    constraints = new
                    {
                        maxWallClockTime = "PT1H23M45S",
                        maxTaskRetryCount = 1234,
                    },
                    jobManagerTask = new
                    {
                        id = "<id>",
                        displayName = "<displayName>",
                        commandLine = "<commandLine>",
                        containerSettings = new
                        {
                            containerRunOptions = "<containerRunOptions>",
                            imageName = "<imageName>",
                            registry = new
                            {
                                username = "<username>",
                                password = "<password>",
                                registryServer = "<registryServer>",
                                identityReference = new
                                {
                                    resourceId = "<resourceId>",
                                },
                            },
                            workingDirectory = "taskWorkingDirectory",
                        },
                        resourceFiles = new object[]
            {
new
{
autoStorageContainerName = "<autoStorageContainerName>",
storageContainerUrl = "<storageContainerUrl>",
httpUrl = "<httpUrl>",
blobPrefix = "<blobPrefix>",
filePath = "<filePath>",
fileMode = "<fileMode>",
}
            },
                        outputFiles = new object[]
            {
new
{
filePattern = "<filePattern>",
destination = new
{
container = new
{
path = "<path>",
containerUrl = "<containerUrl>",
uploadHeaders = new object[]
{
new
{
name = "<name>",
value = "<value>",
}
},
},
},
uploadOptions = new
{
uploadCondition = "tasksuccess",
},
}
            },
                        environmentSettings = new object[]
            {
new
{
name = "<name>",
value = "<value>",
}
            },
                        constraints = new
                        {
                            maxWallClockTime = "PT1H23M45S",
                            retentionTime = "PT1H23M45S",
                            maxTaskRetryCount = 1234,
                        },
                        requiredSlots = 1234,
                        killJobOnCompletion = true,
                        userIdentity = new
                        {
                            username = "<username>",
                            autoUser = new
                            {
                                scope = "task",
                                elevationLevel = "nonadmin",
                            },
                        },
                        runExclusive = true,
                        applicationPackageReferences = new object[]
            {
new
{
applicationId = "<applicationId>",
version = "<version>",
}
            },
                        authenticationTokenSettings = new
                        {
                            access = new object[]
            {
"job"
            },
                        },
                        allowLowPriorityNode = true,
                    },
                    jobPreparationTask = new
                    {
                        id = "<id>",
                        commandLine = "<commandLine>",
                        resourceFiles = new object[]
            {
null
            },
                        environmentSettings = new object[]
            {
null
            },
                        waitForSuccess = true,
                        rerunOnNodeRebootAfterSuccess = true,
                    },
                    jobReleaseTask = new
                    {
                        id = "<id>",
                        commandLine = "<commandLine>",
                        resourceFiles = new object[]
            {
null
            },
                        environmentSettings = new object[]
            {
null
            },
                        maxWallClockTime = "PT1H23M45S",
                        retentionTime = "PT1H23M45S",
                    },
                    commonEnvironmentSettings = new object[]
            {
null
            },
                    poolInfo = new
                    {
                        poolId = "<poolId>",
                        autoPoolSpecification = new
                        {
                            autoPoolIdPrefix = "<autoPoolIdPrefix>",
                            poolLifetimeOption = "jobschedule",
                            keepAlive = true,
                            pool = new
                            {
                                displayName = "<displayName>",
                                vmSize = "<vmSize>",
                                virtualMachineConfiguration = new
                                {
                                    imageReference = new
                                    {
                                        publisher = "<publisher>",
                                        offer = "<offer>",
                                        sku = "<sku>",
                                        version = "<version>",
                                        virtualMachineImageId = "<virtualMachineImageId>",
                                    },
                                    nodeAgentSKUId = "<nodeAgentSKUId>",
                                    windowsConfiguration = new
                                    {
                                        enableAutomaticUpdates = true,
                                    },
                                    dataDisks = new object[]
            {
new
{
lun = 1234,
caching = "none",
diskSizeGB = 1234,
storageAccountType = "standard_lrs",
}
            },
                                    licenseType = "<licenseType>",
                                    containerConfiguration = new
                                    {
                                        type = "dockerCompatible",
                                        containerImageNames = new object[]
            {
"<containerImageNames>"
            },
                                        containerRegistries = new object[]
            {
null
            },
                                    },
                                    diskEncryptionConfiguration = new
                                    {
                                        targets = new object[]
            {
"osdisk"
            },
                                    },
                                    nodePlacementConfiguration = new
                                    {
                                        policy = "regional",
                                    },
                                    extensions = new object[]
            {
new
{
name = "<name>",
publisher = "<publisher>",
type = "<type>",
typeHandlerVersion = "<typeHandlerVersion>",
autoUpgradeMinorVersion = true,
enableAutomaticUpgrade = true,
settings = new
{
key = "<settings>",
},
protectedSettings = new
{
key = "<protectedSettings>",
},
provisionAfterExtensions = new object[]
{
"<provisionAfterExtensions>"
},
}
            },
                                    osDisk = new
                                    {
                                        ephemeralOSDiskSettings = new
                                        {
                                            placement = "cachedisk",
                                        },
                                        caching = "none",
                                        diskSizeGB = 1234,
                                        managedDisk = new
                                        {
                                            storageAccountType = "standard_lrs",
                                        },
                                        writeAcceleratorEnabled = true,
                                    },
                                    securityProfile = new
                                    {
                                        encryptionAtHost = true,
                                        securityType = "trustedLaunch",
                                        uefiSettings = new
                                        {
                                            secureBootEnabled = true,
                                            vTpmEnabled = true,
                                        },
                                    },
                                    serviceArtifactReference = new
                                    {
                                        id = "<id>",
                                    },
                                },
                                taskSlotsPerNode = 1234,
                                taskSchedulingPolicy = new
                                {
                                    nodeFillType = "spread",
                                },
                                resizeTimeout = "PT1H23M45S",
                                resourceTags = "<resourceTags>",
                                targetDedicatedNodes = 1234,
                                targetLowPriorityNodes = 1234,
                                enableAutoScale = true,
                                autoScaleFormula = "<autoScaleFormula>",
                                autoScaleEvaluationInterval = "PT1H23M45S",
                                enableInterNodeCommunication = true,
                                networkConfiguration = new
                                {
                                    subnetId = "<subnetId>",
                                    dynamicVNetAssignmentScope = "none",
                                    endpointConfiguration = new
                                    {
                                        inboundNATPools = new object[]
            {
new
{
name = "<name>",
protocol = "tcp",
backendPort = 1234,
frontendPortRangeStart = 1234,
frontendPortRangeEnd = 1234,
networkSecurityGroupRules = new object[]
{
new
{
priority = 1234,
access = "allow",
sourceAddressPrefix = "<sourceAddressPrefix>",
sourcePortRanges = new object[]
{
"<sourcePortRanges>"
},
}
},
}
            },
                                    },
                                    publicIPAddressConfiguration = new
                                    {
                                        provision = "batchmanaged",
                                        ipAddressIds = new object[]
            {
"<ipAddressIds>"
            },
                                    },
                                    enableAcceleratedNetworking = true,
                                },
                                startTask = new
                                {
                                    commandLine = "<commandLine>",
                                    resourceFiles = new object[]
            {
null
            },
                                    environmentSettings = new object[]
            {
null
            },
                                    maxTaskRetryCount = 1234,
                                    waitForSuccess = true,
                                },
                                applicationPackageReferences = new object[]
            {
null
            },
                                userAccounts = new object[]
            {
new
{
name = "<name>",
password = "<password>",
elevationLevel = "nonadmin",
linuxUserConfiguration = new
{
uid = 1234,
gid = 1234,
sshPrivateKey = "<sshPrivateKey>",
},
windowsUserConfiguration = new
{
loginMode = "batch",
},
}
            },
                                metadata = new object[]
            {
new
{
name = "<name>",
value = "<value>",
}
            },
                                mountConfiguration = new object[]
            {
new
{
azureBlobFileSystemConfiguration = new
{
accountName = "<accountName>",
containerName = "<containerName>",
accountKey = "<accountKey>",
sasKey = "<sasKey>",
blobfuseOptions = "<blobfuseOptions>",
relativeMountPath = "<relativeMountPath>",
},
nfsMountConfiguration = new
{
source = "<source>",
relativeMountPath = "<relativeMountPath>",
mountOptions = "<mountOptions>",
},
cifsMountConfiguration = new
{
username = "<username>",
source = "<source>",
relativeMountPath = "<relativeMountPath>",
mountOptions = "<mountOptions>",
password = "<password>",
},
azureFileShareConfiguration = new
{
accountName = "<accountName>",
azureFileUrl = "<azureFileUrl>",
accountKey = "<accountKey>",
relativeMountPath = "<relativeMountPath>",
mountOptions = "<mountOptions>",
},
}
            },
                                targetNodeCommunicationMode = "default",
                                upgradePolicy = new
                                {
                                    mode = "automatic",
                                    automaticOSUpgradePolicy = new
                                    {
                                        disableAutomaticRollback = true,
                                        enableAutomaticOSUpgrade = true,
                                        useRollingUpgradePolicy = true,
                                        osRollingUpgradeDeferral = true,
                                    },
                                    rollingUpgradePolicy = new
                                    {
                                        enableCrossZoneUpgrade = true,
                                        maxBatchInstancePercent = 1234,
                                        maxUnhealthyInstancePercent = 1234,
                                        maxUnhealthyUpgradedInstancePercent = 1234,
                                        pauseTimeBetweenBatches = "PT1H23M45S",
                                        prioritizeUnhealthyInstances = true,
                                        rollbackFailedInstancesOnPolicyBreach = true,
                                    },
                                },
                            },
                        },
                    },
                    metadata = new object[]
            {
null
            },
                },
                metadata = new object[]
            {
null
            },
            });
            Response response = client.UpdateJobSchedule("<jobScheduleId>", content, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), requestConditions: null);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_UpdateJobSchedule_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                schedule = new
                {
                    doNotRunUntil = "2022-05-10T18:57:31.2311892Z",
                    doNotRunAfter = "2022-05-10T18:57:31.2311892Z",
                    startWindow = "PT1H23M45S",
                    recurrenceInterval = "PT1H23M45S",
                },
                jobSpecification = new
                {
                    priority = 1234,
                    allowTaskPreemption = true,
                    maxParallelTasks = 1234,
                    displayName = "<displayName>",
                    usesTaskDependencies = true,
                    onAllTasksComplete = "noaction",
                    onTaskFailure = "noaction",
                    networkConfiguration = new
                    {
                        subnetId = "<subnetId>",
                    },
                    constraints = new
                    {
                        maxWallClockTime = "PT1H23M45S",
                        maxTaskRetryCount = 1234,
                    },
                    jobManagerTask = new
                    {
                        id = "<id>",
                        displayName = "<displayName>",
                        commandLine = "<commandLine>",
                        containerSettings = new
                        {
                            containerRunOptions = "<containerRunOptions>",
                            imageName = "<imageName>",
                            registry = new
                            {
                                username = "<username>",
                                password = "<password>",
                                registryServer = "<registryServer>",
                                identityReference = new
                                {
                                    resourceId = "<resourceId>",
                                },
                            },
                            workingDirectory = "taskWorkingDirectory",
                        },
                        resourceFiles = new object[]
            {
new
{
autoStorageContainerName = "<autoStorageContainerName>",
storageContainerUrl = "<storageContainerUrl>",
httpUrl = "<httpUrl>",
blobPrefix = "<blobPrefix>",
filePath = "<filePath>",
fileMode = "<fileMode>",
}
            },
                        outputFiles = new object[]
            {
new
{
filePattern = "<filePattern>",
destination = new
{
container = new
{
path = "<path>",
containerUrl = "<containerUrl>",
uploadHeaders = new object[]
{
new
{
name = "<name>",
value = "<value>",
}
},
},
},
uploadOptions = new
{
uploadCondition = "tasksuccess",
},
}
            },
                        environmentSettings = new object[]
            {
new
{
name = "<name>",
value = "<value>",
}
            },
                        constraints = new
                        {
                            maxWallClockTime = "PT1H23M45S",
                            retentionTime = "PT1H23M45S",
                            maxTaskRetryCount = 1234,
                        },
                        requiredSlots = 1234,
                        killJobOnCompletion = true,
                        userIdentity = new
                        {
                            username = "<username>",
                            autoUser = new
                            {
                                scope = "task",
                                elevationLevel = "nonadmin",
                            },
                        },
                        runExclusive = true,
                        applicationPackageReferences = new object[]
            {
new
{
applicationId = "<applicationId>",
version = "<version>",
}
            },
                        authenticationTokenSettings = new
                        {
                            access = new object[]
            {
"job"
            },
                        },
                        allowLowPriorityNode = true,
                    },
                    jobPreparationTask = new
                    {
                        id = "<id>",
                        commandLine = "<commandLine>",
                        resourceFiles = new object[]
            {
null
            },
                        environmentSettings = new object[]
            {
null
            },
                        waitForSuccess = true,
                        rerunOnNodeRebootAfterSuccess = true,
                    },
                    jobReleaseTask = new
                    {
                        id = "<id>",
                        commandLine = "<commandLine>",
                        resourceFiles = new object[]
            {
null
            },
                        environmentSettings = new object[]
            {
null
            },
                        maxWallClockTime = "PT1H23M45S",
                        retentionTime = "PT1H23M45S",
                    },
                    commonEnvironmentSettings = new object[]
            {
null
            },
                    poolInfo = new
                    {
                        poolId = "<poolId>",
                        autoPoolSpecification = new
                        {
                            autoPoolIdPrefix = "<autoPoolIdPrefix>",
                            poolLifetimeOption = "jobschedule",
                            keepAlive = true,
                            pool = new
                            {
                                displayName = "<displayName>",
                                vmSize = "<vmSize>",
                                virtualMachineConfiguration = new
                                {
                                    imageReference = new
                                    {
                                        publisher = "<publisher>",
                                        offer = "<offer>",
                                        sku = "<sku>",
                                        version = "<version>",
                                        virtualMachineImageId = "<virtualMachineImageId>",
                                    },
                                    nodeAgentSKUId = "<nodeAgentSKUId>",
                                    windowsConfiguration = new
                                    {
                                        enableAutomaticUpdates = true,
                                    },
                                    dataDisks = new object[]
            {
new
{
lun = 1234,
caching = "none",
diskSizeGB = 1234,
storageAccountType = "standard_lrs",
}
            },
                                    licenseType = "<licenseType>",
                                    containerConfiguration = new
                                    {
                                        type = "dockerCompatible",
                                        containerImageNames = new object[]
            {
"<containerImageNames>"
            },
                                        containerRegistries = new object[]
            {
null
            },
                                    },
                                    diskEncryptionConfiguration = new
                                    {
                                        targets = new object[]
            {
"osdisk"
            },
                                    },
                                    nodePlacementConfiguration = new
                                    {
                                        policy = "regional",
                                    },
                                    extensions = new object[]
            {
new
{
name = "<name>",
publisher = "<publisher>",
type = "<type>",
typeHandlerVersion = "<typeHandlerVersion>",
autoUpgradeMinorVersion = true,
enableAutomaticUpgrade = true,
settings = new
{
key = "<settings>",
},
protectedSettings = new
{
key = "<protectedSettings>",
},
provisionAfterExtensions = new object[]
{
"<provisionAfterExtensions>"
},
}
            },
                                    osDisk = new
                                    {
                                        ephemeralOSDiskSettings = new
                                        {
                                            placement = "cachedisk",
                                        },
                                        caching = "none",
                                        diskSizeGB = 1234,
                                        managedDisk = new
                                        {
                                            storageAccountType = "standard_lrs",
                                        },
                                        writeAcceleratorEnabled = true,
                                    },
                                    securityProfile = new
                                    {
                                        encryptionAtHost = true,
                                        securityType = "trustedLaunch",
                                        uefiSettings = new
                                        {
                                            secureBootEnabled = true,
                                            vTpmEnabled = true,
                                        },
                                    },
                                    serviceArtifactReference = new
                                    {
                                        id = "<id>",
                                    },
                                },
                                taskSlotsPerNode = 1234,
                                taskSchedulingPolicy = new
                                {
                                    nodeFillType = "spread",
                                },
                                resizeTimeout = "PT1H23M45S",
                                resourceTags = "<resourceTags>",
                                targetDedicatedNodes = 1234,
                                targetLowPriorityNodes = 1234,
                                enableAutoScale = true,
                                autoScaleFormula = "<autoScaleFormula>",
                                autoScaleEvaluationInterval = "PT1H23M45S",
                                enableInterNodeCommunication = true,
                                networkConfiguration = new
                                {
                                    subnetId = "<subnetId>",
                                    dynamicVNetAssignmentScope = "none",
                                    endpointConfiguration = new
                                    {
                                        inboundNATPools = new object[]
            {
new
{
name = "<name>",
protocol = "tcp",
backendPort = 1234,
frontendPortRangeStart = 1234,
frontendPortRangeEnd = 1234,
networkSecurityGroupRules = new object[]
{
new
{
priority = 1234,
access = "allow",
sourceAddressPrefix = "<sourceAddressPrefix>",
sourcePortRanges = new object[]
{
"<sourcePortRanges>"
},
}
},
}
            },
                                    },
                                    publicIPAddressConfiguration = new
                                    {
                                        provision = "batchmanaged",
                                        ipAddressIds = new object[]
            {
"<ipAddressIds>"
            },
                                    },
                                    enableAcceleratedNetworking = true,
                                },
                                startTask = new
                                {
                                    commandLine = "<commandLine>",
                                    resourceFiles = new object[]
            {
null
            },
                                    environmentSettings = new object[]
            {
null
            },
                                    maxTaskRetryCount = 1234,
                                    waitForSuccess = true,
                                },
                                applicationPackageReferences = new object[]
            {
null
            },
                                userAccounts = new object[]
            {
new
{
name = "<name>",
password = "<password>",
elevationLevel = "nonadmin",
linuxUserConfiguration = new
{
uid = 1234,
gid = 1234,
sshPrivateKey = "<sshPrivateKey>",
},
windowsUserConfiguration = new
{
loginMode = "batch",
},
}
            },
                                metadata = new object[]
            {
new
{
name = "<name>",
value = "<value>",
}
            },
                                mountConfiguration = new object[]
            {
new
{
azureBlobFileSystemConfiguration = new
{
accountName = "<accountName>",
containerName = "<containerName>",
accountKey = "<accountKey>",
sasKey = "<sasKey>",
blobfuseOptions = "<blobfuseOptions>",
relativeMountPath = "<relativeMountPath>",
},
nfsMountConfiguration = new
{
source = "<source>",
relativeMountPath = "<relativeMountPath>",
mountOptions = "<mountOptions>",
},
cifsMountConfiguration = new
{
username = "<username>",
source = "<source>",
relativeMountPath = "<relativeMountPath>",
mountOptions = "<mountOptions>",
password = "<password>",
},
azureFileShareConfiguration = new
{
accountName = "<accountName>",
azureFileUrl = "<azureFileUrl>",
accountKey = "<accountKey>",
relativeMountPath = "<relativeMountPath>",
mountOptions = "<mountOptions>",
},
}
            },
                                targetNodeCommunicationMode = "default",
                                upgradePolicy = new
                                {
                                    mode = "automatic",
                                    automaticOSUpgradePolicy = new
                                    {
                                        disableAutomaticRollback = true,
                                        enableAutomaticOSUpgrade = true,
                                        useRollingUpgradePolicy = true,
                                        osRollingUpgradeDeferral = true,
                                    },
                                    rollingUpgradePolicy = new
                                    {
                                        enableCrossZoneUpgrade = true,
                                        maxBatchInstancePercent = 1234,
                                        maxUnhealthyInstancePercent = 1234,
                                        maxUnhealthyUpgradedInstancePercent = 1234,
                                        pauseTimeBetweenBatches = "PT1H23M45S",
                                        prioritizeUnhealthyInstances = true,
                                        rollbackFailedInstancesOnPolicyBreach = true,
                                    },
                                },
                            },
                        },
                    },
                    metadata = new object[]
            {
null
            },
                },
                metadata = new object[]
            {
null
            },
            });
            Response response = await client.UpdateJobScheduleAsync("<jobScheduleId>", content, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), requestConditions: null);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_ReplaceJobSchedule_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                jobSpecification = new
                {
                    poolInfo = new object(),
                },
            });
            Response response = client.ReplaceJobSchedule("<jobScheduleId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_ReplaceJobSchedule_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                jobSpecification = new
                {
                    poolInfo = new object(),
                },
            });
            Response response = await client.ReplaceJobScheduleAsync("<jobScheduleId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_ReplaceJobSchedule_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchJobSchedule jobSchedule = new BatchJobSchedule(new BatchJobSpecification(new BatchPoolInfo()));
            Response response = client.ReplaceJobSchedule("<jobScheduleId>", jobSchedule);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_ReplaceJobSchedule_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchJobSchedule jobSchedule = new BatchJobSchedule(new BatchJobSpecification(new BatchPoolInfo()));
            Response response = await client.ReplaceJobScheduleAsync("<jobScheduleId>", jobSchedule);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_ReplaceJobSchedule_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                schedule = new
                {
                    doNotRunUntil = "2022-05-10T18:57:31.2311892Z",
                    doNotRunAfter = "2022-05-10T18:57:31.2311892Z",
                    startWindow = "PT1H23M45S",
                    recurrenceInterval = "PT1H23M45S",
                },
                jobSpecification = new
                {
                    priority = 1234,
                    allowTaskPreemption = true,
                    maxParallelTasks = 1234,
                    displayName = "<displayName>",
                    usesTaskDependencies = true,
                    onAllTasksComplete = "noaction",
                    onTaskFailure = "noaction",
                    networkConfiguration = new
                    {
                        subnetId = "<subnetId>",
                    },
                    constraints = new
                    {
                        maxWallClockTime = "PT1H23M45S",
                        maxTaskRetryCount = 1234,
                    },
                    jobManagerTask = new
                    {
                        id = "<id>",
                        displayName = "<displayName>",
                        commandLine = "<commandLine>",
                        containerSettings = new
                        {
                            containerRunOptions = "<containerRunOptions>",
                            imageName = "<imageName>",
                            registry = new
                            {
                                username = "<username>",
                                password = "<password>",
                                registryServer = "<registryServer>",
                                identityReference = new
                                {
                                    resourceId = "<resourceId>",
                                },
                            },
                            workingDirectory = "taskWorkingDirectory",
                        },
                        resourceFiles = new object[]
            {
new
{
autoStorageContainerName = "<autoStorageContainerName>",
storageContainerUrl = "<storageContainerUrl>",
httpUrl = "<httpUrl>",
blobPrefix = "<blobPrefix>",
filePath = "<filePath>",
fileMode = "<fileMode>",
}
            },
                        outputFiles = new object[]
            {
new
{
filePattern = "<filePattern>",
destination = new
{
container = new
{
path = "<path>",
containerUrl = "<containerUrl>",
uploadHeaders = new object[]
{
new
{
name = "<name>",
value = "<value>",
}
},
},
},
uploadOptions = new
{
uploadCondition = "tasksuccess",
},
}
            },
                        environmentSettings = new object[]
            {
new
{
name = "<name>",
value = "<value>",
}
            },
                        constraints = new
                        {
                            maxWallClockTime = "PT1H23M45S",
                            retentionTime = "PT1H23M45S",
                            maxTaskRetryCount = 1234,
                        },
                        requiredSlots = 1234,
                        killJobOnCompletion = true,
                        userIdentity = new
                        {
                            username = "<username>",
                            autoUser = new
                            {
                                scope = "task",
                                elevationLevel = "nonadmin",
                            },
                        },
                        runExclusive = true,
                        applicationPackageReferences = new object[]
            {
new
{
applicationId = "<applicationId>",
version = "<version>",
}
            },
                        authenticationTokenSettings = new
                        {
                            access = new object[]
            {
"job"
            },
                        },
                        allowLowPriorityNode = true,
                    },
                    jobPreparationTask = new
                    {
                        id = "<id>",
                        commandLine = "<commandLine>",
                        resourceFiles = new object[]
            {
null
            },
                        environmentSettings = new object[]
            {
null
            },
                        waitForSuccess = true,
                        rerunOnNodeRebootAfterSuccess = true,
                    },
                    jobReleaseTask = new
                    {
                        id = "<id>",
                        commandLine = "<commandLine>",
                        resourceFiles = new object[]
            {
null
            },
                        environmentSettings = new object[]
            {
null
            },
                        maxWallClockTime = "PT1H23M45S",
                        retentionTime = "PT1H23M45S",
                    },
                    commonEnvironmentSettings = new object[]
            {
null
            },
                    poolInfo = new
                    {
                        poolId = "<poolId>",
                        autoPoolSpecification = new
                        {
                            autoPoolIdPrefix = "<autoPoolIdPrefix>",
                            poolLifetimeOption = "jobschedule",
                            keepAlive = true,
                            pool = new
                            {
                                displayName = "<displayName>",
                                vmSize = "<vmSize>",
                                virtualMachineConfiguration = new
                                {
                                    imageReference = new
                                    {
                                        publisher = "<publisher>",
                                        offer = "<offer>",
                                        sku = "<sku>",
                                        version = "<version>",
                                        virtualMachineImageId = "<virtualMachineImageId>",
                                    },
                                    nodeAgentSKUId = "<nodeAgentSKUId>",
                                    windowsConfiguration = new
                                    {
                                        enableAutomaticUpdates = true,
                                    },
                                    dataDisks = new object[]
            {
new
{
lun = 1234,
caching = "none",
diskSizeGB = 1234,
storageAccountType = "standard_lrs",
}
            },
                                    licenseType = "<licenseType>",
                                    containerConfiguration = new
                                    {
                                        type = "dockerCompatible",
                                        containerImageNames = new object[]
            {
"<containerImageNames>"
            },
                                        containerRegistries = new object[]
            {
null
            },
                                    },
                                    diskEncryptionConfiguration = new
                                    {
                                        targets = new object[]
            {
"osdisk"
            },
                                    },
                                    nodePlacementConfiguration = new
                                    {
                                        policy = "regional",
                                    },
                                    extensions = new object[]
            {
new
{
name = "<name>",
publisher = "<publisher>",
type = "<type>",
typeHandlerVersion = "<typeHandlerVersion>",
autoUpgradeMinorVersion = true,
enableAutomaticUpgrade = true,
settings = new
{
key = "<settings>",
},
protectedSettings = new
{
key = "<protectedSettings>",
},
provisionAfterExtensions = new object[]
{
"<provisionAfterExtensions>"
},
}
            },
                                    osDisk = new
                                    {
                                        ephemeralOSDiskSettings = new
                                        {
                                            placement = "cachedisk",
                                        },
                                        caching = "none",
                                        diskSizeGB = 1234,
                                        managedDisk = new
                                        {
                                            storageAccountType = "standard_lrs",
                                        },
                                        writeAcceleratorEnabled = true,
                                    },
                                    securityProfile = new
                                    {
                                        encryptionAtHost = true,
                                        securityType = "trustedLaunch",
                                        uefiSettings = new
                                        {
                                            secureBootEnabled = true,
                                            vTpmEnabled = true,
                                        },
                                    },
                                    serviceArtifactReference = new
                                    {
                                        id = "<id>",
                                    },
                                },
                                taskSlotsPerNode = 1234,
                                taskSchedulingPolicy = new
                                {
                                    nodeFillType = "spread",
                                },
                                resizeTimeout = "PT1H23M45S",
                                resourceTags = "<resourceTags>",
                                targetDedicatedNodes = 1234,
                                targetLowPriorityNodes = 1234,
                                enableAutoScale = true,
                                autoScaleFormula = "<autoScaleFormula>",
                                autoScaleEvaluationInterval = "PT1H23M45S",
                                enableInterNodeCommunication = true,
                                networkConfiguration = new
                                {
                                    subnetId = "<subnetId>",
                                    dynamicVNetAssignmentScope = "none",
                                    endpointConfiguration = new
                                    {
                                        inboundNATPools = new object[]
            {
new
{
name = "<name>",
protocol = "tcp",
backendPort = 1234,
frontendPortRangeStart = 1234,
frontendPortRangeEnd = 1234,
networkSecurityGroupRules = new object[]
{
new
{
priority = 1234,
access = "allow",
sourceAddressPrefix = "<sourceAddressPrefix>",
sourcePortRanges = new object[]
{
"<sourcePortRanges>"
},
}
},
}
            },
                                    },
                                    publicIPAddressConfiguration = new
                                    {
                                        provision = "batchmanaged",
                                        ipAddressIds = new object[]
            {
"<ipAddressIds>"
            },
                                    },
                                    enableAcceleratedNetworking = true,
                                },
                                startTask = new
                                {
                                    commandLine = "<commandLine>",
                                    resourceFiles = new object[]
            {
null
            },
                                    environmentSettings = new object[]
            {
null
            },
                                    maxTaskRetryCount = 1234,
                                    waitForSuccess = true,
                                },
                                applicationPackageReferences = new object[]
            {
null
            },
                                userAccounts = new object[]
            {
new
{
name = "<name>",
password = "<password>",
elevationLevel = "nonadmin",
linuxUserConfiguration = new
{
uid = 1234,
gid = 1234,
sshPrivateKey = "<sshPrivateKey>",
},
windowsUserConfiguration = new
{
loginMode = "batch",
},
}
            },
                                metadata = new object[]
            {
new
{
name = "<name>",
value = "<value>",
}
            },
                                mountConfiguration = new object[]
            {
new
{
azureBlobFileSystemConfiguration = new
{
accountName = "<accountName>",
containerName = "<containerName>",
accountKey = "<accountKey>",
sasKey = "<sasKey>",
blobfuseOptions = "<blobfuseOptions>",
relativeMountPath = "<relativeMountPath>",
},
nfsMountConfiguration = new
{
source = "<source>",
relativeMountPath = "<relativeMountPath>",
mountOptions = "<mountOptions>",
},
cifsMountConfiguration = new
{
username = "<username>",
source = "<source>",
relativeMountPath = "<relativeMountPath>",
mountOptions = "<mountOptions>",
password = "<password>",
},
azureFileShareConfiguration = new
{
accountName = "<accountName>",
azureFileUrl = "<azureFileUrl>",
accountKey = "<accountKey>",
relativeMountPath = "<relativeMountPath>",
mountOptions = "<mountOptions>",
},
}
            },
                                targetNodeCommunicationMode = "default",
                                upgradePolicy = new
                                {
                                    mode = "automatic",
                                    automaticOSUpgradePolicy = new
                                    {
                                        disableAutomaticRollback = true,
                                        enableAutomaticOSUpgrade = true,
                                        useRollingUpgradePolicy = true,
                                        osRollingUpgradeDeferral = true,
                                    },
                                    rollingUpgradePolicy = new
                                    {
                                        enableCrossZoneUpgrade = true,
                                        maxBatchInstancePercent = 1234,
                                        maxUnhealthyInstancePercent = 1234,
                                        maxUnhealthyUpgradedInstancePercent = 1234,
                                        pauseTimeBetweenBatches = "PT1H23M45S",
                                        prioritizeUnhealthyInstances = true,
                                        rollbackFailedInstancesOnPolicyBreach = true,
                                    },
                                },
                            },
                        },
                    },
                    metadata = new object[]
            {
null
            },
                },
                metadata = new object[]
            {
null
            },
            });
            Response response = client.ReplaceJobSchedule("<jobScheduleId>", content, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), requestConditions: null);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_ReplaceJobSchedule_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                schedule = new
                {
                    doNotRunUntil = "2022-05-10T18:57:31.2311892Z",
                    doNotRunAfter = "2022-05-10T18:57:31.2311892Z",
                    startWindow = "PT1H23M45S",
                    recurrenceInterval = "PT1H23M45S",
                },
                jobSpecification = new
                {
                    priority = 1234,
                    allowTaskPreemption = true,
                    maxParallelTasks = 1234,
                    displayName = "<displayName>",
                    usesTaskDependencies = true,
                    onAllTasksComplete = "noaction",
                    onTaskFailure = "noaction",
                    networkConfiguration = new
                    {
                        subnetId = "<subnetId>",
                    },
                    constraints = new
                    {
                        maxWallClockTime = "PT1H23M45S",
                        maxTaskRetryCount = 1234,
                    },
                    jobManagerTask = new
                    {
                        id = "<id>",
                        displayName = "<displayName>",
                        commandLine = "<commandLine>",
                        containerSettings = new
                        {
                            containerRunOptions = "<containerRunOptions>",
                            imageName = "<imageName>",
                            registry = new
                            {
                                username = "<username>",
                                password = "<password>",
                                registryServer = "<registryServer>",
                                identityReference = new
                                {
                                    resourceId = "<resourceId>",
                                },
                            },
                            workingDirectory = "taskWorkingDirectory",
                        },
                        resourceFiles = new object[]
            {
new
{
autoStorageContainerName = "<autoStorageContainerName>",
storageContainerUrl = "<storageContainerUrl>",
httpUrl = "<httpUrl>",
blobPrefix = "<blobPrefix>",
filePath = "<filePath>",
fileMode = "<fileMode>",
}
            },
                        outputFiles = new object[]
            {
new
{
filePattern = "<filePattern>",
destination = new
{
container = new
{
path = "<path>",
containerUrl = "<containerUrl>",
uploadHeaders = new object[]
{
new
{
name = "<name>",
value = "<value>",
}
},
},
},
uploadOptions = new
{
uploadCondition = "tasksuccess",
},
}
            },
                        environmentSettings = new object[]
            {
new
{
name = "<name>",
value = "<value>",
}
            },
                        constraints = new
                        {
                            maxWallClockTime = "PT1H23M45S",
                            retentionTime = "PT1H23M45S",
                            maxTaskRetryCount = 1234,
                        },
                        requiredSlots = 1234,
                        killJobOnCompletion = true,
                        userIdentity = new
                        {
                            username = "<username>",
                            autoUser = new
                            {
                                scope = "task",
                                elevationLevel = "nonadmin",
                            },
                        },
                        runExclusive = true,
                        applicationPackageReferences = new object[]
            {
new
{
applicationId = "<applicationId>",
version = "<version>",
}
            },
                        authenticationTokenSettings = new
                        {
                            access = new object[]
            {
"job"
            },
                        },
                        allowLowPriorityNode = true,
                    },
                    jobPreparationTask = new
                    {
                        id = "<id>",
                        commandLine = "<commandLine>",
                        resourceFiles = new object[]
            {
null
            },
                        environmentSettings = new object[]
            {
null
            },
                        waitForSuccess = true,
                        rerunOnNodeRebootAfterSuccess = true,
                    },
                    jobReleaseTask = new
                    {
                        id = "<id>",
                        commandLine = "<commandLine>",
                        resourceFiles = new object[]
            {
null
            },
                        environmentSettings = new object[]
            {
null
            },
                        maxWallClockTime = "PT1H23M45S",
                        retentionTime = "PT1H23M45S",
                    },
                    commonEnvironmentSettings = new object[]
            {
null
            },
                    poolInfo = new
                    {
                        poolId = "<poolId>",
                        autoPoolSpecification = new
                        {
                            autoPoolIdPrefix = "<autoPoolIdPrefix>",
                            poolLifetimeOption = "jobschedule",
                            keepAlive = true,
                            pool = new
                            {
                                displayName = "<displayName>",
                                vmSize = "<vmSize>",
                                virtualMachineConfiguration = new
                                {
                                    imageReference = new
                                    {
                                        publisher = "<publisher>",
                                        offer = "<offer>",
                                        sku = "<sku>",
                                        version = "<version>",
                                        virtualMachineImageId = "<virtualMachineImageId>",
                                    },
                                    nodeAgentSKUId = "<nodeAgentSKUId>",
                                    windowsConfiguration = new
                                    {
                                        enableAutomaticUpdates = true,
                                    },
                                    dataDisks = new object[]
            {
new
{
lun = 1234,
caching = "none",
diskSizeGB = 1234,
storageAccountType = "standard_lrs",
}
            },
                                    licenseType = "<licenseType>",
                                    containerConfiguration = new
                                    {
                                        type = "dockerCompatible",
                                        containerImageNames = new object[]
            {
"<containerImageNames>"
            },
                                        containerRegistries = new object[]
            {
null
            },
                                    },
                                    diskEncryptionConfiguration = new
                                    {
                                        targets = new object[]
            {
"osdisk"
            },
                                    },
                                    nodePlacementConfiguration = new
                                    {
                                        policy = "regional",
                                    },
                                    extensions = new object[]
            {
new
{
name = "<name>",
publisher = "<publisher>",
type = "<type>",
typeHandlerVersion = "<typeHandlerVersion>",
autoUpgradeMinorVersion = true,
enableAutomaticUpgrade = true,
settings = new
{
key = "<settings>",
},
protectedSettings = new
{
key = "<protectedSettings>",
},
provisionAfterExtensions = new object[]
{
"<provisionAfterExtensions>"
},
}
            },
                                    osDisk = new
                                    {
                                        ephemeralOSDiskSettings = new
                                        {
                                            placement = "cachedisk",
                                        },
                                        caching = "none",
                                        diskSizeGB = 1234,
                                        managedDisk = new
                                        {
                                            storageAccountType = "standard_lrs",
                                        },
                                        writeAcceleratorEnabled = true,
                                    },
                                    securityProfile = new
                                    {
                                        encryptionAtHost = true,
                                        securityType = "trustedLaunch",
                                        uefiSettings = new
                                        {
                                            secureBootEnabled = true,
                                            vTpmEnabled = true,
                                        },
                                    },
                                    serviceArtifactReference = new
                                    {
                                        id = "<id>",
                                    },
                                },
                                taskSlotsPerNode = 1234,
                                taskSchedulingPolicy = new
                                {
                                    nodeFillType = "spread",
                                },
                                resizeTimeout = "PT1H23M45S",
                                resourceTags = "<resourceTags>",
                                targetDedicatedNodes = 1234,
                                targetLowPriorityNodes = 1234,
                                enableAutoScale = true,
                                autoScaleFormula = "<autoScaleFormula>",
                                autoScaleEvaluationInterval = "PT1H23M45S",
                                enableInterNodeCommunication = true,
                                networkConfiguration = new
                                {
                                    subnetId = "<subnetId>",
                                    dynamicVNetAssignmentScope = "none",
                                    endpointConfiguration = new
                                    {
                                        inboundNATPools = new object[]
            {
new
{
name = "<name>",
protocol = "tcp",
backendPort = 1234,
frontendPortRangeStart = 1234,
frontendPortRangeEnd = 1234,
networkSecurityGroupRules = new object[]
{
new
{
priority = 1234,
access = "allow",
sourceAddressPrefix = "<sourceAddressPrefix>",
sourcePortRanges = new object[]
{
"<sourcePortRanges>"
},
}
},
}
            },
                                    },
                                    publicIPAddressConfiguration = new
                                    {
                                        provision = "batchmanaged",
                                        ipAddressIds = new object[]
            {
"<ipAddressIds>"
            },
                                    },
                                    enableAcceleratedNetworking = true,
                                },
                                startTask = new
                                {
                                    commandLine = "<commandLine>",
                                    resourceFiles = new object[]
            {
null
            },
                                    environmentSettings = new object[]
            {
null
            },
                                    maxTaskRetryCount = 1234,
                                    waitForSuccess = true,
                                },
                                applicationPackageReferences = new object[]
            {
null
            },
                                userAccounts = new object[]
            {
new
{
name = "<name>",
password = "<password>",
elevationLevel = "nonadmin",
linuxUserConfiguration = new
{
uid = 1234,
gid = 1234,
sshPrivateKey = "<sshPrivateKey>",
},
windowsUserConfiguration = new
{
loginMode = "batch",
},
}
            },
                                metadata = new object[]
            {
new
{
name = "<name>",
value = "<value>",
}
            },
                                mountConfiguration = new object[]
            {
new
{
azureBlobFileSystemConfiguration = new
{
accountName = "<accountName>",
containerName = "<containerName>",
accountKey = "<accountKey>",
sasKey = "<sasKey>",
blobfuseOptions = "<blobfuseOptions>",
relativeMountPath = "<relativeMountPath>",
},
nfsMountConfiguration = new
{
source = "<source>",
relativeMountPath = "<relativeMountPath>",
mountOptions = "<mountOptions>",
},
cifsMountConfiguration = new
{
username = "<username>",
source = "<source>",
relativeMountPath = "<relativeMountPath>",
mountOptions = "<mountOptions>",
password = "<password>",
},
azureFileShareConfiguration = new
{
accountName = "<accountName>",
azureFileUrl = "<azureFileUrl>",
accountKey = "<accountKey>",
relativeMountPath = "<relativeMountPath>",
mountOptions = "<mountOptions>",
},
}
            },
                                targetNodeCommunicationMode = "default",
                                upgradePolicy = new
                                {
                                    mode = "automatic",
                                    automaticOSUpgradePolicy = new
                                    {
                                        disableAutomaticRollback = true,
                                        enableAutomaticOSUpgrade = true,
                                        useRollingUpgradePolicy = true,
                                        osRollingUpgradeDeferral = true,
                                    },
                                    rollingUpgradePolicy = new
                                    {
                                        enableCrossZoneUpgrade = true,
                                        maxBatchInstancePercent = 1234,
                                        maxUnhealthyInstancePercent = 1234,
                                        maxUnhealthyUpgradedInstancePercent = 1234,
                                        pauseTimeBetweenBatches = "PT1H23M45S",
                                        prioritizeUnhealthyInstances = true,
                                        rollbackFailedInstancesOnPolicyBreach = true,
                                    },
                                },
                            },
                        },
                    },
                    metadata = new object[]
            {
null
            },
                },
                metadata = new object[]
            {
null
            },
            });
            Response response = await client.ReplaceJobScheduleAsync("<jobScheduleId>", content, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), requestConditions: null);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_ReplaceJobSchedule_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchJobSchedule jobSchedule = new BatchJobSchedule(new BatchJobSpecification(new BatchPoolInfo
            {
                PoolId = "<poolId>",
                AutoPoolSpecification = new BatchAutoPoolSpecification(BatchPoolLifetimeOption.JobSchedule)
                {
                    AutoPoolIdPrefix = "<autoPoolIdPrefix>",
                    KeepAlive = true,
                    Pool = new BatchPoolSpecification("<vmSize>")
                    {
                        DisplayName = "<displayName>",
                        VirtualMachineConfiguration = new VirtualMachineConfiguration(new ImageReference
                        {
                            Publisher = "<publisher>",
                            Offer = "<offer>",
                            Sku = "<sku>",
                            Version = "<version>",
                            VirtualMachineImageId = "<virtualMachineImageId>",
                        }, "<nodeAgentSKUId>")
                        {
                            WindowsConfiguration = new WindowsConfiguration
                            {
                                EnableAutomaticUpdates = true,
                            },
                            DataDisks = {new DataDisk(1234, 1234)
{
Caching = CachingType.None,
StorageAccountType = StorageAccountType.StandardLRS,
}},
                            LicenseType = "<licenseType>",
                            ContainerConfiguration = new ContainerConfiguration(ContainerType.DockerCompatible)
                            {
                                ContainerImageNames = { "<containerImageNames>" },
                                ContainerRegistries = { default },
                            },
                            DiskEncryptionConfiguration = new DiskEncryptionConfiguration
                            {
                                Targets = { DiskEncryptionTarget.OsDisk },
                            },
                            NodePlacementConfiguration = new BatchNodePlacementConfiguration
                            {
                                Policy = BatchNodePlacementPolicyType.Regional,
                            },
                            Extensions = {new VMExtension("<name>", "<publisher>", "<type>")
{
TypeHandlerVersion = "<typeHandlerVersion>",
AutoUpgradeMinorVersion = true,
EnableAutomaticUpgrade = true,
Settings =
{
["key"] = "<settings>"
},
ProtectedSettings =
{
["key"] = "<protectedSettings>"
},
ProvisionAfterExtensions = {"<provisionAfterExtensions>"},
}},
                            OsDisk = new OSDisk
                            {
                                EphemeralOSDiskSettings = new DiffDiskSettings
                                {
                                    Placement = DiffDiskPlacement.CacheDisk,
                                },
                                Caching = CachingType.None,
                                DiskSizeGB = 1234,
                                ManagedDisk = new ManagedDisk(StorageAccountType.StandardLRS),
                                WriteAcceleratorEnabled = true,
                            },
                            SecurityProfile = new SecurityProfile(true, SecurityTypes.TrustedLaunch, new UefiSettings
                            {
                                SecureBootEnabled = true,
                                VTpmEnabled = true,
                            }),
                            ServiceArtifactReference = new ServiceArtifactReference("<id>"),
                        },
                        TaskSlotsPerNode = 1234,
                        TaskSchedulingPolicy = new BatchTaskSchedulingPolicy(BatchNodeFillType.Spread),
                        ResizeTimeout = XmlConvert.ToTimeSpan("PT1H23M45S"),
                        ResourceTags = "<resourceTags>",
                        TargetDedicatedNodes = 1234,
                        TargetLowPriorityNodes = 1234,
                        EnableAutoScale = true,
                        AutoScaleFormula = "<autoScaleFormula>",
                        AutoScaleEvaluationInterval = XmlConvert.ToTimeSpan("PT1H23M45S"),
                        EnableInterNodeCommunication = true,
                        NetworkConfiguration = new NetworkConfiguration
                        {
                            SubnetId = "<subnetId>",
                            DynamicVNetAssignmentScope = DynamicVNetAssignmentScope.None,
                            EndpointConfiguration = new BatchPoolEndpointConfiguration(new InboundNatPool[]
            {
new InboundNatPool("<name>", InboundEndpointProtocol.Tcp, 1234, 1234, 1234)
{
NetworkSecurityGroupRules = {new NetworkSecurityGroupRule(1234, NetworkSecurityGroupRuleAccess.Allow, "<sourceAddressPrefix>")
{
SourcePortRanges = {"<sourcePortRanges>"},
}},
}
            }),
                            PublicIpAddressConfiguration = new PublicIpAddressConfiguration
                            {
                                IpAddressProvisioningType = IpAddressProvisioningType.BatchManaged,
                                IpAddressIds = { "<ipAddressIds>" },
                            },
                            EnableAcceleratedNetworking = true,
                        },
                        StartTask = new BatchStartTask("<commandLine>")
                        {
                            ContainerSettings = default,
                            ResourceFiles = { default },
                            EnvironmentSettings = { default },
                            UserIdentity = default,
                            MaxTaskRetryCount = 1234,
                            WaitForSuccess = true,
                        },
                        ApplicationPackageReferences = { default },
                        UserAccounts = {new UserAccount("<name>", "<password>")
{
ElevationLevel = ElevationLevel.NonAdmin,
LinuxUserConfiguration = new LinuxUserConfiguration
{
Uid = 1234,
Gid = 1234,
SshPrivateKey = "<sshPrivateKey>",
},
WindowsUserConfiguration = new WindowsUserConfiguration
{
LoginMode = LoginMode.Batch,
},
}},
                        Metadata = { new MetadataItem("<name>", "<value>") },
                        MountConfiguration = {new MountConfiguration
{
AzureBlobFileSystemConfiguration = new AzureBlobFileSystemConfiguration("<accountName>", "<containerName>", "<relativeMountPath>")
{
AccountKey = "<accountKey>",
SasKey = "<sasKey>",
BlobfuseOptions = "<blobfuseOptions>",
IdentityReference = default,
},
NfsMountConfiguration = new NfsMountConfiguration("<source>", "<relativeMountPath>")
{
MountOptions = "<mountOptions>",
},
CifsMountConfiguration = new CifsMountConfiguration("<username>", "<source>", "<relativeMountPath>", "<password>")
{
MountOptions = "<mountOptions>",
},
AzureFileShareConfiguration = new AzureFileShareConfiguration("<accountName>", "<azureFileUrl>", "<accountKey>", "<relativeMountPath>")
{
MountOptions = "<mountOptions>",
},
}},
                        TargetNodeCommunicationMode = BatchNodeCommunicationMode.Default,
                        UpgradePolicy = new UpgradePolicy(UpgradeMode.Automatic)
                        {
                            AutomaticOsUpgradePolicy = new AutomaticOsUpgradePolicy
                            {
                                DisableAutomaticRollback = true,
                                EnableAutomaticOsUpgrade = true,
                                UseRollingUpgradePolicy = true,
                                OsRollingUpgradeDeferral = true,
                            },
                            RollingUpgradePolicy = new RollingUpgradePolicy
                            {
                                EnableCrossZoneUpgrade = true,
                                MaxBatchInstancePercent = 1234,
                                MaxUnhealthyInstancePercent = 1234,
                                MaxUnhealthyUpgradedInstancePercent = 1234,
                                PauseTimeBetweenBatches = XmlConvert.ToTimeSpan("PT1H23M45S"),
                                PrioritizeUnhealthyInstances = true,
                                RollbackFailedInstancesOnPolicyBreach = true,
                            },
                        },
                    },
                },
            })
            {
                Priority = 1234,
                AllowTaskPreemption = true,
                MaxParallelTasks = 1234,
                DisplayName = "<displayName>",
                UsesTaskDependencies = true,
                OnAllTasksComplete = OnAllBatchTasksComplete.NoAction,
                OnTaskFailure = OnBatchTaskFailure.NoAction,
                NetworkConfiguration = new BatchJobNetworkConfiguration("<subnetId>"),
                Constraints = new BatchJobConstraints
                {
                    MaxWallClockTime = XmlConvert.ToTimeSpan("PT1H23M45S"),
                    MaxTaskRetryCount = 1234,
                },
                JobManagerTask = new BatchJobManagerTask("<id>", "<commandLine>")
                {
                    DisplayName = "<displayName>",
                    ContainerSettings = new BatchTaskContainerSettings("<imageName>")
                    {
                        ContainerRunOptions = "<containerRunOptions>",
                        Registry = new ContainerRegistryReference
                        {
                            Username = "<username>",
                            Password = "<password>",
                            RegistryServer = "<registryServer>",
                            IdentityReference = new BatchNodeIdentityReference
                            {
                                ResourceId = "<resourceId>",
                            },
                        },
                        WorkingDirectory = ContainerWorkingDirectory.TaskWorkingDirectory,
                    },
                    ResourceFiles = {new ResourceFile
{
AutoStorageContainerName = "<autoStorageContainerName>",
StorageContainerUrl = "<storageContainerUrl>",
HttpUrl = "<httpUrl>",
BlobPrefix = "<blobPrefix>",
FilePath = "<filePath>",
FileMode = "<fileMode>",
IdentityReference = default,
}},
                    OutputFiles = {new OutputFile("<filePattern>", new OutputFileDestination
{
Container = new OutputFileBlobContainerDestination("<containerUrl>")
{
Path = "<path>",
IdentityReference = default,
UploadHeaders = {new HttpHeader("<name>")
{
Value = "<value>",
}},
},
}, new OutputFileUploadConfig(OutputFileUploadCondition.TaskSuccess))},
                    EnvironmentSettings = {new EnvironmentSetting("<name>")
{
Value = "<value>",
}},
                    Constraints = new BatchTaskConstraints
                    {
                        MaxWallClockTime = XmlConvert.ToTimeSpan("PT1H23M45S"),
                        RetentionTime = XmlConvert.ToTimeSpan("PT1H23M45S"),
                        MaxTaskRetryCount = 1234,
                    },
                    RequiredSlots = 1234,
                    KillJobOnCompletion = true,
                    UserIdentity = new UserIdentity
                    {
                        Username = "<username>",
                        AutoUser = new AutoUserSpecification
                        {
                            Scope = AutoUserScope.Task,
                            ElevationLevel = ElevationLevel.NonAdmin,
                        },
                    },
                    RunExclusive = true,
                    ApplicationPackageReferences = {new BatchApplicationPackageReference("<applicationId>")
{
Version = "<version>",
}},
                    AuthenticationTokenSettings = new AuthenticationTokenSettings
                    {
                        Access = { AccessScope.Job },
                    },
                    AllowLowPriorityNode = true,
                },
                JobPreparationTask = new BatchJobPreparationTask("<commandLine>")
                {
                    Id = "<id>",
                    ContainerSettings = default,
                    ResourceFiles = { default },
                    EnvironmentSettings = { default },
                    Constraints = default,
                    WaitForSuccess = true,
                    UserIdentity = default,
                    RerunOnNodeRebootAfterSuccess = true,
                },
                JobReleaseTask = new BatchJobReleaseTask("<commandLine>")
                {
                    Id = "<id>",
                    ContainerSettings = default,
                    ResourceFiles = { default },
                    EnvironmentSettings = { default },
                    MaxWallClockTime = XmlConvert.ToTimeSpan("PT1H23M45S"),
                    RetentionTime = XmlConvert.ToTimeSpan("PT1H23M45S"),
                    UserIdentity = default,
                },
                CommonEnvironmentSettings = { default },
                Metadata = { default },
            })
            {
                Schedule = new BatchJobScheduleConfiguration
                {
                    DoNotRunUntil = DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"),
                    DoNotRunAfter = DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"),
                    StartWindow = XmlConvert.ToTimeSpan("PT1H23M45S"),
                    RecurrenceInterval = XmlConvert.ToTimeSpan("PT1H23M45S"),
                },
                Metadata = { default },
            };
            Response response = client.ReplaceJobSchedule("<jobScheduleId>", jobSchedule, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), requestConditions: null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_ReplaceJobSchedule_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchJobSchedule jobSchedule = new BatchJobSchedule(new BatchJobSpecification(new BatchPoolInfo
            {
                PoolId = "<poolId>",
                AutoPoolSpecification = new BatchAutoPoolSpecification(BatchPoolLifetimeOption.JobSchedule)
                {
                    AutoPoolIdPrefix = "<autoPoolIdPrefix>",
                    KeepAlive = true,
                    Pool = new BatchPoolSpecification("<vmSize>")
                    {
                        DisplayName = "<displayName>",
                        VirtualMachineConfiguration = new VirtualMachineConfiguration(new ImageReference
                        {
                            Publisher = "<publisher>",
                            Offer = "<offer>",
                            Sku = "<sku>",
                            Version = "<version>",
                            VirtualMachineImageId = "<virtualMachineImageId>",
                        }, "<nodeAgentSKUId>")
                        {
                            WindowsConfiguration = new WindowsConfiguration
                            {
                                EnableAutomaticUpdates = true,
                            },
                            DataDisks = {new DataDisk(1234, 1234)
{
Caching = CachingType.None,
StorageAccountType = StorageAccountType.StandardLRS,
}},
                            LicenseType = "<licenseType>",
                            ContainerConfiguration = new ContainerConfiguration(ContainerType.DockerCompatible)
                            {
                                ContainerImageNames = { "<containerImageNames>" },
                                ContainerRegistries = { default },
                            },
                            DiskEncryptionConfiguration = new DiskEncryptionConfiguration
                            {
                                Targets = { DiskEncryptionTarget.OsDisk },
                            },
                            NodePlacementConfiguration = new BatchNodePlacementConfiguration
                            {
                                Policy = BatchNodePlacementPolicyType.Regional,
                            },
                            Extensions = {new VMExtension("<name>", "<publisher>", "<type>")
{
TypeHandlerVersion = "<typeHandlerVersion>",
AutoUpgradeMinorVersion = true,
EnableAutomaticUpgrade = true,
Settings =
{
["key"] = "<settings>"
},
ProtectedSettings =
{
["key"] = "<protectedSettings>"
},
ProvisionAfterExtensions = {"<provisionAfterExtensions>"},
}},
                            OsDisk = new OSDisk
                            {
                                EphemeralOSDiskSettings = new DiffDiskSettings
                                {
                                    Placement = DiffDiskPlacement.CacheDisk,
                                },
                                Caching = CachingType.None,
                                DiskSizeGB = 1234,
                                ManagedDisk = new ManagedDisk(StorageAccountType.StandardLRS),
                                WriteAcceleratorEnabled = true,
                            },
                            SecurityProfile = new SecurityProfile(true, SecurityTypes.TrustedLaunch, new UefiSettings
                            {
                                SecureBootEnabled = true,
                                VTpmEnabled = true,
                            }),
                            ServiceArtifactReference = new ServiceArtifactReference("<id>"),
                        },
                        TaskSlotsPerNode = 1234,
                        TaskSchedulingPolicy = new BatchTaskSchedulingPolicy(BatchNodeFillType.Spread),
                        ResizeTimeout = XmlConvert.ToTimeSpan("PT1H23M45S"),
                        ResourceTags = "<resourceTags>",
                        TargetDedicatedNodes = 1234,
                        TargetLowPriorityNodes = 1234,
                        EnableAutoScale = true,
                        AutoScaleFormula = "<autoScaleFormula>",
                        AutoScaleEvaluationInterval = XmlConvert.ToTimeSpan("PT1H23M45S"),
                        EnableInterNodeCommunication = true,
                        NetworkConfiguration = new NetworkConfiguration
                        {
                            SubnetId = "<subnetId>",
                            DynamicVNetAssignmentScope = DynamicVNetAssignmentScope.None,
                            EndpointConfiguration = new BatchPoolEndpointConfiguration(new InboundNatPool[]
            {
new InboundNatPool("<name>", InboundEndpointProtocol.Tcp, 1234, 1234, 1234)
{
NetworkSecurityGroupRules = {new NetworkSecurityGroupRule(1234, NetworkSecurityGroupRuleAccess.Allow, "<sourceAddressPrefix>")
{
SourcePortRanges = {"<sourcePortRanges>"},
}},
}
            }),
                            PublicIpAddressConfiguration = new PublicIpAddressConfiguration
                            {
                                IpAddressProvisioningType = IpAddressProvisioningType.BatchManaged,
                                IpAddressIds = { "<ipAddressIds>" },
                            },
                            EnableAcceleratedNetworking = true,
                        },
                        StartTask = new BatchStartTask("<commandLine>")
                        {
                            ContainerSettings = default,
                            ResourceFiles = { default },
                            EnvironmentSettings = { default },
                            UserIdentity = default,
                            MaxTaskRetryCount = 1234,
                            WaitForSuccess = true,
                        },
                        ApplicationPackageReferences = { default },
                        UserAccounts = {new UserAccount("<name>", "<password>")
{
ElevationLevel = ElevationLevel.NonAdmin,
LinuxUserConfiguration = new LinuxUserConfiguration
{
Uid = 1234,
Gid = 1234,
SshPrivateKey = "<sshPrivateKey>",
},
WindowsUserConfiguration = new WindowsUserConfiguration
{
LoginMode = LoginMode.Batch,
},
}},
                        Metadata = { new MetadataItem("<name>", "<value>") },
                        MountConfiguration = {new MountConfiguration
{
AzureBlobFileSystemConfiguration = new AzureBlobFileSystemConfiguration("<accountName>", "<containerName>", "<relativeMountPath>")
{
AccountKey = "<accountKey>",
SasKey = "<sasKey>",
BlobfuseOptions = "<blobfuseOptions>",
IdentityReference = default,
},
NfsMountConfiguration = new NfsMountConfiguration("<source>", "<relativeMountPath>")
{
MountOptions = "<mountOptions>",
},
CifsMountConfiguration = new CifsMountConfiguration("<username>", "<source>", "<relativeMountPath>", "<password>")
{
MountOptions = "<mountOptions>",
},
AzureFileShareConfiguration = new AzureFileShareConfiguration("<accountName>", "<azureFileUrl>", "<accountKey>", "<relativeMountPath>")
{
MountOptions = "<mountOptions>",
},
}},
                        TargetNodeCommunicationMode = BatchNodeCommunicationMode.Default,
                        UpgradePolicy = new UpgradePolicy(UpgradeMode.Automatic)
                        {
                            AutomaticOsUpgradePolicy = new AutomaticOsUpgradePolicy
                            {
                                DisableAutomaticRollback = true,
                                EnableAutomaticOsUpgrade = true,
                                UseRollingUpgradePolicy = true,
                                OsRollingUpgradeDeferral = true,
                            },
                            RollingUpgradePolicy = new RollingUpgradePolicy
                            {
                                EnableCrossZoneUpgrade = true,
                                MaxBatchInstancePercent = 1234,
                                MaxUnhealthyInstancePercent = 1234,
                                MaxUnhealthyUpgradedInstancePercent = 1234,
                                PauseTimeBetweenBatches = XmlConvert.ToTimeSpan("PT1H23M45S"),
                                PrioritizeUnhealthyInstances = true,
                                RollbackFailedInstancesOnPolicyBreach = true,
                            },
                        },
                    },
                },
            })
            {
                Priority = 1234,
                AllowTaskPreemption = true,
                MaxParallelTasks = 1234,
                DisplayName = "<displayName>",
                UsesTaskDependencies = true,
                OnAllTasksComplete = OnAllBatchTasksComplete.NoAction,
                OnTaskFailure = OnBatchTaskFailure.NoAction,
                NetworkConfiguration = new BatchJobNetworkConfiguration("<subnetId>"),
                Constraints = new BatchJobConstraints
                {
                    MaxWallClockTime = XmlConvert.ToTimeSpan("PT1H23M45S"),
                    MaxTaskRetryCount = 1234,
                },
                JobManagerTask = new BatchJobManagerTask("<id>", "<commandLine>")
                {
                    DisplayName = "<displayName>",
                    ContainerSettings = new BatchTaskContainerSettings("<imageName>")
                    {
                        ContainerRunOptions = "<containerRunOptions>",
                        Registry = new ContainerRegistryReference
                        {
                            Username = "<username>",
                            Password = "<password>",
                            RegistryServer = "<registryServer>",
                            IdentityReference = new BatchNodeIdentityReference
                            {
                                ResourceId = "<resourceId>",
                            },
                        },
                        WorkingDirectory = ContainerWorkingDirectory.TaskWorkingDirectory,
                    },
                    ResourceFiles = {new ResourceFile
{
AutoStorageContainerName = "<autoStorageContainerName>",
StorageContainerUrl = "<storageContainerUrl>",
HttpUrl = "<httpUrl>",
BlobPrefix = "<blobPrefix>",
FilePath = "<filePath>",
FileMode = "<fileMode>",
IdentityReference = default,
}},
                    OutputFiles = {new OutputFile("<filePattern>", new OutputFileDestination
{
Container = new OutputFileBlobContainerDestination("<containerUrl>")
{
Path = "<path>",
IdentityReference = default,
UploadHeaders = {new HttpHeader("<name>")
{
Value = "<value>",
}},
},
}, new OutputFileUploadConfig(OutputFileUploadCondition.TaskSuccess))},
                    EnvironmentSettings = {new EnvironmentSetting("<name>")
{
Value = "<value>",
}},
                    Constraints = new BatchTaskConstraints
                    {
                        MaxWallClockTime = XmlConvert.ToTimeSpan("PT1H23M45S"),
                        RetentionTime = XmlConvert.ToTimeSpan("PT1H23M45S"),
                        MaxTaskRetryCount = 1234,
                    },
                    RequiredSlots = 1234,
                    KillJobOnCompletion = true,
                    UserIdentity = new UserIdentity
                    {
                        Username = "<username>",
                        AutoUser = new AutoUserSpecification
                        {
                            Scope = AutoUserScope.Task,
                            ElevationLevel = ElevationLevel.NonAdmin,
                        },
                    },
                    RunExclusive = true,
                    ApplicationPackageReferences = {new BatchApplicationPackageReference("<applicationId>")
{
Version = "<version>",
}},
                    AuthenticationTokenSettings = new AuthenticationTokenSettings
                    {
                        Access = { AccessScope.Job },
                    },
                    AllowLowPriorityNode = true,
                },
                JobPreparationTask = new BatchJobPreparationTask("<commandLine>")
                {
                    Id = "<id>",
                    ContainerSettings = default,
                    ResourceFiles = { default },
                    EnvironmentSettings = { default },
                    Constraints = default,
                    WaitForSuccess = true,
                    UserIdentity = default,
                    RerunOnNodeRebootAfterSuccess = true,
                },
                JobReleaseTask = new BatchJobReleaseTask("<commandLine>")
                {
                    Id = "<id>",
                    ContainerSettings = default,
                    ResourceFiles = { default },
                    EnvironmentSettings = { default },
                    MaxWallClockTime = XmlConvert.ToTimeSpan("PT1H23M45S"),
                    RetentionTime = XmlConvert.ToTimeSpan("PT1H23M45S"),
                    UserIdentity = default,
                },
                CommonEnvironmentSettings = { default },
                Metadata = { default },
            })
            {
                Schedule = new BatchJobScheduleConfiguration
                {
                    DoNotRunUntil = DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"),
                    DoNotRunAfter = DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"),
                    StartWindow = XmlConvert.ToTimeSpan("PT1H23M45S"),
                    RecurrenceInterval = XmlConvert.ToTimeSpan("PT1H23M45S"),
                },
                Metadata = { default },
            };
            Response response = await client.ReplaceJobScheduleAsync("<jobScheduleId>", jobSchedule, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), requestConditions: null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_DisableJobSchedule_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = client.DisableJobSchedule("<jobScheduleId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_DisableJobSchedule_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = await client.DisableJobScheduleAsync("<jobScheduleId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_DisableJobSchedule_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = client.DisableJobSchedule("<jobScheduleId>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), requestConditions: null);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_DisableJobSchedule_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = await client.DisableJobScheduleAsync("<jobScheduleId>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), requestConditions: null);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_EnableJobSchedule_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = client.EnableJobSchedule("<jobScheduleId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_EnableJobSchedule_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = await client.EnableJobScheduleAsync("<jobScheduleId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_EnableJobSchedule_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = client.EnableJobSchedule("<jobScheduleId>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), requestConditions: null);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_EnableJobSchedule_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = await client.EnableJobScheduleAsync("<jobScheduleId>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), requestConditions: null);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_TerminateJobSchedule_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = client.TerminateJobSchedule("<jobScheduleId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_TerminateJobSchedule_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = await client.TerminateJobScheduleAsync("<jobScheduleId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_TerminateJobSchedule_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = client.TerminateJobSchedule("<jobScheduleId>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), requestConditions: null);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_TerminateJobSchedule_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = await client.TerminateJobScheduleAsync("<jobScheduleId>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), requestConditions: null);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_CreateJobSchedule_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
                schedule = new object(),
                jobSpecification = new
                {
                    poolInfo = new object(),
                },
            });
            Response response = client.CreateJobSchedule(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_CreateJobSchedule_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
                schedule = new object(),
                jobSpecification = new
                {
                    poolInfo = new object(),
                },
            });
            Response response = await client.CreateJobScheduleAsync(content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_CreateJobSchedule_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchJobScheduleCreateContent jobSchedule = new BatchJobScheduleCreateContent("<id>", new BatchJobScheduleConfiguration(), new BatchJobSpecification(new BatchPoolInfo()));
            Response response = client.CreateJobSchedule(jobSchedule);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_CreateJobSchedule_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchJobScheduleCreateContent jobSchedule = new BatchJobScheduleCreateContent("<id>", new BatchJobScheduleConfiguration(), new BatchJobSpecification(new BatchPoolInfo()));
            Response response = await client.CreateJobScheduleAsync(jobSchedule);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_CreateJobSchedule_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
                displayName = "<displayName>",
                schedule = new
                {
                    doNotRunUntil = "2022-05-10T18:57:31.2311892Z",
                    doNotRunAfter = "2022-05-10T18:57:31.2311892Z",
                    startWindow = "PT1H23M45S",
                    recurrenceInterval = "PT1H23M45S",
                },
                jobSpecification = new
                {
                    priority = 1234,
                    allowTaskPreemption = true,
                    maxParallelTasks = 1234,
                    displayName = "<displayName>",
                    usesTaskDependencies = true,
                    onAllTasksComplete = "noaction",
                    onTaskFailure = "noaction",
                    networkConfiguration = new
                    {
                        subnetId = "<subnetId>",
                    },
                    constraints = new
                    {
                        maxWallClockTime = "PT1H23M45S",
                        maxTaskRetryCount = 1234,
                    },
                    jobManagerTask = new
                    {
                        id = "<id>",
                        displayName = "<displayName>",
                        commandLine = "<commandLine>",
                        containerSettings = new
                        {
                            containerRunOptions = "<containerRunOptions>",
                            imageName = "<imageName>",
                            registry = new
                            {
                                username = "<username>",
                                password = "<password>",
                                registryServer = "<registryServer>",
                                identityReference = new
                                {
                                    resourceId = "<resourceId>",
                                },
                            },
                            workingDirectory = "taskWorkingDirectory",
                        },
                        resourceFiles = new object[]
            {
new
{
autoStorageContainerName = "<autoStorageContainerName>",
storageContainerUrl = "<storageContainerUrl>",
httpUrl = "<httpUrl>",
blobPrefix = "<blobPrefix>",
filePath = "<filePath>",
fileMode = "<fileMode>",
}
            },
                        outputFiles = new object[]
            {
new
{
filePattern = "<filePattern>",
destination = new
{
container = new
{
path = "<path>",
containerUrl = "<containerUrl>",
uploadHeaders = new object[]
{
new
{
name = "<name>",
value = "<value>",
}
},
},
},
uploadOptions = new
{
uploadCondition = "tasksuccess",
},
}
            },
                        environmentSettings = new object[]
            {
new
{
name = "<name>",
value = "<value>",
}
            },
                        constraints = new
                        {
                            maxWallClockTime = "PT1H23M45S",
                            retentionTime = "PT1H23M45S",
                            maxTaskRetryCount = 1234,
                        },
                        requiredSlots = 1234,
                        killJobOnCompletion = true,
                        userIdentity = new
                        {
                            username = "<username>",
                            autoUser = new
                            {
                                scope = "task",
                                elevationLevel = "nonadmin",
                            },
                        },
                        runExclusive = true,
                        applicationPackageReferences = new object[]
            {
new
{
applicationId = "<applicationId>",
version = "<version>",
}
            },
                        authenticationTokenSettings = new
                        {
                            access = new object[]
            {
"job"
            },
                        },
                        allowLowPriorityNode = true,
                    },
                    jobPreparationTask = new
                    {
                        id = "<id>",
                        commandLine = "<commandLine>",
                        resourceFiles = new object[]
            {
null
            },
                        environmentSettings = new object[]
            {
null
            },
                        waitForSuccess = true,
                        rerunOnNodeRebootAfterSuccess = true,
                    },
                    jobReleaseTask = new
                    {
                        id = "<id>",
                        commandLine = "<commandLine>",
                        resourceFiles = new object[]
            {
null
            },
                        environmentSettings = new object[]
            {
null
            },
                        maxWallClockTime = "PT1H23M45S",
                        retentionTime = "PT1H23M45S",
                    },
                    commonEnvironmentSettings = new object[]
            {
null
            },
                    poolInfo = new
                    {
                        poolId = "<poolId>",
                        autoPoolSpecification = new
                        {
                            autoPoolIdPrefix = "<autoPoolIdPrefix>",
                            poolLifetimeOption = "jobschedule",
                            keepAlive = true,
                            pool = new
                            {
                                displayName = "<displayName>",
                                vmSize = "<vmSize>",
                                virtualMachineConfiguration = new
                                {
                                    imageReference = new
                                    {
                                        publisher = "<publisher>",
                                        offer = "<offer>",
                                        sku = "<sku>",
                                        version = "<version>",
                                        virtualMachineImageId = "<virtualMachineImageId>",
                                    },
                                    nodeAgentSKUId = "<nodeAgentSKUId>",
                                    windowsConfiguration = new
                                    {
                                        enableAutomaticUpdates = true,
                                    },
                                    dataDisks = new object[]
            {
new
{
lun = 1234,
caching = "none",
diskSizeGB = 1234,
storageAccountType = "standard_lrs",
}
            },
                                    licenseType = "<licenseType>",
                                    containerConfiguration = new
                                    {
                                        type = "dockerCompatible",
                                        containerImageNames = new object[]
            {
"<containerImageNames>"
            },
                                        containerRegistries = new object[]
            {
null
            },
                                    },
                                    diskEncryptionConfiguration = new
                                    {
                                        targets = new object[]
            {
"osdisk"
            },
                                    },
                                    nodePlacementConfiguration = new
                                    {
                                        policy = "regional",
                                    },
                                    extensions = new object[]
            {
new
{
name = "<name>",
publisher = "<publisher>",
type = "<type>",
typeHandlerVersion = "<typeHandlerVersion>",
autoUpgradeMinorVersion = true,
enableAutomaticUpgrade = true,
settings = new
{
key = "<settings>",
},
protectedSettings = new
{
key = "<protectedSettings>",
},
provisionAfterExtensions = new object[]
{
"<provisionAfterExtensions>"
},
}
            },
                                    osDisk = new
                                    {
                                        ephemeralOSDiskSettings = new
                                        {
                                            placement = "cachedisk",
                                        },
                                        caching = "none",
                                        diskSizeGB = 1234,
                                        managedDisk = new
                                        {
                                            storageAccountType = "standard_lrs",
                                        },
                                        writeAcceleratorEnabled = true,
                                    },
                                    securityProfile = new
                                    {
                                        encryptionAtHost = true,
                                        securityType = "trustedLaunch",
                                        uefiSettings = new
                                        {
                                            secureBootEnabled = true,
                                            vTpmEnabled = true,
                                        },
                                    },
                                    serviceArtifactReference = new
                                    {
                                        id = "<id>",
                                    },
                                },
                                taskSlotsPerNode = 1234,
                                taskSchedulingPolicy = new
                                {
                                    nodeFillType = "spread",
                                },
                                resizeTimeout = "PT1H23M45S",
                                resourceTags = "<resourceTags>",
                                targetDedicatedNodes = 1234,
                                targetLowPriorityNodes = 1234,
                                enableAutoScale = true,
                                autoScaleFormula = "<autoScaleFormula>",
                                autoScaleEvaluationInterval = "PT1H23M45S",
                                enableInterNodeCommunication = true,
                                networkConfiguration = new
                                {
                                    subnetId = "<subnetId>",
                                    dynamicVNetAssignmentScope = "none",
                                    endpointConfiguration = new
                                    {
                                        inboundNATPools = new object[]
            {
new
{
name = "<name>",
protocol = "tcp",
backendPort = 1234,
frontendPortRangeStart = 1234,
frontendPortRangeEnd = 1234,
networkSecurityGroupRules = new object[]
{
new
{
priority = 1234,
access = "allow",
sourceAddressPrefix = "<sourceAddressPrefix>",
sourcePortRanges = new object[]
{
"<sourcePortRanges>"
},
}
},
}
            },
                                    },
                                    publicIPAddressConfiguration = new
                                    {
                                        provision = "batchmanaged",
                                        ipAddressIds = new object[]
            {
"<ipAddressIds>"
            },
                                    },
                                    enableAcceleratedNetworking = true,
                                },
                                startTask = new
                                {
                                    commandLine = "<commandLine>",
                                    resourceFiles = new object[]
            {
null
            },
                                    environmentSettings = new object[]
            {
null
            },
                                    maxTaskRetryCount = 1234,
                                    waitForSuccess = true,
                                },
                                applicationPackageReferences = new object[]
            {
null
            },
                                userAccounts = new object[]
            {
new
{
name = "<name>",
password = "<password>",
elevationLevel = "nonadmin",
linuxUserConfiguration = new
{
uid = 1234,
gid = 1234,
sshPrivateKey = "<sshPrivateKey>",
},
windowsUserConfiguration = new
{
loginMode = "batch",
},
}
            },
                                metadata = new object[]
            {
new
{
name = "<name>",
value = "<value>",
}
            },
                                mountConfiguration = new object[]
            {
new
{
azureBlobFileSystemConfiguration = new
{
accountName = "<accountName>",
containerName = "<containerName>",
accountKey = "<accountKey>",
sasKey = "<sasKey>",
blobfuseOptions = "<blobfuseOptions>",
relativeMountPath = "<relativeMountPath>",
},
nfsMountConfiguration = new
{
source = "<source>",
relativeMountPath = "<relativeMountPath>",
mountOptions = "<mountOptions>",
},
cifsMountConfiguration = new
{
username = "<username>",
source = "<source>",
relativeMountPath = "<relativeMountPath>",
mountOptions = "<mountOptions>",
password = "<password>",
},
azureFileShareConfiguration = new
{
accountName = "<accountName>",
azureFileUrl = "<azureFileUrl>",
accountKey = "<accountKey>",
relativeMountPath = "<relativeMountPath>",
mountOptions = "<mountOptions>",
},
}
            },
                                targetNodeCommunicationMode = "default",
                                upgradePolicy = new
                                {
                                    mode = "automatic",
                                    automaticOSUpgradePolicy = new
                                    {
                                        disableAutomaticRollback = true,
                                        enableAutomaticOSUpgrade = true,
                                        useRollingUpgradePolicy = true,
                                        osRollingUpgradeDeferral = true,
                                    },
                                    rollingUpgradePolicy = new
                                    {
                                        enableCrossZoneUpgrade = true,
                                        maxBatchInstancePercent = 1234,
                                        maxUnhealthyInstancePercent = 1234,
                                        maxUnhealthyUpgradedInstancePercent = 1234,
                                        pauseTimeBetweenBatches = "PT1H23M45S",
                                        prioritizeUnhealthyInstances = true,
                                        rollbackFailedInstancesOnPolicyBreach = true,
                                    },
                                },
                            },
                        },
                    },
                    metadata = new object[]
            {
null
            },
                },
                metadata = new object[]
            {
null
            },
            });
            Response response = client.CreateJobSchedule(content, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_CreateJobSchedule_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
                displayName = "<displayName>",
                schedule = new
                {
                    doNotRunUntil = "2022-05-10T18:57:31.2311892Z",
                    doNotRunAfter = "2022-05-10T18:57:31.2311892Z",
                    startWindow = "PT1H23M45S",
                    recurrenceInterval = "PT1H23M45S",
                },
                jobSpecification = new
                {
                    priority = 1234,
                    allowTaskPreemption = true,
                    maxParallelTasks = 1234,
                    displayName = "<displayName>",
                    usesTaskDependencies = true,
                    onAllTasksComplete = "noaction",
                    onTaskFailure = "noaction",
                    networkConfiguration = new
                    {
                        subnetId = "<subnetId>",
                    },
                    constraints = new
                    {
                        maxWallClockTime = "PT1H23M45S",
                        maxTaskRetryCount = 1234,
                    },
                    jobManagerTask = new
                    {
                        id = "<id>",
                        displayName = "<displayName>",
                        commandLine = "<commandLine>",
                        containerSettings = new
                        {
                            containerRunOptions = "<containerRunOptions>",
                            imageName = "<imageName>",
                            registry = new
                            {
                                username = "<username>",
                                password = "<password>",
                                registryServer = "<registryServer>",
                                identityReference = new
                                {
                                    resourceId = "<resourceId>",
                                },
                            },
                            workingDirectory = "taskWorkingDirectory",
                        },
                        resourceFiles = new object[]
            {
new
{
autoStorageContainerName = "<autoStorageContainerName>",
storageContainerUrl = "<storageContainerUrl>",
httpUrl = "<httpUrl>",
blobPrefix = "<blobPrefix>",
filePath = "<filePath>",
fileMode = "<fileMode>",
}
            },
                        outputFiles = new object[]
            {
new
{
filePattern = "<filePattern>",
destination = new
{
container = new
{
path = "<path>",
containerUrl = "<containerUrl>",
uploadHeaders = new object[]
{
new
{
name = "<name>",
value = "<value>",
}
},
},
},
uploadOptions = new
{
uploadCondition = "tasksuccess",
},
}
            },
                        environmentSettings = new object[]
            {
new
{
name = "<name>",
value = "<value>",
}
            },
                        constraints = new
                        {
                            maxWallClockTime = "PT1H23M45S",
                            retentionTime = "PT1H23M45S",
                            maxTaskRetryCount = 1234,
                        },
                        requiredSlots = 1234,
                        killJobOnCompletion = true,
                        userIdentity = new
                        {
                            username = "<username>",
                            autoUser = new
                            {
                                scope = "task",
                                elevationLevel = "nonadmin",
                            },
                        },
                        runExclusive = true,
                        applicationPackageReferences = new object[]
            {
new
{
applicationId = "<applicationId>",
version = "<version>",
}
            },
                        authenticationTokenSettings = new
                        {
                            access = new object[]
            {
"job"
            },
                        },
                        allowLowPriorityNode = true,
                    },
                    jobPreparationTask = new
                    {
                        id = "<id>",
                        commandLine = "<commandLine>",
                        resourceFiles = new object[]
            {
null
            },
                        environmentSettings = new object[]
            {
null
            },
                        waitForSuccess = true,
                        rerunOnNodeRebootAfterSuccess = true,
                    },
                    jobReleaseTask = new
                    {
                        id = "<id>",
                        commandLine = "<commandLine>",
                        resourceFiles = new object[]
            {
null
            },
                        environmentSettings = new object[]
            {
null
            },
                        maxWallClockTime = "PT1H23M45S",
                        retentionTime = "PT1H23M45S",
                    },
                    commonEnvironmentSettings = new object[]
            {
null
            },
                    poolInfo = new
                    {
                        poolId = "<poolId>",
                        autoPoolSpecification = new
                        {
                            autoPoolIdPrefix = "<autoPoolIdPrefix>",
                            poolLifetimeOption = "jobschedule",
                            keepAlive = true,
                            pool = new
                            {
                                displayName = "<displayName>",
                                vmSize = "<vmSize>",
                                virtualMachineConfiguration = new
                                {
                                    imageReference = new
                                    {
                                        publisher = "<publisher>",
                                        offer = "<offer>",
                                        sku = "<sku>",
                                        version = "<version>",
                                        virtualMachineImageId = "<virtualMachineImageId>",
                                    },
                                    nodeAgentSKUId = "<nodeAgentSKUId>",
                                    windowsConfiguration = new
                                    {
                                        enableAutomaticUpdates = true,
                                    },
                                    dataDisks = new object[]
            {
new
{
lun = 1234,
caching = "none",
diskSizeGB = 1234,
storageAccountType = "standard_lrs",
}
            },
                                    licenseType = "<licenseType>",
                                    containerConfiguration = new
                                    {
                                        type = "dockerCompatible",
                                        containerImageNames = new object[]
            {
"<containerImageNames>"
            },
                                        containerRegistries = new object[]
            {
null
            },
                                    },
                                    diskEncryptionConfiguration = new
                                    {
                                        targets = new object[]
            {
"osdisk"
            },
                                    },
                                    nodePlacementConfiguration = new
                                    {
                                        policy = "regional",
                                    },
                                    extensions = new object[]
            {
new
{
name = "<name>",
publisher = "<publisher>",
type = "<type>",
typeHandlerVersion = "<typeHandlerVersion>",
autoUpgradeMinorVersion = true,
enableAutomaticUpgrade = true,
settings = new
{
key = "<settings>",
},
protectedSettings = new
{
key = "<protectedSettings>",
},
provisionAfterExtensions = new object[]
{
"<provisionAfterExtensions>"
},
}
            },
                                    osDisk = new
                                    {
                                        ephemeralOSDiskSettings = new
                                        {
                                            placement = "cachedisk",
                                        },
                                        caching = "none",
                                        diskSizeGB = 1234,
                                        managedDisk = new
                                        {
                                            storageAccountType = "standard_lrs",
                                        },
                                        writeAcceleratorEnabled = true,
                                    },
                                    securityProfile = new
                                    {
                                        encryptionAtHost = true,
                                        securityType = "trustedLaunch",
                                        uefiSettings = new
                                        {
                                            secureBootEnabled = true,
                                            vTpmEnabled = true,
                                        },
                                    },
                                    serviceArtifactReference = new
                                    {
                                        id = "<id>",
                                    },
                                },
                                taskSlotsPerNode = 1234,
                                taskSchedulingPolicy = new
                                {
                                    nodeFillType = "spread",
                                },
                                resizeTimeout = "PT1H23M45S",
                                resourceTags = "<resourceTags>",
                                targetDedicatedNodes = 1234,
                                targetLowPriorityNodes = 1234,
                                enableAutoScale = true,
                                autoScaleFormula = "<autoScaleFormula>",
                                autoScaleEvaluationInterval = "PT1H23M45S",
                                enableInterNodeCommunication = true,
                                networkConfiguration = new
                                {
                                    subnetId = "<subnetId>",
                                    dynamicVNetAssignmentScope = "none",
                                    endpointConfiguration = new
                                    {
                                        inboundNATPools = new object[]
            {
new
{
name = "<name>",
protocol = "tcp",
backendPort = 1234,
frontendPortRangeStart = 1234,
frontendPortRangeEnd = 1234,
networkSecurityGroupRules = new object[]
{
new
{
priority = 1234,
access = "allow",
sourceAddressPrefix = "<sourceAddressPrefix>",
sourcePortRanges = new object[]
{
"<sourcePortRanges>"
},
}
},
}
            },
                                    },
                                    publicIPAddressConfiguration = new
                                    {
                                        provision = "batchmanaged",
                                        ipAddressIds = new object[]
            {
"<ipAddressIds>"
            },
                                    },
                                    enableAcceleratedNetworking = true,
                                },
                                startTask = new
                                {
                                    commandLine = "<commandLine>",
                                    resourceFiles = new object[]
            {
null
            },
                                    environmentSettings = new object[]
            {
null
            },
                                    maxTaskRetryCount = 1234,
                                    waitForSuccess = true,
                                },
                                applicationPackageReferences = new object[]
            {
null
            },
                                userAccounts = new object[]
            {
new
{
name = "<name>",
password = "<password>",
elevationLevel = "nonadmin",
linuxUserConfiguration = new
{
uid = 1234,
gid = 1234,
sshPrivateKey = "<sshPrivateKey>",
},
windowsUserConfiguration = new
{
loginMode = "batch",
},
}
            },
                                metadata = new object[]
            {
new
{
name = "<name>",
value = "<value>",
}
            },
                                mountConfiguration = new object[]
            {
new
{
azureBlobFileSystemConfiguration = new
{
accountName = "<accountName>",
containerName = "<containerName>",
accountKey = "<accountKey>",
sasKey = "<sasKey>",
blobfuseOptions = "<blobfuseOptions>",
relativeMountPath = "<relativeMountPath>",
},
nfsMountConfiguration = new
{
source = "<source>",
relativeMountPath = "<relativeMountPath>",
mountOptions = "<mountOptions>",
},
cifsMountConfiguration = new
{
username = "<username>",
source = "<source>",
relativeMountPath = "<relativeMountPath>",
mountOptions = "<mountOptions>",
password = "<password>",
},
azureFileShareConfiguration = new
{
accountName = "<accountName>",
azureFileUrl = "<azureFileUrl>",
accountKey = "<accountKey>",
relativeMountPath = "<relativeMountPath>",
mountOptions = "<mountOptions>",
},
}
            },
                                targetNodeCommunicationMode = "default",
                                upgradePolicy = new
                                {
                                    mode = "automatic",
                                    automaticOSUpgradePolicy = new
                                    {
                                        disableAutomaticRollback = true,
                                        enableAutomaticOSUpgrade = true,
                                        useRollingUpgradePolicy = true,
                                        osRollingUpgradeDeferral = true,
                                    },
                                    rollingUpgradePolicy = new
                                    {
                                        enableCrossZoneUpgrade = true,
                                        maxBatchInstancePercent = 1234,
                                        maxUnhealthyInstancePercent = 1234,
                                        maxUnhealthyUpgradedInstancePercent = 1234,
                                        pauseTimeBetweenBatches = "PT1H23M45S",
                                        prioritizeUnhealthyInstances = true,
                                        rollbackFailedInstancesOnPolicyBreach = true,
                                    },
                                },
                            },
                        },
                    },
                    metadata = new object[]
            {
null
            },
                },
                metadata = new object[]
            {
null
            },
            });
            Response response = await client.CreateJobScheduleAsync(content, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_CreateJobSchedule_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchJobScheduleCreateContent jobSchedule = new BatchJobScheduleCreateContent("<id>", new BatchJobScheduleConfiguration
            {
                DoNotRunUntil = DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"),
                DoNotRunAfter = DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"),
                StartWindow = XmlConvert.ToTimeSpan("PT1H23M45S"),
                RecurrenceInterval = XmlConvert.ToTimeSpan("PT1H23M45S"),
            }, new BatchJobSpecification(new BatchPoolInfo
            {
                PoolId = "<poolId>",
                AutoPoolSpecification = new BatchAutoPoolSpecification(BatchPoolLifetimeOption.JobSchedule)
                {
                    AutoPoolIdPrefix = "<autoPoolIdPrefix>",
                    KeepAlive = true,
                    Pool = new BatchPoolSpecification("<vmSize>")
                    {
                        DisplayName = "<displayName>",
                        VirtualMachineConfiguration = new VirtualMachineConfiguration(new ImageReference
                        {
                            Publisher = "<publisher>",
                            Offer = "<offer>",
                            Sku = "<sku>",
                            Version = "<version>",
                            VirtualMachineImageId = "<virtualMachineImageId>",
                        }, "<nodeAgentSKUId>")
                        {
                            WindowsConfiguration = new WindowsConfiguration
                            {
                                EnableAutomaticUpdates = true,
                            },
                            DataDisks = {new DataDisk(1234, 1234)
{
Caching = CachingType.None,
StorageAccountType = StorageAccountType.StandardLRS,
}},
                            LicenseType = "<licenseType>",
                            ContainerConfiguration = new ContainerConfiguration(ContainerType.DockerCompatible)
                            {
                                ContainerImageNames = { "<containerImageNames>" },
                                ContainerRegistries = { default },
                            },
                            DiskEncryptionConfiguration = new DiskEncryptionConfiguration
                            {
                                Targets = { DiskEncryptionTarget.OsDisk },
                            },
                            NodePlacementConfiguration = new BatchNodePlacementConfiguration
                            {
                                Policy = BatchNodePlacementPolicyType.Regional,
                            },
                            Extensions = {new VMExtension("<name>", "<publisher>", "<type>")
{
TypeHandlerVersion = "<typeHandlerVersion>",
AutoUpgradeMinorVersion = true,
EnableAutomaticUpgrade = true,
Settings =
{
["key"] = "<settings>"
},
ProtectedSettings =
{
["key"] = "<protectedSettings>"
},
ProvisionAfterExtensions = {"<provisionAfterExtensions>"},
}},
                            OsDisk = new OSDisk
                            {
                                EphemeralOSDiskSettings = new DiffDiskSettings
                                {
                                    Placement = DiffDiskPlacement.CacheDisk,
                                },
                                Caching = CachingType.None,
                                DiskSizeGB = 1234,
                                ManagedDisk = new ManagedDisk(StorageAccountType.StandardLRS),
                                WriteAcceleratorEnabled = true,
                            },
                            SecurityProfile = new SecurityProfile(true, SecurityTypes.TrustedLaunch, new UefiSettings
                            {
                                SecureBootEnabled = true,
                                VTpmEnabled = true,
                            }),
                            ServiceArtifactReference = new ServiceArtifactReference("<id>"),
                        },
                        TaskSlotsPerNode = 1234,
                        TaskSchedulingPolicy = new BatchTaskSchedulingPolicy(BatchNodeFillType.Spread),
                        ResizeTimeout = XmlConvert.ToTimeSpan("PT1H23M45S"),
                        ResourceTags = "<resourceTags>",
                        TargetDedicatedNodes = 1234,
                        TargetLowPriorityNodes = 1234,
                        EnableAutoScale = true,
                        AutoScaleFormula = "<autoScaleFormula>",
                        AutoScaleEvaluationInterval = XmlConvert.ToTimeSpan("PT1H23M45S"),
                        EnableInterNodeCommunication = true,
                        NetworkConfiguration = new NetworkConfiguration
                        {
                            SubnetId = "<subnetId>",
                            DynamicVNetAssignmentScope = DynamicVNetAssignmentScope.None,
                            EndpointConfiguration = new BatchPoolEndpointConfiguration(new InboundNatPool[]
            {
new InboundNatPool("<name>", InboundEndpointProtocol.Tcp, 1234, 1234, 1234)
{
NetworkSecurityGroupRules = {new NetworkSecurityGroupRule(1234, NetworkSecurityGroupRuleAccess.Allow, "<sourceAddressPrefix>")
{
SourcePortRanges = {"<sourcePortRanges>"},
}},
}
            }),
                            PublicIpAddressConfiguration = new PublicIpAddressConfiguration
                            {
                                IpAddressProvisioningType = IpAddressProvisioningType.BatchManaged,
                                IpAddressIds = { "<ipAddressIds>" },
                            },
                            EnableAcceleratedNetworking = true,
                        },
                        StartTask = new BatchStartTask("<commandLine>")
                        {
                            ContainerSettings = default,
                            ResourceFiles = { default },
                            EnvironmentSettings = { default },
                            UserIdentity = default,
                            MaxTaskRetryCount = 1234,
                            WaitForSuccess = true,
                        },
                        ApplicationPackageReferences = { default },
                        UserAccounts = {new UserAccount("<name>", "<password>")
{
ElevationLevel = ElevationLevel.NonAdmin,
LinuxUserConfiguration = new LinuxUserConfiguration
{
Uid = 1234,
Gid = 1234,
SshPrivateKey = "<sshPrivateKey>",
},
WindowsUserConfiguration = new WindowsUserConfiguration
{
LoginMode = LoginMode.Batch,
},
}},
                        Metadata = { new MetadataItem("<name>", "<value>") },
                        MountConfiguration = {new MountConfiguration
{
AzureBlobFileSystemConfiguration = new AzureBlobFileSystemConfiguration("<accountName>", "<containerName>", "<relativeMountPath>")
{
AccountKey = "<accountKey>",
SasKey = "<sasKey>",
BlobfuseOptions = "<blobfuseOptions>",
IdentityReference = default,
},
NfsMountConfiguration = new NfsMountConfiguration("<source>", "<relativeMountPath>")
{
MountOptions = "<mountOptions>",
},
CifsMountConfiguration = new CifsMountConfiguration("<username>", "<source>", "<relativeMountPath>", "<password>")
{
MountOptions = "<mountOptions>",
},
AzureFileShareConfiguration = new AzureFileShareConfiguration("<accountName>", "<azureFileUrl>", "<accountKey>", "<relativeMountPath>")
{
MountOptions = "<mountOptions>",
},
}},
                        TargetNodeCommunicationMode = BatchNodeCommunicationMode.Default,
                        UpgradePolicy = new UpgradePolicy(UpgradeMode.Automatic)
                        {
                            AutomaticOsUpgradePolicy = new AutomaticOsUpgradePolicy
                            {
                                DisableAutomaticRollback = true,
                                EnableAutomaticOsUpgrade = true,
                                UseRollingUpgradePolicy = true,
                                OsRollingUpgradeDeferral = true,
                            },
                            RollingUpgradePolicy = new RollingUpgradePolicy
                            {
                                EnableCrossZoneUpgrade = true,
                                MaxBatchInstancePercent = 1234,
                                MaxUnhealthyInstancePercent = 1234,
                                MaxUnhealthyUpgradedInstancePercent = 1234,
                                PauseTimeBetweenBatches = XmlConvert.ToTimeSpan("PT1H23M45S"),
                                PrioritizeUnhealthyInstances = true,
                                RollbackFailedInstancesOnPolicyBreach = true,
                            },
                        },
                    },
                },
            })
            {
                Priority = 1234,
                AllowTaskPreemption = true,
                MaxParallelTasks = 1234,
                DisplayName = "<displayName>",
                UsesTaskDependencies = true,
                OnAllTasksComplete = OnAllBatchTasksComplete.NoAction,
                OnTaskFailure = OnBatchTaskFailure.NoAction,
                NetworkConfiguration = new BatchJobNetworkConfiguration("<subnetId>"),
                Constraints = new BatchJobConstraints
                {
                    MaxWallClockTime = XmlConvert.ToTimeSpan("PT1H23M45S"),
                    MaxTaskRetryCount = 1234,
                },
                JobManagerTask = new BatchJobManagerTask("<id>", "<commandLine>")
                {
                    DisplayName = "<displayName>",
                    ContainerSettings = new BatchTaskContainerSettings("<imageName>")
                    {
                        ContainerRunOptions = "<containerRunOptions>",
                        Registry = new ContainerRegistryReference
                        {
                            Username = "<username>",
                            Password = "<password>",
                            RegistryServer = "<registryServer>",
                            IdentityReference = new BatchNodeIdentityReference
                            {
                                ResourceId = "<resourceId>",
                            },
                        },
                        WorkingDirectory = ContainerWorkingDirectory.TaskWorkingDirectory,
                    },
                    ResourceFiles = {new ResourceFile
{
AutoStorageContainerName = "<autoStorageContainerName>",
StorageContainerUrl = "<storageContainerUrl>",
HttpUrl = "<httpUrl>",
BlobPrefix = "<blobPrefix>",
FilePath = "<filePath>",
FileMode = "<fileMode>",
IdentityReference = default,
}},
                    OutputFiles = {new OutputFile("<filePattern>", new OutputFileDestination
{
Container = new OutputFileBlobContainerDestination("<containerUrl>")
{
Path = "<path>",
IdentityReference = default,
UploadHeaders = {new HttpHeader("<name>")
{
Value = "<value>",
}},
},
}, new OutputFileUploadConfig(OutputFileUploadCondition.TaskSuccess))},
                    EnvironmentSettings = {new EnvironmentSetting("<name>")
{
Value = "<value>",
}},
                    Constraints = new BatchTaskConstraints
                    {
                        MaxWallClockTime = XmlConvert.ToTimeSpan("PT1H23M45S"),
                        RetentionTime = XmlConvert.ToTimeSpan("PT1H23M45S"),
                        MaxTaskRetryCount = 1234,
                    },
                    RequiredSlots = 1234,
                    KillJobOnCompletion = true,
                    UserIdentity = new UserIdentity
                    {
                        Username = "<username>",
                        AutoUser = new AutoUserSpecification
                        {
                            Scope = AutoUserScope.Task,
                            ElevationLevel = ElevationLevel.NonAdmin,
                        },
                    },
                    RunExclusive = true,
                    ApplicationPackageReferences = {new BatchApplicationPackageReference("<applicationId>")
{
Version = "<version>",
}},
                    AuthenticationTokenSettings = new AuthenticationTokenSettings
                    {
                        Access = { AccessScope.Job },
                    },
                    AllowLowPriorityNode = true,
                },
                JobPreparationTask = new BatchJobPreparationTask("<commandLine>")
                {
                    Id = "<id>",
                    ContainerSettings = default,
                    ResourceFiles = { default },
                    EnvironmentSettings = { default },
                    Constraints = default,
                    WaitForSuccess = true,
                    UserIdentity = default,
                    RerunOnNodeRebootAfterSuccess = true,
                },
                JobReleaseTask = new BatchJobReleaseTask("<commandLine>")
                {
                    Id = "<id>",
                    ContainerSettings = default,
                    ResourceFiles = { default },
                    EnvironmentSettings = { default },
                    MaxWallClockTime = XmlConvert.ToTimeSpan("PT1H23M45S"),
                    RetentionTime = XmlConvert.ToTimeSpan("PT1H23M45S"),
                    UserIdentity = default,
                },
                CommonEnvironmentSettings = { default },
                Metadata = { default },
            })
            {
                DisplayName = "<displayName>",
                Metadata = { default },
            };
            Response response = client.CreateJobSchedule(jobSchedule, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_CreateJobSchedule_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchJobScheduleCreateContent jobSchedule = new BatchJobScheduleCreateContent("<id>", new BatchJobScheduleConfiguration
            {
                DoNotRunUntil = DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"),
                DoNotRunAfter = DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"),
                StartWindow = XmlConvert.ToTimeSpan("PT1H23M45S"),
                RecurrenceInterval = XmlConvert.ToTimeSpan("PT1H23M45S"),
            }, new BatchJobSpecification(new BatchPoolInfo
            {
                PoolId = "<poolId>",
                AutoPoolSpecification = new BatchAutoPoolSpecification(BatchPoolLifetimeOption.JobSchedule)
                {
                    AutoPoolIdPrefix = "<autoPoolIdPrefix>",
                    KeepAlive = true,
                    Pool = new BatchPoolSpecification("<vmSize>")
                    {
                        DisplayName = "<displayName>",
                        VirtualMachineConfiguration = new VirtualMachineConfiguration(new ImageReference
                        {
                            Publisher = "<publisher>",
                            Offer = "<offer>",
                            Sku = "<sku>",
                            Version = "<version>",
                            VirtualMachineImageId = "<virtualMachineImageId>",
                        }, "<nodeAgentSKUId>")
                        {
                            WindowsConfiguration = new WindowsConfiguration
                            {
                                EnableAutomaticUpdates = true,
                            },
                            DataDisks = {new DataDisk(1234, 1234)
{
Caching = CachingType.None,
StorageAccountType = StorageAccountType.StandardLRS,
}},
                            LicenseType = "<licenseType>",
                            ContainerConfiguration = new ContainerConfiguration(ContainerType.DockerCompatible)
                            {
                                ContainerImageNames = { "<containerImageNames>" },
                                ContainerRegistries = { default },
                            },
                            DiskEncryptionConfiguration = new DiskEncryptionConfiguration
                            {
                                Targets = { DiskEncryptionTarget.OsDisk },
                            },
                            NodePlacementConfiguration = new BatchNodePlacementConfiguration
                            {
                                Policy = BatchNodePlacementPolicyType.Regional,
                            },
                            Extensions = {new VMExtension("<name>", "<publisher>", "<type>")
{
TypeHandlerVersion = "<typeHandlerVersion>",
AutoUpgradeMinorVersion = true,
EnableAutomaticUpgrade = true,
Settings =
{
["key"] = "<settings>"
},
ProtectedSettings =
{
["key"] = "<protectedSettings>"
},
ProvisionAfterExtensions = {"<provisionAfterExtensions>"},
}},
                            OsDisk = new OSDisk
                            {
                                EphemeralOSDiskSettings = new DiffDiskSettings
                                {
                                    Placement = DiffDiskPlacement.CacheDisk,
                                },
                                Caching = CachingType.None,
                                DiskSizeGB = 1234,
                                ManagedDisk = new ManagedDisk(StorageAccountType.StandardLRS),
                                WriteAcceleratorEnabled = true,
                            },
                            SecurityProfile = new SecurityProfile(true, SecurityTypes.TrustedLaunch, new UefiSettings
                            {
                                SecureBootEnabled = true,
                                VTpmEnabled = true,
                            }),
                            ServiceArtifactReference = new ServiceArtifactReference("<id>"),
                        },
                        TaskSlotsPerNode = 1234,
                        TaskSchedulingPolicy = new BatchTaskSchedulingPolicy(BatchNodeFillType.Spread),
                        ResizeTimeout = XmlConvert.ToTimeSpan("PT1H23M45S"),
                        ResourceTags = "<resourceTags>",
                        TargetDedicatedNodes = 1234,
                        TargetLowPriorityNodes = 1234,
                        EnableAutoScale = true,
                        AutoScaleFormula = "<autoScaleFormula>",
                        AutoScaleEvaluationInterval = XmlConvert.ToTimeSpan("PT1H23M45S"),
                        EnableInterNodeCommunication = true,
                        NetworkConfiguration = new NetworkConfiguration
                        {
                            SubnetId = "<subnetId>",
                            DynamicVNetAssignmentScope = DynamicVNetAssignmentScope.None,
                            EndpointConfiguration = new BatchPoolEndpointConfiguration(new InboundNatPool[]
            {
new InboundNatPool("<name>", InboundEndpointProtocol.Tcp, 1234, 1234, 1234)
{
NetworkSecurityGroupRules = {new NetworkSecurityGroupRule(1234, NetworkSecurityGroupRuleAccess.Allow, "<sourceAddressPrefix>")
{
SourcePortRanges = {"<sourcePortRanges>"},
}},
}
            }),
                            PublicIpAddressConfiguration = new PublicIpAddressConfiguration
                            {
                                IpAddressProvisioningType = IpAddressProvisioningType.BatchManaged,
                                IpAddressIds = { "<ipAddressIds>" },
                            },
                            EnableAcceleratedNetworking = true,
                        },
                        StartTask = new BatchStartTask("<commandLine>")
                        {
                            ContainerSettings = default,
                            ResourceFiles = { default },
                            EnvironmentSettings = { default },
                            UserIdentity = default,
                            MaxTaskRetryCount = 1234,
                            WaitForSuccess = true,
                        },
                        ApplicationPackageReferences = { default },
                        UserAccounts = {new UserAccount("<name>", "<password>")
{
ElevationLevel = ElevationLevel.NonAdmin,
LinuxUserConfiguration = new LinuxUserConfiguration
{
Uid = 1234,
Gid = 1234,
SshPrivateKey = "<sshPrivateKey>",
},
WindowsUserConfiguration = new WindowsUserConfiguration
{
LoginMode = LoginMode.Batch,
},
}},
                        Metadata = { new MetadataItem("<name>", "<value>") },
                        MountConfiguration = {new MountConfiguration
{
AzureBlobFileSystemConfiguration = new AzureBlobFileSystemConfiguration("<accountName>", "<containerName>", "<relativeMountPath>")
{
AccountKey = "<accountKey>",
SasKey = "<sasKey>",
BlobfuseOptions = "<blobfuseOptions>",
IdentityReference = default,
},
NfsMountConfiguration = new NfsMountConfiguration("<source>", "<relativeMountPath>")
{
MountOptions = "<mountOptions>",
},
CifsMountConfiguration = new CifsMountConfiguration("<username>", "<source>", "<relativeMountPath>", "<password>")
{
MountOptions = "<mountOptions>",
},
AzureFileShareConfiguration = new AzureFileShareConfiguration("<accountName>", "<azureFileUrl>", "<accountKey>", "<relativeMountPath>")
{
MountOptions = "<mountOptions>",
},
}},
                        TargetNodeCommunicationMode = BatchNodeCommunicationMode.Default,
                        UpgradePolicy = new UpgradePolicy(UpgradeMode.Automatic)
                        {
                            AutomaticOsUpgradePolicy = new AutomaticOsUpgradePolicy
                            {
                                DisableAutomaticRollback = true,
                                EnableAutomaticOsUpgrade = true,
                                UseRollingUpgradePolicy = true,
                                OsRollingUpgradeDeferral = true,
                            },
                            RollingUpgradePolicy = new RollingUpgradePolicy
                            {
                                EnableCrossZoneUpgrade = true,
                                MaxBatchInstancePercent = 1234,
                                MaxUnhealthyInstancePercent = 1234,
                                MaxUnhealthyUpgradedInstancePercent = 1234,
                                PauseTimeBetweenBatches = XmlConvert.ToTimeSpan("PT1H23M45S"),
                                PrioritizeUnhealthyInstances = true,
                                RollbackFailedInstancesOnPolicyBreach = true,
                            },
                        },
                    },
                },
            })
            {
                Priority = 1234,
                AllowTaskPreemption = true,
                MaxParallelTasks = 1234,
                DisplayName = "<displayName>",
                UsesTaskDependencies = true,
                OnAllTasksComplete = OnAllBatchTasksComplete.NoAction,
                OnTaskFailure = OnBatchTaskFailure.NoAction,
                NetworkConfiguration = new BatchJobNetworkConfiguration("<subnetId>"),
                Constraints = new BatchJobConstraints
                {
                    MaxWallClockTime = XmlConvert.ToTimeSpan("PT1H23M45S"),
                    MaxTaskRetryCount = 1234,
                },
                JobManagerTask = new BatchJobManagerTask("<id>", "<commandLine>")
                {
                    DisplayName = "<displayName>",
                    ContainerSettings = new BatchTaskContainerSettings("<imageName>")
                    {
                        ContainerRunOptions = "<containerRunOptions>",
                        Registry = new ContainerRegistryReference
                        {
                            Username = "<username>",
                            Password = "<password>",
                            RegistryServer = "<registryServer>",
                            IdentityReference = new BatchNodeIdentityReference
                            {
                                ResourceId = "<resourceId>",
                            },
                        },
                        WorkingDirectory = ContainerWorkingDirectory.TaskWorkingDirectory,
                    },
                    ResourceFiles = {new ResourceFile
{
AutoStorageContainerName = "<autoStorageContainerName>",
StorageContainerUrl = "<storageContainerUrl>",
HttpUrl = "<httpUrl>",
BlobPrefix = "<blobPrefix>",
FilePath = "<filePath>",
FileMode = "<fileMode>",
IdentityReference = default,
}},
                    OutputFiles = {new OutputFile("<filePattern>", new OutputFileDestination
{
Container = new OutputFileBlobContainerDestination("<containerUrl>")
{
Path = "<path>",
IdentityReference = default,
UploadHeaders = {new HttpHeader("<name>")
{
Value = "<value>",
}},
},
}, new OutputFileUploadConfig(OutputFileUploadCondition.TaskSuccess))},
                    EnvironmentSettings = {new EnvironmentSetting("<name>")
{
Value = "<value>",
}},
                    Constraints = new BatchTaskConstraints
                    {
                        MaxWallClockTime = XmlConvert.ToTimeSpan("PT1H23M45S"),
                        RetentionTime = XmlConvert.ToTimeSpan("PT1H23M45S"),
                        MaxTaskRetryCount = 1234,
                    },
                    RequiredSlots = 1234,
                    KillJobOnCompletion = true,
                    UserIdentity = new UserIdentity
                    {
                        Username = "<username>",
                        AutoUser = new AutoUserSpecification
                        {
                            Scope = AutoUserScope.Task,
                            ElevationLevel = ElevationLevel.NonAdmin,
                        },
                    },
                    RunExclusive = true,
                    ApplicationPackageReferences = {new BatchApplicationPackageReference("<applicationId>")
{
Version = "<version>",
}},
                    AuthenticationTokenSettings = new AuthenticationTokenSettings
                    {
                        Access = { AccessScope.Job },
                    },
                    AllowLowPriorityNode = true,
                },
                JobPreparationTask = new BatchJobPreparationTask("<commandLine>")
                {
                    Id = "<id>",
                    ContainerSettings = default,
                    ResourceFiles = { default },
                    EnvironmentSettings = { default },
                    Constraints = default,
                    WaitForSuccess = true,
                    UserIdentity = default,
                    RerunOnNodeRebootAfterSuccess = true,
                },
                JobReleaseTask = new BatchJobReleaseTask("<commandLine>")
                {
                    Id = "<id>",
                    ContainerSettings = default,
                    ResourceFiles = { default },
                    EnvironmentSettings = { default },
                    MaxWallClockTime = XmlConvert.ToTimeSpan("PT1H23M45S"),
                    RetentionTime = XmlConvert.ToTimeSpan("PT1H23M45S"),
                    UserIdentity = default,
                },
                CommonEnvironmentSettings = { default },
                Metadata = { default },
            })
            {
                DisplayName = "<displayName>",
                Metadata = { default },
            };
            Response response = await client.CreateJobScheduleAsync(jobSchedule, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_CreateTask_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
                commandLine = "<commandLine>",
            });
            Response response = client.CreateTask("<jobId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_CreateTask_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
                commandLine = "<commandLine>",
            });
            Response response = await client.CreateTaskAsync("<jobId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_CreateTask_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchTaskCreateContent task = new BatchTaskCreateContent("<id>", "<commandLine>");
            Response response = client.CreateTask("<jobId>", task);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_CreateTask_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchTaskCreateContent task = new BatchTaskCreateContent("<id>", "<commandLine>");
            Response response = await client.CreateTaskAsync("<jobId>", task);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_CreateTask_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
                displayName = "<displayName>",
                exitConditions = new Dictionary<string, object>
                {
                    ["exitCodes"] = new object[]
            {
new
{
code = 1234,
exitOptions = new
{
jobAction = "none",
dependencyAction = "satisfy",
},
}
            },
                    ["exitCodeRanges"] = new object[]
            {
new
{
start = 1234,
end = 1234,
}
            },
                    ["preProcessingError"] = null,
                    ["fileUploadError"] = null,
                    ["default"] = null
                },
                commandLine = "<commandLine>",
                containerSettings = new
                {
                    containerRunOptions = "<containerRunOptions>",
                    imageName = "<imageName>",
                    registry = new
                    {
                        username = "<username>",
                        password = "<password>",
                        registryServer = "<registryServer>",
                        identityReference = new
                        {
                            resourceId = "<resourceId>",
                        },
                    },
                    workingDirectory = "taskWorkingDirectory",
                },
                resourceFiles = new object[]
            {
new
{
autoStorageContainerName = "<autoStorageContainerName>",
storageContainerUrl = "<storageContainerUrl>",
httpUrl = "<httpUrl>",
blobPrefix = "<blobPrefix>",
filePath = "<filePath>",
fileMode = "<fileMode>",
}
            },
                outputFiles = new object[]
            {
new
{
filePattern = "<filePattern>",
destination = new
{
container = new
{
path = "<path>",
containerUrl = "<containerUrl>",
uploadHeaders = new object[]
{
new
{
name = "<name>",
value = "<value>",
}
},
},
},
uploadOptions = new
{
uploadCondition = "tasksuccess",
},
}
            },
                environmentSettings = new object[]
            {
new
{
name = "<name>",
value = "<value>",
}
            },
                affinityInfo = new
                {
                    affinityId = "<affinityId>",
                },
                constraints = new
                {
                    maxWallClockTime = "PT1H23M45S",
                    retentionTime = "PT1H23M45S",
                    maxTaskRetryCount = 1234,
                },
                requiredSlots = 1234,
                userIdentity = new
                {
                    username = "<username>",
                    autoUser = new
                    {
                        scope = "task",
                        elevationLevel = "nonadmin",
                    },
                },
                multiInstanceSettings = new
                {
                    numberOfInstances = 1234,
                    coordinationCommandLine = "<coordinationCommandLine>",
                    commonResourceFiles = new object[]
            {
null
            },
                },
                dependsOn = new
                {
                    taskIds = new object[]
            {
"<taskIds>"
            },
                    taskIdRanges = new object[]
            {
new
{
start = 1234,
end = 1234,
}
            },
                },
                applicationPackageReferences = new object[]
            {
new
{
applicationId = "<applicationId>",
version = "<version>",
}
            },
                authenticationTokenSettings = new
                {
                    access = new object[]
            {
"job"
            },
                },
            });
            Response response = client.CreateTask("<jobId>", content, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_CreateTask_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                id = "<id>",
                displayName = "<displayName>",
                exitConditions = new Dictionary<string, object>
                {
                    ["exitCodes"] = new object[]
            {
new
{
code = 1234,
exitOptions = new
{
jobAction = "none",
dependencyAction = "satisfy",
},
}
            },
                    ["exitCodeRanges"] = new object[]
            {
new
{
start = 1234,
end = 1234,
}
            },
                    ["preProcessingError"] = null,
                    ["fileUploadError"] = null,
                    ["default"] = null
                },
                commandLine = "<commandLine>",
                containerSettings = new
                {
                    containerRunOptions = "<containerRunOptions>",
                    imageName = "<imageName>",
                    registry = new
                    {
                        username = "<username>",
                        password = "<password>",
                        registryServer = "<registryServer>",
                        identityReference = new
                        {
                            resourceId = "<resourceId>",
                        },
                    },
                    workingDirectory = "taskWorkingDirectory",
                },
                resourceFiles = new object[]
            {
new
{
autoStorageContainerName = "<autoStorageContainerName>",
storageContainerUrl = "<storageContainerUrl>",
httpUrl = "<httpUrl>",
blobPrefix = "<blobPrefix>",
filePath = "<filePath>",
fileMode = "<fileMode>",
}
            },
                outputFiles = new object[]
            {
new
{
filePattern = "<filePattern>",
destination = new
{
container = new
{
path = "<path>",
containerUrl = "<containerUrl>",
uploadHeaders = new object[]
{
new
{
name = "<name>",
value = "<value>",
}
},
},
},
uploadOptions = new
{
uploadCondition = "tasksuccess",
},
}
            },
                environmentSettings = new object[]
            {
new
{
name = "<name>",
value = "<value>",
}
            },
                affinityInfo = new
                {
                    affinityId = "<affinityId>",
                },
                constraints = new
                {
                    maxWallClockTime = "PT1H23M45S",
                    retentionTime = "PT1H23M45S",
                    maxTaskRetryCount = 1234,
                },
                requiredSlots = 1234,
                userIdentity = new
                {
                    username = "<username>",
                    autoUser = new
                    {
                        scope = "task",
                        elevationLevel = "nonadmin",
                    },
                },
                multiInstanceSettings = new
                {
                    numberOfInstances = 1234,
                    coordinationCommandLine = "<coordinationCommandLine>",
                    commonResourceFiles = new object[]
            {
null
            },
                },
                dependsOn = new
                {
                    taskIds = new object[]
            {
"<taskIds>"
            },
                    taskIdRanges = new object[]
            {
new
{
start = 1234,
end = 1234,
}
            },
                },
                applicationPackageReferences = new object[]
            {
new
{
applicationId = "<applicationId>",
version = "<version>",
}
            },
                authenticationTokenSettings = new
                {
                    access = new object[]
            {
"job"
            },
                },
            });
            Response response = await client.CreateTaskAsync("<jobId>", content, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_CreateTask_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchTaskCreateContent task = new BatchTaskCreateContent("<id>", "<commandLine>")
            {
                DisplayName = "<displayName>",
                ExitConditions = new ExitConditions
                {
                    ExitCodes = {new ExitCodeMapping(1234, new ExitOptions
{
JobAction = BatchJobAction.None,
DependencyAction = DependencyAction.Satisfy,
})},
                    ExitCodeRanges = { new ExitCodeRangeMapping(1234, 1234, default) },
                    PreProcessingError = default,
                    FileUploadError = default,
                    Default = default,
                },
                ContainerSettings = new BatchTaskContainerSettings("<imageName>")
                {
                    ContainerRunOptions = "<containerRunOptions>",
                    Registry = new ContainerRegistryReference
                    {
                        Username = "<username>",
                        Password = "<password>",
                        RegistryServer = "<registryServer>",
                        IdentityReference = new BatchNodeIdentityReference
                        {
                            ResourceId = "<resourceId>",
                        },
                    },
                    WorkingDirectory = ContainerWorkingDirectory.TaskWorkingDirectory,
                },
                ResourceFiles = {new ResourceFile
{
AutoStorageContainerName = "<autoStorageContainerName>",
StorageContainerUrl = "<storageContainerUrl>",
HttpUrl = "<httpUrl>",
BlobPrefix = "<blobPrefix>",
FilePath = "<filePath>",
FileMode = "<fileMode>",
IdentityReference = default,
}},
                OutputFiles = {new OutputFile("<filePattern>", new OutputFileDestination
{
Container = new OutputFileBlobContainerDestination("<containerUrl>")
{
Path = "<path>",
IdentityReference = default,
UploadHeaders = {new HttpHeader("<name>")
{
Value = "<value>",
}},
},
}, new OutputFileUploadConfig(OutputFileUploadCondition.TaskSuccess))},
                EnvironmentSettings = {new EnvironmentSetting("<name>")
{
Value = "<value>",
}},
                AffinityInfo = new AffinityInfo("<affinityId>"),
                Constraints = new BatchTaskConstraints
                {
                    MaxWallClockTime = XmlConvert.ToTimeSpan("PT1H23M45S"),
                    RetentionTime = XmlConvert.ToTimeSpan("PT1H23M45S"),
                    MaxTaskRetryCount = 1234,
                },
                RequiredSlots = 1234,
                UserIdentity = new UserIdentity
                {
                    Username = "<username>",
                    AutoUser = new AutoUserSpecification
                    {
                        Scope = AutoUserScope.Task,
                        ElevationLevel = ElevationLevel.NonAdmin,
                    },
                },
                MultiInstanceSettings = new MultiInstanceSettings("<coordinationCommandLine>")
                {
                    NumberOfInstances = 1234,
                    CommonResourceFiles = { default },
                },
                DependsOn = new BatchTaskDependencies
                {
                    TaskIds = { "<taskIds>" },
                    TaskIdRanges = { new BatchTaskIdRange(1234, 1234) },
                },
                ApplicationPackageReferences = {new BatchApplicationPackageReference("<applicationId>")
{
Version = "<version>",
}},
                AuthenticationTokenSettings = new AuthenticationTokenSettings
                {
                    Access = { AccessScope.Job },
                },
            };
            Response response = client.CreateTask("<jobId>", task, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_CreateTask_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchTaskCreateContent task = new BatchTaskCreateContent("<id>", "<commandLine>")
            {
                DisplayName = "<displayName>",
                ExitConditions = new ExitConditions
                {
                    ExitCodes = {new ExitCodeMapping(1234, new ExitOptions
{
JobAction = BatchJobAction.None,
DependencyAction = DependencyAction.Satisfy,
})},
                    ExitCodeRanges = { new ExitCodeRangeMapping(1234, 1234, default) },
                    PreProcessingError = default,
                    FileUploadError = default,
                    Default = default,
                },
                ContainerSettings = new BatchTaskContainerSettings("<imageName>")
                {
                    ContainerRunOptions = "<containerRunOptions>",
                    Registry = new ContainerRegistryReference
                    {
                        Username = "<username>",
                        Password = "<password>",
                        RegistryServer = "<registryServer>",
                        IdentityReference = new BatchNodeIdentityReference
                        {
                            ResourceId = "<resourceId>",
                        },
                    },
                    WorkingDirectory = ContainerWorkingDirectory.TaskWorkingDirectory,
                },
                ResourceFiles = {new ResourceFile
{
AutoStorageContainerName = "<autoStorageContainerName>",
StorageContainerUrl = "<storageContainerUrl>",
HttpUrl = "<httpUrl>",
BlobPrefix = "<blobPrefix>",
FilePath = "<filePath>",
FileMode = "<fileMode>",
IdentityReference = default,
}},
                OutputFiles = {new OutputFile("<filePattern>", new OutputFileDestination
{
Container = new OutputFileBlobContainerDestination("<containerUrl>")
{
Path = "<path>",
IdentityReference = default,
UploadHeaders = {new HttpHeader("<name>")
{
Value = "<value>",
}},
},
}, new OutputFileUploadConfig(OutputFileUploadCondition.TaskSuccess))},
                EnvironmentSettings = {new EnvironmentSetting("<name>")
{
Value = "<value>",
}},
                AffinityInfo = new AffinityInfo("<affinityId>"),
                Constraints = new BatchTaskConstraints
                {
                    MaxWallClockTime = XmlConvert.ToTimeSpan("PT1H23M45S"),
                    RetentionTime = XmlConvert.ToTimeSpan("PT1H23M45S"),
                    MaxTaskRetryCount = 1234,
                },
                RequiredSlots = 1234,
                UserIdentity = new UserIdentity
                {
                    Username = "<username>",
                    AutoUser = new AutoUserSpecification
                    {
                        Scope = AutoUserScope.Task,
                        ElevationLevel = ElevationLevel.NonAdmin,
                    },
                },
                MultiInstanceSettings = new MultiInstanceSettings("<coordinationCommandLine>")
                {
                    NumberOfInstances = 1234,
                    CommonResourceFiles = { default },
                },
                DependsOn = new BatchTaskDependencies
                {
                    TaskIds = { "<taskIds>" },
                    TaskIdRanges = { new BatchTaskIdRange(1234, 1234) },
                },
                ApplicationPackageReferences = {new BatchApplicationPackageReference("<applicationId>")
{
Version = "<version>",
}},
                AuthenticationTokenSettings = new AuthenticationTokenSettings
                {
                    Access = { AccessScope.Job },
                },
            };
            Response response = await client.CreateTaskAsync("<jobId>", task, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_CreateTaskCollection_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                value = new object[]
            {
new
{
id = "<id>",
commandLine = "<commandLine>",
}
            },
            });
            Response response = client.CreateTaskCollection("<jobId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_CreateTaskCollection_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                value = new object[]
            {
new
{
id = "<id>",
commandLine = "<commandLine>",
}
            },
            });
            Response response = await client.CreateTaskCollectionAsync("<jobId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_CreateTaskCollection_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchTaskGroup taskCollection = new BatchTaskGroup(new BatchTaskCreateContent[]
            {
new BatchTaskCreateContent("<id>", "<commandLine>")
            });
            Response<BatchTaskAddCollectionResult> response = client.CreateTaskCollection("<jobId>", taskCollection);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_CreateTaskCollection_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchTaskGroup taskCollection = new BatchTaskGroup(new BatchTaskCreateContent[]
            {
new BatchTaskCreateContent("<id>", "<commandLine>")
            });
            Response<BatchTaskAddCollectionResult> response = await client.CreateTaskCollectionAsync("<jobId>", taskCollection);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_CreateTaskCollection_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                value = new object[]
            {
new
{
id = "<id>",
displayName = "<displayName>",
exitConditions = new Dictionary<string, object>
{
["exitCodes"] = new object[]
{
new
{
code = 1234,
exitOptions = new
{
jobAction = "none",
dependencyAction = "satisfy",
},
}
},
["exitCodeRanges"] = new object[]
{
new
{
start = 1234,
end = 1234,
}
},
["preProcessingError"] = null,
["fileUploadError"] = null,
["default"] = null
},
commandLine = "<commandLine>",
containerSettings = new
{
containerRunOptions = "<containerRunOptions>",
imageName = "<imageName>",
registry = new
{
username = "<username>",
password = "<password>",
registryServer = "<registryServer>",
identityReference = new
{
resourceId = "<resourceId>",
},
},
workingDirectory = "taskWorkingDirectory",
},
resourceFiles = new object[]
{
new
{
autoStorageContainerName = "<autoStorageContainerName>",
storageContainerUrl = "<storageContainerUrl>",
httpUrl = "<httpUrl>",
blobPrefix = "<blobPrefix>",
filePath = "<filePath>",
fileMode = "<fileMode>",
}
},
outputFiles = new object[]
{
new
{
filePattern = "<filePattern>",
destination = new
{
container = new
{
path = "<path>",
containerUrl = "<containerUrl>",
uploadHeaders = new object[]
{
new
{
name = "<name>",
value = "<value>",
}
},
},
},
uploadOptions = new
{
uploadCondition = "tasksuccess",
},
}
},
environmentSettings = new object[]
{
new
{
name = "<name>",
value = "<value>",
}
},
affinityInfo = new
{
affinityId = "<affinityId>",
},
constraints = new
{
maxWallClockTime = "PT1H23M45S",
retentionTime = "PT1H23M45S",
maxTaskRetryCount = 1234,
},
requiredSlots = 1234,
userIdentity = new
{
username = "<username>",
autoUser = new
{
scope = "task",
elevationLevel = "nonadmin",
},
},
multiInstanceSettings = new
{
numberOfInstances = 1234,
coordinationCommandLine = "<coordinationCommandLine>",
commonResourceFiles = new object[]
{
null
},
},
dependsOn = new
{
taskIds = new object[]
{
"<taskIds>"
},
taskIdRanges = new object[]
{
new
{
start = 1234,
end = 1234,
}
},
},
applicationPackageReferences = new object[]
{
new
{
applicationId = "<applicationId>",
version = "<version>",
}
},
authenticationTokenSettings = new
{
access = new object[]
{
"job"
},
},
}
            },
            });
            Response response = client.CreateTaskCollection("<jobId>", content, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("taskId").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("eTag").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("lastModified").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("error").GetProperty("message").GetProperty("lang").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("error").GetProperty("message").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("error").GetProperty("values")[0].GetProperty("key").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("error").GetProperty("values")[0].GetProperty("value").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_CreateTaskCollection_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                value = new object[]
            {
new
{
id = "<id>",
displayName = "<displayName>",
exitConditions = new Dictionary<string, object>
{
["exitCodes"] = new object[]
{
new
{
code = 1234,
exitOptions = new
{
jobAction = "none",
dependencyAction = "satisfy",
},
}
},
["exitCodeRanges"] = new object[]
{
new
{
start = 1234,
end = 1234,
}
},
["preProcessingError"] = null,
["fileUploadError"] = null,
["default"] = null
},
commandLine = "<commandLine>",
containerSettings = new
{
containerRunOptions = "<containerRunOptions>",
imageName = "<imageName>",
registry = new
{
username = "<username>",
password = "<password>",
registryServer = "<registryServer>",
identityReference = new
{
resourceId = "<resourceId>",
},
},
workingDirectory = "taskWorkingDirectory",
},
resourceFiles = new object[]
{
new
{
autoStorageContainerName = "<autoStorageContainerName>",
storageContainerUrl = "<storageContainerUrl>",
httpUrl = "<httpUrl>",
blobPrefix = "<blobPrefix>",
filePath = "<filePath>",
fileMode = "<fileMode>",
}
},
outputFiles = new object[]
{
new
{
filePattern = "<filePattern>",
destination = new
{
container = new
{
path = "<path>",
containerUrl = "<containerUrl>",
uploadHeaders = new object[]
{
new
{
name = "<name>",
value = "<value>",
}
},
},
},
uploadOptions = new
{
uploadCondition = "tasksuccess",
},
}
},
environmentSettings = new object[]
{
new
{
name = "<name>",
value = "<value>",
}
},
affinityInfo = new
{
affinityId = "<affinityId>",
},
constraints = new
{
maxWallClockTime = "PT1H23M45S",
retentionTime = "PT1H23M45S",
maxTaskRetryCount = 1234,
},
requiredSlots = 1234,
userIdentity = new
{
username = "<username>",
autoUser = new
{
scope = "task",
elevationLevel = "nonadmin",
},
},
multiInstanceSettings = new
{
numberOfInstances = 1234,
coordinationCommandLine = "<coordinationCommandLine>",
commonResourceFiles = new object[]
{
null
},
},
dependsOn = new
{
taskIds = new object[]
{
"<taskIds>"
},
taskIdRanges = new object[]
{
new
{
start = 1234,
end = 1234,
}
},
},
applicationPackageReferences = new object[]
{
new
{
applicationId = "<applicationId>",
version = "<version>",
}
},
authenticationTokenSettings = new
{
access = new object[]
{
"job"
},
},
}
            },
            });
            Response response = await client.CreateTaskCollectionAsync("<jobId>", content, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("taskId").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("eTag").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("lastModified").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("location").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("error").GetProperty("message").GetProperty("lang").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("error").GetProperty("message").GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("error").GetProperty("values")[0].GetProperty("key").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("error").GetProperty("values")[0].GetProperty("value").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_CreateTaskCollection_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchTaskGroup taskCollection = new BatchTaskGroup(new BatchTaskCreateContent[]
            {
new BatchTaskCreateContent("<id>", "<commandLine>")
{
DisplayName = "<displayName>",
ExitConditions = new ExitConditions
{
ExitCodes = {new ExitCodeMapping(1234, new ExitOptions
{
JobAction = BatchJobAction.None,
DependencyAction = DependencyAction.Satisfy,
})},
ExitCodeRanges = {new ExitCodeRangeMapping(1234, 1234, default)},
PreProcessingError = default,
FileUploadError = default,
Default = default,
},
ContainerSettings = new BatchTaskContainerSettings("<imageName>")
{
ContainerRunOptions = "<containerRunOptions>",
Registry = new ContainerRegistryReference
{
Username = "<username>",
Password = "<password>",
RegistryServer = "<registryServer>",
IdentityReference = new BatchNodeIdentityReference
{
ResourceId = "<resourceId>",
},
},
WorkingDirectory = ContainerWorkingDirectory.TaskWorkingDirectory,
},
ResourceFiles = {new ResourceFile
{
AutoStorageContainerName = "<autoStorageContainerName>",
StorageContainerUrl = "<storageContainerUrl>",
HttpUrl = "<httpUrl>",
BlobPrefix = "<blobPrefix>",
FilePath = "<filePath>",
FileMode = "<fileMode>",
IdentityReference = default,
}},
OutputFiles = {new OutputFile("<filePattern>", new OutputFileDestination
{
Container = new OutputFileBlobContainerDestination("<containerUrl>")
{
Path = "<path>",
IdentityReference = default,
UploadHeaders = {new HttpHeader("<name>")
{
Value = "<value>",
}},
},
}, new OutputFileUploadConfig(OutputFileUploadCondition.TaskSuccess))},
EnvironmentSettings = {new EnvironmentSetting("<name>")
{
Value = "<value>",
}},
AffinityInfo = new AffinityInfo("<affinityId>"),
Constraints = new BatchTaskConstraints
{
MaxWallClockTime = XmlConvert.ToTimeSpan("PT1H23M45S"),
RetentionTime = XmlConvert.ToTimeSpan("PT1H23M45S"),
MaxTaskRetryCount = 1234,
},
RequiredSlots = 1234,
UserIdentity = new UserIdentity
{
Username = "<username>",
AutoUser = new AutoUserSpecification
{
Scope = AutoUserScope.Task,
ElevationLevel = ElevationLevel.NonAdmin,
},
},
MultiInstanceSettings = new MultiInstanceSettings("<coordinationCommandLine>")
{
NumberOfInstances = 1234,
CommonResourceFiles = {default},
},
DependsOn = new BatchTaskDependencies
{
TaskIds = {"<taskIds>"},
TaskIdRanges = {new BatchTaskIdRange(1234, 1234)},
},
ApplicationPackageReferences = {new BatchApplicationPackageReference("<applicationId>")
{
Version = "<version>",
}},
AuthenticationTokenSettings = new AuthenticationTokenSettings
{
Access = {AccessScope.Job},
},
}
            });
            Response<BatchTaskAddCollectionResult> response = client.CreateTaskCollection("<jobId>", taskCollection, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_CreateTaskCollection_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchTaskGroup taskCollection = new BatchTaskGroup(new BatchTaskCreateContent[]
            {
new BatchTaskCreateContent("<id>", "<commandLine>")
{
DisplayName = "<displayName>",
ExitConditions = new ExitConditions
{
ExitCodes = {new ExitCodeMapping(1234, new ExitOptions
{
JobAction = BatchJobAction.None,
DependencyAction = DependencyAction.Satisfy,
})},
ExitCodeRanges = {new ExitCodeRangeMapping(1234, 1234, default)},
PreProcessingError = default,
FileUploadError = default,
Default = default,
},
ContainerSettings = new BatchTaskContainerSettings("<imageName>")
{
ContainerRunOptions = "<containerRunOptions>",
Registry = new ContainerRegistryReference
{
Username = "<username>",
Password = "<password>",
RegistryServer = "<registryServer>",
IdentityReference = new BatchNodeIdentityReference
{
ResourceId = "<resourceId>",
},
},
WorkingDirectory = ContainerWorkingDirectory.TaskWorkingDirectory,
},
ResourceFiles = {new ResourceFile
{
AutoStorageContainerName = "<autoStorageContainerName>",
StorageContainerUrl = "<storageContainerUrl>",
HttpUrl = "<httpUrl>",
BlobPrefix = "<blobPrefix>",
FilePath = "<filePath>",
FileMode = "<fileMode>",
IdentityReference = default,
}},
OutputFiles = {new OutputFile("<filePattern>", new OutputFileDestination
{
Container = new OutputFileBlobContainerDestination("<containerUrl>")
{
Path = "<path>",
IdentityReference = default,
UploadHeaders = {new HttpHeader("<name>")
{
Value = "<value>",
}},
},
}, new OutputFileUploadConfig(OutputFileUploadCondition.TaskSuccess))},
EnvironmentSettings = {new EnvironmentSetting("<name>")
{
Value = "<value>",
}},
AffinityInfo = new AffinityInfo("<affinityId>"),
Constraints = new BatchTaskConstraints
{
MaxWallClockTime = XmlConvert.ToTimeSpan("PT1H23M45S"),
RetentionTime = XmlConvert.ToTimeSpan("PT1H23M45S"),
MaxTaskRetryCount = 1234,
},
RequiredSlots = 1234,
UserIdentity = new UserIdentity
{
Username = "<username>",
AutoUser = new AutoUserSpecification
{
Scope = AutoUserScope.Task,
ElevationLevel = ElevationLevel.NonAdmin,
},
},
MultiInstanceSettings = new MultiInstanceSettings("<coordinationCommandLine>")
{
NumberOfInstances = 1234,
CommonResourceFiles = {default},
},
DependsOn = new BatchTaskDependencies
{
TaskIds = {"<taskIds>"},
TaskIdRanges = {new BatchTaskIdRange(1234, 1234)},
},
ApplicationPackageReferences = {new BatchApplicationPackageReference("<applicationId>")
{
Version = "<version>",
}},
AuthenticationTokenSettings = new AuthenticationTokenSettings
{
Access = {AccessScope.Job},
},
}
            });
            Response<BatchTaskAddCollectionResult> response = await client.CreateTaskCollectionAsync("<jobId>", taskCollection, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_DeleteTask_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = client.DeleteTask("<jobId>", "<taskId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_DeleteTask_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = await client.DeleteTaskAsync("<jobId>", "<taskId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_DeleteTask_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = client.DeleteTask("<jobId>", "<taskId>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), requestConditions: null);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_DeleteTask_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = await client.DeleteTaskAsync("<jobId>", "<taskId>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), requestConditions: null);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetTask_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = client.GetTask("<jobId>", "<taskId>", null, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetTask_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = await client.GetTaskAsync("<jobId>", "<taskId>", null, null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetTask_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response<BatchTask> response = client.GetTask("<jobId>", "<taskId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetTask_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response<BatchTask> response = await client.GetTaskAsync("<jobId>", "<taskId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetTask_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = client.GetTask("<jobId>", "<taskId>", 1234, DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), new string[] { "<select>" }, new string[] { "<expand>" }, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("url").ToString());
            Console.WriteLine(result.GetProperty("eTag").ToString());
            Console.WriteLine(result.GetProperty("lastModified").ToString());
            Console.WriteLine(result.GetProperty("creationTime").ToString());
            Console.WriteLine(result.GetProperty("exitConditions").GetProperty("exitCodes")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("exitConditions").GetProperty("exitCodes")[0].GetProperty("exitOptions").GetProperty("jobAction").ToString());
            Console.WriteLine(result.GetProperty("exitConditions").GetProperty("exitCodes")[0].GetProperty("exitOptions").GetProperty("dependencyAction").ToString());
            Console.WriteLine(result.GetProperty("exitConditions").GetProperty("exitCodeRanges")[0].GetProperty("start").ToString());
            Console.WriteLine(result.GetProperty("exitConditions").GetProperty("exitCodeRanges")[0].GetProperty("end").ToString());
            Console.WriteLine(result.GetProperty("exitConditions").GetProperty("exitCodeRanges")[0].GetProperty("exitOptions").GetProperty("jobAction").ToString());
            Console.WriteLine(result.GetProperty("exitConditions").GetProperty("exitCodeRanges")[0].GetProperty("exitOptions").GetProperty("dependencyAction").ToString());
            Console.WriteLine(result.GetProperty("exitConditions").GetProperty("preProcessingError").GetProperty("jobAction").ToString());
            Console.WriteLine(result.GetProperty("exitConditions").GetProperty("preProcessingError").GetProperty("dependencyAction").ToString());
            Console.WriteLine(result.GetProperty("exitConditions").GetProperty("fileUploadError").GetProperty("jobAction").ToString());
            Console.WriteLine(result.GetProperty("exitConditions").GetProperty("fileUploadError").GetProperty("dependencyAction").ToString());
            Console.WriteLine(result.GetProperty("exitConditions").GetProperty("default").GetProperty("jobAction").ToString());
            Console.WriteLine(result.GetProperty("exitConditions").GetProperty("default").GetProperty("dependencyAction").ToString());
            Console.WriteLine(result.GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("stateTransitionTime").ToString());
            Console.WriteLine(result.GetProperty("previousState").ToString());
            Console.WriteLine(result.GetProperty("previousStateTransitionTime").ToString());
            Console.WriteLine(result.GetProperty("commandLine").ToString());
            Console.WriteLine(result.GetProperty("containerSettings").GetProperty("containerRunOptions").ToString());
            Console.WriteLine(result.GetProperty("containerSettings").GetProperty("imageName").ToString());
            Console.WriteLine(result.GetProperty("containerSettings").GetProperty("registry").GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("containerSettings").GetProperty("registry").GetProperty("password").ToString());
            Console.WriteLine(result.GetProperty("containerSettings").GetProperty("registry").GetProperty("registryServer").ToString());
            Console.WriteLine(result.GetProperty("containerSettings").GetProperty("registry").GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("containerSettings").GetProperty("workingDirectory").ToString());
            Console.WriteLine(result.GetProperty("resourceFiles")[0].GetProperty("autoStorageContainerName").ToString());
            Console.WriteLine(result.GetProperty("resourceFiles")[0].GetProperty("storageContainerUrl").ToString());
            Console.WriteLine(result.GetProperty("resourceFiles")[0].GetProperty("httpUrl").ToString());
            Console.WriteLine(result.GetProperty("resourceFiles")[0].GetProperty("blobPrefix").ToString());
            Console.WriteLine(result.GetProperty("resourceFiles")[0].GetProperty("filePath").ToString());
            Console.WriteLine(result.GetProperty("resourceFiles")[0].GetProperty("fileMode").ToString());
            Console.WriteLine(result.GetProperty("resourceFiles")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("outputFiles")[0].GetProperty("filePattern").ToString());
            Console.WriteLine(result.GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("path").ToString());
            Console.WriteLine(result.GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("containerUrl").ToString());
            Console.WriteLine(result.GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("uploadHeaders")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("uploadHeaders")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("outputFiles")[0].GetProperty("uploadOptions").GetProperty("uploadCondition").ToString());
            Console.WriteLine(result.GetProperty("environmentSettings")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("environmentSettings")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("affinityInfo").GetProperty("affinityId").ToString());
            Console.WriteLine(result.GetProperty("constraints").GetProperty("maxWallClockTime").ToString());
            Console.WriteLine(result.GetProperty("constraints").GetProperty("retentionTime").ToString());
            Console.WriteLine(result.GetProperty("constraints").GetProperty("maxTaskRetryCount").ToString());
            Console.WriteLine(result.GetProperty("requiredSlots").ToString());
            Console.WriteLine(result.GetProperty("userIdentity").GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("userIdentity").GetProperty("autoUser").GetProperty("scope").ToString());
            Console.WriteLine(result.GetProperty("userIdentity").GetProperty("autoUser").GetProperty("elevationLevel").ToString());
            Console.WriteLine(result.GetProperty("executionInfo").GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("executionInfo").GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("executionInfo").GetProperty("exitCode").ToString());
            Console.WriteLine(result.GetProperty("executionInfo").GetProperty("containerInfo").GetProperty("containerId").ToString());
            Console.WriteLine(result.GetProperty("executionInfo").GetProperty("containerInfo").GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("executionInfo").GetProperty("containerInfo").GetProperty("error").ToString());
            Console.WriteLine(result.GetProperty("executionInfo").GetProperty("failureInfo").GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("executionInfo").GetProperty("failureInfo").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("executionInfo").GetProperty("failureInfo").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("executionInfo").GetProperty("failureInfo").GetProperty("details")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("executionInfo").GetProperty("failureInfo").GetProperty("details")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("executionInfo").GetProperty("retryCount").ToString());
            Console.WriteLine(result.GetProperty("executionInfo").GetProperty("lastRetryTime").ToString());
            Console.WriteLine(result.GetProperty("executionInfo").GetProperty("requeueCount").ToString());
            Console.WriteLine(result.GetProperty("executionInfo").GetProperty("lastRequeueTime").ToString());
            Console.WriteLine(result.GetProperty("executionInfo").GetProperty("result").ToString());
            Console.WriteLine(result.GetProperty("nodeInfo").GetProperty("affinityId").ToString());
            Console.WriteLine(result.GetProperty("nodeInfo").GetProperty("nodeUrl").ToString());
            Console.WriteLine(result.GetProperty("nodeInfo").GetProperty("poolId").ToString());
            Console.WriteLine(result.GetProperty("nodeInfo").GetProperty("nodeId").ToString());
            Console.WriteLine(result.GetProperty("nodeInfo").GetProperty("taskRootDirectory").ToString());
            Console.WriteLine(result.GetProperty("nodeInfo").GetProperty("taskRootDirectoryUrl").ToString());
            Console.WriteLine(result.GetProperty("multiInstanceSettings").GetProperty("numberOfInstances").ToString());
            Console.WriteLine(result.GetProperty("multiInstanceSettings").GetProperty("coordinationCommandLine").ToString());
            Console.WriteLine(result.GetProperty("multiInstanceSettings").GetProperty("commonResourceFiles")[0].GetProperty("autoStorageContainerName").ToString());
            Console.WriteLine(result.GetProperty("multiInstanceSettings").GetProperty("commonResourceFiles")[0].GetProperty("storageContainerUrl").ToString());
            Console.WriteLine(result.GetProperty("multiInstanceSettings").GetProperty("commonResourceFiles")[0].GetProperty("httpUrl").ToString());
            Console.WriteLine(result.GetProperty("multiInstanceSettings").GetProperty("commonResourceFiles")[0].GetProperty("blobPrefix").ToString());
            Console.WriteLine(result.GetProperty("multiInstanceSettings").GetProperty("commonResourceFiles")[0].GetProperty("filePath").ToString());
            Console.WriteLine(result.GetProperty("multiInstanceSettings").GetProperty("commonResourceFiles")[0].GetProperty("fileMode").ToString());
            Console.WriteLine(result.GetProperty("multiInstanceSettings").GetProperty("commonResourceFiles")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("url").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("lastUpdateTime").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("userCPUTime").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("kernelCPUTime").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("wallClockTime").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("readIOps").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("writeIOps").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("readIOGiB").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("writeIOGiB").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("waitTime").ToString());
            Console.WriteLine(result.GetProperty("dependsOn").GetProperty("taskIds")[0].ToString());
            Console.WriteLine(result.GetProperty("dependsOn").GetProperty("taskIdRanges")[0].GetProperty("start").ToString());
            Console.WriteLine(result.GetProperty("dependsOn").GetProperty("taskIdRanges")[0].GetProperty("end").ToString());
            Console.WriteLine(result.GetProperty("applicationPackageReferences")[0].GetProperty("applicationId").ToString());
            Console.WriteLine(result.GetProperty("applicationPackageReferences")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("authenticationTokenSettings").GetProperty("access")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetTask_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = await client.GetTaskAsync("<jobId>", "<taskId>", 1234, DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), new string[] { "<select>" }, new string[] { "<expand>" }, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("url").ToString());
            Console.WriteLine(result.GetProperty("eTag").ToString());
            Console.WriteLine(result.GetProperty("lastModified").ToString());
            Console.WriteLine(result.GetProperty("creationTime").ToString());
            Console.WriteLine(result.GetProperty("exitConditions").GetProperty("exitCodes")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("exitConditions").GetProperty("exitCodes")[0].GetProperty("exitOptions").GetProperty("jobAction").ToString());
            Console.WriteLine(result.GetProperty("exitConditions").GetProperty("exitCodes")[0].GetProperty("exitOptions").GetProperty("dependencyAction").ToString());
            Console.WriteLine(result.GetProperty("exitConditions").GetProperty("exitCodeRanges")[0].GetProperty("start").ToString());
            Console.WriteLine(result.GetProperty("exitConditions").GetProperty("exitCodeRanges")[0].GetProperty("end").ToString());
            Console.WriteLine(result.GetProperty("exitConditions").GetProperty("exitCodeRanges")[0].GetProperty("exitOptions").GetProperty("jobAction").ToString());
            Console.WriteLine(result.GetProperty("exitConditions").GetProperty("exitCodeRanges")[0].GetProperty("exitOptions").GetProperty("dependencyAction").ToString());
            Console.WriteLine(result.GetProperty("exitConditions").GetProperty("preProcessingError").GetProperty("jobAction").ToString());
            Console.WriteLine(result.GetProperty("exitConditions").GetProperty("preProcessingError").GetProperty("dependencyAction").ToString());
            Console.WriteLine(result.GetProperty("exitConditions").GetProperty("fileUploadError").GetProperty("jobAction").ToString());
            Console.WriteLine(result.GetProperty("exitConditions").GetProperty("fileUploadError").GetProperty("dependencyAction").ToString());
            Console.WriteLine(result.GetProperty("exitConditions").GetProperty("default").GetProperty("jobAction").ToString());
            Console.WriteLine(result.GetProperty("exitConditions").GetProperty("default").GetProperty("dependencyAction").ToString());
            Console.WriteLine(result.GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("stateTransitionTime").ToString());
            Console.WriteLine(result.GetProperty("previousState").ToString());
            Console.WriteLine(result.GetProperty("previousStateTransitionTime").ToString());
            Console.WriteLine(result.GetProperty("commandLine").ToString());
            Console.WriteLine(result.GetProperty("containerSettings").GetProperty("containerRunOptions").ToString());
            Console.WriteLine(result.GetProperty("containerSettings").GetProperty("imageName").ToString());
            Console.WriteLine(result.GetProperty("containerSettings").GetProperty("registry").GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("containerSettings").GetProperty("registry").GetProperty("password").ToString());
            Console.WriteLine(result.GetProperty("containerSettings").GetProperty("registry").GetProperty("registryServer").ToString());
            Console.WriteLine(result.GetProperty("containerSettings").GetProperty("registry").GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("containerSettings").GetProperty("workingDirectory").ToString());
            Console.WriteLine(result.GetProperty("resourceFiles")[0].GetProperty("autoStorageContainerName").ToString());
            Console.WriteLine(result.GetProperty("resourceFiles")[0].GetProperty("storageContainerUrl").ToString());
            Console.WriteLine(result.GetProperty("resourceFiles")[0].GetProperty("httpUrl").ToString());
            Console.WriteLine(result.GetProperty("resourceFiles")[0].GetProperty("blobPrefix").ToString());
            Console.WriteLine(result.GetProperty("resourceFiles")[0].GetProperty("filePath").ToString());
            Console.WriteLine(result.GetProperty("resourceFiles")[0].GetProperty("fileMode").ToString());
            Console.WriteLine(result.GetProperty("resourceFiles")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("outputFiles")[0].GetProperty("filePattern").ToString());
            Console.WriteLine(result.GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("path").ToString());
            Console.WriteLine(result.GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("containerUrl").ToString());
            Console.WriteLine(result.GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("uploadHeaders")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("uploadHeaders")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("outputFiles")[0].GetProperty("uploadOptions").GetProperty("uploadCondition").ToString());
            Console.WriteLine(result.GetProperty("environmentSettings")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("environmentSettings")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("affinityInfo").GetProperty("affinityId").ToString());
            Console.WriteLine(result.GetProperty("constraints").GetProperty("maxWallClockTime").ToString());
            Console.WriteLine(result.GetProperty("constraints").GetProperty("retentionTime").ToString());
            Console.WriteLine(result.GetProperty("constraints").GetProperty("maxTaskRetryCount").ToString());
            Console.WriteLine(result.GetProperty("requiredSlots").ToString());
            Console.WriteLine(result.GetProperty("userIdentity").GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("userIdentity").GetProperty("autoUser").GetProperty("scope").ToString());
            Console.WriteLine(result.GetProperty("userIdentity").GetProperty("autoUser").GetProperty("elevationLevel").ToString());
            Console.WriteLine(result.GetProperty("executionInfo").GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("executionInfo").GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("executionInfo").GetProperty("exitCode").ToString());
            Console.WriteLine(result.GetProperty("executionInfo").GetProperty("containerInfo").GetProperty("containerId").ToString());
            Console.WriteLine(result.GetProperty("executionInfo").GetProperty("containerInfo").GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("executionInfo").GetProperty("containerInfo").GetProperty("error").ToString());
            Console.WriteLine(result.GetProperty("executionInfo").GetProperty("failureInfo").GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("executionInfo").GetProperty("failureInfo").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("executionInfo").GetProperty("failureInfo").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("executionInfo").GetProperty("failureInfo").GetProperty("details")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("executionInfo").GetProperty("failureInfo").GetProperty("details")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("executionInfo").GetProperty("retryCount").ToString());
            Console.WriteLine(result.GetProperty("executionInfo").GetProperty("lastRetryTime").ToString());
            Console.WriteLine(result.GetProperty("executionInfo").GetProperty("requeueCount").ToString());
            Console.WriteLine(result.GetProperty("executionInfo").GetProperty("lastRequeueTime").ToString());
            Console.WriteLine(result.GetProperty("executionInfo").GetProperty("result").ToString());
            Console.WriteLine(result.GetProperty("nodeInfo").GetProperty("affinityId").ToString());
            Console.WriteLine(result.GetProperty("nodeInfo").GetProperty("nodeUrl").ToString());
            Console.WriteLine(result.GetProperty("nodeInfo").GetProperty("poolId").ToString());
            Console.WriteLine(result.GetProperty("nodeInfo").GetProperty("nodeId").ToString());
            Console.WriteLine(result.GetProperty("nodeInfo").GetProperty("taskRootDirectory").ToString());
            Console.WriteLine(result.GetProperty("nodeInfo").GetProperty("taskRootDirectoryUrl").ToString());
            Console.WriteLine(result.GetProperty("multiInstanceSettings").GetProperty("numberOfInstances").ToString());
            Console.WriteLine(result.GetProperty("multiInstanceSettings").GetProperty("coordinationCommandLine").ToString());
            Console.WriteLine(result.GetProperty("multiInstanceSettings").GetProperty("commonResourceFiles")[0].GetProperty("autoStorageContainerName").ToString());
            Console.WriteLine(result.GetProperty("multiInstanceSettings").GetProperty("commonResourceFiles")[0].GetProperty("storageContainerUrl").ToString());
            Console.WriteLine(result.GetProperty("multiInstanceSettings").GetProperty("commonResourceFiles")[0].GetProperty("httpUrl").ToString());
            Console.WriteLine(result.GetProperty("multiInstanceSettings").GetProperty("commonResourceFiles")[0].GetProperty("blobPrefix").ToString());
            Console.WriteLine(result.GetProperty("multiInstanceSettings").GetProperty("commonResourceFiles")[0].GetProperty("filePath").ToString());
            Console.WriteLine(result.GetProperty("multiInstanceSettings").GetProperty("commonResourceFiles")[0].GetProperty("fileMode").ToString());
            Console.WriteLine(result.GetProperty("multiInstanceSettings").GetProperty("commonResourceFiles")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("url").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("lastUpdateTime").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("userCPUTime").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("kernelCPUTime").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("wallClockTime").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("readIOps").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("writeIOps").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("readIOGiB").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("writeIOGiB").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("waitTime").ToString());
            Console.WriteLine(result.GetProperty("dependsOn").GetProperty("taskIds")[0].ToString());
            Console.WriteLine(result.GetProperty("dependsOn").GetProperty("taskIdRanges")[0].GetProperty("start").ToString());
            Console.WriteLine(result.GetProperty("dependsOn").GetProperty("taskIdRanges")[0].GetProperty("end").ToString());
            Console.WriteLine(result.GetProperty("applicationPackageReferences")[0].GetProperty("applicationId").ToString());
            Console.WriteLine(result.GetProperty("applicationPackageReferences")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("authenticationTokenSettings").GetProperty("access")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetTask_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response<BatchTask> response = client.GetTask("<jobId>", "<taskId>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), select: new string[] { "<select>" }, expand: new string[] { "<expand>" }, requestConditions: null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetTask_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response<BatchTask> response = await client.GetTaskAsync("<jobId>", "<taskId>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), select: new string[] { "<select>" }, expand: new string[] { "<expand>" }, requestConditions: null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_ReplaceTask_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.ReplaceTask("<jobId>", "<taskId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_ReplaceTask_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.ReplaceTaskAsync("<jobId>", "<taskId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_ReplaceTask_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchTask task = new BatchTask();
            Response response = client.ReplaceTask("<jobId>", "<taskId>", task);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_ReplaceTask_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchTask task = new BatchTask();
            Response response = await client.ReplaceTaskAsync("<jobId>", "<taskId>", task);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_ReplaceTask_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                constraints = new
                {
                    maxWallClockTime = "PT1H23M45S",
                    retentionTime = "PT1H23M45S",
                    maxTaskRetryCount = 1234,
                },
            });
            Response response = client.ReplaceTask("<jobId>", "<taskId>", content, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), requestConditions: null);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_ReplaceTask_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                constraints = new
                {
                    maxWallClockTime = "PT1H23M45S",
                    retentionTime = "PT1H23M45S",
                    maxTaskRetryCount = 1234,
                },
            });
            Response response = await client.ReplaceTaskAsync("<jobId>", "<taskId>", content, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), requestConditions: null);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_ReplaceTask_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchTask task = new BatchTask
            {
                Constraints = new BatchTaskConstraints
                {
                    MaxWallClockTime = XmlConvert.ToTimeSpan("PT1H23M45S"),
                    RetentionTime = XmlConvert.ToTimeSpan("PT1H23M45S"),
                    MaxTaskRetryCount = 1234,
                },
            };
            Response response = client.ReplaceTask("<jobId>", "<taskId>", task, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), requestConditions: null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_ReplaceTask_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchTask task = new BatchTask
            {
                Constraints = new BatchTaskConstraints
                {
                    MaxWallClockTime = XmlConvert.ToTimeSpan("PT1H23M45S"),
                    RetentionTime = XmlConvert.ToTimeSpan("PT1H23M45S"),
                    MaxTaskRetryCount = 1234,
                },
            };
            Response response = await client.ReplaceTaskAsync("<jobId>", "<taskId>", task, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), requestConditions: null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_TerminateTask_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = client.TerminateTask("<jobId>", "<taskId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_TerminateTask_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = await client.TerminateTaskAsync("<jobId>", "<taskId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_TerminateTask_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = client.TerminateTask("<jobId>", "<taskId>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), requestConditions: null);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_TerminateTask_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = await client.TerminateTaskAsync("<jobId>", "<taskId>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), requestConditions: null);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_ReactivateTask_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = client.ReactivateTask("<jobId>", "<taskId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_ReactivateTask_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = await client.ReactivateTaskAsync("<jobId>", "<taskId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_ReactivateTask_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = client.ReactivateTask("<jobId>", "<taskId>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), requestConditions: null);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_ReactivateTask_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = await client.ReactivateTaskAsync("<jobId>", "<taskId>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), requestConditions: null);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_DeleteTaskFile_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = client.DeleteTaskFile("<jobId>", "<taskId>", "<filePath>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_DeleteTaskFile_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = await client.DeleteTaskFileAsync("<jobId>", "<taskId>", "<filePath>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_DeleteTaskFile_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = client.DeleteTaskFile("<jobId>", "<taskId>", "<filePath>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), recursive: true);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_DeleteTaskFile_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = await client.DeleteTaskFileAsync("<jobId>", "<taskId>", "<filePath>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), recursive: true);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetTaskFile_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = client.GetTaskFile("<jobId>", "<taskId>", "<filePath>", null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetTaskFile_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = await client.GetTaskFileAsync("<jobId>", "<taskId>", "<filePath>", null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetTaskFile_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response<BinaryData> response = client.GetTaskFile("<jobId>", "<taskId>", "<filePath>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetTaskFile_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response<BinaryData> response = await client.GetTaskFileAsync("<jobId>", "<taskId>", "<filePath>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetTaskFile_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = client.GetTaskFile("<jobId>", "<taskId>", "<filePath>", 1234, DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), "<ocp-range>", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetTaskFile_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = await client.GetTaskFileAsync("<jobId>", "<taskId>", "<filePath>", 1234, DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), "<ocp-range>", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetTaskFile_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response<BinaryData> response = client.GetTaskFile("<jobId>", "<taskId>", "<filePath>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), ocpRange: "<ocp-range>", requestConditions: null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetTaskFile_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response<BinaryData> response = await client.GetTaskFileAsync("<jobId>", "<taskId>", "<filePath>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), ocpRange: "<ocp-range>", requestConditions: null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_CreateNodeUser_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = client.CreateNodeUser("<poolId>", "<nodeId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_CreateNodeUser_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
            });
            Response response = await client.CreateNodeUserAsync("<poolId>", "<nodeId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_CreateNodeUser_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchNodeUserCreateContent user = new BatchNodeUserCreateContent("<name>");
            Response response = client.CreateNodeUser("<poolId>", "<nodeId>", user);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_CreateNodeUser_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchNodeUserCreateContent user = new BatchNodeUserCreateContent("<name>");
            Response response = await client.CreateNodeUserAsync("<poolId>", "<nodeId>", user);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_CreateNodeUser_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                isAdmin = true,
                expiryTime = "2022-05-10T18:57:31.2311892Z",
                password = "<password>",
                sshPublicKey = "<sshPublicKey>",
            });
            Response response = client.CreateNodeUser("<poolId>", "<nodeId>", content, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_CreateNodeUser_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                name = "<name>",
                isAdmin = true,
                expiryTime = "2022-05-10T18:57:31.2311892Z",
                password = "<password>",
                sshPublicKey = "<sshPublicKey>",
            });
            Response response = await client.CreateNodeUserAsync("<poolId>", "<nodeId>", content, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_CreateNodeUser_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchNodeUserCreateContent user = new BatchNodeUserCreateContent("<name>")
            {
                IsAdmin = true,
                ExpiryTime = DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"),
                Password = "<password>",
                SshPublicKey = "<sshPublicKey>",
            };
            Response response = client.CreateNodeUser("<poolId>", "<nodeId>", user, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_CreateNodeUser_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchNodeUserCreateContent user = new BatchNodeUserCreateContent("<name>")
            {
                IsAdmin = true,
                ExpiryTime = DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"),
                Password = "<password>",
                SshPublicKey = "<sshPublicKey>",
            };
            Response response = await client.CreateNodeUserAsync("<poolId>", "<nodeId>", user, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_DeleteNodeUser_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = client.DeleteNodeUser("<poolId>", "<nodeId>", "<userName>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_DeleteNodeUser_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = await client.DeleteNodeUserAsync("<poolId>", "<nodeId>", "<userName>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_DeleteNodeUser_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = client.DeleteNodeUser("<poolId>", "<nodeId>", "<userName>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_DeleteNodeUser_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = await client.DeleteNodeUserAsync("<poolId>", "<nodeId>", "<userName>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_ReplaceNodeUser_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.ReplaceNodeUser("<poolId>", "<nodeId>", "<userName>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_ReplaceNodeUser_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.ReplaceNodeUserAsync("<poolId>", "<nodeId>", "<userName>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_ReplaceNodeUser_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchNodeUserUpdateContent content = new BatchNodeUserUpdateContent();
            Response response = client.ReplaceNodeUser("<poolId>", "<nodeId>", "<userName>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_ReplaceNodeUser_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchNodeUserUpdateContent content = new BatchNodeUserUpdateContent();
            Response response = await client.ReplaceNodeUserAsync("<poolId>", "<nodeId>", "<userName>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_ReplaceNodeUser_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                password = "<password>",
                expiryTime = "2022-05-10T18:57:31.2311892Z",
                sshPublicKey = "<sshPublicKey>",
            });
            Response response = client.ReplaceNodeUser("<poolId>", "<nodeId>", "<userName>", content, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_ReplaceNodeUser_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                password = "<password>",
                expiryTime = "2022-05-10T18:57:31.2311892Z",
                sshPublicKey = "<sshPublicKey>",
            });
            Response response = await client.ReplaceNodeUserAsync("<poolId>", "<nodeId>", "<userName>", content, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_ReplaceNodeUser_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchNodeUserUpdateContent content = new BatchNodeUserUpdateContent
            {
                Password = "<password>",
                ExpiryTime = DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"),
                SshPublicKey = "<sshPublicKey>",
            };
            Response response = client.ReplaceNodeUser("<poolId>", "<nodeId>", "<userName>", content, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_ReplaceNodeUser_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchNodeUserUpdateContent content = new BatchNodeUserUpdateContent
            {
                Password = "<password>",
                ExpiryTime = DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"),
                SshPublicKey = "<sshPublicKey>",
            };
            Response response = await client.ReplaceNodeUserAsync("<poolId>", "<nodeId>", "<userName>", content, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetNode_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = client.GetNode("<poolId>", "<nodeId>", null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetNode_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = await client.GetNodeAsync("<poolId>", "<nodeId>", null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetNode_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response<BatchNode> response = client.GetNode("<poolId>", "<nodeId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetNode_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response<BatchNode> response = await client.GetNodeAsync("<poolId>", "<nodeId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetNode_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = client.GetNode("<poolId>", "<nodeId>", 1234, DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), new string[] { "<select>" }, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("url").ToString());
            Console.WriteLine(result.GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("schedulingState").ToString());
            Console.WriteLine(result.GetProperty("stateTransitionTime").ToString());
            Console.WriteLine(result.GetProperty("lastBootTime").ToString());
            Console.WriteLine(result.GetProperty("allocationTime").ToString());
            Console.WriteLine(result.GetProperty("ipAddress").ToString());
            Console.WriteLine(result.GetProperty("affinityId").ToString());
            Console.WriteLine(result.GetProperty("vmSize").ToString());
            Console.WriteLine(result.GetProperty("totalTasksRun").ToString());
            Console.WriteLine(result.GetProperty("runningTasksCount").ToString());
            Console.WriteLine(result.GetProperty("runningTaskSlotsCount").ToString());
            Console.WriteLine(result.GetProperty("totalTasksSucceeded").ToString());
            Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("taskUrl").ToString());
            Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("taskId").ToString());
            Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("subtaskId").ToString());
            Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("taskState").ToString());
            Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("executionInfo").GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("executionInfo").GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("executionInfo").GetProperty("exitCode").ToString());
            Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("executionInfo").GetProperty("containerInfo").GetProperty("containerId").ToString());
            Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("executionInfo").GetProperty("containerInfo").GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("executionInfo").GetProperty("containerInfo").GetProperty("error").ToString());
            Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("executionInfo").GetProperty("failureInfo").GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("executionInfo").GetProperty("failureInfo").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("executionInfo").GetProperty("failureInfo").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("executionInfo").GetProperty("failureInfo").GetProperty("details")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("executionInfo").GetProperty("failureInfo").GetProperty("details")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("executionInfo").GetProperty("retryCount").ToString());
            Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("executionInfo").GetProperty("lastRetryTime").ToString());
            Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("executionInfo").GetProperty("requeueCount").ToString());
            Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("executionInfo").GetProperty("lastRequeueTime").ToString());
            Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("executionInfo").GetProperty("result").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("commandLine").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("containerRunOptions").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("imageName").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("password").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("registryServer").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("workingDirectory").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("autoStorageContainerName").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("storageContainerUrl").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("httpUrl").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("blobPrefix").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("filePath").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("fileMode").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("environmentSettings")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("environmentSettings")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("userIdentity").GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("scope").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("elevationLevel").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("maxTaskRetryCount").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("waitForSuccess").ToString());
            Console.WriteLine(result.GetProperty("startTaskInfo").GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("startTaskInfo").GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("startTaskInfo").GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("startTaskInfo").GetProperty("exitCode").ToString());
            Console.WriteLine(result.GetProperty("startTaskInfo").GetProperty("containerInfo").GetProperty("containerId").ToString());
            Console.WriteLine(result.GetProperty("startTaskInfo").GetProperty("containerInfo").GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("startTaskInfo").GetProperty("containerInfo").GetProperty("error").ToString());
            Console.WriteLine(result.GetProperty("startTaskInfo").GetProperty("failureInfo").GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("startTaskInfo").GetProperty("failureInfo").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("startTaskInfo").GetProperty("failureInfo").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("startTaskInfo").GetProperty("failureInfo").GetProperty("details")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("startTaskInfo").GetProperty("failureInfo").GetProperty("details")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("startTaskInfo").GetProperty("retryCount").ToString());
            Console.WriteLine(result.GetProperty("startTaskInfo").GetProperty("lastRetryTime").ToString());
            Console.WriteLine(result.GetProperty("startTaskInfo").GetProperty("result").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("errorDetails")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("errorDetails")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("isDedicated").ToString());
            Console.WriteLine(result.GetProperty("endpointConfiguration").GetProperty("inboundEndpoints")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("endpointConfiguration").GetProperty("inboundEndpoints")[0].GetProperty("protocol").ToString());
            Console.WriteLine(result.GetProperty("endpointConfiguration").GetProperty("inboundEndpoints")[0].GetProperty("publicIPAddress").ToString());
            Console.WriteLine(result.GetProperty("endpointConfiguration").GetProperty("inboundEndpoints")[0].GetProperty("publicFQDN").ToString());
            Console.WriteLine(result.GetProperty("endpointConfiguration").GetProperty("inboundEndpoints")[0].GetProperty("frontendPort").ToString());
            Console.WriteLine(result.GetProperty("endpointConfiguration").GetProperty("inboundEndpoints")[0].GetProperty("backendPort").ToString());
            Console.WriteLine(result.GetProperty("nodeAgentInfo").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("nodeAgentInfo").GetProperty("lastUpdateTime").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineInfo").GetProperty("imageReference").GetProperty("publisher").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineInfo").GetProperty("imageReference").GetProperty("offer").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineInfo").GetProperty("imageReference").GetProperty("sku").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineInfo").GetProperty("imageReference").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineInfo").GetProperty("imageReference").GetProperty("virtualMachineImageId").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineInfo").GetProperty("imageReference").GetProperty("exactVersion").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineInfo").GetProperty("scaleSetVmResourceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetNode_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = await client.GetNodeAsync("<poolId>", "<nodeId>", 1234, DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), new string[] { "<select>" }, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("url").ToString());
            Console.WriteLine(result.GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("schedulingState").ToString());
            Console.WriteLine(result.GetProperty("stateTransitionTime").ToString());
            Console.WriteLine(result.GetProperty("lastBootTime").ToString());
            Console.WriteLine(result.GetProperty("allocationTime").ToString());
            Console.WriteLine(result.GetProperty("ipAddress").ToString());
            Console.WriteLine(result.GetProperty("affinityId").ToString());
            Console.WriteLine(result.GetProperty("vmSize").ToString());
            Console.WriteLine(result.GetProperty("totalTasksRun").ToString());
            Console.WriteLine(result.GetProperty("runningTasksCount").ToString());
            Console.WriteLine(result.GetProperty("runningTaskSlotsCount").ToString());
            Console.WriteLine(result.GetProperty("totalTasksSucceeded").ToString());
            Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("taskUrl").ToString());
            Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("jobId").ToString());
            Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("taskId").ToString());
            Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("subtaskId").ToString());
            Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("taskState").ToString());
            Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("executionInfo").GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("executionInfo").GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("executionInfo").GetProperty("exitCode").ToString());
            Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("executionInfo").GetProperty("containerInfo").GetProperty("containerId").ToString());
            Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("executionInfo").GetProperty("containerInfo").GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("executionInfo").GetProperty("containerInfo").GetProperty("error").ToString());
            Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("executionInfo").GetProperty("failureInfo").GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("executionInfo").GetProperty("failureInfo").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("executionInfo").GetProperty("failureInfo").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("executionInfo").GetProperty("failureInfo").GetProperty("details")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("executionInfo").GetProperty("failureInfo").GetProperty("details")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("executionInfo").GetProperty("retryCount").ToString());
            Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("executionInfo").GetProperty("lastRetryTime").ToString());
            Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("executionInfo").GetProperty("requeueCount").ToString());
            Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("executionInfo").GetProperty("lastRequeueTime").ToString());
            Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("executionInfo").GetProperty("result").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("commandLine").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("containerRunOptions").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("imageName").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("password").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("registryServer").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("workingDirectory").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("autoStorageContainerName").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("storageContainerUrl").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("httpUrl").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("blobPrefix").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("filePath").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("fileMode").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("environmentSettings")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("environmentSettings")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("userIdentity").GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("scope").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("elevationLevel").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("maxTaskRetryCount").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("waitForSuccess").ToString());
            Console.WriteLine(result.GetProperty("startTaskInfo").GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("startTaskInfo").GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("startTaskInfo").GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("startTaskInfo").GetProperty("exitCode").ToString());
            Console.WriteLine(result.GetProperty("startTaskInfo").GetProperty("containerInfo").GetProperty("containerId").ToString());
            Console.WriteLine(result.GetProperty("startTaskInfo").GetProperty("containerInfo").GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("startTaskInfo").GetProperty("containerInfo").GetProperty("error").ToString());
            Console.WriteLine(result.GetProperty("startTaskInfo").GetProperty("failureInfo").GetProperty("category").ToString());
            Console.WriteLine(result.GetProperty("startTaskInfo").GetProperty("failureInfo").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("startTaskInfo").GetProperty("failureInfo").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("startTaskInfo").GetProperty("failureInfo").GetProperty("details")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("startTaskInfo").GetProperty("failureInfo").GetProperty("details")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("startTaskInfo").GetProperty("retryCount").ToString());
            Console.WriteLine(result.GetProperty("startTaskInfo").GetProperty("lastRetryTime").ToString());
            Console.WriteLine(result.GetProperty("startTaskInfo").GetProperty("result").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("errorDetails")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("errors")[0].GetProperty("errorDetails")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("isDedicated").ToString());
            Console.WriteLine(result.GetProperty("endpointConfiguration").GetProperty("inboundEndpoints")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("endpointConfiguration").GetProperty("inboundEndpoints")[0].GetProperty("protocol").ToString());
            Console.WriteLine(result.GetProperty("endpointConfiguration").GetProperty("inboundEndpoints")[0].GetProperty("publicIPAddress").ToString());
            Console.WriteLine(result.GetProperty("endpointConfiguration").GetProperty("inboundEndpoints")[0].GetProperty("publicFQDN").ToString());
            Console.WriteLine(result.GetProperty("endpointConfiguration").GetProperty("inboundEndpoints")[0].GetProperty("frontendPort").ToString());
            Console.WriteLine(result.GetProperty("endpointConfiguration").GetProperty("inboundEndpoints")[0].GetProperty("backendPort").ToString());
            Console.WriteLine(result.GetProperty("nodeAgentInfo").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("nodeAgentInfo").GetProperty("lastUpdateTime").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineInfo").GetProperty("imageReference").GetProperty("publisher").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineInfo").GetProperty("imageReference").GetProperty("offer").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineInfo").GetProperty("imageReference").GetProperty("sku").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineInfo").GetProperty("imageReference").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineInfo").GetProperty("imageReference").GetProperty("virtualMachineImageId").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineInfo").GetProperty("imageReference").GetProperty("exactVersion").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineInfo").GetProperty("scaleSetVmResourceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetNode_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response<BatchNode> response = client.GetNode("<poolId>", "<nodeId>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), select: new string[] { "<select>" });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetNode_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response<BatchNode> response = await client.GetNodeAsync("<poolId>", "<nodeId>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), select: new string[] { "<select>" });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_RebootNode_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = null;
            Response response = client.RebootNode("<poolId>", "<nodeId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_RebootNode_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = null;
            Response response = await client.RebootNodeAsync("<poolId>", "<nodeId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_RebootNode_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = client.RebootNode("<poolId>", "<nodeId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_RebootNode_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = await client.RebootNodeAsync("<poolId>", "<nodeId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_RebootNode_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                nodeRebootOption = "requeue",
            });
            Response response = client.RebootNode("<poolId>", "<nodeId>", content, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_RebootNode_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                nodeRebootOption = "requeue",
            });
            Response response = await client.RebootNodeAsync("<poolId>", "<nodeId>", content, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_RebootNode_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchNodeRebootContent parameters = new BatchNodeRebootContent
            {
                NodeRebootOption = BatchNodeRebootOption.Requeue,
            };
            Response response = client.RebootNode("<poolId>", "<nodeId>", parameters: parameters, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_RebootNode_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchNodeRebootContent parameters = new BatchNodeRebootContent
            {
                NodeRebootOption = BatchNodeRebootOption.Requeue,
            };
            Response response = await client.RebootNodeAsync("<poolId>", "<nodeId>", parameters: parameters, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_DisableNodeScheduling_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = null;
            Response response = client.DisableNodeScheduling("<poolId>", "<nodeId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_DisableNodeScheduling_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = null;
            Response response = await client.DisableNodeSchedulingAsync("<poolId>", "<nodeId>", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_DisableNodeScheduling_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = client.DisableNodeScheduling("<poolId>", "<nodeId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_DisableNodeScheduling_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = await client.DisableNodeSchedulingAsync("<poolId>", "<nodeId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_DisableNodeScheduling_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                nodeDisableSchedulingOption = "requeue",
            });
            Response response = client.DisableNodeScheduling("<poolId>", "<nodeId>", content, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_DisableNodeScheduling_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                nodeDisableSchedulingOption = "requeue",
            });
            Response response = await client.DisableNodeSchedulingAsync("<poolId>", "<nodeId>", content, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_DisableNodeScheduling_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchNodeDisableSchedulingContent parameters = new BatchNodeDisableSchedulingContent
            {
                NodeDisableSchedulingOption = BatchNodeDisableSchedulingOption.Requeue,
            };
            Response response = client.DisableNodeScheduling("<poolId>", "<nodeId>", parameters: parameters, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_DisableNodeScheduling_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            BatchNodeDisableSchedulingContent parameters = new BatchNodeDisableSchedulingContent
            {
                NodeDisableSchedulingOption = BatchNodeDisableSchedulingOption.Requeue,
            };
            Response response = await client.DisableNodeSchedulingAsync("<poolId>", "<nodeId>", parameters: parameters, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_EnableNodeScheduling_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = client.EnableNodeScheduling("<poolId>", "<nodeId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_EnableNodeScheduling_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = await client.EnableNodeSchedulingAsync("<poolId>", "<nodeId>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_EnableNodeScheduling_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = client.EnableNodeScheduling("<poolId>", "<nodeId>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_EnableNodeScheduling_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = await client.EnableNodeSchedulingAsync("<poolId>", "<nodeId>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetNodeRemoteLoginSettings_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = client.GetNodeRemoteLoginSettings("<poolId>", "<nodeId>", null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("remoteLoginIPAddress").ToString());
            Console.WriteLine(result.GetProperty("remoteLoginPort").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetNodeRemoteLoginSettings_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = await client.GetNodeRemoteLoginSettingsAsync("<poolId>", "<nodeId>", null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("remoteLoginIPAddress").ToString());
            Console.WriteLine(result.GetProperty("remoteLoginPort").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetNodeRemoteLoginSettings_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response<BatchNodeRemoteLoginSettings> response = client.GetNodeRemoteLoginSettings("<poolId>", "<nodeId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetNodeRemoteLoginSettings_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response<BatchNodeRemoteLoginSettings> response = await client.GetNodeRemoteLoginSettingsAsync("<poolId>", "<nodeId>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetNodeRemoteLoginSettings_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = client.GetNodeRemoteLoginSettings("<poolId>", "<nodeId>", 1234, DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("remoteLoginIPAddress").ToString());
            Console.WriteLine(result.GetProperty("remoteLoginPort").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetNodeRemoteLoginSettings_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = await client.GetNodeRemoteLoginSettingsAsync("<poolId>", "<nodeId>", 1234, DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("remoteLoginIPAddress").ToString());
            Console.WriteLine(result.GetProperty("remoteLoginPort").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetNodeRemoteLoginSettings_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response<BatchNodeRemoteLoginSettings> response = client.GetNodeRemoteLoginSettings("<poolId>", "<nodeId>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetNodeRemoteLoginSettings_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response<BatchNodeRemoteLoginSettings> response = await client.GetNodeRemoteLoginSettingsAsync("<poolId>", "<nodeId>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_UploadNodeLogs_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                containerUrl = "<containerUrl>",
                startTime = "2022-05-10T18:57:31.2311892Z",
            });
            Response response = client.UploadNodeLogs("<poolId>", "<nodeId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("virtualDirectoryName").ToString());
            Console.WriteLine(result.GetProperty("numberOfFilesUploaded").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_UploadNodeLogs_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                containerUrl = "<containerUrl>",
                startTime = "2022-05-10T18:57:31.2311892Z",
            });
            Response response = await client.UploadNodeLogsAsync("<poolId>", "<nodeId>", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("virtualDirectoryName").ToString());
            Console.WriteLine(result.GetProperty("numberOfFilesUploaded").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_UploadNodeLogs_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            UploadBatchServiceLogsContent content = new UploadBatchServiceLogsContent("<containerUrl>", DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"));
            Response<UploadBatchServiceLogsResult> response = client.UploadNodeLogs("<poolId>", "<nodeId>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_UploadNodeLogs_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            UploadBatchServiceLogsContent content = new UploadBatchServiceLogsContent("<containerUrl>", DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"));
            Response<UploadBatchServiceLogsResult> response = await client.UploadNodeLogsAsync("<poolId>", "<nodeId>", content);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_UploadNodeLogs_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                containerUrl = "<containerUrl>",
                startTime = "2022-05-10T18:57:31.2311892Z",
                endTime = "2022-05-10T18:57:31.2311892Z",
                identityReference = new
                {
                    resourceId = "<resourceId>",
                },
            });
            Response response = client.UploadNodeLogs("<poolId>", "<nodeId>", content, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("virtualDirectoryName").ToString());
            Console.WriteLine(result.GetProperty("numberOfFilesUploaded").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_UploadNodeLogs_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                containerUrl = "<containerUrl>",
                startTime = "2022-05-10T18:57:31.2311892Z",
                endTime = "2022-05-10T18:57:31.2311892Z",
                identityReference = new
                {
                    resourceId = "<resourceId>",
                },
            });
            Response response = await client.UploadNodeLogsAsync("<poolId>", "<nodeId>", content, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("virtualDirectoryName").ToString());
            Console.WriteLine(result.GetProperty("numberOfFilesUploaded").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_UploadNodeLogs_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            UploadBatchServiceLogsContent content = new UploadBatchServiceLogsContent("<containerUrl>", DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"))
            {
                EndTime = DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"),
                IdentityReference = new BatchNodeIdentityReference
                {
                    ResourceId = "<resourceId>",
                },
            };
            Response<UploadBatchServiceLogsResult> response = client.UploadNodeLogs("<poolId>", "<nodeId>", content, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_UploadNodeLogs_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            UploadBatchServiceLogsContent content = new UploadBatchServiceLogsContent("<containerUrl>", DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"))
            {
                EndTime = DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"),
                IdentityReference = new BatchNodeIdentityReference
                {
                    ResourceId = "<resourceId>",
                },
            };
            Response<UploadBatchServiceLogsResult> response = await client.UploadNodeLogsAsync("<poolId>", "<nodeId>", content, timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetNodeExtension_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = client.GetNodeExtension("<poolId>", "<nodeId>", "<extensionName>", null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetNodeExtension_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = await client.GetNodeExtensionAsync("<poolId>", "<nodeId>", "<extensionName>", null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetNodeExtension_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response<BatchNodeVMExtension> response = client.GetNodeExtension("<poolId>", "<nodeId>", "<extensionName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetNodeExtension_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response<BatchNodeVMExtension> response = await client.GetNodeExtensionAsync("<poolId>", "<nodeId>", "<extensionName>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetNodeExtension_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = client.GetNodeExtension("<poolId>", "<nodeId>", "<extensionName>", 1234, DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), new string[] { "<select>" }, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("vmExtension").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("vmExtension").GetProperty("publisher").ToString());
            Console.WriteLine(result.GetProperty("vmExtension").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("vmExtension").GetProperty("typeHandlerVersion").ToString());
            Console.WriteLine(result.GetProperty("vmExtension").GetProperty("autoUpgradeMinorVersion").ToString());
            Console.WriteLine(result.GetProperty("vmExtension").GetProperty("enableAutomaticUpgrade").ToString());
            Console.WriteLine(result.GetProperty("vmExtension").GetProperty("settings").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("vmExtension").GetProperty("protectedSettings").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("vmExtension").GetProperty("provisionAfterExtensions")[0].ToString());
            Console.WriteLine(result.GetProperty("instanceView").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("instanceView").GetProperty("statuses")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("instanceView").GetProperty("statuses")[0].GetProperty("displayStatus").ToString());
            Console.WriteLine(result.GetProperty("instanceView").GetProperty("statuses")[0].GetProperty("level").ToString());
            Console.WriteLine(result.GetProperty("instanceView").GetProperty("statuses")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("instanceView").GetProperty("statuses")[0].GetProperty("time").ToString());
            Console.WriteLine(result.GetProperty("instanceView").GetProperty("subStatuses")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("instanceView").GetProperty("subStatuses")[0].GetProperty("displayStatus").ToString());
            Console.WriteLine(result.GetProperty("instanceView").GetProperty("subStatuses")[0].GetProperty("level").ToString());
            Console.WriteLine(result.GetProperty("instanceView").GetProperty("subStatuses")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("instanceView").GetProperty("subStatuses")[0].GetProperty("time").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetNodeExtension_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = await client.GetNodeExtensionAsync("<poolId>", "<nodeId>", "<extensionName>", 1234, DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), new string[] { "<select>" }, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("vmExtension").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("vmExtension").GetProperty("publisher").ToString());
            Console.WriteLine(result.GetProperty("vmExtension").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("vmExtension").GetProperty("typeHandlerVersion").ToString());
            Console.WriteLine(result.GetProperty("vmExtension").GetProperty("autoUpgradeMinorVersion").ToString());
            Console.WriteLine(result.GetProperty("vmExtension").GetProperty("enableAutomaticUpgrade").ToString());
            Console.WriteLine(result.GetProperty("vmExtension").GetProperty("settings").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("vmExtension").GetProperty("protectedSettings").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("vmExtension").GetProperty("provisionAfterExtensions")[0].ToString());
            Console.WriteLine(result.GetProperty("instanceView").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("instanceView").GetProperty("statuses")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("instanceView").GetProperty("statuses")[0].GetProperty("displayStatus").ToString());
            Console.WriteLine(result.GetProperty("instanceView").GetProperty("statuses")[0].GetProperty("level").ToString());
            Console.WriteLine(result.GetProperty("instanceView").GetProperty("statuses")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("instanceView").GetProperty("statuses")[0].GetProperty("time").ToString());
            Console.WriteLine(result.GetProperty("instanceView").GetProperty("subStatuses")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("instanceView").GetProperty("subStatuses")[0].GetProperty("displayStatus").ToString());
            Console.WriteLine(result.GetProperty("instanceView").GetProperty("subStatuses")[0].GetProperty("level").ToString());
            Console.WriteLine(result.GetProperty("instanceView").GetProperty("subStatuses")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("instanceView").GetProperty("subStatuses")[0].GetProperty("time").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetNodeExtension_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response<BatchNodeVMExtension> response = client.GetNodeExtension("<poolId>", "<nodeId>", "<extensionName>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), select: new string[] { "<select>" });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetNodeExtension_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response<BatchNodeVMExtension> response = await client.GetNodeExtensionAsync("<poolId>", "<nodeId>", "<extensionName>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), select: new string[] { "<select>" });
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_DeleteNodeFile_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = client.DeleteNodeFile("<poolId>", "<nodeId>", "<filePath>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_DeleteNodeFile_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = await client.DeleteNodeFileAsync("<poolId>", "<nodeId>", "<filePath>");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_DeleteNodeFile_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = client.DeleteNodeFile("<poolId>", "<nodeId>", "<filePath>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), recursive: true);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_DeleteNodeFile_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = await client.DeleteNodeFileAsync("<poolId>", "<nodeId>", "<filePath>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), recursive: true);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetNodeFile_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = client.GetNodeFile("<poolId>", "<nodeId>", "<filePath>", null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetNodeFile_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = await client.GetNodeFileAsync("<poolId>", "<nodeId>", "<filePath>", null, null, null, null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetNodeFile_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response<BinaryData> response = client.GetNodeFile("<poolId>", "<nodeId>", "<filePath>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetNodeFile_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response<BinaryData> response = await client.GetNodeFileAsync("<poolId>", "<nodeId>", "<filePath>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetNodeFile_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = client.GetNodeFile("<poolId>", "<nodeId>", "<filePath>", 1234, DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), "<ocp-range>", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetNodeFile_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response response = await client.GetNodeFileAsync("<poolId>", "<nodeId>", "<filePath>", 1234, DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), "<ocp-range>", null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetNodeFile_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response<BinaryData> response = client.GetNodeFile("<poolId>", "<nodeId>", "<filePath>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), ocpRange: "<ocp-range>", requestConditions: null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetNodeFile_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            Response<BinaryData> response = await client.GetNodeFileAsync("<poolId>", "<nodeId>", "<filePath>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), ocpRange: "<ocp-range>", requestConditions: null);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetApplications_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            foreach (BinaryData item in client.GetApplications(null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("versions")[0].ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetApplications_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            await foreach (BinaryData item in client.GetApplicationsAsync(null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("versions")[0].ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetApplications_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            foreach (BatchApplication item in client.GetApplications())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetApplications_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            await foreach (BatchApplication item in client.GetApplicationsAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetApplications_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            foreach (BinaryData item in client.GetApplications(1234, DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("versions")[0].ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetApplications_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            await foreach (BinaryData item in client.GetApplicationsAsync(1234, DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), 1234, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("versions")[0].ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetApplications_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            foreach (BatchApplication item in client.GetApplications(timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), maxresults: 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetApplications_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            await foreach (BatchApplication item in client.GetApplicationsAsync(timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), maxresults: 1234))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetPoolUsageMetrics_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            foreach (BinaryData item in client.GetPoolUsageMetrics(null, null, null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("poolId").ToString());
                Console.WriteLine(result.GetProperty("startTime").ToString());
                Console.WriteLine(result.GetProperty("endTime").ToString());
                Console.WriteLine(result.GetProperty("vmSize").ToString());
                Console.WriteLine(result.GetProperty("totalCoreHours").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetPoolUsageMetrics_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            await foreach (BinaryData item in client.GetPoolUsageMetricsAsync(null, null, null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("poolId").ToString());
                Console.WriteLine(result.GetProperty("startTime").ToString());
                Console.WriteLine(result.GetProperty("endTime").ToString());
                Console.WriteLine(result.GetProperty("vmSize").ToString());
                Console.WriteLine(result.GetProperty("totalCoreHours").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetPoolUsageMetrics_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            foreach (BatchPoolUsageMetrics item in client.GetPoolUsageMetrics())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetPoolUsageMetrics_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            await foreach (BatchPoolUsageMetrics item in client.GetPoolUsageMetricsAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetPoolUsageMetrics_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            foreach (BinaryData item in client.GetPoolUsageMetrics(1234, DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), 1234, DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), "<filter>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("poolId").ToString());
                Console.WriteLine(result.GetProperty("startTime").ToString());
                Console.WriteLine(result.GetProperty("endTime").ToString());
                Console.WriteLine(result.GetProperty("vmSize").ToString());
                Console.WriteLine(result.GetProperty("totalCoreHours").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetPoolUsageMetrics_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            await foreach (BinaryData item in client.GetPoolUsageMetricsAsync(1234, DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), 1234, DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), "<filter>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("poolId").ToString());
                Console.WriteLine(result.GetProperty("startTime").ToString());
                Console.WriteLine(result.GetProperty("endTime").ToString());
                Console.WriteLine(result.GetProperty("vmSize").ToString());
                Console.WriteLine(result.GetProperty("totalCoreHours").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetPoolUsageMetrics_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            foreach (BatchPoolUsageMetrics item in client.GetPoolUsageMetrics(timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), maxresults: 1234, starttime: DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), endtime: DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), filter: "<filter>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetPoolUsageMetrics_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            await foreach (BatchPoolUsageMetrics item in client.GetPoolUsageMetricsAsync(timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), maxresults: 1234, starttime: DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), endtime: DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), filter: "<filter>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetPools_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            foreach (BinaryData item in client.GetPools(null, null, null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetPools_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            await foreach (BinaryData item in client.GetPoolsAsync(null, null, null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetPools_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            foreach (BatchPool item in client.GetPools())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetPools_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            await foreach (BatchPool item in client.GetPoolsAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetPools_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            foreach (BinaryData item in client.GetPools(1234, DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), 1234, "<filter>", new string[] { "<select>" }, new string[] { "<expand>" }, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("url").ToString());
                Console.WriteLine(result.GetProperty("eTag").ToString());
                Console.WriteLine(result.GetProperty("lastModified").ToString());
                Console.WriteLine(result.GetProperty("creationTime").ToString());
                Console.WriteLine(result.GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("stateTransitionTime").ToString());
                Console.WriteLine(result.GetProperty("allocationState").ToString());
                Console.WriteLine(result.GetProperty("allocationStateTransitionTime").ToString());
                Console.WriteLine(result.GetProperty("vmSize").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("publisher").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("offer").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("sku").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("virtualMachineImageId").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("exactVersion").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("nodeAgentSKUId").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("windowsConfiguration").GetProperty("enableAutomaticUpdates").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("lun").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("caching").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("diskSizeGB").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("storageAccountType").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("licenseType").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerImageNames")[0].ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("password").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("registryServer").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("diskEncryptionConfiguration").GetProperty("targets")[0].ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("nodePlacementConfiguration").GetProperty("policy").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("publisher").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("typeHandlerVersion").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("autoUpgradeMinorVersion").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("enableAutomaticUpgrade").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("settings").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("protectedSettings").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("provisionAfterExtensions")[0].ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("ephemeralOSDiskSettings").GetProperty("placement").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("caching").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("managedDisk").GetProperty("storageAccountType").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("writeAcceleratorEnabled").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("securityProfile").GetProperty("encryptionAtHost").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("securityProfile").GetProperty("securityType").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("secureBootEnabled").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("vTpmEnabled").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("serviceArtifactReference").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("resizeTimeout").ToString());
                Console.WriteLine(result.GetProperty("resizeErrors")[0].GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("resizeErrors")[0].GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("resizeErrors")[0].GetProperty("values")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("resizeErrors")[0].GetProperty("values")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("resourceTags").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("currentDedicatedNodes").ToString());
                Console.WriteLine(result.GetProperty("currentLowPriorityNodes").ToString());
                Console.WriteLine(result.GetProperty("targetDedicatedNodes").ToString());
                Console.WriteLine(result.GetProperty("targetLowPriorityNodes").ToString());
                Console.WriteLine(result.GetProperty("enableAutoScale").ToString());
                Console.WriteLine(result.GetProperty("autoScaleFormula").ToString());
                Console.WriteLine(result.GetProperty("autoScaleEvaluationInterval").ToString());
                Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("timestamp").ToString());
                Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("results").ToString());
                Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("error").GetProperty("values")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("error").GetProperty("values")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("enableInterNodeCommunication").ToString());
                Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("subnetId").ToString());
                Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("dynamicVNetAssignmentScope").ToString());
                Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("protocol").ToString());
                Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("backendPort").ToString());
                Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("frontendPortRangeStart").ToString());
                Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("frontendPortRangeEnd").ToString());
                Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("priority").ToString());
                Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("access").ToString());
                Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("sourceAddressPrefix").ToString());
                Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("sourcePortRanges")[0].ToString());
                Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("publicIPAddressConfiguration").GetProperty("provision").ToString());
                Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("publicIPAddressConfiguration").GetProperty("ipAddressIds")[0].ToString());
                Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("enableAcceleratedNetworking").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("commandLine").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("containerRunOptions").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("imageName").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("password").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("registryServer").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("workingDirectory").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("autoStorageContainerName").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("storageContainerUrl").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("httpUrl").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("blobPrefix").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("filePath").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("fileMode").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("environmentSettings")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("environmentSettings")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("userIdentity").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("scope").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("elevationLevel").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("maxTaskRetryCount").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("waitForSuccess").ToString());
                Console.WriteLine(result.GetProperty("applicationPackageReferences")[0].GetProperty("applicationId").ToString());
                Console.WriteLine(result.GetProperty("applicationPackageReferences")[0].GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("taskSlotsPerNode").ToString());
                Console.WriteLine(result.GetProperty("taskSchedulingPolicy").GetProperty("nodeFillType").ToString());
                Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("password").ToString());
                Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("elevationLevel").ToString());
                Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("uid").ToString());
                Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("gid").ToString());
                Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("sshPrivateKey").ToString());
                Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("windowsUserConfiguration").GetProperty("loginMode").ToString());
                Console.WriteLine(result.GetProperty("metadata")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("metadata")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("url").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("startTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("lastUpdateTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("usageStats").GetProperty("startTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("usageStats").GetProperty("lastUpdateTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("usageStats").GetProperty("dedicatedCoreTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("startTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("lastUpdateTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("avgCPUPercentage").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("avgMemoryGiB").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("peakMemoryGiB").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("avgDiskGiB").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("peakDiskGiB").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("diskReadIOps").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("diskWriteIOps").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("diskReadGiB").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("diskWriteGiB").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("networkReadGiB").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("networkWriteGiB").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("accountName").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("containerName").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("accountKey").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("sasKey").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("blobfuseOptions").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("relativeMountPath").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("source").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("relativeMountPath").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("mountOptions").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("source").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("relativeMountPath").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("mountOptions").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("password").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("accountName").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("azureFileUrl").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("accountKey").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("relativeMountPath").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("mountOptions").ToString());
                Console.WriteLine(result.GetProperty("identity").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("identity").GetProperty("userAssignedIdentities")[0].GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("identity").GetProperty("userAssignedIdentities")[0].GetProperty("clientId").ToString());
                Console.WriteLine(result.GetProperty("identity").GetProperty("userAssignedIdentities")[0].GetProperty("principalId").ToString());
                Console.WriteLine(result.GetProperty("targetNodeCommunicationMode").ToString());
                Console.WriteLine(result.GetProperty("currentNodeCommunicationMode").ToString());
                Console.WriteLine(result.GetProperty("upgradePolicy").GetProperty("mode").ToString());
                Console.WriteLine(result.GetProperty("upgradePolicy").GetProperty("automaticOSUpgradePolicy").GetProperty("disableAutomaticRollback").ToString());
                Console.WriteLine(result.GetProperty("upgradePolicy").GetProperty("automaticOSUpgradePolicy").GetProperty("enableAutomaticOSUpgrade").ToString());
                Console.WriteLine(result.GetProperty("upgradePolicy").GetProperty("automaticOSUpgradePolicy").GetProperty("useRollingUpgradePolicy").ToString());
                Console.WriteLine(result.GetProperty("upgradePolicy").GetProperty("automaticOSUpgradePolicy").GetProperty("osRollingUpgradeDeferral").ToString());
                Console.WriteLine(result.GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("enableCrossZoneUpgrade").ToString());
                Console.WriteLine(result.GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("maxBatchInstancePercent").ToString());
                Console.WriteLine(result.GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("maxUnhealthyInstancePercent").ToString());
                Console.WriteLine(result.GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("maxUnhealthyUpgradedInstancePercent").ToString());
                Console.WriteLine(result.GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("pauseTimeBetweenBatches").ToString());
                Console.WriteLine(result.GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("prioritizeUnhealthyInstances").ToString());
                Console.WriteLine(result.GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("rollbackFailedInstancesOnPolicyBreach").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetPools_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            await foreach (BinaryData item in client.GetPoolsAsync(1234, DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), 1234, "<filter>", new string[] { "<select>" }, new string[] { "<expand>" }, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("url").ToString());
                Console.WriteLine(result.GetProperty("eTag").ToString());
                Console.WriteLine(result.GetProperty("lastModified").ToString());
                Console.WriteLine(result.GetProperty("creationTime").ToString());
                Console.WriteLine(result.GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("stateTransitionTime").ToString());
                Console.WriteLine(result.GetProperty("allocationState").ToString());
                Console.WriteLine(result.GetProperty("allocationStateTransitionTime").ToString());
                Console.WriteLine(result.GetProperty("vmSize").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("publisher").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("offer").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("sku").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("virtualMachineImageId").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("exactVersion").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("nodeAgentSKUId").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("windowsConfiguration").GetProperty("enableAutomaticUpdates").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("lun").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("caching").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("diskSizeGB").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("storageAccountType").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("licenseType").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerImageNames")[0].ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("password").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("registryServer").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("diskEncryptionConfiguration").GetProperty("targets")[0].ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("nodePlacementConfiguration").GetProperty("policy").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("publisher").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("typeHandlerVersion").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("autoUpgradeMinorVersion").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("enableAutomaticUpgrade").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("settings").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("protectedSettings").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("provisionAfterExtensions")[0].ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("ephemeralOSDiskSettings").GetProperty("placement").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("caching").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("managedDisk").GetProperty("storageAccountType").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("writeAcceleratorEnabled").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("securityProfile").GetProperty("encryptionAtHost").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("securityProfile").GetProperty("securityType").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("secureBootEnabled").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("vTpmEnabled").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("serviceArtifactReference").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("resizeTimeout").ToString());
                Console.WriteLine(result.GetProperty("resizeErrors")[0].GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("resizeErrors")[0].GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("resizeErrors")[0].GetProperty("values")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("resizeErrors")[0].GetProperty("values")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("resourceTags").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("currentDedicatedNodes").ToString());
                Console.WriteLine(result.GetProperty("currentLowPriorityNodes").ToString());
                Console.WriteLine(result.GetProperty("targetDedicatedNodes").ToString());
                Console.WriteLine(result.GetProperty("targetLowPriorityNodes").ToString());
                Console.WriteLine(result.GetProperty("enableAutoScale").ToString());
                Console.WriteLine(result.GetProperty("autoScaleFormula").ToString());
                Console.WriteLine(result.GetProperty("autoScaleEvaluationInterval").ToString());
                Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("timestamp").ToString());
                Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("results").ToString());
                Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("error").GetProperty("values")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("error").GetProperty("values")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("enableInterNodeCommunication").ToString());
                Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("subnetId").ToString());
                Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("dynamicVNetAssignmentScope").ToString());
                Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("protocol").ToString());
                Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("backendPort").ToString());
                Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("frontendPortRangeStart").ToString());
                Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("frontendPortRangeEnd").ToString());
                Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("priority").ToString());
                Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("access").ToString());
                Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("sourceAddressPrefix").ToString());
                Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("sourcePortRanges")[0].ToString());
                Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("publicIPAddressConfiguration").GetProperty("provision").ToString());
                Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("publicIPAddressConfiguration").GetProperty("ipAddressIds")[0].ToString());
                Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("enableAcceleratedNetworking").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("commandLine").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("containerRunOptions").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("imageName").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("password").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("registryServer").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("workingDirectory").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("autoStorageContainerName").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("storageContainerUrl").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("httpUrl").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("blobPrefix").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("filePath").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("fileMode").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("environmentSettings")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("environmentSettings")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("userIdentity").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("scope").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("elevationLevel").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("maxTaskRetryCount").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("waitForSuccess").ToString());
                Console.WriteLine(result.GetProperty("applicationPackageReferences")[0].GetProperty("applicationId").ToString());
                Console.WriteLine(result.GetProperty("applicationPackageReferences")[0].GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("taskSlotsPerNode").ToString());
                Console.WriteLine(result.GetProperty("taskSchedulingPolicy").GetProperty("nodeFillType").ToString());
                Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("password").ToString());
                Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("elevationLevel").ToString());
                Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("uid").ToString());
                Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("gid").ToString());
                Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("sshPrivateKey").ToString());
                Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("windowsUserConfiguration").GetProperty("loginMode").ToString());
                Console.WriteLine(result.GetProperty("metadata")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("metadata")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("url").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("startTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("lastUpdateTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("usageStats").GetProperty("startTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("usageStats").GetProperty("lastUpdateTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("usageStats").GetProperty("dedicatedCoreTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("startTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("lastUpdateTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("avgCPUPercentage").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("avgMemoryGiB").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("peakMemoryGiB").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("avgDiskGiB").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("peakDiskGiB").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("diskReadIOps").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("diskWriteIOps").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("diskReadGiB").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("diskWriteGiB").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("networkReadGiB").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("networkWriteGiB").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("accountName").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("containerName").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("accountKey").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("sasKey").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("blobfuseOptions").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("relativeMountPath").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("source").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("relativeMountPath").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("mountOptions").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("source").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("relativeMountPath").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("mountOptions").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("password").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("accountName").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("azureFileUrl").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("accountKey").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("relativeMountPath").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("mountOptions").ToString());
                Console.WriteLine(result.GetProperty("identity").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("identity").GetProperty("userAssignedIdentities")[0].GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("identity").GetProperty("userAssignedIdentities")[0].GetProperty("clientId").ToString());
                Console.WriteLine(result.GetProperty("identity").GetProperty("userAssignedIdentities")[0].GetProperty("principalId").ToString());
                Console.WriteLine(result.GetProperty("targetNodeCommunicationMode").ToString());
                Console.WriteLine(result.GetProperty("currentNodeCommunicationMode").ToString());
                Console.WriteLine(result.GetProperty("upgradePolicy").GetProperty("mode").ToString());
                Console.WriteLine(result.GetProperty("upgradePolicy").GetProperty("automaticOSUpgradePolicy").GetProperty("disableAutomaticRollback").ToString());
                Console.WriteLine(result.GetProperty("upgradePolicy").GetProperty("automaticOSUpgradePolicy").GetProperty("enableAutomaticOSUpgrade").ToString());
                Console.WriteLine(result.GetProperty("upgradePolicy").GetProperty("automaticOSUpgradePolicy").GetProperty("useRollingUpgradePolicy").ToString());
                Console.WriteLine(result.GetProperty("upgradePolicy").GetProperty("automaticOSUpgradePolicy").GetProperty("osRollingUpgradeDeferral").ToString());
                Console.WriteLine(result.GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("enableCrossZoneUpgrade").ToString());
                Console.WriteLine(result.GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("maxBatchInstancePercent").ToString());
                Console.WriteLine(result.GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("maxUnhealthyInstancePercent").ToString());
                Console.WriteLine(result.GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("maxUnhealthyUpgradedInstancePercent").ToString());
                Console.WriteLine(result.GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("pauseTimeBetweenBatches").ToString());
                Console.WriteLine(result.GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("prioritizeUnhealthyInstances").ToString());
                Console.WriteLine(result.GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("rollbackFailedInstancesOnPolicyBreach").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetPools_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            foreach (BatchPool item in client.GetPools(timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), maxresults: 1234, filter: "<filter>", select: new string[] { "<select>" }, expand: new string[] { "<expand>" }))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetPools_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            await foreach (BatchPool item in client.GetPoolsAsync(timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), maxresults: 1234, filter: "<filter>", select: new string[] { "<select>" }, expand: new string[] { "<expand>" }))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetSupportedImages_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            foreach (BinaryData item in client.GetSupportedImages(null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("nodeAgentSKUId").ToString());
                Console.WriteLine(result.GetProperty("imageReference").ToString());
                Console.WriteLine(result.GetProperty("osType").ToString());
                Console.WriteLine(result.GetProperty("verificationType").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetSupportedImages_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            await foreach (BinaryData item in client.GetSupportedImagesAsync(null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("nodeAgentSKUId").ToString());
                Console.WriteLine(result.GetProperty("imageReference").ToString());
                Console.WriteLine(result.GetProperty("osType").ToString());
                Console.WriteLine(result.GetProperty("verificationType").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetSupportedImages_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            foreach (BatchSupportedImage item in client.GetSupportedImages())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetSupportedImages_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            await foreach (BatchSupportedImage item in client.GetSupportedImagesAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetSupportedImages_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            foreach (BinaryData item in client.GetSupportedImages(1234, DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), 1234, "<filter>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("nodeAgentSKUId").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("publisher").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("offer").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("sku").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("virtualMachineImageId").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("exactVersion").ToString());
                Console.WriteLine(result.GetProperty("osType").ToString());
                Console.WriteLine(result.GetProperty("capabilities")[0].ToString());
                Console.WriteLine(result.GetProperty("batchSupportEndOfLife").ToString());
                Console.WriteLine(result.GetProperty("verificationType").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetSupportedImages_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            await foreach (BinaryData item in client.GetSupportedImagesAsync(1234, DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), 1234, "<filter>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("nodeAgentSKUId").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("publisher").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("offer").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("sku").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("virtualMachineImageId").ToString());
                Console.WriteLine(result.GetProperty("imageReference").GetProperty("exactVersion").ToString());
                Console.WriteLine(result.GetProperty("osType").ToString());
                Console.WriteLine(result.GetProperty("capabilities")[0].ToString());
                Console.WriteLine(result.GetProperty("batchSupportEndOfLife").ToString());
                Console.WriteLine(result.GetProperty("verificationType").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetSupportedImages_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            foreach (BatchSupportedImage item in client.GetSupportedImages(timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), maxresults: 1234, filter: "<filter>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetSupportedImages_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            await foreach (BatchSupportedImage item in client.GetSupportedImagesAsync(timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), maxresults: 1234, filter: "<filter>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetPoolNodeCounts_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            foreach (BinaryData item in client.GetPoolNodeCounts(null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("poolId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetPoolNodeCounts_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            await foreach (BinaryData item in client.GetPoolNodeCountsAsync(null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("poolId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetPoolNodeCounts_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            foreach (BatchPoolNodeCounts item in client.GetPoolNodeCounts())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetPoolNodeCounts_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            await foreach (BatchPoolNodeCounts item in client.GetPoolNodeCountsAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetPoolNodeCounts_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            foreach (BinaryData item in client.GetPoolNodeCounts(1234, DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), 1234, "<filter>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("poolId").ToString());
                Console.WriteLine(result.GetProperty("dedicated").GetProperty("creating").ToString());
                Console.WriteLine(result.GetProperty("dedicated").GetProperty("idle").ToString());
                Console.WriteLine(result.GetProperty("dedicated").GetProperty("offline").ToString());
                Console.WriteLine(result.GetProperty("dedicated").GetProperty("preempted").ToString());
                Console.WriteLine(result.GetProperty("dedicated").GetProperty("rebooting").ToString());
                Console.WriteLine(result.GetProperty("dedicated").GetProperty("reimaging").ToString());
                Console.WriteLine(result.GetProperty("dedicated").GetProperty("running").ToString());
                Console.WriteLine(result.GetProperty("dedicated").GetProperty("starting").ToString());
                Console.WriteLine(result.GetProperty("dedicated").GetProperty("startTaskFailed").ToString());
                Console.WriteLine(result.GetProperty("dedicated").GetProperty("leavingPool").ToString());
                Console.WriteLine(result.GetProperty("dedicated").GetProperty("unknown").ToString());
                Console.WriteLine(result.GetProperty("dedicated").GetProperty("unusable").ToString());
                Console.WriteLine(result.GetProperty("dedicated").GetProperty("waitingForStartTask").ToString());
                Console.WriteLine(result.GetProperty("dedicated").GetProperty("total").ToString());
                Console.WriteLine(result.GetProperty("dedicated").GetProperty("upgradingOS").ToString());
                Console.WriteLine(result.GetProperty("lowPriority").GetProperty("creating").ToString());
                Console.WriteLine(result.GetProperty("lowPriority").GetProperty("idle").ToString());
                Console.WriteLine(result.GetProperty("lowPriority").GetProperty("offline").ToString());
                Console.WriteLine(result.GetProperty("lowPriority").GetProperty("preempted").ToString());
                Console.WriteLine(result.GetProperty("lowPriority").GetProperty("rebooting").ToString());
                Console.WriteLine(result.GetProperty("lowPriority").GetProperty("reimaging").ToString());
                Console.WriteLine(result.GetProperty("lowPriority").GetProperty("running").ToString());
                Console.WriteLine(result.GetProperty("lowPriority").GetProperty("starting").ToString());
                Console.WriteLine(result.GetProperty("lowPriority").GetProperty("startTaskFailed").ToString());
                Console.WriteLine(result.GetProperty("lowPriority").GetProperty("leavingPool").ToString());
                Console.WriteLine(result.GetProperty("lowPriority").GetProperty("unknown").ToString());
                Console.WriteLine(result.GetProperty("lowPriority").GetProperty("unusable").ToString());
                Console.WriteLine(result.GetProperty("lowPriority").GetProperty("waitingForStartTask").ToString());
                Console.WriteLine(result.GetProperty("lowPriority").GetProperty("total").ToString());
                Console.WriteLine(result.GetProperty("lowPriority").GetProperty("upgradingOS").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetPoolNodeCounts_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            await foreach (BinaryData item in client.GetPoolNodeCountsAsync(1234, DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), 1234, "<filter>", null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("poolId").ToString());
                Console.WriteLine(result.GetProperty("dedicated").GetProperty("creating").ToString());
                Console.WriteLine(result.GetProperty("dedicated").GetProperty("idle").ToString());
                Console.WriteLine(result.GetProperty("dedicated").GetProperty("offline").ToString());
                Console.WriteLine(result.GetProperty("dedicated").GetProperty("preempted").ToString());
                Console.WriteLine(result.GetProperty("dedicated").GetProperty("rebooting").ToString());
                Console.WriteLine(result.GetProperty("dedicated").GetProperty("reimaging").ToString());
                Console.WriteLine(result.GetProperty("dedicated").GetProperty("running").ToString());
                Console.WriteLine(result.GetProperty("dedicated").GetProperty("starting").ToString());
                Console.WriteLine(result.GetProperty("dedicated").GetProperty("startTaskFailed").ToString());
                Console.WriteLine(result.GetProperty("dedicated").GetProperty("leavingPool").ToString());
                Console.WriteLine(result.GetProperty("dedicated").GetProperty("unknown").ToString());
                Console.WriteLine(result.GetProperty("dedicated").GetProperty("unusable").ToString());
                Console.WriteLine(result.GetProperty("dedicated").GetProperty("waitingForStartTask").ToString());
                Console.WriteLine(result.GetProperty("dedicated").GetProperty("total").ToString());
                Console.WriteLine(result.GetProperty("dedicated").GetProperty("upgradingOS").ToString());
                Console.WriteLine(result.GetProperty("lowPriority").GetProperty("creating").ToString());
                Console.WriteLine(result.GetProperty("lowPriority").GetProperty("idle").ToString());
                Console.WriteLine(result.GetProperty("lowPriority").GetProperty("offline").ToString());
                Console.WriteLine(result.GetProperty("lowPriority").GetProperty("preempted").ToString());
                Console.WriteLine(result.GetProperty("lowPriority").GetProperty("rebooting").ToString());
                Console.WriteLine(result.GetProperty("lowPriority").GetProperty("reimaging").ToString());
                Console.WriteLine(result.GetProperty("lowPriority").GetProperty("running").ToString());
                Console.WriteLine(result.GetProperty("lowPriority").GetProperty("starting").ToString());
                Console.WriteLine(result.GetProperty("lowPriority").GetProperty("startTaskFailed").ToString());
                Console.WriteLine(result.GetProperty("lowPriority").GetProperty("leavingPool").ToString());
                Console.WriteLine(result.GetProperty("lowPriority").GetProperty("unknown").ToString());
                Console.WriteLine(result.GetProperty("lowPriority").GetProperty("unusable").ToString());
                Console.WriteLine(result.GetProperty("lowPriority").GetProperty("waitingForStartTask").ToString());
                Console.WriteLine(result.GetProperty("lowPriority").GetProperty("total").ToString());
                Console.WriteLine(result.GetProperty("lowPriority").GetProperty("upgradingOS").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetPoolNodeCounts_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            foreach (BatchPoolNodeCounts item in client.GetPoolNodeCounts(timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), maxresults: 1234, filter: "<filter>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetPoolNodeCounts_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            await foreach (BatchPoolNodeCounts item in client.GetPoolNodeCountsAsync(timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), maxresults: 1234, filter: "<filter>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetJobs_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            foreach (BinaryData item in client.GetJobs(null, null, null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("poolInfo").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetJobs_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            await foreach (BinaryData item in client.GetJobsAsync(null, null, null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("poolInfo").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetJobs_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            foreach (BatchJob item in client.GetJobs())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetJobs_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            await foreach (BatchJob item in client.GetJobsAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetJobs_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            foreach (BinaryData item in client.GetJobs(1234, DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), 1234, "<filter>", new string[] { "<select>" }, new string[] { "<expand>" }, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("usesTaskDependencies").ToString());
                Console.WriteLine(result.GetProperty("url").ToString());
                Console.WriteLine(result.GetProperty("eTag").ToString());
                Console.WriteLine(result.GetProperty("lastModified").ToString());
                Console.WriteLine(result.GetProperty("creationTime").ToString());
                Console.WriteLine(result.GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("stateTransitionTime").ToString());
                Console.WriteLine(result.GetProperty("previousState").ToString());
                Console.WriteLine(result.GetProperty("previousStateTransitionTime").ToString());
                Console.WriteLine(result.GetProperty("priority").ToString());
                Console.WriteLine(result.GetProperty("allowTaskPreemption").ToString());
                Console.WriteLine(result.GetProperty("maxParallelTasks").ToString());
                Console.WriteLine(result.GetProperty("constraints").GetProperty("maxWallClockTime").ToString());
                Console.WriteLine(result.GetProperty("constraints").GetProperty("maxTaskRetryCount").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("commandLine").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("containerRunOptions").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("imageName").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("password").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("registryServer").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("workingDirectory").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("autoStorageContainerName").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("storageContainerUrl").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("httpUrl").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("blobPrefix").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("filePath").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("fileMode").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("filePattern").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("path").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("containerUrl").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("uploadHeaders")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("uploadHeaders")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("uploadOptions").GetProperty("uploadCondition").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("environmentSettings")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("environmentSettings")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("constraints").GetProperty("maxWallClockTime").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("constraints").GetProperty("retentionTime").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("constraints").GetProperty("maxTaskRetryCount").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("requiredSlots").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("killJobOnCompletion").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("userIdentity").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("scope").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("elevationLevel").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("runExclusive").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("applicationPackageReferences")[0].GetProperty("applicationId").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("applicationPackageReferences")[0].GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("authenticationTokenSettings").GetProperty("access")[0].ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("allowLowPriorityNode").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("commandLine").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("containerRunOptions").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("imageName").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("password").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("registryServer").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("workingDirectory").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("autoStorageContainerName").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("storageContainerUrl").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("httpUrl").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("blobPrefix").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("filePath").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("fileMode").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("environmentSettings")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("environmentSettings")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("constraints").GetProperty("maxWallClockTime").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("constraints").GetProperty("retentionTime").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("constraints").GetProperty("maxTaskRetryCount").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("waitForSuccess").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("userIdentity").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("scope").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("elevationLevel").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("rerunOnNodeRebootAfterSuccess").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("commandLine").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("containerRunOptions").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("imageName").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("password").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("registryServer").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("workingDirectory").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("autoStorageContainerName").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("storageContainerUrl").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("httpUrl").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("blobPrefix").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("filePath").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("fileMode").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("environmentSettings")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("environmentSettings")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("maxWallClockTime").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("retentionTime").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("userIdentity").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("scope").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("elevationLevel").ToString());
                Console.WriteLine(result.GetProperty("commonEnvironmentSettings")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("commonEnvironmentSettings")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("poolId").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("autoPoolIdPrefix").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("poolLifetimeOption").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("keepAlive").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("vmSize").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("publisher").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("offer").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("sku").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("virtualMachineImageId").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("exactVersion").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("nodeAgentSKUId").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("windowsConfiguration").GetProperty("enableAutomaticUpdates").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("lun").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("caching").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("diskSizeGB").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("storageAccountType").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("licenseType").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerImageNames")[0].ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("password").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("registryServer").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("diskEncryptionConfiguration").GetProperty("targets")[0].ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("nodePlacementConfiguration").GetProperty("policy").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("publisher").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("typeHandlerVersion").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("autoUpgradeMinorVersion").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("enableAutomaticUpgrade").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("settings").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("protectedSettings").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("provisionAfterExtensions")[0].ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("ephemeralOSDiskSettings").GetProperty("placement").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("caching").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("managedDisk").GetProperty("storageAccountType").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("writeAcceleratorEnabled").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("securityProfile").GetProperty("encryptionAtHost").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("securityProfile").GetProperty("securityType").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("secureBootEnabled").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("vTpmEnabled").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("serviceArtifactReference").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("taskSlotsPerNode").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("taskSchedulingPolicy").GetProperty("nodeFillType").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("resizeTimeout").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("resourceTags").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("targetDedicatedNodes").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("targetLowPriorityNodes").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("enableAutoScale").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("autoScaleFormula").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("autoScaleEvaluationInterval").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("enableInterNodeCommunication").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("subnetId").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("dynamicVNetAssignmentScope").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("protocol").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("backendPort").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("frontendPortRangeStart").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("frontendPortRangeEnd").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("priority").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("access").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("sourceAddressPrefix").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("sourcePortRanges")[0].ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("publicIPAddressConfiguration").GetProperty("provision").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("publicIPAddressConfiguration").GetProperty("ipAddressIds")[0].ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("enableAcceleratedNetworking").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("commandLine").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("containerRunOptions").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("imageName").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("password").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("registryServer").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("workingDirectory").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("autoStorageContainerName").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("storageContainerUrl").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("httpUrl").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("blobPrefix").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("filePath").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("fileMode").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("environmentSettings")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("environmentSettings")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("userIdentity").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("scope").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("elevationLevel").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("maxTaskRetryCount").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("waitForSuccess").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("applicationPackageReferences")[0].GetProperty("applicationId").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("applicationPackageReferences")[0].GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("password").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("elevationLevel").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("uid").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("gid").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("sshPrivateKey").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("windowsUserConfiguration").GetProperty("loginMode").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("metadata")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("metadata")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("accountName").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("containerName").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("accountKey").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("sasKey").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("blobfuseOptions").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("relativeMountPath").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("source").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("relativeMountPath").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("mountOptions").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("source").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("relativeMountPath").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("mountOptions").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("password").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("accountName").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("azureFileUrl").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("accountKey").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("relativeMountPath").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("mountOptions").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("targetNodeCommunicationMode").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("mode").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("automaticOSUpgradePolicy").GetProperty("disableAutomaticRollback").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("automaticOSUpgradePolicy").GetProperty("enableAutomaticOSUpgrade").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("automaticOSUpgradePolicy").GetProperty("useRollingUpgradePolicy").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("automaticOSUpgradePolicy").GetProperty("osRollingUpgradeDeferral").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("enableCrossZoneUpgrade").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("maxBatchInstancePercent").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("maxUnhealthyInstancePercent").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("maxUnhealthyUpgradedInstancePercent").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("pauseTimeBetweenBatches").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("prioritizeUnhealthyInstances").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("rollbackFailedInstancesOnPolicyBreach").ToString());
                Console.WriteLine(result.GetProperty("onAllTasksComplete").ToString());
                Console.WriteLine(result.GetProperty("onTaskFailure").ToString());
                Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("subnetId").ToString());
                Console.WriteLine(result.GetProperty("metadata")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("metadata")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("startTime").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("endTime").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("poolId").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("schedulingError").GetProperty("category").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("schedulingError").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("schedulingError").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("schedulingError").GetProperty("details")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("schedulingError").GetProperty("details")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("terminateReason").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("url").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("startTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("lastUpdateTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("userCPUTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("kernelCPUTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("wallClockTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("readIOps").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("writeIOps").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("readIOGiB").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("writeIOGiB").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("numSucceededTasks").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("numFailedTasks").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("numTaskRetries").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("waitTime").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetJobs_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            await foreach (BinaryData item in client.GetJobsAsync(1234, DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), 1234, "<filter>", new string[] { "<select>" }, new string[] { "<expand>" }, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("usesTaskDependencies").ToString());
                Console.WriteLine(result.GetProperty("url").ToString());
                Console.WriteLine(result.GetProperty("eTag").ToString());
                Console.WriteLine(result.GetProperty("lastModified").ToString());
                Console.WriteLine(result.GetProperty("creationTime").ToString());
                Console.WriteLine(result.GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("stateTransitionTime").ToString());
                Console.WriteLine(result.GetProperty("previousState").ToString());
                Console.WriteLine(result.GetProperty("previousStateTransitionTime").ToString());
                Console.WriteLine(result.GetProperty("priority").ToString());
                Console.WriteLine(result.GetProperty("allowTaskPreemption").ToString());
                Console.WriteLine(result.GetProperty("maxParallelTasks").ToString());
                Console.WriteLine(result.GetProperty("constraints").GetProperty("maxWallClockTime").ToString());
                Console.WriteLine(result.GetProperty("constraints").GetProperty("maxTaskRetryCount").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("commandLine").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("containerRunOptions").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("imageName").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("password").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("registryServer").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("workingDirectory").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("autoStorageContainerName").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("storageContainerUrl").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("httpUrl").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("blobPrefix").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("filePath").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("fileMode").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("filePattern").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("path").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("containerUrl").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("uploadHeaders")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("uploadHeaders")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("uploadOptions").GetProperty("uploadCondition").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("environmentSettings")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("environmentSettings")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("constraints").GetProperty("maxWallClockTime").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("constraints").GetProperty("retentionTime").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("constraints").GetProperty("maxTaskRetryCount").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("requiredSlots").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("killJobOnCompletion").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("userIdentity").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("scope").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("elevationLevel").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("runExclusive").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("applicationPackageReferences")[0].GetProperty("applicationId").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("applicationPackageReferences")[0].GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("authenticationTokenSettings").GetProperty("access")[0].ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("allowLowPriorityNode").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("commandLine").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("containerRunOptions").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("imageName").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("password").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("registryServer").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("workingDirectory").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("autoStorageContainerName").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("storageContainerUrl").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("httpUrl").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("blobPrefix").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("filePath").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("fileMode").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("environmentSettings")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("environmentSettings")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("constraints").GetProperty("maxWallClockTime").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("constraints").GetProperty("retentionTime").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("constraints").GetProperty("maxTaskRetryCount").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("waitForSuccess").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("userIdentity").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("scope").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("elevationLevel").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("rerunOnNodeRebootAfterSuccess").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("commandLine").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("containerRunOptions").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("imageName").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("password").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("registryServer").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("workingDirectory").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("autoStorageContainerName").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("storageContainerUrl").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("httpUrl").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("blobPrefix").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("filePath").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("fileMode").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("environmentSettings")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("environmentSettings")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("maxWallClockTime").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("retentionTime").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("userIdentity").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("scope").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("elevationLevel").ToString());
                Console.WriteLine(result.GetProperty("commonEnvironmentSettings")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("commonEnvironmentSettings")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("poolId").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("autoPoolIdPrefix").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("poolLifetimeOption").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("keepAlive").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("vmSize").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("publisher").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("offer").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("sku").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("virtualMachineImageId").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("exactVersion").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("nodeAgentSKUId").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("windowsConfiguration").GetProperty("enableAutomaticUpdates").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("lun").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("caching").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("diskSizeGB").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("storageAccountType").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("licenseType").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerImageNames")[0].ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("password").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("registryServer").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("diskEncryptionConfiguration").GetProperty("targets")[0].ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("nodePlacementConfiguration").GetProperty("policy").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("publisher").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("typeHandlerVersion").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("autoUpgradeMinorVersion").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("enableAutomaticUpgrade").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("settings").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("protectedSettings").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("provisionAfterExtensions")[0].ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("ephemeralOSDiskSettings").GetProperty("placement").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("caching").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("managedDisk").GetProperty("storageAccountType").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("writeAcceleratorEnabled").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("securityProfile").GetProperty("encryptionAtHost").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("securityProfile").GetProperty("securityType").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("secureBootEnabled").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("vTpmEnabled").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("serviceArtifactReference").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("taskSlotsPerNode").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("taskSchedulingPolicy").GetProperty("nodeFillType").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("resizeTimeout").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("resourceTags").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("targetDedicatedNodes").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("targetLowPriorityNodes").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("enableAutoScale").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("autoScaleFormula").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("autoScaleEvaluationInterval").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("enableInterNodeCommunication").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("subnetId").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("dynamicVNetAssignmentScope").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("protocol").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("backendPort").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("frontendPortRangeStart").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("frontendPortRangeEnd").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("priority").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("access").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("sourceAddressPrefix").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("sourcePortRanges")[0].ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("publicIPAddressConfiguration").GetProperty("provision").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("publicIPAddressConfiguration").GetProperty("ipAddressIds")[0].ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("enableAcceleratedNetworking").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("commandLine").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("containerRunOptions").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("imageName").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("password").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("registryServer").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("workingDirectory").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("autoStorageContainerName").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("storageContainerUrl").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("httpUrl").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("blobPrefix").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("filePath").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("fileMode").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("environmentSettings")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("environmentSettings")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("userIdentity").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("scope").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("elevationLevel").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("maxTaskRetryCount").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("waitForSuccess").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("applicationPackageReferences")[0].GetProperty("applicationId").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("applicationPackageReferences")[0].GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("password").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("elevationLevel").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("uid").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("gid").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("sshPrivateKey").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("windowsUserConfiguration").GetProperty("loginMode").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("metadata")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("metadata")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("accountName").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("containerName").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("accountKey").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("sasKey").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("blobfuseOptions").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("relativeMountPath").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("source").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("relativeMountPath").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("mountOptions").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("source").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("relativeMountPath").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("mountOptions").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("password").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("accountName").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("azureFileUrl").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("accountKey").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("relativeMountPath").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("mountOptions").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("targetNodeCommunicationMode").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("mode").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("automaticOSUpgradePolicy").GetProperty("disableAutomaticRollback").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("automaticOSUpgradePolicy").GetProperty("enableAutomaticOSUpgrade").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("automaticOSUpgradePolicy").GetProperty("useRollingUpgradePolicy").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("automaticOSUpgradePolicy").GetProperty("osRollingUpgradeDeferral").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("enableCrossZoneUpgrade").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("maxBatchInstancePercent").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("maxUnhealthyInstancePercent").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("maxUnhealthyUpgradedInstancePercent").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("pauseTimeBetweenBatches").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("prioritizeUnhealthyInstances").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("rollbackFailedInstancesOnPolicyBreach").ToString());
                Console.WriteLine(result.GetProperty("onAllTasksComplete").ToString());
                Console.WriteLine(result.GetProperty("onTaskFailure").ToString());
                Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("subnetId").ToString());
                Console.WriteLine(result.GetProperty("metadata")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("metadata")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("startTime").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("endTime").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("poolId").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("schedulingError").GetProperty("category").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("schedulingError").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("schedulingError").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("schedulingError").GetProperty("details")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("schedulingError").GetProperty("details")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("terminateReason").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("url").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("startTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("lastUpdateTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("userCPUTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("kernelCPUTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("wallClockTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("readIOps").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("writeIOps").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("readIOGiB").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("writeIOGiB").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("numSucceededTasks").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("numFailedTasks").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("numTaskRetries").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("waitTime").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetJobs_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            foreach (BatchJob item in client.GetJobs(timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), maxresults: 1234, filter: "<filter>", select: new string[] { "<select>" }, expand: new string[] { "<expand>" }))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetJobs_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            await foreach (BatchJob item in client.GetJobsAsync(timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), maxresults: 1234, filter: "<filter>", select: new string[] { "<select>" }, expand: new string[] { "<expand>" }))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetJobsFromSchedules_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            foreach (BinaryData item in client.GetJobsFromSchedules("<jobScheduleId>", null, null, null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("poolInfo").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetJobsFromSchedules_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            await foreach (BinaryData item in client.GetJobsFromSchedulesAsync("<jobScheduleId>", null, null, null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("poolInfo").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetJobsFromSchedules_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            foreach (BatchJob item in client.GetJobsFromSchedules("<jobScheduleId>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetJobsFromSchedules_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            await foreach (BatchJob item in client.GetJobsFromSchedulesAsync("<jobScheduleId>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetJobsFromSchedules_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            foreach (BinaryData item in client.GetJobsFromSchedules("<jobScheduleId>", 1234, DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), 1234, "<filter>", new string[] { "<select>" }, new string[] { "<expand>" }, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("usesTaskDependencies").ToString());
                Console.WriteLine(result.GetProperty("url").ToString());
                Console.WriteLine(result.GetProperty("eTag").ToString());
                Console.WriteLine(result.GetProperty("lastModified").ToString());
                Console.WriteLine(result.GetProperty("creationTime").ToString());
                Console.WriteLine(result.GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("stateTransitionTime").ToString());
                Console.WriteLine(result.GetProperty("previousState").ToString());
                Console.WriteLine(result.GetProperty("previousStateTransitionTime").ToString());
                Console.WriteLine(result.GetProperty("priority").ToString());
                Console.WriteLine(result.GetProperty("allowTaskPreemption").ToString());
                Console.WriteLine(result.GetProperty("maxParallelTasks").ToString());
                Console.WriteLine(result.GetProperty("constraints").GetProperty("maxWallClockTime").ToString());
                Console.WriteLine(result.GetProperty("constraints").GetProperty("maxTaskRetryCount").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("commandLine").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("containerRunOptions").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("imageName").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("password").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("registryServer").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("workingDirectory").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("autoStorageContainerName").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("storageContainerUrl").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("httpUrl").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("blobPrefix").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("filePath").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("fileMode").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("filePattern").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("path").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("containerUrl").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("uploadHeaders")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("uploadHeaders")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("uploadOptions").GetProperty("uploadCondition").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("environmentSettings")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("environmentSettings")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("constraints").GetProperty("maxWallClockTime").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("constraints").GetProperty("retentionTime").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("constraints").GetProperty("maxTaskRetryCount").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("requiredSlots").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("killJobOnCompletion").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("userIdentity").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("scope").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("elevationLevel").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("runExclusive").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("applicationPackageReferences")[0].GetProperty("applicationId").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("applicationPackageReferences")[0].GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("authenticationTokenSettings").GetProperty("access")[0].ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("allowLowPriorityNode").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("commandLine").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("containerRunOptions").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("imageName").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("password").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("registryServer").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("workingDirectory").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("autoStorageContainerName").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("storageContainerUrl").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("httpUrl").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("blobPrefix").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("filePath").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("fileMode").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("environmentSettings")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("environmentSettings")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("constraints").GetProperty("maxWallClockTime").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("constraints").GetProperty("retentionTime").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("constraints").GetProperty("maxTaskRetryCount").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("waitForSuccess").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("userIdentity").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("scope").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("elevationLevel").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("rerunOnNodeRebootAfterSuccess").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("commandLine").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("containerRunOptions").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("imageName").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("password").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("registryServer").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("workingDirectory").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("autoStorageContainerName").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("storageContainerUrl").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("httpUrl").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("blobPrefix").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("filePath").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("fileMode").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("environmentSettings")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("environmentSettings")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("maxWallClockTime").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("retentionTime").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("userIdentity").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("scope").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("elevationLevel").ToString());
                Console.WriteLine(result.GetProperty("commonEnvironmentSettings")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("commonEnvironmentSettings")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("poolId").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("autoPoolIdPrefix").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("poolLifetimeOption").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("keepAlive").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("vmSize").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("publisher").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("offer").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("sku").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("virtualMachineImageId").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("exactVersion").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("nodeAgentSKUId").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("windowsConfiguration").GetProperty("enableAutomaticUpdates").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("lun").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("caching").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("diskSizeGB").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("storageAccountType").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("licenseType").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerImageNames")[0].ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("password").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("registryServer").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("diskEncryptionConfiguration").GetProperty("targets")[0].ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("nodePlacementConfiguration").GetProperty("policy").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("publisher").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("typeHandlerVersion").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("autoUpgradeMinorVersion").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("enableAutomaticUpgrade").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("settings").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("protectedSettings").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("provisionAfterExtensions")[0].ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("ephemeralOSDiskSettings").GetProperty("placement").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("caching").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("managedDisk").GetProperty("storageAccountType").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("writeAcceleratorEnabled").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("securityProfile").GetProperty("encryptionAtHost").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("securityProfile").GetProperty("securityType").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("secureBootEnabled").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("vTpmEnabled").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("serviceArtifactReference").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("taskSlotsPerNode").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("taskSchedulingPolicy").GetProperty("nodeFillType").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("resizeTimeout").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("resourceTags").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("targetDedicatedNodes").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("targetLowPriorityNodes").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("enableAutoScale").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("autoScaleFormula").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("autoScaleEvaluationInterval").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("enableInterNodeCommunication").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("subnetId").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("dynamicVNetAssignmentScope").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("protocol").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("backendPort").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("frontendPortRangeStart").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("frontendPortRangeEnd").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("priority").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("access").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("sourceAddressPrefix").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("sourcePortRanges")[0].ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("publicIPAddressConfiguration").GetProperty("provision").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("publicIPAddressConfiguration").GetProperty("ipAddressIds")[0].ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("enableAcceleratedNetworking").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("commandLine").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("containerRunOptions").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("imageName").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("password").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("registryServer").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("workingDirectory").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("autoStorageContainerName").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("storageContainerUrl").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("httpUrl").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("blobPrefix").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("filePath").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("fileMode").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("environmentSettings")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("environmentSettings")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("userIdentity").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("scope").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("elevationLevel").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("maxTaskRetryCount").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("waitForSuccess").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("applicationPackageReferences")[0].GetProperty("applicationId").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("applicationPackageReferences")[0].GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("password").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("elevationLevel").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("uid").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("gid").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("sshPrivateKey").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("windowsUserConfiguration").GetProperty("loginMode").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("metadata")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("metadata")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("accountName").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("containerName").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("accountKey").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("sasKey").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("blobfuseOptions").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("relativeMountPath").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("source").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("relativeMountPath").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("mountOptions").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("source").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("relativeMountPath").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("mountOptions").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("password").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("accountName").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("azureFileUrl").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("accountKey").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("relativeMountPath").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("mountOptions").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("targetNodeCommunicationMode").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("mode").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("automaticOSUpgradePolicy").GetProperty("disableAutomaticRollback").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("automaticOSUpgradePolicy").GetProperty("enableAutomaticOSUpgrade").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("automaticOSUpgradePolicy").GetProperty("useRollingUpgradePolicy").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("automaticOSUpgradePolicy").GetProperty("osRollingUpgradeDeferral").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("enableCrossZoneUpgrade").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("maxBatchInstancePercent").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("maxUnhealthyInstancePercent").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("maxUnhealthyUpgradedInstancePercent").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("pauseTimeBetweenBatches").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("prioritizeUnhealthyInstances").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("rollbackFailedInstancesOnPolicyBreach").ToString());
                Console.WriteLine(result.GetProperty("onAllTasksComplete").ToString());
                Console.WriteLine(result.GetProperty("onTaskFailure").ToString());
                Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("subnetId").ToString());
                Console.WriteLine(result.GetProperty("metadata")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("metadata")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("startTime").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("endTime").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("poolId").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("schedulingError").GetProperty("category").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("schedulingError").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("schedulingError").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("schedulingError").GetProperty("details")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("schedulingError").GetProperty("details")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("terminateReason").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("url").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("startTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("lastUpdateTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("userCPUTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("kernelCPUTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("wallClockTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("readIOps").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("writeIOps").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("readIOGiB").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("writeIOGiB").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("numSucceededTasks").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("numFailedTasks").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("numTaskRetries").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("waitTime").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetJobsFromSchedules_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            await foreach (BinaryData item in client.GetJobsFromSchedulesAsync("<jobScheduleId>", 1234, DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), 1234, "<filter>", new string[] { "<select>" }, new string[] { "<expand>" }, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("usesTaskDependencies").ToString());
                Console.WriteLine(result.GetProperty("url").ToString());
                Console.WriteLine(result.GetProperty("eTag").ToString());
                Console.WriteLine(result.GetProperty("lastModified").ToString());
                Console.WriteLine(result.GetProperty("creationTime").ToString());
                Console.WriteLine(result.GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("stateTransitionTime").ToString());
                Console.WriteLine(result.GetProperty("previousState").ToString());
                Console.WriteLine(result.GetProperty("previousStateTransitionTime").ToString());
                Console.WriteLine(result.GetProperty("priority").ToString());
                Console.WriteLine(result.GetProperty("allowTaskPreemption").ToString());
                Console.WriteLine(result.GetProperty("maxParallelTasks").ToString());
                Console.WriteLine(result.GetProperty("constraints").GetProperty("maxWallClockTime").ToString());
                Console.WriteLine(result.GetProperty("constraints").GetProperty("maxTaskRetryCount").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("commandLine").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("containerRunOptions").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("imageName").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("password").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("registryServer").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("workingDirectory").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("autoStorageContainerName").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("storageContainerUrl").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("httpUrl").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("blobPrefix").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("filePath").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("fileMode").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("filePattern").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("path").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("containerUrl").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("uploadHeaders")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("uploadHeaders")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("uploadOptions").GetProperty("uploadCondition").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("environmentSettings")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("environmentSettings")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("constraints").GetProperty("maxWallClockTime").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("constraints").GetProperty("retentionTime").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("constraints").GetProperty("maxTaskRetryCount").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("requiredSlots").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("killJobOnCompletion").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("userIdentity").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("scope").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("elevationLevel").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("runExclusive").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("applicationPackageReferences")[0].GetProperty("applicationId").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("applicationPackageReferences")[0].GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("authenticationTokenSettings").GetProperty("access")[0].ToString());
                Console.WriteLine(result.GetProperty("jobManagerTask").GetProperty("allowLowPriorityNode").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("commandLine").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("containerRunOptions").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("imageName").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("password").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("registryServer").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("workingDirectory").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("autoStorageContainerName").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("storageContainerUrl").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("httpUrl").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("blobPrefix").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("filePath").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("fileMode").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("environmentSettings")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("environmentSettings")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("constraints").GetProperty("maxWallClockTime").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("constraints").GetProperty("retentionTime").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("constraints").GetProperty("maxTaskRetryCount").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("waitForSuccess").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("userIdentity").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("scope").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("elevationLevel").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTask").GetProperty("rerunOnNodeRebootAfterSuccess").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("commandLine").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("containerRunOptions").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("imageName").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("password").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("registryServer").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("workingDirectory").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("autoStorageContainerName").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("storageContainerUrl").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("httpUrl").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("blobPrefix").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("filePath").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("fileMode").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("environmentSettings")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("environmentSettings")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("maxWallClockTime").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("retentionTime").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("userIdentity").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("scope").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("elevationLevel").ToString());
                Console.WriteLine(result.GetProperty("commonEnvironmentSettings")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("commonEnvironmentSettings")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("poolId").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("autoPoolIdPrefix").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("poolLifetimeOption").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("keepAlive").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("vmSize").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("publisher").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("offer").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("sku").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("virtualMachineImageId").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("exactVersion").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("nodeAgentSKUId").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("windowsConfiguration").GetProperty("enableAutomaticUpdates").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("lun").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("caching").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("diskSizeGB").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("storageAccountType").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("licenseType").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerImageNames")[0].ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("password").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("registryServer").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("diskEncryptionConfiguration").GetProperty("targets")[0].ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("nodePlacementConfiguration").GetProperty("policy").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("publisher").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("typeHandlerVersion").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("autoUpgradeMinorVersion").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("enableAutomaticUpgrade").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("settings").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("protectedSettings").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("provisionAfterExtensions")[0].ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("ephemeralOSDiskSettings").GetProperty("placement").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("caching").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("managedDisk").GetProperty("storageAccountType").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("writeAcceleratorEnabled").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("securityProfile").GetProperty("encryptionAtHost").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("securityProfile").GetProperty("securityType").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("secureBootEnabled").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("vTpmEnabled").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("serviceArtifactReference").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("taskSlotsPerNode").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("taskSchedulingPolicy").GetProperty("nodeFillType").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("resizeTimeout").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("resourceTags").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("targetDedicatedNodes").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("targetLowPriorityNodes").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("enableAutoScale").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("autoScaleFormula").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("autoScaleEvaluationInterval").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("enableInterNodeCommunication").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("subnetId").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("dynamicVNetAssignmentScope").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("protocol").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("backendPort").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("frontendPortRangeStart").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("frontendPortRangeEnd").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("priority").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("access").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("sourceAddressPrefix").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("sourcePortRanges")[0].ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("publicIPAddressConfiguration").GetProperty("provision").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("publicIPAddressConfiguration").GetProperty("ipAddressIds")[0].ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("enableAcceleratedNetworking").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("commandLine").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("containerRunOptions").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("imageName").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("password").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("registryServer").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("workingDirectory").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("autoStorageContainerName").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("storageContainerUrl").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("httpUrl").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("blobPrefix").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("filePath").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("fileMode").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("environmentSettings")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("environmentSettings")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("userIdentity").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("scope").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("elevationLevel").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("maxTaskRetryCount").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("waitForSuccess").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("applicationPackageReferences")[0].GetProperty("applicationId").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("applicationPackageReferences")[0].GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("password").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("elevationLevel").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("uid").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("gid").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("sshPrivateKey").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("windowsUserConfiguration").GetProperty("loginMode").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("metadata")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("metadata")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("accountName").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("containerName").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("accountKey").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("sasKey").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("blobfuseOptions").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("relativeMountPath").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("source").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("relativeMountPath").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("mountOptions").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("source").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("relativeMountPath").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("mountOptions").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("password").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("accountName").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("azureFileUrl").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("accountKey").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("relativeMountPath").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("mountOptions").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("targetNodeCommunicationMode").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("mode").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("automaticOSUpgradePolicy").GetProperty("disableAutomaticRollback").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("automaticOSUpgradePolicy").GetProperty("enableAutomaticOSUpgrade").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("automaticOSUpgradePolicy").GetProperty("useRollingUpgradePolicy").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("automaticOSUpgradePolicy").GetProperty("osRollingUpgradeDeferral").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("enableCrossZoneUpgrade").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("maxBatchInstancePercent").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("maxUnhealthyInstancePercent").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("maxUnhealthyUpgradedInstancePercent").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("pauseTimeBetweenBatches").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("prioritizeUnhealthyInstances").ToString());
                Console.WriteLine(result.GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("rollbackFailedInstancesOnPolicyBreach").ToString());
                Console.WriteLine(result.GetProperty("onAllTasksComplete").ToString());
                Console.WriteLine(result.GetProperty("onTaskFailure").ToString());
                Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("subnetId").ToString());
                Console.WriteLine(result.GetProperty("metadata")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("metadata")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("startTime").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("endTime").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("poolId").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("schedulingError").GetProperty("category").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("schedulingError").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("schedulingError").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("schedulingError").GetProperty("details")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("schedulingError").GetProperty("details")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("terminateReason").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("url").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("startTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("lastUpdateTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("userCPUTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("kernelCPUTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("wallClockTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("readIOps").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("writeIOps").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("readIOGiB").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("writeIOGiB").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("numSucceededTasks").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("numFailedTasks").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("numTaskRetries").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("waitTime").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetJobsFromSchedules_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            foreach (BatchJob item in client.GetJobsFromSchedules("<jobScheduleId>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), maxresults: 1234, filter: "<filter>", select: new string[] { "<select>" }, expand: new string[] { "<expand>" }))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetJobsFromSchedules_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            await foreach (BatchJob item in client.GetJobsFromSchedulesAsync("<jobScheduleId>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), maxresults: 1234, filter: "<filter>", select: new string[] { "<select>" }, expand: new string[] { "<expand>" }))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetJobPreparationAndReleaseTaskStatuses_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            foreach (BinaryData item in client.GetJobPreparationAndReleaseTaskStatuses("<jobId>", null, null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetJobPreparationAndReleaseTaskStatuses_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            await foreach (BinaryData item in client.GetJobPreparationAndReleaseTaskStatusesAsync("<jobId>", null, null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetJobPreparationAndReleaseTaskStatuses_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            foreach (BatchJobPreparationAndReleaseTaskStatus item in client.GetJobPreparationAndReleaseTaskStatuses("<jobId>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetJobPreparationAndReleaseTaskStatuses_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            await foreach (BatchJobPreparationAndReleaseTaskStatus item in client.GetJobPreparationAndReleaseTaskStatusesAsync("<jobId>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetJobPreparationAndReleaseTaskStatuses_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            foreach (BinaryData item in client.GetJobPreparationAndReleaseTaskStatuses("<jobId>", 1234, DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), 1234, "<filter>", new string[] { "<select>" }, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("poolId").ToString());
                Console.WriteLine(result.GetProperty("nodeId").ToString());
                Console.WriteLine(result.GetProperty("nodeUrl").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTaskExecutionInfo").GetProperty("startTime").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTaskExecutionInfo").GetProperty("endTime").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTaskExecutionInfo").GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTaskExecutionInfo").GetProperty("taskRootDirectory").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTaskExecutionInfo").GetProperty("taskRootDirectoryUrl").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTaskExecutionInfo").GetProperty("exitCode").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTaskExecutionInfo").GetProperty("containerInfo").GetProperty("containerId").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTaskExecutionInfo").GetProperty("containerInfo").GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTaskExecutionInfo").GetProperty("containerInfo").GetProperty("error").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTaskExecutionInfo").GetProperty("failureInfo").GetProperty("category").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTaskExecutionInfo").GetProperty("failureInfo").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTaskExecutionInfo").GetProperty("failureInfo").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTaskExecutionInfo").GetProperty("failureInfo").GetProperty("details")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTaskExecutionInfo").GetProperty("failureInfo").GetProperty("details")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTaskExecutionInfo").GetProperty("retryCount").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTaskExecutionInfo").GetProperty("lastRetryTime").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTaskExecutionInfo").GetProperty("result").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTaskExecutionInfo").GetProperty("startTime").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTaskExecutionInfo").GetProperty("endTime").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTaskExecutionInfo").GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTaskExecutionInfo").GetProperty("taskRootDirectory").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTaskExecutionInfo").GetProperty("taskRootDirectoryUrl").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTaskExecutionInfo").GetProperty("exitCode").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTaskExecutionInfo").GetProperty("containerInfo").GetProperty("containerId").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTaskExecutionInfo").GetProperty("containerInfo").GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTaskExecutionInfo").GetProperty("containerInfo").GetProperty("error").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTaskExecutionInfo").GetProperty("failureInfo").GetProperty("category").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTaskExecutionInfo").GetProperty("failureInfo").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTaskExecutionInfo").GetProperty("failureInfo").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTaskExecutionInfo").GetProperty("failureInfo").GetProperty("details")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTaskExecutionInfo").GetProperty("failureInfo").GetProperty("details")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTaskExecutionInfo").GetProperty("result").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetJobPreparationAndReleaseTaskStatuses_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            await foreach (BinaryData item in client.GetJobPreparationAndReleaseTaskStatusesAsync("<jobId>", 1234, DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), 1234, "<filter>", new string[] { "<select>" }, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("poolId").ToString());
                Console.WriteLine(result.GetProperty("nodeId").ToString());
                Console.WriteLine(result.GetProperty("nodeUrl").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTaskExecutionInfo").GetProperty("startTime").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTaskExecutionInfo").GetProperty("endTime").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTaskExecutionInfo").GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTaskExecutionInfo").GetProperty("taskRootDirectory").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTaskExecutionInfo").GetProperty("taskRootDirectoryUrl").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTaskExecutionInfo").GetProperty("exitCode").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTaskExecutionInfo").GetProperty("containerInfo").GetProperty("containerId").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTaskExecutionInfo").GetProperty("containerInfo").GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTaskExecutionInfo").GetProperty("containerInfo").GetProperty("error").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTaskExecutionInfo").GetProperty("failureInfo").GetProperty("category").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTaskExecutionInfo").GetProperty("failureInfo").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTaskExecutionInfo").GetProperty("failureInfo").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTaskExecutionInfo").GetProperty("failureInfo").GetProperty("details")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTaskExecutionInfo").GetProperty("failureInfo").GetProperty("details")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTaskExecutionInfo").GetProperty("retryCount").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTaskExecutionInfo").GetProperty("lastRetryTime").ToString());
                Console.WriteLine(result.GetProperty("jobPreparationTaskExecutionInfo").GetProperty("result").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTaskExecutionInfo").GetProperty("startTime").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTaskExecutionInfo").GetProperty("endTime").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTaskExecutionInfo").GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTaskExecutionInfo").GetProperty("taskRootDirectory").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTaskExecutionInfo").GetProperty("taskRootDirectoryUrl").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTaskExecutionInfo").GetProperty("exitCode").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTaskExecutionInfo").GetProperty("containerInfo").GetProperty("containerId").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTaskExecutionInfo").GetProperty("containerInfo").GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTaskExecutionInfo").GetProperty("containerInfo").GetProperty("error").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTaskExecutionInfo").GetProperty("failureInfo").GetProperty("category").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTaskExecutionInfo").GetProperty("failureInfo").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTaskExecutionInfo").GetProperty("failureInfo").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTaskExecutionInfo").GetProperty("failureInfo").GetProperty("details")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTaskExecutionInfo").GetProperty("failureInfo").GetProperty("details")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("jobReleaseTaskExecutionInfo").GetProperty("result").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetJobPreparationAndReleaseTaskStatuses_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            foreach (BatchJobPreparationAndReleaseTaskStatus item in client.GetJobPreparationAndReleaseTaskStatuses("<jobId>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), maxresults: 1234, filter: "<filter>", select: new string[] { "<select>" }))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetJobPreparationAndReleaseTaskStatuses_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            await foreach (BatchJobPreparationAndReleaseTaskStatus item in client.GetJobPreparationAndReleaseTaskStatusesAsync("<jobId>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), maxresults: 1234, filter: "<filter>", select: new string[] { "<select>" }))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetJobSchedules_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            foreach (BinaryData item in client.GetJobSchedules(null, null, null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetJobSchedules_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            await foreach (BinaryData item in client.GetJobSchedulesAsync(null, null, null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetJobSchedules_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            foreach (BatchJobSchedule item in client.GetJobSchedules())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetJobSchedules_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            await foreach (BatchJobSchedule item in client.GetJobSchedulesAsync())
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetJobSchedules_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            foreach (BinaryData item in client.GetJobSchedules(1234, DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), 1234, "<filter>", new string[] { "<select>" }, new string[] { "<expand>" }, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("url").ToString());
                Console.WriteLine(result.GetProperty("eTag").ToString());
                Console.WriteLine(result.GetProperty("lastModified").ToString());
                Console.WriteLine(result.GetProperty("creationTime").ToString());
                Console.WriteLine(result.GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("stateTransitionTime").ToString());
                Console.WriteLine(result.GetProperty("previousState").ToString());
                Console.WriteLine(result.GetProperty("previousStateTransitionTime").ToString());
                Console.WriteLine(result.GetProperty("schedule").GetProperty("doNotRunUntil").ToString());
                Console.WriteLine(result.GetProperty("schedule").GetProperty("doNotRunAfter").ToString());
                Console.WriteLine(result.GetProperty("schedule").GetProperty("startWindow").ToString());
                Console.WriteLine(result.GetProperty("schedule").GetProperty("recurrenceInterval").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("priority").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("allowTaskPreemption").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("maxParallelTasks").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("usesTaskDependencies").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("onAllTasksComplete").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("onTaskFailure").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("networkConfiguration").GetProperty("subnetId").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("constraints").GetProperty("maxWallClockTime").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("constraints").GetProperty("maxTaskRetryCount").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("commandLine").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("containerRunOptions").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("imageName").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("password").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("registryServer").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("workingDirectory").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("autoStorageContainerName").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("storageContainerUrl").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("httpUrl").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("blobPrefix").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("filePath").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("fileMode").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("filePattern").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("path").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("containerUrl").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("uploadHeaders")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("uploadHeaders")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("uploadOptions").GetProperty("uploadCondition").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("environmentSettings")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("environmentSettings")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("constraints").GetProperty("maxWallClockTime").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("constraints").GetProperty("retentionTime").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("constraints").GetProperty("maxTaskRetryCount").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("requiredSlots").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("killJobOnCompletion").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("userIdentity").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("scope").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("elevationLevel").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("runExclusive").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("applicationPackageReferences")[0].GetProperty("applicationId").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("applicationPackageReferences")[0].GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("authenticationTokenSettings").GetProperty("access")[0].ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("allowLowPriorityNode").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("commandLine").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("containerRunOptions").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("imageName").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("password").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("registryServer").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("workingDirectory").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("autoStorageContainerName").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("storageContainerUrl").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("httpUrl").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("blobPrefix").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("filePath").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("fileMode").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("environmentSettings")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("environmentSettings")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("constraints").GetProperty("maxWallClockTime").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("constraints").GetProperty("retentionTime").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("constraints").GetProperty("maxTaskRetryCount").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("waitForSuccess").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("userIdentity").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("scope").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("elevationLevel").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("rerunOnNodeRebootAfterSuccess").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("commandLine").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("containerRunOptions").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("imageName").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("password").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("registryServer").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("workingDirectory").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("autoStorageContainerName").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("storageContainerUrl").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("httpUrl").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("blobPrefix").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("filePath").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("fileMode").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("environmentSettings")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("environmentSettings")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("maxWallClockTime").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("retentionTime").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("userIdentity").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("scope").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("elevationLevel").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("commonEnvironmentSettings")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("commonEnvironmentSettings")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("poolId").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("autoPoolIdPrefix").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("poolLifetimeOption").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("keepAlive").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("vmSize").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("publisher").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("offer").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("sku").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("virtualMachineImageId").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("exactVersion").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("nodeAgentSKUId").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("windowsConfiguration").GetProperty("enableAutomaticUpdates").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("lun").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("caching").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("diskSizeGB").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("storageAccountType").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("licenseType").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerImageNames")[0].ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("password").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("registryServer").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("diskEncryptionConfiguration").GetProperty("targets")[0].ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("nodePlacementConfiguration").GetProperty("policy").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("publisher").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("typeHandlerVersion").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("autoUpgradeMinorVersion").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("enableAutomaticUpgrade").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("settings").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("protectedSettings").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("provisionAfterExtensions")[0].ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("ephemeralOSDiskSettings").GetProperty("placement").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("caching").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("managedDisk").GetProperty("storageAccountType").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("writeAcceleratorEnabled").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("securityProfile").GetProperty("encryptionAtHost").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("securityProfile").GetProperty("securityType").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("secureBootEnabled").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("vTpmEnabled").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("serviceArtifactReference").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("taskSlotsPerNode").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("taskSchedulingPolicy").GetProperty("nodeFillType").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("resizeTimeout").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("resourceTags").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("targetDedicatedNodes").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("targetLowPriorityNodes").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("enableAutoScale").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("autoScaleFormula").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("autoScaleEvaluationInterval").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("enableInterNodeCommunication").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("subnetId").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("dynamicVNetAssignmentScope").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("protocol").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("backendPort").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("frontendPortRangeStart").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("frontendPortRangeEnd").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("priority").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("access").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("sourceAddressPrefix").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("sourcePortRanges")[0].ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("publicIPAddressConfiguration").GetProperty("provision").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("publicIPAddressConfiguration").GetProperty("ipAddressIds")[0].ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("enableAcceleratedNetworking").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("commandLine").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("containerRunOptions").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("imageName").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("password").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("registryServer").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("workingDirectory").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("autoStorageContainerName").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("storageContainerUrl").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("httpUrl").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("blobPrefix").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("filePath").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("fileMode").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("environmentSettings")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("environmentSettings")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("userIdentity").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("scope").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("elevationLevel").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("maxTaskRetryCount").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("waitForSuccess").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("applicationPackageReferences")[0].GetProperty("applicationId").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("applicationPackageReferences")[0].GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("password").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("elevationLevel").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("uid").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("gid").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("sshPrivateKey").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("windowsUserConfiguration").GetProperty("loginMode").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("metadata")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("metadata")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("accountName").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("containerName").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("accountKey").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("sasKey").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("blobfuseOptions").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("relativeMountPath").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("source").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("relativeMountPath").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("mountOptions").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("source").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("relativeMountPath").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("mountOptions").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("password").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("accountName").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("azureFileUrl").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("accountKey").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("relativeMountPath").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("mountOptions").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("targetNodeCommunicationMode").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("mode").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("automaticOSUpgradePolicy").GetProperty("disableAutomaticRollback").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("automaticOSUpgradePolicy").GetProperty("enableAutomaticOSUpgrade").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("automaticOSUpgradePolicy").GetProperty("useRollingUpgradePolicy").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("automaticOSUpgradePolicy").GetProperty("osRollingUpgradeDeferral").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("enableCrossZoneUpgrade").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("maxBatchInstancePercent").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("maxUnhealthyInstancePercent").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("maxUnhealthyUpgradedInstancePercent").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("pauseTimeBetweenBatches").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("prioritizeUnhealthyInstances").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("rollbackFailedInstancesOnPolicyBreach").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("metadata")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("metadata")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("nextRunTime").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("recentJob").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("recentJob").GetProperty("url").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("endTime").ToString());
                Console.WriteLine(result.GetProperty("metadata")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("metadata")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("url").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("startTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("lastUpdateTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("userCPUTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("kernelCPUTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("wallClockTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("readIOps").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("writeIOps").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("readIOGiB").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("writeIOGiB").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("numSucceededTasks").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("numFailedTasks").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("numTaskRetries").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("waitTime").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetJobSchedules_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            await foreach (BinaryData item in client.GetJobSchedulesAsync(1234, DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), 1234, "<filter>", new string[] { "<select>" }, new string[] { "<expand>" }, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("url").ToString());
                Console.WriteLine(result.GetProperty("eTag").ToString());
                Console.WriteLine(result.GetProperty("lastModified").ToString());
                Console.WriteLine(result.GetProperty("creationTime").ToString());
                Console.WriteLine(result.GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("stateTransitionTime").ToString());
                Console.WriteLine(result.GetProperty("previousState").ToString());
                Console.WriteLine(result.GetProperty("previousStateTransitionTime").ToString());
                Console.WriteLine(result.GetProperty("schedule").GetProperty("doNotRunUntil").ToString());
                Console.WriteLine(result.GetProperty("schedule").GetProperty("doNotRunAfter").ToString());
                Console.WriteLine(result.GetProperty("schedule").GetProperty("startWindow").ToString());
                Console.WriteLine(result.GetProperty("schedule").GetProperty("recurrenceInterval").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("priority").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("allowTaskPreemption").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("maxParallelTasks").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("usesTaskDependencies").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("onAllTasksComplete").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("onTaskFailure").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("networkConfiguration").GetProperty("subnetId").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("constraints").GetProperty("maxWallClockTime").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("constraints").GetProperty("maxTaskRetryCount").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("commandLine").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("containerRunOptions").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("imageName").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("password").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("registryServer").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("containerSettings").GetProperty("workingDirectory").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("autoStorageContainerName").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("storageContainerUrl").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("httpUrl").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("blobPrefix").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("filePath").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("fileMode").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("resourceFiles")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("filePattern").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("path").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("containerUrl").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("uploadHeaders")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("uploadHeaders")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("outputFiles")[0].GetProperty("uploadOptions").GetProperty("uploadCondition").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("environmentSettings")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("environmentSettings")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("constraints").GetProperty("maxWallClockTime").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("constraints").GetProperty("retentionTime").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("constraints").GetProperty("maxTaskRetryCount").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("requiredSlots").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("killJobOnCompletion").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("userIdentity").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("scope").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("elevationLevel").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("runExclusive").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("applicationPackageReferences")[0].GetProperty("applicationId").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("applicationPackageReferences")[0].GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("authenticationTokenSettings").GetProperty("access")[0].ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobManagerTask").GetProperty("allowLowPriorityNode").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("commandLine").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("containerRunOptions").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("imageName").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("password").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("registryServer").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("containerSettings").GetProperty("workingDirectory").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("autoStorageContainerName").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("storageContainerUrl").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("httpUrl").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("blobPrefix").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("filePath").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("fileMode").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("resourceFiles")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("environmentSettings")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("environmentSettings")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("constraints").GetProperty("maxWallClockTime").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("constraints").GetProperty("retentionTime").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("constraints").GetProperty("maxTaskRetryCount").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("waitForSuccess").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("userIdentity").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("scope").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("elevationLevel").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobPreparationTask").GetProperty("rerunOnNodeRebootAfterSuccess").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("commandLine").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("containerRunOptions").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("imageName").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("password").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("registryServer").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("containerSettings").GetProperty("workingDirectory").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("autoStorageContainerName").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("storageContainerUrl").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("httpUrl").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("blobPrefix").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("filePath").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("fileMode").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("resourceFiles")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("environmentSettings")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("environmentSettings")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("maxWallClockTime").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("retentionTime").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("userIdentity").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("scope").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("jobReleaseTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("elevationLevel").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("commonEnvironmentSettings")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("commonEnvironmentSettings")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("poolId").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("autoPoolIdPrefix").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("poolLifetimeOption").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("keepAlive").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("vmSize").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("publisher").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("offer").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("sku").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("virtualMachineImageId").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("exactVersion").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("nodeAgentSKUId").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("windowsConfiguration").GetProperty("enableAutomaticUpdates").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("lun").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("caching").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("diskSizeGB").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("storageAccountType").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("licenseType").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerImageNames")[0].ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("password").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("registryServer").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("diskEncryptionConfiguration").GetProperty("targets")[0].ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("nodePlacementConfiguration").GetProperty("policy").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("publisher").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("typeHandlerVersion").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("autoUpgradeMinorVersion").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("enableAutomaticUpgrade").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("settings").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("protectedSettings").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("provisionAfterExtensions")[0].ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("ephemeralOSDiskSettings").GetProperty("placement").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("caching").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("diskSizeGB").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("managedDisk").GetProperty("storageAccountType").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("writeAcceleratorEnabled").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("securityProfile").GetProperty("encryptionAtHost").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("securityProfile").GetProperty("securityType").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("secureBootEnabled").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("securityProfile").GetProperty("uefiSettings").GetProperty("vTpmEnabled").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("virtualMachineConfiguration").GetProperty("serviceArtifactReference").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("taskSlotsPerNode").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("taskSchedulingPolicy").GetProperty("nodeFillType").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("resizeTimeout").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("resourceTags").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("targetDedicatedNodes").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("targetLowPriorityNodes").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("enableAutoScale").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("autoScaleFormula").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("autoScaleEvaluationInterval").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("enableInterNodeCommunication").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("subnetId").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("dynamicVNetAssignmentScope").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("protocol").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("backendPort").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("frontendPortRangeStart").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("frontendPortRangeEnd").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("priority").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("access").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("sourceAddressPrefix").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("sourcePortRanges")[0].ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("publicIPAddressConfiguration").GetProperty("provision").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("publicIPAddressConfiguration").GetProperty("ipAddressIds")[0].ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("networkConfiguration").GetProperty("enableAcceleratedNetworking").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("commandLine").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("containerRunOptions").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("imageName").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("password").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("registryServer").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("containerSettings").GetProperty("workingDirectory").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("autoStorageContainerName").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("storageContainerUrl").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("httpUrl").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("blobPrefix").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("filePath").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("fileMode").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("environmentSettings")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("environmentSettings")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("userIdentity").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("scope").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("elevationLevel").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("maxTaskRetryCount").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("startTask").GetProperty("waitForSuccess").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("applicationPackageReferences")[0].GetProperty("applicationId").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("applicationPackageReferences")[0].GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("password").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("elevationLevel").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("uid").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("gid").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("sshPrivateKey").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("userAccounts")[0].GetProperty("windowsUserConfiguration").GetProperty("loginMode").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("metadata")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("metadata")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("accountName").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("containerName").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("accountKey").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("sasKey").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("blobfuseOptions").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("relativeMountPath").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("source").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("relativeMountPath").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("mountOptions").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("source").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("relativeMountPath").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("mountOptions").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("password").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("accountName").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("azureFileUrl").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("accountKey").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("relativeMountPath").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("mountOptions").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("targetNodeCommunicationMode").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("mode").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("automaticOSUpgradePolicy").GetProperty("disableAutomaticRollback").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("automaticOSUpgradePolicy").GetProperty("enableAutomaticOSUpgrade").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("automaticOSUpgradePolicy").GetProperty("useRollingUpgradePolicy").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("automaticOSUpgradePolicy").GetProperty("osRollingUpgradeDeferral").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("enableCrossZoneUpgrade").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("maxBatchInstancePercent").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("maxUnhealthyInstancePercent").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("maxUnhealthyUpgradedInstancePercent").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("pauseTimeBetweenBatches").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("prioritizeUnhealthyInstances").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("poolInfo").GetProperty("autoPoolSpecification").GetProperty("pool").GetProperty("upgradePolicy").GetProperty("rollingUpgradePolicy").GetProperty("rollbackFailedInstancesOnPolicyBreach").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("metadata")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("jobSpecification").GetProperty("metadata")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("nextRunTime").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("recentJob").GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("recentJob").GetProperty("url").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("endTime").ToString());
                Console.WriteLine(result.GetProperty("metadata")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("metadata")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("url").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("startTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("lastUpdateTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("userCPUTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("kernelCPUTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("wallClockTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("readIOps").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("writeIOps").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("readIOGiB").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("writeIOGiB").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("numSucceededTasks").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("numFailedTasks").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("numTaskRetries").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("waitTime").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetJobSchedules_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            foreach (BatchJobSchedule item in client.GetJobSchedules(timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), maxresults: 1234, filter: "<filter>", select: new string[] { "<select>" }, expand: new string[] { "<expand>" }))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetJobSchedules_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            await foreach (BatchJobSchedule item in client.GetJobSchedulesAsync(timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), maxresults: 1234, filter: "<filter>", select: new string[] { "<select>" }, expand: new string[] { "<expand>" }))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetTasks_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            foreach (BinaryData item in client.GetTasks("<jobId>", null, null, null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetTasks_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            await foreach (BinaryData item in client.GetTasksAsync("<jobId>", null, null, null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetTasks_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            foreach (BatchTask item in client.GetTasks("<jobId>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetTasks_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            await foreach (BatchTask item in client.GetTasksAsync("<jobId>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetTasks_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            foreach (BinaryData item in client.GetTasks("<jobId>", 1234, DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), 1234, "<filter>", new string[] { "<select>" }, new string[] { "<expand>" }, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("url").ToString());
                Console.WriteLine(result.GetProperty("eTag").ToString());
                Console.WriteLine(result.GetProperty("lastModified").ToString());
                Console.WriteLine(result.GetProperty("creationTime").ToString());
                Console.WriteLine(result.GetProperty("exitConditions").GetProperty("exitCodes")[0].GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("exitConditions").GetProperty("exitCodes")[0].GetProperty("exitOptions").GetProperty("jobAction").ToString());
                Console.WriteLine(result.GetProperty("exitConditions").GetProperty("exitCodes")[0].GetProperty("exitOptions").GetProperty("dependencyAction").ToString());
                Console.WriteLine(result.GetProperty("exitConditions").GetProperty("exitCodeRanges")[0].GetProperty("start").ToString());
                Console.WriteLine(result.GetProperty("exitConditions").GetProperty("exitCodeRanges")[0].GetProperty("end").ToString());
                Console.WriteLine(result.GetProperty("exitConditions").GetProperty("exitCodeRanges")[0].GetProperty("exitOptions").GetProperty("jobAction").ToString());
                Console.WriteLine(result.GetProperty("exitConditions").GetProperty("exitCodeRanges")[0].GetProperty("exitOptions").GetProperty("dependencyAction").ToString());
                Console.WriteLine(result.GetProperty("exitConditions").GetProperty("preProcessingError").GetProperty("jobAction").ToString());
                Console.WriteLine(result.GetProperty("exitConditions").GetProperty("preProcessingError").GetProperty("dependencyAction").ToString());
                Console.WriteLine(result.GetProperty("exitConditions").GetProperty("fileUploadError").GetProperty("jobAction").ToString());
                Console.WriteLine(result.GetProperty("exitConditions").GetProperty("fileUploadError").GetProperty("dependencyAction").ToString());
                Console.WriteLine(result.GetProperty("exitConditions").GetProperty("default").GetProperty("jobAction").ToString());
                Console.WriteLine(result.GetProperty("exitConditions").GetProperty("default").GetProperty("dependencyAction").ToString());
                Console.WriteLine(result.GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("stateTransitionTime").ToString());
                Console.WriteLine(result.GetProperty("previousState").ToString());
                Console.WriteLine(result.GetProperty("previousStateTransitionTime").ToString());
                Console.WriteLine(result.GetProperty("commandLine").ToString());
                Console.WriteLine(result.GetProperty("containerSettings").GetProperty("containerRunOptions").ToString());
                Console.WriteLine(result.GetProperty("containerSettings").GetProperty("imageName").ToString());
                Console.WriteLine(result.GetProperty("containerSettings").GetProperty("registry").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("containerSettings").GetProperty("registry").GetProperty("password").ToString());
                Console.WriteLine(result.GetProperty("containerSettings").GetProperty("registry").GetProperty("registryServer").ToString());
                Console.WriteLine(result.GetProperty("containerSettings").GetProperty("registry").GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("containerSettings").GetProperty("workingDirectory").ToString());
                Console.WriteLine(result.GetProperty("resourceFiles")[0].GetProperty("autoStorageContainerName").ToString());
                Console.WriteLine(result.GetProperty("resourceFiles")[0].GetProperty("storageContainerUrl").ToString());
                Console.WriteLine(result.GetProperty("resourceFiles")[0].GetProperty("httpUrl").ToString());
                Console.WriteLine(result.GetProperty("resourceFiles")[0].GetProperty("blobPrefix").ToString());
                Console.WriteLine(result.GetProperty("resourceFiles")[0].GetProperty("filePath").ToString());
                Console.WriteLine(result.GetProperty("resourceFiles")[0].GetProperty("fileMode").ToString());
                Console.WriteLine(result.GetProperty("resourceFiles")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("outputFiles")[0].GetProperty("filePattern").ToString());
                Console.WriteLine(result.GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("path").ToString());
                Console.WriteLine(result.GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("containerUrl").ToString());
                Console.WriteLine(result.GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("uploadHeaders")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("uploadHeaders")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("outputFiles")[0].GetProperty("uploadOptions").GetProperty("uploadCondition").ToString());
                Console.WriteLine(result.GetProperty("environmentSettings")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("environmentSettings")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("affinityInfo").GetProperty("affinityId").ToString());
                Console.WriteLine(result.GetProperty("constraints").GetProperty("maxWallClockTime").ToString());
                Console.WriteLine(result.GetProperty("constraints").GetProperty("retentionTime").ToString());
                Console.WriteLine(result.GetProperty("constraints").GetProperty("maxTaskRetryCount").ToString());
                Console.WriteLine(result.GetProperty("requiredSlots").ToString());
                Console.WriteLine(result.GetProperty("userIdentity").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("userIdentity").GetProperty("autoUser").GetProperty("scope").ToString());
                Console.WriteLine(result.GetProperty("userIdentity").GetProperty("autoUser").GetProperty("elevationLevel").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("startTime").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("endTime").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("exitCode").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("containerInfo").GetProperty("containerId").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("containerInfo").GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("containerInfo").GetProperty("error").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("failureInfo").GetProperty("category").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("failureInfo").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("failureInfo").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("failureInfo").GetProperty("details")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("failureInfo").GetProperty("details")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("retryCount").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("lastRetryTime").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("requeueCount").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("lastRequeueTime").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("result").ToString());
                Console.WriteLine(result.GetProperty("nodeInfo").GetProperty("affinityId").ToString());
                Console.WriteLine(result.GetProperty("nodeInfo").GetProperty("nodeUrl").ToString());
                Console.WriteLine(result.GetProperty("nodeInfo").GetProperty("poolId").ToString());
                Console.WriteLine(result.GetProperty("nodeInfo").GetProperty("nodeId").ToString());
                Console.WriteLine(result.GetProperty("nodeInfo").GetProperty("taskRootDirectory").ToString());
                Console.WriteLine(result.GetProperty("nodeInfo").GetProperty("taskRootDirectoryUrl").ToString());
                Console.WriteLine(result.GetProperty("multiInstanceSettings").GetProperty("numberOfInstances").ToString());
                Console.WriteLine(result.GetProperty("multiInstanceSettings").GetProperty("coordinationCommandLine").ToString());
                Console.WriteLine(result.GetProperty("multiInstanceSettings").GetProperty("commonResourceFiles")[0].GetProperty("autoStorageContainerName").ToString());
                Console.WriteLine(result.GetProperty("multiInstanceSettings").GetProperty("commonResourceFiles")[0].GetProperty("storageContainerUrl").ToString());
                Console.WriteLine(result.GetProperty("multiInstanceSettings").GetProperty("commonResourceFiles")[0].GetProperty("httpUrl").ToString());
                Console.WriteLine(result.GetProperty("multiInstanceSettings").GetProperty("commonResourceFiles")[0].GetProperty("blobPrefix").ToString());
                Console.WriteLine(result.GetProperty("multiInstanceSettings").GetProperty("commonResourceFiles")[0].GetProperty("filePath").ToString());
                Console.WriteLine(result.GetProperty("multiInstanceSettings").GetProperty("commonResourceFiles")[0].GetProperty("fileMode").ToString());
                Console.WriteLine(result.GetProperty("multiInstanceSettings").GetProperty("commonResourceFiles")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("url").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("startTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("lastUpdateTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("userCPUTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("kernelCPUTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("wallClockTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("readIOps").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("writeIOps").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("readIOGiB").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("writeIOGiB").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("waitTime").ToString());
                Console.WriteLine(result.GetProperty("dependsOn").GetProperty("taskIds")[0].ToString());
                Console.WriteLine(result.GetProperty("dependsOn").GetProperty("taskIdRanges")[0].GetProperty("start").ToString());
                Console.WriteLine(result.GetProperty("dependsOn").GetProperty("taskIdRanges")[0].GetProperty("end").ToString());
                Console.WriteLine(result.GetProperty("applicationPackageReferences")[0].GetProperty("applicationId").ToString());
                Console.WriteLine(result.GetProperty("applicationPackageReferences")[0].GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("authenticationTokenSettings").GetProperty("access")[0].ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetTasks_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            await foreach (BinaryData item in client.GetTasksAsync("<jobId>", 1234, DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), 1234, "<filter>", new string[] { "<select>" }, new string[] { "<expand>" }, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("url").ToString());
                Console.WriteLine(result.GetProperty("eTag").ToString());
                Console.WriteLine(result.GetProperty("lastModified").ToString());
                Console.WriteLine(result.GetProperty("creationTime").ToString());
                Console.WriteLine(result.GetProperty("exitConditions").GetProperty("exitCodes")[0].GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("exitConditions").GetProperty("exitCodes")[0].GetProperty("exitOptions").GetProperty("jobAction").ToString());
                Console.WriteLine(result.GetProperty("exitConditions").GetProperty("exitCodes")[0].GetProperty("exitOptions").GetProperty("dependencyAction").ToString());
                Console.WriteLine(result.GetProperty("exitConditions").GetProperty("exitCodeRanges")[0].GetProperty("start").ToString());
                Console.WriteLine(result.GetProperty("exitConditions").GetProperty("exitCodeRanges")[0].GetProperty("end").ToString());
                Console.WriteLine(result.GetProperty("exitConditions").GetProperty("exitCodeRanges")[0].GetProperty("exitOptions").GetProperty("jobAction").ToString());
                Console.WriteLine(result.GetProperty("exitConditions").GetProperty("exitCodeRanges")[0].GetProperty("exitOptions").GetProperty("dependencyAction").ToString());
                Console.WriteLine(result.GetProperty("exitConditions").GetProperty("preProcessingError").GetProperty("jobAction").ToString());
                Console.WriteLine(result.GetProperty("exitConditions").GetProperty("preProcessingError").GetProperty("dependencyAction").ToString());
                Console.WriteLine(result.GetProperty("exitConditions").GetProperty("fileUploadError").GetProperty("jobAction").ToString());
                Console.WriteLine(result.GetProperty("exitConditions").GetProperty("fileUploadError").GetProperty("dependencyAction").ToString());
                Console.WriteLine(result.GetProperty("exitConditions").GetProperty("default").GetProperty("jobAction").ToString());
                Console.WriteLine(result.GetProperty("exitConditions").GetProperty("default").GetProperty("dependencyAction").ToString());
                Console.WriteLine(result.GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("stateTransitionTime").ToString());
                Console.WriteLine(result.GetProperty("previousState").ToString());
                Console.WriteLine(result.GetProperty("previousStateTransitionTime").ToString());
                Console.WriteLine(result.GetProperty("commandLine").ToString());
                Console.WriteLine(result.GetProperty("containerSettings").GetProperty("containerRunOptions").ToString());
                Console.WriteLine(result.GetProperty("containerSettings").GetProperty("imageName").ToString());
                Console.WriteLine(result.GetProperty("containerSettings").GetProperty("registry").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("containerSettings").GetProperty("registry").GetProperty("password").ToString());
                Console.WriteLine(result.GetProperty("containerSettings").GetProperty("registry").GetProperty("registryServer").ToString());
                Console.WriteLine(result.GetProperty("containerSettings").GetProperty("registry").GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("containerSettings").GetProperty("workingDirectory").ToString());
                Console.WriteLine(result.GetProperty("resourceFiles")[0].GetProperty("autoStorageContainerName").ToString());
                Console.WriteLine(result.GetProperty("resourceFiles")[0].GetProperty("storageContainerUrl").ToString());
                Console.WriteLine(result.GetProperty("resourceFiles")[0].GetProperty("httpUrl").ToString());
                Console.WriteLine(result.GetProperty("resourceFiles")[0].GetProperty("blobPrefix").ToString());
                Console.WriteLine(result.GetProperty("resourceFiles")[0].GetProperty("filePath").ToString());
                Console.WriteLine(result.GetProperty("resourceFiles")[0].GetProperty("fileMode").ToString());
                Console.WriteLine(result.GetProperty("resourceFiles")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("outputFiles")[0].GetProperty("filePattern").ToString());
                Console.WriteLine(result.GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("path").ToString());
                Console.WriteLine(result.GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("containerUrl").ToString());
                Console.WriteLine(result.GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("uploadHeaders")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("outputFiles")[0].GetProperty("destination").GetProperty("container").GetProperty("uploadHeaders")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("outputFiles")[0].GetProperty("uploadOptions").GetProperty("uploadCondition").ToString());
                Console.WriteLine(result.GetProperty("environmentSettings")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("environmentSettings")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("affinityInfo").GetProperty("affinityId").ToString());
                Console.WriteLine(result.GetProperty("constraints").GetProperty("maxWallClockTime").ToString());
                Console.WriteLine(result.GetProperty("constraints").GetProperty("retentionTime").ToString());
                Console.WriteLine(result.GetProperty("constraints").GetProperty("maxTaskRetryCount").ToString());
                Console.WriteLine(result.GetProperty("requiredSlots").ToString());
                Console.WriteLine(result.GetProperty("userIdentity").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("userIdentity").GetProperty("autoUser").GetProperty("scope").ToString());
                Console.WriteLine(result.GetProperty("userIdentity").GetProperty("autoUser").GetProperty("elevationLevel").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("startTime").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("endTime").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("exitCode").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("containerInfo").GetProperty("containerId").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("containerInfo").GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("containerInfo").GetProperty("error").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("failureInfo").GetProperty("category").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("failureInfo").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("failureInfo").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("failureInfo").GetProperty("details")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("failureInfo").GetProperty("details")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("retryCount").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("lastRetryTime").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("requeueCount").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("lastRequeueTime").ToString());
                Console.WriteLine(result.GetProperty("executionInfo").GetProperty("result").ToString());
                Console.WriteLine(result.GetProperty("nodeInfo").GetProperty("affinityId").ToString());
                Console.WriteLine(result.GetProperty("nodeInfo").GetProperty("nodeUrl").ToString());
                Console.WriteLine(result.GetProperty("nodeInfo").GetProperty("poolId").ToString());
                Console.WriteLine(result.GetProperty("nodeInfo").GetProperty("nodeId").ToString());
                Console.WriteLine(result.GetProperty("nodeInfo").GetProperty("taskRootDirectory").ToString());
                Console.WriteLine(result.GetProperty("nodeInfo").GetProperty("taskRootDirectoryUrl").ToString());
                Console.WriteLine(result.GetProperty("multiInstanceSettings").GetProperty("numberOfInstances").ToString());
                Console.WriteLine(result.GetProperty("multiInstanceSettings").GetProperty("coordinationCommandLine").ToString());
                Console.WriteLine(result.GetProperty("multiInstanceSettings").GetProperty("commonResourceFiles")[0].GetProperty("autoStorageContainerName").ToString());
                Console.WriteLine(result.GetProperty("multiInstanceSettings").GetProperty("commonResourceFiles")[0].GetProperty("storageContainerUrl").ToString());
                Console.WriteLine(result.GetProperty("multiInstanceSettings").GetProperty("commonResourceFiles")[0].GetProperty("httpUrl").ToString());
                Console.WriteLine(result.GetProperty("multiInstanceSettings").GetProperty("commonResourceFiles")[0].GetProperty("blobPrefix").ToString());
                Console.WriteLine(result.GetProperty("multiInstanceSettings").GetProperty("commonResourceFiles")[0].GetProperty("filePath").ToString());
                Console.WriteLine(result.GetProperty("multiInstanceSettings").GetProperty("commonResourceFiles")[0].GetProperty("fileMode").ToString());
                Console.WriteLine(result.GetProperty("multiInstanceSettings").GetProperty("commonResourceFiles")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("url").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("startTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("lastUpdateTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("userCPUTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("kernelCPUTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("wallClockTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("readIOps").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("writeIOps").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("readIOGiB").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("writeIOGiB").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("waitTime").ToString());
                Console.WriteLine(result.GetProperty("dependsOn").GetProperty("taskIds")[0].ToString());
                Console.WriteLine(result.GetProperty("dependsOn").GetProperty("taskIdRanges")[0].GetProperty("start").ToString());
                Console.WriteLine(result.GetProperty("dependsOn").GetProperty("taskIdRanges")[0].GetProperty("end").ToString());
                Console.WriteLine(result.GetProperty("applicationPackageReferences")[0].GetProperty("applicationId").ToString());
                Console.WriteLine(result.GetProperty("applicationPackageReferences")[0].GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("authenticationTokenSettings").GetProperty("access")[0].ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetTasks_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            foreach (BatchTask item in client.GetTasks("<jobId>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), maxresults: 1234, filter: "<filter>", select: new string[] { "<select>" }, expand: new string[] { "<expand>" }))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetTasks_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            await foreach (BatchTask item in client.GetTasksAsync("<jobId>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), maxresults: 1234, filter: "<filter>", select: new string[] { "<select>" }, expand: new string[] { "<expand>" }))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetSubTasks_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            foreach (BinaryData item in client.GetSubTasks("<jobId>", "<taskId>", null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetSubTasks_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            await foreach (BinaryData item in client.GetSubTasksAsync("<jobId>", "<taskId>", null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetSubTasks_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            foreach (BatchSubtask item in client.GetSubTasks("<jobId>", "<taskId>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetSubTasks_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            await foreach (BatchSubtask item in client.GetSubTasksAsync("<jobId>", "<taskId>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetSubTasks_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            foreach (BinaryData item in client.GetSubTasks("<jobId>", "<taskId>", 1234, DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), new string[] { "<select>" }, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("nodeInfo").GetProperty("affinityId").ToString());
                Console.WriteLine(result.GetProperty("nodeInfo").GetProperty("nodeUrl").ToString());
                Console.WriteLine(result.GetProperty("nodeInfo").GetProperty("poolId").ToString());
                Console.WriteLine(result.GetProperty("nodeInfo").GetProperty("nodeId").ToString());
                Console.WriteLine(result.GetProperty("nodeInfo").GetProperty("taskRootDirectory").ToString());
                Console.WriteLine(result.GetProperty("nodeInfo").GetProperty("taskRootDirectoryUrl").ToString());
                Console.WriteLine(result.GetProperty("startTime").ToString());
                Console.WriteLine(result.GetProperty("endTime").ToString());
                Console.WriteLine(result.GetProperty("exitCode").ToString());
                Console.WriteLine(result.GetProperty("containerInfo").GetProperty("containerId").ToString());
                Console.WriteLine(result.GetProperty("containerInfo").GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("containerInfo").GetProperty("error").ToString());
                Console.WriteLine(result.GetProperty("failureInfo").GetProperty("category").ToString());
                Console.WriteLine(result.GetProperty("failureInfo").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("failureInfo").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("failureInfo").GetProperty("details")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("failureInfo").GetProperty("details")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("stateTransitionTime").ToString());
                Console.WriteLine(result.GetProperty("previousState").ToString());
                Console.WriteLine(result.GetProperty("previousStateTransitionTime").ToString());
                Console.WriteLine(result.GetProperty("result").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetSubTasks_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            await foreach (BinaryData item in client.GetSubTasksAsync("<jobId>", "<taskId>", 1234, DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), new string[] { "<select>" }, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("nodeInfo").GetProperty("affinityId").ToString());
                Console.WriteLine(result.GetProperty("nodeInfo").GetProperty("nodeUrl").ToString());
                Console.WriteLine(result.GetProperty("nodeInfo").GetProperty("poolId").ToString());
                Console.WriteLine(result.GetProperty("nodeInfo").GetProperty("nodeId").ToString());
                Console.WriteLine(result.GetProperty("nodeInfo").GetProperty("taskRootDirectory").ToString());
                Console.WriteLine(result.GetProperty("nodeInfo").GetProperty("taskRootDirectoryUrl").ToString());
                Console.WriteLine(result.GetProperty("startTime").ToString());
                Console.WriteLine(result.GetProperty("endTime").ToString());
                Console.WriteLine(result.GetProperty("exitCode").ToString());
                Console.WriteLine(result.GetProperty("containerInfo").GetProperty("containerId").ToString());
                Console.WriteLine(result.GetProperty("containerInfo").GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("containerInfo").GetProperty("error").ToString());
                Console.WriteLine(result.GetProperty("failureInfo").GetProperty("category").ToString());
                Console.WriteLine(result.GetProperty("failureInfo").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("failureInfo").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("failureInfo").GetProperty("details")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("failureInfo").GetProperty("details")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("stateTransitionTime").ToString());
                Console.WriteLine(result.GetProperty("previousState").ToString());
                Console.WriteLine(result.GetProperty("previousStateTransitionTime").ToString());
                Console.WriteLine(result.GetProperty("result").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetSubTasks_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            foreach (BatchSubtask item in client.GetSubTasks("<jobId>", "<taskId>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), select: new string[] { "<select>" }))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetSubTasks_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            await foreach (BatchSubtask item in client.GetSubTasksAsync("<jobId>", "<taskId>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), select: new string[] { "<select>" }))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetTaskFiles_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            foreach (BinaryData item in client.GetTaskFiles("<jobId>", "<taskId>", null, null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetTaskFiles_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            await foreach (BinaryData item in client.GetTaskFilesAsync("<jobId>", "<taskId>", null, null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetTaskFiles_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            foreach (BatchNodeFile item in client.GetTaskFiles("<jobId>", "<taskId>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetTaskFiles_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            await foreach (BatchNodeFile item in client.GetTaskFilesAsync("<jobId>", "<taskId>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetTaskFiles_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            foreach (BinaryData item in client.GetTaskFiles("<jobId>", "<taskId>", 1234, DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), 1234, "<filter>", true, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("url").ToString());
                Console.WriteLine(result.GetProperty("isDirectory").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("creationTime").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("lastModified").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("contentLength").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("contentType").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("fileMode").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetTaskFiles_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            await foreach (BinaryData item in client.GetTaskFilesAsync("<jobId>", "<taskId>", 1234, DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), 1234, "<filter>", true, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("url").ToString());
                Console.WriteLine(result.GetProperty("isDirectory").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("creationTime").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("lastModified").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("contentLength").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("contentType").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("fileMode").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetTaskFiles_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            foreach (BatchNodeFile item in client.GetTaskFiles("<jobId>", "<taskId>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), maxresults: 1234, filter: "<filter>", recursive: true))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetTaskFiles_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            await foreach (BatchNodeFile item in client.GetTaskFilesAsync("<jobId>", "<taskId>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), maxresults: 1234, filter: "<filter>", recursive: true))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetNodes_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            foreach (BinaryData item in client.GetNodes("<poolId>", null, null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetNodes_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            await foreach (BinaryData item in client.GetNodesAsync("<poolId>", null, null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetNodes_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            foreach (BatchNode item in client.GetNodes("<poolId>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetNodes_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            await foreach (BatchNode item in client.GetNodesAsync("<poolId>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetNodes_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            foreach (BinaryData item in client.GetNodes("<poolId>", 1234, DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), 1234, "<filter>", new string[] { "<select>" }, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("url").ToString());
                Console.WriteLine(result.GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("schedulingState").ToString());
                Console.WriteLine(result.GetProperty("stateTransitionTime").ToString());
                Console.WriteLine(result.GetProperty("lastBootTime").ToString());
                Console.WriteLine(result.GetProperty("allocationTime").ToString());
                Console.WriteLine(result.GetProperty("ipAddress").ToString());
                Console.WriteLine(result.GetProperty("affinityId").ToString());
                Console.WriteLine(result.GetProperty("vmSize").ToString());
                Console.WriteLine(result.GetProperty("totalTasksRun").ToString());
                Console.WriteLine(result.GetProperty("runningTasksCount").ToString());
                Console.WriteLine(result.GetProperty("runningTaskSlotsCount").ToString());
                Console.WriteLine(result.GetProperty("totalTasksSucceeded").ToString());
                Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("taskUrl").ToString());
                Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("jobId").ToString());
                Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("taskId").ToString());
                Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("subtaskId").ToString());
                Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("taskState").ToString());
                Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("executionInfo").GetProperty("startTime").ToString());
                Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("executionInfo").GetProperty("endTime").ToString());
                Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("executionInfo").GetProperty("exitCode").ToString());
                Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("executionInfo").GetProperty("containerInfo").GetProperty("containerId").ToString());
                Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("executionInfo").GetProperty("containerInfo").GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("executionInfo").GetProperty("containerInfo").GetProperty("error").ToString());
                Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("executionInfo").GetProperty("failureInfo").GetProperty("category").ToString());
                Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("executionInfo").GetProperty("failureInfo").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("executionInfo").GetProperty("failureInfo").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("executionInfo").GetProperty("failureInfo").GetProperty("details")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("executionInfo").GetProperty("failureInfo").GetProperty("details")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("executionInfo").GetProperty("retryCount").ToString());
                Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("executionInfo").GetProperty("lastRetryTime").ToString());
                Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("executionInfo").GetProperty("requeueCount").ToString());
                Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("executionInfo").GetProperty("lastRequeueTime").ToString());
                Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("executionInfo").GetProperty("result").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("commandLine").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("containerRunOptions").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("imageName").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("password").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("registryServer").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("workingDirectory").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("autoStorageContainerName").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("storageContainerUrl").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("httpUrl").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("blobPrefix").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("filePath").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("fileMode").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("environmentSettings")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("environmentSettings")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("userIdentity").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("scope").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("elevationLevel").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("maxTaskRetryCount").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("waitForSuccess").ToString());
                Console.WriteLine(result.GetProperty("startTaskInfo").GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("startTaskInfo").GetProperty("startTime").ToString());
                Console.WriteLine(result.GetProperty("startTaskInfo").GetProperty("endTime").ToString());
                Console.WriteLine(result.GetProperty("startTaskInfo").GetProperty("exitCode").ToString());
                Console.WriteLine(result.GetProperty("startTaskInfo").GetProperty("containerInfo").GetProperty("containerId").ToString());
                Console.WriteLine(result.GetProperty("startTaskInfo").GetProperty("containerInfo").GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("startTaskInfo").GetProperty("containerInfo").GetProperty("error").ToString());
                Console.WriteLine(result.GetProperty("startTaskInfo").GetProperty("failureInfo").GetProperty("category").ToString());
                Console.WriteLine(result.GetProperty("startTaskInfo").GetProperty("failureInfo").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("startTaskInfo").GetProperty("failureInfo").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("startTaskInfo").GetProperty("failureInfo").GetProperty("details")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("startTaskInfo").GetProperty("failureInfo").GetProperty("details")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("startTaskInfo").GetProperty("retryCount").ToString());
                Console.WriteLine(result.GetProperty("startTaskInfo").GetProperty("lastRetryTime").ToString());
                Console.WriteLine(result.GetProperty("startTaskInfo").GetProperty("result").ToString());
                Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("errors")[0].GetProperty("errorDetails")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("errors")[0].GetProperty("errorDetails")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("isDedicated").ToString());
                Console.WriteLine(result.GetProperty("endpointConfiguration").GetProperty("inboundEndpoints")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("endpointConfiguration").GetProperty("inboundEndpoints")[0].GetProperty("protocol").ToString());
                Console.WriteLine(result.GetProperty("endpointConfiguration").GetProperty("inboundEndpoints")[0].GetProperty("publicIPAddress").ToString());
                Console.WriteLine(result.GetProperty("endpointConfiguration").GetProperty("inboundEndpoints")[0].GetProperty("publicFQDN").ToString());
                Console.WriteLine(result.GetProperty("endpointConfiguration").GetProperty("inboundEndpoints")[0].GetProperty("frontendPort").ToString());
                Console.WriteLine(result.GetProperty("endpointConfiguration").GetProperty("inboundEndpoints")[0].GetProperty("backendPort").ToString());
                Console.WriteLine(result.GetProperty("nodeAgentInfo").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("nodeAgentInfo").GetProperty("lastUpdateTime").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineInfo").GetProperty("imageReference").GetProperty("publisher").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineInfo").GetProperty("imageReference").GetProperty("offer").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineInfo").GetProperty("imageReference").GetProperty("sku").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineInfo").GetProperty("imageReference").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineInfo").GetProperty("imageReference").GetProperty("virtualMachineImageId").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineInfo").GetProperty("imageReference").GetProperty("exactVersion").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineInfo").GetProperty("scaleSetVmResourceId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetNodes_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            await foreach (BinaryData item in client.GetNodesAsync("<poolId>", 1234, DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), 1234, "<filter>", new string[] { "<select>" }, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("url").ToString());
                Console.WriteLine(result.GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("schedulingState").ToString());
                Console.WriteLine(result.GetProperty("stateTransitionTime").ToString());
                Console.WriteLine(result.GetProperty("lastBootTime").ToString());
                Console.WriteLine(result.GetProperty("allocationTime").ToString());
                Console.WriteLine(result.GetProperty("ipAddress").ToString());
                Console.WriteLine(result.GetProperty("affinityId").ToString());
                Console.WriteLine(result.GetProperty("vmSize").ToString());
                Console.WriteLine(result.GetProperty("totalTasksRun").ToString());
                Console.WriteLine(result.GetProperty("runningTasksCount").ToString());
                Console.WriteLine(result.GetProperty("runningTaskSlotsCount").ToString());
                Console.WriteLine(result.GetProperty("totalTasksSucceeded").ToString());
                Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("taskUrl").ToString());
                Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("jobId").ToString());
                Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("taskId").ToString());
                Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("subtaskId").ToString());
                Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("taskState").ToString());
                Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("executionInfo").GetProperty("startTime").ToString());
                Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("executionInfo").GetProperty("endTime").ToString());
                Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("executionInfo").GetProperty("exitCode").ToString());
                Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("executionInfo").GetProperty("containerInfo").GetProperty("containerId").ToString());
                Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("executionInfo").GetProperty("containerInfo").GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("executionInfo").GetProperty("containerInfo").GetProperty("error").ToString());
                Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("executionInfo").GetProperty("failureInfo").GetProperty("category").ToString());
                Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("executionInfo").GetProperty("failureInfo").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("executionInfo").GetProperty("failureInfo").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("executionInfo").GetProperty("failureInfo").GetProperty("details")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("executionInfo").GetProperty("failureInfo").GetProperty("details")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("executionInfo").GetProperty("retryCount").ToString());
                Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("executionInfo").GetProperty("lastRetryTime").ToString());
                Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("executionInfo").GetProperty("requeueCount").ToString());
                Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("executionInfo").GetProperty("lastRequeueTime").ToString());
                Console.WriteLine(result.GetProperty("recentTasks")[0].GetProperty("executionInfo").GetProperty("result").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("commandLine").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("containerRunOptions").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("imageName").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("password").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("registryServer").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("workingDirectory").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("autoStorageContainerName").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("storageContainerUrl").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("httpUrl").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("blobPrefix").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("filePath").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("fileMode").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("environmentSettings")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("environmentSettings")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("userIdentity").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("scope").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("elevationLevel").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("maxTaskRetryCount").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("waitForSuccess").ToString());
                Console.WriteLine(result.GetProperty("startTaskInfo").GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("startTaskInfo").GetProperty("startTime").ToString());
                Console.WriteLine(result.GetProperty("startTaskInfo").GetProperty("endTime").ToString());
                Console.WriteLine(result.GetProperty("startTaskInfo").GetProperty("exitCode").ToString());
                Console.WriteLine(result.GetProperty("startTaskInfo").GetProperty("containerInfo").GetProperty("containerId").ToString());
                Console.WriteLine(result.GetProperty("startTaskInfo").GetProperty("containerInfo").GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("startTaskInfo").GetProperty("containerInfo").GetProperty("error").ToString());
                Console.WriteLine(result.GetProperty("startTaskInfo").GetProperty("failureInfo").GetProperty("category").ToString());
                Console.WriteLine(result.GetProperty("startTaskInfo").GetProperty("failureInfo").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("startTaskInfo").GetProperty("failureInfo").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("startTaskInfo").GetProperty("failureInfo").GetProperty("details")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("startTaskInfo").GetProperty("failureInfo").GetProperty("details")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("startTaskInfo").GetProperty("retryCount").ToString());
                Console.WriteLine(result.GetProperty("startTaskInfo").GetProperty("lastRetryTime").ToString());
                Console.WriteLine(result.GetProperty("startTaskInfo").GetProperty("result").ToString());
                Console.WriteLine(result.GetProperty("errors")[0].GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("errors")[0].GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("errors")[0].GetProperty("errorDetails")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("errors")[0].GetProperty("errorDetails")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("isDedicated").ToString());
                Console.WriteLine(result.GetProperty("endpointConfiguration").GetProperty("inboundEndpoints")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("endpointConfiguration").GetProperty("inboundEndpoints")[0].GetProperty("protocol").ToString());
                Console.WriteLine(result.GetProperty("endpointConfiguration").GetProperty("inboundEndpoints")[0].GetProperty("publicIPAddress").ToString());
                Console.WriteLine(result.GetProperty("endpointConfiguration").GetProperty("inboundEndpoints")[0].GetProperty("publicFQDN").ToString());
                Console.WriteLine(result.GetProperty("endpointConfiguration").GetProperty("inboundEndpoints")[0].GetProperty("frontendPort").ToString());
                Console.WriteLine(result.GetProperty("endpointConfiguration").GetProperty("inboundEndpoints")[0].GetProperty("backendPort").ToString());
                Console.WriteLine(result.GetProperty("nodeAgentInfo").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("nodeAgentInfo").GetProperty("lastUpdateTime").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineInfo").GetProperty("imageReference").GetProperty("publisher").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineInfo").GetProperty("imageReference").GetProperty("offer").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineInfo").GetProperty("imageReference").GetProperty("sku").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineInfo").GetProperty("imageReference").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineInfo").GetProperty("imageReference").GetProperty("virtualMachineImageId").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineInfo").GetProperty("imageReference").GetProperty("exactVersion").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineInfo").GetProperty("scaleSetVmResourceId").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetNodes_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            foreach (BatchNode item in client.GetNodes("<poolId>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), maxresults: 1234, filter: "<filter>", select: new string[] { "<select>" }))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetNodes_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            await foreach (BatchNode item in client.GetNodesAsync("<poolId>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), maxresults: 1234, filter: "<filter>", select: new string[] { "<select>" }))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetNodeExtensions_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            foreach (BinaryData item in client.GetNodeExtensions("<poolId>", "<nodeId>", null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetNodeExtensions_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            await foreach (BinaryData item in client.GetNodeExtensionsAsync("<poolId>", "<nodeId>", null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetNodeExtensions_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            foreach (BatchNodeVMExtension item in client.GetNodeExtensions("<poolId>", "<nodeId>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetNodeExtensions_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            await foreach (BatchNodeVMExtension item in client.GetNodeExtensionsAsync("<poolId>", "<nodeId>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetNodeExtensions_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            foreach (BinaryData item in client.GetNodeExtensions("<poolId>", "<nodeId>", 1234, DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), 1234, new string[] { "<select>" }, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("provisioningState").ToString());
                Console.WriteLine(result.GetProperty("vmExtension").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("vmExtension").GetProperty("publisher").ToString());
                Console.WriteLine(result.GetProperty("vmExtension").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("vmExtension").GetProperty("typeHandlerVersion").ToString());
                Console.WriteLine(result.GetProperty("vmExtension").GetProperty("autoUpgradeMinorVersion").ToString());
                Console.WriteLine(result.GetProperty("vmExtension").GetProperty("enableAutomaticUpgrade").ToString());
                Console.WriteLine(result.GetProperty("vmExtension").GetProperty("settings").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("vmExtension").GetProperty("protectedSettings").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("vmExtension").GetProperty("provisionAfterExtensions")[0].ToString());
                Console.WriteLine(result.GetProperty("instanceView").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("instanceView").GetProperty("statuses")[0].GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("instanceView").GetProperty("statuses")[0].GetProperty("displayStatus").ToString());
                Console.WriteLine(result.GetProperty("instanceView").GetProperty("statuses")[0].GetProperty("level").ToString());
                Console.WriteLine(result.GetProperty("instanceView").GetProperty("statuses")[0].GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("instanceView").GetProperty("statuses")[0].GetProperty("time").ToString());
                Console.WriteLine(result.GetProperty("instanceView").GetProperty("subStatuses")[0].GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("instanceView").GetProperty("subStatuses")[0].GetProperty("displayStatus").ToString());
                Console.WriteLine(result.GetProperty("instanceView").GetProperty("subStatuses")[0].GetProperty("level").ToString());
                Console.WriteLine(result.GetProperty("instanceView").GetProperty("subStatuses")[0].GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("instanceView").GetProperty("subStatuses")[0].GetProperty("time").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetNodeExtensions_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            await foreach (BinaryData item in client.GetNodeExtensionsAsync("<poolId>", "<nodeId>", 1234, DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), 1234, new string[] { "<select>" }, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("provisioningState").ToString());
                Console.WriteLine(result.GetProperty("vmExtension").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("vmExtension").GetProperty("publisher").ToString());
                Console.WriteLine(result.GetProperty("vmExtension").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("vmExtension").GetProperty("typeHandlerVersion").ToString());
                Console.WriteLine(result.GetProperty("vmExtension").GetProperty("autoUpgradeMinorVersion").ToString());
                Console.WriteLine(result.GetProperty("vmExtension").GetProperty("enableAutomaticUpgrade").ToString());
                Console.WriteLine(result.GetProperty("vmExtension").GetProperty("settings").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("vmExtension").GetProperty("protectedSettings").GetProperty("<key>").ToString());
                Console.WriteLine(result.GetProperty("vmExtension").GetProperty("provisionAfterExtensions")[0].ToString());
                Console.WriteLine(result.GetProperty("instanceView").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("instanceView").GetProperty("statuses")[0].GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("instanceView").GetProperty("statuses")[0].GetProperty("displayStatus").ToString());
                Console.WriteLine(result.GetProperty("instanceView").GetProperty("statuses")[0].GetProperty("level").ToString());
                Console.WriteLine(result.GetProperty("instanceView").GetProperty("statuses")[0].GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("instanceView").GetProperty("statuses")[0].GetProperty("time").ToString());
                Console.WriteLine(result.GetProperty("instanceView").GetProperty("subStatuses")[0].GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("instanceView").GetProperty("subStatuses")[0].GetProperty("displayStatus").ToString());
                Console.WriteLine(result.GetProperty("instanceView").GetProperty("subStatuses")[0].GetProperty("level").ToString());
                Console.WriteLine(result.GetProperty("instanceView").GetProperty("subStatuses")[0].GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("instanceView").GetProperty("subStatuses")[0].GetProperty("time").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetNodeExtensions_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            foreach (BatchNodeVMExtension item in client.GetNodeExtensions("<poolId>", "<nodeId>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), maxresults: 1234, select: new string[] { "<select>" }))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetNodeExtensions_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            await foreach (BatchNodeVMExtension item in client.GetNodeExtensionsAsync("<poolId>", "<nodeId>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), maxresults: 1234, select: new string[] { "<select>" }))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetNodeFiles_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            foreach (BinaryData item in client.GetNodeFiles("<poolId>", "<nodeId>", null, null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetNodeFiles_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            await foreach (BinaryData item in client.GetNodeFilesAsync("<poolId>", "<nodeId>", null, null, null, null, null, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetNodeFiles_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            foreach (BatchNodeFile item in client.GetNodeFiles("<poolId>", "<nodeId>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetNodeFiles_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            await foreach (BatchNodeFile item in client.GetNodeFilesAsync("<poolId>", "<nodeId>"))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetNodeFiles_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            foreach (BinaryData item in client.GetNodeFiles("<poolId>", "<nodeId>", 1234, DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), 1234, "<filter>", true, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("url").ToString());
                Console.WriteLine(result.GetProperty("isDirectory").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("creationTime").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("lastModified").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("contentLength").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("contentType").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("fileMode").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetNodeFiles_AllParameters_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            await foreach (BinaryData item in client.GetNodeFilesAsync("<poolId>", "<nodeId>", 1234, DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), 1234, "<filter>", true, null))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("url").ToString());
                Console.WriteLine(result.GetProperty("isDirectory").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("creationTime").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("lastModified").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("contentLength").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("contentType").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("fileMode").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Batch_GetNodeFiles_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            foreach (BatchNodeFile item in client.GetNodeFiles("<poolId>", "<nodeId>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), maxresults: 1234, filter: "<filter>", recursive: true))
            {
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Batch_GetNodeFiles_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            BatchClient client = new BatchClient(endpoint, credential);

            await foreach (BatchNodeFile item in client.GetNodeFilesAsync("<poolId>", "<nodeId>", timeOutInSeconds: 1234, ocpdate: DateTimeOffset.Parse("Tue, 10 May 2022 18:57:31 GMT"), maxresults: 1234, filter: "<filter>", recursive: true))
            {
            }
        }
    }
}
