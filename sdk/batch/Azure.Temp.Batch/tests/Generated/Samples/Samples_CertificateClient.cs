// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Temp.Batch.Samples
{
    public class Samples_CertificateClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Add()
        {
            var credential = new DefaultAzureCredential();
            var client = new CertificateClient("<batchUrl>", credential);

            var data = new
            {
                thumbprint = "<thumbprint>",
                thumbprintAlgorithm = "<thumbprintAlgorithm>",
                data = "<data>",
            };

            Response response = client.Add(RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Add_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new CertificateClient("<batchUrl>", credential);

            var data = new
            {
                thumbprint = "<thumbprint>",
                thumbprintAlgorithm = "<thumbprintAlgorithm>",
                data = "<data>",
                certificateFormat = "pfx",
                password = "<password>",
            };

            Response response = client.Add(RequestContent.Create(data), 1234, DateTimeOffset.UtcNow);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Add_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new CertificateClient("<batchUrl>", credential);

            var data = new
            {
                thumbprint = "<thumbprint>",
                thumbprintAlgorithm = "<thumbprintAlgorithm>",
                data = "<data>",
            };

            Response response = await client.AddAsync(RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Add_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new CertificateClient("<batchUrl>", credential);

            var data = new
            {
                thumbprint = "<thumbprint>",
                thumbprintAlgorithm = "<thumbprintAlgorithm>",
                data = "<data>",
                certificateFormat = "pfx",
                password = "<password>",
            };

            Response response = await client.AddAsync(RequestContent.Create(data), 1234, DateTimeOffset.UtcNow);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CancelDeletion()
        {
            var credential = new DefaultAzureCredential();
            var client = new CertificateClient("<batchUrl>", credential);

            Response response = client.CancelDeletion("<thumbprintAlgorithm>", "<thumbprint>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CancelDeletion_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new CertificateClient("<batchUrl>", credential);

            Response response = client.CancelDeletion("<thumbprintAlgorithm>", "<thumbprint>", 1234, DateTimeOffset.UtcNow);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CancelDeletion_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new CertificateClient("<batchUrl>", credential);

            Response response = await client.CancelDeletionAsync("<thumbprintAlgorithm>", "<thumbprint>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CancelDeletion_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new CertificateClient("<batchUrl>", credential);

            Response response = await client.CancelDeletionAsync("<thumbprintAlgorithm>", "<thumbprint>", 1234, DateTimeOffset.UtcNow);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Delete()
        {
            var credential = new DefaultAzureCredential();
            var client = new CertificateClient("<batchUrl>", credential);

            Response response = client.Delete("<thumbprintAlgorithm>", "<thumbprint>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Delete_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new CertificateClient("<batchUrl>", credential);

            Response response = client.Delete("<thumbprintAlgorithm>", "<thumbprint>", 1234, DateTimeOffset.UtcNow);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Delete_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new CertificateClient("<batchUrl>", credential);

            Response response = await client.DeleteAsync("<thumbprintAlgorithm>", "<thumbprint>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Delete_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new CertificateClient("<batchUrl>", credential);

            Response response = await client.DeleteAsync("<thumbprintAlgorithm>", "<thumbprint>", 1234, DateTimeOffset.UtcNow);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetCertificate()
        {
            var credential = new DefaultAzureCredential();
            var client = new CertificateClient("<batchUrl>", credential);

            Response response = client.GetCertificate("<thumbprintAlgorithm>", "<thumbprint>", "<select>", 1234, DateTimeOffset.UtcNow, new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetCertificate_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new CertificateClient("<batchUrl>", credential);

            Response response = client.GetCertificate("<thumbprintAlgorithm>", "<thumbprint>", "<select>", 1234, DateTimeOffset.UtcNow, new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("thumbprint").ToString());
            Console.WriteLine(result.GetProperty("thumbprintAlgorithm").ToString());
            Console.WriteLine(result.GetProperty("url").ToString());
            Console.WriteLine(result.GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("stateTransitionTime").ToString());
            Console.WriteLine(result.GetProperty("previousState").ToString());
            Console.WriteLine(result.GetProperty("previousStateTransitionTime").ToString());
            Console.WriteLine(result.GetProperty("publicData").ToString());
            Console.WriteLine(result.GetProperty("deleteCertificateError").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("deleteCertificateError").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("deleteCertificateError").GetProperty("values")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("deleteCertificateError").GetProperty("values")[0].GetProperty("value").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetCertificate_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new CertificateClient("<batchUrl>", credential);

            Response response = await client.GetCertificateAsync("<thumbprintAlgorithm>", "<thumbprint>", "<select>", 1234, DateTimeOffset.UtcNow, new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetCertificate_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new CertificateClient("<batchUrl>", credential);

            Response response = await client.GetCertificateAsync("<thumbprintAlgorithm>", "<thumbprint>", "<select>", 1234, DateTimeOffset.UtcNow, new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("thumbprint").ToString());
            Console.WriteLine(result.GetProperty("thumbprintAlgorithm").ToString());
            Console.WriteLine(result.GetProperty("url").ToString());
            Console.WriteLine(result.GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("stateTransitionTime").ToString());
            Console.WriteLine(result.GetProperty("previousState").ToString());
            Console.WriteLine(result.GetProperty("previousStateTransitionTime").ToString());
            Console.WriteLine(result.GetProperty("publicData").ToString());
            Console.WriteLine(result.GetProperty("deleteCertificateError").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("deleteCertificateError").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("deleteCertificateError").GetProperty("values")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("deleteCertificateError").GetProperty("values")[0].GetProperty("value").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetCertificates()
        {
            var credential = new DefaultAzureCredential();
            var client = new CertificateClient("<batchUrl>", credential);

            foreach (var item in client.GetCertificates("<filter>", "<select>", 1234, 1234, DateTimeOffset.UtcNow, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetCertificates_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new CertificateClient("<batchUrl>", credential);

            foreach (var item in client.GetCertificates("<filter>", "<select>", 1234, 1234, DateTimeOffset.UtcNow, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("thumbprint").ToString());
                Console.WriteLine(result.GetProperty("thumbprintAlgorithm").ToString());
                Console.WriteLine(result.GetProperty("url").ToString());
                Console.WriteLine(result.GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("stateTransitionTime").ToString());
                Console.WriteLine(result.GetProperty("previousState").ToString());
                Console.WriteLine(result.GetProperty("previousStateTransitionTime").ToString());
                Console.WriteLine(result.GetProperty("publicData").ToString());
                Console.WriteLine(result.GetProperty("deleteCertificateError").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("deleteCertificateError").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("deleteCertificateError").GetProperty("values")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("deleteCertificateError").GetProperty("values")[0].GetProperty("value").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetCertificates_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new CertificateClient("<batchUrl>", credential);

            await foreach (var item in client.GetCertificatesAsync("<filter>", "<select>", 1234, 1234, DateTimeOffset.UtcNow, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetCertificates_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new CertificateClient("<batchUrl>", credential);

            await foreach (var item in client.GetCertificatesAsync("<filter>", "<select>", 1234, 1234, DateTimeOffset.UtcNow, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("thumbprint").ToString());
                Console.WriteLine(result.GetProperty("thumbprintAlgorithm").ToString());
                Console.WriteLine(result.GetProperty("url").ToString());
                Console.WriteLine(result.GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("stateTransitionTime").ToString());
                Console.WriteLine(result.GetProperty("previousState").ToString());
                Console.WriteLine(result.GetProperty("previousStateTransitionTime").ToString());
                Console.WriteLine(result.GetProperty("publicData").ToString());
                Console.WriteLine(result.GetProperty("deleteCertificateError").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("deleteCertificateError").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("deleteCertificateError").GetProperty("values")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("deleteCertificateError").GetProperty("values")[0].GetProperty("value").ToString());
            }
        }
    }
}
