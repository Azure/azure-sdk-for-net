// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Temp.Batch.Samples
{
    public class Samples_ComputeNodeExtensionClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetComputeNodeExtension()
        {
            var credential = new DefaultAzureCredential();
            var client = new ComputeNodeExtensionClient("<batchUrl>", credential);

            Response response = client.GetComputeNodeExtension("<poolId>", "<nodeId>", "<extensionName>", "<select>", 1234, DateTimeOffset.UtcNow, new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetComputeNodeExtension_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new ComputeNodeExtensionClient("<batchUrl>", credential);

            Response response = client.GetComputeNodeExtension("<poolId>", "<nodeId>", "<extensionName>", "<select>", 1234, DateTimeOffset.UtcNow, new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("vmExtension").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("vmExtension").GetProperty("publisher").ToString());
            Console.WriteLine(result.GetProperty("vmExtension").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("vmExtension").GetProperty("typeHandlerVersion").ToString());
            Console.WriteLine(result.GetProperty("vmExtension").GetProperty("autoUpgradeMinorVersion").ToString());
            Console.WriteLine(result.GetProperty("vmExtension").GetProperty("enableAutomaticUpgrade").ToString());
            Console.WriteLine(result.GetProperty("vmExtension").GetProperty("settings").ToString());
            Console.WriteLine(result.GetProperty("vmExtension").GetProperty("protectedSettings").ToString());
            Console.WriteLine(result.GetProperty("vmExtension").GetProperty("provisionAfterExtensions")[0].ToString());
            Console.WriteLine(result.GetProperty("instanceView").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("instanceView").GetProperty("statuses")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("instanceView").GetProperty("statuses")[0].GetProperty("displayStatus").ToString());
            Console.WriteLine(result.GetProperty("instanceView").GetProperty("statuses")[0].GetProperty("level").ToString());
            Console.WriteLine(result.GetProperty("instanceView").GetProperty("statuses")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("instanceView").GetProperty("statuses")[0].GetProperty("time").ToString());
            Console.WriteLine(result.GetProperty("instanceView").GetProperty("subStatuses")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("instanceView").GetProperty("subStatuses")[0].GetProperty("displayStatus").ToString());
            Console.WriteLine(result.GetProperty("instanceView").GetProperty("subStatuses")[0].GetProperty("level").ToString());
            Console.WriteLine(result.GetProperty("instanceView").GetProperty("subStatuses")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("instanceView").GetProperty("subStatuses")[0].GetProperty("time").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetComputeNodeExtension_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new ComputeNodeExtensionClient("<batchUrl>", credential);

            Response response = await client.GetComputeNodeExtensionAsync("<poolId>", "<nodeId>", "<extensionName>", "<select>", 1234, DateTimeOffset.UtcNow, new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetComputeNodeExtension_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new ComputeNodeExtensionClient("<batchUrl>", credential);

            Response response = await client.GetComputeNodeExtensionAsync("<poolId>", "<nodeId>", "<extensionName>", "<select>", 1234, DateTimeOffset.UtcNow, new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("provisioningState").ToString());
            Console.WriteLine(result.GetProperty("vmExtension").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("vmExtension").GetProperty("publisher").ToString());
            Console.WriteLine(result.GetProperty("vmExtension").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("vmExtension").GetProperty("typeHandlerVersion").ToString());
            Console.WriteLine(result.GetProperty("vmExtension").GetProperty("autoUpgradeMinorVersion").ToString());
            Console.WriteLine(result.GetProperty("vmExtension").GetProperty("enableAutomaticUpgrade").ToString());
            Console.WriteLine(result.GetProperty("vmExtension").GetProperty("settings").ToString());
            Console.WriteLine(result.GetProperty("vmExtension").GetProperty("protectedSettings").ToString());
            Console.WriteLine(result.GetProperty("vmExtension").GetProperty("provisionAfterExtensions")[0].ToString());
            Console.WriteLine(result.GetProperty("instanceView").GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("instanceView").GetProperty("statuses")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("instanceView").GetProperty("statuses")[0].GetProperty("displayStatus").ToString());
            Console.WriteLine(result.GetProperty("instanceView").GetProperty("statuses")[0].GetProperty("level").ToString());
            Console.WriteLine(result.GetProperty("instanceView").GetProperty("statuses")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("instanceView").GetProperty("statuses")[0].GetProperty("time").ToString());
            Console.WriteLine(result.GetProperty("instanceView").GetProperty("subStatuses")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("instanceView").GetProperty("subStatuses")[0].GetProperty("displayStatus").ToString());
            Console.WriteLine(result.GetProperty("instanceView").GetProperty("subStatuses")[0].GetProperty("level").ToString());
            Console.WriteLine(result.GetProperty("instanceView").GetProperty("subStatuses")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("instanceView").GetProperty("subStatuses")[0].GetProperty("time").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetComputeNodeExtensions()
        {
            var credential = new DefaultAzureCredential();
            var client = new ComputeNodeExtensionClient("<batchUrl>", credential);

            foreach (var item in client.GetComputeNodeExtensions("<poolId>", "<nodeId>", "<select>", 1234, 1234, DateTimeOffset.UtcNow, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetComputeNodeExtensions_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new ComputeNodeExtensionClient("<batchUrl>", credential);

            foreach (var item in client.GetComputeNodeExtensions("<poolId>", "<nodeId>", "<select>", 1234, 1234, DateTimeOffset.UtcNow, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("provisioningState").ToString());
                Console.WriteLine(result.GetProperty("vmExtension").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("vmExtension").GetProperty("publisher").ToString());
                Console.WriteLine(result.GetProperty("vmExtension").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("vmExtension").GetProperty("typeHandlerVersion").ToString());
                Console.WriteLine(result.GetProperty("vmExtension").GetProperty("autoUpgradeMinorVersion").ToString());
                Console.WriteLine(result.GetProperty("vmExtension").GetProperty("enableAutomaticUpgrade").ToString());
                Console.WriteLine(result.GetProperty("vmExtension").GetProperty("settings").ToString());
                Console.WriteLine(result.GetProperty("vmExtension").GetProperty("protectedSettings").ToString());
                Console.WriteLine(result.GetProperty("vmExtension").GetProperty("provisionAfterExtensions")[0].ToString());
                Console.WriteLine(result.GetProperty("instanceView").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("instanceView").GetProperty("statuses")[0].GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("instanceView").GetProperty("statuses")[0].GetProperty("displayStatus").ToString());
                Console.WriteLine(result.GetProperty("instanceView").GetProperty("statuses")[0].GetProperty("level").ToString());
                Console.WriteLine(result.GetProperty("instanceView").GetProperty("statuses")[0].GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("instanceView").GetProperty("statuses")[0].GetProperty("time").ToString());
                Console.WriteLine(result.GetProperty("instanceView").GetProperty("subStatuses")[0].GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("instanceView").GetProperty("subStatuses")[0].GetProperty("displayStatus").ToString());
                Console.WriteLine(result.GetProperty("instanceView").GetProperty("subStatuses")[0].GetProperty("level").ToString());
                Console.WriteLine(result.GetProperty("instanceView").GetProperty("subStatuses")[0].GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("instanceView").GetProperty("subStatuses")[0].GetProperty("time").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetComputeNodeExtensions_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new ComputeNodeExtensionClient("<batchUrl>", credential);

            await foreach (var item in client.GetComputeNodeExtensionsAsync("<poolId>", "<nodeId>", "<select>", 1234, 1234, DateTimeOffset.UtcNow, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetComputeNodeExtensions_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new ComputeNodeExtensionClient("<batchUrl>", credential);

            await foreach (var item in client.GetComputeNodeExtensionsAsync("<poolId>", "<nodeId>", "<select>", 1234, 1234, DateTimeOffset.UtcNow, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("provisioningState").ToString());
                Console.WriteLine(result.GetProperty("vmExtension").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("vmExtension").GetProperty("publisher").ToString());
                Console.WriteLine(result.GetProperty("vmExtension").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("vmExtension").GetProperty("typeHandlerVersion").ToString());
                Console.WriteLine(result.GetProperty("vmExtension").GetProperty("autoUpgradeMinorVersion").ToString());
                Console.WriteLine(result.GetProperty("vmExtension").GetProperty("enableAutomaticUpgrade").ToString());
                Console.WriteLine(result.GetProperty("vmExtension").GetProperty("settings").ToString());
                Console.WriteLine(result.GetProperty("vmExtension").GetProperty("protectedSettings").ToString());
                Console.WriteLine(result.GetProperty("vmExtension").GetProperty("provisionAfterExtensions")[0].ToString());
                Console.WriteLine(result.GetProperty("instanceView").GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("instanceView").GetProperty("statuses")[0].GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("instanceView").GetProperty("statuses")[0].GetProperty("displayStatus").ToString());
                Console.WriteLine(result.GetProperty("instanceView").GetProperty("statuses")[0].GetProperty("level").ToString());
                Console.WriteLine(result.GetProperty("instanceView").GetProperty("statuses")[0].GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("instanceView").GetProperty("statuses")[0].GetProperty("time").ToString());
                Console.WriteLine(result.GetProperty("instanceView").GetProperty("subStatuses")[0].GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("instanceView").GetProperty("subStatuses")[0].GetProperty("displayStatus").ToString());
                Console.WriteLine(result.GetProperty("instanceView").GetProperty("subStatuses")[0].GetProperty("level").ToString());
                Console.WriteLine(result.GetProperty("instanceView").GetProperty("subStatuses")[0].GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("instanceView").GetProperty("subStatuses")[0].GetProperty("time").ToString());
            }
        }
    }
}
