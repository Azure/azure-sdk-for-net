// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Temp.Batch.Samples
{
    public class Samples_PoolClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Add()
        {
            var credential = new DefaultAzureCredential();
            var client = new PoolClient("<batchUrl>", credential);

            var data = new
            {
                id = "<id>",
                vmSize = "<vmSize>",
            };

            Response response = client.Add(RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Add_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new PoolClient("<batchUrl>", credential);

            var data = new
            {
                id = "<id>",
                displayName = "<displayName>",
                vmSize = "<vmSize>",
                cloudServiceConfiguration = new
                {
                    osFamily = "<osFamily>",
                    osVersion = "<osVersion>",
                },
                virtualMachineConfiguration = new
                {
                    imageReference = new
                    {
                        publisher = "<publisher>",
                        offer = "<offer>",
                        sku = "<sku>",
                        version = "<version>",
                        virtualMachineImageId = "<virtualMachineImageId>",
                    },
                    nodeAgentSKUId = "<nodeAgentSKUId>",
                    windowsConfiguration = new
                    {
                        enableAutomaticUpdates = true,
                    },
                    dataDisks = new[] {
            new {
                lun = 1234,
                caching = "none",
                diskSizeGB = 1234,
                storageAccountType = "standard_lrs",
            }
        },
                    licenseType = "<licenseType>",
                    containerConfiguration = new
                    {
                        type = "dockerCompatible",
                        containerImageNames = new[] {
                "<String>"
            },
                        containerRegistries = new[] {
                new {
                    username = "<username>",
                    password = "<password>",
                    registryServer = "<registryServer>",
                    identityReference = new {
                        resourceId = "<resourceId>",
                    },
                }
            },
                    },
                    diskEncryptionConfiguration = new
                    {
                        targets = new[] {
                "osdisk"
            },
                    },
                    nodePlacementConfiguration = new
                    {
                        policy = "regional",
                    },
                    extensions = new[] {
            new {
                name = "<name>",
                publisher = "<publisher>",
                type = "<type>",
                typeHandlerVersion = "<typeHandlerVersion>",
                autoUpgradeMinorVersion = true,
                enableAutomaticUpgrade = true,
                settings = new {},
                protectedSettings = new {},
                provisionAfterExtensions = new[] {
                    "<String>"
                },
            }
        },
                    osDisk = new
                    {
                        ephemeralOSDiskSettings = new
                        {
                            placement = "CacheDisk",
                        },
                    },
                },
                resizeTimeout = "PT1H23M45S",
                targetDedicatedNodes = 1234,
                targetLowPriorityNodes = 1234,
                enableAutoScale = true,
                autoScaleFormula = "<autoScaleFormula>",
                autoScaleEvaluationInterval = "PT1H23M45S",
                enableInterNodeCommunication = true,
                networkConfiguration = new
                {
                    subnetId = "<subnetId>",
                    dynamicVNetAssignmentScope = "none",
                    endpointConfiguration = new
                    {
                        inboundNATPools = new[] {
                new {
                    name = "<name>",
                    protocol = "tcp",
                    backendPort = 1234,
                    frontendPortRangeStart = 1234,
                    frontendPortRangeEnd = 1234,
                    networkSecurityGroupRules = new[] {
                        new {
                            priority = 1234,
                            access = "allow",
                            sourceAddressPrefix = "<sourceAddressPrefix>",
                            sourcePortRanges = new[] {
                                "<String>"
                            },
                        }
                    },
                }
            },
                    },
                    publicIPAddressConfiguration = new
                    {
                        provision = "batchmanaged",
                        ipAddressIds = new[] {
                "<String>"
            },
                    },
                    enableAcceleratedNetworking = true,
                },
                startTask = new
                {
                    commandLine = "<commandLine>",
                    containerSettings = new
                    {
                        containerRunOptions = "<containerRunOptions>",
                        imageName = "<imageName>",
                        registry = new
                        {
                            username = "<username>",
                            password = "<password>",
                            registryServer = "<registryServer>",
                            identityReference = new
                            {
                                resourceId = "<resourceId>",
                            },
                        },
                        workingDirectory = "taskWorkingDirectory",
                    },
                    resourceFiles = new[] {
            new {
                autoStorageContainerName = "<autoStorageContainerName>",
                storageContainerUrl = "<storageContainerUrl>",
                httpUrl = "<httpUrl>",
                blobPrefix = "<blobPrefix>",
                filePath = "<filePath>",
                fileMode = "<fileMode>",
                identityReference = new {
                    resourceId = "<resourceId>",
                },
            }
        },
                    environmentSettings = new[] {
            new {
                name = "<name>",
                value = "<value>",
            }
        },
                    userIdentity = new
                    {
                        username = "<username>",
                        autoUser = new
                        {
                            scope = "task",
                            elevationLevel = "nonadmin",
                        },
                    },
                    maxTaskRetryCount = 1234,
                    waitForSuccess = true,
                },
                certificateReferences = new[] {
        new {
            thumbprint = "<thumbprint>",
            thumbprintAlgorithm = "<thumbprintAlgorithm>",
            storeLocation = "currentuser",
            storeName = "<storeName>",
            visibility = new[] {
                "starttask"
            },
        }
    },
                applicationPackageReferences = new[] {
        new {
            applicationId = "<applicationId>",
            version = "<version>",
        }
    },
                applicationLicenses = new[] {
        "<String>"
    },
                taskSlotsPerNode = 1234,
                taskSchedulingPolicy = new
                {
                    nodeFillType = "spread",
                },
                userAccounts = new[] {
        new {
            name = "<name>",
            password = "<password>",
            elevationLevel = "nonadmin",
            linuxUserConfiguration = new {
                uid = 1234,
                gid = 1234,
                sshPrivateKey = "<sshPrivateKey>",
            },
            windowsUserConfiguration = new {
                loginMode = "batch",
            },
        }
    },
                metadata = new[] {
        new {
            name = "<name>",
            value = "<value>",
        }
    },
                mountConfiguration = new[] {
        new {
            azureBlobFileSystemConfiguration = new {
                accountName = "<accountName>",
                containerName = "<containerName>",
                accountKey = "<accountKey>",
                sasKey = "<sasKey>",
                blobfuseOptions = "<blobfuseOptions>",
                relativeMountPath = "<relativeMountPath>",
                identityReference = new {
                    resourceId = "<resourceId>",
                },
            },
            nfsMountConfiguration = new {
                source = "<source>",
                relativeMountPath = "<relativeMountPath>",
                mountOptions = "<mountOptions>",
            },
            cifsMountConfiguration = new {
                username = "<username>",
                source = "<source>",
                relativeMountPath = "<relativeMountPath>",
                mountOptions = "<mountOptions>",
                password = "<password>",
            },
            azureFileShareConfiguration = new {
                accountName = "<accountName>",
                azureFileUrl = "<azureFileUrl>",
                accountKey = "<accountKey>",
                relativeMountPath = "<relativeMountPath>",
                mountOptions = "<mountOptions>",
            },
        }
    },
                targetNodeCommunicationMode = "default",
            };

            Response response = client.Add(RequestContent.Create(data), 1234, DateTimeOffset.UtcNow);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Add_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new PoolClient("<batchUrl>", credential);

            var data = new
            {
                id = "<id>",
                vmSize = "<vmSize>",
            };

            Response response = await client.AddAsync(RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Add_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new PoolClient("<batchUrl>", credential);

            var data = new
            {
                id = "<id>",
                displayName = "<displayName>",
                vmSize = "<vmSize>",
                cloudServiceConfiguration = new
                {
                    osFamily = "<osFamily>",
                    osVersion = "<osVersion>",
                },
                virtualMachineConfiguration = new
                {
                    imageReference = new
                    {
                        publisher = "<publisher>",
                        offer = "<offer>",
                        sku = "<sku>",
                        version = "<version>",
                        virtualMachineImageId = "<virtualMachineImageId>",
                    },
                    nodeAgentSKUId = "<nodeAgentSKUId>",
                    windowsConfiguration = new
                    {
                        enableAutomaticUpdates = true,
                    },
                    dataDisks = new[] {
            new {
                lun = 1234,
                caching = "none",
                diskSizeGB = 1234,
                storageAccountType = "standard_lrs",
            }
        },
                    licenseType = "<licenseType>",
                    containerConfiguration = new
                    {
                        type = "dockerCompatible",
                        containerImageNames = new[] {
                "<String>"
            },
                        containerRegistries = new[] {
                new {
                    username = "<username>",
                    password = "<password>",
                    registryServer = "<registryServer>",
                    identityReference = new {
                        resourceId = "<resourceId>",
                    },
                }
            },
                    },
                    diskEncryptionConfiguration = new
                    {
                        targets = new[] {
                "osdisk"
            },
                    },
                    nodePlacementConfiguration = new
                    {
                        policy = "regional",
                    },
                    extensions = new[] {
            new {
                name = "<name>",
                publisher = "<publisher>",
                type = "<type>",
                typeHandlerVersion = "<typeHandlerVersion>",
                autoUpgradeMinorVersion = true,
                enableAutomaticUpgrade = true,
                settings = new {},
                protectedSettings = new {},
                provisionAfterExtensions = new[] {
                    "<String>"
                },
            }
        },
                    osDisk = new
                    {
                        ephemeralOSDiskSettings = new
                        {
                            placement = "CacheDisk",
                        },
                    },
                },
                resizeTimeout = "PT1H23M45S",
                targetDedicatedNodes = 1234,
                targetLowPriorityNodes = 1234,
                enableAutoScale = true,
                autoScaleFormula = "<autoScaleFormula>",
                autoScaleEvaluationInterval = "PT1H23M45S",
                enableInterNodeCommunication = true,
                networkConfiguration = new
                {
                    subnetId = "<subnetId>",
                    dynamicVNetAssignmentScope = "none",
                    endpointConfiguration = new
                    {
                        inboundNATPools = new[] {
                new {
                    name = "<name>",
                    protocol = "tcp",
                    backendPort = 1234,
                    frontendPortRangeStart = 1234,
                    frontendPortRangeEnd = 1234,
                    networkSecurityGroupRules = new[] {
                        new {
                            priority = 1234,
                            access = "allow",
                            sourceAddressPrefix = "<sourceAddressPrefix>",
                            sourcePortRanges = new[] {
                                "<String>"
                            },
                        }
                    },
                }
            },
                    },
                    publicIPAddressConfiguration = new
                    {
                        provision = "batchmanaged",
                        ipAddressIds = new[] {
                "<String>"
            },
                    },
                    enableAcceleratedNetworking = true,
                },
                startTask = new
                {
                    commandLine = "<commandLine>",
                    containerSettings = new
                    {
                        containerRunOptions = "<containerRunOptions>",
                        imageName = "<imageName>",
                        registry = new
                        {
                            username = "<username>",
                            password = "<password>",
                            registryServer = "<registryServer>",
                            identityReference = new
                            {
                                resourceId = "<resourceId>",
                            },
                        },
                        workingDirectory = "taskWorkingDirectory",
                    },
                    resourceFiles = new[] {
            new {
                autoStorageContainerName = "<autoStorageContainerName>",
                storageContainerUrl = "<storageContainerUrl>",
                httpUrl = "<httpUrl>",
                blobPrefix = "<blobPrefix>",
                filePath = "<filePath>",
                fileMode = "<fileMode>",
                identityReference = new {
                    resourceId = "<resourceId>",
                },
            }
        },
                    environmentSettings = new[] {
            new {
                name = "<name>",
                value = "<value>",
            }
        },
                    userIdentity = new
                    {
                        username = "<username>",
                        autoUser = new
                        {
                            scope = "task",
                            elevationLevel = "nonadmin",
                        },
                    },
                    maxTaskRetryCount = 1234,
                    waitForSuccess = true,
                },
                certificateReferences = new[] {
        new {
            thumbprint = "<thumbprint>",
            thumbprintAlgorithm = "<thumbprintAlgorithm>",
            storeLocation = "currentuser",
            storeName = "<storeName>",
            visibility = new[] {
                "starttask"
            },
        }
    },
                applicationPackageReferences = new[] {
        new {
            applicationId = "<applicationId>",
            version = "<version>",
        }
    },
                applicationLicenses = new[] {
        "<String>"
    },
                taskSlotsPerNode = 1234,
                taskSchedulingPolicy = new
                {
                    nodeFillType = "spread",
                },
                userAccounts = new[] {
        new {
            name = "<name>",
            password = "<password>",
            elevationLevel = "nonadmin",
            linuxUserConfiguration = new {
                uid = 1234,
                gid = 1234,
                sshPrivateKey = "<sshPrivateKey>",
            },
            windowsUserConfiguration = new {
                loginMode = "batch",
            },
        }
    },
                metadata = new[] {
        new {
            name = "<name>",
            value = "<value>",
        }
    },
                mountConfiguration = new[] {
        new {
            azureBlobFileSystemConfiguration = new {
                accountName = "<accountName>",
                containerName = "<containerName>",
                accountKey = "<accountKey>",
                sasKey = "<sasKey>",
                blobfuseOptions = "<blobfuseOptions>",
                relativeMountPath = "<relativeMountPath>",
                identityReference = new {
                    resourceId = "<resourceId>",
                },
            },
            nfsMountConfiguration = new {
                source = "<source>",
                relativeMountPath = "<relativeMountPath>",
                mountOptions = "<mountOptions>",
            },
            cifsMountConfiguration = new {
                username = "<username>",
                source = "<source>",
                relativeMountPath = "<relativeMountPath>",
                mountOptions = "<mountOptions>",
                password = "<password>",
            },
            azureFileShareConfiguration = new {
                accountName = "<accountName>",
                azureFileUrl = "<azureFileUrl>",
                accountKey = "<accountKey>",
                relativeMountPath = "<relativeMountPath>",
                mountOptions = "<mountOptions>",
            },
        }
    },
                targetNodeCommunicationMode = "default",
            };

            Response response = await client.AddAsync(RequestContent.Create(data), 1234, DateTimeOffset.UtcNow);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Delete()
        {
            var credential = new DefaultAzureCredential();
            var client = new PoolClient("<batchUrl>", credential);

            Response response = client.Delete("<poolId>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Delete_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new PoolClient("<batchUrl>", credential);

            Response response = client.Delete("<poolId>", 1234, DateTimeOffset.UtcNow, null);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Delete_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new PoolClient("<batchUrl>", credential);

            Response response = await client.DeleteAsync("<poolId>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Delete_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new PoolClient("<batchUrl>", credential);

            Response response = await client.DeleteAsync("<poolId>", 1234, DateTimeOffset.UtcNow, null);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Exists()
        {
            var credential = new DefaultAzureCredential();
            var client = new PoolClient("<batchUrl>", credential);

            Response response = client.Exists("<poolId>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Exists_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new PoolClient("<batchUrl>", credential);

            Response response = client.Exists("<poolId>", 1234, DateTimeOffset.UtcNow, null);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Exists_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new PoolClient("<batchUrl>", credential);

            Response response = await client.ExistsAsync("<poolId>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Exists_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new PoolClient("<batchUrl>", credential);

            Response response = await client.ExistsAsync("<poolId>", 1234, DateTimeOffset.UtcNow, null);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetPool()
        {
            var credential = new DefaultAzureCredential();
            var client = new PoolClient("<batchUrl>", credential);

            Response response = client.GetPool("<poolId>", "<select>", "<expand>", 1234, DateTimeOffset.UtcNow, null, new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetPool_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new PoolClient("<batchUrl>", credential);

            Response response = client.GetPool("<poolId>", "<select>", "<expand>", 1234, DateTimeOffset.UtcNow, null, new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("url").ToString());
            Console.WriteLine(result.GetProperty("eTag").ToString());
            Console.WriteLine(result.GetProperty("lastModified").ToString());
            Console.WriteLine(result.GetProperty("creationTime").ToString());
            Console.WriteLine(result.GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("stateTransitionTime").ToString());
            Console.WriteLine(result.GetProperty("allocationState").ToString());
            Console.WriteLine(result.GetProperty("allocationStateTransitionTime").ToString());
            Console.WriteLine(result.GetProperty("vmSize").ToString());
            Console.WriteLine(result.GetProperty("cloudServiceConfiguration").GetProperty("osFamily").ToString());
            Console.WriteLine(result.GetProperty("cloudServiceConfiguration").GetProperty("osVersion").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("publisher").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("offer").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("sku").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("virtualMachineImageId").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("exactVersion").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("nodeAgentSKUId").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("windowsConfiguration").GetProperty("enableAutomaticUpdates").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("lun").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("caching").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("diskSizeGB").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("storageAccountType").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("licenseType").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerImageNames")[0].ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("password").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("registryServer").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("diskEncryptionConfiguration").GetProperty("targets")[0].ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("nodePlacementConfiguration").GetProperty("policy").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("publisher").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("typeHandlerVersion").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("autoUpgradeMinorVersion").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("enableAutomaticUpgrade").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("settings").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("protectedSettings").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("provisionAfterExtensions")[0].ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("ephemeralOSDiskSettings").GetProperty("placement").ToString());
            Console.WriteLine(result.GetProperty("resizeTimeout").ToString());
            Console.WriteLine(result.GetProperty("resizeErrors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("resizeErrors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("resizeErrors")[0].GetProperty("values")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("resizeErrors")[0].GetProperty("values")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("currentDedicatedNodes").ToString());
            Console.WriteLine(result.GetProperty("currentLowPriorityNodes").ToString());
            Console.WriteLine(result.GetProperty("targetDedicatedNodes").ToString());
            Console.WriteLine(result.GetProperty("targetLowPriorityNodes").ToString());
            Console.WriteLine(result.GetProperty("enableAutoScale").ToString());
            Console.WriteLine(result.GetProperty("autoScaleFormula").ToString());
            Console.WriteLine(result.GetProperty("autoScaleEvaluationInterval").ToString());
            Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("timestamp").ToString());
            Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("results").ToString());
            Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("error").GetProperty("values")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("error").GetProperty("values")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("enableInterNodeCommunication").ToString());
            Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("subnetId").ToString());
            Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("dynamicVNetAssignmentScope").ToString());
            Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("protocol").ToString());
            Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("backendPort").ToString());
            Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("frontendPortRangeStart").ToString());
            Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("frontendPortRangeEnd").ToString());
            Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("priority").ToString());
            Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("access").ToString());
            Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("sourceAddressPrefix").ToString());
            Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("sourcePortRanges")[0].ToString());
            Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("publicIPAddressConfiguration").GetProperty("provision").ToString());
            Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("publicIPAddressConfiguration").GetProperty("ipAddressIds")[0].ToString());
            Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("enableAcceleratedNetworking").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("commandLine").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("containerRunOptions").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("imageName").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("password").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("registryServer").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("workingDirectory").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("autoStorageContainerName").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("storageContainerUrl").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("httpUrl").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("blobPrefix").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("filePath").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("fileMode").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("environmentSettings")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("environmentSettings")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("userIdentity").GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("scope").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("elevationLevel").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("maxTaskRetryCount").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("waitForSuccess").ToString());
            Console.WriteLine(result.GetProperty("certificateReferences")[0].GetProperty("thumbprint").ToString());
            Console.WriteLine(result.GetProperty("certificateReferences")[0].GetProperty("thumbprintAlgorithm").ToString());
            Console.WriteLine(result.GetProperty("certificateReferences")[0].GetProperty("storeLocation").ToString());
            Console.WriteLine(result.GetProperty("certificateReferences")[0].GetProperty("storeName").ToString());
            Console.WriteLine(result.GetProperty("certificateReferences")[0].GetProperty("visibility")[0].ToString());
            Console.WriteLine(result.GetProperty("applicationPackageReferences")[0].GetProperty("applicationId").ToString());
            Console.WriteLine(result.GetProperty("applicationPackageReferences")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("applicationLicenses")[0].ToString());
            Console.WriteLine(result.GetProperty("taskSlotsPerNode").ToString());
            Console.WriteLine(result.GetProperty("taskSchedulingPolicy").GetProperty("nodeFillType").ToString());
            Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("password").ToString());
            Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("elevationLevel").ToString());
            Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("uid").ToString());
            Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("gid").ToString());
            Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("sshPrivateKey").ToString());
            Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("windowsUserConfiguration").GetProperty("loginMode").ToString());
            Console.WriteLine(result.GetProperty("metadata")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("metadata")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("url").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("lastUpdateTime").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("usageStats").GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("usageStats").GetProperty("lastUpdateTime").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("usageStats").GetProperty("dedicatedCoreTime").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("lastUpdateTime").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("avgCPUPercentage").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("avgMemoryGiB").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("peakMemoryGiB").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("avgDiskGiB").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("peakDiskGiB").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("diskReadIOps").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("diskWriteIOps").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("diskReadGiB").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("diskWriteGiB").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("networkReadGiB").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("networkWriteGiB").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("accountName").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("containerName").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("accountKey").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("sasKey").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("blobfuseOptions").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("relativeMountPath").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("relativeMountPath").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("mountOptions").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("relativeMountPath").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("mountOptions").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("password").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("accountName").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("azureFileUrl").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("accountKey").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("relativeMountPath").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("mountOptions").ToString());
            Console.WriteLine(result.GetProperty("identity").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("identity").GetProperty("userAssignedIdentities")[0].GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("identity").GetProperty("userAssignedIdentities")[0].GetProperty("clientId").ToString());
            Console.WriteLine(result.GetProperty("identity").GetProperty("userAssignedIdentities")[0].GetProperty("principalId").ToString());
            Console.WriteLine(result.GetProperty("targetNodeCommunicationMode").ToString());
            Console.WriteLine(result.GetProperty("currentNodeCommunicationMode").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetPool_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new PoolClient("<batchUrl>", credential);

            Response response = await client.GetPoolAsync("<poolId>", "<select>", "<expand>", 1234, DateTimeOffset.UtcNow, null, new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetPool_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new PoolClient("<batchUrl>", credential);

            Response response = await client.GetPoolAsync("<poolId>", "<select>", "<expand>", 1234, DateTimeOffset.UtcNow, null, new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("displayName").ToString());
            Console.WriteLine(result.GetProperty("url").ToString());
            Console.WriteLine(result.GetProperty("eTag").ToString());
            Console.WriteLine(result.GetProperty("lastModified").ToString());
            Console.WriteLine(result.GetProperty("creationTime").ToString());
            Console.WriteLine(result.GetProperty("state").ToString());
            Console.WriteLine(result.GetProperty("stateTransitionTime").ToString());
            Console.WriteLine(result.GetProperty("allocationState").ToString());
            Console.WriteLine(result.GetProperty("allocationStateTransitionTime").ToString());
            Console.WriteLine(result.GetProperty("vmSize").ToString());
            Console.WriteLine(result.GetProperty("cloudServiceConfiguration").GetProperty("osFamily").ToString());
            Console.WriteLine(result.GetProperty("cloudServiceConfiguration").GetProperty("osVersion").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("publisher").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("offer").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("sku").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("virtualMachineImageId").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("exactVersion").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("nodeAgentSKUId").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("windowsConfiguration").GetProperty("enableAutomaticUpdates").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("lun").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("caching").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("diskSizeGB").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("storageAccountType").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("licenseType").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerImageNames")[0].ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("password").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("registryServer").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("diskEncryptionConfiguration").GetProperty("targets")[0].ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("nodePlacementConfiguration").GetProperty("policy").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("publisher").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("typeHandlerVersion").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("autoUpgradeMinorVersion").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("enableAutomaticUpgrade").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("settings").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("protectedSettings").ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("provisionAfterExtensions")[0].ToString());
            Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("ephemeralOSDiskSettings").GetProperty("placement").ToString());
            Console.WriteLine(result.GetProperty("resizeTimeout").ToString());
            Console.WriteLine(result.GetProperty("resizeErrors")[0].GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("resizeErrors")[0].GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("resizeErrors")[0].GetProperty("values")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("resizeErrors")[0].GetProperty("values")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("currentDedicatedNodes").ToString());
            Console.WriteLine(result.GetProperty("currentLowPriorityNodes").ToString());
            Console.WriteLine(result.GetProperty("targetDedicatedNodes").ToString());
            Console.WriteLine(result.GetProperty("targetLowPriorityNodes").ToString());
            Console.WriteLine(result.GetProperty("enableAutoScale").ToString());
            Console.WriteLine(result.GetProperty("autoScaleFormula").ToString());
            Console.WriteLine(result.GetProperty("autoScaleEvaluationInterval").ToString());
            Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("timestamp").ToString());
            Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("results").ToString());
            Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("error").GetProperty("values")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("error").GetProperty("values")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("enableInterNodeCommunication").ToString());
            Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("subnetId").ToString());
            Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("dynamicVNetAssignmentScope").ToString());
            Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("protocol").ToString());
            Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("backendPort").ToString());
            Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("frontendPortRangeStart").ToString());
            Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("frontendPortRangeEnd").ToString());
            Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("priority").ToString());
            Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("access").ToString());
            Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("sourceAddressPrefix").ToString());
            Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("sourcePortRanges")[0].ToString());
            Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("publicIPAddressConfiguration").GetProperty("provision").ToString());
            Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("publicIPAddressConfiguration").GetProperty("ipAddressIds")[0].ToString());
            Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("enableAcceleratedNetworking").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("commandLine").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("containerRunOptions").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("imageName").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("password").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("registryServer").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("workingDirectory").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("autoStorageContainerName").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("storageContainerUrl").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("httpUrl").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("blobPrefix").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("filePath").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("fileMode").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("environmentSettings")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("environmentSettings")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("userIdentity").GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("scope").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("elevationLevel").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("maxTaskRetryCount").ToString());
            Console.WriteLine(result.GetProperty("startTask").GetProperty("waitForSuccess").ToString());
            Console.WriteLine(result.GetProperty("certificateReferences")[0].GetProperty("thumbprint").ToString());
            Console.WriteLine(result.GetProperty("certificateReferences")[0].GetProperty("thumbprintAlgorithm").ToString());
            Console.WriteLine(result.GetProperty("certificateReferences")[0].GetProperty("storeLocation").ToString());
            Console.WriteLine(result.GetProperty("certificateReferences")[0].GetProperty("storeName").ToString());
            Console.WriteLine(result.GetProperty("certificateReferences")[0].GetProperty("visibility")[0].ToString());
            Console.WriteLine(result.GetProperty("applicationPackageReferences")[0].GetProperty("applicationId").ToString());
            Console.WriteLine(result.GetProperty("applicationPackageReferences")[0].GetProperty("version").ToString());
            Console.WriteLine(result.GetProperty("applicationLicenses")[0].ToString());
            Console.WriteLine(result.GetProperty("taskSlotsPerNode").ToString());
            Console.WriteLine(result.GetProperty("taskSchedulingPolicy").GetProperty("nodeFillType").ToString());
            Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("password").ToString());
            Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("elevationLevel").ToString());
            Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("uid").ToString());
            Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("gid").ToString());
            Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("sshPrivateKey").ToString());
            Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("windowsUserConfiguration").GetProperty("loginMode").ToString());
            Console.WriteLine(result.GetProperty("metadata")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("metadata")[0].GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("url").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("lastUpdateTime").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("usageStats").GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("usageStats").GetProperty("lastUpdateTime").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("usageStats").GetProperty("dedicatedCoreTime").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("lastUpdateTime").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("avgCPUPercentage").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("avgMemoryGiB").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("peakMemoryGiB").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("avgDiskGiB").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("peakDiskGiB").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("diskReadIOps").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("diskWriteIOps").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("diskReadGiB").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("diskWriteGiB").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("networkReadGiB").ToString());
            Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("networkWriteGiB").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("accountName").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("containerName").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("accountKey").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("sasKey").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("blobfuseOptions").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("relativeMountPath").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("identityReference").GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("relativeMountPath").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("mountOptions").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("username").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("relativeMountPath").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("mountOptions").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("password").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("accountName").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("azureFileUrl").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("accountKey").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("relativeMountPath").ToString());
            Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("mountOptions").ToString());
            Console.WriteLine(result.GetProperty("identity").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("identity").GetProperty("userAssignedIdentities")[0].GetProperty("resourceId").ToString());
            Console.WriteLine(result.GetProperty("identity").GetProperty("userAssignedIdentities")[0].GetProperty("clientId").ToString());
            Console.WriteLine(result.GetProperty("identity").GetProperty("userAssignedIdentities")[0].GetProperty("principalId").ToString());
            Console.WriteLine(result.GetProperty("targetNodeCommunicationMode").ToString());
            Console.WriteLine(result.GetProperty("currentNodeCommunicationMode").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Patch()
        {
            var credential = new DefaultAzureCredential();
            var client = new PoolClient("<batchUrl>", credential);

            var data = new { };

            Response response = client.Patch("<poolId>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Patch_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new PoolClient("<batchUrl>", credential);

            var data = new
            {
                startTask = new
                {
                    commandLine = "<commandLine>",
                    containerSettings = new
                    {
                        containerRunOptions = "<containerRunOptions>",
                        imageName = "<imageName>",
                        registry = new
                        {
                            username = "<username>",
                            password = "<password>",
                            registryServer = "<registryServer>",
                            identityReference = new
                            {
                                resourceId = "<resourceId>",
                            },
                        },
                        workingDirectory = "taskWorkingDirectory",
                    },
                    resourceFiles = new[] {
            new {
                autoStorageContainerName = "<autoStorageContainerName>",
                storageContainerUrl = "<storageContainerUrl>",
                httpUrl = "<httpUrl>",
                blobPrefix = "<blobPrefix>",
                filePath = "<filePath>",
                fileMode = "<fileMode>",
                identityReference = new {
                    resourceId = "<resourceId>",
                },
            }
        },
                    environmentSettings = new[] {
            new {
                name = "<name>",
                value = "<value>",
            }
        },
                    userIdentity = new
                    {
                        username = "<username>",
                        autoUser = new
                        {
                            scope = "task",
                            elevationLevel = "nonadmin",
                        },
                    },
                    maxTaskRetryCount = 1234,
                    waitForSuccess = true,
                },
                certificateReferences = new[] {
        new {
            thumbprint = "<thumbprint>",
            thumbprintAlgorithm = "<thumbprintAlgorithm>",
            storeLocation = "currentuser",
            storeName = "<storeName>",
            visibility = new[] {
                "starttask"
            },
        }
    },
                applicationPackageReferences = new[] {
        new {
            applicationId = "<applicationId>",
            version = "<version>",
        }
    },
                metadata = new[] {
        new {
            name = "<name>",
            value = "<value>",
        }
    },
                targetNodeCommunicationMode = "default",
            };

            Response response = client.Patch("<poolId>", RequestContent.Create(data), 1234, DateTimeOffset.UtcNow, null);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Patch_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new PoolClient("<batchUrl>", credential);

            var data = new { };

            Response response = await client.PatchAsync("<poolId>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Patch_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new PoolClient("<batchUrl>", credential);

            var data = new
            {
                startTask = new
                {
                    commandLine = "<commandLine>",
                    containerSettings = new
                    {
                        containerRunOptions = "<containerRunOptions>",
                        imageName = "<imageName>",
                        registry = new
                        {
                            username = "<username>",
                            password = "<password>",
                            registryServer = "<registryServer>",
                            identityReference = new
                            {
                                resourceId = "<resourceId>",
                            },
                        },
                        workingDirectory = "taskWorkingDirectory",
                    },
                    resourceFiles = new[] {
            new {
                autoStorageContainerName = "<autoStorageContainerName>",
                storageContainerUrl = "<storageContainerUrl>",
                httpUrl = "<httpUrl>",
                blobPrefix = "<blobPrefix>",
                filePath = "<filePath>",
                fileMode = "<fileMode>",
                identityReference = new {
                    resourceId = "<resourceId>",
                },
            }
        },
                    environmentSettings = new[] {
            new {
                name = "<name>",
                value = "<value>",
            }
        },
                    userIdentity = new
                    {
                        username = "<username>",
                        autoUser = new
                        {
                            scope = "task",
                            elevationLevel = "nonadmin",
                        },
                    },
                    maxTaskRetryCount = 1234,
                    waitForSuccess = true,
                },
                certificateReferences = new[] {
        new {
            thumbprint = "<thumbprint>",
            thumbprintAlgorithm = "<thumbprintAlgorithm>",
            storeLocation = "currentuser",
            storeName = "<storeName>",
            visibility = new[] {
                "starttask"
            },
        }
    },
                applicationPackageReferences = new[] {
        new {
            applicationId = "<applicationId>",
            version = "<version>",
        }
    },
                metadata = new[] {
        new {
            name = "<name>",
            value = "<value>",
        }
    },
                targetNodeCommunicationMode = "default",
            };

            Response response = await client.PatchAsync("<poolId>", RequestContent.Create(data), 1234, DateTimeOffset.UtcNow, null);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DisableAutoScale()
        {
            var credential = new DefaultAzureCredential();
            var client = new PoolClient("<batchUrl>", credential);

            Response response = client.DisableAutoScale("<poolId>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_DisableAutoScale_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new PoolClient("<batchUrl>", credential);

            Response response = client.DisableAutoScale("<poolId>", 1234, DateTimeOffset.UtcNow);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DisableAutoScale_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new PoolClient("<batchUrl>", credential);

            Response response = await client.DisableAutoScaleAsync("<poolId>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_DisableAutoScale_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new PoolClient("<batchUrl>", credential);

            Response response = await client.DisableAutoScaleAsync("<poolId>", 1234, DateTimeOffset.UtcNow);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnableAutoScale()
        {
            var credential = new DefaultAzureCredential();
            var client = new PoolClient("<batchUrl>", credential);

            var data = new { };

            Response response = client.EnableAutoScale("<poolId>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EnableAutoScale_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new PoolClient("<batchUrl>", credential);

            var data = new
            {
                autoScaleFormula = "<autoScaleFormula>",
                autoScaleEvaluationInterval = "PT1H23M45S",
            };

            Response response = client.EnableAutoScale("<poolId>", RequestContent.Create(data), 1234, DateTimeOffset.UtcNow, null);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnableAutoScale_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new PoolClient("<batchUrl>", credential);

            var data = new { };

            Response response = await client.EnableAutoScaleAsync("<poolId>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EnableAutoScale_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new PoolClient("<batchUrl>", credential);

            var data = new
            {
                autoScaleFormula = "<autoScaleFormula>",
                autoScaleEvaluationInterval = "PT1H23M45S",
            };

            Response response = await client.EnableAutoScaleAsync("<poolId>", RequestContent.Create(data), 1234, DateTimeOffset.UtcNow, null);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EvaluateAutoScale()
        {
            var credential = new DefaultAzureCredential();
            var client = new PoolClient("<batchUrl>", credential);

            var data = new
            {
                autoScaleFormula = "<autoScaleFormula>",
            };

            Response response = client.EvaluateAutoScale("<poolId>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("timestamp").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_EvaluateAutoScale_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new PoolClient("<batchUrl>", credential);

            var data = new
            {
                autoScaleFormula = "<autoScaleFormula>",
            };

            Response response = client.EvaluateAutoScale("<poolId>", RequestContent.Create(data), 1234, DateTimeOffset.UtcNow);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("timestamp").ToString());
            Console.WriteLine(result.GetProperty("results").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("values")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("values")[0].GetProperty("value").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EvaluateAutoScale_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new PoolClient("<batchUrl>", credential);

            var data = new
            {
                autoScaleFormula = "<autoScaleFormula>",
            };

            Response response = await client.EvaluateAutoScaleAsync("<poolId>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("timestamp").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_EvaluateAutoScale_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new PoolClient("<batchUrl>", credential);

            var data = new
            {
                autoScaleFormula = "<autoScaleFormula>",
            };

            Response response = await client.EvaluateAutoScaleAsync("<poolId>", RequestContent.Create(data), 1234, DateTimeOffset.UtcNow);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("timestamp").ToString());
            Console.WriteLine(result.GetProperty("results").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("code").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("values")[0].GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("error").GetProperty("values")[0].GetProperty("value").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Resize()
        {
            var credential = new DefaultAzureCredential();
            var client = new PoolClient("<batchUrl>", credential);

            var data = new { };

            Response response = client.Resize("<poolId>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Resize_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new PoolClient("<batchUrl>", credential);

            var data = new
            {
                targetDedicatedNodes = 1234,
                targetLowPriorityNodes = 1234,
                resizeTimeout = "PT1H23M45S",
                nodeDeallocationOption = "requeue",
            };

            Response response = client.Resize("<poolId>", RequestContent.Create(data), 1234, DateTimeOffset.UtcNow, null);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Resize_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new PoolClient("<batchUrl>", credential);

            var data = new { };

            Response response = await client.ResizeAsync("<poolId>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Resize_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new PoolClient("<batchUrl>", credential);

            var data = new
            {
                targetDedicatedNodes = 1234,
                targetLowPriorityNodes = 1234,
                resizeTimeout = "PT1H23M45S",
                nodeDeallocationOption = "requeue",
            };

            Response response = await client.ResizeAsync("<poolId>", RequestContent.Create(data), 1234, DateTimeOffset.UtcNow, null);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StopResize()
        {
            var credential = new DefaultAzureCredential();
            var client = new PoolClient("<batchUrl>", credential);

            Response response = client.StopResize("<poolId>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_StopResize_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new PoolClient("<batchUrl>", credential);

            Response response = client.StopResize("<poolId>", 1234, DateTimeOffset.UtcNow, null);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StopResize_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new PoolClient("<batchUrl>", credential);

            Response response = await client.StopResizeAsync("<poolId>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_StopResize_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new PoolClient("<batchUrl>", credential);

            Response response = await client.StopResizeAsync("<poolId>", 1234, DateTimeOffset.UtcNow, null);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UpdateProperties()
        {
            var credential = new DefaultAzureCredential();
            var client = new PoolClient("<batchUrl>", credential);

            var data = new
            {
                certificateReferences = new[] {
        new {
            thumbprint = "<thumbprint>",
            thumbprintAlgorithm = "<thumbprintAlgorithm>",
        }
    },
                applicationPackageReferences = new[] {
        new {
            applicationId = "<applicationId>",
        }
    },
                metadata = new[] {
        new {
            name = "<name>",
            value = "<value>",
        }
    },
            };

            Response response = client.UpdateProperties("<poolId>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UpdateProperties_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new PoolClient("<batchUrl>", credential);

            var data = new
            {
                startTask = new
                {
                    commandLine = "<commandLine>",
                    containerSettings = new
                    {
                        containerRunOptions = "<containerRunOptions>",
                        imageName = "<imageName>",
                        registry = new
                        {
                            username = "<username>",
                            password = "<password>",
                            registryServer = "<registryServer>",
                            identityReference = new
                            {
                                resourceId = "<resourceId>",
                            },
                        },
                        workingDirectory = "taskWorkingDirectory",
                    },
                    resourceFiles = new[] {
            new {
                autoStorageContainerName = "<autoStorageContainerName>",
                storageContainerUrl = "<storageContainerUrl>",
                httpUrl = "<httpUrl>",
                blobPrefix = "<blobPrefix>",
                filePath = "<filePath>",
                fileMode = "<fileMode>",
                identityReference = new {
                    resourceId = "<resourceId>",
                },
            }
        },
                    environmentSettings = new[] {
            new {
                name = "<name>",
                value = "<value>",
            }
        },
                    userIdentity = new
                    {
                        username = "<username>",
                        autoUser = new
                        {
                            scope = "task",
                            elevationLevel = "nonadmin",
                        },
                    },
                    maxTaskRetryCount = 1234,
                    waitForSuccess = true,
                },
                certificateReferences = new[] {
        new {
            thumbprint = "<thumbprint>",
            thumbprintAlgorithm = "<thumbprintAlgorithm>",
            storeLocation = "currentuser",
            storeName = "<storeName>",
            visibility = new[] {
                "starttask"
            },
        }
    },
                applicationPackageReferences = new[] {
        new {
            applicationId = "<applicationId>",
            version = "<version>",
        }
    },
                metadata = new[] {
        new {
            name = "<name>",
            value = "<value>",
        }
    },
                targetNodeCommunicationMode = "default",
            };

            Response response = client.UpdateProperties("<poolId>", RequestContent.Create(data), 1234, DateTimeOffset.UtcNow);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UpdateProperties_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new PoolClient("<batchUrl>", credential);

            var data = new
            {
                certificateReferences = new[] {
        new {
            thumbprint = "<thumbprint>",
            thumbprintAlgorithm = "<thumbprintAlgorithm>",
        }
    },
                applicationPackageReferences = new[] {
        new {
            applicationId = "<applicationId>",
        }
    },
                metadata = new[] {
        new {
            name = "<name>",
            value = "<value>",
        }
    },
            };

            Response response = await client.UpdatePropertiesAsync("<poolId>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UpdateProperties_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new PoolClient("<batchUrl>", credential);

            var data = new
            {
                startTask = new
                {
                    commandLine = "<commandLine>",
                    containerSettings = new
                    {
                        containerRunOptions = "<containerRunOptions>",
                        imageName = "<imageName>",
                        registry = new
                        {
                            username = "<username>",
                            password = "<password>",
                            registryServer = "<registryServer>",
                            identityReference = new
                            {
                                resourceId = "<resourceId>",
                            },
                        },
                        workingDirectory = "taskWorkingDirectory",
                    },
                    resourceFiles = new[] {
            new {
                autoStorageContainerName = "<autoStorageContainerName>",
                storageContainerUrl = "<storageContainerUrl>",
                httpUrl = "<httpUrl>",
                blobPrefix = "<blobPrefix>",
                filePath = "<filePath>",
                fileMode = "<fileMode>",
                identityReference = new {
                    resourceId = "<resourceId>",
                },
            }
        },
                    environmentSettings = new[] {
            new {
                name = "<name>",
                value = "<value>",
            }
        },
                    userIdentity = new
                    {
                        username = "<username>",
                        autoUser = new
                        {
                            scope = "task",
                            elevationLevel = "nonadmin",
                        },
                    },
                    maxTaskRetryCount = 1234,
                    waitForSuccess = true,
                },
                certificateReferences = new[] {
        new {
            thumbprint = "<thumbprint>",
            thumbprintAlgorithm = "<thumbprintAlgorithm>",
            storeLocation = "currentuser",
            storeName = "<storeName>",
            visibility = new[] {
                "starttask"
            },
        }
    },
                applicationPackageReferences = new[] {
        new {
            applicationId = "<applicationId>",
            version = "<version>",
        }
    },
                metadata = new[] {
        new {
            name = "<name>",
            value = "<value>",
        }
    },
                targetNodeCommunicationMode = "default",
            };

            Response response = await client.UpdatePropertiesAsync("<poolId>", RequestContent.Create(data), 1234, DateTimeOffset.UtcNow);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RemoveNodes()
        {
            var credential = new DefaultAzureCredential();
            var client = new PoolClient("<batchUrl>", credential);

            var data = new
            {
                nodeList = new[] {
        "<String>"
    },
            };

            Response response = client.RemoveNodes("<poolId>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_RemoveNodes_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new PoolClient("<batchUrl>", credential);

            var data = new
            {
                nodeList = new[] {
        "<String>"
    },
                resizeTimeout = "PT1H23M45S",
                nodeDeallocationOption = "requeue",
            };

            Response response = client.RemoveNodes("<poolId>", RequestContent.Create(data), 1234, DateTimeOffset.UtcNow, null);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RemoveNodes_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new PoolClient("<batchUrl>", credential);

            var data = new
            {
                nodeList = new[] {
        "<String>"
    },
            };

            Response response = await client.RemoveNodesAsync("<poolId>", RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_RemoveNodes_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new PoolClient("<batchUrl>", credential);

            var data = new
            {
                nodeList = new[] {
        "<String>"
    },
                resizeTimeout = "PT1H23M45S",
                nodeDeallocationOption = "requeue",
            };

            Response response = await client.RemoveNodesAsync("<poolId>", RequestContent.Create(data), 1234, DateTimeOffset.UtcNow, null);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetUsageMetrics()
        {
            var credential = new DefaultAzureCredential();
            var client = new PoolClient("<batchUrl>", credential);

            foreach (var item in client.GetUsageMetrics(DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, "<filter>", 1234, 1234, DateTimeOffset.UtcNow, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("poolId").ToString());
                Console.WriteLine(result.GetProperty("startTime").ToString());
                Console.WriteLine(result.GetProperty("endTime").ToString());
                Console.WriteLine(result.GetProperty("vmSize").ToString());
                Console.WriteLine(result.GetProperty("totalCoreHours").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetUsageMetrics_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new PoolClient("<batchUrl>", credential);

            foreach (var item in client.GetUsageMetrics(DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, "<filter>", 1234, 1234, DateTimeOffset.UtcNow, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("poolId").ToString());
                Console.WriteLine(result.GetProperty("startTime").ToString());
                Console.WriteLine(result.GetProperty("endTime").ToString());
                Console.WriteLine(result.GetProperty("vmSize").ToString());
                Console.WriteLine(result.GetProperty("totalCoreHours").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetUsageMetrics_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new PoolClient("<batchUrl>", credential);

            await foreach (var item in client.GetUsageMetricsAsync(DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, "<filter>", 1234, 1234, DateTimeOffset.UtcNow, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("poolId").ToString());
                Console.WriteLine(result.GetProperty("startTime").ToString());
                Console.WriteLine(result.GetProperty("endTime").ToString());
                Console.WriteLine(result.GetProperty("vmSize").ToString());
                Console.WriteLine(result.GetProperty("totalCoreHours").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetUsageMetrics_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new PoolClient("<batchUrl>", credential);

            await foreach (var item in client.GetUsageMetricsAsync(DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, "<filter>", 1234, 1234, DateTimeOffset.UtcNow, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("poolId").ToString());
                Console.WriteLine(result.GetProperty("startTime").ToString());
                Console.WriteLine(result.GetProperty("endTime").ToString());
                Console.WriteLine(result.GetProperty("vmSize").ToString());
                Console.WriteLine(result.GetProperty("totalCoreHours").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetPools()
        {
            var credential = new DefaultAzureCredential();
            var client = new PoolClient("<batchUrl>", credential);

            foreach (var item in client.GetPools("<filter>", "<select>", "<expand>", 1234, 1234, DateTimeOffset.UtcNow, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetPools_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new PoolClient("<batchUrl>", credential);

            foreach (var item in client.GetPools("<filter>", "<select>", "<expand>", 1234, 1234, DateTimeOffset.UtcNow, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("url").ToString());
                Console.WriteLine(result.GetProperty("eTag").ToString());
                Console.WriteLine(result.GetProperty("lastModified").ToString());
                Console.WriteLine(result.GetProperty("creationTime").ToString());
                Console.WriteLine(result.GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("stateTransitionTime").ToString());
                Console.WriteLine(result.GetProperty("allocationState").ToString());
                Console.WriteLine(result.GetProperty("allocationStateTransitionTime").ToString());
                Console.WriteLine(result.GetProperty("vmSize").ToString());
                Console.WriteLine(result.GetProperty("cloudServiceConfiguration").GetProperty("osFamily").ToString());
                Console.WriteLine(result.GetProperty("cloudServiceConfiguration").GetProperty("osVersion").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("publisher").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("offer").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("sku").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("virtualMachineImageId").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("exactVersion").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("nodeAgentSKUId").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("windowsConfiguration").GetProperty("enableAutomaticUpdates").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("lun").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("caching").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("diskSizeGB").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("storageAccountType").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("licenseType").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerImageNames")[0].ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("password").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("registryServer").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("diskEncryptionConfiguration").GetProperty("targets")[0].ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("nodePlacementConfiguration").GetProperty("policy").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("publisher").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("typeHandlerVersion").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("autoUpgradeMinorVersion").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("enableAutomaticUpgrade").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("settings").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("protectedSettings").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("provisionAfterExtensions")[0].ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("ephemeralOSDiskSettings").GetProperty("placement").ToString());
                Console.WriteLine(result.GetProperty("resizeTimeout").ToString());
                Console.WriteLine(result.GetProperty("resizeErrors")[0].GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("resizeErrors")[0].GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("resizeErrors")[0].GetProperty("values")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("resizeErrors")[0].GetProperty("values")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("currentDedicatedNodes").ToString());
                Console.WriteLine(result.GetProperty("currentLowPriorityNodes").ToString());
                Console.WriteLine(result.GetProperty("targetDedicatedNodes").ToString());
                Console.WriteLine(result.GetProperty("targetLowPriorityNodes").ToString());
                Console.WriteLine(result.GetProperty("enableAutoScale").ToString());
                Console.WriteLine(result.GetProperty("autoScaleFormula").ToString());
                Console.WriteLine(result.GetProperty("autoScaleEvaluationInterval").ToString());
                Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("timestamp").ToString());
                Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("results").ToString());
                Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("error").GetProperty("values")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("error").GetProperty("values")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("enableInterNodeCommunication").ToString());
                Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("subnetId").ToString());
                Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("dynamicVNetAssignmentScope").ToString());
                Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("protocol").ToString());
                Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("backendPort").ToString());
                Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("frontendPortRangeStart").ToString());
                Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("frontendPortRangeEnd").ToString());
                Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("priority").ToString());
                Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("access").ToString());
                Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("sourceAddressPrefix").ToString());
                Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("sourcePortRanges")[0].ToString());
                Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("publicIPAddressConfiguration").GetProperty("provision").ToString());
                Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("publicIPAddressConfiguration").GetProperty("ipAddressIds")[0].ToString());
                Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("enableAcceleratedNetworking").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("commandLine").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("containerRunOptions").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("imageName").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("password").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("registryServer").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("workingDirectory").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("autoStorageContainerName").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("storageContainerUrl").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("httpUrl").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("blobPrefix").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("filePath").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("fileMode").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("environmentSettings")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("environmentSettings")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("userIdentity").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("scope").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("elevationLevel").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("maxTaskRetryCount").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("waitForSuccess").ToString());
                Console.WriteLine(result.GetProperty("certificateReferences")[0].GetProperty("thumbprint").ToString());
                Console.WriteLine(result.GetProperty("certificateReferences")[0].GetProperty("thumbprintAlgorithm").ToString());
                Console.WriteLine(result.GetProperty("certificateReferences")[0].GetProperty("storeLocation").ToString());
                Console.WriteLine(result.GetProperty("certificateReferences")[0].GetProperty("storeName").ToString());
                Console.WriteLine(result.GetProperty("certificateReferences")[0].GetProperty("visibility")[0].ToString());
                Console.WriteLine(result.GetProperty("applicationPackageReferences")[0].GetProperty("applicationId").ToString());
                Console.WriteLine(result.GetProperty("applicationPackageReferences")[0].GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("applicationLicenses")[0].ToString());
                Console.WriteLine(result.GetProperty("taskSlotsPerNode").ToString());
                Console.WriteLine(result.GetProperty("taskSchedulingPolicy").GetProperty("nodeFillType").ToString());
                Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("password").ToString());
                Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("elevationLevel").ToString());
                Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("uid").ToString());
                Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("gid").ToString());
                Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("sshPrivateKey").ToString());
                Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("windowsUserConfiguration").GetProperty("loginMode").ToString());
                Console.WriteLine(result.GetProperty("metadata")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("metadata")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("url").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("startTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("lastUpdateTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("usageStats").GetProperty("startTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("usageStats").GetProperty("lastUpdateTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("usageStats").GetProperty("dedicatedCoreTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("startTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("lastUpdateTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("avgCPUPercentage").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("avgMemoryGiB").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("peakMemoryGiB").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("avgDiskGiB").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("peakDiskGiB").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("diskReadIOps").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("diskWriteIOps").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("diskReadGiB").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("diskWriteGiB").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("networkReadGiB").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("networkWriteGiB").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("accountName").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("containerName").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("accountKey").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("sasKey").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("blobfuseOptions").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("relativeMountPath").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("source").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("relativeMountPath").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("mountOptions").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("source").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("relativeMountPath").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("mountOptions").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("password").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("accountName").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("azureFileUrl").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("accountKey").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("relativeMountPath").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("mountOptions").ToString());
                Console.WriteLine(result.GetProperty("identity").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("identity").GetProperty("userAssignedIdentities")[0].GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("identity").GetProperty("userAssignedIdentities")[0].GetProperty("clientId").ToString());
                Console.WriteLine(result.GetProperty("identity").GetProperty("userAssignedIdentities")[0].GetProperty("principalId").ToString());
                Console.WriteLine(result.GetProperty("targetNodeCommunicationMode").ToString());
                Console.WriteLine(result.GetProperty("currentNodeCommunicationMode").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetPools_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new PoolClient("<batchUrl>", credential);

            await foreach (var item in client.GetPoolsAsync("<filter>", "<select>", "<expand>", 1234, 1234, DateTimeOffset.UtcNow, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetPools_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new PoolClient("<batchUrl>", credential);

            await foreach (var item in client.GetPoolsAsync("<filter>", "<select>", "<expand>", 1234, 1234, DateTimeOffset.UtcNow, new RequestContext()))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("displayName").ToString());
                Console.WriteLine(result.GetProperty("url").ToString());
                Console.WriteLine(result.GetProperty("eTag").ToString());
                Console.WriteLine(result.GetProperty("lastModified").ToString());
                Console.WriteLine(result.GetProperty("creationTime").ToString());
                Console.WriteLine(result.GetProperty("state").ToString());
                Console.WriteLine(result.GetProperty("stateTransitionTime").ToString());
                Console.WriteLine(result.GetProperty("allocationState").ToString());
                Console.WriteLine(result.GetProperty("allocationStateTransitionTime").ToString());
                Console.WriteLine(result.GetProperty("vmSize").ToString());
                Console.WriteLine(result.GetProperty("cloudServiceConfiguration").GetProperty("osFamily").ToString());
                Console.WriteLine(result.GetProperty("cloudServiceConfiguration").GetProperty("osVersion").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("publisher").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("offer").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("sku").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("virtualMachineImageId").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("imageReference").GetProperty("exactVersion").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("nodeAgentSKUId").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("windowsConfiguration").GetProperty("enableAutomaticUpdates").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("lun").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("caching").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("diskSizeGB").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("dataDisks")[0].GetProperty("storageAccountType").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("licenseType").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerImageNames")[0].ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("password").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("registryServer").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("containerConfiguration").GetProperty("containerRegistries")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("diskEncryptionConfiguration").GetProperty("targets")[0].ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("nodePlacementConfiguration").GetProperty("policy").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("publisher").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("typeHandlerVersion").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("autoUpgradeMinorVersion").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("enableAutomaticUpgrade").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("settings").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("protectedSettings").ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("extensions")[0].GetProperty("provisionAfterExtensions")[0].ToString());
                Console.WriteLine(result.GetProperty("virtualMachineConfiguration").GetProperty("osDisk").GetProperty("ephemeralOSDiskSettings").GetProperty("placement").ToString());
                Console.WriteLine(result.GetProperty("resizeTimeout").ToString());
                Console.WriteLine(result.GetProperty("resizeErrors")[0].GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("resizeErrors")[0].GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("resizeErrors")[0].GetProperty("values")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("resizeErrors")[0].GetProperty("values")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("currentDedicatedNodes").ToString());
                Console.WriteLine(result.GetProperty("currentLowPriorityNodes").ToString());
                Console.WriteLine(result.GetProperty("targetDedicatedNodes").ToString());
                Console.WriteLine(result.GetProperty("targetLowPriorityNodes").ToString());
                Console.WriteLine(result.GetProperty("enableAutoScale").ToString());
                Console.WriteLine(result.GetProperty("autoScaleFormula").ToString());
                Console.WriteLine(result.GetProperty("autoScaleEvaluationInterval").ToString());
                Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("timestamp").ToString());
                Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("results").ToString());
                Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("error").GetProperty("code").ToString());
                Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("error").GetProperty("message").ToString());
                Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("error").GetProperty("values")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("autoScaleRun").GetProperty("error").GetProperty("values")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("enableInterNodeCommunication").ToString());
                Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("subnetId").ToString());
                Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("dynamicVNetAssignmentScope").ToString());
                Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("protocol").ToString());
                Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("backendPort").ToString());
                Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("frontendPortRangeStart").ToString());
                Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("frontendPortRangeEnd").ToString());
                Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("priority").ToString());
                Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("access").ToString());
                Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("sourceAddressPrefix").ToString());
                Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("endpointConfiguration").GetProperty("inboundNATPools")[0].GetProperty("networkSecurityGroupRules")[0].GetProperty("sourcePortRanges")[0].ToString());
                Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("publicIPAddressConfiguration").GetProperty("provision").ToString());
                Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("publicIPAddressConfiguration").GetProperty("ipAddressIds")[0].ToString());
                Console.WriteLine(result.GetProperty("networkConfiguration").GetProperty("enableAcceleratedNetworking").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("commandLine").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("containerRunOptions").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("imageName").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("password").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("registryServer").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("registry").GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("containerSettings").GetProperty("workingDirectory").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("autoStorageContainerName").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("storageContainerUrl").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("httpUrl").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("blobPrefix").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("filePath").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("fileMode").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("resourceFiles")[0].GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("environmentSettings")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("environmentSettings")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("userIdentity").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("scope").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("userIdentity").GetProperty("autoUser").GetProperty("elevationLevel").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("maxTaskRetryCount").ToString());
                Console.WriteLine(result.GetProperty("startTask").GetProperty("waitForSuccess").ToString());
                Console.WriteLine(result.GetProperty("certificateReferences")[0].GetProperty("thumbprint").ToString());
                Console.WriteLine(result.GetProperty("certificateReferences")[0].GetProperty("thumbprintAlgorithm").ToString());
                Console.WriteLine(result.GetProperty("certificateReferences")[0].GetProperty("storeLocation").ToString());
                Console.WriteLine(result.GetProperty("certificateReferences")[0].GetProperty("storeName").ToString());
                Console.WriteLine(result.GetProperty("certificateReferences")[0].GetProperty("visibility")[0].ToString());
                Console.WriteLine(result.GetProperty("applicationPackageReferences")[0].GetProperty("applicationId").ToString());
                Console.WriteLine(result.GetProperty("applicationPackageReferences")[0].GetProperty("version").ToString());
                Console.WriteLine(result.GetProperty("applicationLicenses")[0].ToString());
                Console.WriteLine(result.GetProperty("taskSlotsPerNode").ToString());
                Console.WriteLine(result.GetProperty("taskSchedulingPolicy").GetProperty("nodeFillType").ToString());
                Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("password").ToString());
                Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("elevationLevel").ToString());
                Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("uid").ToString());
                Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("gid").ToString());
                Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("linuxUserConfiguration").GetProperty("sshPrivateKey").ToString());
                Console.WriteLine(result.GetProperty("userAccounts")[0].GetProperty("windowsUserConfiguration").GetProperty("loginMode").ToString());
                Console.WriteLine(result.GetProperty("metadata")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("metadata")[0].GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("url").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("startTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("lastUpdateTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("usageStats").GetProperty("startTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("usageStats").GetProperty("lastUpdateTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("usageStats").GetProperty("dedicatedCoreTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("startTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("lastUpdateTime").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("avgCPUPercentage").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("avgMemoryGiB").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("peakMemoryGiB").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("avgDiskGiB").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("peakDiskGiB").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("diskReadIOps").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("diskWriteIOps").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("diskReadGiB").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("diskWriteGiB").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("networkReadGiB").ToString());
                Console.WriteLine(result.GetProperty("stats").GetProperty("resourceStats").GetProperty("networkWriteGiB").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("accountName").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("containerName").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("accountKey").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("sasKey").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("blobfuseOptions").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("relativeMountPath").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureBlobFileSystemConfiguration").GetProperty("identityReference").GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("source").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("relativeMountPath").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("nfsMountConfiguration").GetProperty("mountOptions").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("username").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("source").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("relativeMountPath").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("mountOptions").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("cifsMountConfiguration").GetProperty("password").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("accountName").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("azureFileUrl").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("accountKey").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("relativeMountPath").ToString());
                Console.WriteLine(result.GetProperty("mountConfiguration")[0].GetProperty("azureFileShareConfiguration").GetProperty("mountOptions").ToString());
                Console.WriteLine(result.GetProperty("identity").GetProperty("type").ToString());
                Console.WriteLine(result.GetProperty("identity").GetProperty("userAssignedIdentities")[0].GetProperty("resourceId").ToString());
                Console.WriteLine(result.GetProperty("identity").GetProperty("userAssignedIdentities")[0].GetProperty("clientId").ToString());
                Console.WriteLine(result.GetProperty("identity").GetProperty("userAssignedIdentities")[0].GetProperty("principalId").ToString());
                Console.WriteLine(result.GetProperty("targetNodeCommunicationMode").ToString());
                Console.WriteLine(result.GetProperty("currentNodeCommunicationMode").ToString());
            }
        }
    }
}
