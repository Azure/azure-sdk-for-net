// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.Temp.Batch.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class TempBatchModelFactory
    {
        /// <summary> Initializes a new instance of ApplicationSummary. </summary>
        /// <param name="id"> A string that uniquely identifies the application within the Account. </param>
        /// <param name="displayName"> The display name for the application. </param>
        /// <param name="versions"> The list of available versions of the application. </param>
        /// <returns> A new <see cref="Models.ApplicationSummary"/> instance for mocking. </returns>
        public static ApplicationSummary ApplicationSummary(string id = null, string displayName = null, IEnumerable<string> versions = null)
        {
            versions ??= new List<string>();

            return new ApplicationSummary(id, displayName, versions?.ToList());
        }

        /// <summary> Initializes a new instance of BatchError. </summary>
        /// <param name="code"> An identifier for the error. Codes are invariant and are intended to be consumed programmatically. </param>
        /// <param name="message"> An error message received in an Azure Batch error response. </param>
        /// <param name="values"> A collection of key-value pairs containing additional details about the error. </param>
        /// <returns> A new <see cref="Models.BatchError"/> instance for mocking. </returns>
        public static BatchError BatchError(string code = null, ErrorMessage message = null, IEnumerable<BatchErrorDetail> values = null)
        {
            values ??= new List<BatchErrorDetail>();

            return new BatchError(code, message, values?.ToList());
        }

        /// <summary> Initializes a new instance of ErrorMessage. </summary>
        /// <param name="lang"> The language code of the error message. </param>
        /// <param name="value"> The text of the message. </param>
        /// <returns> A new <see cref="Models.ErrorMessage"/> instance for mocking. </returns>
        public static ErrorMessage ErrorMessage(string lang = null, string value = null)
        {
            return new ErrorMessage(lang, value);
        }

        /// <summary> Initializes a new instance of BatchErrorDetail. </summary>
        /// <param name="key"> An identifier specifying the meaning of the Value property. </param>
        /// <param name="value"> The additional information included with the error response. </param>
        /// <returns> A new <see cref="Models.BatchErrorDetail"/> instance for mocking. </returns>
        public static BatchErrorDetail BatchErrorDetail(string key = null, string value = null)
        {
            return new BatchErrorDetail(key, value);
        }

        /// <summary> Initializes a new instance of PoolUsageMetrics. </summary>
        /// <param name="poolId"> The ID of the Pool whose metrics are aggregated in this entry. </param>
        /// <param name="startTime"> The start time of the aggregation interval covered by this entry. </param>
        /// <param name="endTime"> The end time of the aggregation interval covered by this entry. </param>
        /// <param name="vmSize"> For information about available sizes of virtual machines in Pools, see Choose a VM size for Compute Nodes in an Azure Batch Pool (https://docs.microsoft.com/azure/batch/batch-pool-vm-sizes). </param>
        /// <param name="totalCoreHours"> The total core hours used in the Pool during this aggregation interval. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="vmSize"/> is null. </exception>
        /// <returns> A new <see cref="Models.PoolUsageMetrics"/> instance for mocking. </returns>
        public static PoolUsageMetrics PoolUsageMetrics(string poolId = null, DateTimeOffset startTime = default, DateTimeOffset endTime = default, string vmSize = null, double totalCoreHours = default)
        {
            if (poolId == null)
            {
                throw new ArgumentNullException(nameof(poolId));
            }
            if (vmSize == null)
            {
                throw new ArgumentNullException(nameof(vmSize));
            }

            return new PoolUsageMetrics(poolId, startTime, endTime, vmSize, totalCoreHours);
        }

        /// <summary> Initializes a new instance of ImageInformation. </summary>
        /// <param name="nodeAgentSKUId"> The ID of the Compute Node agent SKU which the Image supports. </param>
        /// <param name="imageReference"> A reference to an Azure Virtual Machines Marketplace Image or a Shared Image Gallery Image. To get the list of all Azure Marketplace Image references verified by Azure Batch, see the 'List Supported Images' operation. </param>
        /// <param name="osType"> The type of operating system (e.g. Windows or Linux) of the Image. </param>
        /// <param name="capabilities"> Not every capability of the Image is listed. Capabilities in this list are considered of special interest and are generally related to integration with other features in the Azure Batch service. </param>
        /// <param name="batchSupportEndOfLife"> The time when the Azure Batch service will stop accepting create Pool requests for the Image. </param>
        /// <param name="verificationType"> Whether the Azure Batch service actively verifies that the Image is compatible with the associated Compute Node agent SKU. </param>
        /// <returns> A new <see cref="Models.ImageInformation"/> instance for mocking. </returns>
        public static ImageInformation ImageInformation(string nodeAgentSKUId = null, ImageReference imageReference = null, OSType osType = default, IEnumerable<string> capabilities = null, DateTimeOffset? batchSupportEndOfLife = null, VerificationType verificationType = default)
        {
            capabilities ??= new List<string>();

            return new ImageInformation(nodeAgentSKUId, imageReference, osType, capabilities?.ToList(), batchSupportEndOfLife, verificationType);
        }

        /// <summary> Initializes a new instance of ImageReference. </summary>
        /// <param name="publisher"> For example, Canonical or MicrosoftWindowsServer. </param>
        /// <param name="offer"> For example, UbuntuServer or WindowsServer. </param>
        /// <param name="sku"> For example, 18.04-LTS or 2019-Datacenter. </param>
        /// <param name="version"> A value of 'latest' can be specified to select the latest version of an Image. If omitted, the default is 'latest'. </param>
        /// <param name="virtualMachineImageId"> This property is mutually exclusive with other ImageReference properties. The Shared Image Gallery Image must have replicas in the same region and must be in the same subscription as the Azure Batch account. If the image version is not specified in the imageId, the latest version will be used. For information about the firewall settings for the Batch Compute Node agent to communicate with the Batch service see https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration. </param>
        /// <param name="exactVersion"> The specific version of the platform image or marketplace image used to create the node. This read-only field differs from 'version' only if the value specified for 'version' when the pool was created was 'latest'. </param>
        /// <returns> A new <see cref="Models.ImageReference"/> instance for mocking. </returns>
        public static ImageReference ImageReference(string publisher = null, string offer = null, string sku = null, string version = null, string virtualMachineImageId = null, string exactVersion = null)
        {
            return new ImageReference(publisher, offer, sku, version, virtualMachineImageId, exactVersion);
        }

        /// <summary> Initializes a new instance of PoolNodeCounts. </summary>
        /// <param name="poolId"> The ID of the Pool. </param>
        /// <param name="dedicated"> The number of Compute Nodes in each Compute Node state. </param>
        /// <param name="lowPriority"> The number of Compute Nodes in each Compute Node state. </param>
        /// <returns> A new <see cref="Models.PoolNodeCounts"/> instance for mocking. </returns>
        public static PoolNodeCounts PoolNodeCounts(string poolId = null, NodeCounts dedicated = null, NodeCounts lowPriority = null)
        {
            return new PoolNodeCounts(poolId, dedicated, lowPriority);
        }

        /// <summary> Initializes a new instance of NodeCounts. </summary>
        /// <param name="creating"> The number of Compute Nodes in the creating state. </param>
        /// <param name="idle"> The number of Compute Nodes in the idle state. </param>
        /// <param name="offline"> The number of Compute Nodes in the offline state. </param>
        /// <param name="preempted"> The number of Compute Nodes in the preempted state. </param>
        /// <param name="rebooting"> The count of Compute Nodes in the rebooting state. </param>
        /// <param name="reimaging"> The number of Compute Nodes in the reimaging state. </param>
        /// <param name="running"> The number of Compute Nodes in the running state. </param>
        /// <param name="starting"> The number of Compute Nodes in the starting state. </param>
        /// <param name="startTaskFailed"> The number of Compute Nodes in the startTaskFailed state. </param>
        /// <param name="leavingPool"> The number of Compute Nodes in the leavingPool state. </param>
        /// <param name="unknown"> The number of Compute Nodes in the unknown state. </param>
        /// <param name="unusable"> The number of Compute Nodes in the unusable state. </param>
        /// <param name="waitingForStartTask"> The number of Compute Nodes in the waitingForStartTask state. </param>
        /// <param name="total"> The total number of Compute Nodes. </param>
        /// <returns> A new <see cref="Models.NodeCounts"/> instance for mocking. </returns>
        public static NodeCounts NodeCounts(int creating = default, int idle = default, int offline = default, int preempted = default, int rebooting = default, int reimaging = default, int running = default, int starting = default, int startTaskFailed = default, int leavingPool = default, int unknown = default, int unusable = default, int waitingForStartTask = default, int total = default)
        {
            return new NodeCounts(creating, idle, offline, preempted, rebooting, reimaging, running, starting, startTaskFailed, leavingPool, unknown, unusable, waitingForStartTask, total);
        }

        /// <summary> Initializes a new instance of Certificate. </summary>
        /// <param name="thumbprint"> The X.509 thumbprint of the Certificate. This is a sequence of up to 40 hex digits. </param>
        /// <param name="thumbprintAlgorithm"> The algorithm used to derive the thumbprint. </param>
        /// <param name="url"> The URL of the Certificate. </param>
        /// <param name="state"> The state of the Certificate. </param>
        /// <param name="stateTransitionTime"> The time at which the Certificate entered its current state. </param>
        /// <param name="previousState"> This property is not set if the Certificate is in its initial active state. </param>
        /// <param name="previousStateTransitionTime"> This property is not set if the Certificate is in its initial Active state. </param>
        /// <param name="publicData"> The public part of the Certificate as a base-64 encoded .cer file. </param>
        /// <param name="deleteCertificateError"> This property is set only if the Certificate is in the DeleteFailed state. </param>
        /// <returns> A new <see cref="Models.Certificate"/> instance for mocking. </returns>
        public static Certificate Certificate(string thumbprint = null, string thumbprintAlgorithm = null, string url = null, CertificateState? state = null, DateTimeOffset? stateTransitionTime = null, CertificateState? previousState = null, DateTimeOffset? previousStateTransitionTime = null, string publicData = null, DeleteCertificateError deleteCertificateError = null)
        {
            return new Certificate(thumbprint, thumbprintAlgorithm, url, state, stateTransitionTime, previousState, previousStateTransitionTime, publicData, deleteCertificateError);
        }

        /// <summary> Initializes a new instance of DeleteCertificateError. </summary>
        /// <param name="code"> An identifier for the Certificate deletion error. Codes are invariant and are intended to be consumed programmatically. </param>
        /// <param name="message"> A message describing the Certificate deletion error, intended to be suitable for display in a user interface. </param>
        /// <param name="values"> This list includes details such as the active Pools and Compute Nodes referencing this Certificate. However, if a large number of resources reference the Certificate, the list contains only about the first hundred. </param>
        /// <returns> A new <see cref="Models.DeleteCertificateError"/> instance for mocking. </returns>
        public static DeleteCertificateError DeleteCertificateError(string code = null, string message = null, IEnumerable<NameValuePair> values = null)
        {
            values ??= new List<NameValuePair>();

            return new DeleteCertificateError(code, message, values?.ToList());
        }

        /// <summary> Initializes a new instance of NameValuePair. </summary>
        /// <param name="name"> The name in the name-value pair. </param>
        /// <param name="value"> The value in the name-value pair. </param>
        /// <returns> A new <see cref="Models.NameValuePair"/> instance for mocking. </returns>
        public static NameValuePair NameValuePair(string name = null, string value = null)
        {
            return new NameValuePair(name, value);
        }

        /// <summary> Initializes a new instance of NodeFile. </summary>
        /// <param name="name"> The file path. </param>
        /// <param name="url"> The URL of the file. </param>
        /// <param name="isDirectory"> Whether the object represents a directory. </param>
        /// <param name="properties"> The properties of a file on a Compute Node. </param>
        /// <returns> A new <see cref="Models.NodeFile"/> instance for mocking. </returns>
        public static NodeFile NodeFile(string name = null, string url = null, bool? isDirectory = null, FileProperties properties = null)
        {
            return new NodeFile(name, url, isDirectory, properties);
        }

        /// <summary> Initializes a new instance of FileProperties. </summary>
        /// <param name="creationTime"> The creation time is not returned for files on Linux Compute Nodes. </param>
        /// <param name="lastModified"> The time at which the file was last modified. </param>
        /// <param name="contentLength"> The length of the file. </param>
        /// <param name="contentType"> The content type of the file. </param>
        /// <param name="fileMode"> The file mode is returned only for files on Linux Compute Nodes. </param>
        /// <returns> A new <see cref="Models.FileProperties"/> instance for mocking. </returns>
        public static FileProperties FileProperties(DateTimeOffset? creationTime = null, DateTimeOffset lastModified = default, long contentLength = default, string contentType = null, string fileMode = null)
        {
            return new FileProperties(creationTime, lastModified, contentLength, contentType, fileMode);
        }

        /// <summary> Initializes a new instance of CloudJobSchedule. </summary>
        /// <param name="id"> A string that uniquely identifies the schedule within the Account. </param>
        /// <param name="displayName"> The display name for the schedule. </param>
        /// <param name="url"> The URL of the Job Schedule. </param>
        /// <param name="eTag"> This is an opaque string. You can use it to detect whether the Job Schedule has changed between requests. In particular, you can be pass the ETag with an Update Job Schedule request to specify that your changes should take effect only if nobody else has modified the schedule in the meantime. </param>
        /// <param name="lastModified"> This is the last time at which the schedule level data, such as the Job specification or recurrence information, changed. It does not factor in job-level changes such as new Jobs being created or Jobs changing state. </param>
        /// <param name="creationTime"> The creation time of the Job Schedule. </param>
        /// <param name="state"> The state of the Job Schedule. </param>
        /// <param name="stateTransitionTime"> The time at which the Job Schedule entered the current state. </param>
        /// <param name="previousState"> This property is not present if the Job Schedule is in its initial active state. </param>
        /// <param name="previousStateTransitionTime"> This property is not present if the Job Schedule is in its initial active state. </param>
        /// <param name="schedule"> All times are fixed respective to UTC and are not impacted by daylight saving time. </param>
        /// <param name="jobSpecification"> Specifies details of the Jobs to be created on a schedule. </param>
        /// <param name="executionInfo"> Contains information about Jobs that have been and will be run under a Job Schedule. </param>
        /// <param name="metadata"> The Batch service does not assign any meaning to metadata; it is solely for the use of user code. </param>
        /// <param name="stats"> Resource usage statistics for a Job Schedule. </param>
        /// <returns> A new <see cref="Models.CloudJobSchedule"/> instance for mocking. </returns>
        public static CloudJobSchedule CloudJobSchedule(string id = null, string displayName = null, string url = null, string eTag = null, DateTimeOffset? lastModified = null, DateTimeOffset? creationTime = null, JobScheduleState? state = null, DateTimeOffset? stateTransitionTime = null, JobScheduleState? previousState = null, DateTimeOffset? previousStateTransitionTime = null, Schedule schedule = null, JobSpecification jobSpecification = null, JobScheduleExecutionInformation executionInfo = null, IEnumerable<MetadataItem> metadata = null, JobScheduleStatistics stats = null)
        {
            metadata ??= new List<MetadataItem>();

            return new CloudJobSchedule(id, displayName, url, eTag, lastModified, creationTime, state, stateTransitionTime, previousState, previousStateTransitionTime, schedule, jobSpecification, executionInfo, metadata?.ToList(), stats);
        }

        /// <summary> Initializes a new instance of JobScheduleExecutionInformation. </summary>
        /// <param name="nextRunTime"> This property is meaningful only if the schedule is in the active state when the time comes around. For example, if the schedule is disabled, no Job will be created at nextRunTime unless the Job is enabled before then. </param>
        /// <param name="recentJob"> This property is present only if the at least one Job has run under the schedule. </param>
        /// <param name="endTime"> This property is set only if the Job Schedule is in the completed state. </param>
        /// <returns> A new <see cref="Models.JobScheduleExecutionInformation"/> instance for mocking. </returns>
        public static JobScheduleExecutionInformation JobScheduleExecutionInformation(DateTimeOffset? nextRunTime = null, RecentJob recentJob = null, DateTimeOffset? endTime = null)
        {
            return new JobScheduleExecutionInformation(nextRunTime, recentJob, endTime);
        }

        /// <summary> Initializes a new instance of RecentJob. </summary>
        /// <param name="id"> The ID of the Job. </param>
        /// <param name="url"> The URL of the Job. </param>
        /// <returns> A new <see cref="Models.RecentJob"/> instance for mocking. </returns>
        public static RecentJob RecentJob(string id = null, string url = null)
        {
            return new RecentJob(id, url);
        }

        /// <summary> Initializes a new instance of JobScheduleStatistics. </summary>
        /// <param name="url"> The URL of the statistics. </param>
        /// <param name="startTime"> The start time of the time range covered by the statistics. </param>
        /// <param name="lastUpdateTime"> The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime. </param>
        /// <param name="userCPUTime"> The total user mode CPU time (summed across all cores and all Compute Nodes) consumed by all Tasks in all Jobs created under the schedule. </param>
        /// <param name="kernelCPUTime"> The total kernel mode CPU time (summed across all cores and all Compute Nodes) consumed by all Tasks in all Jobs created under the schedule. </param>
        /// <param name="wallClockTime"> The wall clock time is the elapsed time from when the Task started running on a Compute Node to when it finished (or to the last time the statistics were updated, if the Task had not finished by then). If a Task was retried, this includes the wall clock time of all the Task retries. </param>
        /// <param name="readIOps"> The total number of disk read operations made by all Tasks in all Jobs created under the schedule. </param>
        /// <param name="writeIOps"> The total number of disk write operations made by all Tasks in all Jobs created under the schedule. </param>
        /// <param name="readIOGiB"> The total gibibytes read from disk by all Tasks in all Jobs created under the schedule. </param>
        /// <param name="writeIOGiB"> The total gibibytes written to disk by all Tasks in all Jobs created under the schedule. </param>
        /// <param name="numSucceededTasks"> The total number of Tasks successfully completed during the given time range in Jobs created under the schedule. A Task completes successfully if it returns exit code 0. </param>
        /// <param name="numFailedTasks"> The total number of Tasks that failed during the given time range in Jobs created under the schedule. A Task fails if it exhausts its maximum retry count without returning exit code 0. </param>
        /// <param name="numTaskRetries"> The total number of retries during the given time range on all Tasks in all Jobs created under the schedule. </param>
        /// <param name="waitTime"> This value is only reported in the Account lifetime statistics; it is not included in the Job statistics. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="url"/> is null. </exception>
        /// <returns> A new <see cref="Models.JobScheduleStatistics"/> instance for mocking. </returns>
        public static JobScheduleStatistics JobScheduleStatistics(string url = null, DateTimeOffset startTime = default, DateTimeOffset lastUpdateTime = default, TimeSpan userCPUTime = default, TimeSpan kernelCPUTime = default, TimeSpan wallClockTime = default, long readIOps = default, long writeIOps = default, double readIOGiB = default, double writeIOGiB = default, long numSucceededTasks = default, long numFailedTasks = default, long numTaskRetries = default, TimeSpan waitTime = default)
        {
            if (url == null)
            {
                throw new ArgumentNullException(nameof(url));
            }

            return new JobScheduleStatistics(url, startTime, lastUpdateTime, userCPUTime, kernelCPUTime, wallClockTime, readIOps, writeIOps, readIOGiB, writeIOGiB, numSucceededTasks, numFailedTasks, numTaskRetries, waitTime);
        }

        /// <summary> Initializes a new instance of CloudJob. </summary>
        /// <param name="id"> The ID is case-preserving and case-insensitive (that is, you may not have two IDs within an Account that differ only by case). </param>
        /// <param name="displayName"> The display name for the Job. </param>
        /// <param name="usesTaskDependencies"> Whether Tasks in the Job can define dependencies on each other. The default is false. </param>
        /// <param name="url"> The URL of the Job. </param>
        /// <param name="eTag"> This is an opaque string. You can use it to detect whether the Job has changed between requests. In particular, you can be pass the ETag when updating a Job to specify that your changes should take effect only if nobody else has modified the Job in the meantime. </param>
        /// <param name="lastModified"> This is the last time at which the Job level data, such as the Job state or priority, changed. It does not factor in task-level changes such as adding new Tasks or Tasks changing state. </param>
        /// <param name="creationTime"> The creation time of the Job. </param>
        /// <param name="state"> The state of the Job. </param>
        /// <param name="stateTransitionTime"> The time at which the Job entered its current state. </param>
        /// <param name="previousState"> This property is not set if the Job is in its initial Active state. </param>
        /// <param name="previousStateTransitionTime"> This property is not set if the Job is in its initial Active state. </param>
        /// <param name="priority"> Priority values can range from -1000 to 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default value is 0. </param>
        /// <param name="allowTaskPreemption"> If the value is set to True, other high priority jobs submitted to the system will take precedence and will be able requeue tasks from this job. You can update a job's allowTaskPreemption after it has been created using the update job API. </param>
        /// <param name="maxParallelTasks"> The value of maxParallelTasks must be -1 or greater than 0 if specified. If not specified, the default value is -1, which means there's no limit to the number of tasks that can be run at once. You can update a job's maxParallelTasks after it has been created using the update job API. </param>
        /// <param name="constraints"> The execution constraints for a Job. </param>
        /// <param name="jobManagerTask"> The Job Manager Task is automatically started when the Job is created. The Batch service tries to schedule the Job Manager Task before any other Tasks in the Job. When shrinking a Pool, the Batch service tries to preserve Nodes where Job Manager Tasks are running for as long as possible (that is, Compute Nodes running 'normal' Tasks are removed before Compute Nodes running Job Manager Tasks). When a Job Manager Task fails and needs to be restarted, the system tries to schedule it at the highest priority. If there are no idle Compute Nodes available, the system may terminate one of the running Tasks in the Pool and return it to the queue in order to make room for the Job Manager Task to restart. Note that a Job Manager Task in one Job does not have priority over Tasks in other Jobs. Across Jobs, only Job level priorities are observed. For example, if a Job Manager in a priority 0 Job needs to be restarted, it will not displace Tasks of a priority 1 Job. Batch will retry Tasks when a recovery operation is triggered on a Node. Examples of recovery operations include (but are not limited to) when an unhealthy Node is rebooted or a Compute Node disappeared due to host failure. Retries due to recovery operations are independent of and are not counted against the maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal retry due to a recovery operation may occur. Because of this, all Tasks should be idempotent. This means Tasks need to tolerate being interrupted and restarted without causing any corruption or duplicate data. The best practice for long running Tasks is to use some form of checkpointing. </param>
        /// <param name="jobPreparationTask"> The Job Preparation Task is a special Task run on each Compute Node before any other Task of the Job. </param>
        /// <param name="jobReleaseTask"> The Job Release Task is a special Task run at the end of the Job on each Compute Node that has run any other Task of the Job. </param>
        /// <param name="commonEnvironmentSettings"> Individual Tasks can override an environment setting specified here by specifying the same setting name with a different value. </param>
        /// <param name="poolInfo"> Specifies how a Job should be assigned to a Pool. </param>
        /// <param name="onAllTasksComplete"> The default is noaction. </param>
        /// <param name="onTaskFailure"> A Task is considered to have failed if has a failureInfo. A failureInfo is set if the Task completes with a non-zero exit code after exhausting its retry count, or if there was an error starting the Task, for example due to a resource file download error. The default is noaction. </param>
        /// <param name="networkConfiguration"> The network configuration for the Job. </param>
        /// <param name="metadata"> The Batch service does not assign any meaning to metadata; it is solely for the use of user code. </param>
        /// <param name="executionInfo"> Contains information about the execution of a Job in the Azure Batch service. </param>
        /// <param name="stats"> This property is populated only if the CloudJob was retrieved with an expand clause including the 'stats' attribute; otherwise it is null. The statistics may not be immediately available. The Batch service performs periodic roll-up of statistics. The typical delay is about 30 minutes. </param>
        /// <returns> A new <see cref="Models.CloudJob"/> instance for mocking. </returns>
        public static CloudJob CloudJob(string id = null, string displayName = null, bool? usesTaskDependencies = null, string url = null, string eTag = null, DateTimeOffset? lastModified = null, DateTimeOffset? creationTime = null, JobState? state = null, DateTimeOffset? stateTransitionTime = null, JobState? previousState = null, DateTimeOffset? previousStateTransitionTime = null, int? priority = null, bool? allowTaskPreemption = null, int? maxParallelTasks = null, JobConstraints constraints = null, JobManagerTask jobManagerTask = null, JobPreparationTask jobPreparationTask = null, JobReleaseTask jobReleaseTask = null, IEnumerable<EnvironmentSetting> commonEnvironmentSettings = null, PoolInformation poolInfo = null, OnAllTasksComplete? onAllTasksComplete = null, OnTaskFailure? onTaskFailure = null, JobNetworkConfiguration networkConfiguration = null, IEnumerable<MetadataItem> metadata = null, JobExecutionInformation executionInfo = null, JobStatistics stats = null)
        {
            commonEnvironmentSettings ??= new List<EnvironmentSetting>();
            metadata ??= new List<MetadataItem>();

            return new CloudJob(id, displayName, usesTaskDependencies, url, eTag, lastModified, creationTime, state, stateTransitionTime, previousState, previousStateTransitionTime, priority, allowTaskPreemption, maxParallelTasks, constraints, jobManagerTask, jobPreparationTask, jobReleaseTask, commonEnvironmentSettings?.ToList(), poolInfo, onAllTasksComplete, onTaskFailure, networkConfiguration, metadata?.ToList(), executionInfo, stats);
        }

        /// <summary> Initializes a new instance of JobExecutionInformation. </summary>
        /// <param name="startTime"> This is the time at which the Job was created. </param>
        /// <param name="endTime"> This property is set only if the Job is in the completed state. </param>
        /// <param name="poolId"> This element contains the actual Pool where the Job is assigned. When you get Job details from the service, they also contain a poolInfo element, which contains the Pool configuration data from when the Job was added or updated. That poolInfo element may also contain a poolId element. If it does, the two IDs are the same. If it does not, it means the Job ran on an auto Pool, and this property contains the ID of that auto Pool. </param>
        /// <param name="schedulingError"> This property is not set if there was no error starting the Job. </param>
        /// <param name="terminateReason"> This property is set only if the Job is in the completed state. If the Batch service terminates the Job, it sets the reason as follows: JMComplete - the Job Manager Task completed, and killJobOnCompletion was set to true. MaxWallClockTimeExpiry - the Job reached its maxWallClockTime constraint. TerminateJobSchedule - the Job ran as part of a schedule, and the schedule terminated. AllTasksComplete - the Job's onAllTasksComplete attribute is set to terminatejob, and all Tasks in the Job are complete. TaskFailed - the Job's onTaskFailure attribute is set to performExitOptionsJobAction, and a Task in the Job failed with an exit condition that specified a jobAction of terminatejob. Any other string is a user-defined reason specified in a call to the 'Terminate a Job' operation. </param>
        /// <returns> A new <see cref="Models.JobExecutionInformation"/> instance for mocking. </returns>
        public static JobExecutionInformation JobExecutionInformation(DateTimeOffset startTime = default, DateTimeOffset? endTime = null, string poolId = null, JobSchedulingError schedulingError = null, string terminateReason = null)
        {
            return new JobExecutionInformation(startTime, endTime, poolId, schedulingError, terminateReason);
        }

        /// <summary> Initializes a new instance of JobSchedulingError. </summary>
        /// <param name="category"> The category of the error. </param>
        /// <param name="code"> An identifier for the Job scheduling error. Codes are invariant and are intended to be consumed programmatically. </param>
        /// <param name="message"> A message describing the Job scheduling error, intended to be suitable for display in a user interface. </param>
        /// <param name="details"> A list of additional error details related to the scheduling error. </param>
        /// <returns> A new <see cref="Models.JobSchedulingError"/> instance for mocking. </returns>
        public static JobSchedulingError JobSchedulingError(ErrorCategory category = default, string code = null, string message = null, IEnumerable<NameValuePair> details = null)
        {
            details ??= new List<NameValuePair>();

            return new JobSchedulingError(category, code, message, details?.ToList());
        }

        /// <summary> Initializes a new instance of JobStatistics. </summary>
        /// <param name="url"> The URL of the statistics. </param>
        /// <param name="startTime"> The start time of the time range covered by the statistics. </param>
        /// <param name="lastUpdateTime"> The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime. </param>
        /// <param name="userCPUTime"> The total user mode CPU time (summed across all cores and all Compute Nodes) consumed by all Tasks in the Job. </param>
        /// <param name="kernelCPUTime"> The total kernel mode CPU time (summed across all cores and all Compute Nodes) consumed by all Tasks in the Job. </param>
        /// <param name="wallClockTime"> The wall clock time is the elapsed time from when the Task started running on a Compute Node to when it finished (or to the last time the statistics were updated, if the Task had not finished by then). If a Task was retried, this includes the wall clock time of all the Task retries. </param>
        /// <param name="readIOps"> The total number of disk read operations made by all Tasks in the Job. </param>
        /// <param name="writeIOps"> The total number of disk write operations made by all Tasks in the Job. </param>
        /// <param name="readIOGiB"> The total amount of data in GiB read from disk by all Tasks in the Job. </param>
        /// <param name="writeIOGiB"> The total amount of data in GiB written to disk by all Tasks in the Job. </param>
        /// <param name="numSucceededTasks"> A Task completes successfully if it returns exit code 0. </param>
        /// <param name="numFailedTasks"> A Task fails if it exhausts its maximum retry count without returning exit code 0. </param>
        /// <param name="numTaskRetries"> The total number of retries on all the Tasks in the Job during the given time range. </param>
        /// <param name="waitTime"> The wait time for a Task is defined as the elapsed time between the creation of the Task and the start of Task execution. (If the Task is retried due to failures, the wait time is the time to the most recent Task execution.) This value is only reported in the Account lifetime statistics; it is not included in the Job statistics. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="url"/> is null. </exception>
        /// <returns> A new <see cref="Models.JobStatistics"/> instance for mocking. </returns>
        public static JobStatistics JobStatistics(string url = null, DateTimeOffset startTime = default, DateTimeOffset lastUpdateTime = default, TimeSpan userCPUTime = default, TimeSpan kernelCPUTime = default, TimeSpan wallClockTime = default, long readIOps = default, long writeIOps = default, double readIOGiB = default, double writeIOGiB = default, long numSucceededTasks = default, long numFailedTasks = default, long numTaskRetries = default, TimeSpan waitTime = default)
        {
            if (url == null)
            {
                throw new ArgumentNullException(nameof(url));
            }

            return new JobStatistics(url, startTime, lastUpdateTime, userCPUTime, kernelCPUTime, wallClockTime, readIOps, writeIOps, readIOGiB, writeIOGiB, numSucceededTasks, numFailedTasks, numTaskRetries, waitTime);
        }

        /// <summary> Initializes a new instance of JobPreparationAndReleaseTaskExecutionInformation. </summary>
        /// <param name="poolId"> The ID of the Pool containing the Compute Node to which this entry refers. </param>
        /// <param name="nodeId"> The ID of the Compute Node to which this entry refers. </param>
        /// <param name="nodeUrl"> The URL of the Compute Node to which this entry refers. </param>
        /// <param name="jobPreparationTaskExecutionInfo"> Contains information about the execution of a Job Preparation Task on a Compute Node. </param>
        /// <param name="jobReleaseTaskExecutionInfo"> This property is set only if the Job Release Task has run on the Compute Node. </param>
        /// <returns> A new <see cref="Models.JobPreparationAndReleaseTaskExecutionInformation"/> instance for mocking. </returns>
        public static JobPreparationAndReleaseTaskExecutionInformation JobPreparationAndReleaseTaskExecutionInformation(string poolId = null, string nodeId = null, string nodeUrl = null, JobPreparationTaskExecutionInformation jobPreparationTaskExecutionInfo = null, JobReleaseTaskExecutionInformation jobReleaseTaskExecutionInfo = null)
        {
            return new JobPreparationAndReleaseTaskExecutionInformation(poolId, nodeId, nodeUrl, jobPreparationTaskExecutionInfo, jobReleaseTaskExecutionInfo);
        }

        /// <summary> Initializes a new instance of JobPreparationTaskExecutionInformation. </summary>
        /// <param name="startTime"> If the Task has been restarted or retried, this is the most recent time at which the Task started running. </param>
        /// <param name="endTime"> This property is set only if the Task is in the Completed state. </param>
        /// <param name="state"> The current state of the Job Preparation Task on the Compute Node. </param>
        /// <param name="taskRootDirectory"> The root directory of the Job Preparation Task on the Compute Node. You can use this path to retrieve files created by the Task, such as log files. </param>
        /// <param name="taskRootDirectoryUrl"> The URL to the root directory of the Job Preparation Task on the Compute Node. </param>
        /// <param name="exitCode"> This parameter is returned only if the Task is in the completed state. The exit code for a process reflects the specific convention implemented by the application developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process. Note that the exit code may also be generated by the Compute Node operating system, such as when a process is forcibly terminated. </param>
        /// <param name="containerInfo"> This property is set only if the Task runs in a container context. </param>
        /// <param name="failureInfo"> This property is set only if the Task is in the completed state and encountered a failure. </param>
        /// <param name="retryCount"> Task application failures (non-zero exit code) are retried, pre-processing errors (the Task could not be run) and file upload errors are not retried. The Batch service will retry the Task up to the limit specified by the constraints. </param>
        /// <param name="lastRetryTime"> This property is set only if the Task was retried (i.e. retryCount is nonzero). If present, this is typically the same as startTime, but may be different if the Task has been restarted for reasons other than retry; for example, if the Compute Node was rebooted during a retry, then the startTime is updated but the lastRetryTime is not. </param>
        /// <param name="result"> If the value is 'failed', then the details of the failure can be found in the failureInfo property. </param>
        /// <returns> A new <see cref="Models.JobPreparationTaskExecutionInformation"/> instance for mocking. </returns>
        public static JobPreparationTaskExecutionInformation JobPreparationTaskExecutionInformation(DateTimeOffset startTime = default, DateTimeOffset? endTime = null, JobPreparationTaskState state = default, string taskRootDirectory = null, string taskRootDirectoryUrl = null, int? exitCode = null, TaskContainerExecutionInformation containerInfo = null, TaskFailureInformation failureInfo = null, int retryCount = default, DateTimeOffset? lastRetryTime = null, TaskExecutionResult? result = null)
        {
            return new JobPreparationTaskExecutionInformation(startTime, endTime, state, taskRootDirectory, taskRootDirectoryUrl, exitCode, containerInfo, failureInfo, retryCount, lastRetryTime, result);
        }

        /// <summary> Initializes a new instance of TaskContainerExecutionInformation. </summary>
        /// <param name="containerId"> The ID of the container. </param>
        /// <param name="state"> This is the state of the container according to the Docker service. It is equivalent to the status field returned by "docker inspect". </param>
        /// <param name="error"> This is the detailed error string from the Docker service, if available. It is equivalent to the error field returned by "docker inspect". </param>
        /// <returns> A new <see cref="Models.TaskContainerExecutionInformation"/> instance for mocking. </returns>
        public static TaskContainerExecutionInformation TaskContainerExecutionInformation(string containerId = null, string state = null, string error = null)
        {
            return new TaskContainerExecutionInformation(containerId, state, error);
        }

        /// <summary> Initializes a new instance of TaskFailureInformation. </summary>
        /// <param name="category"> The category of the error. </param>
        /// <param name="code"> An identifier for the Task error. Codes are invariant and are intended to be consumed programmatically. </param>
        /// <param name="message"> A message describing the Task error, intended to be suitable for display in a user interface. </param>
        /// <param name="details"> A list of additional details related to the error. </param>
        /// <returns> A new <see cref="Models.TaskFailureInformation"/> instance for mocking. </returns>
        public static TaskFailureInformation TaskFailureInformation(ErrorCategory category = default, string code = null, string message = null, IEnumerable<NameValuePair> details = null)
        {
            details ??= new List<NameValuePair>();

            return new TaskFailureInformation(category, code, message, details?.ToList());
        }

        /// <summary> Initializes a new instance of JobReleaseTaskExecutionInformation. </summary>
        /// <param name="startTime"> If the Task has been restarted or retried, this is the most recent time at which the Task started running. </param>
        /// <param name="endTime"> This property is set only if the Task is in the Completed state. </param>
        /// <param name="state"> The current state of the Job Release Task on the Compute Node. </param>
        /// <param name="taskRootDirectory"> The root directory of the Job Release Task on the Compute Node. You can use this path to retrieve files created by the Task, such as log files. </param>
        /// <param name="taskRootDirectoryUrl"> The URL to the root directory of the Job Release Task on the Compute Node. </param>
        /// <param name="exitCode"> This parameter is returned only if the Task is in the completed state. The exit code for a process reflects the specific convention implemented by the application developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process. Note that the exit code may also be generated by the Compute Node operating system, such as when a process is forcibly terminated. </param>
        /// <param name="containerInfo"> This property is set only if the Task runs in a container context. </param>
        /// <param name="failureInfo"> This property is set only if the Task is in the completed state and encountered a failure. </param>
        /// <param name="result"> If the value is 'failed', then the details of the failure can be found in the failureInfo property. </param>
        /// <returns> A new <see cref="Models.JobReleaseTaskExecutionInformation"/> instance for mocking. </returns>
        public static JobReleaseTaskExecutionInformation JobReleaseTaskExecutionInformation(DateTimeOffset startTime = default, DateTimeOffset? endTime = null, JobReleaseTaskState state = default, string taskRootDirectory = null, string taskRootDirectoryUrl = null, int? exitCode = null, TaskContainerExecutionInformation containerInfo = null, TaskFailureInformation failureInfo = null, TaskExecutionResult? result = null)
        {
            return new JobReleaseTaskExecutionInformation(startTime, endTime, state, taskRootDirectory, taskRootDirectoryUrl, exitCode, containerInfo, failureInfo, result);
        }

        /// <summary> Initializes a new instance of TaskCountsResult. </summary>
        /// <param name="taskCounts"> The Task counts for a Job. </param>
        /// <param name="taskSlotCounts"> The TaskSlot counts for a Job. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="taskCounts"/> or <paramref name="taskSlotCounts"/> is null. </exception>
        /// <returns> A new <see cref="Models.TaskCountsResult"/> instance for mocking. </returns>
        public static TaskCountsResult TaskCountsResult(TaskCounts taskCounts = null, TaskSlotCounts taskSlotCounts = null)
        {
            if (taskCounts == null)
            {
                throw new ArgumentNullException(nameof(taskCounts));
            }
            if (taskSlotCounts == null)
            {
                throw new ArgumentNullException(nameof(taskSlotCounts));
            }

            return new TaskCountsResult(taskCounts, taskSlotCounts);
        }

        /// <summary> Initializes a new instance of TaskCounts. </summary>
        /// <param name="active"> The number of Tasks in the active state. </param>
        /// <param name="running"> The number of Tasks in the running or preparing state. </param>
        /// <param name="completed"> The number of Tasks in the completed state. </param>
        /// <param name="succeeded"> The number of Tasks which succeeded. A Task succeeds if its result (found in the executionInfo property) is 'success'. </param>
        /// <param name="failed"> The number of Tasks which failed. A Task fails if its result (found in the executionInfo property) is 'failure'. </param>
        /// <returns> A new <see cref="Models.TaskCounts"/> instance for mocking. </returns>
        public static TaskCounts TaskCounts(int active = default, int running = default, int completed = default, int succeeded = default, int failed = default)
        {
            return new TaskCounts(active, running, completed, succeeded, failed);
        }

        /// <summary> Initializes a new instance of TaskSlotCounts. </summary>
        /// <param name="active"> The number of TaskSlots for active Tasks. </param>
        /// <param name="running"> The number of TaskSlots for running Tasks. </param>
        /// <param name="completed"> The number of TaskSlots for completed Tasks. </param>
        /// <param name="succeeded"> The number of TaskSlots for succeeded Tasks. </param>
        /// <param name="failed"> The number of TaskSlots for failed Tasks. </param>
        /// <returns> A new <see cref="Models.TaskSlotCounts"/> instance for mocking. </returns>
        public static TaskSlotCounts TaskSlotCounts(int active = default, int running = default, int completed = default, int succeeded = default, int failed = default)
        {
            return new TaskSlotCounts(active, running, completed, succeeded, failed);
        }

        /// <summary> Initializes a new instance of CloudPool. </summary>
        /// <param name="id"> The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not have two IDs within an Account that differ only by case). </param>
        /// <param name="displayName"> The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024. </param>
        /// <param name="url"> The URL of the Pool. </param>
        /// <param name="eTag"> This is an opaque string. You can use it to detect whether the Pool has changed between requests. In particular, you can be pass the ETag when updating a Pool to specify that your changes should take effect only if nobody else has modified the Pool in the meantime. </param>
        /// <param name="lastModified"> This is the last time at which the Pool level data, such as the targetDedicatedNodes or enableAutoscale settings, changed. It does not factor in node-level changes such as a Compute Node changing state. </param>
        /// <param name="creationTime"> The creation time of the Pool. </param>
        /// <param name="state"> The current state of the Pool. </param>
        /// <param name="stateTransitionTime"> The time at which the Pool entered its current state. </param>
        /// <param name="allocationState"> Whether the Pool is resizing. </param>
        /// <param name="allocationStateTransitionTime"> The time at which the Pool entered its current allocation state. </param>
        /// <param name="vmSize"> For information about available sizes of virtual machines in Pools, see Choose a VM size for Compute Nodes in an Azure Batch Pool (https://docs.microsoft.com/azure/batch/batch-pool-vm-sizes). </param>
        /// <param name="cloudServiceConfiguration"> This property and virtualMachineConfiguration are mutually exclusive and one of the properties must be specified. This property cannot be specified if the Batch Account was created with its poolAllocationMode property set to 'UserSubscription'. </param>
        /// <param name="virtualMachineConfiguration"> This property and cloudServiceConfiguration are mutually exclusive and one of the properties must be specified. </param>
        /// <param name="resizeTimeout"> This is the timeout for the most recent resize operation. (The initial sizing when the Pool is created counts as a resize.) The default value is 15 minutes. </param>
        /// <param name="resizeErrors"> This property is set only if one or more errors occurred during the last Pool resize, and only when the Pool allocationState is Steady. </param>
        /// <param name="currentDedicatedNodes"> The number of dedicated Compute Nodes currently in the Pool. </param>
        /// <param name="currentLowPriorityNodes"> Spot/Low-priority Compute Nodes which have been preempted are included in this count. </param>
        /// <param name="targetDedicatedNodes"> The desired number of dedicated Compute Nodes in the Pool. </param>
        /// <param name="targetLowPriorityNodes"> The desired number of Spot/Low-priority Compute Nodes in the Pool. </param>
        /// <param name="enableAutoScale"> If false, at least one of targetDedicatedNodes and targetLowPriorityNodes must be specified. If true, the autoScaleFormula property is required and the Pool automatically resizes according to the formula. The default value is false. </param>
        /// <param name="autoScaleFormula"> This property is set only if the Pool automatically scales, i.e. enableAutoScale is true. </param>
        /// <param name="autoScaleEvaluationInterval"> This property is set only if the Pool automatically scales, i.e. enableAutoScale is true. </param>
        /// <param name="autoScaleRun"> This property is set only if the Pool automatically scales, i.e. enableAutoScale is true. </param>
        /// <param name="enableInterNodeCommunication"> This imposes restrictions on which Compute Nodes can be assigned to the Pool. Specifying this value can reduce the chance of the requested number of Compute Nodes to be allocated in the Pool. </param>
        /// <param name="networkConfiguration"> The network configuration for a Pool. </param>
        /// <param name="startTask"> Batch will retry Tasks when a recovery operation is triggered on a Node. Examples of recovery operations include (but are not limited to) when an unhealthy Node is rebooted or a Compute Node disappeared due to host failure. Retries due to recovery operations are independent of and are not counted against the maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal retry due to a recovery operation may occur. Because of this, all Tasks should be idempotent. This means Tasks need to tolerate being interrupted and restarted without causing any corruption or duplicate data. The best practice for long running Tasks is to use some form of checkpointing. In some cases the StartTask may be re-run even though the Compute Node was not rebooted. Special care should be taken to avoid StartTasks which create breakaway process or install/launch services from the StartTask working directory, as this will block Batch from being able to re-run the StartTask. </param>
        /// <param name="certificateReferences">
        /// For Windows Nodes, the Batch service installs the Certificates to the specified Certificate store and location. For Linux Compute Nodes, the Certificates are stored in a directory inside the Task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the Task to query for this location. For Certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and Certificates are placed in that directory.
        ///
        /// Warning: This property is deprecated and will be removed after February, 2024. Please use the [Azure KeyVault Extension](https://learn.microsoft.com/azure/batch/batch-certificate-migration-guide) instead.
        /// </param>
        /// <param name="applicationPackageReferences"> Changes to Package references affect all new Nodes joining the Pool, but do not affect Compute Nodes that are already in the Pool until they are rebooted or reimaged. There is a maximum of 10 Package references on any given Pool. </param>
        /// <param name="applicationLicenses"> The list of application licenses must be a subset of available Batch service application licenses. If a license is requested which is not supported, Pool creation will fail. </param>
        /// <param name="taskSlotsPerNode"> The default value is 1. The maximum value is the smaller of 4 times the number of cores of the vmSize of the pool or 256. </param>
        /// <param name="taskSchedulingPolicy"> If not specified, the default is spread. </param>
        /// <param name="userAccounts"> The list of user Accounts to be created on each Compute Node in the Pool. </param>
        /// <param name="metadata"> A list of name-value pairs associated with the Pool as metadata. </param>
        /// <param name="stats"> This property is populated only if the CloudPool was retrieved with an expand clause including the 'stats' attribute; otherwise it is null. The statistics may not be immediately available. The Batch service performs periodic roll-up of statistics. The typical delay is about 30 minutes. </param>
        /// <param name="mountConfiguration"> This supports Azure Files, NFS, CIFS/SMB, and Blobfuse. </param>
        /// <param name="identity"> The list of user identities associated with the Batch pool. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'. </param>
        /// <param name="targetNodeCommunicationMode"> If omitted, the default value is Default. </param>
        /// <param name="currentNodeCommunicationMode"> Determines how a pool communicates with the Batch service. </param>
        /// <returns> A new <see cref="Models.CloudPool"/> instance for mocking. </returns>
        public static CloudPool CloudPool(string id = null, string displayName = null, string url = null, string eTag = null, DateTimeOffset? lastModified = null, DateTimeOffset? creationTime = null, PoolState? state = null, DateTimeOffset? stateTransitionTime = null, AllocationState? allocationState = null, DateTimeOffset? allocationStateTransitionTime = null, string vmSize = null, CloudServiceConfiguration cloudServiceConfiguration = null, VirtualMachineConfiguration virtualMachineConfiguration = null, TimeSpan? resizeTimeout = null, IEnumerable<ResizeError> resizeErrors = null, int? currentDedicatedNodes = null, int? currentLowPriorityNodes = null, int? targetDedicatedNodes = null, int? targetLowPriorityNodes = null, bool? enableAutoScale = null, string autoScaleFormula = null, TimeSpan? autoScaleEvaluationInterval = null, AutoScaleRun autoScaleRun = null, bool? enableInterNodeCommunication = null, NetworkConfiguration networkConfiguration = null, StartTask startTask = null, IEnumerable<CertificateReference> certificateReferences = null, IEnumerable<ApplicationPackageReference> applicationPackageReferences = null, IEnumerable<string> applicationLicenses = null, int? taskSlotsPerNode = null, TaskSchedulingPolicy taskSchedulingPolicy = null, IEnumerable<UserAccount> userAccounts = null, IEnumerable<MetadataItem> metadata = null, PoolStatistics stats = null, IEnumerable<MountConfiguration> mountConfiguration = null, BatchPoolIdentity identity = null, NodeCommunicationMode? targetNodeCommunicationMode = null, NodeCommunicationMode? currentNodeCommunicationMode = null)
        {
            resizeErrors ??= new List<ResizeError>();
            certificateReferences ??= new List<CertificateReference>();
            applicationPackageReferences ??= new List<ApplicationPackageReference>();
            applicationLicenses ??= new List<string>();
            userAccounts ??= new List<UserAccount>();
            metadata ??= new List<MetadataItem>();
            mountConfiguration ??= new List<MountConfiguration>();

            return new CloudPool(id, displayName, url, eTag, lastModified, creationTime, state, stateTransitionTime, allocationState, allocationStateTransitionTime, vmSize, cloudServiceConfiguration, virtualMachineConfiguration, resizeTimeout, resizeErrors?.ToList(), currentDedicatedNodes, currentLowPriorityNodes, targetDedicatedNodes, targetLowPriorityNodes, enableAutoScale, autoScaleFormula, autoScaleEvaluationInterval, autoScaleRun, enableInterNodeCommunication, networkConfiguration, startTask, certificateReferences?.ToList(), applicationPackageReferences?.ToList(), applicationLicenses?.ToList(), taskSlotsPerNode, taskSchedulingPolicy, userAccounts?.ToList(), metadata?.ToList(), stats, mountConfiguration?.ToList(), identity, targetNodeCommunicationMode, currentNodeCommunicationMode);
        }

        /// <summary> Initializes a new instance of ResizeError. </summary>
        /// <param name="code"> An identifier for the Pool resize error. Codes are invariant and are intended to be consumed programmatically. </param>
        /// <param name="message"> A message describing the Pool resize error, intended to be suitable for display in a user interface. </param>
        /// <param name="values"> A list of additional error details related to the Pool resize error. </param>
        /// <returns> A new <see cref="Models.ResizeError"/> instance for mocking. </returns>
        public static ResizeError ResizeError(string code = null, string message = null, IEnumerable<NameValuePair> values = null)
        {
            values ??= new List<NameValuePair>();

            return new ResizeError(code, message, values?.ToList());
        }

        /// <summary> Initializes a new instance of AutoScaleRun. </summary>
        /// <param name="timestamp"> The time at which the autoscale formula was last evaluated. </param>
        /// <param name="results"> Each variable value is returned in the form $variable=value, and variables are separated by semicolons. </param>
        /// <param name="error"> An error that occurred when executing or evaluating a Pool autoscale formula. </param>
        /// <returns> A new <see cref="Models.AutoScaleRun"/> instance for mocking. </returns>
        public static AutoScaleRun AutoScaleRun(DateTimeOffset timestamp = default, string results = null, AutoScaleRunError error = null)
        {
            return new AutoScaleRun(timestamp, results, error);
        }

        /// <summary> Initializes a new instance of AutoScaleRunError. </summary>
        /// <param name="code"> An identifier for the autoscale error. Codes are invariant and are intended to be consumed programmatically. </param>
        /// <param name="message"> A message describing the autoscale error, intended to be suitable for display in a user interface. </param>
        /// <param name="values"> A list of additional error details related to the autoscale error. </param>
        /// <returns> A new <see cref="Models.AutoScaleRunError"/> instance for mocking. </returns>
        public static AutoScaleRunError AutoScaleRunError(string code = null, string message = null, IEnumerable<NameValuePair> values = null)
        {
            values ??= new List<NameValuePair>();

            return new AutoScaleRunError(code, message, values?.ToList());
        }

        /// <summary> Initializes a new instance of PoolStatistics. </summary>
        /// <param name="url"> The URL for the statistics. </param>
        /// <param name="startTime"> The start time of the time range covered by the statistics. </param>
        /// <param name="lastUpdateTime"> The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime. </param>
        /// <param name="usageStats"> Statistics related to Pool usage information. </param>
        /// <param name="resourceStats"> Statistics related to resource consumption by Compute Nodes in a Pool. </param>
        /// <returns> A new <see cref="Models.PoolStatistics"/> instance for mocking. </returns>
        public static PoolStatistics PoolStatistics(string url = null, DateTimeOffset startTime = default, DateTimeOffset lastUpdateTime = default, UsageStatistics usageStats = null, ResourceStatistics resourceStats = null)
        {
            return new PoolStatistics(url, startTime, lastUpdateTime, usageStats, resourceStats);
        }

        /// <summary> Initializes a new instance of UsageStatistics. </summary>
        /// <param name="startTime"> The start time of the time range covered by the statistics. </param>
        /// <param name="lastUpdateTime"> The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime. </param>
        /// <param name="dedicatedCoreTime"> The aggregated wall-clock time of the dedicated Compute Node cores being part of the Pool. </param>
        /// <returns> A new <see cref="Models.UsageStatistics"/> instance for mocking. </returns>
        public static UsageStatistics UsageStatistics(DateTimeOffset startTime = default, DateTimeOffset lastUpdateTime = default, TimeSpan dedicatedCoreTime = default)
        {
            return new UsageStatistics(startTime, lastUpdateTime, dedicatedCoreTime);
        }

        /// <summary> Initializes a new instance of ResourceStatistics. </summary>
        /// <param name="startTime"> The start time of the time range covered by the statistics. </param>
        /// <param name="lastUpdateTime"> The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime. </param>
        /// <param name="avgCPUPercentage"> The average CPU usage across all Compute Nodes in the Pool (percentage per node). </param>
        /// <param name="avgMemoryGiB"> The average memory usage in GiB across all Compute Nodes in the Pool. </param>
        /// <param name="peakMemoryGiB"> The peak memory usage in GiB across all Compute Nodes in the Pool. </param>
        /// <param name="avgDiskGiB"> The average used disk space in GiB across all Compute Nodes in the Pool. </param>
        /// <param name="peakDiskGiB"> The peak used disk space in GiB across all Compute Nodes in the Pool. </param>
        /// <param name="diskReadIOps"> The total number of disk read operations across all Compute Nodes in the Pool. </param>
        /// <param name="diskWriteIOps"> The total number of disk write operations across all Compute Nodes in the Pool. </param>
        /// <param name="diskReadGiB"> The total amount of data in GiB of disk reads across all Compute Nodes in the Pool. </param>
        /// <param name="diskWriteGiB"> The total amount of data in GiB of disk writes across all Compute Nodes in the Pool. </param>
        /// <param name="networkReadGiB"> The total amount of data in GiB of network reads across all Compute Nodes in the Pool. </param>
        /// <param name="networkWriteGiB"> The total amount of data in GiB of network writes across all Compute Nodes in the Pool. </param>
        /// <returns> A new <see cref="Models.ResourceStatistics"/> instance for mocking. </returns>
        public static ResourceStatistics ResourceStatistics(DateTimeOffset startTime = default, DateTimeOffset lastUpdateTime = default, double avgCPUPercentage = default, double avgMemoryGiB = default, double peakMemoryGiB = default, double avgDiskGiB = default, double peakDiskGiB = default, long diskReadIOps = default, long diskWriteIOps = default, double diskReadGiB = default, double diskWriteGiB = default, double networkReadGiB = default, double networkWriteGiB = default)
        {
            return new ResourceStatistics(startTime, lastUpdateTime, avgCPUPercentage, avgMemoryGiB, peakMemoryGiB, avgDiskGiB, peakDiskGiB, diskReadIOps, diskWriteIOps, diskReadGiB, diskWriteGiB, networkReadGiB, networkWriteGiB);
        }

        /// <summary> Initializes a new instance of BatchPoolIdentity. </summary>
        /// <param name="type"> The list of user identities associated with the Batch pool. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'. </param>
        /// <param name="userAssignedIdentities"> The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'. </param>
        /// <returns> A new <see cref="Models.BatchPoolIdentity"/> instance for mocking. </returns>
        public static BatchPoolIdentity BatchPoolIdentity(PoolIdentityType type = default, IEnumerable<UserAssignedIdentity> userAssignedIdentities = null)
        {
            userAssignedIdentities ??= new List<UserAssignedIdentity>();

            return new BatchPoolIdentity(type, userAssignedIdentities?.ToList());
        }

        /// <summary> Initializes a new instance of UserAssignedIdentity. </summary>
        /// <param name="resourceId"> The ARM resource id of the user assigned identity. </param>
        /// <param name="clientId"> The client id of the user assigned identity. </param>
        /// <param name="principalId"> The principal id of the user assigned identity. </param>
        /// <returns> A new <see cref="Models.UserAssignedIdentity"/> instance for mocking. </returns>
        public static UserAssignedIdentity UserAssignedIdentity(string resourceId = null, string clientId = null, string principalId = null)
        {
            return new UserAssignedIdentity(resourceId, clientId, principalId);
        }

        /// <summary> Initializes a new instance of CloudTask. </summary>
        /// <param name="id"> The ID can contain any combination of alphanumeric characters including hyphens and underscores, and cannot contain more than 64 characters. </param>
        /// <param name="displayName"> The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024. </param>
        /// <param name="url"> The URL of the Task. </param>
        /// <param name="eTag"> This is an opaque string. You can use it to detect whether the Task has changed between requests. In particular, you can be pass the ETag when updating a Task to specify that your changes should take effect only if nobody else has modified the Task in the meantime. </param>
        /// <param name="lastModified"> The last modified time of the Task. </param>
        /// <param name="creationTime"> The creation time of the Task. </param>
        /// <param name="exitConditions"> How the Batch service should respond when the Task completes. </param>
        /// <param name="state"> The state of the Task. </param>
        /// <param name="stateTransitionTime"> The time at which the Task entered its current state. </param>
        /// <param name="previousState"> This property is not set if the Task is in its initial Active state. </param>
        /// <param name="previousStateTransitionTime"> This property is not set if the Task is in its initial Active state. </param>
        /// <param name="commandLine"> For multi-instance Tasks, the command line is executed as the primary Task, after the primary Task and all subtasks have finished executing the coordination command line. The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If the command line refers to file paths, it should use a relative path (relative to the Task working directory), or use the Batch provided environment variable (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables). </param>
        /// <param name="containerSettings"> If the Pool that will run this Task has containerConfiguration set, this must be set as well. If the Pool that will run this Task doesn't have containerConfiguration set, this must not be set. When this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all Task environment variables are mapped into the container, and the Task command line is executed in the container. Files produced in the container outside of AZ_BATCH_NODE_ROOT_DIR might not be reflected to the host disk, meaning that Batch file APIs will not be able to access those files. </param>
        /// <param name="resourceFiles"> For multi-instance Tasks, the resource files will only be downloaded to the Compute Node on which the primary Task is executed. There is a maximum size for the list of resource files.  When the max size is exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved using .zip files, Application Packages, or Docker Containers. </param>
        /// <param name="outputFiles"> For multi-instance Tasks, the files will only be uploaded from the Compute Node on which the primary Task is executed. </param>
        /// <param name="environmentSettings"> A list of environment variable settings for the Task. </param>
        /// <param name="affinityInfo"> A locality hint that can be used by the Batch service to select a Compute Node on which to start a Task. </param>
        /// <param name="constraints"> Execution constraints to apply to a Task. </param>
        /// <param name="requiredSlots"> The default is 1. A Task can only be scheduled to run on a compute node if the node has enough free scheduling slots available. For multi-instance Tasks, this must be 1. </param>
        /// <param name="userIdentity"> If omitted, the Task runs as a non-administrative user unique to the Task. </param>
        /// <param name="executionInfo"> Information about the execution of a Task. </param>
        /// <param name="nodeInfo"> Information about the Compute Node on which a Task ran. </param>
        /// <param name="multiInstanceSettings"> Multi-instance Tasks are commonly used to support MPI Tasks. In the MPI case, if any of the subtasks fail (for example due to exiting with a non-zero exit code) the entire multi-instance Task fails. The multi-instance Task is then terminated and retried, up to its retry limit. </param>
        /// <param name="stats"> Resource usage statistics for a Task. </param>
        /// <param name="dependsOn"> This Task will not be scheduled until all Tasks that it depends on have completed successfully. If any of those Tasks fail and exhaust their retry counts, this Task will never be scheduled. </param>
        /// <param name="applicationPackageReferences"> Application packages are downloaded and deployed to a shared directory, not the Task working directory. Therefore, if a referenced package is already on the Node, and is up to date, then it is not re-downloaded; the existing copy on the Compute Node is used. If a referenced Package cannot be installed, for example because the package has been deleted or because download failed, the Task fails. </param>
        /// <param name="authenticationTokenSettings"> If this property is set, the Batch service provides the Task with an authentication token which can be used to authenticate Batch service operations without requiring an Account access key. The token is provided via the AZ_BATCH_AUTHENTICATION_TOKEN environment variable. The operations that the Task can carry out using the token depend on the settings. For example, a Task can request Job permissions in order to add other Tasks to the Job, or check the status of the Job or of other Tasks under the Job. </param>
        /// <returns> A new <see cref="Models.CloudTask"/> instance for mocking. </returns>
        public static CloudTask CloudTask(string id = null, string displayName = null, string url = null, string eTag = null, DateTimeOffset? lastModified = null, DateTimeOffset? creationTime = null, ExitConditions exitConditions = null, TaskState? state = null, DateTimeOffset? stateTransitionTime = null, TaskState? previousState = null, DateTimeOffset? previousStateTransitionTime = null, string commandLine = null, TaskContainerSettings containerSettings = null, IEnumerable<ResourceFile> resourceFiles = null, IEnumerable<OutputFile> outputFiles = null, IEnumerable<EnvironmentSetting> environmentSettings = null, AffinityInformation affinityInfo = null, TaskConstraints constraints = null, int? requiredSlots = null, UserIdentity userIdentity = null, TaskExecutionInformation executionInfo = null, ComputeNodeInformation nodeInfo = null, MultiInstanceSettings multiInstanceSettings = null, TaskStatistics stats = null, TaskDependencies dependsOn = null, IEnumerable<ApplicationPackageReference> applicationPackageReferences = null, AuthenticationTokenSettings authenticationTokenSettings = null)
        {
            resourceFiles ??= new List<ResourceFile>();
            outputFiles ??= new List<OutputFile>();
            environmentSettings ??= new List<EnvironmentSetting>();
            applicationPackageReferences ??= new List<ApplicationPackageReference>();

            return new CloudTask(id, displayName, url, eTag, lastModified, creationTime, exitConditions, state, stateTransitionTime, previousState, previousStateTransitionTime, commandLine, containerSettings, resourceFiles?.ToList(), outputFiles?.ToList(), environmentSettings?.ToList(), affinityInfo, constraints, requiredSlots, userIdentity, executionInfo, nodeInfo, multiInstanceSettings, stats, dependsOn, applicationPackageReferences?.ToList(), authenticationTokenSettings);
        }

        /// <summary> Initializes a new instance of TaskExecutionInformation. </summary>
        /// <param name="startTime"> 'Running' corresponds to the running state, so if the Task specifies resource files or Packages, then the start time reflects the time at which the Task started downloading or deploying these. If the Task has been restarted or retried, this is the most recent time at which the Task started running. This property is present only for Tasks that are in the running or completed state. </param>
        /// <param name="endTime"> This property is set only if the Task is in the Completed state. </param>
        /// <param name="exitCode"> This property is set only if the Task is in the completed state. In general, the exit code for a process reflects the specific convention implemented by the application developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process. However, if the Batch service terminates the Task (due to timeout, or user termination via the API) you may see an operating system-defined exit code. </param>
        /// <param name="containerInfo"> This property is set only if the Task runs in a container context. </param>
        /// <param name="failureInfo"> This property is set only if the Task is in the completed state and encountered a failure. </param>
        /// <param name="retryCount"> Task application failures (non-zero exit code) are retried, pre-processing errors (the Task could not be run) and file upload errors are not retried. The Batch service will retry the Task up to the limit specified by the constraints. </param>
        /// <param name="lastRetryTime"> This element is present only if the Task was retried (i.e. retryCount is nonzero). If present, this is typically the same as startTime, but may be different if the Task has been restarted for reasons other than retry; for example, if the Compute Node was rebooted during a retry, then the startTime is updated but the lastRetryTime is not. </param>
        /// <param name="requeueCount"> When the user removes Compute Nodes from a Pool (by resizing/shrinking the pool) or when the Job is being disabled, the user can specify that running Tasks on the Compute Nodes be requeued for execution. This count tracks how many times the Task has been requeued for these reasons. </param>
        /// <param name="lastRequeueTime"> This property is set only if the requeueCount is nonzero. </param>
        /// <param name="result"> If the value is 'failed', then the details of the failure can be found in the failureInfo property. </param>
        /// <returns> A new <see cref="Models.TaskExecutionInformation"/> instance for mocking. </returns>
        public static TaskExecutionInformation TaskExecutionInformation(DateTimeOffset? startTime = null, DateTimeOffset? endTime = null, int? exitCode = null, TaskContainerExecutionInformation containerInfo = null, TaskFailureInformation failureInfo = null, int retryCount = default, DateTimeOffset? lastRetryTime = null, int requeueCount = default, DateTimeOffset? lastRequeueTime = null, TaskExecutionResult? result = null)
        {
            return new TaskExecutionInformation(startTime, endTime, exitCode, containerInfo, failureInfo, retryCount, lastRetryTime, requeueCount, lastRequeueTime, result);
        }

        /// <summary> Initializes a new instance of ComputeNodeInformation. </summary>
        /// <param name="affinityId"> An identifier for the Node on which the Task ran, which can be passed when adding a Task to request that the Task be scheduled on this Compute Node. </param>
        /// <param name="nodeUrl"> The URL of the Compute Node on which the Task ran. </param>
        /// <param name="poolId"> The ID of the Pool on which the Task ran. </param>
        /// <param name="nodeId"> The ID of the Compute Node on which the Task ran. </param>
        /// <param name="taskRootDirectory"> The root directory of the Task on the Compute Node. </param>
        /// <param name="taskRootDirectoryUrl"> The URL to the root directory of the Task on the Compute Node. </param>
        /// <returns> A new <see cref="Models.ComputeNodeInformation"/> instance for mocking. </returns>
        public static ComputeNodeInformation ComputeNodeInformation(string affinityId = null, string nodeUrl = null, string poolId = null, string nodeId = null, string taskRootDirectory = null, string taskRootDirectoryUrl = null)
        {
            return new ComputeNodeInformation(affinityId, nodeUrl, poolId, nodeId, taskRootDirectory, taskRootDirectoryUrl);
        }

        /// <summary> Initializes a new instance of TaskStatistics. </summary>
        /// <param name="url"> The URL of the statistics. </param>
        /// <param name="startTime"> The start time of the time range covered by the statistics. </param>
        /// <param name="lastUpdateTime"> The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime. </param>
        /// <param name="userCPUTime"> The total user mode CPU time (summed across all cores and all Compute Nodes) consumed by the Task. </param>
        /// <param name="kernelCPUTime"> The total kernel mode CPU time (summed across all cores and all Compute Nodes) consumed by the Task. </param>
        /// <param name="wallClockTime"> The wall clock time is the elapsed time from when the Task started running on a Compute Node to when it finished (or to the last time the statistics were updated, if the Task had not finished by then). If the Task was retried, this includes the wall clock time of all the Task retries. </param>
        /// <param name="readIOps"> The total number of disk read operations made by the Task. </param>
        /// <param name="writeIOps"> The total number of disk write operations made by the Task. </param>
        /// <param name="readIOGiB"> The total gibibytes read from disk by the Task. </param>
        /// <param name="writeIOGiB"> The total gibibytes written to disk by the Task. </param>
        /// <param name="waitTime"> The total wait time of the Task. The wait time for a Task is defined as the elapsed time between the creation of the Task and the start of Task execution. (If the Task is retried due to failures, the wait time is the time to the most recent Task execution.). </param>
        /// <exception cref="ArgumentNullException"> <paramref name="url"/> is null. </exception>
        /// <returns> A new <see cref="Models.TaskStatistics"/> instance for mocking. </returns>
        public static TaskStatistics TaskStatistics(string url = null, DateTimeOffset startTime = default, DateTimeOffset lastUpdateTime = default, TimeSpan userCPUTime = default, TimeSpan kernelCPUTime = default, TimeSpan wallClockTime = default, long readIOps = default, long writeIOps = default, double readIOGiB = default, double writeIOGiB = default, TimeSpan waitTime = default)
        {
            if (url == null)
            {
                throw new ArgumentNullException(nameof(url));
            }

            return new TaskStatistics(url, startTime, lastUpdateTime, userCPUTime, kernelCPUTime, wallClockTime, readIOps, writeIOps, readIOGiB, writeIOGiB, waitTime);
        }

        /// <summary> Initializes a new instance of TaskAddCollectionResult. </summary>
        /// <param name="value"> The results of the add Task collection operation. </param>
        /// <returns> A new <see cref="Models.TaskAddCollectionResult"/> instance for mocking. </returns>
        public static TaskAddCollectionResult TaskAddCollectionResult(IEnumerable<TaskAddResult> value = null)
        {
            value ??= new List<TaskAddResult>();

            return new TaskAddCollectionResult(value?.ToList());
        }

        /// <summary> Initializes a new instance of TaskAddResult. </summary>
        /// <param name="status"> The status of the add Task request. </param>
        /// <param name="taskId"> The ID of the Task for which this is the result. </param>
        /// <param name="eTag"> You can use this to detect whether the Task has changed between requests. In particular, you can be pass the ETag with an Update Task request to specify that your changes should take effect only if nobody else has modified the Job in the meantime. </param>
        /// <param name="lastModified"> The last modified time of the Task. </param>
        /// <param name="location"> The URL of the Task, if the Task was successfully added. </param>
        /// <param name="error"> An error response received from the Azure Batch service. </param>
        /// <returns> A new <see cref="Models.TaskAddResult"/> instance for mocking. </returns>
        public static TaskAddResult TaskAddResult(TaskAddStatus status = default, string taskId = null, string eTag = null, DateTimeOffset? lastModified = null, string location = null, BatchError error = null)
        {
            return new TaskAddResult(status, taskId, eTag, lastModified, location, error);
        }

        /// <summary> Initializes a new instance of CloudTaskListSubtasksResult. </summary>
        /// <param name="value"> The list of subtasks. </param>
        /// <returns> A new <see cref="Models.CloudTaskListSubtasksResult"/> instance for mocking. </returns>
        public static CloudTaskListSubtasksResult CloudTaskListSubtasksResult(IEnumerable<SubtaskInformation> value = null)
        {
            value ??= new List<SubtaskInformation>();

            return new CloudTaskListSubtasksResult(value?.ToList());
        }

        /// <summary> Initializes a new instance of SubtaskInformation. </summary>
        /// <param name="id"> The ID of the subtask. </param>
        /// <param name="nodeInfo"> Information about the Compute Node on which a Task ran. </param>
        /// <param name="startTime"> The time at which the subtask started running. If the subtask has been restarted or retried, this is the most recent time at which the subtask started running. </param>
        /// <param name="endTime"> This property is set only if the subtask is in the Completed state. </param>
        /// <param name="exitCode"> This property is set only if the subtask is in the completed state. In general, the exit code for a process reflects the specific convention implemented by the application developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process. However, if the Batch service terminates the subtask (due to timeout, or user termination via the API) you may see an operating system-defined exit code. </param>
        /// <param name="containerInfo"> This property is set only if the Task runs in a container context. </param>
        /// <param name="failureInfo"> This property is set only if the Task is in the completed state and encountered a failure. </param>
        /// <param name="state"> The state of the subtask. </param>
        /// <param name="stateTransitionTime"> The time at which the subtask entered its current state. </param>
        /// <param name="previousState"> This property is not set if the subtask is in its initial running state. </param>
        /// <param name="previousStateTransitionTime"> This property is not set if the subtask is in its initial running state. </param>
        /// <param name="result"> If the value is 'failed', then the details of the failure can be found in the failureInfo property. </param>
        /// <returns> A new <see cref="Models.SubtaskInformation"/> instance for mocking. </returns>
        public static SubtaskInformation SubtaskInformation(int? id = null, ComputeNodeInformation nodeInfo = null, DateTimeOffset? startTime = null, DateTimeOffset? endTime = null, int? exitCode = null, TaskContainerExecutionInformation containerInfo = null, TaskFailureInformation failureInfo = null, SubtaskState? state = null, DateTimeOffset? stateTransitionTime = null, SubtaskState? previousState = null, DateTimeOffset? previousStateTransitionTime = null, TaskExecutionResult? result = null)
        {
            return new SubtaskInformation(id, nodeInfo, startTime, endTime, exitCode, containerInfo, failureInfo, state, stateTransitionTime, previousState, previousStateTransitionTime, result);
        }

        /// <summary> Initializes a new instance of ComputeNode. </summary>
        /// <param name="id"> Every Compute Node that is added to a Pool is assigned a unique ID. Whenever a Compute Node is removed from a Pool, all of its local files are deleted, and the ID is reclaimed and could be reused for new Compute Nodes. </param>
        /// <param name="url"> The URL of the Compute Node. </param>
        /// <param name="state"> The Spot/Low-priority Compute Node has been preempted. Tasks which were running on the Compute Node when it was preempted will be rescheduled when another Compute Node becomes available. </param>
        /// <param name="schedulingState"> Whether the Compute Node is available for Task scheduling. </param>
        /// <param name="stateTransitionTime"> The time at which the Compute Node entered its current state. </param>
        /// <param name="lastBootTime"> This property may not be present if the Compute Node state is unusable. </param>
        /// <param name="allocationTime"> This is the time when the Compute Node was initially allocated and doesn't change once set. It is not updated when the Compute Node is service healed or preempted. </param>
        /// <param name="ipAddress"> Every Compute Node that is added to a Pool is assigned a unique IP address. Whenever a Compute Node is removed from a Pool, all of its local files are deleted, and the IP address is reclaimed and could be reused for new Compute Nodes. </param>
        /// <param name="affinityId"> Note that this is just a soft affinity. If the target Compute Node is busy or unavailable at the time the Task is scheduled, then the Task will be scheduled elsewhere. </param>
        /// <param name="vmSize"> For information about available sizes of virtual machines in Pools, see Choose a VM size for Compute Nodes in an Azure Batch Pool (https://docs.microsoft.com/azure/batch/batch-pool-vm-sizes). </param>
        /// <param name="totalTasksRun"> The total number of Job Tasks completed on the Compute Node. This includes Job Manager Tasks and normal Tasks, but not Job Preparation, Job Release or Start Tasks. </param>
        /// <param name="runningTasksCount"> The total number of currently running Job Tasks on the Compute Node. This includes Job Manager Tasks and normal Tasks, but not Job Preparation, Job Release or Start Tasks. </param>
        /// <param name="runningTaskSlotsCount"> The total number of scheduling slots used by currently running Job Tasks on the Compute Node. This includes Job Manager Tasks and normal Tasks, but not Job Preparation, Job Release or Start Tasks. </param>
        /// <param name="totalTasksSucceeded"> The total number of Job Tasks which completed successfully (with exitCode 0) on the Compute Node. This includes Job Manager Tasks and normal Tasks, but not Job Preparation, Job Release or Start Tasks. </param>
        /// <param name="recentTasks"> This property is present only if at least one Task has run on this Compute Node since it was assigned to the Pool. </param>
        /// <param name="startTask"> Batch will retry Tasks when a recovery operation is triggered on a Node. Examples of recovery operations include (but are not limited to) when an unhealthy Node is rebooted or a Compute Node disappeared due to host failure. Retries due to recovery operations are independent of and are not counted against the maxTaskRetryCount. Even if the maxTaskRetryCount is 0, an internal retry due to a recovery operation may occur. Because of this, all Tasks should be idempotent. This means Tasks need to tolerate being interrupted and restarted without causing any corruption or duplicate data. The best practice for long running Tasks is to use some form of checkpointing. In some cases the StartTask may be re-run even though the Compute Node was not rebooted. Special care should be taken to avoid StartTasks which create breakaway process or install/launch services from the StartTask working directory, as this will block Batch from being able to re-run the StartTask. </param>
        /// <param name="startTaskInfo"> Information about a StartTask running on a Compute Node. </param>
        /// <param name="certificateReferences">
        /// For Windows Nodes, the Batch service installs the Certificates to the specified Certificate store and location. For Linux Compute Nodes, the Certificates are stored in a directory inside the Task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the Task to query for this location. For Certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's home directory (e.g., /home/{user-name}/certs) and Certificates are placed in that directory.
        ///
        /// Warning: This property is deprecated and will be removed after February, 2024. Please use the [Azure KeyVault Extension](https://learn.microsoft.com/azure/batch/batch-certificate-migration-guide) instead.
        /// </param>
        /// <param name="errors"> The list of errors that are currently being encountered by the Compute Node. </param>
        /// <param name="isDedicated"> Whether this Compute Node is a dedicated Compute Node. If false, the Compute Node is a Spot/Low-priority Compute Node. </param>
        /// <param name="endpointConfiguration"> The endpoint configuration for the Compute Node. </param>
        /// <param name="nodeAgentInfo"> The Batch Compute Node agent is a program that runs on each Compute Node in the Pool and provides Batch capability on the Compute Node. </param>
        /// <param name="virtualMachineInfo"> Info about the current state of the virtual machine. </param>
        /// <returns> A new <see cref="Models.ComputeNode"/> instance for mocking. </returns>
        public static ComputeNode ComputeNode(string id = null, string url = null, ComputeNodeState? state = null, SchedulingState? schedulingState = null, DateTimeOffset? stateTransitionTime = null, DateTimeOffset? lastBootTime = null, DateTimeOffset? allocationTime = null, string ipAddress = null, string affinityId = null, string vmSize = null, int? totalTasksRun = null, int? runningTasksCount = null, int? runningTaskSlotsCount = null, int? totalTasksSucceeded = null, IEnumerable<TaskInformation> recentTasks = null, StartTask startTask = null, StartTaskInformation startTaskInfo = null, IEnumerable<CertificateReference> certificateReferences = null, IEnumerable<ComputeNodeError> errors = null, bool? isDedicated = null, ComputeNodeEndpointConfiguration endpointConfiguration = null, NodeAgentInformation nodeAgentInfo = null, VirtualMachineInfo virtualMachineInfo = null)
        {
            recentTasks ??= new List<TaskInformation>();
            certificateReferences ??= new List<CertificateReference>();
            errors ??= new List<ComputeNodeError>();

            return new ComputeNode(id, url, state, schedulingState, stateTransitionTime, lastBootTime, allocationTime, ipAddress, affinityId, vmSize, totalTasksRun, runningTasksCount, runningTaskSlotsCount, totalTasksSucceeded, recentTasks?.ToList(), startTask, startTaskInfo, certificateReferences?.ToList(), errors?.ToList(), isDedicated, endpointConfiguration, nodeAgentInfo, virtualMachineInfo);
        }

        /// <summary> Initializes a new instance of TaskInformation. </summary>
        /// <param name="taskUrl"> The URL of the Task. </param>
        /// <param name="jobId"> The ID of the Job to which the Task belongs. </param>
        /// <param name="taskId"> The ID of the Task. </param>
        /// <param name="subtaskId"> The ID of the subtask if the Task is a multi-instance Task. </param>
        /// <param name="taskState"> The state of the Task. </param>
        /// <param name="executionInfo"> Information about the execution of a Task. </param>
        /// <returns> A new <see cref="Models.TaskInformation"/> instance for mocking. </returns>
        public static TaskInformation TaskInformation(string taskUrl = null, string jobId = null, string taskId = null, int? subtaskId = null, TaskState taskState = default, TaskExecutionInformation executionInfo = null)
        {
            return new TaskInformation(taskUrl, jobId, taskId, subtaskId, taskState, executionInfo);
        }

        /// <summary> Initializes a new instance of StartTaskInformation. </summary>
        /// <param name="state"> The state of the StartTask on the Compute Node. </param>
        /// <param name="startTime"> This value is reset every time the Task is restarted or retried (that is, this is the most recent time at which the StartTask started running). </param>
        /// <param name="endTime"> This is the end time of the most recent run of the StartTask, if that run has completed (even if that run failed and a retry is pending). This element is not present if the StartTask is currently running. </param>
        /// <param name="exitCode"> This property is set only if the StartTask is in the completed state. In general, the exit code for a process reflects the specific convention implemented by the application developer for that process. If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process. However, if the Batch service terminates the StartTask (due to timeout, or user termination via the API) you may see an operating system-defined exit code. </param>
        /// <param name="containerInfo"> This property is set only if the Task runs in a container context. </param>
        /// <param name="failureInfo"> This property is set only if the Task is in the completed state and encountered a failure. </param>
        /// <param name="retryCount"> Task application failures (non-zero exit code) are retried, pre-processing errors (the Task could not be run) and file upload errors are not retried. The Batch service will retry the Task up to the limit specified by the constraints. </param>
        /// <param name="lastRetryTime"> This element is present only if the Task was retried (i.e. retryCount is nonzero). If present, this is typically the same as startTime, but may be different if the Task has been restarted for reasons other than retry; for example, if the Compute Node was rebooted during a retry, then the startTime is updated but the lastRetryTime is not. </param>
        /// <param name="result"> If the value is 'failed', then the details of the failure can be found in the failureInfo property. </param>
        /// <returns> A new <see cref="Models.StartTaskInformation"/> instance for mocking. </returns>
        public static StartTaskInformation StartTaskInformation(StartTaskState state = default, DateTimeOffset startTime = default, DateTimeOffset? endTime = null, int? exitCode = null, TaskContainerExecutionInformation containerInfo = null, TaskFailureInformation failureInfo = null, int retryCount = default, DateTimeOffset? lastRetryTime = null, TaskExecutionResult? result = null)
        {
            return new StartTaskInformation(state, startTime, endTime, exitCode, containerInfo, failureInfo, retryCount, lastRetryTime, result);
        }

        /// <summary> Initializes a new instance of ComputeNodeError. </summary>
        /// <param name="code"> An identifier for the Compute Node error. Codes are invariant and are intended to be consumed programmatically. </param>
        /// <param name="message"> A message describing the Compute Node error, intended to be suitable for display in a user interface. </param>
        /// <param name="errorDetails"> The list of additional error details related to the Compute Node error. </param>
        /// <returns> A new <see cref="Models.ComputeNodeError"/> instance for mocking. </returns>
        public static ComputeNodeError ComputeNodeError(string code = null, string message = null, IEnumerable<NameValuePair> errorDetails = null)
        {
            errorDetails ??= new List<NameValuePair>();

            return new ComputeNodeError(code, message, errorDetails?.ToList());
        }

        /// <summary> Initializes a new instance of ComputeNodeEndpointConfiguration. </summary>
        /// <param name="inboundEndpoints"> The list of inbound endpoints that are accessible on the Compute Node. </param>
        /// <returns> A new <see cref="Models.ComputeNodeEndpointConfiguration"/> instance for mocking. </returns>
        public static ComputeNodeEndpointConfiguration ComputeNodeEndpointConfiguration(IEnumerable<InboundEndpoint> inboundEndpoints = null)
        {
            inboundEndpoints ??= new List<InboundEndpoint>();

            return new ComputeNodeEndpointConfiguration(inboundEndpoints?.ToList());
        }

        /// <summary> Initializes a new instance of InboundEndpoint. </summary>
        /// <param name="name"> The name of the endpoint. </param>
        /// <param name="protocol"> The protocol of the endpoint. </param>
        /// <param name="publicIPAddress"> The public IP address of the Compute Node. </param>
        /// <param name="publicFqdn"> The public fully qualified domain name for the Compute Node. </param>
        /// <param name="frontendPort"> The public port number of the endpoint. </param>
        /// <param name="backendPort"> The backend port number of the endpoint. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="name"/>, <paramref name="publicIPAddress"/> or <paramref name="publicFqdn"/> is null. </exception>
        /// <returns> A new <see cref="Models.InboundEndpoint"/> instance for mocking. </returns>
        public static InboundEndpoint InboundEndpoint(string name = null, InboundEndpointProtocol protocol = default, string publicIPAddress = null, string publicFqdn = null, int frontendPort = default, int backendPort = default)
        {
            if (name == null)
            {
                throw new ArgumentNullException(nameof(name));
            }
            if (publicIPAddress == null)
            {
                throw new ArgumentNullException(nameof(publicIPAddress));
            }
            if (publicFqdn == null)
            {
                throw new ArgumentNullException(nameof(publicFqdn));
            }

            return new InboundEndpoint(name, protocol, publicIPAddress, publicFqdn, frontendPort, backendPort);
        }

        /// <summary> Initializes a new instance of NodeAgentInformation. </summary>
        /// <param name="version"> This version number can be checked against the Compute Node agent release notes located at https://github.com/Azure/Batch/blob/master/changelogs/nodeagent/CHANGELOG.md. </param>
        /// <param name="lastUpdateTime"> This is the most recent time that the Compute Node agent was updated to a new version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> is null. </exception>
        /// <returns> A new <see cref="Models.NodeAgentInformation"/> instance for mocking. </returns>
        public static NodeAgentInformation NodeAgentInformation(string version = null, DateTimeOffset lastUpdateTime = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            return new NodeAgentInformation(version, lastUpdateTime);
        }

        /// <summary> Initializes a new instance of VirtualMachineInfo. </summary>
        /// <param name="imageReference"> A reference to an Azure Virtual Machines Marketplace Image or a Shared Image Gallery Image. To get the list of all Azure Marketplace Image references verified by Azure Batch, see the 'List Supported Images' operation. </param>
        /// <returns> A new <see cref="Models.VirtualMachineInfo"/> instance for mocking. </returns>
        public static VirtualMachineInfo VirtualMachineInfo(ImageReference imageReference = null)
        {
            return new VirtualMachineInfo(imageReference);
        }

        /// <summary> Initializes a new instance of ComputeNodeGetRemoteLoginSettingsResult. </summary>
        /// <param name="remoteLoginIPAddress"> The IP address used for remote login to the Compute Node. </param>
        /// <param name="remoteLoginPort"> The port used for remote login to the Compute Node. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="remoteLoginIPAddress"/> is null. </exception>
        /// <returns> A new <see cref="Models.ComputeNodeGetRemoteLoginSettingsResult"/> instance for mocking. </returns>
        public static ComputeNodeGetRemoteLoginSettingsResult ComputeNodeGetRemoteLoginSettingsResult(string remoteLoginIPAddress = null, int remoteLoginPort = default)
        {
            if (remoteLoginIPAddress == null)
            {
                throw new ArgumentNullException(nameof(remoteLoginIPAddress));
            }

            return new ComputeNodeGetRemoteLoginSettingsResult(remoteLoginIPAddress, remoteLoginPort);
        }

        /// <summary> Initializes a new instance of UploadBatchServiceLogsResult. </summary>
        /// <param name="virtualDirectoryName"> The virtual directory name is part of the blob name for each log file uploaded, and it is built based poolId, nodeId and a unique identifier. </param>
        /// <param name="numberOfFilesUploaded"> The number of log files which will be uploaded. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="virtualDirectoryName"/> is null. </exception>
        /// <returns> A new <see cref="Models.UploadBatchServiceLogsResult"/> instance for mocking. </returns>
        public static UploadBatchServiceLogsResult UploadBatchServiceLogsResult(string virtualDirectoryName = null, int numberOfFilesUploaded = default)
        {
            if (virtualDirectoryName == null)
            {
                throw new ArgumentNullException(nameof(virtualDirectoryName));
            }

            return new UploadBatchServiceLogsResult(virtualDirectoryName, numberOfFilesUploaded);
        }

        /// <summary> Initializes a new instance of NodeVMExtension. </summary>
        /// <param name="provisioningState"> The provisioning state of the virtual machine extension. </param>
        /// <param name="vmExtension"> The configuration for virtual machine extensions. </param>
        /// <param name="instanceView"> The vm extension instance view. </param>
        /// <returns> A new <see cref="Models.NodeVMExtension"/> instance for mocking. </returns>
        public static NodeVMExtension NodeVMExtension(string provisioningState = null, VMExtension vmExtension = null, VMExtensionInstanceView instanceView = null)
        {
            return new NodeVMExtension(provisioningState, vmExtension, instanceView);
        }

        /// <summary> Initializes a new instance of VMExtensionInstanceView. </summary>
        /// <param name="name"> The name of the vm extension instance view. </param>
        /// <param name="statuses"> The resource status information. </param>
        /// <param name="subStatuses"> The resource status information. </param>
        /// <returns> A new <see cref="Models.VMExtensionInstanceView"/> instance for mocking. </returns>
        public static VMExtensionInstanceView VMExtensionInstanceView(string name = null, IEnumerable<InstanceViewStatus> statuses = null, IEnumerable<InstanceViewStatus> subStatuses = null)
        {
            statuses ??= new List<InstanceViewStatus>();
            subStatuses ??= new List<InstanceViewStatus>();

            return new VMExtensionInstanceView(name, statuses?.ToList(), subStatuses?.ToList());
        }

        /// <summary> Initializes a new instance of InstanceViewStatus. </summary>
        /// <param name="code"> The status code. </param>
        /// <param name="displayStatus"> The localized label for the status. </param>
        /// <param name="level"> Level code. </param>
        /// <param name="message"> The detailed status message. </param>
        /// <param name="time"> The time of the status. </param>
        /// <returns> A new <see cref="Models.InstanceViewStatus"/> instance for mocking. </returns>
        public static InstanceViewStatus InstanceViewStatus(string code = null, string displayStatus = null, StatusLevelTypes? level = null, string message = null, string time = null)
        {
            return new InstanceViewStatus(code, displayStatus, level, message, time);
        }
    }
}
