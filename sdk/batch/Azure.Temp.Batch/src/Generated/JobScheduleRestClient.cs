// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.Temp.Batch.Models;

namespace Azure.Temp.Batch
{
    internal partial class JobScheduleRestClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly string _batchUrl;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> Initializes a new instance of JobScheduleRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="batchUrl"> The base URL for all Azure Batch service requests. </param>
        /// <param name="apiVersion"> Api Version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/>, <paramref name="pipeline"/>, <paramref name="batchUrl"/> or <paramref name="apiVersion"/> is null. </exception>
        public JobScheduleRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string batchUrl, string apiVersion = "2023-05-01.17.0")
        {
            ClientDiagnostics = clientDiagnostics ?? throw new ArgumentNullException(nameof(clientDiagnostics));
            _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
            _batchUrl = batchUrl ?? throw new ArgumentNullException(nameof(batchUrl));
            _apiVersion = apiVersion ?? throw new ArgumentNullException(nameof(apiVersion));
        }

        internal HttpMessage CreateExistsRequest(string jobScheduleId, JobScheduleExistsOptions jobScheduleExistsOptions)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Head;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_batchUrl, false);
            uri.AppendPath("/jobschedules/", false);
            uri.AppendPath(jobScheduleId, true);
            if (jobScheduleExistsOptions?.Timeout != null)
            {
                uri.AppendQuery("timeout", jobScheduleExistsOptions.Timeout.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (jobScheduleExistsOptions?.ClientRequestId != null)
            {
                request.Headers.Add("client-request-id", jobScheduleExistsOptions.ClientRequestId.Value);
            }
            if (jobScheduleExistsOptions?.ReturnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", jobScheduleExistsOptions.ReturnClientRequestId.Value);
            }
            if (jobScheduleExistsOptions?.OcpDate != null)
            {
                request.Headers.Add("ocp-date", jobScheduleExistsOptions.OcpDate.Value, "R");
            }
            if (jobScheduleExistsOptions?.IfMatch != null)
            {
                request.Headers.Add("If-Match", jobScheduleExistsOptions.IfMatch);
            }
            if (jobScheduleExistsOptions?.IfNoneMatch != null)
            {
                request.Headers.Add("If-None-Match", jobScheduleExistsOptions.IfNoneMatch);
            }
            if (jobScheduleExistsOptions?.IfModifiedSince != null)
            {
                request.Headers.Add("If-Modified-Since", jobScheduleExistsOptions.IfModifiedSince.Value, "R");
            }
            if (jobScheduleExistsOptions?.IfUnmodifiedSince != null)
            {
                request.Headers.Add("If-Unmodified-Since", jobScheduleExistsOptions.IfUnmodifiedSince.Value, "R");
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Checks the specified Job Schedule exists. </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule which you want to check. </param>
        /// <param name="jobScheduleExistsOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobScheduleId"/> is null. </exception>
        public async Task<ResponseWithHeaders<JobScheduleExistsHeaders>> ExistsAsync(string jobScheduleId, JobScheduleExistsOptions jobScheduleExistsOptions = null, CancellationToken cancellationToken = default)
        {
            if (jobScheduleId == null)
            {
                throw new ArgumentNullException(nameof(jobScheduleId));
            }

            using var message = CreateExistsRequest(jobScheduleId, jobScheduleExistsOptions);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new JobScheduleExistsHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                case 404:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Checks the specified Job Schedule exists. </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule which you want to check. </param>
        /// <param name="jobScheduleExistsOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobScheduleId"/> is null. </exception>
        public ResponseWithHeaders<JobScheduleExistsHeaders> Exists(string jobScheduleId, JobScheduleExistsOptions jobScheduleExistsOptions = null, CancellationToken cancellationToken = default)
        {
            if (jobScheduleId == null)
            {
                throw new ArgumentNullException(nameof(jobScheduleId));
            }

            using var message = CreateExistsRequest(jobScheduleId, jobScheduleExistsOptions);
            _pipeline.Send(message, cancellationToken);
            var headers = new JobScheduleExistsHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                case 404:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteRequest(string jobScheduleId, JobScheduleDeleteOptions jobScheduleDeleteOptions)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_batchUrl, false);
            uri.AppendPath("/jobschedules/", false);
            uri.AppendPath(jobScheduleId, true);
            if (jobScheduleDeleteOptions?.Timeout != null)
            {
                uri.AppendQuery("timeout", jobScheduleDeleteOptions.Timeout.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (jobScheduleDeleteOptions?.ClientRequestId != null)
            {
                request.Headers.Add("client-request-id", jobScheduleDeleteOptions.ClientRequestId.Value);
            }
            if (jobScheduleDeleteOptions?.ReturnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", jobScheduleDeleteOptions.ReturnClientRequestId.Value);
            }
            if (jobScheduleDeleteOptions?.OcpDate != null)
            {
                request.Headers.Add("ocp-date", jobScheduleDeleteOptions.OcpDate.Value, "R");
            }
            if (jobScheduleDeleteOptions?.IfMatch != null)
            {
                request.Headers.Add("If-Match", jobScheduleDeleteOptions.IfMatch);
            }
            if (jobScheduleDeleteOptions?.IfNoneMatch != null)
            {
                request.Headers.Add("If-None-Match", jobScheduleDeleteOptions.IfNoneMatch);
            }
            if (jobScheduleDeleteOptions?.IfModifiedSince != null)
            {
                request.Headers.Add("If-Modified-Since", jobScheduleDeleteOptions.IfModifiedSince.Value, "R");
            }
            if (jobScheduleDeleteOptions?.IfUnmodifiedSince != null)
            {
                request.Headers.Add("If-Unmodified-Since", jobScheduleDeleteOptions.IfUnmodifiedSince.Value, "R");
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Deletes a Job Schedule from the specified Account. </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule to delete. </param>
        /// <param name="jobScheduleDeleteOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobScheduleId"/> is null. </exception>
        /// <remarks> When you delete a Job Schedule, this also deletes all Jobs and Tasks under that schedule. When Tasks are deleted, all the files in their working directories on the Compute Nodes are also deleted (the retention period is ignored). The Job Schedule statistics are no longer accessible once the Job Schedule is deleted, though they are still counted towards Account lifetime statistics. </remarks>
        public async Task<ResponseWithHeaders<JobScheduleDeleteHeaders>> DeleteAsync(string jobScheduleId, JobScheduleDeleteOptions jobScheduleDeleteOptions = null, CancellationToken cancellationToken = default)
        {
            if (jobScheduleId == null)
            {
                throw new ArgumentNullException(nameof(jobScheduleId));
            }

            using var message = CreateDeleteRequest(jobScheduleId, jobScheduleDeleteOptions);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new JobScheduleDeleteHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 202:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Deletes a Job Schedule from the specified Account. </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule to delete. </param>
        /// <param name="jobScheduleDeleteOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobScheduleId"/> is null. </exception>
        /// <remarks> When you delete a Job Schedule, this also deletes all Jobs and Tasks under that schedule. When Tasks are deleted, all the files in their working directories on the Compute Nodes are also deleted (the retention period is ignored). The Job Schedule statistics are no longer accessible once the Job Schedule is deleted, though they are still counted towards Account lifetime statistics. </remarks>
        public ResponseWithHeaders<JobScheduleDeleteHeaders> Delete(string jobScheduleId, JobScheduleDeleteOptions jobScheduleDeleteOptions = null, CancellationToken cancellationToken = default)
        {
            if (jobScheduleId == null)
            {
                throw new ArgumentNullException(nameof(jobScheduleId));
            }

            using var message = CreateDeleteRequest(jobScheduleId, jobScheduleDeleteOptions);
            _pipeline.Send(message, cancellationToken);
            var headers = new JobScheduleDeleteHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 202:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetRequest(string jobScheduleId, JobScheduleGetOptions jobScheduleGetOptions)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_batchUrl, false);
            uri.AppendPath("/jobschedules/", false);
            uri.AppendPath(jobScheduleId, true);
            if (jobScheduleGetOptions?.Select != null)
            {
                uri.AppendQuery("$select", jobScheduleGetOptions.Select, true);
            }
            if (jobScheduleGetOptions?.Expand != null)
            {
                uri.AppendQuery("$expand", jobScheduleGetOptions.Expand, true);
            }
            if (jobScheduleGetOptions?.Timeout != null)
            {
                uri.AppendQuery("timeout", jobScheduleGetOptions.Timeout.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (jobScheduleGetOptions?.ClientRequestId != null)
            {
                request.Headers.Add("client-request-id", jobScheduleGetOptions.ClientRequestId.Value);
            }
            if (jobScheduleGetOptions?.ReturnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", jobScheduleGetOptions.ReturnClientRequestId.Value);
            }
            if (jobScheduleGetOptions?.OcpDate != null)
            {
                request.Headers.Add("ocp-date", jobScheduleGetOptions.OcpDate.Value, "R");
            }
            if (jobScheduleGetOptions?.IfMatch != null)
            {
                request.Headers.Add("If-Match", jobScheduleGetOptions.IfMatch);
            }
            if (jobScheduleGetOptions?.IfNoneMatch != null)
            {
                request.Headers.Add("If-None-Match", jobScheduleGetOptions.IfNoneMatch);
            }
            if (jobScheduleGetOptions?.IfModifiedSince != null)
            {
                request.Headers.Add("If-Modified-Since", jobScheduleGetOptions.IfModifiedSince.Value, "R");
            }
            if (jobScheduleGetOptions?.IfUnmodifiedSince != null)
            {
                request.Headers.Add("If-Unmodified-Since", jobScheduleGetOptions.IfUnmodifiedSince.Value, "R");
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Gets information about the specified Job Schedule. </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule to get. </param>
        /// <param name="jobScheduleGetOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobScheduleId"/> is null. </exception>
        public async Task<ResponseWithHeaders<CloudJobSchedule, JobScheduleGetHeaders>> GetAsync(string jobScheduleId, JobScheduleGetOptions jobScheduleGetOptions = null, CancellationToken cancellationToken = default)
        {
            if (jobScheduleId == null)
            {
                throw new ArgumentNullException(nameof(jobScheduleId));
            }

            using var message = CreateGetRequest(jobScheduleId, jobScheduleGetOptions);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new JobScheduleGetHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        CloudJobSchedule value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = CloudJobSchedule.DeserializeCloudJobSchedule(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Gets information about the specified Job Schedule. </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule to get. </param>
        /// <param name="jobScheduleGetOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobScheduleId"/> is null. </exception>
        public ResponseWithHeaders<CloudJobSchedule, JobScheduleGetHeaders> Get(string jobScheduleId, JobScheduleGetOptions jobScheduleGetOptions = null, CancellationToken cancellationToken = default)
        {
            if (jobScheduleId == null)
            {
                throw new ArgumentNullException(nameof(jobScheduleId));
            }

            using var message = CreateGetRequest(jobScheduleId, jobScheduleGetOptions);
            _pipeline.Send(message, cancellationToken);
            var headers = new JobScheduleGetHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        CloudJobSchedule value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = CloudJobSchedule.DeserializeCloudJobSchedule(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePatchRequest(string jobScheduleId, JobSchedulePatchParameter jobSchedulePatchParameter, JobSchedulePatchOptions jobSchedulePatchOptions)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_batchUrl, false);
            uri.AppendPath("/jobschedules/", false);
            uri.AppendPath(jobScheduleId, true);
            if (jobSchedulePatchOptions?.Timeout != null)
            {
                uri.AppendQuery("timeout", jobSchedulePatchOptions.Timeout.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (jobSchedulePatchOptions?.ClientRequestId != null)
            {
                request.Headers.Add("client-request-id", jobSchedulePatchOptions.ClientRequestId.Value);
            }
            if (jobSchedulePatchOptions?.ReturnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", jobSchedulePatchOptions.ReturnClientRequestId.Value);
            }
            if (jobSchedulePatchOptions?.OcpDate != null)
            {
                request.Headers.Add("ocp-date", jobSchedulePatchOptions.OcpDate.Value, "R");
            }
            if (jobSchedulePatchOptions?.IfMatch != null)
            {
                request.Headers.Add("If-Match", jobSchedulePatchOptions.IfMatch);
            }
            if (jobSchedulePatchOptions?.IfNoneMatch != null)
            {
                request.Headers.Add("If-None-Match", jobSchedulePatchOptions.IfNoneMatch);
            }
            if (jobSchedulePatchOptions?.IfModifiedSince != null)
            {
                request.Headers.Add("If-Modified-Since", jobSchedulePatchOptions.IfModifiedSince.Value, "R");
            }
            if (jobSchedulePatchOptions?.IfUnmodifiedSince != null)
            {
                request.Headers.Add("If-Unmodified-Since", jobSchedulePatchOptions.IfUnmodifiedSince.Value, "R");
            }
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json; odata=minimalmetadata");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(jobSchedulePatchParameter);
            request.Content = content;
            return message;
        }

        /// <summary> Updates the properties of the specified Job Schedule. </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule to update. </param>
        /// <param name="jobSchedulePatchParameter"> The parameters for the request. </param>
        /// <param name="jobSchedulePatchOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobScheduleId"/> or <paramref name="jobSchedulePatchParameter"/> is null. </exception>
        /// <remarks> This replaces only the Job Schedule properties specified in the request. For example, if the schedule property is not specified with this request, then the Batch service will keep the existing schedule. Changes to a Job Schedule only impact Jobs created by the schedule after the update has taken place; currently running Jobs are unaffected. </remarks>
        public async Task<ResponseWithHeaders<JobSchedulePatchHeaders>> PatchAsync(string jobScheduleId, JobSchedulePatchParameter jobSchedulePatchParameter, JobSchedulePatchOptions jobSchedulePatchOptions = null, CancellationToken cancellationToken = default)
        {
            if (jobScheduleId == null)
            {
                throw new ArgumentNullException(nameof(jobScheduleId));
            }
            if (jobSchedulePatchParameter == null)
            {
                throw new ArgumentNullException(nameof(jobSchedulePatchParameter));
            }

            using var message = CreatePatchRequest(jobScheduleId, jobSchedulePatchParameter, jobSchedulePatchOptions);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new JobSchedulePatchHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Updates the properties of the specified Job Schedule. </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule to update. </param>
        /// <param name="jobSchedulePatchParameter"> The parameters for the request. </param>
        /// <param name="jobSchedulePatchOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobScheduleId"/> or <paramref name="jobSchedulePatchParameter"/> is null. </exception>
        /// <remarks> This replaces only the Job Schedule properties specified in the request. For example, if the schedule property is not specified with this request, then the Batch service will keep the existing schedule. Changes to a Job Schedule only impact Jobs created by the schedule after the update has taken place; currently running Jobs are unaffected. </remarks>
        public ResponseWithHeaders<JobSchedulePatchHeaders> Patch(string jobScheduleId, JobSchedulePatchParameter jobSchedulePatchParameter, JobSchedulePatchOptions jobSchedulePatchOptions = null, CancellationToken cancellationToken = default)
        {
            if (jobScheduleId == null)
            {
                throw new ArgumentNullException(nameof(jobScheduleId));
            }
            if (jobSchedulePatchParameter == null)
            {
                throw new ArgumentNullException(nameof(jobSchedulePatchParameter));
            }

            using var message = CreatePatchRequest(jobScheduleId, jobSchedulePatchParameter, jobSchedulePatchOptions);
            _pipeline.Send(message, cancellationToken);
            var headers = new JobSchedulePatchHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateRequest(string jobScheduleId, JobScheduleUpdateParameter jobScheduleUpdateParameter, JobScheduleUpdateOptions jobScheduleUpdateOptions)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_batchUrl, false);
            uri.AppendPath("/jobschedules/", false);
            uri.AppendPath(jobScheduleId, true);
            if (jobScheduleUpdateOptions?.Timeout != null)
            {
                uri.AppendQuery("timeout", jobScheduleUpdateOptions.Timeout.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (jobScheduleUpdateOptions?.ClientRequestId != null)
            {
                request.Headers.Add("client-request-id", jobScheduleUpdateOptions.ClientRequestId.Value);
            }
            if (jobScheduleUpdateOptions?.ReturnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", jobScheduleUpdateOptions.ReturnClientRequestId.Value);
            }
            if (jobScheduleUpdateOptions?.OcpDate != null)
            {
                request.Headers.Add("ocp-date", jobScheduleUpdateOptions.OcpDate.Value, "R");
            }
            if (jobScheduleUpdateOptions?.IfMatch != null)
            {
                request.Headers.Add("If-Match", jobScheduleUpdateOptions.IfMatch);
            }
            if (jobScheduleUpdateOptions?.IfNoneMatch != null)
            {
                request.Headers.Add("If-None-Match", jobScheduleUpdateOptions.IfNoneMatch);
            }
            if (jobScheduleUpdateOptions?.IfModifiedSince != null)
            {
                request.Headers.Add("If-Modified-Since", jobScheduleUpdateOptions.IfModifiedSince.Value, "R");
            }
            if (jobScheduleUpdateOptions?.IfUnmodifiedSince != null)
            {
                request.Headers.Add("If-Unmodified-Since", jobScheduleUpdateOptions.IfUnmodifiedSince.Value, "R");
            }
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json; odata=minimalmetadata");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(jobScheduleUpdateParameter);
            request.Content = content;
            return message;
        }

        /// <summary> Updates the properties of the specified Job Schedule. </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule to update. </param>
        /// <param name="jobScheduleUpdateParameter"> The parameters for the request. </param>
        /// <param name="jobScheduleUpdateOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobScheduleId"/> or <paramref name="jobScheduleUpdateParameter"/> is null. </exception>
        /// <remarks> This fully replaces all the updatable properties of the Job Schedule. For example, if the schedule property is not specified with this request, then the Batch service will remove the existing schedule. Changes to a Job Schedule only impact Jobs created by the schedule after the update has taken place; currently running Jobs are unaffected. </remarks>
        public async Task<ResponseWithHeaders<JobScheduleUpdateHeaders>> UpdateAsync(string jobScheduleId, JobScheduleUpdateParameter jobScheduleUpdateParameter, JobScheduleUpdateOptions jobScheduleUpdateOptions = null, CancellationToken cancellationToken = default)
        {
            if (jobScheduleId == null)
            {
                throw new ArgumentNullException(nameof(jobScheduleId));
            }
            if (jobScheduleUpdateParameter == null)
            {
                throw new ArgumentNullException(nameof(jobScheduleUpdateParameter));
            }

            using var message = CreateUpdateRequest(jobScheduleId, jobScheduleUpdateParameter, jobScheduleUpdateOptions);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new JobScheduleUpdateHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Updates the properties of the specified Job Schedule. </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule to update. </param>
        /// <param name="jobScheduleUpdateParameter"> The parameters for the request. </param>
        /// <param name="jobScheduleUpdateOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobScheduleId"/> or <paramref name="jobScheduleUpdateParameter"/> is null. </exception>
        /// <remarks> This fully replaces all the updatable properties of the Job Schedule. For example, if the schedule property is not specified with this request, then the Batch service will remove the existing schedule. Changes to a Job Schedule only impact Jobs created by the schedule after the update has taken place; currently running Jobs are unaffected. </remarks>
        public ResponseWithHeaders<JobScheduleUpdateHeaders> Update(string jobScheduleId, JobScheduleUpdateParameter jobScheduleUpdateParameter, JobScheduleUpdateOptions jobScheduleUpdateOptions = null, CancellationToken cancellationToken = default)
        {
            if (jobScheduleId == null)
            {
                throw new ArgumentNullException(nameof(jobScheduleId));
            }
            if (jobScheduleUpdateParameter == null)
            {
                throw new ArgumentNullException(nameof(jobScheduleUpdateParameter));
            }

            using var message = CreateUpdateRequest(jobScheduleId, jobScheduleUpdateParameter, jobScheduleUpdateOptions);
            _pipeline.Send(message, cancellationToken);
            var headers = new JobScheduleUpdateHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDisableRequest(string jobScheduleId, JobScheduleDisableOptions jobScheduleDisableOptions)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_batchUrl, false);
            uri.AppendPath("/jobschedules/", false);
            uri.AppendPath(jobScheduleId, true);
            uri.AppendPath("/disable", false);
            if (jobScheduleDisableOptions?.Timeout != null)
            {
                uri.AppendQuery("timeout", jobScheduleDisableOptions.Timeout.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (jobScheduleDisableOptions?.ClientRequestId != null)
            {
                request.Headers.Add("client-request-id", jobScheduleDisableOptions.ClientRequestId.Value);
            }
            if (jobScheduleDisableOptions?.ReturnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", jobScheduleDisableOptions.ReturnClientRequestId.Value);
            }
            if (jobScheduleDisableOptions?.OcpDate != null)
            {
                request.Headers.Add("ocp-date", jobScheduleDisableOptions.OcpDate.Value, "R");
            }
            if (jobScheduleDisableOptions?.IfMatch != null)
            {
                request.Headers.Add("If-Match", jobScheduleDisableOptions.IfMatch);
            }
            if (jobScheduleDisableOptions?.IfNoneMatch != null)
            {
                request.Headers.Add("If-None-Match", jobScheduleDisableOptions.IfNoneMatch);
            }
            if (jobScheduleDisableOptions?.IfModifiedSince != null)
            {
                request.Headers.Add("If-Modified-Since", jobScheduleDisableOptions.IfModifiedSince.Value, "R");
            }
            if (jobScheduleDisableOptions?.IfUnmodifiedSince != null)
            {
                request.Headers.Add("If-Unmodified-Since", jobScheduleDisableOptions.IfUnmodifiedSince.Value, "R");
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Disables a Job Schedule. </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule to disable. </param>
        /// <param name="jobScheduleDisableOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobScheduleId"/> is null. </exception>
        /// <remarks> No new Jobs will be created until the Job Schedule is enabled again. </remarks>
        public async Task<ResponseWithHeaders<JobScheduleDisableHeaders>> DisableAsync(string jobScheduleId, JobScheduleDisableOptions jobScheduleDisableOptions = null, CancellationToken cancellationToken = default)
        {
            if (jobScheduleId == null)
            {
                throw new ArgumentNullException(nameof(jobScheduleId));
            }

            using var message = CreateDisableRequest(jobScheduleId, jobScheduleDisableOptions);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new JobScheduleDisableHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 204:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Disables a Job Schedule. </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule to disable. </param>
        /// <param name="jobScheduleDisableOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobScheduleId"/> is null. </exception>
        /// <remarks> No new Jobs will be created until the Job Schedule is enabled again. </remarks>
        public ResponseWithHeaders<JobScheduleDisableHeaders> Disable(string jobScheduleId, JobScheduleDisableOptions jobScheduleDisableOptions = null, CancellationToken cancellationToken = default)
        {
            if (jobScheduleId == null)
            {
                throw new ArgumentNullException(nameof(jobScheduleId));
            }

            using var message = CreateDisableRequest(jobScheduleId, jobScheduleDisableOptions);
            _pipeline.Send(message, cancellationToken);
            var headers = new JobScheduleDisableHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 204:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateEnableRequest(string jobScheduleId, JobScheduleEnableOptions jobScheduleEnableOptions)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_batchUrl, false);
            uri.AppendPath("/jobschedules/", false);
            uri.AppendPath(jobScheduleId, true);
            uri.AppendPath("/enable", false);
            if (jobScheduleEnableOptions?.Timeout != null)
            {
                uri.AppendQuery("timeout", jobScheduleEnableOptions.Timeout.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (jobScheduleEnableOptions?.ClientRequestId != null)
            {
                request.Headers.Add("client-request-id", jobScheduleEnableOptions.ClientRequestId.Value);
            }
            if (jobScheduleEnableOptions?.ReturnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", jobScheduleEnableOptions.ReturnClientRequestId.Value);
            }
            if (jobScheduleEnableOptions?.OcpDate != null)
            {
                request.Headers.Add("ocp-date", jobScheduleEnableOptions.OcpDate.Value, "R");
            }
            if (jobScheduleEnableOptions?.IfMatch != null)
            {
                request.Headers.Add("If-Match", jobScheduleEnableOptions.IfMatch);
            }
            if (jobScheduleEnableOptions?.IfNoneMatch != null)
            {
                request.Headers.Add("If-None-Match", jobScheduleEnableOptions.IfNoneMatch);
            }
            if (jobScheduleEnableOptions?.IfModifiedSince != null)
            {
                request.Headers.Add("If-Modified-Since", jobScheduleEnableOptions.IfModifiedSince.Value, "R");
            }
            if (jobScheduleEnableOptions?.IfUnmodifiedSince != null)
            {
                request.Headers.Add("If-Unmodified-Since", jobScheduleEnableOptions.IfUnmodifiedSince.Value, "R");
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Enables a Job Schedule. </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule to enable. </param>
        /// <param name="jobScheduleEnableOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobScheduleId"/> is null. </exception>
        public async Task<ResponseWithHeaders<JobScheduleEnableHeaders>> EnableAsync(string jobScheduleId, JobScheduleEnableOptions jobScheduleEnableOptions = null, CancellationToken cancellationToken = default)
        {
            if (jobScheduleId == null)
            {
                throw new ArgumentNullException(nameof(jobScheduleId));
            }

            using var message = CreateEnableRequest(jobScheduleId, jobScheduleEnableOptions);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new JobScheduleEnableHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 204:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Enables a Job Schedule. </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule to enable. </param>
        /// <param name="jobScheduleEnableOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobScheduleId"/> is null. </exception>
        public ResponseWithHeaders<JobScheduleEnableHeaders> Enable(string jobScheduleId, JobScheduleEnableOptions jobScheduleEnableOptions = null, CancellationToken cancellationToken = default)
        {
            if (jobScheduleId == null)
            {
                throw new ArgumentNullException(nameof(jobScheduleId));
            }

            using var message = CreateEnableRequest(jobScheduleId, jobScheduleEnableOptions);
            _pipeline.Send(message, cancellationToken);
            var headers = new JobScheduleEnableHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 204:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateTerminateRequest(string jobScheduleId, JobScheduleTerminateOptions jobScheduleTerminateOptions)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_batchUrl, false);
            uri.AppendPath("/jobschedules/", false);
            uri.AppendPath(jobScheduleId, true);
            uri.AppendPath("/terminate", false);
            if (jobScheduleTerminateOptions?.Timeout != null)
            {
                uri.AppendQuery("timeout", jobScheduleTerminateOptions.Timeout.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (jobScheduleTerminateOptions?.ClientRequestId != null)
            {
                request.Headers.Add("client-request-id", jobScheduleTerminateOptions.ClientRequestId.Value);
            }
            if (jobScheduleTerminateOptions?.ReturnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", jobScheduleTerminateOptions.ReturnClientRequestId.Value);
            }
            if (jobScheduleTerminateOptions?.OcpDate != null)
            {
                request.Headers.Add("ocp-date", jobScheduleTerminateOptions.OcpDate.Value, "R");
            }
            if (jobScheduleTerminateOptions?.IfMatch != null)
            {
                request.Headers.Add("If-Match", jobScheduleTerminateOptions.IfMatch);
            }
            if (jobScheduleTerminateOptions?.IfNoneMatch != null)
            {
                request.Headers.Add("If-None-Match", jobScheduleTerminateOptions.IfNoneMatch);
            }
            if (jobScheduleTerminateOptions?.IfModifiedSince != null)
            {
                request.Headers.Add("If-Modified-Since", jobScheduleTerminateOptions.IfModifiedSince.Value, "R");
            }
            if (jobScheduleTerminateOptions?.IfUnmodifiedSince != null)
            {
                request.Headers.Add("If-Unmodified-Since", jobScheduleTerminateOptions.IfUnmodifiedSince.Value, "R");
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Terminates a Job Schedule. </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule to terminates. </param>
        /// <param name="jobScheduleTerminateOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobScheduleId"/> is null. </exception>
        public async Task<ResponseWithHeaders<JobScheduleTerminateHeaders>> TerminateAsync(string jobScheduleId, JobScheduleTerminateOptions jobScheduleTerminateOptions = null, CancellationToken cancellationToken = default)
        {
            if (jobScheduleId == null)
            {
                throw new ArgumentNullException(nameof(jobScheduleId));
            }

            using var message = CreateTerminateRequest(jobScheduleId, jobScheduleTerminateOptions);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new JobScheduleTerminateHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 202:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Terminates a Job Schedule. </summary>
        /// <param name="jobScheduleId"> The ID of the Job Schedule to terminates. </param>
        /// <param name="jobScheduleTerminateOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobScheduleId"/> is null. </exception>
        public ResponseWithHeaders<JobScheduleTerminateHeaders> Terminate(string jobScheduleId, JobScheduleTerminateOptions jobScheduleTerminateOptions = null, CancellationToken cancellationToken = default)
        {
            if (jobScheduleId == null)
            {
                throw new ArgumentNullException(nameof(jobScheduleId));
            }

            using var message = CreateTerminateRequest(jobScheduleId, jobScheduleTerminateOptions);
            _pipeline.Send(message, cancellationToken);
            var headers = new JobScheduleTerminateHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 202:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateAddRequest(JobScheduleAddParameter cloudJobSchedule, JobScheduleAddOptions jobScheduleAddOptions)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_batchUrl, false);
            uri.AppendPath("/jobschedules", false);
            if (jobScheduleAddOptions?.Timeout != null)
            {
                uri.AppendQuery("timeout", jobScheduleAddOptions.Timeout.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (jobScheduleAddOptions?.ClientRequestId != null)
            {
                request.Headers.Add("client-request-id", jobScheduleAddOptions.ClientRequestId.Value);
            }
            if (jobScheduleAddOptions?.ReturnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", jobScheduleAddOptions.ReturnClientRequestId.Value);
            }
            if (jobScheduleAddOptions?.OcpDate != null)
            {
                request.Headers.Add("ocp-date", jobScheduleAddOptions.OcpDate.Value, "R");
            }
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json; odata=minimalmetadata");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(cloudJobSchedule);
            request.Content = content;
            return message;
        }

        /// <summary> Adds a Job Schedule to the specified Account. </summary>
        /// <param name="cloudJobSchedule"> The Job Schedule to be added. </param>
        /// <param name="jobScheduleAddOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="cloudJobSchedule"/> is null. </exception>
        public async Task<ResponseWithHeaders<JobScheduleAddHeaders>> AddAsync(JobScheduleAddParameter cloudJobSchedule, JobScheduleAddOptions jobScheduleAddOptions = null, CancellationToken cancellationToken = default)
        {
            if (cloudJobSchedule == null)
            {
                throw new ArgumentNullException(nameof(cloudJobSchedule));
            }

            using var message = CreateAddRequest(cloudJobSchedule, jobScheduleAddOptions);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new JobScheduleAddHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 201:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Adds a Job Schedule to the specified Account. </summary>
        /// <param name="cloudJobSchedule"> The Job Schedule to be added. </param>
        /// <param name="jobScheduleAddOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="cloudJobSchedule"/> is null. </exception>
        public ResponseWithHeaders<JobScheduleAddHeaders> Add(JobScheduleAddParameter cloudJobSchedule, JobScheduleAddOptions jobScheduleAddOptions = null, CancellationToken cancellationToken = default)
        {
            if (cloudJobSchedule == null)
            {
                throw new ArgumentNullException(nameof(cloudJobSchedule));
            }

            using var message = CreateAddRequest(cloudJobSchedule, jobScheduleAddOptions);
            _pipeline.Send(message, cancellationToken);
            var headers = new JobScheduleAddHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 201:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListRequest(JobScheduleListOptions jobScheduleListOptions)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_batchUrl, false);
            uri.AppendPath("/jobschedules", false);
            if (jobScheduleListOptions?.Filter != null)
            {
                uri.AppendQuery("$filter", jobScheduleListOptions.Filter, true);
            }
            if (jobScheduleListOptions?.Select != null)
            {
                uri.AppendQuery("$select", jobScheduleListOptions.Select, true);
            }
            if (jobScheduleListOptions?.Expand != null)
            {
                uri.AppendQuery("$expand", jobScheduleListOptions.Expand, true);
            }
            if (jobScheduleListOptions?.MaxResults != null)
            {
                uri.AppendQuery("maxresults", jobScheduleListOptions.MaxResults.Value, true);
            }
            if (jobScheduleListOptions?.Timeout != null)
            {
                uri.AppendQuery("timeout", jobScheduleListOptions.Timeout.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (jobScheduleListOptions?.ClientRequestId != null)
            {
                request.Headers.Add("client-request-id", jobScheduleListOptions.ClientRequestId.Value);
            }
            if (jobScheduleListOptions?.ReturnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", jobScheduleListOptions.ReturnClientRequestId.Value);
            }
            if (jobScheduleListOptions?.OcpDate != null)
            {
                request.Headers.Add("ocp-date", jobScheduleListOptions.OcpDate.Value, "R");
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Lists all of the Job Schedules in the specified Account. </summary>
        /// <param name="jobScheduleListOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<ResponseWithHeaders<CloudJobScheduleListResult, JobScheduleListHeaders>> ListAsync(JobScheduleListOptions jobScheduleListOptions = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateListRequest(jobScheduleListOptions);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new JobScheduleListHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        CloudJobScheduleListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = CloudJobScheduleListResult.DeserializeCloudJobScheduleListResult(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Lists all of the Job Schedules in the specified Account. </summary>
        /// <param name="jobScheduleListOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public ResponseWithHeaders<CloudJobScheduleListResult, JobScheduleListHeaders> List(JobScheduleListOptions jobScheduleListOptions = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateListRequest(jobScheduleListOptions);
            _pipeline.Send(message, cancellationToken);
            var headers = new JobScheduleListHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        CloudJobScheduleListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = CloudJobScheduleListResult.DeserializeCloudJobScheduleListResult(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListNextPageRequest(string nextLink, JobScheduleListOptions jobScheduleListOptions)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_batchUrl, false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            if (jobScheduleListOptions?.ClientRequestId != null)
            {
                request.Headers.Add("client-request-id", jobScheduleListOptions.ClientRequestId.Value);
            }
            if (jobScheduleListOptions?.ReturnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", jobScheduleListOptions.ReturnClientRequestId.Value);
            }
            if (jobScheduleListOptions?.OcpDate != null)
            {
                request.Headers.Add("ocp-date", jobScheduleListOptions.OcpDate.Value, "R");
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Lists all of the Job Schedules in the specified Account. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="jobScheduleListOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public async Task<ResponseWithHeaders<CloudJobScheduleListResult, JobScheduleListHeaders>> ListNextPageAsync(string nextLink, JobScheduleListOptions jobScheduleListOptions = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateListNextPageRequest(nextLink, jobScheduleListOptions);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new JobScheduleListHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        CloudJobScheduleListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = CloudJobScheduleListResult.DeserializeCloudJobScheduleListResult(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Lists all of the Job Schedules in the specified Account. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="jobScheduleListOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public ResponseWithHeaders<CloudJobScheduleListResult, JobScheduleListHeaders> ListNextPage(string nextLink, JobScheduleListOptions jobScheduleListOptions = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateListNextPageRequest(nextLink, jobScheduleListOptions);
            _pipeline.Send(message, cancellationToken);
            var headers = new JobScheduleListHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        CloudJobScheduleListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = CloudJobScheduleListResult.DeserializeCloudJobScheduleListResult(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }
    }
}
