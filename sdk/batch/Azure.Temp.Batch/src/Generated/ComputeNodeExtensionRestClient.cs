// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.Temp.Batch.Models;

namespace Azure.Temp.Batch
{
    internal partial class ComputeNodeExtensionRestClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly string _batchUrl;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> Initializes a new instance of ComputeNodeExtensionRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="batchUrl"> The base URL for all Azure Batch service requests. </param>
        /// <param name="apiVersion"> Api Version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/>, <paramref name="pipeline"/>, <paramref name="batchUrl"/> or <paramref name="apiVersion"/> is null. </exception>
        public ComputeNodeExtensionRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string batchUrl, string apiVersion = "2023-05-01.17.0")
        {
            ClientDiagnostics = clientDiagnostics ?? throw new ArgumentNullException(nameof(clientDiagnostics));
            _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
            _batchUrl = batchUrl ?? throw new ArgumentNullException(nameof(batchUrl));
            _apiVersion = apiVersion ?? throw new ArgumentNullException(nameof(apiVersion));
        }

        internal HttpMessage CreateGetRequest(string poolId, string nodeId, string extensionName, ComputeNodeExtensionGetOptions computeNodeExtensionGetOptions)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_batchUrl, false);
            uri.AppendPath("/pools/", false);
            uri.AppendPath(poolId, true);
            uri.AppendPath("/nodes/", false);
            uri.AppendPath(nodeId, true);
            uri.AppendPath("/extensions/", false);
            uri.AppendPath(extensionName, true);
            if (computeNodeExtensionGetOptions?.Select != null)
            {
                uri.AppendQuery("$select", computeNodeExtensionGetOptions.Select, true);
            }
            if (computeNodeExtensionGetOptions?.Timeout != null)
            {
                uri.AppendQuery("timeout", computeNodeExtensionGetOptions.Timeout.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (computeNodeExtensionGetOptions?.ClientRequestId != null)
            {
                request.Headers.Add("client-request-id", computeNodeExtensionGetOptions.ClientRequestId.Value);
            }
            if (computeNodeExtensionGetOptions?.ReturnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", computeNodeExtensionGetOptions.ReturnClientRequestId.Value);
            }
            if (computeNodeExtensionGetOptions?.OcpDate != null)
            {
                request.Headers.Add("ocp-date", computeNodeExtensionGetOptions.OcpDate.Value, "R");
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Gets information about the specified Compute Node Extension. </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node that contains the extensions. </param>
        /// <param name="extensionName"> The name of the of the Compute Node Extension that you want to get information about. </param>
        /// <param name="computeNodeExtensionGetOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/>, <paramref name="nodeId"/> or <paramref name="extensionName"/> is null. </exception>
        public async Task<ResponseWithHeaders<NodeVMExtension, ComputeNodeExtensionGetHeaders>> GetAsync(string poolId, string nodeId, string extensionName, ComputeNodeExtensionGetOptions computeNodeExtensionGetOptions = null, CancellationToken cancellationToken = default)
        {
            if (poolId == null)
            {
                throw new ArgumentNullException(nameof(poolId));
            }
            if (nodeId == null)
            {
                throw new ArgumentNullException(nameof(nodeId));
            }
            if (extensionName == null)
            {
                throw new ArgumentNullException(nameof(extensionName));
            }

            using var message = CreateGetRequest(poolId, nodeId, extensionName, computeNodeExtensionGetOptions);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new ComputeNodeExtensionGetHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        NodeVMExtension value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = NodeVMExtension.DeserializeNodeVMExtension(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Gets information about the specified Compute Node Extension. </summary>
        /// <param name="poolId"> The ID of the Pool that contains the Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node that contains the extensions. </param>
        /// <param name="extensionName"> The name of the of the Compute Node Extension that you want to get information about. </param>
        /// <param name="computeNodeExtensionGetOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/>, <paramref name="nodeId"/> or <paramref name="extensionName"/> is null. </exception>
        public ResponseWithHeaders<NodeVMExtension, ComputeNodeExtensionGetHeaders> Get(string poolId, string nodeId, string extensionName, ComputeNodeExtensionGetOptions computeNodeExtensionGetOptions = null, CancellationToken cancellationToken = default)
        {
            if (poolId == null)
            {
                throw new ArgumentNullException(nameof(poolId));
            }
            if (nodeId == null)
            {
                throw new ArgumentNullException(nameof(nodeId));
            }
            if (extensionName == null)
            {
                throw new ArgumentNullException(nameof(extensionName));
            }

            using var message = CreateGetRequest(poolId, nodeId, extensionName, computeNodeExtensionGetOptions);
            _pipeline.Send(message, cancellationToken);
            var headers = new ComputeNodeExtensionGetHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        NodeVMExtension value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = NodeVMExtension.DeserializeNodeVMExtension(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListRequest(string poolId, string nodeId, ComputeNodeExtensionListOptions computeNodeExtensionListOptions)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_batchUrl, false);
            uri.AppendPath("/pools/", false);
            uri.AppendPath(poolId, true);
            uri.AppendPath("/nodes/", false);
            uri.AppendPath(nodeId, true);
            uri.AppendPath("/extensions", false);
            if (computeNodeExtensionListOptions?.Select != null)
            {
                uri.AppendQuery("$select", computeNodeExtensionListOptions.Select, true);
            }
            if (computeNodeExtensionListOptions?.MaxResults != null)
            {
                uri.AppendQuery("maxresults", computeNodeExtensionListOptions.MaxResults.Value, true);
            }
            if (computeNodeExtensionListOptions?.Timeout != null)
            {
                uri.AppendQuery("timeout", computeNodeExtensionListOptions.Timeout.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (computeNodeExtensionListOptions?.ClientRequestId != null)
            {
                request.Headers.Add("client-request-id", computeNodeExtensionListOptions.ClientRequestId.Value);
            }
            if (computeNodeExtensionListOptions?.ReturnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", computeNodeExtensionListOptions.ReturnClientRequestId.Value);
            }
            if (computeNodeExtensionListOptions?.OcpDate != null)
            {
                request.Headers.Add("ocp-date", computeNodeExtensionListOptions.OcpDate.Value, "R");
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Lists the Compute Nodes Extensions in the specified Pool. </summary>
        /// <param name="poolId"> The ID of the Pool that contains Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node that you want to list extensions. </param>
        /// <param name="computeNodeExtensionListOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is null. </exception>
        public async Task<ResponseWithHeaders<NodeVMExtensionList, ComputeNodeExtensionListHeaders>> ListAsync(string poolId, string nodeId, ComputeNodeExtensionListOptions computeNodeExtensionListOptions = null, CancellationToken cancellationToken = default)
        {
            if (poolId == null)
            {
                throw new ArgumentNullException(nameof(poolId));
            }
            if (nodeId == null)
            {
                throw new ArgumentNullException(nameof(nodeId));
            }

            using var message = CreateListRequest(poolId, nodeId, computeNodeExtensionListOptions);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new ComputeNodeExtensionListHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        NodeVMExtensionList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = NodeVMExtensionList.DeserializeNodeVMExtensionList(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Lists the Compute Nodes Extensions in the specified Pool. </summary>
        /// <param name="poolId"> The ID of the Pool that contains Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node that you want to list extensions. </param>
        /// <param name="computeNodeExtensionListOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="poolId"/> or <paramref name="nodeId"/> is null. </exception>
        public ResponseWithHeaders<NodeVMExtensionList, ComputeNodeExtensionListHeaders> List(string poolId, string nodeId, ComputeNodeExtensionListOptions computeNodeExtensionListOptions = null, CancellationToken cancellationToken = default)
        {
            if (poolId == null)
            {
                throw new ArgumentNullException(nameof(poolId));
            }
            if (nodeId == null)
            {
                throw new ArgumentNullException(nameof(nodeId));
            }

            using var message = CreateListRequest(poolId, nodeId, computeNodeExtensionListOptions);
            _pipeline.Send(message, cancellationToken);
            var headers = new ComputeNodeExtensionListHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        NodeVMExtensionList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = NodeVMExtensionList.DeserializeNodeVMExtensionList(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListNextPageRequest(string nextLink, string poolId, string nodeId, ComputeNodeExtensionListOptions computeNodeExtensionListOptions)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_batchUrl, false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            if (computeNodeExtensionListOptions?.ClientRequestId != null)
            {
                request.Headers.Add("client-request-id", computeNodeExtensionListOptions.ClientRequestId.Value);
            }
            if (computeNodeExtensionListOptions?.ReturnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", computeNodeExtensionListOptions.ReturnClientRequestId.Value);
            }
            if (computeNodeExtensionListOptions?.OcpDate != null)
            {
                request.Headers.Add("ocp-date", computeNodeExtensionListOptions.OcpDate.Value, "R");
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Lists the Compute Nodes Extensions in the specified Pool. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="poolId"> The ID of the Pool that contains Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node that you want to list extensions. </param>
        /// <param name="computeNodeExtensionListOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="poolId"/> or <paramref name="nodeId"/> is null. </exception>
        public async Task<ResponseWithHeaders<NodeVMExtensionList, ComputeNodeExtensionListHeaders>> ListNextPageAsync(string nextLink, string poolId, string nodeId, ComputeNodeExtensionListOptions computeNodeExtensionListOptions = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (poolId == null)
            {
                throw new ArgumentNullException(nameof(poolId));
            }
            if (nodeId == null)
            {
                throw new ArgumentNullException(nameof(nodeId));
            }

            using var message = CreateListNextPageRequest(nextLink, poolId, nodeId, computeNodeExtensionListOptions);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new ComputeNodeExtensionListHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        NodeVMExtensionList value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = NodeVMExtensionList.DeserializeNodeVMExtensionList(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Lists the Compute Nodes Extensions in the specified Pool. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="poolId"> The ID of the Pool that contains Compute Node. </param>
        /// <param name="nodeId"> The ID of the Compute Node that you want to list extensions. </param>
        /// <param name="computeNodeExtensionListOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="poolId"/> or <paramref name="nodeId"/> is null. </exception>
        public ResponseWithHeaders<NodeVMExtensionList, ComputeNodeExtensionListHeaders> ListNextPage(string nextLink, string poolId, string nodeId, ComputeNodeExtensionListOptions computeNodeExtensionListOptions = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (poolId == null)
            {
                throw new ArgumentNullException(nameof(poolId));
            }
            if (nodeId == null)
            {
                throw new ArgumentNullException(nameof(nodeId));
            }

            using var message = CreateListNextPageRequest(nextLink, poolId, nodeId, computeNodeExtensionListOptions);
            _pipeline.Send(message, cancellationToken);
            var headers = new ComputeNodeExtensionListHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        NodeVMExtensionList value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = NodeVMExtensionList.DeserializeNodeVMExtensionList(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }
    }
}
