// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;

namespace Azure.Temp.Batch.Models
{
    /// <summary> Resource usage statistics for a Job. </summary>
    public partial class JobStatistics
    {
        /// <summary> Initializes a new instance of JobStatistics. </summary>
        /// <param name="url"> The URL of the statistics. </param>
        /// <param name="startTime"> The start time of the time range covered by the statistics. </param>
        /// <param name="lastUpdateTime"> The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime. </param>
        /// <param name="userCPUTime"> The total user mode CPU time (summed across all cores and all Compute Nodes) consumed by all Tasks in the Job. </param>
        /// <param name="kernelCPUTime"> The total kernel mode CPU time (summed across all cores and all Compute Nodes) consumed by all Tasks in the Job. </param>
        /// <param name="wallClockTime"> The wall clock time is the elapsed time from when the Task started running on a Compute Node to when it finished (or to the last time the statistics were updated, if the Task had not finished by then). If a Task was retried, this includes the wall clock time of all the Task retries. </param>
        /// <param name="readIOps"> The total number of disk read operations made by all Tasks in the Job. </param>
        /// <param name="writeIOps"> The total number of disk write operations made by all Tasks in the Job. </param>
        /// <param name="readIOGiB"> The total amount of data in GiB read from disk by all Tasks in the Job. </param>
        /// <param name="writeIOGiB"> The total amount of data in GiB written to disk by all Tasks in the Job. </param>
        /// <param name="numSucceededTasks"> A Task completes successfully if it returns exit code 0. </param>
        /// <param name="numFailedTasks"> A Task fails if it exhausts its maximum retry count without returning exit code 0. </param>
        /// <param name="numTaskRetries"> The total number of retries on all the Tasks in the Job during the given time range. </param>
        /// <param name="waitTime"> The wait time for a Task is defined as the elapsed time between the creation of the Task and the start of Task execution. (If the Task is retried due to failures, the wait time is the time to the most recent Task execution.) This value is only reported in the Account lifetime statistics; it is not included in the Job statistics. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="url"/> is null. </exception>
        internal JobStatistics(string url, DateTimeOffset startTime, DateTimeOffset lastUpdateTime, TimeSpan userCPUTime, TimeSpan kernelCPUTime, TimeSpan wallClockTime, long readIOps, long writeIOps, double readIOGiB, double writeIOGiB, long numSucceededTasks, long numFailedTasks, long numTaskRetries, TimeSpan waitTime)
        {
            Argument.AssertNotNull(url, nameof(url));

            Url = url;
            StartTime = startTime;
            LastUpdateTime = lastUpdateTime;
            UserCPUTime = userCPUTime;
            KernelCPUTime = kernelCPUTime;
            WallClockTime = wallClockTime;
            ReadIOps = readIOps;
            WriteIOps = writeIOps;
            ReadIOGiB = readIOGiB;
            WriteIOGiB = writeIOGiB;
            NumSucceededTasks = numSucceededTasks;
            NumFailedTasks = numFailedTasks;
            NumTaskRetries = numTaskRetries;
            WaitTime = waitTime;
        }

        /// <summary> The URL of the statistics. </summary>
        public string Url { get; }
        /// <summary> The start time of the time range covered by the statistics. </summary>
        public DateTimeOffset StartTime { get; }
        /// <summary> The time at which the statistics were last updated. All statistics are limited to the range between startTime and lastUpdateTime. </summary>
        public DateTimeOffset LastUpdateTime { get; }
        /// <summary> The total user mode CPU time (summed across all cores and all Compute Nodes) consumed by all Tasks in the Job. </summary>
        public TimeSpan UserCPUTime { get; }
        /// <summary> The total kernel mode CPU time (summed across all cores and all Compute Nodes) consumed by all Tasks in the Job. </summary>
        public TimeSpan KernelCPUTime { get; }
        /// <summary> The wall clock time is the elapsed time from when the Task started running on a Compute Node to when it finished (or to the last time the statistics were updated, if the Task had not finished by then). If a Task was retried, this includes the wall clock time of all the Task retries. </summary>
        public TimeSpan WallClockTime { get; }
        /// <summary> The total number of disk read operations made by all Tasks in the Job. </summary>
        public long ReadIOps { get; }
        /// <summary> The total number of disk write operations made by all Tasks in the Job. </summary>
        public long WriteIOps { get; }
        /// <summary> The total amount of data in GiB read from disk by all Tasks in the Job. </summary>
        public double ReadIOGiB { get; }
        /// <summary> The total amount of data in GiB written to disk by all Tasks in the Job. </summary>
        public double WriteIOGiB { get; }
        /// <summary> A Task completes successfully if it returns exit code 0. </summary>
        public long NumSucceededTasks { get; }
        /// <summary> A Task fails if it exhausts its maximum retry count without returning exit code 0. </summary>
        public long NumFailedTasks { get; }
        /// <summary> The total number of retries on all the Tasks in the Job during the given time range. </summary>
        public long NumTaskRetries { get; }
        /// <summary> The wait time for a Task is defined as the elapsed time between the creation of the Task and the start of Task execution. (If the Task is retried due to failures, the wait time is the time to the most recent Task execution.) This value is only reported in the Account lifetime statistics; it is not included in the Job statistics. </summary>
        public TimeSpan WaitTime { get; }
    }
}
