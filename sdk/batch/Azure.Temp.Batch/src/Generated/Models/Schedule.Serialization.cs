// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.Temp.Batch.Models
{
    public partial class Schedule : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(DoNotRunUntil))
            {
                writer.WritePropertyName("doNotRunUntil"u8);
                writer.WriteStringValue(DoNotRunUntil.Value, "O");
            }
            if (Optional.IsDefined(DoNotRunAfter))
            {
                writer.WritePropertyName("doNotRunAfter"u8);
                writer.WriteStringValue(DoNotRunAfter.Value, "O");
            }
            if (Optional.IsDefined(StartWindow))
            {
                writer.WritePropertyName("startWindow"u8);
                writer.WriteStringValue(StartWindow.Value, "P");
            }
            if (Optional.IsDefined(RecurrenceInterval))
            {
                writer.WritePropertyName("recurrenceInterval"u8);
                writer.WriteStringValue(RecurrenceInterval.Value, "P");
            }
            writer.WriteEndObject();
        }

        internal static Schedule DeserializeSchedule(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<DateTimeOffset> doNotRunUntil = default;
            Optional<DateTimeOffset> doNotRunAfter = default;
            Optional<TimeSpan> startWindow = default;
            Optional<TimeSpan> recurrenceInterval = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("doNotRunUntil"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    doNotRunUntil = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("doNotRunAfter"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    doNotRunAfter = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("startWindow"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    startWindow = property.Value.GetTimeSpan("P");
                    continue;
                }
                if (property.NameEquals("recurrenceInterval"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    recurrenceInterval = property.Value.GetTimeSpan("P");
                    continue;
                }
            }
            return new Schedule(Optional.ToNullable(doNotRunUntil), Optional.ToNullable(doNotRunAfter), Optional.ToNullable(startWindow), Optional.ToNullable(recurrenceInterval));
        }
    }
}
