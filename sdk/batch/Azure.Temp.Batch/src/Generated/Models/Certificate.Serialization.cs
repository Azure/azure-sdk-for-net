// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.Temp.Batch.Models
{
    public partial class Certificate
    {
        internal static Certificate DeserializeCertificate(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> thumbprint = default;
            Optional<string> thumbprintAlgorithm = default;
            Optional<string> url = default;
            Optional<CertificateState> state = default;
            Optional<DateTimeOffset> stateTransitionTime = default;
            Optional<CertificateState> previousState = default;
            Optional<DateTimeOffset> previousStateTransitionTime = default;
            Optional<string> publicData = default;
            Optional<DeleteCertificateError> deleteCertificateError = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("thumbprint"u8))
                {
                    thumbprint = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("thumbprintAlgorithm"u8))
                {
                    thumbprintAlgorithm = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("url"u8))
                {
                    url = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("state"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    state = property.Value.GetString().ToCertificateState();
                    continue;
                }
                if (property.NameEquals("stateTransitionTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    stateTransitionTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("previousState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    previousState = property.Value.GetString().ToCertificateState();
                    continue;
                }
                if (property.NameEquals("previousStateTransitionTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    previousStateTransitionTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("publicData"u8))
                {
                    publicData = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("deleteCertificateError"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    deleteCertificateError = DeleteCertificateError.DeserializeDeleteCertificateError(property.Value);
                    continue;
                }
            }
            return new Certificate(thumbprint.Value, thumbprintAlgorithm.Value, url.Value, Optional.ToNullable(state), Optional.ToNullable(stateTransitionTime), Optional.ToNullable(previousState), Optional.ToNullable(previousStateTransitionTime), publicData.Value, deleteCertificateError.Value);
        }
    }
}
