// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.Temp.Batch.Models
{
    internal static partial class ComputeNodeStateExtensions
    {
        public static string ToSerialString(this ComputeNodeState value) => value switch
        {
            ComputeNodeState.Idle => "idle",
            ComputeNodeState.Rebooting => "rebooting",
            ComputeNodeState.Reimaging => "reimaging",
            ComputeNodeState.Running => "running",
            ComputeNodeState.Unusable => "unusable",
            ComputeNodeState.Creating => "creating",
            ComputeNodeState.Starting => "starting",
            ComputeNodeState.WaitingForStartTask => "waitingforstarttask",
            ComputeNodeState.StartTaskFailed => "starttaskfailed",
            ComputeNodeState.Unknown => "unknown",
            ComputeNodeState.LeavingPool => "leavingpool",
            ComputeNodeState.Offline => "offline",
            ComputeNodeState.Preempted => "preempted",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown ComputeNodeState value.")
        };

        public static ComputeNodeState ToComputeNodeState(this string value)
        {
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "idle")) return ComputeNodeState.Idle;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "rebooting")) return ComputeNodeState.Rebooting;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "reimaging")) return ComputeNodeState.Reimaging;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "running")) return ComputeNodeState.Running;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "unusable")) return ComputeNodeState.Unusable;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "creating")) return ComputeNodeState.Creating;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "starting")) return ComputeNodeState.Starting;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "waitingforstarttask")) return ComputeNodeState.WaitingForStartTask;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "starttaskfailed")) return ComputeNodeState.StartTaskFailed;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "unknown")) return ComputeNodeState.Unknown;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "leavingpool")) return ComputeNodeState.LeavingPool;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "offline")) return ComputeNodeState.Offline;
            if (StringComparer.OrdinalIgnoreCase.Equals(value, "preempted")) return ComputeNodeState.Preempted;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown ComputeNodeState value.");
        }
    }
}
