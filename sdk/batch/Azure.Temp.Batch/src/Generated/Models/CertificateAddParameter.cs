// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;

namespace Azure.Temp.Batch.Models
{
    /// <summary> A Certificate that can be installed on Compute Nodes and can be used to authenticate operations on the machine. </summary>
    public partial class CertificateAddParameter
    {
        /// <summary> Initializes a new instance of CertificateAddParameter. </summary>
        /// <param name="thumbprint"> The X.509 thumbprint of the Certificate. This is a sequence of up to 40 hex digits (it may include spaces but these are removed). </param>
        /// <param name="thumbprintAlgorithm"> The algorithm used to derive the thumbprint. This must be sha1. </param>
        /// <param name="data"> The base64-encoded contents of the Certificate. The maximum size is 10KB. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="thumbprint"/>, <paramref name="thumbprintAlgorithm"/> or <paramref name="data"/> is null. </exception>
        public CertificateAddParameter(string thumbprint, string thumbprintAlgorithm, string data)
        {
            Argument.AssertNotNull(thumbprint, nameof(thumbprint));
            Argument.AssertNotNull(thumbprintAlgorithm, nameof(thumbprintAlgorithm));
            Argument.AssertNotNull(data, nameof(data));

            Thumbprint = thumbprint;
            ThumbprintAlgorithm = thumbprintAlgorithm;
            Data = data;
        }

        /// <summary> The X.509 thumbprint of the Certificate. This is a sequence of up to 40 hex digits (it may include spaces but these are removed). </summary>
        public string Thumbprint { get; }
        /// <summary> The algorithm used to derive the thumbprint. This must be sha1. </summary>
        public string ThumbprintAlgorithm { get; }
        /// <summary> The base64-encoded contents of the Certificate. The maximum size is 10KB. </summary>
        public string Data { get; }
        /// <summary> The format of the Certificate data. </summary>
        public CertificateFormat? CertificateFormat { get; set; }
        /// <summary> This must be omitted if the Certificate format is cer. </summary>
        public string Password { get; set; }
    }
}
