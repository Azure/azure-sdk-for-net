// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.Temp.Batch.Models
{
    public partial class AutoPoolSpecification : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(AutoPoolIdPrefix))
            {
                writer.WritePropertyName("autoPoolIdPrefix"u8);
                writer.WriteStringValue(AutoPoolIdPrefix);
            }
            writer.WritePropertyName("poolLifetimeOption"u8);
            writer.WriteStringValue(PoolLifetimeOption.ToSerialString());
            if (Optional.IsDefined(KeepAlive))
            {
                writer.WritePropertyName("keepAlive"u8);
                writer.WriteBooleanValue(KeepAlive.Value);
            }
            if (Optional.IsDefined(Pool))
            {
                writer.WritePropertyName("pool"u8);
                writer.WriteObjectValue(Pool);
            }
            writer.WriteEndObject();
        }

        internal static AutoPoolSpecification DeserializeAutoPoolSpecification(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> autoPoolIdPrefix = default;
            PoolLifetimeOption poolLifetimeOption = default;
            Optional<bool> keepAlive = default;
            Optional<PoolSpecification> pool = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("autoPoolIdPrefix"u8))
                {
                    autoPoolIdPrefix = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("poolLifetimeOption"u8))
                {
                    poolLifetimeOption = property.Value.GetString().ToPoolLifetimeOption();
                    continue;
                }
                if (property.NameEquals("keepAlive"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    keepAlive = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("pool"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    pool = PoolSpecification.DeserializePoolSpecification(property.Value);
                    continue;
                }
            }
            return new AutoPoolSpecification(autoPoolIdPrefix.Value, poolLifetimeOption, Optional.ToNullable(keepAlive), pool.Value);
        }
    }
}
