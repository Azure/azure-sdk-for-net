// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.Temp.Batch.Models;

namespace Azure.Temp.Batch
{
    internal partial class AccountRestClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly string _batchUrl;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> Initializes a new instance of AccountRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="batchUrl"> The base URL for all Azure Batch service requests. </param>
        /// <param name="apiVersion"> Api Version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/>, <paramref name="pipeline"/>, <paramref name="batchUrl"/> or <paramref name="apiVersion"/> is null. </exception>
        public AccountRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string batchUrl, string apiVersion = "2023-05-01.17.0")
        {
            ClientDiagnostics = clientDiagnostics ?? throw new ArgumentNullException(nameof(clientDiagnostics));
            _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
            _batchUrl = batchUrl ?? throw new ArgumentNullException(nameof(batchUrl));
            _apiVersion = apiVersion ?? throw new ArgumentNullException(nameof(apiVersion));
        }

        internal HttpMessage CreateListSupportedImagesRequest(AccountListSupportedImagesOptions accountListSupportedImagesOptions)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_batchUrl, false);
            uri.AppendPath("/supportedimages", false);
            if (accountListSupportedImagesOptions?.Filter != null)
            {
                uri.AppendQuery("$filter", accountListSupportedImagesOptions.Filter, true);
            }
            if (accountListSupportedImagesOptions?.MaxResults != null)
            {
                uri.AppendQuery("maxresults", accountListSupportedImagesOptions.MaxResults.Value, true);
            }
            if (accountListSupportedImagesOptions?.Timeout != null)
            {
                uri.AppendQuery("timeout", accountListSupportedImagesOptions.Timeout.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (accountListSupportedImagesOptions?.ClientRequestId != null)
            {
                request.Headers.Add("client-request-id", accountListSupportedImagesOptions.ClientRequestId.Value);
            }
            if (accountListSupportedImagesOptions?.ReturnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", accountListSupportedImagesOptions.ReturnClientRequestId.Value);
            }
            if (accountListSupportedImagesOptions?.OcpDate != null)
            {
                request.Headers.Add("ocp-date", accountListSupportedImagesOptions.OcpDate.Value, "R");
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Lists all Virtual Machine Images supported by the Azure Batch service. </summary>
        /// <param name="accountListSupportedImagesOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<ResponseWithHeaders<AccountListSupportedImagesResult, AccountListSupportedImagesHeaders>> ListSupportedImagesAsync(AccountListSupportedImagesOptions accountListSupportedImagesOptions = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateListSupportedImagesRequest(accountListSupportedImagesOptions);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new AccountListSupportedImagesHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AccountListSupportedImagesResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AccountListSupportedImagesResult.DeserializeAccountListSupportedImagesResult(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Lists all Virtual Machine Images supported by the Azure Batch service. </summary>
        /// <param name="accountListSupportedImagesOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public ResponseWithHeaders<AccountListSupportedImagesResult, AccountListSupportedImagesHeaders> ListSupportedImages(AccountListSupportedImagesOptions accountListSupportedImagesOptions = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateListSupportedImagesRequest(accountListSupportedImagesOptions);
            _pipeline.Send(message, cancellationToken);
            var headers = new AccountListSupportedImagesHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AccountListSupportedImagesResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AccountListSupportedImagesResult.DeserializeAccountListSupportedImagesResult(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListPoolNodeCountsRequest(AccountListPoolNodeCountsOptions accountListPoolNodeCountsOptions)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_batchUrl, false);
            uri.AppendPath("/nodecounts", false);
            if (accountListPoolNodeCountsOptions?.Filter != null)
            {
                uri.AppendQuery("$filter", accountListPoolNodeCountsOptions.Filter, true);
            }
            if (accountListPoolNodeCountsOptions?.MaxResults != null)
            {
                uri.AppendQuery("maxresults", accountListPoolNodeCountsOptions.MaxResults.Value, true);
            }
            if (accountListPoolNodeCountsOptions?.Timeout != null)
            {
                uri.AppendQuery("timeout", accountListPoolNodeCountsOptions.Timeout.Value, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            if (accountListPoolNodeCountsOptions?.ClientRequestId != null)
            {
                request.Headers.Add("client-request-id", accountListPoolNodeCountsOptions.ClientRequestId.Value);
            }
            if (accountListPoolNodeCountsOptions?.ReturnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", accountListPoolNodeCountsOptions.ReturnClientRequestId.Value);
            }
            if (accountListPoolNodeCountsOptions?.OcpDate != null)
            {
                request.Headers.Add("ocp-date", accountListPoolNodeCountsOptions.OcpDate.Value, "R");
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Gets the number of Compute Nodes in each state, grouped by Pool. Note that the numbers returned may not always be up to date. If you need exact node counts, use a list query. </summary>
        /// <param name="accountListPoolNodeCountsOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<ResponseWithHeaders<PoolNodeCountsListResult, AccountListPoolNodeCountsHeaders>> ListPoolNodeCountsAsync(AccountListPoolNodeCountsOptions accountListPoolNodeCountsOptions = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateListPoolNodeCountsRequest(accountListPoolNodeCountsOptions);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new AccountListPoolNodeCountsHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PoolNodeCountsListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PoolNodeCountsListResult.DeserializePoolNodeCountsListResult(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Gets the number of Compute Nodes in each state, grouped by Pool. Note that the numbers returned may not always be up to date. If you need exact node counts, use a list query. </summary>
        /// <param name="accountListPoolNodeCountsOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public ResponseWithHeaders<PoolNodeCountsListResult, AccountListPoolNodeCountsHeaders> ListPoolNodeCounts(AccountListPoolNodeCountsOptions accountListPoolNodeCountsOptions = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateListPoolNodeCountsRequest(accountListPoolNodeCountsOptions);
            _pipeline.Send(message, cancellationToken);
            var headers = new AccountListPoolNodeCountsHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PoolNodeCountsListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PoolNodeCountsListResult.DeserializePoolNodeCountsListResult(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListSupportedImagesNextPageRequest(string nextLink, AccountListSupportedImagesOptions accountListSupportedImagesOptions)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_batchUrl, false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            if (accountListSupportedImagesOptions?.ClientRequestId != null)
            {
                request.Headers.Add("client-request-id", accountListSupportedImagesOptions.ClientRequestId.Value);
            }
            if (accountListSupportedImagesOptions?.ReturnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", accountListSupportedImagesOptions.ReturnClientRequestId.Value);
            }
            if (accountListSupportedImagesOptions?.OcpDate != null)
            {
                request.Headers.Add("ocp-date", accountListSupportedImagesOptions.OcpDate.Value, "R");
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Lists all Virtual Machine Images supported by the Azure Batch service. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="accountListSupportedImagesOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public async Task<ResponseWithHeaders<AccountListSupportedImagesResult, AccountListSupportedImagesHeaders>> ListSupportedImagesNextPageAsync(string nextLink, AccountListSupportedImagesOptions accountListSupportedImagesOptions = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateListSupportedImagesNextPageRequest(nextLink, accountListSupportedImagesOptions);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new AccountListSupportedImagesHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AccountListSupportedImagesResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AccountListSupportedImagesResult.DeserializeAccountListSupportedImagesResult(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Lists all Virtual Machine Images supported by the Azure Batch service. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="accountListSupportedImagesOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public ResponseWithHeaders<AccountListSupportedImagesResult, AccountListSupportedImagesHeaders> ListSupportedImagesNextPage(string nextLink, AccountListSupportedImagesOptions accountListSupportedImagesOptions = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateListSupportedImagesNextPageRequest(nextLink, accountListSupportedImagesOptions);
            _pipeline.Send(message, cancellationToken);
            var headers = new AccountListSupportedImagesHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AccountListSupportedImagesResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AccountListSupportedImagesResult.DeserializeAccountListSupportedImagesResult(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListPoolNodeCountsNextPageRequest(string nextLink, AccountListPoolNodeCountsOptions accountListPoolNodeCountsOptions)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.AppendRaw(_batchUrl, false);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            if (accountListPoolNodeCountsOptions?.ClientRequestId != null)
            {
                request.Headers.Add("client-request-id", accountListPoolNodeCountsOptions.ClientRequestId.Value);
            }
            if (accountListPoolNodeCountsOptions?.ReturnClientRequestId != null)
            {
                request.Headers.Add("return-client-request-id", accountListPoolNodeCountsOptions.ReturnClientRequestId.Value);
            }
            if (accountListPoolNodeCountsOptions?.OcpDate != null)
            {
                request.Headers.Add("ocp-date", accountListPoolNodeCountsOptions.OcpDate.Value, "R");
            }
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Gets the number of Compute Nodes in each state, grouped by Pool. Note that the numbers returned may not always be up to date. If you need exact node counts, use a list query. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="accountListPoolNodeCountsOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public async Task<ResponseWithHeaders<PoolNodeCountsListResult, AccountListPoolNodeCountsHeaders>> ListPoolNodeCountsNextPageAsync(string nextLink, AccountListPoolNodeCountsOptions accountListPoolNodeCountsOptions = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateListPoolNodeCountsNextPageRequest(nextLink, accountListPoolNodeCountsOptions);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new AccountListPoolNodeCountsHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PoolNodeCountsListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = PoolNodeCountsListResult.DeserializePoolNodeCountsListResult(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> Gets the number of Compute Nodes in each state, grouped by Pool. Note that the numbers returned may not always be up to date. If you need exact node counts, use a list query. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="accountListPoolNodeCountsOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> is null. </exception>
        public ResponseWithHeaders<PoolNodeCountsListResult, AccountListPoolNodeCountsHeaders> ListPoolNodeCountsNextPage(string nextLink, AccountListPoolNodeCountsOptions accountListPoolNodeCountsOptions = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }

            using var message = CreateListPoolNodeCountsNextPageRequest(nextLink, accountListPoolNodeCountsOptions);
            _pipeline.Send(message, cancellationToken);
            var headers = new AccountListPoolNodeCountsHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        PoolNodeCountsListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = PoolNodeCountsListResult.DeserializePoolNodeCountsListResult(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }
    }
}
