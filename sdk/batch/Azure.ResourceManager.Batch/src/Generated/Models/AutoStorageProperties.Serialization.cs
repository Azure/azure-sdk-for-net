// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Batch.Models
{
    public partial class AutoStorageProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("lastKeySync");
            writer.WriteStringValue(LastKeySync, "O");
            writer.WritePropertyName("storageAccountId");
            writer.WriteStringValue(StorageAccountId);
            if (Optional.IsDefined(AuthenticationMode))
            {
                writer.WritePropertyName("authenticationMode");
                writer.WriteStringValue(AuthenticationMode.Value.ToSerialString());
            }
            if (Optional.IsDefined(NodeIdentityReference))
            {
                writer.WritePropertyName("nodeIdentityReference");
                writer.WriteObjectValue(NodeIdentityReference);
            }
            writer.WriteEndObject();
        }

        internal static AutoStorageProperties DeserializeAutoStorageProperties(JsonElement element)
        {
            DateTimeOffset lastKeySync = default;
            string storageAccountId = default;
            Optional<AutoStorageAuthenticationMode> authenticationMode = default;
            Optional<ComputeNodeIdentityReference> nodeIdentityReference = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("lastKeySync"))
                {
                    lastKeySync = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("storageAccountId"))
                {
                    storageAccountId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("authenticationMode"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    authenticationMode = property.Value.GetString().ToAutoStorageAuthenticationMode();
                    continue;
                }
                if (property.NameEquals("nodeIdentityReference"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    nodeIdentityReference = ComputeNodeIdentityReference.DeserializeComputeNodeIdentityReference(property.Value);
                    continue;
                }
            }
            return new AutoStorageProperties(storageAccountId, Optional.ToNullable(authenticationMode), nodeIdentityReference.Value, lastKeySync);
        }
    }
}
