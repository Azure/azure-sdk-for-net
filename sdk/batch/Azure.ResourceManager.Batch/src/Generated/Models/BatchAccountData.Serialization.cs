// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Batch.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Batch
{
    public partial class BatchAccountData
    {
        internal static BatchAccountData DeserializeBatchAccountData(JsonElement element)
        {
            Optional<BatchAccountIdentity> identity = default;
            Optional<AzureLocation> location = default;
            Optional<IReadOnlyDictionary<string, string>> tags = default;
            ResourceIdentifier id = default;
            string name = default;
            Core.ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<string> accountEndpoint = default;
            Optional<string> nodeManagementEndpoint = default;
            Optional<ProvisioningState> provisioningState = default;
            Optional<PoolAllocationMode> poolAllocationMode = default;
            Optional<KeyVaultReference> keyVaultReference = default;
            Optional<PublicNetworkAccessType?> publicNetworkAccess = default;
            Optional<BatchVirtualMachineNetworkProfile> networkProfile = default;
            Optional<IReadOnlyList<BatchPrivateEndpointConnectionData>> privateEndpointConnections = default;
            Optional<AutoStorageProperties> autoStorage = default;
            Optional<Models.EncryptionProperties> encryption = default;
            Optional<int?> dedicatedCoreQuota = default;
            Optional<int?> lowPriorityCoreQuota = default;
            Optional<IReadOnlyList<VirtualMachineFamilyCoreQuota>> dedicatedCoreQuotaPerVmFamily = default;
            Optional<bool> dedicatedCoreQuotaPerVmFamilyEnforced = default;
            Optional<int> poolQuota = default;
            Optional<int> activeJobAndJobScheduleQuota = default;
            Optional<IReadOnlyList<AuthenticationMode>> allowedAuthenticationModes = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("identity"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    identity = BatchAccountIdentity.DeserializeBatchAccountIdentity(property.Value);
                    continue;
                }
                if (property.NameEquals("location"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    location = new AzureLocation(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("tags"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("id"))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = new Core.ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.ToString());
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("accountEndpoint"))
                        {
                            accountEndpoint = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("nodeManagementEndpoint"))
                        {
                            nodeManagementEndpoint = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("provisioningState"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            provisioningState = property0.Value.GetString().ToProvisioningState();
                            continue;
                        }
                        if (property0.NameEquals("poolAllocationMode"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            poolAllocationMode = property0.Value.GetString().ToPoolAllocationMode();
                            continue;
                        }
                        if (property0.NameEquals("keyVaultReference"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            keyVaultReference = KeyVaultReference.DeserializeKeyVaultReference(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("publicNetworkAccess"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                publicNetworkAccess = null;
                                continue;
                            }
                            publicNetworkAccess = property0.Value.GetString().ToPublicNetworkAccessType();
                            continue;
                        }
                        if (property0.NameEquals("networkProfile"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                networkProfile = null;
                                continue;
                            }
                            networkProfile = BatchVirtualMachineNetworkProfile.DeserializeBatchVirtualMachineNetworkProfile(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("privateEndpointConnections"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                privateEndpointConnections = null;
                                continue;
                            }
                            List<BatchPrivateEndpointConnectionData> array = new List<BatchPrivateEndpointConnectionData>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(BatchPrivateEndpointConnectionData.DeserializeBatchPrivateEndpointConnectionData(item));
                            }
                            privateEndpointConnections = array;
                            continue;
                        }
                        if (property0.NameEquals("autoStorage"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            autoStorage = AutoStorageProperties.DeserializeAutoStorageProperties(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("encryption"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            encryption = Models.EncryptionProperties.DeserializeEncryptionProperties(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("dedicatedCoreQuota"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                dedicatedCoreQuota = null;
                                continue;
                            }
                            dedicatedCoreQuota = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("lowPriorityCoreQuota"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                lowPriorityCoreQuota = null;
                                continue;
                            }
                            lowPriorityCoreQuota = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("dedicatedCoreQuotaPerVMFamily"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                dedicatedCoreQuotaPerVmFamily = null;
                                continue;
                            }
                            List<VirtualMachineFamilyCoreQuota> array = new List<VirtualMachineFamilyCoreQuota>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(VirtualMachineFamilyCoreQuota.DeserializeVirtualMachineFamilyCoreQuota(item));
                            }
                            dedicatedCoreQuotaPerVmFamily = array;
                            continue;
                        }
                        if (property0.NameEquals("dedicatedCoreQuotaPerVMFamilyEnforced"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            dedicatedCoreQuotaPerVmFamilyEnforced = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("poolQuota"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            poolQuota = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("activeJobAndJobScheduleQuota"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            activeJobAndJobScheduleQuota = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("allowedAuthenticationModes"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<AuthenticationMode> array = new List<AuthenticationMode>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString().ToAuthenticationMode());
                            }
                            allowedAuthenticationModes = array;
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new BatchAccountData(id, name, type, systemData.Value, identity.Value, accountEndpoint.Value, nodeManagementEndpoint.Value, Optional.ToNullable(provisioningState), Optional.ToNullable(poolAllocationMode), keyVaultReference.Value, Optional.ToNullable(publicNetworkAccess), networkProfile.Value, Optional.ToList(privateEndpointConnections), autoStorage.Value, encryption.Value, Optional.ToNullable(dedicatedCoreQuota), Optional.ToNullable(lowPriorityCoreQuota), Optional.ToList(dedicatedCoreQuotaPerVmFamily), Optional.ToNullable(dedicatedCoreQuotaPerVmFamilyEnforced), Optional.ToNullable(poolQuota), Optional.ToNullable(activeJobAndJobScheduleQuota), Optional.ToList(allowedAuthenticationModes), Optional.ToNullable(location), Optional.ToDictionary(tags));
        }
    }
}
