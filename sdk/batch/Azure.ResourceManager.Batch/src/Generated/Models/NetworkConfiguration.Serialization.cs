// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Batch.Models
{
    public partial class NetworkConfiguration : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(SubnetId))
            {
                writer.WritePropertyName("subnetId");
                writer.WriteStringValue(SubnetId);
            }
            if (Optional.IsDefined(DynamicVNetAssignmentScope))
            {
                writer.WritePropertyName("dynamicVNetAssignmentScope");
                writer.WriteStringValue(DynamicVNetAssignmentScope.Value.ToSerialString());
            }
            if (Optional.IsDefined(EndpointConfiguration))
            {
                writer.WritePropertyName("endpointConfiguration");
                writer.WriteObjectValue(EndpointConfiguration);
            }
            if (Optional.IsDefined(PublicIPAddressConfiguration))
            {
                writer.WritePropertyName("publicIPAddressConfiguration");
                writer.WriteObjectValue(PublicIPAddressConfiguration);
            }
            writer.WriteEndObject();
        }

        internal static NetworkConfiguration DeserializeNetworkConfiguration(JsonElement element)
        {
            Optional<string> subnetId = default;
            Optional<DynamicVNetAssignmentScope> dynamicVNetAssignmentScope = default;
            Optional<PoolEndpointConfiguration> endpointConfiguration = default;
            Optional<PublicIPAddressConfiguration> publicIPAddressConfiguration = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("subnetId"))
                {
                    subnetId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("dynamicVNetAssignmentScope"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    dynamicVNetAssignmentScope = property.Value.GetString().ToDynamicVNetAssignmentScope();
                    continue;
                }
                if (property.NameEquals("endpointConfiguration"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    endpointConfiguration = PoolEndpointConfiguration.DeserializePoolEndpointConfiguration(property.Value);
                    continue;
                }
                if (property.NameEquals("publicIPAddressConfiguration"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    publicIPAddressConfiguration = PublicIPAddressConfiguration.DeserializePublicIPAddressConfiguration(property.Value);
                    continue;
                }
            }
            return new NetworkConfiguration(subnetId.Value, Optional.ToNullable(dynamicVNetAssignmentScope), endpointConfiguration.Value, publicIPAddressConfiguration.Value);
        }
    }
}
