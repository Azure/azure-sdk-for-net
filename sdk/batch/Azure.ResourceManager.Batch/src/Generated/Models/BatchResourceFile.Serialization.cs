// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.Batch.Models
{
    public partial class BatchResourceFile : IUtf8JsonSerializable, IModelJsonSerializable<BatchResourceFile>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IModelJsonSerializable<BatchResourceFile>)this).Serialize(writer, ModelSerializerOptions.DefaultWireOptions);

        void IModelJsonSerializable<BatchResourceFile>.Serialize(Utf8JsonWriter writer, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<BatchResourceFile>(this, options.Format);

            writer.WriteStartObject();
            if (Optional.IsDefined(AutoBlobContainerName))
            {
                writer.WritePropertyName("autoStorageContainerName"u8);
                writer.WriteStringValue(AutoBlobContainerName);
            }
            if (Optional.IsDefined(BlobContainerUri))
            {
                writer.WritePropertyName("storageContainerUrl"u8);
                writer.WriteStringValue(BlobContainerUri.AbsoluteUri);
            }
            if (Optional.IsDefined(HttpUri))
            {
                writer.WritePropertyName("httpUrl"u8);
                writer.WriteStringValue(HttpUri.AbsoluteUri);
            }
            if (Optional.IsDefined(BlobPrefix))
            {
                writer.WritePropertyName("blobPrefix"u8);
                writer.WriteStringValue(BlobPrefix);
            }
            if (Optional.IsDefined(FilePath))
            {
                writer.WritePropertyName("filePath"u8);
                writer.WriteStringValue(FilePath);
            }
            if (Optional.IsDefined(FileMode))
            {
                writer.WritePropertyName("fileMode"u8);
                writer.WriteStringValue(FileMode);
            }
            if (Optional.IsDefined(Identity))
            {
                writer.WritePropertyName("identityReference"u8);
                if (Identity is null)
                {
                    writer.WriteNullValue();
                }
                else
                {
                    ((IModelJsonSerializable<ComputeNodeIdentityReference>)Identity).Serialize(writer, options);
                }
            }
            if (_serializedAdditionalRawData is not null && options.Format == ModelSerializerFormat.Json)
            {
                foreach (var property in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(property.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(property.Value);
#else
                    JsonSerializer.Serialize(writer, JsonDocument.Parse(property.Value.ToString()).RootElement);
#endif
                }
            }
            writer.WriteEndObject();
        }

        internal static BatchResourceFile DeserializeBatchResourceFile(JsonElement element, ModelSerializerOptions options = default)
        {
            options ??= ModelSerializerOptions.DefaultWireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> autoStorageContainerName = default;
            Optional<Uri> storageContainerUrl = default;
            Optional<Uri> httpUrl = default;
            Optional<string> blobPrefix = default;
            Optional<string> filePath = default;
            Optional<string> fileMode = default;
            Optional<ComputeNodeIdentityReference> identityReference = default;
            Dictionary<string, BinaryData> serializedAdditionalRawData = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("autoStorageContainerName"u8))
                {
                    autoStorageContainerName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("storageContainerUrl"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    storageContainerUrl = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("httpUrl"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    httpUrl = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("blobPrefix"u8))
                {
                    blobPrefix = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("filePath"u8))
                {
                    filePath = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("fileMode"u8))
                {
                    fileMode = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("identityReference"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    identityReference = ComputeNodeIdentityReference.DeserializeComputeNodeIdentityReference(property.Value);
                    continue;
                }
                if (options.Format == ModelSerializerFormat.Json)
                {
                    serializedAdditionalRawData.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                    continue;
                }
            }
            return new BatchResourceFile(autoStorageContainerName.Value, storageContainerUrl.Value, httpUrl.Value, blobPrefix.Value, filePath.Value, fileMode.Value, identityReference.Value, serializedAdditionalRawData);
        }

        BatchResourceFile IModelJsonSerializable<BatchResourceFile>.Deserialize(ref Utf8JsonReader reader, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<BatchResourceFile>(this, options.Format);

            using var doc = JsonDocument.ParseValue(ref reader);
            return DeserializeBatchResourceFile(doc.RootElement, options);
        }

        BinaryData IModelSerializable<BatchResourceFile>.Serialize(ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<BatchResourceFile>(this, options.Format);

            return ModelSerializer.SerializeCore(this, options);
        }

        BatchResourceFile IModelSerializable<BatchResourceFile>.Deserialize(BinaryData data, ModelSerializerOptions options)
        {
            Core.ModelSerializerHelper.ValidateFormat<BatchResourceFile>(this, options.Format);

            using var doc = JsonDocument.Parse(data);
            return DeserializeBatchResourceFile(doc.RootElement, options);
        }

        /// <summary> Converts a <see cref="BatchResourceFile"/> into a <see cref="RequestContent"/>. </summary>
        /// <param name="model"> The <see cref="BatchResourceFile"/> to convert. </param>
        public static implicit operator RequestContent(BatchResourceFile model)
        {
            if (model is null)
            {
                return null;
            }

            return RequestContent.Create(model, ModelSerializerOptions.DefaultWireOptions);
        }

        /// <summary> Converts a <see cref="Response"/> into a <see cref="BatchResourceFile"/>. </summary>
        /// <param name="response"> The <see cref="Response"/> to convert. </param>
        public static explicit operator BatchResourceFile(Response response)
        {
            if (response is null)
            {
                return null;
            }

            using JsonDocument doc = JsonDocument.Parse(response.ContentStream);
            return DeserializeBatchResourceFile(doc.RootElement, ModelSerializerOptions.DefaultWireOptions);
        }
    }
}
