// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.ResourceManager.Batch.Models
{
    /// <summary> Configures how customer data is encrypted inside the Batch account. By default, accounts are encrypted using a Microsoft managed key. For additional control, a customer-managed key can be used instead. </summary>
    public partial class BatchAccountEncryptionConfiguration
    {
        /// <summary> Initializes a new instance of <see cref="BatchAccountEncryptionConfiguration"/>. </summary>
        public BatchAccountEncryptionConfiguration()
        {
        }

        /// <summary> Initializes a new instance of <see cref="BatchAccountEncryptionConfiguration"/>. </summary>
        /// <param name="keySource"> Type of the key source. </param>
        /// <param name="keyVaultProperties"> Additional details when using Microsoft.KeyVault. </param>
        internal BatchAccountEncryptionConfiguration(BatchAccountKeySource? keySource, KeyVaultProperties keyVaultProperties)
        {
            KeySource = keySource;
            KeyVaultProperties = keyVaultProperties;
        }

        /// <summary> Type of the key source. </summary>
        public BatchAccountKeySource? KeySource { get; set; }
        /// <summary> Additional details when using Microsoft.KeyVault. </summary>
        internal KeyVaultProperties KeyVaultProperties { get; set; }
        /// <summary>
        /// Full path to the secret with or without version. Example https://mykeyvault.vault.azure.net/keys/testkey/6e34a81fef704045975661e297a4c053. or https://mykeyvault.vault.azure.net/keys/testkey. To be usable the following prerequisites must be met:
        ///
        ///  The Batch Account has a System Assigned identity
        ///  The account identity has been granted Key/Get, Key/Unwrap and Key/Wrap permissions
        ///  The KeyVault has soft-delete and purge protection enabled
        /// </summary>
        public Uri KeyIdentifier
        {
            get => KeyVaultProperties is null ? default : KeyVaultProperties.KeyIdentifier;
            set
            {
                if (KeyVaultProperties is null)
                    KeyVaultProperties = new KeyVaultProperties();
                KeyVaultProperties.KeyIdentifier = value;
            }
        }
    }
}
