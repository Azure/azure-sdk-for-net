// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure;
using Azure.Core;
using Azure.ResourceManager.Batch;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Batch.Models
{
    /// <summary> Model factory for generated models. </summary>
    public static partial class BatchModelFactory
    {
        /// <summary> Initializes a new instance of BatchAccountAutoStorageBaseConfiguration. </summary>
        /// <param name="storageAccountId"> The resource ID of the storage account to be used for auto-storage account. </param>
        /// <param name="authenticationMode"> The authentication mode which the Batch service will use to manage the auto-storage account. </param>
        /// <param name="nodeIdentityResourceId"> The identity referenced here must be assigned to pools which have compute nodes that need access to auto-storage. </param>
        /// <returns> A new <see cref="Models.BatchAccountAutoStorageBaseConfiguration"/> instance for mocking. </returns>
        public static BatchAccountAutoStorageBaseConfiguration BatchAccountAutoStorageBaseConfiguration(ResourceIdentifier storageAccountId = null, BatchAutoStorageAuthenticationMode? authenticationMode = null, ResourceIdentifier nodeIdentityResourceId = null)
        {
            return new BatchAccountAutoStorageBaseConfiguration(storageAccountId, authenticationMode, nodeIdentityResourceId != null ? new ComputeNodeIdentityReference(nodeIdentityResourceId) : null);
        }

        /// <summary> Initializes a new instance of BatchNetworkProfile. </summary>
        /// <param name="accountAccess"> Network access profile for batchAccount endpoint (Batch account data plane API). </param>
        /// <param name="nodeManagementAccess"> Network access profile for nodeManagement endpoint (Batch service managing compute nodes for Batch pools). </param>
        /// <returns> A new <see cref="Models.BatchNetworkProfile"/> instance for mocking. </returns>
        public static BatchNetworkProfile BatchNetworkProfile(BatchEndpointAccessProfile accountAccess = null, BatchEndpointAccessProfile nodeManagementAccess = null)
        {
            return new BatchNetworkProfile(accountAccess, nodeManagementAccess);
        }

        /// <summary> Initializes a new instance of BatchEndpointAccessProfile. </summary>
        /// <param name="defaultAction"> Default action for endpoint access. It is only applicable when publicNetworkAccess is enabled. </param>
        /// <param name="ipRules"> Array of IP ranges to filter client IP address. </param>
        /// <returns> A new <see cref="Models.BatchEndpointAccessProfile"/> instance for mocking. </returns>
        public static BatchEndpointAccessProfile BatchEndpointAccessProfile(BatchEndpointAccessDefaultAction defaultAction = default, IEnumerable<BatchIPRule> ipRules = null)
        {
            ipRules ??= new List<BatchIPRule>();

            return new BatchEndpointAccessProfile(defaultAction, ipRules?.ToList());
        }

        /// <summary> Initializes a new instance of BatchIPRule. </summary>
        /// <param name="action"> Action when client IP address is matched. </param>
        /// <param name="value"> IPv4 address, or IPv4 address range in CIDR format. </param>
        /// <returns> A new <see cref="Models.BatchIPRule"/> instance for mocking. </returns>
        public static BatchIPRule BatchIPRule(BatchIPRuleAction action = default, string value = null)
        {
            return new BatchIPRule(action, value);
        }

        /// <summary> Initializes a new instance of BatchAccountEncryptionConfiguration. </summary>
        /// <param name="keySource"> Type of the key source. </param>
        /// <param name="keyIdentifier"> Additional details when using Microsoft.KeyVault. </param>
        /// <returns> A new <see cref="Models.BatchAccountEncryptionConfiguration"/> instance for mocking. </returns>
        public static BatchAccountEncryptionConfiguration BatchAccountEncryptionConfiguration(BatchAccountKeySource? keySource = null, Uri keyIdentifier = null)
        {
            return new BatchAccountEncryptionConfiguration(keySource, keyIdentifier != null ? new KeyVaultProperties(keyIdentifier) : null);
        }

        /// <summary> Initializes a new instance of BatchAccountData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="identity"> The identity of the Batch account. Current supported identity types: None, SystemAssigned, UserAssigned. </param>
        /// <param name="accountEndpoint"> The account endpoint used to interact with the Batch service. </param>
        /// <param name="nodeManagementEndpoint"> The endpoint used by compute node to connect to the Batch node management service. </param>
        /// <param name="provisioningState"> The provisioned state of the resource. </param>
        /// <param name="poolAllocationMode"> The allocation mode for creating pools in the Batch account. </param>
        /// <param name="keyVaultReference"> Identifies the Azure key vault associated with a Batch account. </param>
        /// <param name="publicNetworkAccess"> If not specified, the default value is &apos;enabled&apos;. </param>
        /// <param name="networkProfile"> The network profile only takes effect when publicNetworkAccess is enabled. </param>
        /// <param name="privateEndpointConnections"> List of private endpoint connections associated with the Batch account. </param>
        /// <param name="autoStorage"> Contains information about the auto-storage account associated with a Batch account. </param>
        /// <param name="encryption"> Configures how customer data is encrypted inside the Batch account. By default, accounts are encrypted using a Microsoft managed key. For additional control, a customer-managed key can be used instead. </param>
        /// <param name="dedicatedCoreQuota"> For accounts with PoolAllocationMode set to UserSubscription, quota is managed on the subscription so this value is not returned. </param>
        /// <param name="lowPriorityCoreQuota"> For accounts with PoolAllocationMode set to UserSubscription, quota is managed on the subscription so this value is not returned. </param>
        /// <param name="dedicatedCoreQuotaPerVmFamily"> A list of the dedicated core quota per Virtual Machine family for the Batch account. For accounts with PoolAllocationMode set to UserSubscription, quota is managed on the subscription so this value is not returned. </param>
        /// <param name="isDedicatedCoreQuotaPerVmFamilyEnforced"> If this flag is true, dedicated core quota is enforced via both the dedicatedCoreQuotaPerVMFamily and dedicatedCoreQuota properties on the account. If this flag is false, dedicated core quota is enforced only via the dedicatedCoreQuota property on the account and does not consider Virtual Machine family. </param>
        /// <param name="poolQuota"> The pool quota for the Batch account. </param>
        /// <param name="activeJobAndJobScheduleQuota"> The active job and job schedule quota for the Batch account. </param>
        /// <param name="allowedAuthenticationModes"> List of allowed authentication modes for the Batch account that can be used to authenticate with the data plane. This does not affect authentication with the control plane. </param>
        /// <param name="location"> The location of the resource. </param>
        /// <param name="tags"> The tags of the resource. </param>
        /// <returns> A new <see cref="Batch.BatchAccountData"/> instance for mocking. </returns>
        public static BatchAccountData BatchAccountData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ManagedServiceIdentity identity = null, string accountEndpoint = null, string nodeManagementEndpoint = null, BatchProvisioningState? provisioningState = null, BatchAccountPoolAllocationMode? poolAllocationMode = null, BatchKeyVaultReference keyVaultReference = null, BatchPublicNetworkAccess? publicNetworkAccess = null, BatchNetworkProfile networkProfile = null, IEnumerable<BatchPrivateEndpointConnectionData> privateEndpointConnections = null, BatchAccountAutoStorageConfiguration autoStorage = null, BatchAccountEncryptionConfiguration encryption = null, int? dedicatedCoreQuota = null, int? lowPriorityCoreQuota = null, IEnumerable<BatchVmFamilyCoreQuota> dedicatedCoreQuotaPerVmFamily = null, bool? isDedicatedCoreQuotaPerVmFamilyEnforced = null, int? poolQuota = null, int? activeJobAndJobScheduleQuota = null, IEnumerable<BatchAuthenticationMode> allowedAuthenticationModes = null, AzureLocation? location = null, IDictionary<string, string> tags = null)
        {
            privateEndpointConnections ??= new List<BatchPrivateEndpointConnectionData>();
            dedicatedCoreQuotaPerVmFamily ??= new List<BatchVmFamilyCoreQuota>();
            allowedAuthenticationModes ??= new List<BatchAuthenticationMode>();
            tags ??= new Dictionary<string, string>();

            return new BatchAccountData(id, name, resourceType, systemData, identity, accountEndpoint, nodeManagementEndpoint, provisioningState, poolAllocationMode, keyVaultReference, publicNetworkAccess, networkProfile, privateEndpointConnections?.ToList(), autoStorage, encryption, dedicatedCoreQuota, lowPriorityCoreQuota, dedicatedCoreQuotaPerVmFamily?.ToList(), isDedicatedCoreQuotaPerVmFamilyEnforced, poolQuota, activeJobAndJobScheduleQuota, allowedAuthenticationModes?.ToList(), location, tags);
        }

        /// <summary> Initializes a new instance of BatchPrivateEndpointConnectionData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="provisioningState"> The provisioning state of the private endpoint connection. </param>
        /// <param name="privateEndpointId"> The private endpoint of the private endpoint connection. </param>
        /// <param name="groupIds"> The value has one and only one group id. </param>
        /// <param name="connectionState"> The private link service connection state of the private endpoint connection. </param>
        /// <param name="etag"> The ETag of the resource, used for concurrency statements. </param>
        /// <returns> A new <see cref="Batch.BatchPrivateEndpointConnectionData"/> instance for mocking. </returns>
        public static BatchPrivateEndpointConnectionData BatchPrivateEndpointConnectionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, BatchPrivateEndpointConnectionProvisioningState? provisioningState = null, ResourceIdentifier privateEndpointId = null, IEnumerable<string> groupIds = null, BatchPrivateLinkServiceConnectionState connectionState = null, ETag? etag = null)
        {
            groupIds ??= new List<string>();

            return new BatchPrivateEndpointConnectionData(id, name, resourceType, systemData, provisioningState, privateEndpointId != null ? ResourceManagerModelFactory.SubResource(privateEndpointId) : null, groupIds?.ToList(), connectionState, etag);
        }

        /// <summary> Initializes a new instance of BatchPrivateLinkServiceConnectionState. </summary>
        /// <param name="status"> The status of the Batch private endpoint connection. </param>
        /// <param name="description"> Description of the private Connection state. </param>
        /// <param name="actionRequired"> Action required on the private connection state. </param>
        /// <returns> A new <see cref="Models.BatchPrivateLinkServiceConnectionState"/> instance for mocking. </returns>
        public static BatchPrivateLinkServiceConnectionState BatchPrivateLinkServiceConnectionState(BatchPrivateLinkServiceConnectionStatus status = default, string description = null, string actionRequired = null)
        {
            return new BatchPrivateLinkServiceConnectionState(status, description, actionRequired);
        }

        /// <summary> Initializes a new instance of BatchAccountAutoStorageConfiguration. </summary>
        /// <param name="storageAccountId"> The resource ID of the storage account to be used for auto-storage account. </param>
        /// <param name="authenticationMode"> The authentication mode which the Batch service will use to manage the auto-storage account. </param>
        /// <param name="nodeIdentityResourceId"> The identity referenced here must be assigned to pools which have compute nodes that need access to auto-storage. </param>
        /// <param name="lastKeySyncedOn"> The UTC time at which storage keys were last synchronized with the Batch account. </param>
        /// <returns> A new <see cref="Models.BatchAccountAutoStorageConfiguration"/> instance for mocking. </returns>
        public static BatchAccountAutoStorageConfiguration BatchAccountAutoStorageConfiguration(ResourceIdentifier storageAccountId = null, BatchAutoStorageAuthenticationMode? authenticationMode = null, ResourceIdentifier nodeIdentityResourceId = null, DateTimeOffset lastKeySyncedOn = default)
        {
            return new BatchAccountAutoStorageConfiguration(storageAccountId, authenticationMode, nodeIdentityResourceId != null ? new ComputeNodeIdentityReference(nodeIdentityResourceId) : null, lastKeySyncedOn);
        }

        /// <summary> Initializes a new instance of BatchVmFamilyCoreQuota. </summary>
        /// <param name="name"> The Virtual Machine family name. </param>
        /// <param name="coreQuota"> The core quota for the VM family for the Batch account. </param>
        /// <returns> A new <see cref="Models.BatchVmFamilyCoreQuota"/> instance for mocking. </returns>
        public static BatchVmFamilyCoreQuota BatchVmFamilyCoreQuota(string name = null, int? coreQuota = null)
        {
            return new BatchVmFamilyCoreQuota(name, coreQuota);
        }

        /// <summary> Initializes a new instance of BatchAccountKeys. </summary>
        /// <param name="accountName"> The Batch account name. </param>
        /// <param name="primary"> The primary key associated with the account. </param>
        /// <param name="secondary"> The secondary key associated with the account. </param>
        /// <returns> A new <see cref="Models.BatchAccountKeys"/> instance for mocking. </returns>
        public static BatchAccountKeys BatchAccountKeys(string accountName = null, string primary = null, string secondary = null)
        {
            return new BatchAccountKeys(accountName, primary, secondary);
        }

        /// <summary> Initializes a new instance of BatchApplicationPackageData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="state"> The current state of the application package. </param>
        /// <param name="format"> The format of the application package, if the package is active. </param>
        /// <param name="storageUri"> The URL for the application package in Azure Storage. </param>
        /// <param name="storageUriExpireOn"> The UTC time at which the Azure Storage URL will expire. </param>
        /// <param name="lastActivatedOn"> The time at which the package was last activated, if the package is active. </param>
        /// <param name="etag"> The ETag of the resource, used for concurrency statements. </param>
        /// <returns> A new <see cref="Batch.BatchApplicationPackageData"/> instance for mocking. </returns>
        public static BatchApplicationPackageData BatchApplicationPackageData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, BatchApplicationPackageState? state = null, string format = null, Uri storageUri = null, DateTimeOffset? storageUriExpireOn = null, DateTimeOffset? lastActivatedOn = null, ETag? etag = null)
        {
            return new BatchApplicationPackageData(id, name, resourceType, systemData, state, format, storageUri, storageUriExpireOn, lastActivatedOn, etag);
        }

        /// <summary> Initializes a new instance of BatchApplicationData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="displayName"> The display name for the application. </param>
        /// <param name="allowUpdates"> A value indicating whether packages within the application may be overwritten using the same version string. </param>
        /// <param name="defaultVersion"> The package to use if a client requests the application but does not specify a version. This property can only be set to the name of an existing package. </param>
        /// <param name="etag"> The ETag of the resource, used for concurrency statements. </param>
        /// <returns> A new <see cref="Batch.BatchApplicationData"/> instance for mocking. </returns>
        public static BatchApplicationData BatchApplicationData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string displayName = null, bool? allowUpdates = null, string defaultVersion = null, ETag? etag = null)
        {
            return new BatchApplicationData(id, name, resourceType, systemData, displayName, allowUpdates, defaultVersion, etag);
        }

        /// <summary> Initializes a new instance of BatchLocationQuota. </summary>
        /// <param name="accountQuota"> The number of Batch accounts that may be created under the subscription in the specified region. </param>
        /// <returns> A new <see cref="Models.BatchLocationQuota"/> instance for mocking. </returns>
        public static BatchLocationQuota BatchLocationQuota(int? accountQuota = null)
        {
            return new BatchLocationQuota(accountQuota);
        }

        /// <summary> Initializes a new instance of BatchSupportedSku. </summary>
        /// <param name="name"> The name of the SKU. </param>
        /// <param name="familyName"> The family name of the SKU. </param>
        /// <param name="capabilities"> A collection of capabilities which this SKU supports. </param>
        /// <returns> A new <see cref="Models.BatchSupportedSku"/> instance for mocking. </returns>
        public static BatchSupportedSku BatchSupportedSku(string name = null, string familyName = null, IEnumerable<BatchSkuCapability> capabilities = null)
        {
            capabilities ??= new List<BatchSkuCapability>();

            return new BatchSupportedSku(name, familyName, capabilities?.ToList());
        }

        /// <summary> Initializes a new instance of BatchSkuCapability. </summary>
        /// <param name="name"> The name of the feature. </param>
        /// <param name="value"> The value of the feature. </param>
        /// <returns> A new <see cref="Models.BatchSkuCapability"/> instance for mocking. </returns>
        public static BatchSkuCapability BatchSkuCapability(string name = null, string value = null)
        {
            return new BatchSkuCapability(name, value);
        }

        /// <summary> Initializes a new instance of BatchNameAvailabilityResult. </summary>
        /// <param name="isNameAvailable"> Gets a boolean value that indicates whether the name is available for you to use. If true, the name is available. If false, the name has already been taken or invalid and cannot be used. </param>
        /// <param name="reason"> Gets the reason that a Batch account name could not be used. The Reason element is only returned if NameAvailable is false. </param>
        /// <param name="message"> Gets an error message explaining the Reason value in more detail. </param>
        /// <returns> A new <see cref="Models.BatchNameAvailabilityResult"/> instance for mocking. </returns>
        public static BatchNameAvailabilityResult BatchNameAvailabilityResult(bool? isNameAvailable = null, BatchNameUnavailableReason? reason = null, string message = null)
        {
            return new BatchNameAvailabilityResult(isNameAvailable, reason, message);
        }

        /// <summary> Initializes a new instance of BatchAccountCertificateData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="thumbprintAlgorithm"> This must match the first portion of the certificate name. Currently required to be &apos;SHA1&apos;. </param>
        /// <param name="thumbprint"> This must match the thumbprint from the name. </param>
        /// <param name="format"> The format of the certificate - either Pfx or Cer. If omitted, the default is Pfx. </param>
        /// <param name="provisioningState"></param>
        /// <param name="provisioningStateTransitOn"> The time at which the certificate entered its current state. </param>
        /// <param name="previousProvisioningState"> The previous provisioned state of the resource. </param>
        /// <param name="previousProvisioningStateTransitOn"> The time at which the certificate entered its previous state. </param>
        /// <param name="publicData"> The public key of the certificate. </param>
        /// <param name="deleteCertificateError"> This is only returned when the certificate provisioningState is &apos;Failed&apos;. </param>
        /// <param name="etag"> The ETag of the resource, used for concurrency statements. </param>
        /// <returns> A new <see cref="Batch.BatchAccountCertificateData"/> instance for mocking. </returns>
        public static BatchAccountCertificateData BatchAccountCertificateData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string thumbprintAlgorithm = null, BinaryData thumbprint = null, BatchAccountCertificateFormat? format = null, BatchAccountCertificateProvisioningState? provisioningState = null, DateTimeOffset? provisioningStateTransitOn = null, BatchAccountCertificateProvisioningState? previousProvisioningState = null, DateTimeOffset? previousProvisioningStateTransitOn = null, string publicData = null, ResponseError deleteCertificateError = null, ETag? etag = null)
        {
            return new BatchAccountCertificateData(id, name, resourceType, systemData, thumbprintAlgorithm, thumbprint, format, provisioningState, provisioningStateTransitOn, previousProvisioningState, previousProvisioningStateTransitOn, publicData, deleteCertificateError, etag);
        }

        /// <summary> Initializes a new instance of BatchAccountCertificateCreateOrUpdateContent. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="thumbprintAlgorithm"> This must match the first portion of the certificate name. Currently required to be &apos;SHA1&apos;. </param>
        /// <param name="thumbprint"> This must match the thumbprint from the name. </param>
        /// <param name="format"> The format of the certificate - either Pfx or Cer. If omitted, the default is Pfx. </param>
        /// <param name="data"> The maximum size is 10KB. </param>
        /// <param name="password"> This must not be specified if the certificate format is Cer. </param>
        /// <param name="etag"> The ETag of the resource, used for concurrency statements. </param>
        /// <returns> A new <see cref="Models.BatchAccountCertificateCreateOrUpdateContent"/> instance for mocking. </returns>
        public static BatchAccountCertificateCreateOrUpdateContent BatchAccountCertificateCreateOrUpdateContent(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string thumbprintAlgorithm = null, BinaryData thumbprint = null, BatchAccountCertificateFormat? format = null, BinaryData data = null, string password = null, ETag? etag = null)
        {
            return new BatchAccountCertificateCreateOrUpdateContent(id, name, resourceType, systemData, thumbprintAlgorithm, thumbprint, format, data, password, etag);
        }

        /// <summary> Initializes a new instance of BatchAccountDetectorData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="value"> A base64 encoded string that represents the content of a detector. </param>
        /// <param name="etag"> The ETag of the resource, used for concurrency statements. </param>
        /// <returns> A new <see cref="Batch.BatchAccountDetectorData"/> instance for mocking. </returns>
        public static BatchAccountDetectorData BatchAccountDetectorData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string value = null, ETag? etag = null)
        {
            return new BatchAccountDetectorData(id, name, resourceType, systemData, value, etag);
        }

        /// <summary> Initializes a new instance of BatchPrivateLinkResourceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="groupId"> The group id is used to establish the private link connection. </param>
        /// <param name="requiredMembers"> The list of required members that are used to establish the private link connection. </param>
        /// <param name="requiredZoneNames"> The list of required zone names for the private DNS resource name. </param>
        /// <param name="etag"> The ETag of the resource, used for concurrency statements. </param>
        /// <returns> A new <see cref="Batch.BatchPrivateLinkResourceData"/> instance for mocking. </returns>
        public static BatchPrivateLinkResourceData BatchPrivateLinkResourceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string groupId = null, IEnumerable<string> requiredMembers = null, IEnumerable<string> requiredZoneNames = null, ETag? etag = null)
        {
            requiredMembers ??= new List<string>();
            requiredZoneNames ??= new List<string>();

            return new BatchPrivateLinkResourceData(id, name, resourceType, systemData, groupId, requiredMembers?.ToList(), requiredZoneNames?.ToList(), etag);
        }

        /// <summary> Initializes a new instance of BatchAccountPoolData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="identity"> The type of identity used for the Batch Pool. Current supported identity types: UserAssigned, None. </param>
        /// <param name="displayName"> The display name need not be unique and can contain any Unicode characters up to a maximum length of 1024. </param>
        /// <param name="lastModifiedOn"> This is the last time at which the pool level data, such as the targetDedicatedNodes or autoScaleSettings, changed. It does not factor in node-level changes such as a compute node changing state. </param>
        /// <param name="createdOn"> The creation time of the pool. </param>
        /// <param name="provisioningState"> The current state of the pool. </param>
        /// <param name="provisioningStateTransitOn"> The time at which the pool entered its current state. </param>
        /// <param name="allocationState"> Whether the pool is resizing. </param>
        /// <param name="allocationStateTransitionOn"> The time at which the pool entered its current allocation state. </param>
        /// <param name="vmSize"> For information about available sizes of virtual machines for Cloud Services pools (pools created with cloudServiceConfiguration), see Sizes for Cloud Services (https://azure.microsoft.com/documentation/articles/cloud-services-sizes-specs/). Batch supports all Cloud Services VM sizes except ExtraSmall. For information about available VM sizes for pools using images from the Virtual Machines Marketplace (pools created with virtualMachineConfiguration) see Sizes for Virtual Machines (Linux) (https://azure.microsoft.com/documentation/articles/virtual-machines-linux-sizes/) or Sizes for Virtual Machines (Windows) (https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes/). Batch supports all Azure VM sizes except STANDARD_A0 and those with premium storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series). </param>
        /// <param name="deploymentConfiguration"> Using CloudServiceConfiguration specifies that the nodes should be creating using Azure Cloud Services (PaaS), while VirtualMachineConfiguration uses Azure Virtual Machines (IaaS). </param>
        /// <param name="currentDedicatedNodes"> The number of dedicated compute nodes currently in the pool. </param>
        /// <param name="currentLowPriorityNodes"> The number of Spot/low-priority compute nodes currently in the pool. </param>
        /// <param name="scaleSettings"> Defines the desired size of the pool. This can either be &apos;fixedScale&apos; where the requested targetDedicatedNodes is specified, or &apos;autoScale&apos; which defines a formula which is periodically reevaluated. If this property is not specified, the pool will have a fixed scale with 0 targetDedicatedNodes. </param>
        /// <param name="autoScaleRun"> This property is set only if the pool automatically scales, i.e. autoScaleSettings are used. </param>
        /// <param name="interNodeCommunication"> This imposes restrictions on which nodes can be assigned to the pool. Enabling this value can reduce the chance of the requested number of nodes to be allocated in the pool. If not specified, this value defaults to &apos;Disabled&apos;. </param>
        /// <param name="networkConfiguration"> The network configuration for a pool. </param>
        /// <param name="taskSlotsPerNode"> The default value is 1. The maximum value is the smaller of 4 times the number of cores of the vmSize of the pool or 256. </param>
        /// <param name="taskSchedulingNodeFillType"> If not specified, the default is spread. </param>
        /// <param name="userAccounts"> The list of user accounts to be created on each node in the pool. </param>
        /// <param name="metadata"> The Batch service does not assign any meaning to metadata; it is solely for the use of user code. </param>
        /// <param name="startTask"> In an PATCH (update) operation, this property can be set to an empty object to remove the start task from the pool. </param>
        /// <param name="certificates">
        /// For Windows compute nodes, the Batch service installs the certificates to the specified certificate store and location. For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of &apos;remoteUser&apos;, a &apos;certs&apos; directory is created in the user&apos;s home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory.
        /// 
        /// Warning: This property is deprecated and will be removed after February, 2024. Please use the [Azure KeyVault Extension](https://learn.microsoft.com/azure/batch/batch-certificate-migration-guide) instead.
        /// </param>
        /// <param name="applicationPackages"> Changes to application package references affect all new compute nodes joining the pool, but do not affect compute nodes that are already in the pool until they are rebooted or reimaged. There is a maximum of 10 application package references on any given pool. </param>
        /// <param name="applicationLicenses"> The list of application licenses must be a subset of available Batch service application licenses. If a license is requested which is not supported, pool creation will fail. </param>
        /// <param name="resizeOperationStatus"> Describes either the current operation (if the pool AllocationState is Resizing) or the previously completed operation (if the AllocationState is Steady). </param>
        /// <param name="mountConfiguration"> This supports Azure Files, NFS, CIFS/SMB, and Blobfuse. </param>
        /// <param name="targetNodeCommunicationMode"> If omitted, the default value is Default. </param>
        /// <param name="currentNodeCommunicationMode"> Determines how a pool communicates with the Batch service. </param>
        /// <param name="etag"> The ETag of the resource, used for concurrency statements. </param>
        /// <returns> A new <see cref="Batch.BatchAccountPoolData"/> instance for mocking. </returns>
        public static BatchAccountPoolData BatchAccountPoolData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ManagedServiceIdentity identity = null, string displayName = null, DateTimeOffset? lastModifiedOn = null, DateTimeOffset? createdOn = null, BatchAccountPoolProvisioningState? provisioningState = null, DateTimeOffset? provisioningStateTransitOn = null, BatchAccountPoolAllocationState? allocationState = null, DateTimeOffset? allocationStateTransitionOn = null, string vmSize = null, BatchDeploymentConfiguration deploymentConfiguration = null, int? currentDedicatedNodes = null, int? currentLowPriorityNodes = null, BatchAccountPoolScaleSettings scaleSettings = null, BatchAccountPoolAutoScaleRun autoScaleRun = null, InterNodeCommunicationState? interNodeCommunication = null, BatchNetworkConfiguration networkConfiguration = null, int? taskSlotsPerNode = null, BatchNodeFillType? taskSchedulingNodeFillType = null, IEnumerable<BatchUserAccount> userAccounts = null, IEnumerable<BatchAccountPoolMetadataItem> metadata = null, BatchAccountPoolStartTask startTask = null, IEnumerable<BatchCertificateReference> certificates = null, IEnumerable<BatchApplicationPackageReference> applicationPackages = null, IEnumerable<string> applicationLicenses = null, BatchResizeOperationStatus resizeOperationStatus = null, IEnumerable<BatchMountConfiguration> mountConfiguration = null, NodeCommunicationMode? targetNodeCommunicationMode = null, NodeCommunicationMode? currentNodeCommunicationMode = null, ETag? etag = null)
        {
            userAccounts ??= new List<BatchUserAccount>();
            metadata ??= new List<BatchAccountPoolMetadataItem>();
            certificates ??= new List<BatchCertificateReference>();
            applicationPackages ??= new List<BatchApplicationPackageReference>();
            applicationLicenses ??= new List<string>();
            mountConfiguration ??= new List<BatchMountConfiguration>();

            return new BatchAccountPoolData(id, name, resourceType, systemData, identity, displayName, lastModifiedOn, createdOn, provisioningState, provisioningStateTransitOn, allocationState, allocationStateTransitionOn, vmSize, deploymentConfiguration, currentDedicatedNodes, currentLowPriorityNodes, scaleSettings, autoScaleRun, interNodeCommunication, networkConfiguration, taskSlotsPerNode, taskSchedulingNodeFillType.HasValue ? new TaskSchedulingPolicy(taskSchedulingNodeFillType.Value) : null, userAccounts?.ToList(), metadata?.ToList(), startTask, certificates?.ToList(), applicationPackages?.ToList(), applicationLicenses?.ToList(), resizeOperationStatus, mountConfiguration?.ToList(), targetNodeCommunicationMode, currentNodeCommunicationMode, etag);
        }

        /// <summary> Initializes a new instance of BatchDeploymentConfiguration. </summary>
        /// <param name="cloudServiceConfiguration"> This property and virtualMachineConfiguration are mutually exclusive and one of the properties must be specified. This property cannot be specified if the Batch account was created with its poolAllocationMode property set to &apos;UserSubscription&apos;. </param>
        /// <param name="vmConfiguration"> This property and cloudServiceConfiguration are mutually exclusive and one of the properties must be specified. </param>
        /// <returns> A new <see cref="Models.BatchDeploymentConfiguration"/> instance for mocking. </returns>
        public static BatchDeploymentConfiguration BatchDeploymentConfiguration(BatchCloudServiceConfiguration cloudServiceConfiguration = null, BatchVmConfiguration vmConfiguration = null)
        {
            return new BatchDeploymentConfiguration(cloudServiceConfiguration, vmConfiguration);
        }

        /// <summary> Initializes a new instance of BatchCloudServiceConfiguration. </summary>
        /// <param name="osFamily"> Possible values are: 2 - OS Family 2, equivalent to Windows Server 2008 R2 SP1. 3 - OS Family 3, equivalent to Windows Server 2012. 4 - OS Family 4, equivalent to Windows Server 2012 R2. 5 - OS Family 5, equivalent to Windows Server 2016. 6 - OS Family 6, equivalent to Windows Server 2019. For more information, see Azure Guest OS Releases (https://azure.microsoft.com/documentation/articles/cloud-services-guestos-update-matrix/#releases). </param>
        /// <param name="osVersion"> The default value is * which specifies the latest operating system version for the specified OS family. </param>
        /// <returns> A new <see cref="Models.BatchCloudServiceConfiguration"/> instance for mocking. </returns>
        public static BatchCloudServiceConfiguration BatchCloudServiceConfiguration(string osFamily = null, string osVersion = null)
        {
            return new BatchCloudServiceConfiguration(osFamily, osVersion);
        }

        /// <summary> Initializes a new instance of BatchVmConfiguration. </summary>
        /// <param name="imageReference"> A reference to an Azure Virtual Machines Marketplace image or the Azure Image resource of a custom Virtual Machine. To get the list of all imageReferences verified by Azure Batch, see the &apos;List supported node agent SKUs&apos; operation. </param>
        /// <param name="nodeAgentSkuId"> The Batch node agent is a program that runs on each node in the pool, and provides the command-and-control interface between the node and the Batch service. There are different implementations of the node agent, known as SKUs, for different operating systems. You must specify a node agent SKU which matches the selected image reference. To get the list of supported node agent SKUs along with their list of verified image references, see the &apos;List supported node agent SKUs&apos; operation. </param>
        /// <param name="isAutomaticUpdateEnabled"> This property must not be specified if the imageReference specifies a Linux OS image. </param>
        /// <param name="dataDisks"> This property must be specified if the compute nodes in the pool need to have empty data disks attached to them. </param>
        /// <param name="licenseType">
        /// This only applies to images that contain the Windows operating system, and should only be used when you hold valid on-premises licenses for the nodes which will be deployed. If omitted, no on-premises licensing discount is applied. Values are:
        /// 
        ///  Windows_Server - The on-premises license is for Windows Server.
        ///  Windows_Client - The on-premises license is for Windows Client.
        /// 
        /// </param>
        /// <param name="containerConfiguration"> If specified, setup is performed on each node in the pool to allow tasks to run in containers. All regular tasks and job manager tasks run on this pool must specify the containerSettings property, and all other tasks may specify it. </param>
        /// <param name="diskEncryptionTargets"> If specified, encryption is performed on each node in the pool during node provisioning. </param>
        /// <param name="nodePlacementPolicy"> This configuration will specify rules on how nodes in the pool will be physically allocated. </param>
        /// <param name="extensions"> If specified, the extensions mentioned in this configuration will be installed on each node. </param>
        /// <param name="ephemeralOSDiskPlacement"> Contains configuration for ephemeral OSDisk settings. </param>
        /// <returns> A new <see cref="Models.BatchVmConfiguration"/> instance for mocking. </returns>
        public static BatchVmConfiguration BatchVmConfiguration(BatchImageReference imageReference = null, string nodeAgentSkuId = null, bool? isAutomaticUpdateEnabled = null, IEnumerable<BatchVmDataDisk> dataDisks = null, string licenseType = null, BatchVmContainerConfiguration containerConfiguration = null, IEnumerable<BatchDiskEncryptionTarget> diskEncryptionTargets = null, BatchNodePlacementPolicyType? nodePlacementPolicy = null, IEnumerable<BatchVmExtension> extensions = null, BatchDiffDiskPlacement? ephemeralOSDiskPlacement = null)
        {
            dataDisks ??= new List<BatchVmDataDisk>();
            diskEncryptionTargets ??= new List<BatchDiskEncryptionTarget>();
            extensions ??= new List<BatchVmExtension>();

            return new BatchVmConfiguration(imageReference, nodeAgentSkuId, isAutomaticUpdateEnabled != null ? new WindowsConfiguration(isAutomaticUpdateEnabled) : null, dataDisks?.ToList(), licenseType, containerConfiguration, diskEncryptionTargets != null ? new DiskEncryptionConfiguration(diskEncryptionTargets?.ToList()) : null, nodePlacementPolicy != null ? new NodePlacementConfiguration(nodePlacementPolicy) : null, extensions?.ToList(), ephemeralOSDiskPlacement != null ? new OSDisk(new DiffDiskSettings(ephemeralOSDiskPlacement)) : null);
        }

        /// <summary> Initializes a new instance of BatchImageReference. </summary>
        /// <param name="publisher"> For example, Canonical or MicrosoftWindowsServer. </param>
        /// <param name="offer"> For example, UbuntuServer or WindowsServer. </param>
        /// <param name="sku"> For example, 18.04-LTS or 2022-datacenter. </param>
        /// <param name="version"> A value of &apos;latest&apos; can be specified to select the latest version of an image. If omitted, the default is &apos;latest&apos;. </param>
        /// <param name="id"> This property is mutually exclusive with other properties. The Shared Image Gallery image must have replicas in the same region as the Azure Batch account. For information about the firewall settings for the Batch node agent to communicate with the Batch service see https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration. </param>
        /// <returns> A new <see cref="Models.BatchImageReference"/> instance for mocking. </returns>
        public static BatchImageReference BatchImageReference(string publisher = null, string offer = null, string sku = null, string version = null, ResourceIdentifier id = null)
        {
            return new BatchImageReference(publisher, offer, sku, version, id);
        }

        /// <summary> Initializes a new instance of BatchVmDataDisk. </summary>
        /// <param name="lun"> The lun is used to uniquely identify each data disk. If attaching multiple disks, each should have a distinct lun. The value must be between 0 and 63, inclusive. </param>
        /// <param name="caching">
        /// Values are:
        /// 
        ///  none - The caching mode for the disk is not enabled.
        ///  readOnly - The caching mode for the disk is read only.
        ///  readWrite - The caching mode for the disk is read and write.
        /// 
        ///  The default value for caching is none. For information about the caching options see: https://blogs.msdn.microsoft.com/windowsazurestorage/2012/06/27/exploring-windows-azure-drives-disks-and-images/.
        /// </param>
        /// <param name="diskSizeInGB"> The initial disk size in GB when creating new data disk. </param>
        /// <param name="storageAccountType">
        /// If omitted, the default is &quot;Standard_LRS&quot;. Values are:
        /// 
        ///  Standard_LRS - The data disk should use standard locally redundant storage.
        ///  Premium_LRS - The data disk should use premium locally redundant storage.
        /// </param>
        /// <returns> A new <see cref="Models.BatchVmDataDisk"/> instance for mocking. </returns>
        public static BatchVmDataDisk BatchVmDataDisk(int lun = default, BatchDiskCachingType? caching = null, int diskSizeInGB = default, BatchStorageAccountType? storageAccountType = null)
        {
            return new BatchVmDataDisk(lun, caching, diskSizeInGB, storageAccountType);
        }

        /// <summary> Initializes a new instance of BatchVmContainerConfiguration. </summary>
        /// <param name="containerType"> The container technology to be used. </param>
        /// <param name="containerImageNames"> This is the full image reference, as would be specified to &quot;docker pull&quot;. An image will be sourced from the default Docker registry unless the image is fully qualified with an alternative registry. </param>
        /// <param name="containerRegistries"> If any images must be downloaded from a private registry which requires credentials, then those credentials must be provided here. </param>
        /// <returns> A new <see cref="Models.BatchVmContainerConfiguration"/> instance for mocking. </returns>
        public static BatchVmContainerConfiguration BatchVmContainerConfiguration(BatchVmContainerType containerType = default, IEnumerable<string> containerImageNames = null, IEnumerable<BatchVmContainerRegistry> containerRegistries = null)
        {
            containerImageNames ??= new List<string>();
            containerRegistries ??= new List<BatchVmContainerRegistry>();

            return new BatchVmContainerConfiguration(containerType, containerImageNames?.ToList(), containerRegistries?.ToList());
        }

        /// <summary> Initializes a new instance of BatchVmContainerRegistry. </summary>
        /// <param name="userName"> The user name to log into the registry server. </param>
        /// <param name="password"> The password to log into the registry server. </param>
        /// <param name="registryServer"> If omitted, the default is &quot;docker.io&quot;. </param>
        /// <param name="identityResourceId"> The reference to a user assigned identity associated with the Batch pool which a compute node will use. </param>
        /// <returns> A new <see cref="Models.BatchVmContainerRegistry"/> instance for mocking. </returns>
        public static BatchVmContainerRegistry BatchVmContainerRegistry(string userName = null, string password = null, string registryServer = null, ResourceIdentifier identityResourceId = null)
        {
            return new BatchVmContainerRegistry(userName, password, registryServer, identityResourceId != null ? new ComputeNodeIdentityReference(identityResourceId) : null);
        }

        /// <summary> Initializes a new instance of BatchVmExtension. </summary>
        /// <param name="name"> The name of the virtual machine extension. </param>
        /// <param name="publisher"> The name of the extension handler publisher. </param>
        /// <param name="extensionType"> The type of the extensions. </param>
        /// <param name="typeHandlerVersion"> The version of script handler. </param>
        /// <param name="autoUpgradeMinorVersion"> Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true. </param>
        /// <param name="settings"> JSON formatted public settings for the extension. </param>
        /// <param name="protectedSettings"> The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all. </param>
        /// <param name="provisionAfterExtensions"> Collection of extension names after which this extension needs to be provisioned. </param>
        /// <returns> A new <see cref="Models.BatchVmExtension"/> instance for mocking. </returns>
        public static BatchVmExtension BatchVmExtension(string name = null, string publisher = null, string extensionType = null, string typeHandlerVersion = null, bool? autoUpgradeMinorVersion = null, BinaryData settings = null, BinaryData protectedSettings = null, IEnumerable<string> provisionAfterExtensions = null)
        {
            provisionAfterExtensions ??= new List<string>();

            return new BatchVmExtension(name, publisher, extensionType, typeHandlerVersion, autoUpgradeMinorVersion, settings, protectedSettings, provisionAfterExtensions?.ToList());
        }

        /// <summary> Initializes a new instance of BatchAccountPoolScaleSettings. </summary>
        /// <param name="fixedScale"> This property and autoScale are mutually exclusive and one of the properties must be specified. </param>
        /// <param name="autoScale"> This property and fixedScale are mutually exclusive and one of the properties must be specified. </param>
        /// <returns> A new <see cref="Models.BatchAccountPoolScaleSettings"/> instance for mocking. </returns>
        public static BatchAccountPoolScaleSettings BatchAccountPoolScaleSettings(BatchAccountFixedScaleSettings fixedScale = null, BatchAccountAutoScaleSettings autoScale = null)
        {
            return new BatchAccountPoolScaleSettings(fixedScale, autoScale);
        }

        /// <summary> Initializes a new instance of BatchAccountFixedScaleSettings. </summary>
        /// <param name="resizeTimeout"> The default value is 15 minutes. Timeout values use ISO 8601 format. For example, use PT10M for 10 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service rejects the request with an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request). </param>
        /// <param name="targetDedicatedNodes"> At least one of targetDedicatedNodes, targetLowPriorityNodes must be set. </param>
        /// <param name="targetLowPriorityNodes"> At least one of targetDedicatedNodes, targetLowPriorityNodes must be set. </param>
        /// <param name="nodeDeallocationOption"> If omitted, the default value is Requeue. </param>
        /// <returns> A new <see cref="Models.BatchAccountFixedScaleSettings"/> instance for mocking. </returns>
        public static BatchAccountFixedScaleSettings BatchAccountFixedScaleSettings(TimeSpan? resizeTimeout = null, int? targetDedicatedNodes = null, int? targetLowPriorityNodes = null, BatchNodeDeallocationOption? nodeDeallocationOption = null)
        {
            return new BatchAccountFixedScaleSettings(resizeTimeout, targetDedicatedNodes, targetLowPriorityNodes, nodeDeallocationOption);
        }

        /// <summary> Initializes a new instance of BatchAccountAutoScaleSettings. </summary>
        /// <param name="formula"> A formula for the desired number of compute nodes in the pool. </param>
        /// <param name="evaluationInterval"> If omitted, the default value is 15 minutes (PT15M). </param>
        /// <returns> A new <see cref="Models.BatchAccountAutoScaleSettings"/> instance for mocking. </returns>
        public static BatchAccountAutoScaleSettings BatchAccountAutoScaleSettings(string formula = null, TimeSpan? evaluationInterval = null)
        {
            return new BatchAccountAutoScaleSettings(formula, evaluationInterval);
        }

        /// <summary> Initializes a new instance of BatchAccountPoolAutoScaleRun. </summary>
        /// <param name="evaluationOn"> The time at which the autoscale formula was last evaluated. </param>
        /// <param name="results"> Each variable value is returned in the form $variable=value, and variables are separated by semicolons. </param>
        /// <param name="error"> An error that occurred when autoscaling a pool. </param>
        /// <returns> A new <see cref="Models.BatchAccountPoolAutoScaleRun"/> instance for mocking. </returns>
        public static BatchAccountPoolAutoScaleRun BatchAccountPoolAutoScaleRun(DateTimeOffset evaluationOn = default, string results = null, ResponseError error = null)
        {
            return new BatchAccountPoolAutoScaleRun(evaluationOn, results, error);
        }

        /// <summary> Initializes a new instance of BatchNetworkConfiguration. </summary>
        /// <param name="subnetId"> The virtual network must be in the same region and subscription as the Azure Batch account. The specified subnet should have enough free IP addresses to accommodate the number of nodes in the pool. If the subnet doesn&apos;t have enough free IP addresses, the pool will partially allocate compute nodes and a resize error will occur. The &apos;MicrosoftAzureBatch&apos; service principal must have the &apos;Classic Virtual Machine Contributor&apos; Role-Based Access Control (RBAC) role for the specified VNet. The specified subnet must allow communication from the Azure Batch service to be able to schedule tasks on the compute nodes. This can be verified by checking if the specified VNet has any associated Network Security Groups (NSG). If communication to the compute nodes in the specified subnet is denied by an NSG, then the Batch service will set the state of the compute nodes to unusable. If the specified VNet has any associated Network Security Groups (NSG), then a few reserved system ports must be enabled for inbound communication. For pools created with a virtual machine configuration, enable ports 29876 and 29877, as well as port 22 for Linux and port 3389 for Windows. For pools created with a cloud service configuration, enable ports 10100, 20100, and 30100. Also enable outbound connections to Azure Storage on port 443. For cloudServiceConfiguration pools, only &apos;classic&apos; VNETs are supported. For more details see: https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration. </param>
        /// <param name="dynamicVNetAssignmentScope"> The scope of dynamic vnet assignment. </param>
        /// <param name="endpointInboundNatPools"> Pool endpoint configuration is only supported on pools with the virtualMachineConfiguration property. </param>
        /// <param name="publicIPAddressConfiguration"> This property is only supported on Pools with the virtualMachineConfiguration property. </param>
        /// <returns> A new <see cref="Models.BatchNetworkConfiguration"/> instance for mocking. </returns>
        public static BatchNetworkConfiguration BatchNetworkConfiguration(ResourceIdentifier subnetId = null, DynamicVNetAssignmentScope? dynamicVNetAssignmentScope = null, IEnumerable<BatchInboundNatPool> endpointInboundNatPools = null, BatchPublicIPAddressConfiguration publicIPAddressConfiguration = null)
        {
            endpointInboundNatPools ??= new List<BatchInboundNatPool>();

            return new BatchNetworkConfiguration(subnetId, dynamicVNetAssignmentScope, endpointInboundNatPools != null ? new PoolEndpointConfiguration(endpointInboundNatPools?.ToList()) : null, publicIPAddressConfiguration);
        }

        /// <summary> Initializes a new instance of BatchInboundNatPool. </summary>
        /// <param name="name"> The name must be unique within a Batch pool, can contain letters, numbers, underscores, periods, and hyphens. Names must start with a letter or number, must end with a letter, number, or underscore, and cannot exceed 77 characters.  If any invalid values are provided the request fails with HTTP status code 400. </param>
        /// <param name="protocol"> The protocol of the endpoint. </param>
        /// <param name="backendPort"> This must be unique within a Batch pool. Acceptable values are between 1 and 65535 except for 22, 3389, 29876 and 29877 as these are reserved. If any reserved values are provided the request fails with HTTP status code 400. </param>
        /// <param name="frontendPortRangeStart"> Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved. All ranges within a pool must be distinct and cannot overlap. If any reserved or overlapping values are provided the request fails with HTTP status code 400. </param>
        /// <param name="frontendPortRangeEnd"> Acceptable values range between 1 and 65534 except ports from 50000 to 55000 which are reserved by the Batch service. All ranges within a pool must be distinct and cannot overlap. If any reserved or overlapping values are provided the request fails with HTTP status code 400. </param>
        /// <param name="networkSecurityGroupRules"> The maximum number of rules that can be specified across all the endpoints on a Batch pool is 25. If no network security group rules are specified, a default rule will be created to allow inbound access to the specified backendPort. If the maximum number of network security group rules is exceeded the request fails with HTTP status code 400. </param>
        /// <returns> A new <see cref="Models.BatchInboundNatPool"/> instance for mocking. </returns>
        public static BatchInboundNatPool BatchInboundNatPool(string name = null, BatchInboundEndpointProtocol protocol = default, int backendPort = default, int frontendPortRangeStart = default, int frontendPortRangeEnd = default, IEnumerable<BatchNetworkSecurityGroupRule> networkSecurityGroupRules = null)
        {
            networkSecurityGroupRules ??= new List<BatchNetworkSecurityGroupRule>();

            return new BatchInboundNatPool(name, protocol, backendPort, frontendPortRangeStart, frontendPortRangeEnd, networkSecurityGroupRules?.ToList());
        }

        /// <summary> Initializes a new instance of BatchNetworkSecurityGroupRule. </summary>
        /// <param name="priority"> Priorities within a pool must be unique and are evaluated in order of priority. The lower the number the higher the priority. For example, rules could be specified with order numbers of 150, 250, and 350. The rule with the order number of 150 takes precedence over the rule that has an order of 250. Allowed priorities are 150 to 4096. If any reserved or duplicate values are provided the request fails with HTTP status code 400. </param>
        /// <param name="access"> The action that should be taken for a specified IP address, subnet range or tag. </param>
        /// <param name="sourceAddressPrefix"> Valid values are a single IP address (i.e. 10.10.10.10), IP subnet (i.e. 192.168.1.0/24), default tag, or * (for all addresses).  If any other values are provided the request fails with HTTP status code 400. </param>
        /// <param name="sourcePortRanges"> Valid values are &apos;*&apos; (for all ports 0 - 65535) or arrays of ports or port ranges (i.e. 100-200). The ports should in the range of 0 to 65535 and the port ranges or ports can&apos;t overlap. If any other values are provided the request fails with HTTP status code 400. Default value will be *. </param>
        /// <returns> A new <see cref="Models.BatchNetworkSecurityGroupRule"/> instance for mocking. </returns>
        public static BatchNetworkSecurityGroupRule BatchNetworkSecurityGroupRule(int priority = default, BatchNetworkSecurityGroupRuleAccess access = default, string sourceAddressPrefix = null, IEnumerable<string> sourcePortRanges = null)
        {
            sourcePortRanges ??= new List<string>();

            return new BatchNetworkSecurityGroupRule(priority, access, sourceAddressPrefix, sourcePortRanges?.ToList());
        }

        /// <summary> Initializes a new instance of BatchPublicIPAddressConfiguration. </summary>
        /// <param name="provision"> The default value is BatchManaged. </param>
        /// <param name="ipAddressIds"> The number of IPs specified here limits the maximum size of the Pool - 100 dedicated nodes or 100 Spot/low-priority nodes can be allocated for each public IP. For example, a pool needing 250 dedicated VMs would need at least 3 public IPs specified. Each element of this collection is of the form: /subscriptions/{subscription}/resourceGroups/{group}/providers/Microsoft.Network/publicIPAddresses/{ip}. </param>
        /// <returns> A new <see cref="Models.BatchPublicIPAddressConfiguration"/> instance for mocking. </returns>
        public static BatchPublicIPAddressConfiguration BatchPublicIPAddressConfiguration(BatchIPAddressProvisioningType? provision = null, IEnumerable<ResourceIdentifier> ipAddressIds = null)
        {
            ipAddressIds ??= new List<ResourceIdentifier>();

            return new BatchPublicIPAddressConfiguration(provision, ipAddressIds?.ToList());
        }

        /// <summary> Initializes a new instance of BatchUserAccount. </summary>
        /// <param name="name"> The name of the user account. Names can contain any Unicode characters up to a maximum length of 20. </param>
        /// <param name="password"> The password for the user account. </param>
        /// <param name="elevationLevel"> nonAdmin - The auto user is a standard user without elevated access. admin - The auto user is a user with elevated access and operates with full Administrator permissions. The default value is nonAdmin. </param>
        /// <param name="linuxUserConfiguration"> This property is ignored if specified on a Windows pool. If not specified, the user is created with the default options. </param>
        /// <param name="windowsUserLoginMode"> This property can only be specified if the user is on a Windows pool. If not specified and on a Windows pool, the user is created with the default options. </param>
        /// <returns> A new <see cref="Models.BatchUserAccount"/> instance for mocking. </returns>
        public static BatchUserAccount BatchUserAccount(string name = null, string password = null, BatchUserAccountElevationLevel? elevationLevel = null, BatchLinuxUserConfiguration linuxUserConfiguration = null, BatchWindowsLoginMode? windowsUserLoginMode = null)
        {
            return new BatchUserAccount(name, password, elevationLevel, linuxUserConfiguration, windowsUserLoginMode != null ? new BatchWindowsUserConfiguration(windowsUserLoginMode) : null);
        }

        /// <summary> Initializes a new instance of BatchLinuxUserConfiguration. </summary>
        /// <param name="uid"> The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the uid. </param>
        /// <param name="gid"> The uid and gid properties must be specified together or not at all. If not specified the underlying operating system picks the gid. </param>
        /// <param name="sshPrivateKey"> The private key must not be password protected. The private key is used to automatically configure asymmetric-key based authentication for SSH between nodes in a Linux pool when the pool&apos;s enableInterNodeCommunication property is true (it is ignored if enableInterNodeCommunication is false). It does this by placing the key pair into the user&apos;s .ssh directory. If not specified, password-less SSH is not configured between nodes (no modification of the user&apos;s .ssh directory is done). </param>
        /// <returns> A new <see cref="Models.BatchLinuxUserConfiguration"/> instance for mocking. </returns>
        public static BatchLinuxUserConfiguration BatchLinuxUserConfiguration(int? uid = null, int? gid = null, string sshPrivateKey = null)
        {
            return new BatchLinuxUserConfiguration(uid, gid, sshPrivateKey);
        }

        /// <summary> Initializes a new instance of BatchAccountPoolStartTask. </summary>
        /// <param name="commandLine"> The command line does not run under a shell, and therefore cannot take advantage of shell features such as environment variable expansion. If you want to take advantage of such features, you should invoke the shell in the command line, for example using &quot;cmd /c MyCommand&quot; in Windows or &quot;/bin/sh -c MyCommand&quot; in Linux. Required if any other properties of the startTask are specified. </param>
        /// <param name="resourceFiles"> A list of files that the Batch service will download to the compute node before running the command line. </param>
        /// <param name="environmentSettings"> A list of environment variable settings for the start task. </param>
        /// <param name="userIdentity"> If omitted, the task runs as a non-administrative user unique to the task. </param>
        /// <param name="maxTaskRetryCount"> The Batch service retries a task if its exit code is nonzero. Note that this value specifically controls the number of retries. The Batch service will try the task once, and may then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch service does not retry the task. If the maximum retry count is -1, the Batch service retries the task without limit. </param>
        /// <param name="waitForSuccess"> If true and the start task fails on a compute node, the Batch service retries the start task up to its maximum retry count (maxTaskRetryCount). If the task has still not completed successfully after all retries, then the Batch service marks the compute node unusable, and will not schedule tasks to it. This condition can be detected via the node state and scheduling error detail. If false, the Batch service will not wait for the start task to complete. In this case, other tasks can start executing on the compute node while the start task is still running; and even if the start task fails, new tasks will continue to be scheduled on the node. The default is true. </param>
        /// <param name="containerSettings"> When this is specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories on the node) are mapped into the container, all task environment variables are mapped into the container, and the task command line is executed in the container. </param>
        /// <returns> A new <see cref="Models.BatchAccountPoolStartTask"/> instance for mocking. </returns>
        public static BatchAccountPoolStartTask BatchAccountPoolStartTask(string commandLine = null, IEnumerable<BatchResourceFile> resourceFiles = null, IEnumerable<BatchEnvironmentSetting> environmentSettings = null, BatchUserIdentity userIdentity = null, int? maxTaskRetryCount = null, bool? waitForSuccess = null, BatchTaskContainerSettings containerSettings = null)
        {
            resourceFiles ??= new List<BatchResourceFile>();
            environmentSettings ??= new List<BatchEnvironmentSetting>();

            return new BatchAccountPoolStartTask(commandLine, resourceFiles?.ToList(), environmentSettings?.ToList(), userIdentity, maxTaskRetryCount, waitForSuccess, containerSettings);
        }

        /// <summary> Initializes a new instance of BatchResourceFile. </summary>
        /// <param name="autoBlobContainerName"> The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified. </param>
        /// <param name="blobContainerUri"> The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified. This URL must be readable and listable from compute nodes. There are three ways to get such a URL for a container in Azure storage: include a Shared Access Signature (SAS) granting read and list permissions on the container, use a managed identity with read and list permissions, or set the ACL for the container to allow public access. </param>
        /// <param name="httpUri"> The autoStorageContainerName, storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be specified. If the URL points to Azure Blob Storage, it must be readable from compute nodes. There are three ways to get such a URL for a blob in Azure storage: include a Shared Access Signature (SAS) granting read permissions on the blob, use a managed identity with read permission, or set the ACL for the blob or its container to allow public access. </param>
        /// <param name="blobPrefix"> The property is valid only when autoStorageContainerName or storageContainerUrl is used. This prefix can be a partial filename or a subdirectory. If a prefix is not specified, all the files in the container will be downloaded. </param>
        /// <param name="filePath"> If the httpUrl property is specified, the filePath is required and describes the path which the file will be downloaded to, including the filename. Otherwise, if the autoStorageContainerName or storageContainerUrl property is specified, filePath is optional and is the directory to download the files to. In the case where filePath is used as a directory, any directory structure already associated with the input data will be retained in full and appended to the specified filePath directory. The specified relative path cannot break out of the task&apos;s working directory (for example by using &apos;..&apos;). </param>
        /// <param name="fileMode"> This property applies only to files being downloaded to Linux compute nodes. It will be ignored if it is specified for a resourceFile which will be downloaded to a Windows node. If this property is not specified for a Linux node, then a default value of 0770 is applied to the file. </param>
        /// <param name="identityResourceId"> The reference to a user assigned identity associated with the Batch pool which a compute node will use. </param>
        /// <returns> A new <see cref="Models.BatchResourceFile"/> instance for mocking. </returns>
        public static BatchResourceFile BatchResourceFile(string autoBlobContainerName = null, Uri blobContainerUri = null, Uri httpUri = null, string blobPrefix = null, string filePath = null, string fileMode = null, ResourceIdentifier identityResourceId = null)
        {
            return new BatchResourceFile(autoBlobContainerName, blobContainerUri, httpUri, blobPrefix, filePath, fileMode, identityResourceId != null ? new ComputeNodeIdentityReference(identityResourceId) : null);
        }

        /// <summary> Initializes a new instance of BatchEnvironmentSetting. </summary>
        /// <param name="name"> The name of the environment variable. </param>
        /// <param name="value"> The value of the environment variable. </param>
        /// <returns> A new <see cref="Models.BatchEnvironmentSetting"/> instance for mocking. </returns>
        public static BatchEnvironmentSetting BatchEnvironmentSetting(string name = null, string value = null)
        {
            return new BatchEnvironmentSetting(name, value);
        }

        /// <summary> Initializes a new instance of BatchUserIdentity. </summary>
        /// <param name="userName"> The userName and autoUser properties are mutually exclusive; you must specify one but not both. </param>
        /// <param name="autoUser"> The userName and autoUser properties are mutually exclusive; you must specify one but not both. </param>
        /// <returns> A new <see cref="Models.BatchUserIdentity"/> instance for mocking. </returns>
        public static BatchUserIdentity BatchUserIdentity(string userName = null, BatchAutoUserSpecification autoUser = null)
        {
            return new BatchUserIdentity(userName, autoUser);
        }

        /// <summary> Initializes a new instance of BatchAutoUserSpecification. </summary>
        /// <param name="scope"> The default value is Pool. If the pool is running Windows a value of Task should be specified if stricter isolation between tasks is required. For example, if the task mutates the registry in a way which could impact other tasks, or if certificates have been specified on the pool which should not be accessible by normal tasks but should be accessible by start tasks. </param>
        /// <param name="elevationLevel"> The default value is nonAdmin. </param>
        /// <returns> A new <see cref="Models.BatchAutoUserSpecification"/> instance for mocking. </returns>
        public static BatchAutoUserSpecification BatchAutoUserSpecification(BatchAutoUserScope? scope = null, BatchUserAccountElevationLevel? elevationLevel = null)
        {
            return new BatchAutoUserSpecification(scope, elevationLevel);
        }

        /// <summary> Initializes a new instance of BatchTaskContainerSettings. </summary>
        /// <param name="containerRunOptions"> These additional options are supplied as arguments to the &quot;docker create&quot; command, in addition to those controlled by the Batch Service. </param>
        /// <param name="imageName"> This is the full image reference, as would be specified to &quot;docker pull&quot;. If no tag is provided as part of the image name, the tag &quot;:latest&quot; is used as a default. </param>
        /// <param name="registry"> This setting can be omitted if was already provided at pool creation. </param>
        /// <param name="workingDirectory"> A flag to indicate where the container task working directory is. The default is &apos;taskWorkingDirectory&apos;. </param>
        /// <returns> A new <see cref="Models.BatchTaskContainerSettings"/> instance for mocking. </returns>
        public static BatchTaskContainerSettings BatchTaskContainerSettings(string containerRunOptions = null, string imageName = null, BatchVmContainerRegistry registry = null, BatchContainerWorkingDirectory? workingDirectory = null)
        {
            return new BatchTaskContainerSettings(containerRunOptions, imageName, registry, workingDirectory);
        }

        /// <summary> Initializes a new instance of BatchCertificateReference. </summary>
        /// <param name="id"> The fully qualified ID of the certificate to install on the pool. This must be inside the same batch account as the pool. </param>
        /// <param name="storeLocation"> The default value is currentUser. This property is applicable only for pools configured with Windows nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows image reference). For Linux compute nodes, the certificates are stored in a directory inside the task working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For certificates with visibility of &apos;remoteUser&apos;, a &apos;certs&apos; directory is created in the user&apos;s home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory. </param>
        /// <param name="storeName"> This property is applicable only for pools configured with Windows nodes (that is, created with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows image reference). Common store names include: My, Root, CA, Trust, Disallowed, TrustedPeople, TrustedPublisher, AuthRoot, AddressBook, but any custom store name can also be used. The default value is My. </param>
        /// <param name="visibility"> Which user accounts on the compute node should have access to the private data of the certificate. </param>
        /// <returns> A new <see cref="Models.BatchCertificateReference"/> instance for mocking. </returns>
        public static BatchCertificateReference BatchCertificateReference(ResourceIdentifier id = null, BatchCertificateStoreLocation? storeLocation = null, string storeName = null, IEnumerable<BatchCertificateVisibility> visibility = null)
        {
            visibility ??= new List<BatchCertificateVisibility>();

            return new BatchCertificateReference(id, storeLocation, storeName, visibility?.ToList());
        }

        /// <summary> Initializes a new instance of BatchApplicationPackageReference. </summary>
        /// <param name="id"> The ID of the application package to install. This must be inside the same batch account as the pool. This can either be a reference to a specific version or the default version if one exists. </param>
        /// <param name="version"> If this is omitted, and no default version is specified for this application, the request fails with the error code InvalidApplicationPackageReferences. If you are calling the REST API directly, the HTTP status code is 409. </param>
        /// <returns> A new <see cref="Models.BatchApplicationPackageReference"/> instance for mocking. </returns>
        public static BatchApplicationPackageReference BatchApplicationPackageReference(ResourceIdentifier id = null, string version = null)
        {
            return new BatchApplicationPackageReference(id, version);
        }

        /// <summary> Initializes a new instance of BatchResizeOperationStatus. </summary>
        /// <param name="targetDedicatedNodes"> The desired number of dedicated compute nodes in the pool. </param>
        /// <param name="targetLowPriorityNodes"> The desired number of Spot/low-priority compute nodes in the pool. </param>
        /// <param name="resizeTimeout"> The default value is 15 minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad Request). </param>
        /// <param name="nodeDeallocationOption"> The default value is requeue. </param>
        /// <param name="startOn"> The time when this resize operation was started. </param>
        /// <param name="errors"> This property is set only if an error occurred during the last pool resize, and only when the pool allocationState is Steady. </param>
        /// <returns> A new <see cref="Models.BatchResizeOperationStatus"/> instance for mocking. </returns>
        public static BatchResizeOperationStatus BatchResizeOperationStatus(int? targetDedicatedNodes = null, int? targetLowPriorityNodes = null, TimeSpan? resizeTimeout = null, BatchNodeDeallocationOption? nodeDeallocationOption = null, DateTimeOffset? startOn = null, IEnumerable<ResponseError> errors = null)
        {
            errors ??= new List<ResponseError>();

            return new BatchResizeOperationStatus(targetDedicatedNodes, targetLowPriorityNodes, resizeTimeout, nodeDeallocationOption, startOn, errors?.ToList());
        }

        /// <summary> Initializes a new instance of BatchMountConfiguration. </summary>
        /// <param name="blobFileSystemConfiguration"> This property is mutually exclusive with all other properties. </param>
        /// <param name="nfsMountConfiguration"> This property is mutually exclusive with all other properties. </param>
        /// <param name="cifsMountConfiguration"> This property is mutually exclusive with all other properties. </param>
        /// <param name="fileShareConfiguration"> This property is mutually exclusive with all other properties. </param>
        /// <returns> A new <see cref="Models.BatchMountConfiguration"/> instance for mocking. </returns>
        public static BatchMountConfiguration BatchMountConfiguration(BatchBlobFileSystemConfiguration blobFileSystemConfiguration = null, BatchNfsMountConfiguration nfsMountConfiguration = null, BatchCifsMountConfiguration cifsMountConfiguration = null, BatchFileShareConfiguration fileShareConfiguration = null)
        {
            return new BatchMountConfiguration(blobFileSystemConfiguration, nfsMountConfiguration, cifsMountConfiguration, fileShareConfiguration);
        }

        /// <summary> Initializes a new instance of BatchBlobFileSystemConfiguration. </summary>
        /// <param name="accountName"> The Azure Storage Account name. </param>
        /// <param name="containerName"> The Azure Blob Storage Container name. </param>
        /// <param name="accountKey"> This property is mutually exclusive with both sasKey and identity; exactly one must be specified. </param>
        /// <param name="sasKey"> This property is mutually exclusive with both accountKey and identity; exactly one must be specified. </param>
        /// <param name="blobfuseOptions"> These are &apos;net use&apos; options in Windows and &apos;mount&apos; options in Linux. </param>
        /// <param name="relativeMountPath"> All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable. </param>
        /// <param name="identityResourceId"> This property is mutually exclusive with both accountKey and sasKey; exactly one must be specified. </param>
        /// <returns> A new <see cref="Models.BatchBlobFileSystemConfiguration"/> instance for mocking. </returns>
        public static BatchBlobFileSystemConfiguration BatchBlobFileSystemConfiguration(string accountName = null, string containerName = null, string accountKey = null, string sasKey = null, string blobfuseOptions = null, string relativeMountPath = null, ResourceIdentifier identityResourceId = null)
        {
            return new BatchBlobFileSystemConfiguration(accountName, containerName, accountKey, sasKey, blobfuseOptions, relativeMountPath, identityResourceId != null ? new ComputeNodeIdentityReference(identityResourceId) : null);
        }

        /// <summary> Initializes a new instance of BatchNfsMountConfiguration. </summary>
        /// <param name="source"> The URI of the file system to mount. </param>
        /// <param name="relativeMountPath"> All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable. </param>
        /// <param name="mountOptions"> These are &apos;net use&apos; options in Windows and &apos;mount&apos; options in Linux. </param>
        /// <returns> A new <see cref="Models.BatchNfsMountConfiguration"/> instance for mocking. </returns>
        public static BatchNfsMountConfiguration BatchNfsMountConfiguration(string source = null, string relativeMountPath = null, string mountOptions = null)
        {
            return new BatchNfsMountConfiguration(source, relativeMountPath, mountOptions);
        }

        /// <summary> Initializes a new instance of BatchCifsMountConfiguration. </summary>
        /// <param name="username"> The user to use for authentication against the CIFS file system. </param>
        /// <param name="source"> The URI of the file system to mount. </param>
        /// <param name="relativeMountPath"> All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable. </param>
        /// <param name="mountOptions"> These are &apos;net use&apos; options in Windows and &apos;mount&apos; options in Linux. </param>
        /// <param name="password"> The password to use for authentication against the CIFS file system. </param>
        /// <returns> A new <see cref="Models.BatchCifsMountConfiguration"/> instance for mocking. </returns>
        public static BatchCifsMountConfiguration BatchCifsMountConfiguration(string username = null, string source = null, string relativeMountPath = null, string mountOptions = null, string password = null)
        {
            return new BatchCifsMountConfiguration(username, source, relativeMountPath, mountOptions, password);
        }

        /// <summary> Initializes a new instance of BatchFileShareConfiguration. </summary>
        /// <param name="accountName"> The Azure Storage account name. </param>
        /// <param name="fileUri"> This is of the form &apos;https://{account}.file.core.windows.net/&apos;. </param>
        /// <param name="accountKey"> The Azure Storage account key. </param>
        /// <param name="relativeMountPath"> All file systems are mounted relative to the Batch mounts directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable. </param>
        /// <param name="mountOptions"> These are &apos;net use&apos; options in Windows and &apos;mount&apos; options in Linux. </param>
        /// <returns> A new <see cref="Models.BatchFileShareConfiguration"/> instance for mocking. </returns>
        public static BatchFileShareConfiguration BatchFileShareConfiguration(string accountName = null, Uri fileUri = null, string accountKey = null, string relativeMountPath = null, string mountOptions = null)
        {
            return new BatchFileShareConfiguration(accountName, fileUri, accountKey, relativeMountPath, mountOptions);
        }

        /// <summary> Initializes a new instance of BatchAccountOutboundEnvironmentEndpoint. </summary>
        /// <param name="category"> The type of service that the Batch service connects to. </param>
        /// <param name="endpoints"> The endpoints for this service to which the Batch service makes outbound calls. </param>
        /// <returns> A new <see cref="Models.BatchAccountOutboundEnvironmentEndpoint"/> instance for mocking. </returns>
        public static BatchAccountOutboundEnvironmentEndpoint BatchAccountOutboundEnvironmentEndpoint(string category = null, IEnumerable<BatchAccountEndpointDependency> endpoints = null)
        {
            endpoints ??= new List<BatchAccountEndpointDependency>();

            return new BatchAccountOutboundEnvironmentEndpoint(category, endpoints?.ToList());
        }

        /// <summary> Initializes a new instance of BatchAccountEndpointDependency. </summary>
        /// <param name="domainName"> The domain name of the dependency. Domain names may be fully qualified or may contain a * wildcard. </param>
        /// <param name="description"> Human-readable supplemental information about the dependency and when it is applicable. </param>
        /// <param name="endpointDetails"> The list of connection details for this endpoint. </param>
        /// <returns> A new <see cref="Models.BatchAccountEndpointDependency"/> instance for mocking. </returns>
        public static BatchAccountEndpointDependency BatchAccountEndpointDependency(string domainName = null, string description = null, IEnumerable<BatchEndpointDetail> endpointDetails = null)
        {
            endpointDetails ??= new List<BatchEndpointDetail>();

            return new BatchAccountEndpointDependency(domainName, description, endpointDetails?.ToList());
        }

        /// <summary> Initializes a new instance of BatchEndpointDetail. </summary>
        /// <param name="port"> The port an endpoint is connected to. </param>
        /// <returns> A new <see cref="Models.BatchEndpointDetail"/> instance for mocking. </returns>
        public static BatchEndpointDetail BatchEndpointDetail(int? port = null)
        {
            return new BatchEndpointDetail(port);
        }
    }
}
