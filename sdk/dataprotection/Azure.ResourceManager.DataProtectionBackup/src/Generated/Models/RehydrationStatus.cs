// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.DataProtectionBackup.Models
{
    /// <summary> The RehydrationStatus. </summary>
    public readonly partial struct RehydrationStatus : IEquatable<RehydrationStatus>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="RehydrationStatus"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public RehydrationStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string CreateINProgressValue = "CREATE_IN_PROGRESS";
        private const string CompletedValue = "COMPLETED";
        private const string DeleteINProgressValue = "DELETE_IN_PROGRESS";
        private const string DeletedValue = "DELETED";
        private const string FailedValue = "FAILED";

        /// <summary> CREATE_IN_PROGRESS. </summary>
        public static RehydrationStatus CreateINProgress { get; } = new RehydrationStatus(CreateINProgressValue);
        /// <summary> COMPLETED. </summary>
        public static RehydrationStatus Completed { get; } = new RehydrationStatus(CompletedValue);
        /// <summary> DELETE_IN_PROGRESS. </summary>
        public static RehydrationStatus DeleteINProgress { get; } = new RehydrationStatus(DeleteINProgressValue);
        /// <summary> DELETED. </summary>
        public static RehydrationStatus Deleted { get; } = new RehydrationStatus(DeletedValue);
        /// <summary> FAILED. </summary>
        public static RehydrationStatus Failed { get; } = new RehydrationStatus(FailedValue);
        /// <summary> Determines if two <see cref="RehydrationStatus"/> values are the same. </summary>
        public static bool operator ==(RehydrationStatus left, RehydrationStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="RehydrationStatus"/> values are not the same. </summary>
        public static bool operator !=(RehydrationStatus left, RehydrationStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="RehydrationStatus"/>. </summary>
        public static implicit operator RehydrationStatus(string value) => new RehydrationStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is RehydrationStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(RehydrationStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
