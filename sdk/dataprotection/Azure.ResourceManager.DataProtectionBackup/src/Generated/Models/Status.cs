// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.DataProtectionBackup.Models
{
    /// <summary> Specifies the protection status of the resource. </summary>
    public readonly partial struct Status : IEquatable<Status>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Status"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Status(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ConfiguringProtectionValue = "ConfiguringProtection";
        private const string ConfiguringProtectionFailedValue = "ConfiguringProtectionFailed";
        private const string ProtectionConfiguredValue = "ProtectionConfigured";
        private const string ProtectionStoppedValue = "ProtectionStopped";
        private const string SoftDeletedValue = "SoftDeleted";
        private const string SoftDeletingValue = "SoftDeleting";

        /// <summary> ConfiguringProtection. </summary>
        public static Status ConfiguringProtection { get; } = new Status(ConfiguringProtectionValue);
        /// <summary> ConfiguringProtectionFailed. </summary>
        public static Status ConfiguringProtectionFailed { get; } = new Status(ConfiguringProtectionFailedValue);
        /// <summary> ProtectionConfigured. </summary>
        public static Status ProtectionConfigured { get; } = new Status(ProtectionConfiguredValue);
        /// <summary> ProtectionStopped. </summary>
        public static Status ProtectionStopped { get; } = new Status(ProtectionStoppedValue);
        /// <summary> SoftDeleted. </summary>
        public static Status SoftDeleted { get; } = new Status(SoftDeletedValue);
        /// <summary> SoftDeleting. </summary>
        public static Status SoftDeleting { get; } = new Status(SoftDeletingValue);
        /// <summary> Determines if two <see cref="Status"/> values are the same. </summary>
        public static bool operator ==(Status left, Status right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Status"/> values are not the same. </summary>
        public static bool operator !=(Status left, Status right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Status"/>. </summary>
        public static implicit operator Status(string value) => new Status(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Status other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Status other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
