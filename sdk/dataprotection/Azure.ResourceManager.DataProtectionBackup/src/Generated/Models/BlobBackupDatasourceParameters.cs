// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.ResourceManager.DataProtectionBackup.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Parameters to be used during configuration of backup of blobs
    /// </summary>
    public partial class BlobBackupDatasourceParameters : BackupDatasourceParameters
    {
        /// <summary>
        /// Initializes a new instance of the BlobBackupDatasourceParameters
        /// class.
        /// </summary>
        public BlobBackupDatasourceParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the BlobBackupDatasourceParameters
        /// class.
        /// </summary>
        /// <param name="containersList">List of containers to be backed up
        /// during configuration of backup of blobs</param>
        public BlobBackupDatasourceParameters(IList<string> containersList)
        {
            ContainersList = containersList;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets list of containers to be backed up during
        /// configuration of backup of blobs
        /// </summary>
        [JsonProperty(PropertyName = "containersList")]
        public IList<string> ContainersList { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ContainersList == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ContainersList");
            }
        }
    }
}
