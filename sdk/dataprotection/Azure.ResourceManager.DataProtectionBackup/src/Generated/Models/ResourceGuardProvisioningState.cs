// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.DataProtectionBackup.Models
{
    /// <summary> Provisioning state of the BackupVault resource. </summary>
    public readonly partial struct ResourceGuardProvisioningState : IEquatable<ResourceGuardProvisioningState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ResourceGuardProvisioningState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ResourceGuardProvisioningState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string FailedValue = "Failed";
        private const string ProvisioningValue = "Provisioning";
        private const string SucceededValue = "Succeeded";
        private const string UnknownValue = "Unknown";
        private const string UpdatingValue = "Updating";

        /// <summary> Failed. </summary>
        public static ResourceGuardProvisioningState Failed { get; } = new ResourceGuardProvisioningState(FailedValue);
        /// <summary> Provisioning. </summary>
        public static ResourceGuardProvisioningState Provisioning { get; } = new ResourceGuardProvisioningState(ProvisioningValue);
        /// <summary> Succeeded. </summary>
        public static ResourceGuardProvisioningState Succeeded { get; } = new ResourceGuardProvisioningState(SucceededValue);
        /// <summary> Unknown. </summary>
        public static ResourceGuardProvisioningState Unknown { get; } = new ResourceGuardProvisioningState(UnknownValue);
        /// <summary> Updating. </summary>
        public static ResourceGuardProvisioningState Updating { get; } = new ResourceGuardProvisioningState(UpdatingValue);
        /// <summary> Determines if two <see cref="ResourceGuardProvisioningState"/> values are the same. </summary>
        public static bool operator ==(ResourceGuardProvisioningState left, ResourceGuardProvisioningState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ResourceGuardProvisioningState"/> values are not the same. </summary>
        public static bool operator !=(ResourceGuardProvisioningState left, ResourceGuardProvisioningState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ResourceGuardProvisioningState"/>. </summary>
        public static implicit operator ResourceGuardProvisioningState(string value) => new ResourceGuardProvisioningState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ResourceGuardProvisioningState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ResourceGuardProvisioningState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
