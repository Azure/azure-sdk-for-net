// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.ResourceManager.DataProtectionBackup.Models
{
    /// <summary> Adhoc trigger context. </summary>
    public partial class AdhocBasedTriggerContext : TriggerContext
    {
        /// <summary> Initializes a new instance of AdhocBasedTriggerContext. </summary>
        /// <param name="taggingCriteria"> Tagging Criteria containing retention tag for adhoc backup. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="taggingCriteria"/> is null. </exception>
        public AdhocBasedTriggerContext(AdhocBasedTaggingCriteria taggingCriteria)
        {
            if (taggingCriteria == null)
            {
                throw new ArgumentNullException(nameof(taggingCriteria));
            }

            TaggingCriteria = taggingCriteria;
            ObjectType = "AdhocBasedTriggerContext";
        }

        /// <summary> Initializes a new instance of AdhocBasedTriggerContext. </summary>
        /// <param name="objectType"> Type of the specific object - used for deserializing. </param>
        /// <param name="taggingCriteria"> Tagging Criteria containing retention tag for adhoc backup. </param>
        internal AdhocBasedTriggerContext(string objectType, AdhocBasedTaggingCriteria taggingCriteria) : base(objectType)
        {
            TaggingCriteria = taggingCriteria;
            ObjectType = objectType ?? "AdhocBasedTriggerContext";
        }

        /// <summary> Tagging Criteria containing retention tag for adhoc backup. </summary>
        internal AdhocBasedTaggingCriteria TaggingCriteria { get; set; }
        /// <summary> Retention tag information. </summary>
        public RetentionTag TaggingCriteriaTagInfo
        {
            get => TaggingCriteria is null ? default : TaggingCriteria.TagInfo;
            set
            {
                if (TaggingCriteria is null)
                    TaggingCriteria = new AdhocBasedTaggingCriteria();
                TaggingCriteria.TagInfo = value;
            }
        }
    }
}
