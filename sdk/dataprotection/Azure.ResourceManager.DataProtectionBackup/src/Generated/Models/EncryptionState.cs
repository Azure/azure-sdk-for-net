// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.DataProtectionBackup.Models
{
    /// <summary> Encryption state of the Backup Vault. </summary>
    public readonly partial struct EncryptionState : IEquatable<EncryptionState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="EncryptionState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EncryptionState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string EnabledValue = "Enabled";
        private const string DisabledValue = "Disabled";
        private const string InconsistentValue = "Inconsistent";

        /// <summary> CMK encryption is enabled on the Backup Vault. </summary>
        public static EncryptionState Enabled { get; } = new EncryptionState(EnabledValue);
        /// <summary> CMK encryption is disabled on the Backup Vault. User can not set this state once Encryption State is 'Enabled'. </summary>
        public static EncryptionState Disabled { get; } = new EncryptionState(DisabledValue);
        /// <summary> CMK encryption is in inconsistent state on the Backup Vault. This state indicates that user needs to retry the encryption settings operation immediately to correct the state. </summary>
        public static EncryptionState Inconsistent { get; } = new EncryptionState(InconsistentValue);
        /// <summary> Determines if two <see cref="EncryptionState"/> values are the same. </summary>
        public static bool operator ==(EncryptionState left, EncryptionState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EncryptionState"/> values are not the same. </summary>
        public static bool operator !=(EncryptionState left, EncryptionState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="EncryptionState"/>. </summary>
        public static implicit operator EncryptionState(string value) => new EncryptionState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EncryptionState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EncryptionState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
