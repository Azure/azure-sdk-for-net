// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.ResourceManager.DataProtectionBackup.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Deleted Backup Instance
    /// </summary>
    public partial class DeletedBackupInstance : BackupInstance
    {
        /// <summary>
        /// Initializes a new instance of the DeletedBackupInstance class.
        /// </summary>
        public DeletedBackupInstance()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DeletedBackupInstance class.
        /// </summary>
        /// <param name="dataSourceInfo">Gets or sets the data source
        /// information.</param>
        /// <param name="policyInfo">Gets or sets the policy
        /// information.</param>
        /// <param name="friendlyName">Gets or sets the Backup Instance
        /// friendly name.</param>
        /// <param name="dataSourceSetInfo">Gets or sets the data source set
        /// information.</param>
        /// <param name="protectionStatus">Specifies the protection status of
        /// the resource</param>
        /// <param name="currentProtectionState">Specifies the current
        /// protection state of the resource. Possible values include:
        /// 'Invalid', 'NotProtected', 'ConfiguringProtection',
        /// 'ProtectionConfigured', 'BackupSchedulesSuspended',
        /// 'RetentionSchedulesSuspended', 'ProtectionStopped',
        /// 'ProtectionError', 'ConfiguringProtectionFailed', 'SoftDeleting',
        /// 'SoftDeleted', 'UpdatingProtection'</param>
        /// <param name="protectionErrorDetails">Specifies the protection error
        /// of the resource</param>
        /// <param name="provisioningState">Specifies the provisioning state of
        /// the resource i.e. provisioning/updating/Succeeded/Failed</param>
        /// <param name="datasourceAuthCredentials">Credentials to use to
        /// authenticate with data source provider.</param>
        /// <param name="validationType">Specifies the type of validation. In
        /// case of DeepValidation, all validations from /validateForBackup API
        /// will run again. Possible values include: 'ShallowValidation',
        /// 'DeepValidation'</param>
        /// <param name="deletionInfo">Deletion info of Backup Instance</param>
        public DeletedBackupInstance(Datasource dataSourceInfo, PolicyInfo policyInfo, string objectType, string friendlyName = default(string), DatasourceSet dataSourceSetInfo = default(DatasourceSet), ProtectionStatusDetails protectionStatus = default(ProtectionStatusDetails), string currentProtectionState = default(string), UserFacingError protectionErrorDetails = default(UserFacingError), string provisioningState = default(string), AuthCredentials datasourceAuthCredentials = default(AuthCredentials), string validationType = default(string), DeletionInfo deletionInfo = default(DeletionInfo))
            : base(dataSourceInfo, policyInfo, objectType, friendlyName, dataSourceSetInfo, protectionStatus, currentProtectionState, protectionErrorDetails, provisioningState, datasourceAuthCredentials, validationType)
        {
            DeletionInfo = deletionInfo;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets deletion info of Backup Instance
        /// </summary>
        [JsonProperty(PropertyName = "deletionInfo")]
        public DeletionInfo DeletionInfo { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
        }
    }
}
