// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DataProtectionBackup.Models
{
    public partial class DataSourceInfo : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(DataSourceType))
            {
                writer.WritePropertyName("datasourceType");
                writer.WriteStringValue(DataSourceType);
            }
            if (Optional.IsDefined(ObjectType))
            {
                writer.WritePropertyName("objectType");
                writer.WriteStringValue(ObjectType);
            }
            writer.WritePropertyName("resourceID");
            writer.WriteStringValue(ResourceId);
            if (Optional.IsDefined(ResourceLocation))
            {
                writer.WritePropertyName("resourceLocation");
                writer.WriteStringValue(ResourceLocation.Value);
            }
            if (Optional.IsDefined(ResourceName))
            {
                writer.WritePropertyName("resourceName");
                writer.WriteStringValue(ResourceName);
            }
            if (Optional.IsDefined(ResourceType))
            {
                writer.WritePropertyName("resourceType");
                writer.WriteStringValue(ResourceType.Value);
            }
            if (Optional.IsDefined(ResourceUri))
            {
                writer.WritePropertyName("resourceUri");
                writer.WriteStringValue(ResourceUri.AbsoluteUri);
            }
            writer.WriteEndObject();
        }

        internal static DataSourceInfo DeserializeDataSourceInfo(JsonElement element)
        {
            Optional<string> datasourceType = default;
            Optional<string> objectType = default;
            ResourceIdentifier resourceId = default;
            Optional<AzureLocation> resourceLocation = default;
            Optional<string> resourceName = default;
            Optional<ResourceType> resourceType = default;
            Optional<Uri> resourceUri = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("datasourceType"))
                {
                    datasourceType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("objectType"))
                {
                    objectType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("resourceID"))
                {
                    resourceId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("resourceLocation"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    resourceLocation = new AzureLocation(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("resourceName"))
                {
                    resourceName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("resourceType"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    resourceType = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("resourceUri"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        resourceUri = null;
                        continue;
                    }
                    resourceUri = new Uri(property.Value.GetString());
                    continue;
                }
            }
            return new DataSourceInfo(datasourceType.Value, objectType.Value, resourceId, Optional.ToNullable(resourceLocation), resourceName.Value, Optional.ToNullable(resourceType), resourceUri.Value);
        }
    }
}
