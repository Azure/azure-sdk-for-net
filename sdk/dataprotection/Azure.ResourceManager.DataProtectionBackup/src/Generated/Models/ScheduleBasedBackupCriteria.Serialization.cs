// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DataProtectionBackup.Models
{
    public partial class ScheduleBasedBackupCriteria : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(AbsoluteCriteria))
            {
                writer.WritePropertyName("absoluteCriteria");
                writer.WriteStartArray();
                foreach (var item in AbsoluteCriteria)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(DaysOfMonth))
            {
                writer.WritePropertyName("daysOfMonth");
                writer.WriteStartArray();
                foreach (var item in DaysOfMonth)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(DaysOfTheWeek))
            {
                writer.WritePropertyName("daysOfTheWeek");
                writer.WriteStartArray();
                foreach (var item in DaysOfTheWeek)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(MonthsOfYear))
            {
                writer.WritePropertyName("monthsOfYear");
                writer.WriteStartArray();
                foreach (var item in MonthsOfYear)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(ScheduleTimes))
            {
                writer.WritePropertyName("scheduleTimes");
                writer.WriteStartArray();
                foreach (var item in ScheduleTimes)
                {
                    writer.WriteStringValue(item, "O");
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(WeeksOfTheMonth))
            {
                writer.WritePropertyName("weeksOfTheMonth");
                writer.WriteStartArray();
                foreach (var item in WeeksOfTheMonth)
                {
                    writer.WriteStringValue(item.ToString());
                }
                writer.WriteEndArray();
            }
            writer.WritePropertyName("objectType");
            writer.WriteStringValue(ObjectType);
            writer.WriteEndObject();
        }

        internal static ScheduleBasedBackupCriteria DeserializeScheduleBasedBackupCriteria(JsonElement element)
        {
            Optional<IList<AbsoluteMarker>> absoluteCriteria = default;
            Optional<IList<Day>> daysOfMonth = default;
            Optional<IList<DayOfWeek>> daysOfTheWeek = default;
            Optional<IList<Month>> monthsOfYear = default;
            Optional<IList<DateTimeOffset>> scheduleTimes = default;
            Optional<IList<WeekNumber>> weeksOfTheMonth = default;
            string objectType = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("absoluteCriteria"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<AbsoluteMarker> array = new List<AbsoluteMarker>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new AbsoluteMarker(item.GetString()));
                    }
                    absoluteCriteria = array;
                    continue;
                }
                if (property.NameEquals("daysOfMonth"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<Day> array = new List<Day>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(Day.DeserializeDay(item));
                    }
                    daysOfMonth = array;
                    continue;
                }
                if (property.NameEquals("daysOfTheWeek"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<DayOfWeek> array = new List<DayOfWeek>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new DayOfWeek(item.GetString()));
                    }
                    daysOfTheWeek = array;
                    continue;
                }
                if (property.NameEquals("monthsOfYear"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<Month> array = new List<Month>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new Month(item.GetString()));
                    }
                    monthsOfYear = array;
                    continue;
                }
                if (property.NameEquals("scheduleTimes"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<DateTimeOffset> array = new List<DateTimeOffset>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetDateTimeOffset("O"));
                    }
                    scheduleTimes = array;
                    continue;
                }
                if (property.NameEquals("weeksOfTheMonth"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<WeekNumber> array = new List<WeekNumber>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(new WeekNumber(item.GetString()));
                    }
                    weeksOfTheMonth = array;
                    continue;
                }
                if (property.NameEquals("objectType"))
                {
                    objectType = property.Value.GetString();
                    continue;
                }
            }
            return new ScheduleBasedBackupCriteria(objectType, Optional.ToList(absoluteCriteria), Optional.ToList(daysOfMonth), Optional.ToList(daysOfTheWeek), Optional.ToList(monthsOfYear), Optional.ToList(scheduleTimes), Optional.ToList(weeksOfTheMonth));
        }
    }
}
