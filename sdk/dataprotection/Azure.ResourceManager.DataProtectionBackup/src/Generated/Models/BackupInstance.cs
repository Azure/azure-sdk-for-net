// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure;

namespace Azure.ResourceManager.DataProtectionBackup.Models
{
    /// <summary> Backup Instance. </summary>
    public partial class BackupInstance
    {
        /// <summary> Initializes a new instance of BackupInstance. </summary>
        /// <param name="dataSourceInfo"> Gets or sets the data source information. </param>
        /// <param name="policyInfo"> Gets or sets the policy information. </param>
        /// <param name="objectType"></param>
        /// <exception cref="ArgumentNullException"> <paramref name="dataSourceInfo"/>, <paramref name="policyInfo"/> or <paramref name="objectType"/> is null. </exception>
        public BackupInstance(Datasource dataSourceInfo, PolicyInfo policyInfo, string objectType)
        {
            if (dataSourceInfo == null)
            {
                throw new ArgumentNullException(nameof(dataSourceInfo));
            }
            if (policyInfo == null)
            {
                throw new ArgumentNullException(nameof(policyInfo));
            }
            if (objectType == null)
            {
                throw new ArgumentNullException(nameof(objectType));
            }

            DataSourceInfo = dataSourceInfo;
            PolicyInfo = policyInfo;
            ObjectType = objectType;
        }

        /// <summary> Initializes a new instance of BackupInstance. </summary>
        /// <param name="friendlyName"> Gets or sets the Backup Instance friendly name. </param>
        /// <param name="dataSourceInfo"> Gets or sets the data source information. </param>
        /// <param name="dataSourceSetInfo"> Gets or sets the data source set information. </param>
        /// <param name="policyInfo"> Gets or sets the policy information. </param>
        /// <param name="protectionStatus"> Specifies the protection status of the resource. </param>
        /// <param name="currentProtectionState"> Specifies the current protection state of the resource. </param>
        /// <param name="protectionErrorDetails"> Specifies the protection error of the resource. </param>
        /// <param name="provisioningState"> Specifies the provisioning state of the resource i.e. provisioning/updating/Succeeded/Failed. </param>
        /// <param name="datasourceAuthCredentials">
        /// Credentials to use to authenticate with data source provider.
        /// Please note <see cref="AuthCredentials"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="SecretStoreBasedAuthCredentials"/>.
        /// </param>
        /// <param name="validationType"> Specifies the type of validation. In case of DeepValidation, all validations from /validateForBackup API will run again. </param>
        /// <param name="objectType"></param>
        internal BackupInstance(string friendlyName, Datasource dataSourceInfo, DatasourceSet dataSourceSetInfo, PolicyInfo policyInfo, ProtectionStatusDetails protectionStatus, CurrentProtectionState? currentProtectionState, ResponseError protectionErrorDetails, string provisioningState, AuthCredentials datasourceAuthCredentials, ValidationType? validationType, string objectType)
        {
            FriendlyName = friendlyName;
            DataSourceInfo = dataSourceInfo;
            DataSourceSetInfo = dataSourceSetInfo;
            PolicyInfo = policyInfo;
            ProtectionStatus = protectionStatus;
            CurrentProtectionState = currentProtectionState;
            ProtectionErrorDetails = protectionErrorDetails;
            ProvisioningState = provisioningState;
            DatasourceAuthCredentials = datasourceAuthCredentials;
            ValidationType = validationType;
            ObjectType = objectType;
        }

        /// <summary> Gets or sets the Backup Instance friendly name. </summary>
        public string FriendlyName { get; set; }
        /// <summary> Gets or sets the data source information. </summary>
        public Datasource DataSourceInfo { get; set; }
        /// <summary> Gets or sets the data source set information. </summary>
        public DatasourceSet DataSourceSetInfo { get; set; }
        /// <summary> Gets or sets the policy information. </summary>
        public PolicyInfo PolicyInfo { get; set; }
        /// <summary> Specifies the protection status of the resource. </summary>
        public ProtectionStatusDetails ProtectionStatus { get; }
        /// <summary> Specifies the current protection state of the resource. </summary>
        public CurrentProtectionState? CurrentProtectionState { get; }
        /// <summary> Specifies the protection error of the resource. </summary>
        public ResponseError ProtectionErrorDetails { get; }
        /// <summary> Specifies the provisioning state of the resource i.e. provisioning/updating/Succeeded/Failed. </summary>
        public string ProvisioningState { get; }
        /// <summary>
        /// Credentials to use to authenticate with data source provider.
        /// Please note <see cref="AuthCredentials"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="SecretStoreBasedAuthCredentials"/>.
        /// </summary>
        public AuthCredentials DatasourceAuthCredentials { get; set; }
        /// <summary> Specifies the type of validation. In case of DeepValidation, all validations from /validateForBackup API will run again. </summary>
        public ValidationType? ValidationType { get; set; }
        /// <summary> Gets or sets the object type. </summary>
        public string ObjectType { get; set; }
    }
}
