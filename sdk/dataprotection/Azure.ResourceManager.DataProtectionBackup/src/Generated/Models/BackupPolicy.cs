// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.ResourceManager.DataProtectionBackup.Models
{
    /// <summary> Rule based backup policy. </summary>
    public partial class BackupPolicy : BaseBackupPolicy
    {
        /// <summary> Initializes a new instance of BackupPolicy. </summary>
        /// <param name="datasourceTypes"> Type of datasource for the backup management. </param>
        /// <param name="policyRules">
        /// Policy rule dictionary that contains rules for each backuptype i.e Full/Incremental/Logs etc
        /// Please note <see cref="BasePolicyRule"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureBackupRule"/> and <see cref="AzureRetentionRule"/>.
        /// </param>
        /// <exception cref="ArgumentNullException"> <paramref name="datasourceTypes"/> or <paramref name="policyRules"/> is null. </exception>
        public BackupPolicy(IEnumerable<string> datasourceTypes, IEnumerable<BasePolicyRule> policyRules) : base(datasourceTypes)
        {
            if (datasourceTypes == null)
            {
                throw new ArgumentNullException(nameof(datasourceTypes));
            }
            if (policyRules == null)
            {
                throw new ArgumentNullException(nameof(policyRules));
            }

            PolicyRules = policyRules.ToList();
            ObjectType = "BackupPolicy";
        }

        /// <summary> Initializes a new instance of BackupPolicy. </summary>
        /// <param name="datasourceTypes"> Type of datasource for the backup management. </param>
        /// <param name="objectType"></param>
        /// <param name="policyRules">
        /// Policy rule dictionary that contains rules for each backuptype i.e Full/Incremental/Logs etc
        /// Please note <see cref="BasePolicyRule"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureBackupRule"/> and <see cref="AzureRetentionRule"/>.
        /// </param>
        internal BackupPolicy(IList<string> datasourceTypes, string objectType, IList<BasePolicyRule> policyRules) : base(datasourceTypes, objectType)
        {
            PolicyRules = policyRules;
            ObjectType = objectType ?? "BackupPolicy";
        }

        /// <summary>
        /// Policy rule dictionary that contains rules for each backuptype i.e Full/Incremental/Logs etc
        /// Please note <see cref="BasePolicyRule"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AzureBackupRule"/> and <see cref="AzureRetentionRule"/>.
        /// </summary>
        public IList<BasePolicyRule> PolicyRules { get; }
    }
}
