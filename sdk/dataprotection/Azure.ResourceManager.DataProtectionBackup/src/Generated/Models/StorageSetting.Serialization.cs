// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DataProtectionBackup.Models
{
    public partial class StorageSetting : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(DatastoreType))
            {
                writer.WritePropertyName("datastoreType");
                writer.WriteStringValue(DatastoreType.Value.ToString());
            }
            if (Optional.IsDefined(SettingType))
            {
                writer.WritePropertyName("type");
                writer.WriteStringValue(SettingType.Value.ToString());
            }
            writer.WriteEndObject();
        }

        internal static StorageSetting DeserializeStorageSetting(JsonElement element)
        {
            Optional<StorageSettingStoreType> datastoreType = default;
            Optional<StorageSettingType> type = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("datastoreType"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    datastoreType = new StorageSettingStoreType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    type = new StorageSettingType(property.Value.GetString());
                    continue;
                }
            }
            return new StorageSetting(Optional.ToNullable(datastoreType), Optional.ToNullable(type));
        }
    }
}
