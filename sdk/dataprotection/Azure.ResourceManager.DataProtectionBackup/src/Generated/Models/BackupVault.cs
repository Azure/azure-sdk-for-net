// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.ResourceManager.DataProtectionBackup.Models
{
    /// <summary> Backup Vault. </summary>
    public partial class BackupVault
    {
        /// <summary> Initializes a new instance of BackupVault. </summary>
        /// <param name="storageSettings"> Storage Settings. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="storageSettings"/> is null. </exception>
        public BackupVault(IEnumerable<StorageSetting> storageSettings)
        {
            if (storageSettings == null)
            {
                throw new ArgumentNullException(nameof(storageSettings));
            }

            StorageSettings = storageSettings.ToList();
        }

        /// <summary> Initializes a new instance of BackupVault. </summary>
        /// <param name="monitoringSettings"> Monitoring Settings. </param>
        /// <param name="provisioningState"> Provisioning state of the BackupVault resource. </param>
        /// <param name="resourceMoveState"> Resource move state for backup vault. </param>
        /// <param name="resourceMoveDetails"> Resource move details for backup vault. </param>
        /// <param name="securitySettings"> Security Settings. </param>
        /// <param name="storageSettings"> Storage Settings. </param>
        /// <param name="isVaultProtectedByResourceGuard"> Is vault protected by resource guard. </param>
        internal BackupVault(MonitoringSettings monitoringSettings, ProvisioningState? provisioningState, ResourceMoveState? resourceMoveState, ResourceMoveDetails resourceMoveDetails, SecuritySettings securitySettings, IList<StorageSetting> storageSettings, bool? isVaultProtectedByResourceGuard)
        {
            MonitoringSettings = monitoringSettings;
            ProvisioningState = provisioningState;
            ResourceMoveState = resourceMoveState;
            ResourceMoveDetails = resourceMoveDetails;
            SecuritySettings = securitySettings;
            StorageSettings = storageSettings;
            IsVaultProtectedByResourceGuard = isVaultProtectedByResourceGuard;
        }

        /// <summary> Monitoring Settings. </summary>
        internal MonitoringSettings MonitoringSettings { get; set; }
        /// <summary> Gets or sets the azure monitor alert alerts for all job failures. </summary>
        public AlertsState? AzureMonitorAlertAlertsForAllJobFailures
        {
            get => MonitoringSettings is null ? default : MonitoringSettings.AzureMonitorAlertAlertsForAllJobFailures;
            set
            {
                if (MonitoringSettings is null)
                    MonitoringSettings = new MonitoringSettings();
                MonitoringSettings.AzureMonitorAlertAlertsForAllJobFailures = value;
            }
        }

        /// <summary> Provisioning state of the BackupVault resource. </summary>
        public ProvisioningState? ProvisioningState { get; }
        /// <summary> Resource move state for backup vault. </summary>
        public ResourceMoveState? ResourceMoveState { get; }
        /// <summary> Resource move details for backup vault. </summary>
        public ResourceMoveDetails ResourceMoveDetails { get; }
        /// <summary> Security Settings. </summary>
        public SecuritySettings SecuritySettings { get; set; }
        /// <summary> Storage Settings. </summary>
        public IList<StorageSetting> StorageSettings { get; }
        /// <summary> Is vault protected by resource guard. </summary>
        public bool? IsVaultProtectedByResourceGuard { get; set; }
    }
}
