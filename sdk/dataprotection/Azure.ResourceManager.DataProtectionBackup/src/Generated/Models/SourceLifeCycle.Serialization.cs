// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DataProtectionBackup.Models
{
    public partial class SourceLifeCycle : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("deleteAfter");
            writer.WriteObjectValue(DeleteAfter);
            writer.WritePropertyName("sourceDataStore");
            writer.WriteObjectValue(SourceDataStore);
            if (Optional.IsCollectionDefined(TargetDataStoreCopySettings))
            {
                writer.WritePropertyName("targetDataStoreCopySettings");
                writer.WriteStartArray();
                foreach (var item in TargetDataStoreCopySettings)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static SourceLifeCycle DeserializeSourceLifeCycle(JsonElement element)
        {
            DeleteOption deleteAfter = default;
            DataStoreInfoBase sourceDataStore = default;
            Optional<IList<TargetCopySetting>> targetDataStoreCopySettings = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("deleteAfter"))
                {
                    deleteAfter = DeleteOption.DeserializeDeleteOption(property.Value);
                    continue;
                }
                if (property.NameEquals("sourceDataStore"))
                {
                    sourceDataStore = DataStoreInfoBase.DeserializeDataStoreInfoBase(property.Value);
                    continue;
                }
                if (property.NameEquals("targetDataStoreCopySettings"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<TargetCopySetting> array = new List<TargetCopySetting>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(TargetCopySetting.DeserializeTargetCopySetting(item));
                    }
                    targetDataStoreCopySettings = array;
                    continue;
                }
            }
            return new SourceLifeCycle(deleteAfter, sourceDataStore, Optional.ToList(targetDataStoreCopySettings));
        }
    }
}
