// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DataProtectionBackup.Models
{
    public partial class AzureBackupRule : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(BackupParameters))
            {
                writer.WritePropertyName("backupParameters");
                writer.WriteObjectValue(BackupParameters);
            }
            writer.WritePropertyName("dataStore");
            writer.WriteObjectValue(DataStore);
            writer.WritePropertyName("trigger");
            writer.WriteObjectValue(Trigger);
            writer.WritePropertyName("name");
            writer.WriteStringValue(Name);
            writer.WritePropertyName("objectType");
            writer.WriteStringValue(ObjectType);
            writer.WriteEndObject();
        }

        internal static AzureBackupRule DeserializeAzureBackupRule(JsonElement element)
        {
            Optional<BackupParameters> backupParameters = default;
            DataStoreInfoBase dataStore = default;
            TriggerContext trigger = default;
            string name = default;
            string objectType = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("backupParameters"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    backupParameters = BackupParameters.DeserializeBackupParameters(property.Value);
                    continue;
                }
                if (property.NameEquals("dataStore"))
                {
                    dataStore = DataStoreInfoBase.DeserializeDataStoreInfoBase(property.Value);
                    continue;
                }
                if (property.NameEquals("trigger"))
                {
                    trigger = TriggerContext.DeserializeTriggerContext(property.Value);
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("objectType"))
                {
                    objectType = property.Value.GetString();
                    continue;
                }
            }
            return new AzureBackupRule(name, objectType, backupParameters.Value, dataStore, trigger);
        }
    }
}
