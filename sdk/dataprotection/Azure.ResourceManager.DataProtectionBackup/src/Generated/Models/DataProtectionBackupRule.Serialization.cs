// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DataProtectionBackup.Models
{
    public partial class DataProtectionBackupRule : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(BackupParameters))
            {
                writer.WritePropertyName("backupParameters"u8);
                writer.WriteObjectValue(BackupParameters);
            }
            writer.WritePropertyName("dataStore"u8);
            writer.WriteObjectValue(DataStore);
            writer.WritePropertyName("trigger"u8);
            writer.WriteObjectValue(Trigger);
            writer.WritePropertyName("name"u8);
            writer.WriteStringValue(Name);
            writer.WritePropertyName("objectType"u8);
            writer.WriteStringValue(ObjectType);
            writer.WriteEndObject();
        }

        internal static DataProtectionBackupRule DeserializeDataProtectionBackupRule(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<DataProtectionBackupSettingsBase> backupParameters = default;
            DataStoreInfoBase dataStore = default;
            DataProtectionBackupTriggerContext trigger = default;
            string name = default;
            string objectType = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("backupParameters"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    backupParameters = DataProtectionBackupSettingsBase.DeserializeDataProtectionBackupSettingsBase(property.Value);
                    continue;
                }
                if (property.NameEquals("dataStore"u8))
                {
                    dataStore = DataStoreInfoBase.DeserializeDataStoreInfoBase(property.Value);
                    continue;
                }
                if (property.NameEquals("trigger"u8))
                {
                    trigger = DataProtectionBackupTriggerContext.DeserializeDataProtectionBackupTriggerContext(property.Value);
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("objectType"u8))
                {
                    objectType = property.Value.GetString();
                    continue;
                }
            }
            return new DataProtectionBackupRule(name, objectType, backupParameters.Value, dataStore, trigger);
        }
    }
}
