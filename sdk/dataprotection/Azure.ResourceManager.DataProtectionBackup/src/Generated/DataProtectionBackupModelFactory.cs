// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure;
using Azure.Core;
using Azure.ResourceManager.DataProtectionBackup;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.DataProtectionBackup.Models
{
    /// <summary> Model factory for generated models. </summary>
    public static partial class DataProtectionBackupModelFactory
    {
        /// <summary> Initializes a new instance of DataProtectionBackupVaultData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> BackupVaultResource properties. </param>
        /// <param name="eTag"> Optional ETag. </param>
        /// <param name="identity"> Input Managed Identity Details. </param>
        /// <returns> A new <see cref="DataProtectionBackup.DataProtectionBackupVaultData"/> instance for mocking. </returns>
        public static DataProtectionBackupVaultData DataProtectionBackupVaultData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, DataProtectionBackupVaultProperties properties = null, ETag? eTag = null, ManagedServiceIdentity identity = null)
        {
            tags ??= new Dictionary<string, string>();

            return new DataProtectionBackupVaultData(id, name, resourceType, systemData, tags, location, properties, eTag, identity);
        }

        /// <summary> Initializes a new instance of DataProtectionBackupVaultProperties. </summary>
        /// <param name="alertSettingsForAllJobFailures"> Monitoring Settings. </param>
        /// <param name="provisioningState"> Provisioning state of the BackupVault resource. </param>
        /// <param name="resourceMoveState"> Resource move state for backup vault. </param>
        /// <param name="resourceMoveDetails"> Resource move details for backup vault. </param>
        /// <param name="storageSettings"> Storage Settings. </param>
        /// <param name="isVaultProtectedByResourceGuard"> Is vault protected by resource guard. </param>
        /// <returns> A new <see cref="Models.DataProtectionBackupVaultProperties"/> instance for mocking. </returns>
        public static DataProtectionBackupVaultProperties DataProtectionBackupVaultProperties(AzureMonitorAlertsState? alertSettingsForAllJobFailures = null, DataProtectionBackupProvisioningState? provisioningState = null, BackupVaultResourceMoveState? resourceMoveState = null, BackupVaultResourceMoveDetails resourceMoveDetails = null, IEnumerable<DataProtectionBackupStorageSetting> storageSettings = null, bool? isVaultProtectedByResourceGuard = null)
        {
            storageSettings ??= new List<DataProtectionBackupStorageSetting>();

            return new DataProtectionBackupVaultProperties(new MonitoringSettings(new AzureMonitorAlertSettings(alertSettingsForAllJobFailures)), provisioningState, resourceMoveState, resourceMoveDetails, storageSettings?.ToList(), isVaultProtectedByResourceGuard);
        }

        /// <summary> Initializes a new instance of BackupVaultResourceMoveDetails. </summary>
        /// <param name="operationId"> CorrelationId of latest ResourceMove operation attempted. </param>
        /// <param name="startOn"> Start time in UTC of latest ResourceMove operation attempted. ISO 8601 format. </param>
        /// <param name="completeOn"> Completion time in UTC of latest ResourceMove operation attempted. ISO 8601 format. </param>
        /// <param name="sourceResourcePath"> ARM resource path of source resource. </param>
        /// <param name="targetResourcePath"> ARM resource path of target resource used in latest ResourceMove operation. </param>
        /// <returns> A new <see cref="Models.BackupVaultResourceMoveDetails"/> instance for mocking. </returns>
        public static BackupVaultResourceMoveDetails BackupVaultResourceMoveDetails(string operationId = null, DateTimeOffset? startOn = null, DateTimeOffset? completeOn = null, string sourceResourcePath = null, string targetResourcePath = null)
        {
            return new BackupVaultResourceMoveDetails(operationId, startOn, completeOn, sourceResourcePath, targetResourcePath);
        }

        /// <summary> Initializes a new instance of DataProtectionBackupStorageSetting. </summary>
        /// <param name="dataStoreType"> Gets or sets the type of the datastore. </param>
        /// <param name="storageSettingType"> Gets or sets the type. </param>
        /// <returns> A new <see cref="Models.DataProtectionBackupStorageSetting"/> instance for mocking. </returns>
        public static DataProtectionBackupStorageSetting DataProtectionBackupStorageSetting(StorageSettingStoreType? dataStoreType = null, StorageSettingType? storageSettingType = null)
        {
            return new DataProtectionBackupStorageSetting(dataStoreType, storageSettingType);
        }

        /// <summary> Initializes a new instance of DataProtectionBackupNameAvailabilityResult. </summary>
        /// <param name="message"> Gets or sets the message. </param>
        /// <param name="isNameAvailable"> Gets or sets a value indicating whether [name available]. </param>
        /// <param name="reason"> Gets or sets the reason. </param>
        /// <returns> A new <see cref="Models.DataProtectionBackupNameAvailabilityResult"/> instance for mocking. </returns>
        public static DataProtectionBackupNameAvailabilityResult DataProtectionBackupNameAvailabilityResult(string message = null, bool? isNameAvailable = null, string reason = null)
        {
            return new DataProtectionBackupNameAvailabilityResult(message, isNameAvailable, reason);
        }

        /// <summary> Initializes a new instance of BackupFeatureValidationResultBase. </summary>
        /// <param name="objectType"> Type of the specific object - used for deserializing. </param>
        /// <returns> A new <see cref="Models.BackupFeatureValidationResultBase"/> instance for mocking. </returns>
        public static BackupFeatureValidationResultBase BackupFeatureValidationResultBase(string objectType = null)
        {
            return new UnknownFeatureValidationResponseBase(objectType);
        }

        /// <summary> Initializes a new instance of DataProtectionBackupPolicyData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties">
        /// BaseBackupPolicyResource properties
        /// Please note <see cref="DataProtectionBackupPolicyPropertiesBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="RuleBasedBackupPolicy"/>.
        /// </param>
        /// <returns> A new <see cref="DataProtectionBackup.DataProtectionBackupPolicyData"/> instance for mocking. </returns>
        public static DataProtectionBackupPolicyData DataProtectionBackupPolicyData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, DataProtectionBackupPolicyPropertiesBase properties = null)
        {
            return new DataProtectionBackupPolicyData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of DataProtectionBackupPolicyPropertiesBase. </summary>
        /// <param name="dataSourceTypes"> Type of datasource for the backup management. </param>
        /// <param name="objectType"></param>
        /// <returns> A new <see cref="Models.DataProtectionBackupPolicyPropertiesBase"/> instance for mocking. </returns>
        public static DataProtectionBackupPolicyPropertiesBase DataProtectionBackupPolicyPropertiesBase(IEnumerable<string> dataSourceTypes = null, string objectType = null)
        {
            dataSourceTypes ??= new List<string>();

            return new UnknownBaseBackupPolicy(dataSourceTypes?.ToList(), objectType);
        }

        /// <summary> Initializes a new instance of DataProtectionBackupInstanceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> BackupInstanceResource properties. </param>
        /// <param name="tags"> Proxy Resource tags. </param>
        /// <returns> A new <see cref="DataProtectionBackup.DataProtectionBackupInstanceData"/> instance for mocking. </returns>
        public static DataProtectionBackupInstanceData DataProtectionBackupInstanceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, DataProtectionBackupInstanceProperties properties = null, IDictionary<string, string> tags = null)
        {
            tags ??= new Dictionary<string, string>();

            return new DataProtectionBackupInstanceData(id, name, resourceType, systemData, properties, tags);
        }

        /// <summary> Initializes a new instance of DataProtectionBackupInstanceProperties. </summary>
        /// <param name="friendlyName"> Gets or sets the Backup Instance friendly name. </param>
        /// <param name="dataSourceInfo"> Gets or sets the data source information. </param>
        /// <param name="dataSourceSetInfo"> Gets or sets the data source set information. </param>
        /// <param name="policyInfo"> Gets or sets the policy information. </param>
        /// <param name="protectionStatus"> Specifies the protection status of the resource. </param>
        /// <param name="currentProtectionState"> Specifies the current protection state of the resource. </param>
        /// <param name="protectionErrorDetails"> Specifies the protection error of the resource. </param>
        /// <param name="provisioningState"> Specifies the provisioning state of the resource i.e. provisioning/updating/Succeeded/Failed. </param>
        /// <param name="dataSourceAuthCredentials">
        /// Credentials to use to authenticate with data source provider.
        /// Please note <see cref="DataProtectionBackupAuthCredentials"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="SecretStoreBasedAuthCredentials"/>.
        /// </param>
        /// <param name="validationType"> Specifies the type of validation. In case of DeepValidation, all validations from /validateForBackup API will run again. </param>
        /// <param name="objectType"></param>
        /// <returns> A new <see cref="Models.DataProtectionBackupInstanceProperties"/> instance for mocking. </returns>
        public static DataProtectionBackupInstanceProperties DataProtectionBackupInstanceProperties(string friendlyName = null, DataSourceInfo dataSourceInfo = null, DataSourceSetInfo dataSourceSetInfo = null, BackupInstancePolicyInfo policyInfo = null, BackupInstanceProtectionStatusDetails protectionStatus = null, CurrentProtectionState? currentProtectionState = null, ResponseError protectionErrorDetails = null, string provisioningState = null, DataProtectionBackupAuthCredentials dataSourceAuthCredentials = null, BackupValidationType? validationType = null, string objectType = null)
        {
            return new DataProtectionBackupInstanceProperties(friendlyName, dataSourceInfo, dataSourceSetInfo, policyInfo, protectionStatus, currentProtectionState, protectionErrorDetails, provisioningState, dataSourceAuthCredentials, validationType, objectType);
        }

        /// <summary> Initializes a new instance of DataSourceInfo. </summary>
        /// <param name="dataSourceType"> DatasourceType of the resource. </param>
        /// <param name="objectType"> Type of Datasource object, used to initialize the right inherited type. </param>
        /// <param name="resourceId"> Full ARM ID of the resource. For azure resources, this is ARM ID. For non azure resources, this will be the ID created by backup service via Fabric/Vault. </param>
        /// <param name="resourceLocation"> Location of datasource. </param>
        /// <param name="resourceName"> Unique identifier of the resource in the context of parent. </param>
        /// <param name="resourceType"> Resource Type of Datasource. </param>
        /// <param name="resourceUri"> Uri of the resource. </param>
        /// <returns> A new <see cref="Models.DataSourceInfo"/> instance for mocking. </returns>
        public static DataSourceInfo DataSourceInfo(string dataSourceType = null, string objectType = null, ResourceIdentifier resourceId = null, AzureLocation? resourceLocation = null, string resourceName = null, ResourceType? resourceType = null, Uri resourceUri = null)
        {
            return new DataSourceInfo(dataSourceType, objectType, resourceId, resourceLocation, resourceName, resourceType, resourceUri);
        }

        /// <summary> Initializes a new instance of DataSourceSetInfo. </summary>
        /// <param name="dataSourceType"> DatasourceType of the resource. </param>
        /// <param name="objectType"> Type of Datasource object, used to initialize the right inherited type. </param>
        /// <param name="resourceId"> Full ARM ID of the resource. For azure resources, this is ARM ID. For non azure resources, this will be the ID created by backup service via Fabric/Vault. </param>
        /// <param name="resourceLocation"> Location of datasource. </param>
        /// <param name="resourceName"> Unique identifier of the resource in the context of parent. </param>
        /// <param name="resourceType"> Resource Type of Datasource. </param>
        /// <param name="resourceUri"> Uri of the resource. </param>
        /// <returns> A new <see cref="Models.DataSourceSetInfo"/> instance for mocking. </returns>
        public static DataSourceSetInfo DataSourceSetInfo(string dataSourceType = null, string objectType = null, ResourceIdentifier resourceId = null, AzureLocation? resourceLocation = null, string resourceName = null, ResourceType? resourceType = null, Uri resourceUri = null)
        {
            return new DataSourceSetInfo(dataSourceType, objectType, resourceId, resourceLocation, resourceName, resourceType, resourceUri);
        }

        /// <summary> Initializes a new instance of BackupInstancePolicyInfo. </summary>
        /// <param name="policyId"></param>
        /// <param name="policyVersion"></param>
        /// <param name="dataStoreParametersList"> Policy parameters for the backup instance. </param>
        /// <returns> A new <see cref="Models.BackupInstancePolicyInfo"/> instance for mocking. </returns>
        public static BackupInstancePolicyInfo BackupInstancePolicyInfo(ResourceIdentifier policyId = null, string policyVersion = null, IEnumerable<DataStoreSettings> dataStoreParametersList = null)
        {
            dataStoreParametersList ??= new List<DataStoreSettings>();

            return new BackupInstancePolicyInfo(policyId, policyVersion, new PolicyParameters(dataStoreParametersList?.ToList()));
        }

        /// <summary> Initializes a new instance of DataStoreSettings. </summary>
        /// <param name="objectType"> Type of the specific object - used for deserializing. </param>
        /// <param name="dataStoreType"> type of datastore; Operational/Vault/Archive. </param>
        /// <returns> A new <see cref="Models.DataStoreSettings"/> instance for mocking. </returns>
        public static DataStoreSettings DataStoreSettings(string objectType = null, DataStoreType dataStoreType = default)
        {
            return new UnknownDataStoreParameters(objectType, dataStoreType);
        }

        /// <summary> Initializes a new instance of BackupInstanceProtectionStatusDetails. </summary>
        /// <param name="errorDetails"> Specifies the protection status error of the resource. </param>
        /// <param name="status"> Specifies the protection status of the resource. </param>
        /// <returns> A new <see cref="Models.BackupInstanceProtectionStatusDetails"/> instance for mocking. </returns>
        public static BackupInstanceProtectionStatusDetails BackupInstanceProtectionStatusDetails(ResponseError errorDetails = null, BackupInstanceProtectionStatus? status = null)
        {
            return new BackupInstanceProtectionStatusDetails(errorDetails, status);
        }

        /// <summary> Initializes a new instance of DataProtectionBackupAuthCredentials. </summary>
        /// <param name="objectType"> Type of the specific object - used for deserializing. </param>
        /// <returns> A new <see cref="Models.DataProtectionBackupAuthCredentials"/> instance for mocking. </returns>
        public static DataProtectionBackupAuthCredentials DataProtectionBackupAuthCredentials(string objectType = null)
        {
            return new UnknownAuthCredentials(objectType);
        }

        /// <summary> Initializes a new instance of DataProtectionOperationJobExtendedInfo. </summary>
        /// <param name="jobId"> Arm Id of the job created for this operation. </param>
        /// <returns> A new <see cref="Models.DataProtectionOperationJobExtendedInfo"/> instance for mocking. </returns>
        public static DataProtectionOperationJobExtendedInfo DataProtectionOperationJobExtendedInfo(Guid? jobId = null)
        {
            return new DataProtectionOperationJobExtendedInfo("OperationJobExtendedInfo", jobId);
        }

        /// <summary> Initializes a new instance of DataProtectionOperationExtendedInfo. </summary>
        /// <param name="objectType"> This property will be used as the discriminator for deciding the specific types in the polymorphic chain of types. </param>
        /// <returns> A new <see cref="Models.DataProtectionOperationExtendedInfo"/> instance for mocking. </returns>
        public static DataProtectionOperationExtendedInfo DataProtectionOperationExtendedInfo(string objectType = null)
        {
            return new UnknownOperationExtendedInfo(objectType);
        }

        /// <summary> Initializes a new instance of DataProtectionBackupRecoveryPointData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties">
        /// AzureBackupRecoveryPointResource properties
        /// Please note <see cref="DataProtectionBackupRecoveryPointProperties"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="DataProtectionBackupDiscreteRecoveryPointProperties"/>.
        /// </param>
        /// <returns> A new <see cref="DataProtectionBackup.DataProtectionBackupRecoveryPointData"/> instance for mocking. </returns>
        public static DataProtectionBackupRecoveryPointData DataProtectionBackupRecoveryPointData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, DataProtectionBackupRecoveryPointProperties properties = null)
        {
            return new DataProtectionBackupRecoveryPointData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of DataProtectionBackupRecoveryPointProperties. </summary>
        /// <param name="objectType"></param>
        /// <returns> A new <see cref="Models.DataProtectionBackupRecoveryPointProperties"/> instance for mocking. </returns>
        public static DataProtectionBackupRecoveryPointProperties DataProtectionBackupRecoveryPointProperties(string objectType = null)
        {
            return new UnknownAzureBackupRecoveryPoint(objectType);
        }

        /// <summary> Initializes a new instance of DataProtectionBackupJobData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> AzureBackupJobResource properties. </param>
        /// <returns> A new <see cref="DataProtectionBackup.DataProtectionBackupJobData"/> instance for mocking. </returns>
        public static DataProtectionBackupJobData DataProtectionBackupJobData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, DataProtectionBackupJobProperties properties = null)
        {
            return new DataProtectionBackupJobData(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of DataProtectionBackupJobProperties. </summary>
        /// <param name="activityId"> Job Activity Id. </param>
        /// <param name="backupInstanceFriendlyName"> Name of the Backup Instance. </param>
        /// <param name="backupInstanceId"> ARM ID of the Backup Instance. </param>
        /// <param name="dataSourceId"> ARM ID of the DataSource. </param>
        /// <param name="dataSourceLocation"> Location of the DataSource. </param>
        /// <param name="dataSourceName"> User Friendly Name of the DataSource. </param>
        /// <param name="dataSourceSetName"> Data Source Set Name of the DataSource. </param>
        /// <param name="dataSourceType"> Type of DataSource. </param>
        /// <param name="duration"> Total run time of the job. ISO 8601 format. </param>
        /// <param name="endOn"> EndTime of the job(in UTC). </param>
        /// <param name="errorDetails"> A List, detailing the errors related to the job. </param>
        /// <param name="extendedInfo"> Extended Information about the job. </param>
        /// <param name="isUserTriggered"> Indicated that whether the job is adhoc(true) or scheduled(false). </param>
        /// <param name="operation"> It indicates the type of Job i.e. Backup:full/log/diff ;Restore:ALR/OLR; Tiering:Backup/Archive ; Management:ConfigureProtection/UnConfigure. </param>
        /// <param name="operationCategory"> It indicates the type of Job i.e. Backup/Restore/Tiering/Management. </param>
        /// <param name="policyId"> ARM ID of the policy. </param>
        /// <param name="policyName"> Name of the policy. </param>
        /// <param name="isProgressEnabled"> Indicated whether progress is enabled for the job. </param>
        /// <param name="progressUri"> Url which contains job&apos;s progress. </param>
        /// <param name="restoreType"> It indicates the sub type of operation i.e. in case of Restore it can be ALR/OLR. </param>
        /// <param name="sourceResourceGroup"> Resource Group Name of the Datasource. </param>
        /// <param name="sourceSubscriptionId"> SubscriptionId corresponding to the DataSource. </param>
        /// <param name="startOn"> StartTime of the job(in UTC). </param>
        /// <param name="status"> Status of the job like InProgress/Success/Failed/Cancelled/SuccessWithWarning. </param>
        /// <param name="subscriptionId"> Subscription Id of the corresponding backup vault. </param>
        /// <param name="supportedActions"> List of supported actions. </param>
        /// <param name="vaultName"> Name of the vault. </param>
        /// <param name="eTag"></param>
        /// <param name="sourceDataStoreName"></param>
        /// <param name="destinationDataStoreName"></param>
        /// <returns> A new <see cref="Models.DataProtectionBackupJobProperties"/> instance for mocking. </returns>
        public static DataProtectionBackupJobProperties DataProtectionBackupJobProperties(string activityId = null, string backupInstanceFriendlyName = null, ResourceIdentifier backupInstanceId = null, ResourceIdentifier dataSourceId = null, AzureLocation dataSourceLocation = default, string dataSourceName = null, string dataSourceSetName = null, string dataSourceType = null, TimeSpan? duration = null, DateTimeOffset? endOn = null, IEnumerable<ResponseError> errorDetails = null, BackupJobExtendedInfo extendedInfo = null, bool isUserTriggered = default, string operation = null, string operationCategory = null, ResourceIdentifier policyId = null, string policyName = null, bool isProgressEnabled = default, Uri progressUri = null, string restoreType = null, string sourceResourceGroup = null, string sourceSubscriptionId = null, DateTimeOffset startOn = default, string status = null, string subscriptionId = null, IEnumerable<string> supportedActions = null, string vaultName = null, ETag? eTag = null, string sourceDataStoreName = null, string destinationDataStoreName = null)
        {
            errorDetails ??= new List<ResponseError>();
            supportedActions ??= new List<string>();

            return new DataProtectionBackupJobProperties(activityId, backupInstanceFriendlyName, backupInstanceId, dataSourceId, dataSourceLocation, dataSourceName, dataSourceSetName, dataSourceType, duration, endOn, errorDetails?.ToList(), extendedInfo, isUserTriggered, operation, operationCategory, policyId, policyName, isProgressEnabled, progressUri, restoreType, sourceResourceGroup, sourceSubscriptionId, startOn, status, subscriptionId, supportedActions?.ToList(), vaultName, eTag, sourceDataStoreName, destinationDataStoreName);
        }

        /// <summary> Initializes a new instance of BackupJobExtendedInfo. </summary>
        /// <param name="additionalDetails"> Job&apos;s Additional Details. </param>
        /// <param name="backupInstanceState"> State of the Backup Instance. </param>
        /// <param name="dataTransferredInBytes"> Number of bytes transferred. </param>
        /// <param name="recoveryDestination"> Destination where restore is done. </param>
        /// <param name="sourceRecoverPoint"> Details of the Source Recovery Point. </param>
        /// <param name="subTasks"> List of Sub Tasks of the job. </param>
        /// <param name="targetRecoverPoint"> Details of the Target Recovery Point. </param>
        /// <returns> A new <see cref="Models.BackupJobExtendedInfo"/> instance for mocking. </returns>
        public static BackupJobExtendedInfo BackupJobExtendedInfo(IReadOnlyDictionary<string, string> additionalDetails = null, string backupInstanceState = null, double? dataTransferredInBytes = null, string recoveryDestination = null, RestoreJobRecoveryPointDetails sourceRecoverPoint = null, IEnumerable<BackupJobSubTask> subTasks = null, RestoreJobRecoveryPointDetails targetRecoverPoint = null)
        {
            additionalDetails ??= new Dictionary<string, string>();
            subTasks ??= new List<BackupJobSubTask>();

            return new BackupJobExtendedInfo(additionalDetails, backupInstanceState, dataTransferredInBytes, recoveryDestination, sourceRecoverPoint, subTasks?.ToList(), targetRecoverPoint);
        }

        /// <summary> Initializes a new instance of RestoreJobRecoveryPointDetails. </summary>
        /// <param name="recoveryPointId"></param>
        /// <param name="recoverOn"></param>
        /// <returns> A new <see cref="Models.RestoreJobRecoveryPointDetails"/> instance for mocking. </returns>
        public static RestoreJobRecoveryPointDetails RestoreJobRecoveryPointDetails(string recoveryPointId = null, DateTimeOffset? recoverOn = null)
        {
            return new RestoreJobRecoveryPointDetails(recoveryPointId, recoverOn);
        }

        /// <summary> Initializes a new instance of BackupJobSubTask. </summary>
        /// <param name="additionalDetails"> Additional details of Sub Tasks. </param>
        /// <param name="taskId"> Task Id of the Sub Task. </param>
        /// <param name="taskName"> Name of the Sub Task. </param>
        /// <param name="taskProgress"> Progress of the Sub Task. </param>
        /// <param name="taskStatus"> Status of the Sub Task. </param>
        /// <returns> A new <see cref="Models.BackupJobSubTask"/> instance for mocking. </returns>
        public static BackupJobSubTask BackupJobSubTask(IReadOnlyDictionary<string, string> additionalDetails = null, int taskId = default, string taskName = null, string taskProgress = null, string taskStatus = null)
        {
            additionalDetails ??= new Dictionary<string, string>();

            return new BackupJobSubTask(additionalDetails, taskId, taskName, taskProgress, taskStatus);
        }

        /// <summary> Initializes a new instance of BackupFindRestorableTimeRangeResult. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> AzureBackupFindRestorableTimeRangesResponseResource properties. </param>
        /// <returns> A new <see cref="Models.BackupFindRestorableTimeRangeResult"/> instance for mocking. </returns>
        public static BackupFindRestorableTimeRangeResult BackupFindRestorableTimeRangeResult(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, BackupFindRestorableTimeRangeResultProperties properties = null)
        {
            return new BackupFindRestorableTimeRangeResult(id, name, resourceType, systemData, properties);
        }

        /// <summary> Initializes a new instance of BackupFindRestorableTimeRangeResultProperties. </summary>
        /// <param name="restorableTimeRanges"> Returns the Restore Ranges available on the Backup Instance. </param>
        /// <param name="objectType"></param>
        /// <returns> A new <see cref="Models.BackupFindRestorableTimeRangeResultProperties"/> instance for mocking. </returns>
        public static BackupFindRestorableTimeRangeResultProperties BackupFindRestorableTimeRangeResultProperties(IEnumerable<RestorableTimeRange> restorableTimeRanges = null, string objectType = null)
        {
            restorableTimeRanges ??= new List<RestorableTimeRange>();

            return new BackupFindRestorableTimeRangeResultProperties(restorableTimeRanges?.ToList(), objectType);
        }

        /// <summary> Initializes a new instance of RestorableTimeRange. </summary>
        /// <param name="startOn"> Start time for the available restore range. </param>
        /// <param name="endOn"> End time for the available restore range. </param>
        /// <param name="objectType"></param>
        /// <returns> A new <see cref="Models.RestorableTimeRange"/> instance for mocking. </returns>
        public static RestorableTimeRange RestorableTimeRange(DateTimeOffset startOn = default, DateTimeOffset endOn = default, string objectType = null)
        {
            return new RestorableTimeRange(startOn, endOn, objectType);
        }

        /// <summary> Initializes a new instance of ResourceGuardData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> ResourceGuardResource properties. </param>
        /// <param name="eTag"> Optional ETag. </param>
        /// <param name="identity"> Input Managed Identity Details. </param>
        /// <returns> A new <see cref="DataProtectionBackup.ResourceGuardData"/> instance for mocking. </returns>
        public static ResourceGuardData ResourceGuardData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ResourceGuardProperties properties = null, ETag? eTag = null, ManagedServiceIdentity identity = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ResourceGuardData(id, name, resourceType, systemData, tags, location, properties, eTag, identity);
        }

        /// <summary> Initializes a new instance of ResourceGuardProperties. </summary>
        /// <param name="provisioningState"> Provisioning state of the BackupVault resource. </param>
        /// <param name="isAutoApprovalsAllowed"> This flag indicates whether auto approval is allowed or not. </param>
        /// <param name="resourceGuardOperations"> {readonly} List of operation details those are protected by the ResourceGuard resource. </param>
        /// <param name="vaultCriticalOperationExclusionList"> List of critical operations which are not protected by this resourceGuard. </param>
        /// <param name="description"> Description about the pre-req steps to perform all the critical operations. </param>
        /// <returns> A new <see cref="Models.ResourceGuardProperties"/> instance for mocking. </returns>
        public static ResourceGuardProperties ResourceGuardProperties(DataProtectionBackupProvisioningState? provisioningState = null, bool? isAutoApprovalsAllowed = null, IEnumerable<ResourceGuardOperationDetails> resourceGuardOperations = null, IEnumerable<string> vaultCriticalOperationExclusionList = null, string description = null)
        {
            resourceGuardOperations ??= new List<ResourceGuardOperationDetails>();
            vaultCriticalOperationExclusionList ??= new List<string>();

            return new ResourceGuardProperties(provisioningState, isAutoApprovalsAllowed, resourceGuardOperations?.ToList(), vaultCriticalOperationExclusionList?.ToList(), description);
        }

        /// <summary> Initializes a new instance of ResourceGuardOperationDetails. </summary>
        /// <param name="vaultCriticalOperation"> Name of the critical operation. </param>
        /// <param name="requestResourceType"> Type of resource request. </param>
        /// <returns> A new <see cref="Models.ResourceGuardOperationDetails"/> instance for mocking. </returns>
        public static ResourceGuardOperationDetails ResourceGuardOperationDetails(string vaultCriticalOperation = null, ResourceType? requestResourceType = null)
        {
            return new ResourceGuardOperationDetails(vaultCriticalOperation, requestResourceType);
        }

        /// <summary> Initializes a new instance of ResourceGuardProtectedObjectData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <returns> A new <see cref="Models.ResourceGuardProtectedObjectData"/> instance for mocking. </returns>
        public static ResourceGuardProtectedObjectData ResourceGuardProtectedObjectData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null)
        {
            return new ResourceGuardProtectedObjectData(id, name, resourceType, systemData);
        }

        /// <summary> Initializes a new instance of DataProtectionBackupAbsoluteDeleteSetting. </summary>
        /// <param name="duration"> Duration of deletion after given timespan. </param>
        /// <returns> A new <see cref="Models.DataProtectionBackupAbsoluteDeleteSetting"/> instance for mocking. </returns>
        public static DataProtectionBackupAbsoluteDeleteSetting DataProtectionBackupAbsoluteDeleteSetting(TimeSpan duration = default)
        {
            return new DataProtectionBackupAbsoluteDeleteSetting(duration, "AbsoluteDeleteOption");
        }

        /// <summary> Initializes a new instance of DataProtectionBackupDeleteSetting. </summary>
        /// <param name="duration"> Duration of deletion after given timespan. </param>
        /// <param name="objectType"> Type of the specific object - used for deserializing. </param>
        /// <returns> A new <see cref="Models.DataProtectionBackupDeleteSetting"/> instance for mocking. </returns>
        public static DataProtectionBackupDeleteSetting DataProtectionBackupDeleteSetting(TimeSpan duration = default, string objectType = null)
        {
            return new UnknownDeleteOption(duration, objectType);
        }

        /// <summary> Initializes a new instance of DataProtectionBackupRetentionTag. </summary>
        /// <param name="eTag"> Retention Tag version. </param>
        /// <param name="id"> Retention Tag version. </param>
        /// <param name="tagName"> Retention Tag Name to relate it to retention rule. </param>
        /// <returns> A new <see cref="Models.DataProtectionBackupRetentionTag"/> instance for mocking. </returns>
        public static DataProtectionBackupRetentionTag DataProtectionBackupRetentionTag(ETag? eTag = null, string id = null, string tagName = null)
        {
            return new DataProtectionBackupRetentionTag(eTag, id, tagName);
        }

        /// <summary> Initializes a new instance of DataProtectionBackupTriggerContext. </summary>
        /// <param name="objectType"> Type of the specific object - used for deserializing. </param>
        /// <returns> A new <see cref="Models.DataProtectionBackupTriggerContext"/> instance for mocking. </returns>
        public static DataProtectionBackupTriggerContext DataProtectionBackupTriggerContext(string objectType = null)
        {
            return new UnknownTriggerContext(objectType);
        }

        /// <summary> Initializes a new instance of DataProtectionBackupDiscreteRecoveryPointProperties. </summary>
        /// <param name="friendlyName"></param>
        /// <param name="recoveryPointDataStoresDetails"></param>
        /// <param name="recoverOn"></param>
        /// <param name="policyName"></param>
        /// <param name="policyVersion"></param>
        /// <param name="recoveryPointId"></param>
        /// <param name="recoveryPointType"></param>
        /// <param name="retentionTagName"></param>
        /// <param name="retentionTagVersion"></param>
        /// <returns> A new <see cref="Models.DataProtectionBackupDiscreteRecoveryPointProperties"/> instance for mocking. </returns>
        public static DataProtectionBackupDiscreteRecoveryPointProperties DataProtectionBackupDiscreteRecoveryPointProperties(string friendlyName = null, IEnumerable<RecoveryPointDataStoreDetail> recoveryPointDataStoresDetails = null, DateTimeOffset recoverOn = default, string policyName = null, string policyVersion = null, string recoveryPointId = null, string recoveryPointType = null, string retentionTagName = null, string retentionTagVersion = null)
        {
            recoveryPointDataStoresDetails ??= new List<RecoveryPointDataStoreDetail>();

            return new DataProtectionBackupDiscreteRecoveryPointProperties("AzureBackupDiscreteRecoveryPoint", friendlyName, recoveryPointDataStoresDetails?.ToList(), recoverOn, policyName, policyVersion, recoveryPointId, recoveryPointType, retentionTagName, retentionTagVersion);
        }

        /// <summary> Initializes a new instance of RecoveryPointDataStoreDetail. </summary>
        /// <param name="createdOn"></param>
        /// <param name="expireOn"></param>
        /// <param name="recoveryPointDataStoreId"></param>
        /// <param name="metadata"></param>
        /// <param name="state"></param>
        /// <param name="recoveryPointDataStoreType"></param>
        /// <param name="isVisible"></param>
        /// <param name="rehydrationExpireOn"></param>
        /// <param name="rehydrationStatus"></param>
        /// <returns> A new <see cref="Models.RecoveryPointDataStoreDetail"/> instance for mocking. </returns>
        public static RecoveryPointDataStoreDetail RecoveryPointDataStoreDetail(DateTimeOffset? createdOn = null, DateTimeOffset? expireOn = null, Guid? recoveryPointDataStoreId = null, string metadata = null, string state = null, string recoveryPointDataStoreType = null, bool? isVisible = null, DateTimeOffset? rehydrationExpireOn = null, RecoveryPointDataStoreRehydrationStatus? rehydrationStatus = null)
        {
            return new RecoveryPointDataStoreDetail(createdOn, expireOn, recoveryPointDataStoreId, metadata, state, recoveryPointDataStoreType, isVisible, rehydrationExpireOn, rehydrationStatus);
        }

        /// <summary> Initializes a new instance of DataProtectionBackupSettings. </summary>
        /// <param name="backupType"> BackupType ; Full/Incremental etc. </param>
        /// <returns> A new <see cref="Models.DataProtectionBackupSettings"/> instance for mocking. </returns>
        public static DataProtectionBackupSettings DataProtectionBackupSettings(string backupType = null)
        {
            return new DataProtectionBackupSettings("AzureBackupParams", backupType);
        }

        /// <summary> Initializes a new instance of DataProtectionBackupSettingsBase. </summary>
        /// <param name="objectType"> Type of the specific object - used for deserializing. </param>
        /// <returns> A new <see cref="Models.DataProtectionBackupSettingsBase"/> instance for mocking. </returns>
        public static DataProtectionBackupSettingsBase DataProtectionBackupSettingsBase(string objectType = null)
        {
            return new UnknownBackupParameters(objectType);
        }

        /// <summary> Initializes a new instance of DataProtectionBackupRule. </summary>
        /// <param name="name"></param>
        /// <param name="backupParameters">
        /// BackupParameters base
        /// Please note <see cref="DataProtectionBackupSettingsBase"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="DataProtectionBackupSettings"/>.
        /// </param>
        /// <param name="dataStore"> DataStoreInfo base. </param>
        /// <param name="trigger">
        /// Trigger context
        /// Please note <see cref="DataProtectionBackupTriggerContext"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="AdhocBasedBackupTriggerContext"/> and <see cref="ScheduleBasedBackupTriggerContext"/>.
        /// </param>
        /// <returns> A new <see cref="Models.DataProtectionBackupRule"/> instance for mocking. </returns>
        public static DataProtectionBackupRule DataProtectionBackupRule(string name = null, DataProtectionBackupSettingsBase backupParameters = null, DataStoreInfoBase dataStore = null, DataProtectionBackupTriggerContext trigger = null)
        {
            return new DataProtectionBackupRule(name, "AzureBackupRule", backupParameters, dataStore, trigger);
        }

        /// <summary> Initializes a new instance of DataProtectionBasePolicyRule. </summary>
        /// <param name="name"></param>
        /// <param name="objectType"></param>
        /// <returns> A new <see cref="Models.DataProtectionBasePolicyRule"/> instance for mocking. </returns>
        public static DataProtectionBasePolicyRule DataProtectionBasePolicyRule(string name = null, string objectType = null)
        {
            return new UnknownBasePolicyRule(name, objectType);
        }

        /// <summary> Initializes a new instance of OperationalDataStoreSettings. </summary>
        /// <param name="dataStoreType"> type of datastore; Operational/Vault/Archive. </param>
        /// <param name="resourceGroupId"> Gets or sets the Snapshot Resource Group Uri. </param>
        /// <returns> A new <see cref="Models.OperationalDataStoreSettings"/> instance for mocking. </returns>
        public static OperationalDataStoreSettings OperationalDataStoreSettings(DataStoreType dataStoreType = default, ResourceIdentifier resourceGroupId = null)
        {
            return new OperationalDataStoreSettings("AzureOperationalStoreParameters", dataStoreType, resourceGroupId);
        }

        /// <summary> Initializes a new instance of DataProtectionRetentionRule. </summary>
        /// <param name="name"></param>
        /// <param name="isDefault"></param>
        /// <param name="lifecycles"></param>
        /// <returns> A new <see cref="Models.DataProtectionRetentionRule"/> instance for mocking. </returns>
        public static DataProtectionRetentionRule DataProtectionRetentionRule(string name = null, bool? isDefault = null, IEnumerable<SourceLifeCycle> lifecycles = null)
        {
            lifecycles ??= new List<SourceLifeCycle>();

            return new DataProtectionRetentionRule(name, "AzureRetentionRule", isDefault, lifecycles?.ToList());
        }

        /// <summary> Initializes a new instance of SourceLifeCycle. </summary>
        /// <param name="deleteAfter">
        /// Delete Option
        /// Please note <see cref="DataProtectionBackupDeleteSetting"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="DataProtectionBackupAbsoluteDeleteSetting"/>.
        /// </param>
        /// <param name="sourceDataStore"> DataStoreInfo base. </param>
        /// <param name="targetDataStoreCopySettings"></param>
        /// <returns> A new <see cref="Models.SourceLifeCycle"/> instance for mocking. </returns>
        public static SourceLifeCycle SourceLifeCycle(DataProtectionBackupDeleteSetting deleteAfter = null, DataStoreInfoBase sourceDataStore = null, IEnumerable<TargetCopySetting> targetDataStoreCopySettings = null)
        {
            targetDataStoreCopySettings ??= new List<TargetCopySetting>();

            return new SourceLifeCycle(deleteAfter, sourceDataStore, targetDataStoreCopySettings?.ToList());
        }

        /// <summary> Initializes a new instance of DataProtectionBackupCopySetting. </summary>
        /// <param name="objectType"> Type of the specific object - used for deserializing. </param>
        /// <returns> A new <see cref="Models.DataProtectionBackupCopySetting"/> instance for mocking. </returns>
        public static DataProtectionBackupCopySetting DataProtectionBackupCopySetting(string objectType = null)
        {
            return new UnknownCopyOption(objectType);
        }

        /// <summary> Initializes a new instance of DataProtectionBackupCriteria. </summary>
        /// <param name="objectType"> Type of the specific object - used for deserializing. </param>
        /// <returns> A new <see cref="Models.DataProtectionBackupCriteria"/> instance for mocking. </returns>
        public static DataProtectionBackupCriteria DataProtectionBackupCriteria(string objectType = null)
        {
            return new UnknownBackupCriteria(objectType);
        }

        /// <summary> Initializes a new instance of RuleBasedBackupPolicy. </summary>
        /// <param name="dataSourceTypes"> Type of datasource for the backup management. </param>
        /// <param name="policyRules">
        /// Policy rule dictionary that contains rules for each backuptype i.e Full/Incremental/Logs etc
        /// Please note <see cref="DataProtectionBasePolicyRule"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="DataProtectionBackupRule"/> and <see cref="DataProtectionRetentionRule"/>.
        /// </param>
        /// <returns> A new <see cref="Models.RuleBasedBackupPolicy"/> instance for mocking. </returns>
        public static RuleBasedBackupPolicy RuleBasedBackupPolicy(IEnumerable<string> dataSourceTypes = null, IEnumerable<DataProtectionBasePolicyRule> policyRules = null)
        {
            dataSourceTypes ??= new List<string>();
            policyRules ??= new List<DataProtectionBasePolicyRule>();

            return new RuleBasedBackupPolicy(dataSourceTypes?.ToList(), "BackupPolicy", policyRules?.ToList());
        }

        /// <summary> Initializes a new instance of DataProtectionBackupSchedule. </summary>
        /// <param name="repeatingTimeIntervals"> ISO 8601 repeating time interval format. </param>
        /// <param name="timeZone"> Time zone for a schedule. Example: Pacific Standard Time. </param>
        /// <returns> A new <see cref="Models.DataProtectionBackupSchedule"/> instance for mocking. </returns>
        public static DataProtectionBackupSchedule DataProtectionBackupSchedule(IEnumerable<string> repeatingTimeIntervals = null, string timeZone = null)
        {
            repeatingTimeIntervals ??= new List<string>();

            return new DataProtectionBackupSchedule(repeatingTimeIntervals?.ToList(), timeZone);
        }

        /// <summary> Initializes a new instance of CopyOnExpirySetting. </summary>
        /// <returns> A new <see cref="Models.CopyOnExpirySetting"/> instance for mocking. </returns>
        public static CopyOnExpirySetting CopyOnExpirySetting()
        {
            return new CopyOnExpirySetting("CopyOnExpiryOption");
        }

        /// <summary> Initializes a new instance of CustomCopySetting. </summary>
        /// <param name="duration"> Data copied after given timespan. </param>
        /// <returns> A new <see cref="Models.CustomCopySetting"/> instance for mocking. </returns>
        public static CustomCopySetting CustomCopySetting(TimeSpan? duration = null)
        {
            return new CustomCopySetting("CustomCopyOption", duration);
        }

        /// <summary> Initializes a new instance of DataProtectionBackupDay. </summary>
        /// <param name="date"> Date of the month. </param>
        /// <param name="isLast"> Whether Date is last date of month. </param>
        /// <returns> A new <see cref="Models.DataProtectionBackupDay"/> instance for mocking. </returns>
        public static DataProtectionBackupDay DataProtectionBackupDay(int? date = null, bool? isLast = null)
        {
            return new DataProtectionBackupDay(date, isLast);
        }

        /// <summary> Initializes a new instance of BackupFeatureValidationResult. </summary>
        /// <param name="featureType"> backup support feature type. </param>
        /// <param name="features"> Response features. </param>
        /// <returns> A new <see cref="Models.BackupFeatureValidationResult"/> instance for mocking. </returns>
        public static BackupFeatureValidationResult BackupFeatureValidationResult(BackupSupportedFeatureType? featureType = null, IEnumerable<BackupSupportedFeature> features = null)
        {
            features ??= new List<BackupSupportedFeature>();

            return new BackupFeatureValidationResult("FeatureValidationResponse", featureType, features?.ToList());
        }

        /// <summary> Initializes a new instance of BackupSupportedFeature. </summary>
        /// <param name="featureName"> support feature type. </param>
        /// <param name="supportStatus"> feature support status. </param>
        /// <param name="exposureControlledFeatures"> support feature type. </param>
        /// <returns> A new <see cref="Models.BackupSupportedFeature"/> instance for mocking. </returns>
        public static BackupSupportedFeature BackupSupportedFeature(string featureName = null, FeatureSupportStatus? supportStatus = null, IEnumerable<string> exposureControlledFeatures = null)
        {
            exposureControlledFeatures ??= new List<string>();

            return new BackupSupportedFeature(featureName, supportStatus, exposureControlledFeatures?.ToList());
        }

        /// <summary> Initializes a new instance of ImmediateCopySetting. </summary>
        /// <returns> A new <see cref="Models.ImmediateCopySetting"/> instance for mocking. </returns>
        public static ImmediateCopySetting ImmediateCopySetting()
        {
            return new ImmediateCopySetting("ImmediateCopyOption");
        }

        /// <summary> Initializes a new instance of ScheduleBasedBackupCriteria. </summary>
        /// <param name="absoluteCriteria">
        /// it contains absolute values like &quot;AllBackup&quot; / &quot;FirstOfDay&quot; / &quot;FirstOfWeek&quot; / &quot;FirstOfMonth&quot;
        /// and should be part of AbsoluteMarker enum
        /// </param>
        /// <param name="daysOfMonth"> This is day of the month from 1 to 28 other wise last of month. </param>
        /// <param name="daysOfWeek"> It should be Sunday/Monday/T..../Saturday. </param>
        /// <param name="monthsOfYear"> It should be January/February/....../December. </param>
        /// <param name="scheduleTimes"> List of schedule times for backup. </param>
        /// <param name="weeksOfMonth"> It should be First/Second/Third/Fourth/Last. </param>
        /// <returns> A new <see cref="Models.ScheduleBasedBackupCriteria"/> instance for mocking. </returns>
        public static ScheduleBasedBackupCriteria ScheduleBasedBackupCriteria(IEnumerable<BackupAbsoluteMarker> absoluteCriteria = null, IEnumerable<DataProtectionBackupDay> daysOfMonth = null, IEnumerable<DataProtectionBackupDayOfWeek> daysOfWeek = null, IEnumerable<DataProtectionBackupMonth> monthsOfYear = null, IEnumerable<DateTimeOffset> scheduleTimes = null, IEnumerable<DataProtectionBackupWeekNumber> weeksOfMonth = null)
        {
            absoluteCriteria ??= new List<BackupAbsoluteMarker>();
            daysOfMonth ??= new List<DataProtectionBackupDay>();
            daysOfWeek ??= new List<DataProtectionBackupDayOfWeek>();
            monthsOfYear ??= new List<DataProtectionBackupMonth>();
            scheduleTimes ??= new List<DateTimeOffset>();
            weeksOfMonth ??= new List<DataProtectionBackupWeekNumber>();

            return new ScheduleBasedBackupCriteria("ScheduleBasedBackupCriteria", absoluteCriteria?.ToList(), daysOfMonth?.ToList(), daysOfWeek?.ToList(), monthsOfYear?.ToList(), scheduleTimes?.ToList(), weeksOfMonth?.ToList());
        }

        /// <summary> Initializes a new instance of ScheduleBasedBackupTriggerContext. </summary>
        /// <param name="schedule"> Schedule for this backup. </param>
        /// <param name="taggingCriteriaList"> List of tags that can be applicable for given schedule. </param>
        /// <returns> A new <see cref="Models.ScheduleBasedBackupTriggerContext"/> instance for mocking. </returns>
        public static ScheduleBasedBackupTriggerContext ScheduleBasedBackupTriggerContext(DataProtectionBackupSchedule schedule = null, IEnumerable<DataProtectionBackupTaggingCriteria> taggingCriteriaList = null)
        {
            taggingCriteriaList ??= new List<DataProtectionBackupTaggingCriteria>();

            return new ScheduleBasedBackupTriggerContext("ScheduleBasedTriggerContext", schedule, taggingCriteriaList?.ToList());
        }

        /// <summary> Initializes a new instance of DataProtectionBackupTaggingCriteria. </summary>
        /// <param name="criteria">
        /// Criteria which decides whether the tag can be applied to a triggered backup.
        /// Please note <see cref="DataProtectionBackupCriteria"/> is the base class. According to the scenario, a derived class of the base class might need to be assigned here, or this property needs to be casted to one of the possible derived classes.
        /// The available derived classes include <see cref="ScheduleBasedBackupCriteria"/>.
        /// </param>
        /// <param name="isDefault"> Specifies if tag is default. </param>
        /// <param name="taggingPriority"> Retention Tag priority. </param>
        /// <param name="tagInfo"> Retention tag information. </param>
        /// <returns> A new <see cref="Models.DataProtectionBackupTaggingCriteria"/> instance for mocking. </returns>
        public static DataProtectionBackupTaggingCriteria DataProtectionBackupTaggingCriteria(IEnumerable<DataProtectionBackupCriteria> criteria = null, bool isDefault = default, long taggingPriority = default, DataProtectionBackupRetentionTag tagInfo = null)
        {
            criteria ??= new List<DataProtectionBackupCriteria>();

            return new DataProtectionBackupTaggingCriteria(criteria?.ToList(), isDefault, taggingPriority, tagInfo);
        }

        /// <summary> Initializes a new instance of SecretStoreBasedAuthCredentials. </summary>
        /// <param name="secretStoreResource"> Secret store resource. </param>
        /// <returns> A new <see cref="Models.SecretStoreBasedAuthCredentials"/> instance for mocking. </returns>
        public static SecretStoreBasedAuthCredentials SecretStoreBasedAuthCredentials(SecretStoreResourceInfo secretStoreResource = null)
        {
            return new SecretStoreBasedAuthCredentials("SecretStoreBasedAuthCredentials", secretStoreResource);
        }

        /// <summary> Initializes a new instance of SecretStoreResourceInfo. </summary>
        /// <param name="uri"> Uri to get to the resource. </param>
        /// <param name="secretStoreType"> Gets or sets the type of secret store. </param>
        /// <param name="value"> Gets or sets value stored in secret store resource. </param>
        /// <returns> A new <see cref="Models.SecretStoreResourceInfo"/> instance for mocking. </returns>
        public static SecretStoreResourceInfo SecretStoreResourceInfo(Uri uri = null, SecretStoreType secretStoreType = default, string value = null)
        {
            return new SecretStoreResourceInfo(uri, secretStoreType, value);
        }
    }
}
