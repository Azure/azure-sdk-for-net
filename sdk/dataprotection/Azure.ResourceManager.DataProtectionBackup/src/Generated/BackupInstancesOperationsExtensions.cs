// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.ResourceManager.DataProtectionBackup
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for BackupInstancesOperations.
    /// </summary>
    public static partial class BackupInstancesOperationsExtensions
    {
            /// <summary>
            /// Gets a backup instances belonging to a backup vault
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            public static IPage<BackupInstanceResource> List(this IBackupInstancesOperations operations, string resourceGroupName, string vaultName)
            {
                return operations.ListAsync(resourceGroupName, vaultName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a backup instances belonging to a backup vault
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<BackupInstanceResource>> ListAsync(this IBackupInstancesOperations operations, string resourceGroupName, string vaultName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, vaultName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a backup instance with name in a backup vault
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            /// <param name='backupInstanceName'>
            /// The name of the backup instance
            /// </param>
            public static BackupInstanceResource Get(this IBackupInstancesOperations operations, string resourceGroupName, string vaultName, string backupInstanceName)
            {
                return operations.GetAsync(resourceGroupName, vaultName, backupInstanceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a backup instance with name in a backup vault
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            /// <param name='backupInstanceName'>
            /// The name of the backup instance
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupInstanceResource> GetAsync(this IBackupInstancesOperations operations, string resourceGroupName, string vaultName, string backupInstanceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, vaultName, backupInstanceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a backup instance in a backup vault
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            /// <param name='backupInstanceName'>
            /// The name of the backup instance
            /// </param>
            /// <param name='parameters'>
            /// Request body for operation
            /// </param>
            public static BackupInstanceResource CreateOrUpdate(this IBackupInstancesOperations operations, string resourceGroupName, string vaultName, string backupInstanceName, BackupInstanceResource parameters)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, vaultName, backupInstanceName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a backup instance in a backup vault
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            /// <param name='backupInstanceName'>
            /// The name of the backup instance
            /// </param>
            /// <param name='parameters'>
            /// Request body for operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupInstanceResource> CreateOrUpdateAsync(this IBackupInstancesOperations operations, string resourceGroupName, string vaultName, string backupInstanceName, BackupInstanceResource parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, vaultName, backupInstanceName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a backup instance in a backup vault
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            /// <param name='backupInstanceName'>
            /// The name of the backup instance
            /// </param>
            public static BackupInstancesDeleteHeaders Delete(this IBackupInstancesOperations operations, string resourceGroupName, string vaultName, string backupInstanceName)
            {
                return operations.DeleteAsync(resourceGroupName, vaultName, backupInstanceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a backup instance in a backup vault
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            /// <param name='backupInstanceName'>
            /// The name of the backup instance
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupInstancesDeleteHeaders> DeleteAsync(this IBackupInstancesOperations operations, string resourceGroupName, string vaultName, string backupInstanceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, vaultName, backupInstanceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Trigger adhoc backup
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            /// <param name='backupInstanceName'>
            /// The name of the backup instance
            /// </param>
            /// <param name='backupRuleOptions'>
            /// Name for the Rule of the Policy which needs to be applied for this backup
            /// </param>
            public static OperationJobExtendedInfo AdhocBackup(this IBackupInstancesOperations operations, string resourceGroupName, string vaultName, string backupInstanceName, AdHocBackupRuleOptions backupRuleOptions)
            {
                return operations.AdhocBackupAsync(resourceGroupName, vaultName, backupInstanceName, backupRuleOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Trigger adhoc backup
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            /// <param name='backupInstanceName'>
            /// The name of the backup instance
            /// </param>
            /// <param name='backupRuleOptions'>
            /// Name for the Rule of the Policy which needs to be applied for this backup
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationJobExtendedInfo> AdhocBackupAsync(this IBackupInstancesOperations operations, string resourceGroupName, string vaultName, string backupInstanceName, AdHocBackupRuleOptions backupRuleOptions, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AdhocBackupWithHttpMessagesAsync(resourceGroupName, vaultName, backupInstanceName, backupRuleOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Validate whether adhoc backup will be successful or not
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            /// <param name='backupInstance'>
            /// </param>
            public static OperationJobExtendedInfo ValidateForBackup(this IBackupInstancesOperations operations, string resourceGroupName, string vaultName, BackupInstance backupInstance)
            {
                return operations.ValidateForBackupAsync(resourceGroupName, vaultName, backupInstance).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Validate whether adhoc backup will be successful or not
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            /// <param name='backupInstance'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationJobExtendedInfo> ValidateForBackupAsync(this IBackupInstancesOperations operations, string resourceGroupName, string vaultName, BackupInstance backupInstance, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ValidateForBackupWithHttpMessagesAsync(resourceGroupName, vaultName, backupInstance, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get result of backup instance creation operation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            /// <param name='backupInstanceName'>
            /// </param>
            /// <param name='operationId'>
            /// </param>
            public static BackupInstanceResource GetBackupInstanceOperationResult(this IBackupInstancesOperations operations, string resourceGroupName, string vaultName, string backupInstanceName, string operationId)
            {
                return operations.GetBackupInstanceOperationResultAsync(resourceGroupName, vaultName, backupInstanceName, operationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get result of backup instance creation operation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            /// <param name='backupInstanceName'>
            /// </param>
            /// <param name='operationId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupInstanceResource> GetBackupInstanceOperationResultAsync(this IBackupInstancesOperations operations, string resourceGroupName, string vaultName, string backupInstanceName, string operationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBackupInstanceOperationResultWithHttpMessagesAsync(resourceGroupName, vaultName, backupInstanceName, operationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// rehydrate recovery point for restore for a BackupInstance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            /// <param name='parameters'>
            /// Request body for operation
            /// </param>
            /// <param name='backupInstanceName'>
            /// </param>
            public static BackupInstancesTriggerRehydrateHeaders TriggerRehydrate(this IBackupInstancesOperations operations, string resourceGroupName, string vaultName, AzureBackupRehydrationRequest parameters, string backupInstanceName)
            {
                return operations.TriggerRehydrateAsync(resourceGroupName, vaultName, parameters, backupInstanceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// rehydrate recovery point for restore for a BackupInstance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            /// <param name='parameters'>
            /// Request body for operation
            /// </param>
            /// <param name='backupInstanceName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupInstancesTriggerRehydrateHeaders> TriggerRehydrateAsync(this IBackupInstancesOperations operations, string resourceGroupName, string vaultName, AzureBackupRehydrationRequest parameters, string backupInstanceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.TriggerRehydrateWithHttpMessagesAsync(resourceGroupName, vaultName, parameters, backupInstanceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Triggers restore for a BackupInstance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            /// <param name='backupInstanceName'>
            /// The name of the backup instance
            /// </param>
            /// <param name='parameters'>
            /// Request body for operation
            /// </param>
            public static OperationJobExtendedInfo TriggerRestore(this IBackupInstancesOperations operations, string resourceGroupName, string vaultName, string backupInstanceName, AzureBackupRestoreRequest parameters)
            {
                return operations.TriggerRestoreAsync(resourceGroupName, vaultName, backupInstanceName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Triggers restore for a BackupInstance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            /// <param name='backupInstanceName'>
            /// The name of the backup instance
            /// </param>
            /// <param name='parameters'>
            /// Request body for operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationJobExtendedInfo> TriggerRestoreAsync(this IBackupInstancesOperations operations, string resourceGroupName, string vaultName, string backupInstanceName, AzureBackupRestoreRequest parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.TriggerRestoreWithHttpMessagesAsync(resourceGroupName, vaultName, backupInstanceName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// This operation will resume backups for backup instance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            /// <param name='backupInstanceName'>
            /// </param>
            public static BackupInstancesResumeBackupsHeaders ResumeBackups(this IBackupInstancesOperations operations, string resourceGroupName, string vaultName, string backupInstanceName)
            {
                return operations.ResumeBackupsAsync(resourceGroupName, vaultName, backupInstanceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// This operation will resume backups for backup instance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            /// <param name='backupInstanceName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupInstancesResumeBackupsHeaders> ResumeBackupsAsync(this IBackupInstancesOperations operations, string resourceGroupName, string vaultName, string backupInstanceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ResumeBackupsWithHttpMessagesAsync(resourceGroupName, vaultName, backupInstanceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// This operation will resume protection for a stopped backup instance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            /// <param name='backupInstanceName'>
            /// </param>
            public static BackupInstancesResumeProtectionHeaders ResumeProtection(this IBackupInstancesOperations operations, string resourceGroupName, string vaultName, string backupInstanceName)
            {
                return operations.ResumeProtectionAsync(resourceGroupName, vaultName, backupInstanceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// This operation will resume protection for a stopped backup instance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            /// <param name='backupInstanceName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupInstancesResumeProtectionHeaders> ResumeProtectionAsync(this IBackupInstancesOperations operations, string resourceGroupName, string vaultName, string backupInstanceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ResumeProtectionWithHttpMessagesAsync(resourceGroupName, vaultName, backupInstanceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// This operation will stop protection of a backup instance and data will be
            /// held forever
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            /// <param name='backupInstanceName'>
            /// </param>
            public static BackupInstancesStopProtectionHeaders StopProtection(this IBackupInstancesOperations operations, string resourceGroupName, string vaultName, string backupInstanceName)
            {
                return operations.StopProtectionAsync(resourceGroupName, vaultName, backupInstanceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// This operation will stop protection of a backup instance and data will be
            /// held forever
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            /// <param name='backupInstanceName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupInstancesStopProtectionHeaders> StopProtectionAsync(this IBackupInstancesOperations operations, string resourceGroupName, string vaultName, string backupInstanceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StopProtectionWithHttpMessagesAsync(resourceGroupName, vaultName, backupInstanceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// This operation will stop backup for a backup instance and retains the
            /// backup data as per the policy (except latest Recovery point, which will be
            /// retained forever)
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            /// <param name='backupInstanceName'>
            /// </param>
            public static BackupInstancesSuspendBackupsHeaders SuspendBackups(this IBackupInstancesOperations operations, string resourceGroupName, string vaultName, string backupInstanceName)
            {
                return operations.SuspendBackupsAsync(resourceGroupName, vaultName, backupInstanceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// This operation will stop backup for a backup instance and retains the
            /// backup data as per the policy (except latest Recovery point, which will be
            /// retained forever)
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            /// <param name='backupInstanceName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupInstancesSuspendBackupsHeaders> SuspendBackupsAsync(this IBackupInstancesOperations operations, string resourceGroupName, string vaultName, string backupInstanceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SuspendBackupsWithHttpMessagesAsync(resourceGroupName, vaultName, backupInstanceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Sync backup instance again in case of failure
            /// This action will retry last failed operation and will bring backup instance
            /// to valid state
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            /// <param name='backupInstanceName'>
            /// </param>
            /// <param name='syncType'>
            /// Field indicating sync type e.g. to sync only in case of failure or in all
            /// cases. Possible values include: 'Default', 'ForceResync'
            /// </param>
            public static BackupInstancesSyncBackupInstanceHeaders SyncBackupInstance(this IBackupInstancesOperations operations, string resourceGroupName, string vaultName, string backupInstanceName, string syncType = default(string))
            {
                return operations.SyncBackupInstanceAsync(resourceGroupName, vaultName, backupInstanceName, syncType).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sync backup instance again in case of failure
            /// This action will retry last failed operation and will bring backup instance
            /// to valid state
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            /// <param name='backupInstanceName'>
            /// </param>
            /// <param name='syncType'>
            /// Field indicating sync type e.g. to sync only in case of failure or in all
            /// cases. Possible values include: 'Default', 'ForceResync'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupInstancesSyncBackupInstanceHeaders> SyncBackupInstanceAsync(this IBackupInstancesOperations operations, string resourceGroupName, string vaultName, string backupInstanceName, string syncType = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SyncBackupInstanceWithHttpMessagesAsync(resourceGroupName, vaultName, backupInstanceName, syncType, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Validates if Restore can be triggered for a DataSource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            /// <param name='backupInstanceName'>
            /// The name of the backup instance
            /// </param>
            /// <param name='restoreRequestObject'>
            /// Gets or sets the restore request object.
            /// </param>
            public static OperationJobExtendedInfo ValidateForRestore(this IBackupInstancesOperations operations, string resourceGroupName, string vaultName, string backupInstanceName, AzureBackupRestoreRequest restoreRequestObject)
            {
                return operations.ValidateForRestoreAsync(resourceGroupName, vaultName, backupInstanceName, restoreRequestObject).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Validates if Restore can be triggered for a DataSource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            /// <param name='backupInstanceName'>
            /// The name of the backup instance
            /// </param>
            /// <param name='restoreRequestObject'>
            /// Gets or sets the restore request object.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationJobExtendedInfo> ValidateForRestoreAsync(this IBackupInstancesOperations operations, string resourceGroupName, string vaultName, string backupInstanceName, AzureBackupRestoreRequest restoreRequestObject, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ValidateForRestoreWithHttpMessagesAsync(resourceGroupName, vaultName, backupInstanceName, restoreRequestObject, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a backup instance in a backup vault
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            /// <param name='backupInstanceName'>
            /// The name of the backup instance
            /// </param>
            /// <param name='parameters'>
            /// Request body for operation
            /// </param>
            public static BackupInstanceResource BeginCreateOrUpdate(this IBackupInstancesOperations operations, string resourceGroupName, string vaultName, string backupInstanceName, BackupInstanceResource parameters)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, vaultName, backupInstanceName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a backup instance in a backup vault
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            /// <param name='backupInstanceName'>
            /// The name of the backup instance
            /// </param>
            /// <param name='parameters'>
            /// Request body for operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupInstanceResource> BeginCreateOrUpdateAsync(this IBackupInstancesOperations operations, string resourceGroupName, string vaultName, string backupInstanceName, BackupInstanceResource parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, vaultName, backupInstanceName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a backup instance in a backup vault
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            /// <param name='backupInstanceName'>
            /// The name of the backup instance
            /// </param>
            public static BackupInstancesDeleteHeaders BeginDelete(this IBackupInstancesOperations operations, string resourceGroupName, string vaultName, string backupInstanceName)
            {
                return operations.BeginDeleteAsync(resourceGroupName, vaultName, backupInstanceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a backup instance in a backup vault
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            /// <param name='backupInstanceName'>
            /// The name of the backup instance
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupInstancesDeleteHeaders> BeginDeleteAsync(this IBackupInstancesOperations operations, string resourceGroupName, string vaultName, string backupInstanceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, vaultName, backupInstanceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Trigger adhoc backup
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            /// <param name='backupInstanceName'>
            /// The name of the backup instance
            /// </param>
            /// <param name='backupRuleOptions'>
            /// Name for the Rule of the Policy which needs to be applied for this backup
            /// </param>
            public static OperationJobExtendedInfo BeginAdhocBackup(this IBackupInstancesOperations operations, string resourceGroupName, string vaultName, string backupInstanceName, AdHocBackupRuleOptions backupRuleOptions)
            {
                return operations.BeginAdhocBackupAsync(resourceGroupName, vaultName, backupInstanceName, backupRuleOptions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Trigger adhoc backup
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            /// <param name='backupInstanceName'>
            /// The name of the backup instance
            /// </param>
            /// <param name='backupRuleOptions'>
            /// Name for the Rule of the Policy which needs to be applied for this backup
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationJobExtendedInfo> BeginAdhocBackupAsync(this IBackupInstancesOperations operations, string resourceGroupName, string vaultName, string backupInstanceName, AdHocBackupRuleOptions backupRuleOptions, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginAdhocBackupWithHttpMessagesAsync(resourceGroupName, vaultName, backupInstanceName, backupRuleOptions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Validate whether adhoc backup will be successful or not
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            /// <param name='backupInstance'>
            /// </param>
            public static OperationJobExtendedInfo BeginValidateForBackup(this IBackupInstancesOperations operations, string resourceGroupName, string vaultName, BackupInstance backupInstance)
            {
                return operations.BeginValidateForBackupAsync(resourceGroupName, vaultName, backupInstance).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Validate whether adhoc backup will be successful or not
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            /// <param name='backupInstance'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationJobExtendedInfo> BeginValidateForBackupAsync(this IBackupInstancesOperations operations, string resourceGroupName, string vaultName, BackupInstance backupInstance, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginValidateForBackupWithHttpMessagesAsync(resourceGroupName, vaultName, backupInstance, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// rehydrate recovery point for restore for a BackupInstance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            /// <param name='parameters'>
            /// Request body for operation
            /// </param>
            /// <param name='backupInstanceName'>
            /// </param>
            public static BackupInstancesTriggerRehydrateHeaders BeginTriggerRehydrate(this IBackupInstancesOperations operations, string resourceGroupName, string vaultName, AzureBackupRehydrationRequest parameters, string backupInstanceName)
            {
                return operations.BeginTriggerRehydrateAsync(resourceGroupName, vaultName, parameters, backupInstanceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// rehydrate recovery point for restore for a BackupInstance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            /// <param name='parameters'>
            /// Request body for operation
            /// </param>
            /// <param name='backupInstanceName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupInstancesTriggerRehydrateHeaders> BeginTriggerRehydrateAsync(this IBackupInstancesOperations operations, string resourceGroupName, string vaultName, AzureBackupRehydrationRequest parameters, string backupInstanceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginTriggerRehydrateWithHttpMessagesAsync(resourceGroupName, vaultName, parameters, backupInstanceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Triggers restore for a BackupInstance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            /// <param name='backupInstanceName'>
            /// The name of the backup instance
            /// </param>
            /// <param name='parameters'>
            /// Request body for operation
            /// </param>
            public static OperationJobExtendedInfo BeginTriggerRestore(this IBackupInstancesOperations operations, string resourceGroupName, string vaultName, string backupInstanceName, AzureBackupRestoreRequest parameters)
            {
                return operations.BeginTriggerRestoreAsync(resourceGroupName, vaultName, backupInstanceName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Triggers restore for a BackupInstance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            /// <param name='backupInstanceName'>
            /// The name of the backup instance
            /// </param>
            /// <param name='parameters'>
            /// Request body for operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationJobExtendedInfo> BeginTriggerRestoreAsync(this IBackupInstancesOperations operations, string resourceGroupName, string vaultName, string backupInstanceName, AzureBackupRestoreRequest parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginTriggerRestoreWithHttpMessagesAsync(resourceGroupName, vaultName, backupInstanceName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// This operation will resume backups for backup instance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            /// <param name='backupInstanceName'>
            /// </param>
            public static BackupInstancesResumeBackupsHeaders BeginResumeBackups(this IBackupInstancesOperations operations, string resourceGroupName, string vaultName, string backupInstanceName)
            {
                return operations.BeginResumeBackupsAsync(resourceGroupName, vaultName, backupInstanceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// This operation will resume backups for backup instance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            /// <param name='backupInstanceName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupInstancesResumeBackupsHeaders> BeginResumeBackupsAsync(this IBackupInstancesOperations operations, string resourceGroupName, string vaultName, string backupInstanceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginResumeBackupsWithHttpMessagesAsync(resourceGroupName, vaultName, backupInstanceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// This operation will resume protection for a stopped backup instance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            /// <param name='backupInstanceName'>
            /// </param>
            public static BackupInstancesResumeProtectionHeaders BeginResumeProtection(this IBackupInstancesOperations operations, string resourceGroupName, string vaultName, string backupInstanceName)
            {
                return operations.BeginResumeProtectionAsync(resourceGroupName, vaultName, backupInstanceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// This operation will resume protection for a stopped backup instance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            /// <param name='backupInstanceName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupInstancesResumeProtectionHeaders> BeginResumeProtectionAsync(this IBackupInstancesOperations operations, string resourceGroupName, string vaultName, string backupInstanceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginResumeProtectionWithHttpMessagesAsync(resourceGroupName, vaultName, backupInstanceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// This operation will stop protection of a backup instance and data will be
            /// held forever
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            /// <param name='backupInstanceName'>
            /// </param>
            public static BackupInstancesStopProtectionHeaders BeginStopProtection(this IBackupInstancesOperations operations, string resourceGroupName, string vaultName, string backupInstanceName)
            {
                return operations.BeginStopProtectionAsync(resourceGroupName, vaultName, backupInstanceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// This operation will stop protection of a backup instance and data will be
            /// held forever
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            /// <param name='backupInstanceName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupInstancesStopProtectionHeaders> BeginStopProtectionAsync(this IBackupInstancesOperations operations, string resourceGroupName, string vaultName, string backupInstanceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginStopProtectionWithHttpMessagesAsync(resourceGroupName, vaultName, backupInstanceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// This operation will stop backup for a backup instance and retains the
            /// backup data as per the policy (except latest Recovery point, which will be
            /// retained forever)
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            /// <param name='backupInstanceName'>
            /// </param>
            public static BackupInstancesSuspendBackupsHeaders BeginSuspendBackups(this IBackupInstancesOperations operations, string resourceGroupName, string vaultName, string backupInstanceName)
            {
                return operations.BeginSuspendBackupsAsync(resourceGroupName, vaultName, backupInstanceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// This operation will stop backup for a backup instance and retains the
            /// backup data as per the policy (except latest Recovery point, which will be
            /// retained forever)
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            /// <param name='backupInstanceName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupInstancesSuspendBackupsHeaders> BeginSuspendBackupsAsync(this IBackupInstancesOperations operations, string resourceGroupName, string vaultName, string backupInstanceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginSuspendBackupsWithHttpMessagesAsync(resourceGroupName, vaultName, backupInstanceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Sync backup instance again in case of failure
            /// This action will retry last failed operation and will bring backup instance
            /// to valid state
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            /// <param name='backupInstanceName'>
            /// </param>
            /// <param name='syncType'>
            /// Field indicating sync type e.g. to sync only in case of failure or in all
            /// cases. Possible values include: 'Default', 'ForceResync'
            /// </param>
            public static BackupInstancesSyncBackupInstanceHeaders BeginSyncBackupInstance(this IBackupInstancesOperations operations, string resourceGroupName, string vaultName, string backupInstanceName, string syncType = default(string))
            {
                return operations.BeginSyncBackupInstanceAsync(resourceGroupName, vaultName, backupInstanceName, syncType).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sync backup instance again in case of failure
            /// This action will retry last failed operation and will bring backup instance
            /// to valid state
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            /// <param name='backupInstanceName'>
            /// </param>
            /// <param name='syncType'>
            /// Field indicating sync type e.g. to sync only in case of failure or in all
            /// cases. Possible values include: 'Default', 'ForceResync'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupInstancesSyncBackupInstanceHeaders> BeginSyncBackupInstanceAsync(this IBackupInstancesOperations operations, string resourceGroupName, string vaultName, string backupInstanceName, string syncType = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginSyncBackupInstanceWithHttpMessagesAsync(resourceGroupName, vaultName, backupInstanceName, syncType, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Validates if Restore can be triggered for a DataSource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            /// <param name='backupInstanceName'>
            /// The name of the backup instance
            /// </param>
            /// <param name='restoreRequestObject'>
            /// Gets or sets the restore request object.
            /// </param>
            public static OperationJobExtendedInfo BeginValidateForRestore(this IBackupInstancesOperations operations, string resourceGroupName, string vaultName, string backupInstanceName, AzureBackupRestoreRequest restoreRequestObject)
            {
                return operations.BeginValidateForRestoreAsync(resourceGroupName, vaultName, backupInstanceName, restoreRequestObject).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Validates if Restore can be triggered for a DataSource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            /// <param name='backupInstanceName'>
            /// The name of the backup instance
            /// </param>
            /// <param name='restoreRequestObject'>
            /// Gets or sets the restore request object.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationJobExtendedInfo> BeginValidateForRestoreAsync(this IBackupInstancesOperations operations, string resourceGroupName, string vaultName, string backupInstanceName, AzureBackupRestoreRequest restoreRequestObject, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginValidateForRestoreWithHttpMessagesAsync(resourceGroupName, vaultName, backupInstanceName, restoreRequestObject, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a backup instances belonging to a backup vault
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<BackupInstanceResource> ListNext(this IBackupInstancesOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a backup instances belonging to a backup vault
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<BackupInstanceResource>> ListNextAsync(this IBackupInstancesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
