// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace Azure.ResourceManager.DataProtectionBackup
{
    /// <summary>
    /// A class representing a collection of <see cref="AzureBackupRecoveryPointResource" /> and their operations.
    /// Each <see cref="AzureBackupRecoveryPointResource" /> in the collection will belong to the same instance of <see cref="BackupInstanceResource" />.
    /// To get an <see cref="AzureBackupRecoveryPointResourceCollection" /> instance call the GetAzureBackupRecoveryPointResources method from an instance of <see cref="BackupInstanceResource" />.
    /// </summary>
    public partial class AzureBackupRecoveryPointResourceCollection : ArmCollection, IEnumerable<AzureBackupRecoveryPointResource>, IAsyncEnumerable<AzureBackupRecoveryPointResource>
    {
        private readonly ClientDiagnostics _azureBackupRecoveryPointResourceRecoveryPointsClientDiagnostics;
        private readonly RecoveryPointsRestOperations _azureBackupRecoveryPointResourceRecoveryPointsRestClient;

        /// <summary> Initializes a new instance of the <see cref="AzureBackupRecoveryPointResourceCollection"/> class for mocking. </summary>
        protected AzureBackupRecoveryPointResourceCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="AzureBackupRecoveryPointResourceCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal AzureBackupRecoveryPointResourceCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _azureBackupRecoveryPointResourceRecoveryPointsClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.DataProtectionBackup", AzureBackupRecoveryPointResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(AzureBackupRecoveryPointResource.ResourceType, out string azureBackupRecoveryPointResourceRecoveryPointsApiVersion);
            _azureBackupRecoveryPointResourceRecoveryPointsRestClient = new RecoveryPointsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, azureBackupRecoveryPointResourceRecoveryPointsApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != BackupInstanceResource.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, BackupInstanceResource.ResourceType), nameof(id));
        }

        /// <summary>
        /// Gets a Recovery Point using recoveryPointId for a Datasource.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/backupVaults/{vaultName}/backupInstances/{backupInstanceName}/recoveryPoints/{recoveryPointId}
        /// Operation Id: RecoveryPoints_Get
        /// </summary>
        /// <param name="recoveryPointId"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="recoveryPointId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="recoveryPointId"/> is null. </exception>
        public virtual async Task<Response<AzureBackupRecoveryPointResource>> GetAsync(string recoveryPointId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(recoveryPointId, nameof(recoveryPointId));

            using var scope = _azureBackupRecoveryPointResourceRecoveryPointsClientDiagnostics.CreateScope("AzureBackupRecoveryPointResourceCollection.Get");
            scope.Start();
            try
            {
                var response = await _azureBackupRecoveryPointResourceRecoveryPointsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, recoveryPointId, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new AzureBackupRecoveryPointResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets a Recovery Point using recoveryPointId for a Datasource.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/backupVaults/{vaultName}/backupInstances/{backupInstanceName}/recoveryPoints/{recoveryPointId}
        /// Operation Id: RecoveryPoints_Get
        /// </summary>
        /// <param name="recoveryPointId"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="recoveryPointId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="recoveryPointId"/> is null. </exception>
        public virtual Response<AzureBackupRecoveryPointResource> Get(string recoveryPointId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(recoveryPointId, nameof(recoveryPointId));

            using var scope = _azureBackupRecoveryPointResourceRecoveryPointsClientDiagnostics.CreateScope("AzureBackupRecoveryPointResourceCollection.Get");
            scope.Start();
            try
            {
                var response = _azureBackupRecoveryPointResourceRecoveryPointsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, recoveryPointId, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new AzureBackupRecoveryPointResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Returns a list of Recovery Points for a DataSource in a vault.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/backupVaults/{vaultName}/backupInstances/{backupInstanceName}/recoveryPoints
        /// Operation Id: RecoveryPoints_List
        /// </summary>
        /// <param name="filter"> OData filter options. </param>
        /// <param name="skipToken"> skipToken Filter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AzureBackupRecoveryPointResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<AzureBackupRecoveryPointResource> GetAllAsync(string filter = null, string skipToken = null, CancellationToken cancellationToken = default)
        {
            async Task<Page<AzureBackupRecoveryPointResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _azureBackupRecoveryPointResourceRecoveryPointsClientDiagnostics.CreateScope("AzureBackupRecoveryPointResourceCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _azureBackupRecoveryPointResourceRecoveryPointsRestClient.ListAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, filter, skipToken, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new AzureBackupRecoveryPointResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<AzureBackupRecoveryPointResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _azureBackupRecoveryPointResourceRecoveryPointsClientDiagnostics.CreateScope("AzureBackupRecoveryPointResourceCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _azureBackupRecoveryPointResourceRecoveryPointsRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, filter, skipToken, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new AzureBackupRecoveryPointResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Returns a list of Recovery Points for a DataSource in a vault.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/backupVaults/{vaultName}/backupInstances/{backupInstanceName}/recoveryPoints
        /// Operation Id: RecoveryPoints_List
        /// </summary>
        /// <param name="filter"> OData filter options. </param>
        /// <param name="skipToken"> skipToken Filter. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AzureBackupRecoveryPointResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<AzureBackupRecoveryPointResource> GetAll(string filter = null, string skipToken = null, CancellationToken cancellationToken = default)
        {
            Page<AzureBackupRecoveryPointResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _azureBackupRecoveryPointResourceRecoveryPointsClientDiagnostics.CreateScope("AzureBackupRecoveryPointResourceCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _azureBackupRecoveryPointResourceRecoveryPointsRestClient.List(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, filter, skipToken, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new AzureBackupRecoveryPointResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<AzureBackupRecoveryPointResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _azureBackupRecoveryPointResourceRecoveryPointsClientDiagnostics.CreateScope("AzureBackupRecoveryPointResourceCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _azureBackupRecoveryPointResourceRecoveryPointsRestClient.ListNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, filter, skipToken, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new AzureBackupRecoveryPointResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/backupVaults/{vaultName}/backupInstances/{backupInstanceName}/recoveryPoints/{recoveryPointId}
        /// Operation Id: RecoveryPoints_Get
        /// </summary>
        /// <param name="recoveryPointId"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="recoveryPointId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="recoveryPointId"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string recoveryPointId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(recoveryPointId, nameof(recoveryPointId));

            using var scope = _azureBackupRecoveryPointResourceRecoveryPointsClientDiagnostics.CreateScope("AzureBackupRecoveryPointResourceCollection.Exists");
            scope.Start();
            try
            {
                var response = await _azureBackupRecoveryPointResourceRecoveryPointsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, recoveryPointId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/backupVaults/{vaultName}/backupInstances/{backupInstanceName}/recoveryPoints/{recoveryPointId}
        /// Operation Id: RecoveryPoints_Get
        /// </summary>
        /// <param name="recoveryPointId"> The String to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="recoveryPointId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="recoveryPointId"/> is null. </exception>
        public virtual Response<bool> Exists(string recoveryPointId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(recoveryPointId, nameof(recoveryPointId));

            using var scope = _azureBackupRecoveryPointResourceRecoveryPointsClientDiagnostics.CreateScope("AzureBackupRecoveryPointResourceCollection.Exists");
            scope.Start();
            try
            {
                var response = _azureBackupRecoveryPointResourceRecoveryPointsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, recoveryPointId, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<AzureBackupRecoveryPointResource> IEnumerable<AzureBackupRecoveryPointResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<AzureBackupRecoveryPointResource> IAsyncEnumerable<AzureBackupRecoveryPointResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
