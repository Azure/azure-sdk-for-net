// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.ResourceManager.DataProtectionBackup
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for DppResourceGuardProxyOperations.
    /// </summary>
    public static partial class DppResourceGuardProxyOperationsExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            public static IPage<ResourceGuardProxyBaseResource> List(this IDppResourceGuardProxyOperations operations, string resourceGroupName, string vaultName)
            {
                return operations.ListAsync(resourceGroupName, vaultName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourceGuardProxyBaseResource>> ListAsync(this IDppResourceGuardProxyOperations operations, string resourceGroupName, string vaultName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, vaultName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            /// <param name='resourceGuardProxyName'>
            /// </param>
            public static ResourceGuardProxyBaseResource Get(this IDppResourceGuardProxyOperations operations, string resourceGroupName, string vaultName, string resourceGuardProxyName)
            {
                return operations.GetAsync(resourceGroupName, vaultName, resourceGuardProxyName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            /// <param name='resourceGuardProxyName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceGuardProxyBaseResource> GetAsync(this IDppResourceGuardProxyOperations operations, string resourceGroupName, string vaultName, string resourceGuardProxyName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, vaultName, resourceGuardProxyName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            /// <param name='resourceGuardProxyName'>
            /// </param>
            /// <param name='parameters'>
            /// Request body for operation
            /// </param>
            public static ResourceGuardProxyBaseResource Put(this IDppResourceGuardProxyOperations operations, string resourceGroupName, string vaultName, string resourceGuardProxyName, ResourceGuardProxyBaseResource parameters)
            {
                return operations.PutAsync(resourceGroupName, vaultName, resourceGuardProxyName, parameters).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            /// <param name='resourceGuardProxyName'>
            /// </param>
            /// <param name='parameters'>
            /// Request body for operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceGuardProxyBaseResource> PutAsync(this IDppResourceGuardProxyOperations operations, string resourceGroupName, string vaultName, string resourceGuardProxyName, ResourceGuardProxyBaseResource parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutWithHttpMessagesAsync(resourceGroupName, vaultName, resourceGuardProxyName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            /// <param name='resourceGuardProxyName'>
            /// </param>
            public static void Delete(this IDppResourceGuardProxyOperations operations, string resourceGroupName, string vaultName, string resourceGuardProxyName)
            {
                operations.DeleteAsync(resourceGroupName, vaultName, resourceGuardProxyName).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            /// <param name='resourceGuardProxyName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IDppResourceGuardProxyOperations operations, string resourceGroupName, string vaultName, string resourceGuardProxyName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, vaultName, resourceGuardProxyName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            /// <param name='resourceGuardProxyName'>
            /// </param>
            /// <param name='parameters'>
            /// Request body for operation
            /// </param>
            public static UnlockDeleteResponse UnlockDelete(this IDppResourceGuardProxyOperations operations, string resourceGroupName, string vaultName, string resourceGuardProxyName, UnlockDeleteRequest parameters)
            {
                return operations.UnlockDeleteAsync(resourceGroupName, vaultName, resourceGuardProxyName, parameters).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            /// <param name='resourceGuardProxyName'>
            /// </param>
            /// <param name='parameters'>
            /// Request body for operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UnlockDeleteResponse> UnlockDeleteAsync(this IDppResourceGuardProxyOperations operations, string resourceGroupName, string vaultName, string resourceGuardProxyName, UnlockDeleteRequest parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UnlockDeleteWithHttpMessagesAsync(resourceGroupName, vaultName, resourceGuardProxyName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ResourceGuardProxyBaseResource> ListNext(this IDppResourceGuardProxyOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourceGuardProxyBaseResource>> ListNextAsync(this IDppResourceGuardProxyOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
