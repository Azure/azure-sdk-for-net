// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.DataProtectionBackup.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.DataProtectionBackup
{
    /// <summary> A class to add extension methods to Azure.ResourceManager.DataProtectionBackup. </summary>
    public static partial class DataProtectionBackupExtensions
    {
        private static SubscriptionResourceExtensionClient GetExtensionClient(SubscriptionResource subscriptionResource)
        {
            return subscriptionResource.GetCachedClient((client) =>
            {
                return new SubscriptionResourceExtensionClient(client, subscriptionResource.Id);
            }
            );
        }

        /// <summary>
        /// Returns resource collection belonging to a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DataProtection/backupVaults
        /// Operation Id: BackupVaults_GetInSubscription
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="BackupVaultResource" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<BackupVaultResource> GetBackupVaultResourcesAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetBackupVaultResourcesAsync(cancellationToken);
        }

        /// <summary>
        /// Returns resource collection belonging to a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DataProtection/backupVaults
        /// Operation Id: BackupVaults_GetInSubscription
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="BackupVaultResource" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<BackupVaultResource> GetBackupVaultResources(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetBackupVaultResources(cancellationToken);
        }

        /// <summary>
        /// Validates if a feature is supported
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DataProtection/locations/{location}/checkFeatureSupport
        /// Operation Id: DataProtection_CheckFeatureSupport
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="location"> The String to use. </param>
        /// <param name="featureValidationRequestBase"> Feature support request object. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="featureValidationRequestBase"/> is null. </exception>
        public static async Task<Response<FeatureValidationResponseBase>> CheckFeatureSupportDataProtectionAsync(this SubscriptionResource subscriptionResource, AzureLocation location, FeatureValidationRequestBase featureValidationRequestBase, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(featureValidationRequestBase, nameof(featureValidationRequestBase));

            return await GetExtensionClient(subscriptionResource).CheckFeatureSupportDataProtectionAsync(location, featureValidationRequestBase, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Validates if a feature is supported
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DataProtection/locations/{location}/checkFeatureSupport
        /// Operation Id: DataProtection_CheckFeatureSupport
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="location"> The String to use. </param>
        /// <param name="featureValidationRequestBase"> Feature support request object. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="featureValidationRequestBase"/> is null. </exception>
        public static Response<FeatureValidationResponseBase> CheckFeatureSupportDataProtection(this SubscriptionResource subscriptionResource, AzureLocation location, FeatureValidationRequestBase featureValidationRequestBase, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(featureValidationRequestBase, nameof(featureValidationRequestBase));

            return GetExtensionClient(subscriptionResource).CheckFeatureSupportDataProtection(location, featureValidationRequestBase, cancellationToken);
        }

        /// <summary>
        /// Returns ResourceGuards collection belonging to a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DataProtection/resourceGuards
        /// Operation Id: ResourceGuards_GetResourcesInSubscription
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ResourceGuardResource" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<ResourceGuardResource> GetResourceGuardResourcesAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetResourceGuardResourcesAsync(cancellationToken);
        }

        /// <summary>
        /// Returns ResourceGuards collection belonging to a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DataProtection/resourceGuards
        /// Operation Id: ResourceGuards_GetResourcesInSubscription
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ResourceGuardResource" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<ResourceGuardResource> GetResourceGuardResources(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetResourceGuardResources(cancellationToken);
        }

        private static ResourceGroupResourceExtensionClient GetExtensionClient(ResourceGroupResource resourceGroupResource)
        {
            return resourceGroupResource.GetCachedClient((client) =>
            {
                return new ResourceGroupResourceExtensionClient(client, resourceGroupResource.Id);
            }
            );
        }

        /// <summary> Gets a collection of BackupVaultResources in the ResourceGroupResource. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of BackupVaultResources and their operations over a BackupVaultResource. </returns>
        public static BackupVaultResourceCollection GetBackupVaultResources(this ResourceGroupResource resourceGroupResource)
        {
            return GetExtensionClient(resourceGroupResource).GetBackupVaultResources();
        }

        /// <summary>
        /// Returns a resource belonging to a resource group.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/backupVaults/{vaultName}
        /// Operation Id: BackupVaults_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="vaultName"> The name of the backup vault. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="vaultName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="vaultName"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<BackupVaultResource>> GetBackupVaultResourceAsync(this ResourceGroupResource resourceGroupResource, string vaultName, CancellationToken cancellationToken = default)
        {
            return await resourceGroupResource.GetBackupVaultResources().GetAsync(vaultName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Returns a resource belonging to a resource group.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/backupVaults/{vaultName}
        /// Operation Id: BackupVaults_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="vaultName"> The name of the backup vault. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="vaultName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="vaultName"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<BackupVaultResource> GetBackupVaultResource(this ResourceGroupResource resourceGroupResource, string vaultName, CancellationToken cancellationToken = default)
        {
            return resourceGroupResource.GetBackupVaultResources().Get(vaultName, cancellationToken);
        }

        /// <summary> Gets a collection of ResourceGuardResources in the ResourceGroupResource. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of ResourceGuardResources and their operations over a ResourceGuardResource. </returns>
        public static ResourceGuardResourceCollection GetResourceGuardResources(this ResourceGroupResource resourceGroupResource)
        {
            return GetExtensionClient(resourceGroupResource).GetResourceGuardResources();
        }

        /// <summary>
        /// Returns a ResourceGuard belonging to a resource group.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/resourceGuards/{resourceGuardsName}
        /// Operation Id: ResourceGuards_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="resourceGuardsName"> The name of ResourceGuard. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="resourceGuardsName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGuardsName"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<ResourceGuardResource>> GetResourceGuardResourceAsync(this ResourceGroupResource resourceGroupResource, string resourceGuardsName, CancellationToken cancellationToken = default)
        {
            return await resourceGroupResource.GetResourceGuardResources().GetAsync(resourceGuardsName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Returns a ResourceGuard belonging to a resource group.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/resourceGuards/{resourceGuardsName}
        /// Operation Id: ResourceGuards_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="resourceGuardsName"> The name of ResourceGuard. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="resourceGuardsName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGuardsName"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<ResourceGuardResource> GetResourceGuardResource(this ResourceGroupResource resourceGroupResource, string resourceGuardsName, CancellationToken cancellationToken = default)
        {
            return resourceGroupResource.GetResourceGuardResources().Get(resourceGuardsName, cancellationToken);
        }

        /// <summary>
        /// API to check for resource name availability
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/locations/{location}/checkNameAvailability
        /// Operation Id: BackupVaults_CheckNameAvailability
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="location"> The location in which uniqueness will be verified. </param>
        /// <param name="content"> Check name availability request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        public static async Task<Response<CheckNameAvailabilityResult>> CheckNameAvailabilityBackupVaultAsync(this ResourceGroupResource resourceGroupResource, AzureLocation location, CheckNameAvailabilityContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(content, nameof(content));

            return await GetExtensionClient(resourceGroupResource).CheckNameAvailabilityBackupVaultAsync(location, content, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// API to check for resource name availability
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataProtection/locations/{location}/checkNameAvailability
        /// Operation Id: BackupVaults_CheckNameAvailability
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="location"> The location in which uniqueness will be verified. </param>
        /// <param name="content"> Check name availability request. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="content"/> is null. </exception>
        public static Response<CheckNameAvailabilityResult> CheckNameAvailabilityBackupVault(this ResourceGroupResource resourceGroupResource, AzureLocation location, CheckNameAvailabilityContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(content, nameof(content));

            return GetExtensionClient(resourceGroupResource).CheckNameAvailabilityBackupVault(location, content, cancellationToken);
        }

        #region BackupVaultResource
        /// <summary>
        /// Gets an object representing a <see cref="BackupVaultResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="BackupVaultResource.CreateResourceIdentifier" /> to create a <see cref="BackupVaultResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="BackupVaultResource" /> object. </returns>
        public static BackupVaultResource GetBackupVaultResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                BackupVaultResource.ValidateResourceId(id);
                return new BackupVaultResource(client, id);
            }
            );
        }
        #endregion

        #region BaseBackupPolicyResource
        /// <summary>
        /// Gets an object representing a <see cref="BaseBackupPolicyResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="BaseBackupPolicyResource.CreateResourceIdentifier" /> to create a <see cref="BaseBackupPolicyResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="BaseBackupPolicyResource" /> object. </returns>
        public static BaseBackupPolicyResource GetBaseBackupPolicyResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                BaseBackupPolicyResource.ValidateResourceId(id);
                return new BaseBackupPolicyResource(client, id);
            }
            );
        }
        #endregion

        #region BackupInstanceResource
        /// <summary>
        /// Gets an object representing a <see cref="BackupInstanceResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="BackupInstanceResource.CreateResourceIdentifier" /> to create a <see cref="BackupInstanceResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="BackupInstanceResource" /> object. </returns>
        public static BackupInstanceResource GetBackupInstanceResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                BackupInstanceResource.ValidateResourceId(id);
                return new BackupInstanceResource(client, id);
            }
            );
        }
        #endregion

        #region AzureBackupRecoveryPointResource
        /// <summary>
        /// Gets an object representing an <see cref="AzureBackupRecoveryPointResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="AzureBackupRecoveryPointResource.CreateResourceIdentifier" /> to create an <see cref="AzureBackupRecoveryPointResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="AzureBackupRecoveryPointResource" /> object. </returns>
        public static AzureBackupRecoveryPointResource GetAzureBackupRecoveryPointResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                AzureBackupRecoveryPointResource.ValidateResourceId(id);
                return new AzureBackupRecoveryPointResource(client, id);
            }
            );
        }
        #endregion

        #region AzureBackupJobResource
        /// <summary>
        /// Gets an object representing an <see cref="AzureBackupJobResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="AzureBackupJobResource.CreateResourceIdentifier" /> to create an <see cref="AzureBackupJobResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="AzureBackupJobResource" /> object. </returns>
        public static AzureBackupJobResource GetAzureBackupJobResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                AzureBackupJobResource.ValidateResourceId(id);
                return new AzureBackupJobResource(client, id);
            }
            );
        }
        #endregion

        #region DeletedBackupInstanceResource
        /// <summary>
        /// Gets an object representing a <see cref="DeletedBackupInstanceResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DeletedBackupInstanceResource.CreateResourceIdentifier" /> to create a <see cref="DeletedBackupInstanceResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DeletedBackupInstanceResource" /> object. </returns>
        public static DeletedBackupInstanceResource GetDeletedBackupInstanceResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                DeletedBackupInstanceResource.ValidateResourceId(id);
                return new DeletedBackupInstanceResource(client, id);
            }
            );
        }
        #endregion

        #region ResourceGuardResource
        /// <summary>
        /// Gets an object representing a <see cref="ResourceGuardResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ResourceGuardResource.CreateResourceIdentifier" /> to create a <see cref="ResourceGuardResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ResourceGuardResource" /> object. </returns>
        public static ResourceGuardResource GetResourceGuardResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ResourceGuardResource.ValidateResourceId(id);
                return new ResourceGuardResource(client, id);
            }
            );
        }
        #endregion

        #region ResourceGuardDisableSoftDeleteRequestResource
        /// <summary>
        /// Gets an object representing a <see cref="ResourceGuardDisableSoftDeleteRequestResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ResourceGuardDisableSoftDeleteRequestResource.CreateResourceIdentifier" /> to create a <see cref="ResourceGuardDisableSoftDeleteRequestResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ResourceGuardDisableSoftDeleteRequestResource" /> object. </returns>
        public static ResourceGuardDisableSoftDeleteRequestResource GetResourceGuardDisableSoftDeleteRequestResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ResourceGuardDisableSoftDeleteRequestResource.ValidateResourceId(id);
                return new ResourceGuardDisableSoftDeleteRequestResource(client, id);
            }
            );
        }
        #endregion

        #region ResourceGuardDeleteResourceGuardProxyRequestResource
        /// <summary>
        /// Gets an object representing a <see cref="ResourceGuardDeleteResourceGuardProxyRequestResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ResourceGuardDeleteResourceGuardProxyRequestResource.CreateResourceIdentifier" /> to create a <see cref="ResourceGuardDeleteResourceGuardProxyRequestResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ResourceGuardDeleteResourceGuardProxyRequestResource" /> object. </returns>
        public static ResourceGuardDeleteResourceGuardProxyRequestResource GetResourceGuardDeleteResourceGuardProxyRequestResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ResourceGuardDeleteResourceGuardProxyRequestResource.ValidateResourceId(id);
                return new ResourceGuardDeleteResourceGuardProxyRequestResource(client, id);
            }
            );
        }
        #endregion

        #region ResourceGuardGetBackupSecurityPINRequestResource
        /// <summary>
        /// Gets an object representing a <see cref="ResourceGuardGetBackupSecurityPINRequestResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ResourceGuardGetBackupSecurityPINRequestResource.CreateResourceIdentifier" /> to create a <see cref="ResourceGuardGetBackupSecurityPINRequestResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ResourceGuardGetBackupSecurityPINRequestResource" /> object. </returns>
        public static ResourceGuardGetBackupSecurityPINRequestResource GetResourceGuardGetBackupSecurityPINRequestResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ResourceGuardGetBackupSecurityPINRequestResource.ValidateResourceId(id);
                return new ResourceGuardGetBackupSecurityPINRequestResource(client, id);
            }
            );
        }
        #endregion

        #region ResourceGuardDeleteProtectedItemRequestResource
        /// <summary>
        /// Gets an object representing a <see cref="ResourceGuardDeleteProtectedItemRequestResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ResourceGuardDeleteProtectedItemRequestResource.CreateResourceIdentifier" /> to create a <see cref="ResourceGuardDeleteProtectedItemRequestResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ResourceGuardDeleteProtectedItemRequestResource" /> object. </returns>
        public static ResourceGuardDeleteProtectedItemRequestResource GetResourceGuardDeleteProtectedItemRequestResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ResourceGuardDeleteProtectedItemRequestResource.ValidateResourceId(id);
                return new ResourceGuardDeleteProtectedItemRequestResource(client, id);
            }
            );
        }
        #endregion

        #region ResourceGuardUpdateProtectionPolicyRequestResource
        /// <summary>
        /// Gets an object representing a <see cref="ResourceGuardUpdateProtectionPolicyRequestResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ResourceGuardUpdateProtectionPolicyRequestResource.CreateResourceIdentifier" /> to create a <see cref="ResourceGuardUpdateProtectionPolicyRequestResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ResourceGuardUpdateProtectionPolicyRequestResource" /> object. </returns>
        public static ResourceGuardUpdateProtectionPolicyRequestResource GetResourceGuardUpdateProtectionPolicyRequestResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ResourceGuardUpdateProtectionPolicyRequestResource.ValidateResourceId(id);
                return new ResourceGuardUpdateProtectionPolicyRequestResource(client, id);
            }
            );
        }
        #endregion

        #region ResourceGuardUpdateProtectedItemRequestResource
        /// <summary>
        /// Gets an object representing a <see cref="ResourceGuardUpdateProtectedItemRequestResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ResourceGuardUpdateProtectedItemRequestResource.CreateResourceIdentifier" /> to create a <see cref="ResourceGuardUpdateProtectedItemRequestResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ResourceGuardUpdateProtectedItemRequestResource" /> object. </returns>
        public static ResourceGuardUpdateProtectedItemRequestResource GetResourceGuardUpdateProtectedItemRequestResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ResourceGuardUpdateProtectedItemRequestResource.ValidateResourceId(id);
                return new ResourceGuardUpdateProtectedItemRequestResource(client, id);
            }
            );
        }
        #endregion

        #region ResourceGuardProxyBaseResource
        /// <summary>
        /// Gets an object representing a <see cref="ResourceGuardProxyBaseResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ResourceGuardProxyBaseResource.CreateResourceIdentifier" /> to create a <see cref="ResourceGuardProxyBaseResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ResourceGuardProxyBaseResource" /> object. </returns>
        public static ResourceGuardProxyBaseResource GetResourceGuardProxyBaseResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ResourceGuardProxyBaseResource.ValidateResourceId(id);
                return new ResourceGuardProxyBaseResource(client, id);
            }
            );
        }
        #endregion
    }
}
