// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.DataProtectionBackup.Models;

namespace Azure.ResourceManager.DataProtectionBackup
{
    /// <summary> A class to add extension methods to SubscriptionResource. </summary>
    internal partial class SubscriptionResourceExtensionClient : ArmResource
    {
        private ClientDiagnostics _backupVaultResourceBackupVaultsClientDiagnostics;
        private BackupVaultsRestOperations _backupVaultResourceBackupVaultsRestClient;
        private ClientDiagnostics _dataProtectionClientDiagnostics;
        private DataProtectionRestOperations _dataProtectionRestClient;
        private ClientDiagnostics _resourceGuardResourceResourceGuardsClientDiagnostics;
        private ResourceGuardsRestOperations _resourceGuardResourceResourceGuardsRestClient;

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class for mocking. </summary>
        protected SubscriptionResourceExtensionClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal SubscriptionResourceExtensionClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics BackupVaultResourceBackupVaultsClientDiagnostics => _backupVaultResourceBackupVaultsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.DataProtectionBackup", BackupVaultResource.ResourceType.Namespace, Diagnostics);
        private BackupVaultsRestOperations BackupVaultResourceBackupVaultsRestClient => _backupVaultResourceBackupVaultsRestClient ??= new BackupVaultsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(BackupVaultResource.ResourceType));
        private ClientDiagnostics DataProtectionClientDiagnostics => _dataProtectionClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.DataProtectionBackup", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private DataProtectionRestOperations DataProtectionRestClient => _dataProtectionRestClient ??= new DataProtectionRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);
        private ClientDiagnostics ResourceGuardResourceResourceGuardsClientDiagnostics => _resourceGuardResourceResourceGuardsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.DataProtectionBackup", ResourceGuardResource.ResourceType.Namespace, Diagnostics);
        private ResourceGuardsRestOperations ResourceGuardResourceResourceGuardsRestClient => _resourceGuardResourceResourceGuardsRestClient ??= new ResourceGuardsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(ResourceGuardResource.ResourceType));

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary>
        /// Returns resource collection belonging to a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DataProtection/backupVaults
        /// Operation Id: BackupVaults_GetInSubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="BackupVaultResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<BackupVaultResource> GetBackupVaultResourcesAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<BackupVaultResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = BackupVaultResourceBackupVaultsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetBackupVaultResources");
                scope.Start();
                try
                {
                    var response = await BackupVaultResourceBackupVaultsRestClient.GetInSubscriptionAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new BackupVaultResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<BackupVaultResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = BackupVaultResourceBackupVaultsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetBackupVaultResources");
                scope.Start();
                try
                {
                    var response = await BackupVaultResourceBackupVaultsRestClient.GetInSubscriptionNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new BackupVaultResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Returns resource collection belonging to a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DataProtection/backupVaults
        /// Operation Id: BackupVaults_GetInSubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="BackupVaultResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<BackupVaultResource> GetBackupVaultResources(CancellationToken cancellationToken = default)
        {
            Page<BackupVaultResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = BackupVaultResourceBackupVaultsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetBackupVaultResources");
                scope.Start();
                try
                {
                    var response = BackupVaultResourceBackupVaultsRestClient.GetInSubscription(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new BackupVaultResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<BackupVaultResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = BackupVaultResourceBackupVaultsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetBackupVaultResources");
                scope.Start();
                try
                {
                    var response = BackupVaultResourceBackupVaultsRestClient.GetInSubscriptionNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new BackupVaultResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Validates if a feature is supported
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DataProtection/locations/{location}/checkFeatureSupport
        /// Operation Id: DataProtection_CheckFeatureSupport
        /// </summary>
        /// <param name="location"> The String to use. </param>
        /// <param name="featureValidationRequestBase"> Feature support request object. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual async Task<Response<FeatureValidationResponseBase>> CheckFeatureSupportDataProtectionAsync(AzureLocation location, FeatureValidationRequestBase featureValidationRequestBase, CancellationToken cancellationToken = default)
        {
            using var scope = DataProtectionClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.CheckFeatureSupportDataProtection");
            scope.Start();
            try
            {
                var response = await DataProtectionRestClient.CheckFeatureSupportAsync(Id.SubscriptionId, location, featureValidationRequestBase, cancellationToken).ConfigureAwait(false);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Validates if a feature is supported
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DataProtection/locations/{location}/checkFeatureSupport
        /// Operation Id: DataProtection_CheckFeatureSupport
        /// </summary>
        /// <param name="location"> The String to use. </param>
        /// <param name="featureValidationRequestBase"> Feature support request object. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public virtual Response<FeatureValidationResponseBase> CheckFeatureSupportDataProtection(AzureLocation location, FeatureValidationRequestBase featureValidationRequestBase, CancellationToken cancellationToken = default)
        {
            using var scope = DataProtectionClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.CheckFeatureSupportDataProtection");
            scope.Start();
            try
            {
                var response = DataProtectionRestClient.CheckFeatureSupport(Id.SubscriptionId, location, featureValidationRequestBase, cancellationToken);
                return response;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Returns ResourceGuards collection belonging to a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DataProtection/resourceGuards
        /// Operation Id: ResourceGuards_GetResourcesInSubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ResourceGuardResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ResourceGuardResource> GetResourceGuardResourcesAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<ResourceGuardResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ResourceGuardResourceResourceGuardsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetResourceGuardResources");
                scope.Start();
                try
                {
                    var response = await ResourceGuardResourceResourceGuardsRestClient.GetResourcesInSubscriptionAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ResourceGuardResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ResourceGuardResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ResourceGuardResourceResourceGuardsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetResourceGuardResources");
                scope.Start();
                try
                {
                    var response = await ResourceGuardResourceResourceGuardsRestClient.GetResourcesInSubscriptionNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ResourceGuardResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Returns ResourceGuards collection belonging to a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DataProtection/resourceGuards
        /// Operation Id: ResourceGuards_GetResourcesInSubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ResourceGuardResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ResourceGuardResource> GetResourceGuardResources(CancellationToken cancellationToken = default)
        {
            Page<ResourceGuardResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ResourceGuardResourceResourceGuardsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetResourceGuardResources");
                scope.Start();
                try
                {
                    var response = ResourceGuardResourceResourceGuardsRestClient.GetResourcesInSubscription(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ResourceGuardResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ResourceGuardResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ResourceGuardResourceResourceGuardsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetResourceGuardResources");
                scope.Start();
                try
                {
                    var response = ResourceGuardResourceResourceGuardsRestClient.GetResourcesInSubscriptionNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ResourceGuardResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
