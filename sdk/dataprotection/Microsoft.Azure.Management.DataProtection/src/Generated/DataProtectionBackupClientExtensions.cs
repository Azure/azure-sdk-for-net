// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataProtection
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for DataProtectionBackupClient.
    /// </summary>
    public static partial class DataProtectionBackupClientExtensions
    {
            /// <summary>
            /// Gets the operation status for a resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// </param>
            /// <param name='operationId'>
            /// </param>
            public static OperationResource GetOperationStatus(this IDataProtectionBackupClient operations, string location, string operationId)
            {
                return operations.GetOperationStatusAsync(location, operationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the operation status for a resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// </param>
            /// <param name='operationId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationResource> GetOperationStatusAsync(this IDataProtectionBackupClient operations, string location, string operationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOperationStatusWithHttpMessagesAsync(location, operationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='operationId'>
            /// </param>
            public static BackupVaultResource GetOperationResultPatch(this IDataProtectionBackupClient operations, string vaultName, string resourceGroupName, string operationId)
            {
                return operations.GetOperationResultPatchAsync(vaultName, resourceGroupName, operationId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='vaultName'>
            /// The name of the backup vault.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group where the backup vault is present.
            /// </param>
            /// <param name='operationId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupVaultResource> GetOperationResultPatchAsync(this IDataProtectionBackupClient operations, string vaultName, string resourceGroupName, string operationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOperationResultPatchWithHttpMessagesAsync(vaultName, resourceGroupName, operationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Validates if a feature is supported
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// </param>
            /// <param name='parameters'>
            /// Feature support request object
            /// </param>
            public static FeatureValidationResponseBase CheckFeatureSupport(this IDataProtectionBackupClient operations, string location, FeatureValidationRequestBase parameters)
            {
                return operations.CheckFeatureSupportAsync(location, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Validates if a feature is supported
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// </param>
            /// <param name='parameters'>
            /// Feature support request object
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FeatureValidationResponseBase> CheckFeatureSupportAsync(this IDataProtectionBackupClient operations, string location, FeatureValidationRequestBase parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CheckFeatureSupportWithHttpMessagesAsync(location, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
