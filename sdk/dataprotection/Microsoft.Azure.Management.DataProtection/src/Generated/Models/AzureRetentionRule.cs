// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataProtection.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// AzureRetentionRule
    /// </summary>
    /// <remarks>
    /// Azure retention rule
    /// </remarks>
    [Newtonsoft.Json.JsonObject("AzureRetentionRule")]
    public partial class AzureRetentionRule : BasePolicyRule
    {
        /// <summary>
        /// Initializes a new instance of the AzureRetentionRule class.
        /// </summary>
        public AzureRetentionRule()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AzureRetentionRule class.
        /// </summary>
        public AzureRetentionRule(string name, IList<SourceLifeCycle> lifecycles, bool? isDefault = default(bool?))
            : base(name)
        {
            IsDefault = isDefault;
            Lifecycles = lifecycles;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isDefault")]
        public bool? IsDefault { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lifecycles")]
        public IList<SourceLifeCycle> Lifecycles { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (Lifecycles == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Lifecycles");
            }
            if (Lifecycles != null)
            {
                foreach (var element in Lifecycles)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
