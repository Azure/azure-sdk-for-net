// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataProtection.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// BackupInstance
    /// </summary>
    /// <remarks>
    /// Backup instance
    /// </remarks>
    public partial class BackupInstance
    {
        /// <summary>
        /// Initializes a new instance of the BackupInstance class.
        /// </summary>
        public BackupInstance()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the BackupInstance class.
        /// </summary>
        /// <param name="dataSourceInfo">Gets or sets the data source
        /// information.</param>
        /// <param name="policyInfo">Gets or sets the policy
        /// information.</param>
        /// <param name="dataSourceSetInfo">Gets or sets the data source set
        /// information.</param>
        /// <param name="protectionStatus">Specifies the protection status of
        /// the resource</param>
        /// <param name="provisioningState">Specifies the provisioning state of
        /// the resource i.e. provisioning/updating/Succeeded/Failed</param>
        public BackupInstance(Datasource dataSourceInfo, PolicyInfo policyInfo, DatasourceSet dataSourceSetInfo = default(DatasourceSet), string objectType = default(string), ProtectionStatusDetails protectionStatus = default(ProtectionStatusDetails), string provisioningState = default(string))
        {
            DataSourceInfo = dataSourceInfo;
            DataSourceSetInfo = dataSourceSetInfo;
            ObjectType = objectType;
            PolicyInfo = policyInfo;
            ProtectionStatus = protectionStatus;
            ProvisioningState = provisioningState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the data source information.
        /// </summary>
        [JsonProperty(PropertyName = "dataSourceInfo")]
        public Datasource DataSourceInfo { get; set; }

        /// <summary>
        /// Gets or sets the data source set information.
        /// </summary>
        [JsonProperty(PropertyName = "dataSourceSetInfo")]
        public DatasourceSet DataSourceSetInfo { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "objectType")]
        public string ObjectType { get; set; }

        /// <summary>
        /// Gets or sets the policy information.
        /// </summary>
        [JsonProperty(PropertyName = "policyInfo")]
        public PolicyInfo PolicyInfo { get; set; }

        /// <summary>
        /// Gets specifies the protection status of the resource
        /// </summary>
        [JsonProperty(PropertyName = "protectionStatus")]
        public ProtectionStatusDetails ProtectionStatus { get; private set; }

        /// <summary>
        /// Gets specifies the provisioning state of the resource i.e.
        /// provisioning/updating/Succeeded/Failed
        /// </summary>
        [JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (DataSourceInfo == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DataSourceInfo");
            }
            if (PolicyInfo == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PolicyInfo");
            }
            if (DataSourceInfo != null)
            {
                DataSourceInfo.Validate();
            }
            if (DataSourceSetInfo != null)
            {
                DataSourceSetInfo.Validate();
            }
            if (PolicyInfo != null)
            {
                PolicyInfo.Validate();
            }
        }
    }
}
