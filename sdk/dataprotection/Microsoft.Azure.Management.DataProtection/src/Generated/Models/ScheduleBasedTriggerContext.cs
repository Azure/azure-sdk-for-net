// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataProtection.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// ScheduleBasedTriggerContext
    /// </summary>
    /// <remarks>
    /// Schedule based trigger context
    /// </remarks>
    [Newtonsoft.Json.JsonObject("ScheduleBasedTriggerContext")]
    public partial class ScheduleBasedTriggerContext : TriggerContext
    {
        /// <summary>
        /// Initializes a new instance of the ScheduleBasedTriggerContext
        /// class.
        /// </summary>
        public ScheduleBasedTriggerContext()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ScheduleBasedTriggerContext
        /// class.
        /// </summary>
        /// <param name="schedule">Schedule for this backup</param>
        /// <param name="taggingCriteria">List of tags that can be applicable
        /// for given schedule.</param>
        public ScheduleBasedTriggerContext(BackupSchedule schedule, IList<TaggingCriteria> taggingCriteria)
        {
            Schedule = schedule;
            TaggingCriteria = taggingCriteria;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets schedule for this backup
        /// </summary>
        [JsonProperty(PropertyName = "schedule")]
        public BackupSchedule Schedule { get; set; }

        /// <summary>
        /// Gets or sets list of tags that can be applicable for given
        /// schedule.
        /// </summary>
        [JsonProperty(PropertyName = "taggingCriteria")]
        public IList<TaggingCriteria> TaggingCriteria { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Schedule == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Schedule");
            }
            if (TaggingCriteria == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TaggingCriteria");
            }
            if (Schedule != null)
            {
                Schedule.Validate();
            }
            if (TaggingCriteria != null)
            {
                foreach (var element in TaggingCriteria)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
