// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataProtection.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Parameters for Operational-Tier DataStore
    /// </summary>
    [Newtonsoft.Json.JsonObject("AzureOperationalStoreParameters")]
    public partial class AzureOperationalStoreParameters : DataStoreParameters
    {
        /// <summary>
        /// Initializes a new instance of the AzureOperationalStoreParameters
        /// class.
        /// </summary>
        public AzureOperationalStoreParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AzureOperationalStoreParameters
        /// class.
        /// </summary>
        /// <param name="dataStoreType">type of datastore;
        /// Operational/Vault/Archive. Possible values include:
        /// 'OperationalStore', 'VaultStore', 'ArchiveStore'</param>
        /// <param name="resourceGroupId">Gets or sets the Snapshot Resource
        /// Group Uri.</param>
        public AzureOperationalStoreParameters(string dataStoreType, string resourceGroupId = default(string))
            : base(dataStoreType)
        {
            ResourceGroupId = resourceGroupId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the Snapshot Resource Group Uri.
        /// </summary>
        [JsonProperty(PropertyName = "resourceGroupId")]
        public string ResourceGroupId { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
        }
    }
}
