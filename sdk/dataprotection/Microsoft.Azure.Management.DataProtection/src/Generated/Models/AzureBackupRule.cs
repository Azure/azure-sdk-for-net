// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataProtection.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// AzureBackupRule
    /// </summary>
    /// <remarks>
    /// Azure backup rule
    /// </remarks>
    [Newtonsoft.Json.JsonObject("AzureBackupRule")]
    public partial class AzureBackupRule : BasePolicyRule
    {
        /// <summary>
        /// Initializes a new instance of the AzureBackupRule class.
        /// </summary>
        public AzureBackupRule()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AzureBackupRule class.
        /// </summary>
        public AzureBackupRule(string name, DataStoreInfoBase dataStore, TriggerContext trigger, BackupParameters backupParameters = default(BackupParameters))
            : base(name)
        {
            BackupParameters = backupParameters;
            DataStore = dataStore;
            Trigger = trigger;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "backupParameters")]
        public BackupParameters BackupParameters { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "dataStore")]
        public DataStoreInfoBase DataStore { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "trigger")]
        public TriggerContext Trigger { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (DataStore == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DataStore");
            }
            if (Trigger == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Trigger");
            }
            if (DataStore != null)
            {
                DataStore.Validate();
            }
        }
    }
}
