// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataProtection.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// DatasourceSet
    /// </summary>
    /// <remarks>
    /// DatasourceSet details of datasource to be backed up
    /// </remarks>
    public partial class DatasourceSet
    {
        /// <summary>
        /// Initializes a new instance of the DatasourceSet class.
        /// </summary>
        public DatasourceSet()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DatasourceSet class.
        /// </summary>
        /// <param name="resourceID">Full ARM ID of the resource. For azure
        /// resources, this is ARM ID. For non azure resources, this will be
        /// the ID created by backup service via Fabric/Vault.</param>
        /// <param name="datasourceType">DatasourceType of the
        /// resource.</param>
        /// <param name="objectType">Type of Datasource object, used to
        /// initialize the right inherited type</param>
        /// <param name="resourceLocation">Location of datasource.</param>
        /// <param name="resourceName">Unique identifier of the resource in the
        /// context of parent.</param>
        /// <param name="resourceType">Resource Type of Datasource.</param>
        /// <param name="resourceUri">Uri of the resource.</param>
        public DatasourceSet(string resourceID, string datasourceType = default(string), string objectType = default(string), string resourceLocation = default(string), string resourceName = default(string), string resourceType = default(string), string resourceUri = default(string))
        {
            DatasourceType = datasourceType;
            ObjectType = objectType;
            ResourceID = resourceID;
            ResourceLocation = resourceLocation;
            ResourceName = resourceName;
            ResourceType = resourceType;
            ResourceUri = resourceUri;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets datasourceType of the resource.
        /// </summary>
        [JsonProperty(PropertyName = "datasourceType")]
        public string DatasourceType { get; set; }

        /// <summary>
        /// Gets or sets type of Datasource object, used to initialize the
        /// right inherited type
        /// </summary>
        [JsonProperty(PropertyName = "objectType")]
        public string ObjectType { get; set; }

        /// <summary>
        /// Gets or sets full ARM ID of the resource. For azure resources, this
        /// is ARM ID. For non azure resources, this will be the ID created by
        /// backup service via Fabric/Vault.
        /// </summary>
        [JsonProperty(PropertyName = "resourceID")]
        public string ResourceID { get; set; }

        /// <summary>
        /// Gets or sets location of datasource.
        /// </summary>
        [JsonProperty(PropertyName = "resourceLocation")]
        public string ResourceLocation { get; set; }

        /// <summary>
        /// Gets or sets unique identifier of the resource in the context of
        /// parent.
        /// </summary>
        [JsonProperty(PropertyName = "resourceName")]
        public string ResourceName { get; set; }

        /// <summary>
        /// Gets or sets resource Type of Datasource.
        /// </summary>
        [JsonProperty(PropertyName = "resourceType")]
        public string ResourceType { get; set; }

        /// <summary>
        /// Gets or sets uri of the resource.
        /// </summary>
        [JsonProperty(PropertyName = "resourceUri")]
        public string ResourceUri { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ResourceID == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ResourceID");
            }
        }
    }
}
