// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataProtection.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Class representing a secret store resource.
    /// </summary>
    public partial class SecretStoreResource
    {
        /// <summary>
        /// Initializes a new instance of the SecretStoreResource class.
        /// </summary>
        public SecretStoreResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SecretStoreResource class.
        /// </summary>
        /// <param name="secretStoreType">Gets or sets the type of secret
        /// store. Possible values include: 'Invalid', 'AzureKeyVault'</param>
        /// <param name="uri">Uri to get to the resource</param>
        public SecretStoreResource(string secretStoreType, string uri = default(string))
        {
            Uri = uri;
            SecretStoreType = secretStoreType;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets uri to get to the resource
        /// </summary>
        [JsonProperty(PropertyName = "uri")]
        public string Uri { get; set; }

        /// <summary>
        /// Gets or sets the type of secret store. Possible values include:
        /// 'Invalid', 'AzureKeyVault'
        /// </summary>
        [JsonProperty(PropertyName = "secretStoreType")]
        public string SecretStoreType { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (SecretStoreType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SecretStoreType");
            }
        }
    }
}
