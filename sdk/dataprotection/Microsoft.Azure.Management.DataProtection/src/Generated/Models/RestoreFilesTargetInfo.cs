// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataProtection.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Class encapsulating restore as files target parameters
    /// </summary>
    [Newtonsoft.Json.JsonObject("RestoreFilesTargetInfo")]
    public partial class RestoreFilesTargetInfo : RestoreTargetInfoBase
    {
        /// <summary>
        /// Initializes a new instance of the RestoreFilesTargetInfo class.
        /// </summary>
        public RestoreFilesTargetInfo()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RestoreFilesTargetInfo class.
        /// </summary>
        /// <param name="targetDetails">Destination of RestoreAsFiles
        /// operation, when destination is not a datasource</param>
        /// <param name="restoreLocation">Target Restore region</param>
        public RestoreFilesTargetInfo(TargetDetails targetDetails, string restoreLocation = default(string))
            : base(restoreLocation)
        {
            TargetDetails = targetDetails;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets destination of RestoreAsFiles operation, when
        /// destination is not a datasource
        /// </summary>
        [JsonProperty(PropertyName = "targetDetails")]
        public TargetDetails TargetDetails { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (TargetDetails == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TargetDetails");
            }
            if (TargetDetails != null)
            {
                TargetDetails.Validate();
            }
        }
    }
}
