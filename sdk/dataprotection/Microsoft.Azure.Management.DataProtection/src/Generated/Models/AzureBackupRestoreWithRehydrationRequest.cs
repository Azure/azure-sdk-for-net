// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataProtection.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// AzureBackupRestoreWithRehydrationRequest
    /// </summary>
    /// <remarks>
    /// AzureBackup Restore with Rehydration Request
    /// </remarks>
    [Newtonsoft.Json.JsonObject("AzureBackupRestoreWithRehydrationRequest")]
    public partial class AzureBackupRestoreWithRehydrationRequest : AzureBackupRecoveryPointBasedRestoreRequest
    {
        /// <summary>
        /// Initializes a new instance of the
        /// AzureBackupRestoreWithRehydrationRequest class.
        /// </summary>
        public AzureBackupRestoreWithRehydrationRequest()
        {
            RestoreTargetInfo = new RestoreTargetInfoBase();
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// AzureBackupRestoreWithRehydrationRequest class.
        /// </summary>
        /// <param name="restoreTargetInfo">Gets or sets the restore target
        /// information.</param>
        /// <param name="sourceDataStoreType">Gets or sets the type of the
        /// source data store. Possible values include: 'ArchiveStore',
        /// 'SnapshotStore', 'VaultStore'</param>
        /// <param name="rehydrationPriority">Priority to be used for
        /// rehydration. Values High or Standard. Possible values include:
        /// 'Invalid', 'High', 'Standard'</param>
        /// <param name="rehydrationRetentionDuration">Retention duration in
        /// ISO 8601 format i.e P10D .</param>
        public AzureBackupRestoreWithRehydrationRequest(RestoreTargetInfoBase restoreTargetInfo, string sourceDataStoreType, string recoveryPointId, string rehydrationPriority, string rehydrationRetentionDuration)
            : base(restoreTargetInfo, sourceDataStoreType, recoveryPointId)
        {
            RehydrationPriority = rehydrationPriority;
            RehydrationRetentionDuration = rehydrationRetentionDuration;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets priority to be used for rehydration. Values High or
        /// Standard. Possible values include: 'Invalid', 'High', 'Standard'
        /// </summary>
        [JsonProperty(PropertyName = "rehydrationPriority")]
        public string RehydrationPriority { get; set; }

        /// <summary>
        /// Gets or sets retention duration in ISO 8601 format i.e P10D .
        /// </summary>
        [JsonProperty(PropertyName = "rehydrationRetentionDuration")]
        public string RehydrationRetentionDuration { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (RehydrationPriority == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "RehydrationPriority");
            }
            if (RehydrationRetentionDuration == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "RehydrationRetentionDuration");
            }
        }
    }
}
