// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataProtection.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// BackupVault
    /// </summary>
    /// <remarks>
    /// Backup Vault
    /// </remarks>
    public partial class BackupVault
    {
        /// <summary>
        /// Initializes a new instance of the BackupVault class.
        /// </summary>
        public BackupVault()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the BackupVault class.
        /// </summary>
        /// <param name="storageSettings">Storage Settings</param>
        /// <param name="provisioningState">Provisioning state of the
        /// BackupVault resource. Possible values include: 'Failed',
        /// 'Provisioning', 'Succeeded', 'Unknown', 'Updating'</param>
        public BackupVault(IList<StorageSetting> storageSettings, string provisioningState = default(string))
        {
            ProvisioningState = provisioningState;
            StorageSettings = storageSettings;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets provisioning state of the BackupVault resource. Possible
        /// values include: 'Failed', 'Provisioning', 'Succeeded', 'Unknown',
        /// 'Updating'
        /// </summary>
        [JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets storage Settings
        /// </summary>
        [JsonProperty(PropertyName = "storageSettings")]
        public IList<StorageSetting> StorageSettings { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (StorageSettings == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "StorageSettings");
            }
        }
    }
}
