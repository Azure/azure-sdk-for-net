// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataProtection
{
    using Microsoft.Rest;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// </summary>
    public partial interface IDataProtectionBackupClient : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }

        /// <summary>
        /// The subscription Id.
        /// </summary>
        string SubscriptionId { get; set; }

        /// <summary>
        /// Client Api Version.
        /// </summary>
        string ApiVersion { get; set; }


        /// <summary>
        /// Gets the IBackupVaults.
        /// </summary>
        IBackupVaults BackupVaults { get; }

        /// <summary>
        /// Gets the IOperationResult.
        /// </summary>
        IOperationResult OperationResult { get; }

        /// <summary>
        /// Gets the IOperations.
        /// </summary>
        IOperations Operations { get; }

        /// <summary>
        /// Gets the IBackupPolicies.
        /// </summary>
        IBackupPolicies BackupPolicies { get; }

        /// <summary>
        /// Gets the IBackupInstances.
        /// </summary>
        IBackupInstances BackupInstances { get; }

        /// <summary>
        /// Gets the IRecoveryPoints.
        /// </summary>
        IRecoveryPoints RecoveryPoints { get; }

        /// <summary>
        /// Gets the IRecoveryPoint.
        /// </summary>
        IRecoveryPoint RecoveryPoint { get; }

        /// <summary>
        /// Gets the IJobs.
        /// </summary>
        IJobs Jobs { get; }

        /// <summary>
        /// Gets the IFindRestorableTimeRanges.
        /// </summary>
        IFindRestorableTimeRanges FindRestorableTimeRanges { get; }

        /// <summary>
        /// Gets the IJob.
        /// </summary>
        IJob Job { get; }

        /// <summary>
        /// Gets the IExportJobs.
        /// </summary>
        IExportJobs ExportJobs { get; }

        /// <summary>
        /// Gets the IExportJobsOperationResult.
        /// </summary>
        IExportJobsOperationResult ExportJobsOperationResult { get; }

        /// <summary>
        /// Gets the operation status for a resource.
        /// </summary>
        /// <param name='location'>
        /// </param>
        /// <param name='operationId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<OperationResource>> GetOperationStatusWithHttpMessagesAsync(string location, string operationId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <param name='vaultName'>
        /// The name of the backup vault.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group where the backup vault is present.
        /// </param>
        /// <param name='operationId'>
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<BackupVaultResource>> GetOperationResultPatchWithHttpMessagesAsync(string vaultName, string resourceGroupName, string operationId, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Validates if a feature is supported
        /// </summary>
        /// <param name='location'>
        /// </param>
        /// <param name='parameters'>
        /// Feature support request object
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<FeatureValidationResponseBase>> CheckFeatureSupportWithHttpMessagesAsync(string location, FeatureValidationRequestBase parameters, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
