// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.Hci;
using Azure.ResourceManager.Hci.Models;

namespace Azure.ResourceManager.Hci.Samples
{
    public partial class Sample_HciMachineExtensionResource
    {
        // Create or Update a Machine Extension (PATCH)
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_CreateOrUpdateAMachineExtensionPATCH()
        {
            // Generated from example definition: specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/preview/2022-12-15-preview/examples/UpdateMachineExtension.json
            // this example is just showing the usage of "MachineExtensions_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this HciMachineExtensionResource created on azure
            // for more information of creating HciMachineExtensionResource, please refer to the document of HciMachineExtensionResource
            string subscriptionId = "{subscriptionId}";
            string resourceGroupName = "myResourceGroup";
            string name = "myMachine";
            string extensionName = "CustomScriptExtension";
            ResourceIdentifier hciMachineExtensionResourceId = HciMachineExtensionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name, extensionName);
            HciMachineExtensionResource hciMachineExtension = client.GetHciMachineExtensionResource(hciMachineExtensionResourceId);

            // invoke the operation
            HciMachineExtensionPatch patch = new HciMachineExtensionPatch()
            {
                Publisher = "Microsoft.Compute",
                MachineExtensionUpdatePropertiesType = "CustomScriptExtension",
                TypeHandlerVersion = "1.10",
                Settings = BinaryData.FromObjectAsJson(new Dictionary<string, object>()
                {
                    ["commandToExecute"] = "powershell.exe -c \"Get-Process | Where-Object { $_.CPU -lt 100 }\""
                }),
            };
            ArmOperation<HciMachineExtensionResource> lro = await hciMachineExtension.UpdateAsync(WaitUntil.Completed, patch);
            HciMachineExtensionResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            HciMachineExtensionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Delete a Machine Extension
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DeleteAMachineExtension()
        {
            // Generated from example definition: specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/preview/2022-12-15-preview/examples/DeleteMachineExtension.json
            // this example is just showing the usage of "MachineExtensions_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this HciMachineExtensionResource created on azure
            // for more information of creating HciMachineExtensionResource, please refer to the document of HciMachineExtensionResource
            string subscriptionId = "{subscriptionId}";
            string resourceGroupName = "myResourceGroup";
            string name = "myMachine";
            string extensionName = "MMA";
            ResourceIdentifier hciMachineExtensionResourceId = HciMachineExtensionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name, extensionName);
            HciMachineExtensionResource hciMachineExtension = client.GetHciMachineExtensionResource(hciMachineExtensionResourceId);

            // invoke the operation
            await hciMachineExtension.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // Get Machine Extension
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetMachineExtension()
        {
            // Generated from example definition: specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/preview/2022-12-15-preview/examples/GetMachineExtension.json
            // this example is just showing the usage of "MachineExtensions_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this HciMachineExtensionResource created on azure
            // for more information of creating HciMachineExtensionResource, please refer to the document of HciMachineExtensionResource
            string subscriptionId = "{subscriptionId}";
            string resourceGroupName = "myResourceGroup";
            string name = "myMachine";
            string extensionName = "CustomScriptExtension";
            ResourceIdentifier hciMachineExtensionResourceId = HciMachineExtensionResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, name, extensionName);
            HciMachineExtensionResource hciMachineExtension = client.GetHciMachineExtensionResource(hciMachineExtensionResourceId);

            // invoke the operation
            HciMachineExtensionResource result = await hciMachineExtension.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            HciMachineExtensionData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
