// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.Hci;
using Azure.ResourceManager.Hci.Models;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.Hci.Samples
{
    public partial class Sample_VirtualMachineInstanceResource
    {
        // GetVirtualMachineInstance
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetVirtualMachineInstance()
        {
            // Generated from example definition: specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/preview/2023-09-01-preview/examples/GetVirtualMachineInstance.json
            // this example is just showing the usage of "VirtualMachineInstances_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this VirtualMachineInstanceResource created on azure
            // for more information of creating VirtualMachineInstanceResource, please refer to the document of VirtualMachineInstanceResource
            string resourceUri = "subscriptions/fd3c3665-1729-4b7b-9a38-238e83b0f98b/resourceGroups/testrg/Microsoft.HybridCompute/machines/DemoVM";
            ResourceIdentifier virtualMachineInstanceResourceId = VirtualMachineInstanceResource.CreateResourceIdentifier(resourceUri);
            VirtualMachineInstanceResource virtualMachineInstance = client.GetVirtualMachineInstanceResource(virtualMachineInstanceResourceId);

            // invoke the operation
            VirtualMachineInstanceResource result = await virtualMachineInstance.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            VirtualMachineInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // PutVirtualMachineInstanceWithGalleryImage
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_PutVirtualMachineInstanceWithGalleryImage()
        {
            // Generated from example definition: specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/preview/2023-09-01-preview/examples/PutVirtualMachineInstanceWithGalleryImage.json
            // this example is just showing the usage of "VirtualMachineInstances_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this VirtualMachineInstanceResource created on azure
            // for more information of creating VirtualMachineInstanceResource, please refer to the document of VirtualMachineInstanceResource
            string resourceUri = "subscriptions/fd3c3665-1729-4b7b-9a38-238e83b0f98b/resourceGroups/testrg/Microsoft.HybridCompute/machines/DemoVM";
            ResourceIdentifier virtualMachineInstanceResourceId = VirtualMachineInstanceResource.CreateResourceIdentifier(resourceUri);
            VirtualMachineInstanceResource virtualMachineInstance = client.GetVirtualMachineInstanceResource(virtualMachineInstanceResourceId);

            // invoke the operation
            VirtualMachineInstanceData data = new VirtualMachineInstanceData()
            {
                ExtendedLocation = new ArcVmExtendedLocation()
                {
                    Name = "/subscriptions/a95612cb-f1fa-4daa-a4fd-272844fa512c/resourceGroups/dogfoodarc/providers/Microsoft.ExtendedLocation/customLocations/dogfood-location",
                    ExtendedLocationType = ArcVmExtendedLocationType.CustomLocation,
                },
                HardwareProfile = new VirtualMachineInstancePropertiesHardwareProfile()
                {
                    VmSize = VmSizeEnum.Default,
                },
                NetworkInterfaces =
{
new WritableSubResource()
{
Id = new ResourceIdentifier("test-nic"),
}
},
                OSProfile = new VirtualMachineInstancePropertiesOSProfile()
                {
                    AdminPassword = "password",
                    AdminUsername = "localadmin",
                    ComputerName = "luamaster",
                },
                SecurityProfile = new VirtualMachineInstancePropertiesSecurityProfile()
                {
                    EnableTPM = true,
                    SecureBootEnabled = true,
                },
                StorageProfile = new VirtualMachineInstancePropertiesStorageProfile()
                {
                    ImageReferenceId = new ResourceIdentifier("/subscriptions/a95612cb-f1fa-4daa-a4fd-272844fa512c/resourceGroups/dogfoodarc/providers/Microsoft.AzureStackHCI/galleryImages/test-gallery-image"),
                    VmConfigStoragePathId = new ResourceIdentifier("/subscriptions/a95612cb-f1fa-4daa-a4fd-272844fa512c/resourceGroups/dogfoodarc/providers/Microsoft.AzureStackHCI/storageContainers/test-container"),
                },
            };
            ArmOperation<VirtualMachineInstanceResource> lro = await virtualMachineInstance.CreateOrUpdateAsync(WaitUntil.Completed, data);
            VirtualMachineInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            VirtualMachineInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // PutVirtualMachineInstanceWithMarketplaceGalleryImage
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_PutVirtualMachineInstanceWithMarketplaceGalleryImage()
        {
            // Generated from example definition: specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/preview/2023-09-01-preview/examples/PutVirtualMachineInstanceWithMarketplaceGalleryImage.json
            // this example is just showing the usage of "VirtualMachineInstances_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this VirtualMachineInstanceResource created on azure
            // for more information of creating VirtualMachineInstanceResource, please refer to the document of VirtualMachineInstanceResource
            string resourceUri = "subscriptions/fd3c3665-1729-4b7b-9a38-238e83b0f98b/resourceGroups/testrg/Microsoft.HybridCompute/machines/DemoVM";
            ResourceIdentifier virtualMachineInstanceResourceId = VirtualMachineInstanceResource.CreateResourceIdentifier(resourceUri);
            VirtualMachineInstanceResource virtualMachineInstance = client.GetVirtualMachineInstanceResource(virtualMachineInstanceResourceId);

            // invoke the operation
            VirtualMachineInstanceData data = new VirtualMachineInstanceData()
            {
                ExtendedLocation = new ArcVmExtendedLocation()
                {
                    Name = "/subscriptions/a95612cb-f1fa-4daa-a4fd-272844fa512c/resourceGroups/dogfoodarc/providers/Microsoft.ExtendedLocation/customLocations/dogfood-location",
                    ExtendedLocationType = ArcVmExtendedLocationType.CustomLocation,
                },
                HardwareProfile = new VirtualMachineInstancePropertiesHardwareProfile()
                {
                    VmSize = VmSizeEnum.Default,
                },
                NetworkInterfaces =
{
new WritableSubResource()
{
Id = new ResourceIdentifier("test-nic"),
}
},
                OSProfile = new VirtualMachineInstancePropertiesOSProfile()
                {
                    AdminPassword = "password",
                    AdminUsername = "localadmin",
                    ComputerName = "luamaster",
                },
                SecurityProfile = new VirtualMachineInstancePropertiesSecurityProfile()
                {
                    EnableTPM = true,
                    SecureBootEnabled = true,
                },
                StorageProfile = new VirtualMachineInstancePropertiesStorageProfile()
                {
                    ImageReferenceId = new ResourceIdentifier("/subscriptions/a95612cb-f1fa-4daa-a4fd-272844fa512c/resourceGroups/dogfoodarc/providers/Microsoft.AzureStackHCI/marketplaceGalleryImages/test-marketplace-gallery-image"),
                    VmConfigStoragePathId = new ResourceIdentifier("/subscriptions/a95612cb-f1fa-4daa-a4fd-272844fa512c/resourceGroups/dogfoodarc/providers/Microsoft.AzureStackHCI/storageContainers/test-container"),
                },
            };
            ArmOperation<VirtualMachineInstanceResource> lro = await virtualMachineInstance.CreateOrUpdateAsync(WaitUntil.Completed, data);
            VirtualMachineInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            VirtualMachineInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // PutVirtualMachineInstanceWithOsDisk
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_PutVirtualMachineInstanceWithOsDisk()
        {
            // Generated from example definition: specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/preview/2023-09-01-preview/examples/PutVirtualMachineInstanceWithOsDisk.json
            // this example is just showing the usage of "VirtualMachineInstances_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this VirtualMachineInstanceResource created on azure
            // for more information of creating VirtualMachineInstanceResource, please refer to the document of VirtualMachineInstanceResource
            string resourceUri = "subscriptions/fd3c3665-1729-4b7b-9a38-238e83b0f98b/resourceGroups/testrg/Microsoft.HybridCompute/machines/DemoVM";
            ResourceIdentifier virtualMachineInstanceResourceId = VirtualMachineInstanceResource.CreateResourceIdentifier(resourceUri);
            VirtualMachineInstanceResource virtualMachineInstance = client.GetVirtualMachineInstanceResource(virtualMachineInstanceResourceId);

            // invoke the operation
            VirtualMachineInstanceData data = new VirtualMachineInstanceData()
            {
                ExtendedLocation = new ArcVmExtendedLocation()
                {
                    Name = "/subscriptions/a95612cb-f1fa-4daa-a4fd-272844fa512c/resourceGroups/dogfoodarc/providers/Microsoft.ExtendedLocation/customLocations/dogfood-location",
                    ExtendedLocationType = ArcVmExtendedLocationType.CustomLocation,
                },
                HardwareProfile = new VirtualMachineInstancePropertiesHardwareProfile()
                {
                    VmSize = VmSizeEnum.Default,
                },
                NetworkInterfaces =
{
new WritableSubResource()
{
Id = new ResourceIdentifier("test-nic"),
}
},
                SecurityProfile = new VirtualMachineInstancePropertiesSecurityProfile()
                {
                    EnableTPM = true,
                    SecureBootEnabled = true,
                },
                StorageProfile = new VirtualMachineInstancePropertiesStorageProfile()
                {
                    OSDisk = new VirtualMachineInstancePropertiesStorageProfileOSDisk()
                    {
                        Id = "/subscriptions/a95612cb-f1fa-4daa-a4fd-272844fa512c/resourceGroups/dogfoodarc/providers/Microsoft.AzureStackHCI/virtualHardDisks/test-vhd",
                    },
                    VmConfigStoragePathId = new ResourceIdentifier("/subscriptions/a95612cb-f1fa-4daa-a4fd-272844fa512c/resourceGroups/dogfoodarc/providers/Microsoft.AzureStackHCI/storageContainers/test-container"),
                },
            };
            ArmOperation<VirtualMachineInstanceResource> lro = await virtualMachineInstance.CreateOrUpdateAsync(WaitUntil.Completed, data);
            VirtualMachineInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            VirtualMachineInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // PutVirtualMachineInstanceWithVMConfigAgent
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_PutVirtualMachineInstanceWithVMConfigAgent()
        {
            // Generated from example definition: specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/preview/2023-09-01-preview/examples/PutVirtualMachineInstanceWithVMConfigAgent.json
            // this example is just showing the usage of "VirtualMachineInstances_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this VirtualMachineInstanceResource created on azure
            // for more information of creating VirtualMachineInstanceResource, please refer to the document of VirtualMachineInstanceResource
            string resourceUri = "subscriptions/fd3c3665-1729-4b7b-9a38-238e83b0f98b/resourceGroups/testrg/Microsoft.HybridCompute/machines/DemoVM";
            ResourceIdentifier virtualMachineInstanceResourceId = VirtualMachineInstanceResource.CreateResourceIdentifier(resourceUri);
            VirtualMachineInstanceResource virtualMachineInstance = client.GetVirtualMachineInstanceResource(virtualMachineInstanceResourceId);

            // invoke the operation
            VirtualMachineInstanceData data = new VirtualMachineInstanceData()
            {
                ExtendedLocation = new ArcVmExtendedLocation()
                {
                    Name = "/subscriptions/a95612cb-f1fa-4daa-a4fd-272844fa512c/resourceGroups/dogfoodarc/providers/Microsoft.ExtendedLocation/customLocations/dogfood-location",
                    ExtendedLocationType = ArcVmExtendedLocationType.CustomLocation,
                },
                HardwareProfile = new VirtualMachineInstancePropertiesHardwareProfile()
                {
                    VmSize = VmSizeEnum.Default,
                },
                NetworkInterfaces =
{
new WritableSubResource()
{
Id = new ResourceIdentifier("test-nic"),
}
},
                OSProfile = new VirtualMachineInstancePropertiesOSProfile()
                {
                    AdminPassword = "password",
                    AdminUsername = "localadmin",
                    ComputerName = "luamaster",
                    WindowsConfiguration = new VirtualMachineInstancePropertiesOSProfileWindowsConfiguration()
                    {
                        ProvisionVmConfigAgent = true,
                    },
                },
                SecurityProfile = new VirtualMachineInstancePropertiesSecurityProfile()
                {
                    EnableTPM = true,
                    SecureBootEnabled = true,
                },
                StorageProfile = new VirtualMachineInstancePropertiesStorageProfile()
                {
                    ImageReferenceId = new ResourceIdentifier("/subscriptions/a95612cb-f1fa-4daa-a4fd-272844fa512c/resourceGroups/dogfoodarc/providers/Microsoft.AzureStackHCI/galleryImages/test-gallery-image"),
                    VmConfigStoragePathId = new ResourceIdentifier("/subscriptions/a95612cb-f1fa-4daa-a4fd-272844fa512c/resourceGroups/dogfoodarc/providers/Microsoft.AzureStackHCI/storageContainers/test-container"),
                },
            };
            ArmOperation<VirtualMachineInstanceResource> lro = await virtualMachineInstance.CreateOrUpdateAsync(WaitUntil.Completed, data);
            VirtualMachineInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            VirtualMachineInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // DeleteVirtualMachine
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DeleteVirtualMachine()
        {
            // Generated from example definition: specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/preview/2023-09-01-preview/examples/DeleteVirtualMachineInstance.json
            // this example is just showing the usage of "VirtualMachineInstances_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this VirtualMachineInstanceResource created on azure
            // for more information of creating VirtualMachineInstanceResource, please refer to the document of VirtualMachineInstanceResource
            string resourceUri = "subscriptions/fd3c3665-1729-4b7b-9a38-238e83b0f98b/resourceGroups/testrg/Microsoft.HybridCompute/machines/DemoVM";
            ResourceIdentifier virtualMachineInstanceResourceId = VirtualMachineInstanceResource.CreateResourceIdentifier(resourceUri);
            VirtualMachineInstanceResource virtualMachineInstance = client.GetVirtualMachineInstanceResource(virtualMachineInstanceResourceId);

            // invoke the operation
            await virtualMachineInstance.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine($"Succeeded");
        }

        // UpdateVirtualMachine
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_UpdateVirtualMachine()
        {
            // Generated from example definition: specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/preview/2023-09-01-preview/examples/UpdateVirtualMachineInstance.json
            // this example is just showing the usage of "VirtualMachineInstances_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this VirtualMachineInstanceResource created on azure
            // for more information of creating VirtualMachineInstanceResource, please refer to the document of VirtualMachineInstanceResource
            string resourceUri = "subscriptions/fd3c3665-1729-4b7b-9a38-238e83b0f98b/resourceGroups/testrg/Microsoft.HybridCompute/machines/DemoVM";
            ResourceIdentifier virtualMachineInstanceResourceId = VirtualMachineInstanceResource.CreateResourceIdentifier(resourceUri);
            VirtualMachineInstanceResource virtualMachineInstance = client.GetVirtualMachineInstanceResource(virtualMachineInstanceResourceId);

            // invoke the operation
            VirtualMachineInstancePatch patch = new VirtualMachineInstancePatch()
            {
                Properties = new VirtualMachineInstanceUpdateProperties()
                {
                    StorageDataDisks =
{
new WritableSubResource()
{
Id = new ResourceIdentifier("/subscriptions/fd3c3665-1729-4b7b-9a38-238e83b0f98b/resourceGroups/testrg/providers/Microsoft.AzureStackHCI/virtualHardDisks/test-vhd"),
}
},
                },
            };
            ArmOperation<VirtualMachineInstanceResource> lro = await virtualMachineInstance.UpdateAsync(WaitUntil.Completed, patch);
            VirtualMachineInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            VirtualMachineInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // StartVirtualMachine
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Start_StartVirtualMachine()
        {
            // Generated from example definition: specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/preview/2023-09-01-preview/examples/StartVirtualMachineInstance.json
            // this example is just showing the usage of "VirtualMachineInstances_Start" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this VirtualMachineInstanceResource created on azure
            // for more information of creating VirtualMachineInstanceResource, please refer to the document of VirtualMachineInstanceResource
            string resourceUri = "subscriptions/fd3c3665-1729-4b7b-9a38-238e83b0f98b/resourceGroups/testrg/Microsoft.HybridCompute/machines/DemoVM/providers/Microsoft.AzureStackHCI/virtualMachineInstances/default";
            ResourceIdentifier virtualMachineInstanceResourceId = VirtualMachineInstanceResource.CreateResourceIdentifier(resourceUri);
            VirtualMachineInstanceResource virtualMachineInstance = client.GetVirtualMachineInstanceResource(virtualMachineInstanceResourceId);

            // invoke the operation
            ArmOperation<VirtualMachineInstanceResource> lro = await virtualMachineInstance.StartAsync(WaitUntil.Completed);
            VirtualMachineInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            VirtualMachineInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // StopVirtualMachine
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Stop_StopVirtualMachine()
        {
            // Generated from example definition: specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/preview/2023-09-01-preview/examples/StopVirtualMachineInstance.json
            // this example is just showing the usage of "VirtualMachineInstances_Stop" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this VirtualMachineInstanceResource created on azure
            // for more information of creating VirtualMachineInstanceResource, please refer to the document of VirtualMachineInstanceResource
            string resourceUri = "subscriptions/fd3c3665-1729-4b7b-9a38-238e83b0f98b/resourceGroups/testrg/Microsoft.HybridCompute/machines/DemoVM/providers/Microsoft.AzureStackHCI/virtualMachineInstances/default";
            ResourceIdentifier virtualMachineInstanceResourceId = VirtualMachineInstanceResource.CreateResourceIdentifier(resourceUri);
            VirtualMachineInstanceResource virtualMachineInstance = client.GetVirtualMachineInstanceResource(virtualMachineInstanceResourceId);

            // invoke the operation
            ArmOperation<VirtualMachineInstanceResource> lro = await virtualMachineInstance.StopAsync(WaitUntil.Completed);
            VirtualMachineInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            VirtualMachineInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // RestartVirtualMachine
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Restart_RestartVirtualMachine()
        {
            // Generated from example definition: specification/azurestackhci/resource-manager/Microsoft.AzureStackHCI/preview/2023-09-01-preview/examples/RestartVirtualMachineInstance.json
            // this example is just showing the usage of "VirtualMachineInstances_Restart" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this VirtualMachineInstanceResource created on azure
            // for more information of creating VirtualMachineInstanceResource, please refer to the document of VirtualMachineInstanceResource
            string resourceUri = "subscriptions/fd3c3665-1729-4b7b-9a38-238e83b0f98b/resourceGroups/testrg/Microsoft.HybridCompute/machines/DemoVM/providers/Microsoft.AzureStackHCI/virtualMachineInstances/default";
            ResourceIdentifier virtualMachineInstanceResourceId = VirtualMachineInstanceResource.CreateResourceIdentifier(resourceUri);
            VirtualMachineInstanceResource virtualMachineInstance = client.GetVirtualMachineInstanceResource(virtualMachineInstanceResourceId);

            // invoke the operation
            ArmOperation<VirtualMachineInstanceResource> lro = await virtualMachineInstance.RestartAsync(WaitUntil.Completed);
            VirtualMachineInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            VirtualMachineInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
