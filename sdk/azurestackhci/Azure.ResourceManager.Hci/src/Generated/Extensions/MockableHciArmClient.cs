// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;

namespace Azure.ResourceManager.Hci.Mocking
{
    /// <summary> A class to add extension methods to ArmClient. </summary>
    public partial class MockableHciArmClient : ArmResource
    {
        /// <summary> Initializes a new instance of the <see cref="MockableHciArmClient"/> class for mocking. </summary>
        protected MockableHciArmClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="MockableHciArmClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MockableHciArmClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        internal MockableHciArmClient(ArmClient client) : this(client, ResourceIdentifier.Root)
        {
        }

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary> Gets a collection of EdgeDeviceResources in the ArmClient. </summary>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <returns> An object representing collection of EdgeDeviceResources and their operations over a EdgeDeviceResource. </returns>
        public virtual EdgeDeviceCollection GetEdgeDevices(ResourceIdentifier scope)
        {
            return new EdgeDeviceCollection(Client, scope);
        }

        /// <summary>
        /// Get a EdgeDevice
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.AzureStackHCI/edgeDevices/{edgeDeviceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>EdgeDevices_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-04-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDeviceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <param name="edgeDeviceName"> Name of Device. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="edgeDeviceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="edgeDeviceName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<EdgeDeviceResource>> GetEdgeDeviceAsync(ResourceIdentifier scope, string edgeDeviceName, CancellationToken cancellationToken = default)
        {
            return await GetEdgeDevices(scope).GetAsync(edgeDeviceName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a EdgeDevice
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{resourceUri}/providers/Microsoft.AzureStackHCI/edgeDevices/{edgeDeviceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>EdgeDevices_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-04-01</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EdgeDeviceResource"/></description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <param name="edgeDeviceName"> Name of Device. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="edgeDeviceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="edgeDeviceName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<EdgeDeviceResource> GetEdgeDevice(ResourceIdentifier scope, string edgeDeviceName, CancellationToken cancellationToken = default)
        {
            return GetEdgeDevices(scope).Get(edgeDeviceName, cancellationToken);
        }

        /// <summary>
        /// Gets an object representing an <see cref="ArcSettingResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ArcSettingResource.CreateResourceIdentifier" /> to create an <see cref="ArcSettingResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ArcSettingResource"/> object. </returns>
        public virtual ArcSettingResource GetArcSettingResource(ResourceIdentifier id)
        {
            ArcSettingResource.ValidateResourceId(id);
            return new ArcSettingResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="HciClusterResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="HciClusterResource.CreateResourceIdentifier" /> to create a <see cref="HciClusterResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="HciClusterResource"/> object. </returns>
        public virtual HciClusterResource GetHciClusterResource(ResourceIdentifier id)
        {
            HciClusterResource.ValidateResourceId(id);
            return new HciClusterResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="DeploymentSettingResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="DeploymentSettingResource.CreateResourceIdentifier" /> to create a <see cref="DeploymentSettingResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="DeploymentSettingResource"/> object. </returns>
        public virtual DeploymentSettingResource GetDeploymentSettingResource(ResourceIdentifier id)
        {
            DeploymentSettingResource.ValidateResourceId(id);
            return new DeploymentSettingResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing an <see cref="EdgeDeviceResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="EdgeDeviceResource.CreateResourceIdentifier" /> to create an <see cref="EdgeDeviceResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="EdgeDeviceResource"/> object. </returns>
        public virtual EdgeDeviceResource GetEdgeDeviceResource(ResourceIdentifier id)
        {
            EdgeDeviceResource.ValidateResourceId(id);
            return new EdgeDeviceResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing an <see cref="ArcExtensionResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ArcExtensionResource.CreateResourceIdentifier" /> to create an <see cref="ArcExtensionResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ArcExtensionResource"/> object. </returns>
        public virtual ArcExtensionResource GetArcExtensionResource(ResourceIdentifier id)
        {
            ArcExtensionResource.ValidateResourceId(id);
            return new ArcExtensionResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing an <see cref="OfferResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="OfferResource.CreateResourceIdentifier" /> to create an <see cref="OfferResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="OfferResource"/> object. </returns>
        public virtual OfferResource GetOfferResource(ResourceIdentifier id)
        {
            OfferResource.ValidateResourceId(id);
            return new OfferResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="PublisherResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="PublisherResource.CreateResourceIdentifier" /> to create a <see cref="PublisherResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="PublisherResource"/> object. </returns>
        public virtual PublisherResource GetPublisherResource(ResourceIdentifier id)
        {
            PublisherResource.ValidateResourceId(id);
            return new PublisherResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="SecuritySettingResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SecuritySettingResource.CreateResourceIdentifier" /> to create a <see cref="SecuritySettingResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SecuritySettingResource"/> object. </returns>
        public virtual SecuritySettingResource GetSecuritySettingResource(ResourceIdentifier id)
        {
            SecuritySettingResource.ValidateResourceId(id);
            return new SecuritySettingResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing a <see cref="HciSkuResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="HciSkuResource.CreateResourceIdentifier" /> to create a <see cref="HciSkuResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="HciSkuResource"/> object. </returns>
        public virtual HciSkuResource GetHciSkuResource(ResourceIdentifier id)
        {
            HciSkuResource.ValidateResourceId(id);
            return new HciSkuResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing an <see cref="UpdateRunResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="UpdateRunResource.CreateResourceIdentifier" /> to create an <see cref="UpdateRunResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="UpdateRunResource"/> object. </returns>
        public virtual UpdateRunResource GetUpdateRunResource(ResourceIdentifier id)
        {
            UpdateRunResource.ValidateResourceId(id);
            return new UpdateRunResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing an <see cref="UpdateSummaryResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="UpdateSummaryResource.CreateResourceIdentifier" /> to create an <see cref="UpdateSummaryResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="UpdateSummaryResource"/> object. </returns>
        public virtual UpdateSummaryResource GetUpdateSummaryResource(ResourceIdentifier id)
        {
            UpdateSummaryResource.ValidateResourceId(id);
            return new UpdateSummaryResource(Client, id);
        }

        /// <summary>
        /// Gets an object representing an <see cref="UpdateResource"/> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="UpdateResource.CreateResourceIdentifier" /> to create an <see cref="UpdateResource"/> <see cref="ResourceIdentifier"/> from its components.
        /// </summary>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="UpdateResource"/> object. </returns>
        public virtual UpdateResource GetUpdateResource(ResourceIdentifier id)
        {
            UpdateResource.ValidateResourceId(id);
            return new UpdateResource(Client, id);
        }
    }
}
