// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Hci.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Hci
{
    /// <summary>
    /// A class representing the NetworkInterface data model.
    /// The network interface resource definition.
    /// </summary>
    public partial class NetworkInterfaceData : TrackedResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="NetworkInterfaceData"/>. </summary>
        /// <param name="location"> The location. </param>
        public NetworkInterfaceData(AzureLocation location) : base(location)
        {
            IPConfigurations = new ChangeTrackingList<IPConfiguration>();
        }

        /// <summary> Initializes a new instance of <see cref="NetworkInterfaceData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="extendedLocation"> The extendedLocation of the resource. </param>
        /// <param name="ipConfigurations"> IPConfigurations - A list of IPConfigurations of the network interface. </param>
        /// <param name="macAddress"> MacAddress - The MAC address of the network interface. </param>
        /// <param name="dnsSettings"> DNS Settings for the interface. </param>
        /// <param name="provisioningState"> Provisioning state of the network interface. </param>
        /// <param name="status"> The observed state of network interfaces. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal NetworkInterfaceData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, IDictionary<string, string> tags, AzureLocation location, ArcVmExtendedLocation extendedLocation, IList<IPConfiguration> ipConfigurations, string macAddress, InterfaceDnsSettings dnsSettings, ProvisioningStateEnum? provisioningState, NetworkInterfaceStatus status, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData, tags, location)
        {
            ExtendedLocation = extendedLocation;
            IPConfigurations = ipConfigurations;
            MacAddress = macAddress;
            DnsSettings = dnsSettings;
            ProvisioningState = provisioningState;
            Status = status;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="NetworkInterfaceData"/> for deserialization. </summary>
        internal NetworkInterfaceData()
        {
        }

        /// <summary> The extendedLocation of the resource. </summary>
        public ArcVmExtendedLocation ExtendedLocation { get; set; }
        /// <summary> IPConfigurations - A list of IPConfigurations of the network interface. </summary>
        public IList<IPConfiguration> IPConfigurations { get; }
        /// <summary> MacAddress - The MAC address of the network interface. </summary>
        public string MacAddress { get; set; }
        /// <summary> DNS Settings for the interface. </summary>
        internal InterfaceDnsSettings DnsSettings { get; set; }
        /// <summary> List of DNS server IP Addresses for the interface. </summary>
        public IList<string> DnsServers
        {
            get
            {
                if (DnsSettings is null)
                    DnsSettings = new InterfaceDnsSettings();
                return DnsSettings.DnsServers;
            }
        }

        /// <summary> Provisioning state of the network interface. </summary>
        public ProvisioningStateEnum? ProvisioningState { get; }
        /// <summary> The observed state of network interfaces. </summary>
        public NetworkInterfaceStatus Status { get; }
    }
}
