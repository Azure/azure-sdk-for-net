// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Hci.Models
{
    /// <summary>
    /// Represents the compliance assignment type of a resource.
    /// Serialized Name: ComplianceAssignmentType
    /// </summary>
    public readonly partial struct ComplianceAssignmentType : IEquatable<ComplianceAssignmentType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ComplianceAssignmentType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ComplianceAssignmentType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AuditValue = "Audit";
        private const string ApplyAndAutoCorrectValue = "ApplyAndAutoCorrect";

        /// <summary>
        /// Report on the state of the machine, but don't make changes.
        /// Serialized Name: ComplianceAssignmentType.Audit
        /// </summary>
        public static ComplianceAssignmentType Audit { get; } = new ComplianceAssignmentType(AuditValue);
        /// <summary>
        /// Applied to the machine. If it drifts, the local service inside the machine makes a correction at the next evaluation.
        /// Serialized Name: ComplianceAssignmentType.ApplyAndAutoCorrect
        /// </summary>
        public static ComplianceAssignmentType ApplyAndAutoCorrect { get; } = new ComplianceAssignmentType(ApplyAndAutoCorrectValue);
        /// <summary> Determines if two <see cref="ComplianceAssignmentType"/> values are the same. </summary>
        public static bool operator ==(ComplianceAssignmentType left, ComplianceAssignmentType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ComplianceAssignmentType"/> values are not the same. </summary>
        public static bool operator !=(ComplianceAssignmentType left, ComplianceAssignmentType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ComplianceAssignmentType"/>. </summary>
        public static implicit operator ComplianceAssignmentType(string value) => new ComplianceAssignmentType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ComplianceAssignmentType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ComplianceAssignmentType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
