// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Hci.Models
{
    public partial class HciNicDetail : IUtf8JsonSerializable, IJsonModel<HciNicDetail>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<HciNicDetail>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<HciNicDetail>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<HciNicDetail>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(HciNicDetail)} does not support writing '{format}' format.");
            }

            writer.WriteStartObject();
            if (options.Format != "W" && Optional.IsDefined(AdapterName))
            {
                writer.WritePropertyName("adapterName"u8);
                writer.WriteStringValue(AdapterName);
            }
            if (options.Format != "W" && Optional.IsDefined(InterfaceDescription))
            {
                writer.WritePropertyName("interfaceDescription"u8);
                writer.WriteStringValue(InterfaceDescription);
            }
            if (options.Format != "W" && Optional.IsDefined(ComponentId))
            {
                writer.WritePropertyName("componentId"u8);
                writer.WriteStringValue(ComponentId);
            }
            if (options.Format != "W" && Optional.IsDefined(DriverVersion))
            {
                writer.WritePropertyName("driverVersion"u8);
                writer.WriteStringValue(DriverVersion);
            }
            if (options.Format != "W" && Optional.IsDefined(Ip4Address))
            {
                writer.WritePropertyName("ip4Address"u8);
                writer.WriteStringValue(Ip4Address);
            }
            if (options.Format != "W" && Optional.IsDefined(SubnetMask))
            {
                writer.WritePropertyName("subnetMask"u8);
                writer.WriteStringValue(SubnetMask);
            }
            if (options.Format != "W" && Optional.IsDefined(DefaultGateway))
            {
                writer.WritePropertyName("defaultGateway"u8);
                writer.WriteStringValue(DefaultGateway);
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(DnsServers))
            {
                writer.WritePropertyName("dnsServers"u8);
                writer.WriteStartArray();
                foreach (var item in DnsServers)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsDefined(DefaultIsolationId))
            {
                writer.WritePropertyName("defaultIsolationId"u8);
                writer.WriteStringValue(DefaultIsolationId);
            }
            if (options.Format != "W" && Optional.IsDefined(MacAddress))
            {
                writer.WritePropertyName("macAddress"u8);
                writer.WriteStringValue(MacAddress);
            }
            if (options.Format != "W" && Optional.IsDefined(Slot))
            {
                writer.WritePropertyName("slot"u8);
                writer.WriteStringValue(Slot);
            }
            if (options.Format != "W" && Optional.IsDefined(SwitchName))
            {
                writer.WritePropertyName("switchName"u8);
                writer.WriteStringValue(SwitchName);
            }
            if (options.Format != "W" && Optional.IsDefined(NicType))
            {
                writer.WritePropertyName("nicType"u8);
                writer.WriteStringValue(NicType);
            }
            if (options.Format != "W" && Optional.IsDefined(VlanId))
            {
                writer.WritePropertyName("vlanId"u8);
                writer.WriteStringValue(VlanId);
            }
            if (options.Format != "W" && Optional.IsDefined(NicStatus))
            {
                writer.WritePropertyName("nicStatus"u8);
                writer.WriteStringValue(NicStatus);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        HciNicDetail IJsonModel<HciNicDetail>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<HciNicDetail>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(HciNicDetail)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeHciNicDetail(document.RootElement, options);
        }

        internal static HciNicDetail DeserializeHciNicDetail(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string adapterName = default;
            string interfaceDescription = default;
            string componentId = default;
            string driverVersion = default;
            string ip4Address = default;
            string subnetMask = default;
            string defaultGateway = default;
            IReadOnlyList<string> dnsServers = default;
            string defaultIsolationId = default;
            string macAddress = default;
            string slot = default;
            string switchName = default;
            string nicType = default;
            string vlanId = default;
            string nicStatus = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("adapterName"u8))
                {
                    adapterName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("interfaceDescription"u8))
                {
                    interfaceDescription = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("componentId"u8))
                {
                    componentId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("driverVersion"u8))
                {
                    driverVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ip4Address"u8))
                {
                    ip4Address = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("subnetMask"u8))
                {
                    subnetMask = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("defaultGateway"u8))
                {
                    defaultGateway = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("dnsServers"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    dnsServers = array;
                    continue;
                }
                if (property.NameEquals("defaultIsolationId"u8))
                {
                    defaultIsolationId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("macAddress"u8))
                {
                    macAddress = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("slot"u8))
                {
                    slot = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("switchName"u8))
                {
                    switchName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("nicType"u8))
                {
                    nicType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("vlanId"u8))
                {
                    vlanId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("nicStatus"u8))
                {
                    nicStatus = property.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new HciNicDetail(
                adapterName,
                interfaceDescription,
                componentId,
                driverVersion,
                ip4Address,
                subnetMask,
                defaultGateway,
                dnsServers ?? new ChangeTrackingList<string>(),
                defaultIsolationId,
                macAddress,
                slot,
                switchName,
                nicType,
                vlanId,
                nicStatus,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<HciNicDetail>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<HciNicDetail>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(HciNicDetail)} does not support writing '{options.Format}' format.");
            }
        }

        HciNicDetail IPersistableModel<HciNicDetail>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<HciNicDetail>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeHciNicDetail(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(HciNicDetail)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<HciNicDetail>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
