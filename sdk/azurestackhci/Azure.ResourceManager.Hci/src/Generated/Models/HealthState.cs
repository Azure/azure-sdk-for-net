// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Hci.Models
{
    /// <summary> The HealthState. </summary>
    public readonly partial struct HealthState : IEquatable<HealthState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="HealthState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public HealthState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "Unknown";
        private const string SuccessValue = "Success";
        private const string FailureValue = "Failure";
        private const string WarningValue = "Warning";
        private const string ErrorValue = "Error";
        private const string InProgressValue = "InProgress";

        /// <summary> Unknown. </summary>
        public static HealthState Unknown { get; } = new HealthState(UnknownValue);
        /// <summary> Success. </summary>
        public static HealthState Success { get; } = new HealthState(SuccessValue);
        /// <summary> Failure. </summary>
        public static HealthState Failure { get; } = new HealthState(FailureValue);
        /// <summary> Warning. </summary>
        public static HealthState Warning { get; } = new HealthState(WarningValue);
        /// <summary> Error. </summary>
        public static HealthState Error { get; } = new HealthState(ErrorValue);
        /// <summary> InProgress. </summary>
        public static HealthState InProgress { get; } = new HealthState(InProgressValue);
        /// <summary> Determines if two <see cref="HealthState"/> values are the same. </summary>
        public static bool operator ==(HealthState left, HealthState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="HealthState"/> values are not the same. </summary>
        public static bool operator !=(HealthState left, HealthState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="HealthState"/>. </summary>
        public static implicit operator HealthState(string value) => new HealthState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is HealthState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(HealthState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
