// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Hci.Models
{
    /// <summary> The format of the actual VHD file [vhd, vhdx]. </summary>
    public readonly partial struct DiskFileFormat : IEquatable<DiskFileFormat>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DiskFileFormat"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DiskFileFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string VhdxValue = "vhdx";
        private const string VhdValue = "vhd";

        /// <summary> vhdx. </summary>
        public static DiskFileFormat Vhdx { get; } = new DiskFileFormat(VhdxValue);
        /// <summary> vhd. </summary>
        public static DiskFileFormat Vhd { get; } = new DiskFileFormat(VhdValue);
        /// <summary> Determines if two <see cref="DiskFileFormat"/> values are the same. </summary>
        public static bool operator ==(DiskFileFormat left, DiskFileFormat right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DiskFileFormat"/> values are not the same. </summary>
        public static bool operator !=(DiskFileFormat left, DiskFileFormat right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DiskFileFormat"/>. </summary>
        public static implicit operator DiskFileFormat(string value) => new DiskFileFormat(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DiskFileFormat other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DiskFileFormat other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
