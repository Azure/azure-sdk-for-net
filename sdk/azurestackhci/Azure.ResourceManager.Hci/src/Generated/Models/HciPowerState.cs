// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Hci.Models
{
    /// <summary> The power state of the virtual machine. </summary>
    public readonly partial struct HciPowerState : IEquatable<HciPowerState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="HciPowerState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public HciPowerState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string DeallocatedValue = "Deallocated";
        private const string DeallocatingValue = "Deallocating";
        private const string RunningValue = "Running";
        private const string StartingValue = "Starting";
        private const string StoppedValue = "Stopped";
        private const string StoppingValue = "Stopping";
        private const string UnknownValue = "Unknown";

        /// <summary> Deallocated. </summary>
        public static HciPowerState Deallocated { get; } = new HciPowerState(DeallocatedValue);
        /// <summary> Deallocating. </summary>
        public static HciPowerState Deallocating { get; } = new HciPowerState(DeallocatingValue);
        /// <summary> Running. </summary>
        public static HciPowerState Running { get; } = new HciPowerState(RunningValue);
        /// <summary> Starting. </summary>
        public static HciPowerState Starting { get; } = new HciPowerState(StartingValue);
        /// <summary> Stopped. </summary>
        public static HciPowerState Stopped { get; } = new HciPowerState(StoppedValue);
        /// <summary> Stopping. </summary>
        public static HciPowerState Stopping { get; } = new HciPowerState(StoppingValue);
        /// <summary> Unknown. </summary>
        public static HciPowerState Unknown { get; } = new HciPowerState(UnknownValue);
        /// <summary> Determines if two <see cref="HciPowerState"/> values are the same. </summary>
        public static bool operator ==(HciPowerState left, HciPowerState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="HciPowerState"/> values are not the same. </summary>
        public static bool operator !=(HciPowerState left, HciPowerState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="HciPowerState"/>. </summary>
        public static implicit operator HciPowerState(string value) => new HciPowerState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is HciPowerState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(HciPowerState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
