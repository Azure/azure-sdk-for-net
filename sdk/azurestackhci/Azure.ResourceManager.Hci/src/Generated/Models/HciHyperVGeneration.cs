// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Hci.Models
{
    /// <summary> The hypervisor generation of the Virtual Machine [V1, V2]. </summary>
    public readonly partial struct HciHyperVGeneration : IEquatable<HciHyperVGeneration>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="HciHyperVGeneration"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public HciHyperVGeneration(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string V1Value = "V1";
        private const string V2Value = "V2";

        /// <summary> V1. </summary>
        public static HciHyperVGeneration V1 { get; } = new HciHyperVGeneration(V1Value);
        /// <summary> V2. </summary>
        public static HciHyperVGeneration V2 { get; } = new HciHyperVGeneration(V2Value);
        /// <summary> Determines if two <see cref="HciHyperVGeneration"/> values are the same. </summary>
        public static bool operator ==(HciHyperVGeneration left, HciHyperVGeneration right) => left.Equals(right);
        /// <summary> Determines if two <see cref="HciHyperVGeneration"/> values are not the same. </summary>
        public static bool operator !=(HciHyperVGeneration left, HciHyperVGeneration right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="HciHyperVGeneration"/>. </summary>
        public static implicit operator HciHyperVGeneration(string value) => new HciHyperVGeneration(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is HciHyperVGeneration other && Equals(other);
        /// <inheritdoc />
        public bool Equals(HciHyperVGeneration other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
