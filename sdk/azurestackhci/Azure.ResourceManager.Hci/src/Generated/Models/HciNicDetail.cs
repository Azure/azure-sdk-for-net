// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.Hci.Models
{
    /// <summary>
    /// The NIC Detail of a device.
    /// Serialized Name: HciNicDetail
    /// </summary>
    public partial class HciNicDetail
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="HciNicDetail"/>. </summary>
        internal HciNicDetail()
        {
            DnsServers = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="HciNicDetail"/>. </summary>
        /// <param name="adapterName">
        /// Adapter Name of NIC
        /// Serialized Name: HciNicDetail.adapterName
        /// </param>
        /// <param name="interfaceDescription">
        /// Interface Description of NIC
        /// Serialized Name: HciNicDetail.interfaceDescription
        /// </param>
        /// <param name="componentId">
        /// Component Id of NIC
        /// Serialized Name: HciNicDetail.componentId
        /// </param>
        /// <param name="driverVersion">
        /// Driver Version of NIC
        /// Serialized Name: HciNicDetail.driverVersion
        /// </param>
        /// <param name="ip4Address">
        /// Subnet Mask of NIC
        /// Serialized Name: HciNicDetail.ip4Address
        /// </param>
        /// <param name="subnetMask">
        /// Subnet Mask of NIC
        /// Serialized Name: HciNicDetail.subnetMask
        /// </param>
        /// <param name="defaultGateway">
        /// Default Gateway of NIC
        /// Serialized Name: HciNicDetail.defaultGateway
        /// </param>
        /// <param name="dnsServers">
        /// DNS Servers for NIC
        /// Serialized Name: HciNicDetail.dnsServers
        /// </param>
        /// <param name="defaultIsolationId">
        /// Default Isolation of Management NIC
        /// Serialized Name: HciNicDetail.defaultIsolationId
        /// </param>
        /// <param name="macAddress">
        /// MAC address information of NIC.
        /// Serialized Name: HciNicDetail.macAddress
        /// </param>
        /// <param name="slot">
        /// The slot attached to the NIC.
        /// Serialized Name: HciNicDetail.slot
        /// </param>
        /// <param name="switchName">
        /// The switch attached to the NIC, if any.
        /// Serialized Name: HciNicDetail.switchName
        /// </param>
        /// <param name="nicType">
        /// The type of NIC, physical, virtual, management.
        /// Serialized Name: HciNicDetail.nicType
        /// </param>
        /// <param name="vlanId">
        /// The VLAN ID of the physical NIC.
        /// Serialized Name: HciNicDetail.vlanId
        /// </param>
        /// <param name="nicStatus">
        /// The status of NIC, up, disconnected.
        /// Serialized Name: HciNicDetail.nicStatus
        /// </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal HciNicDetail(string adapterName, string interfaceDescription, string componentId, string driverVersion, string ip4Address, string subnetMask, string defaultGateway, IReadOnlyList<string> dnsServers, string defaultIsolationId, string macAddress, string slot, string switchName, string nicType, string vlanId, string nicStatus, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            AdapterName = adapterName;
            InterfaceDescription = interfaceDescription;
            ComponentId = componentId;
            DriverVersion = driverVersion;
            Ip4Address = ip4Address;
            SubnetMask = subnetMask;
            DefaultGateway = defaultGateway;
            DnsServers = dnsServers;
            DefaultIsolationId = defaultIsolationId;
            MacAddress = macAddress;
            Slot = slot;
            SwitchName = switchName;
            NicType = nicType;
            VlanId = vlanId;
            NicStatus = nicStatus;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary>
        /// Adapter Name of NIC
        /// Serialized Name: HciNicDetail.adapterName
        /// </summary>
        [WirePath("adapterName")]
        public string AdapterName { get; }
        /// <summary>
        /// Interface Description of NIC
        /// Serialized Name: HciNicDetail.interfaceDescription
        /// </summary>
        [WirePath("interfaceDescription")]
        public string InterfaceDescription { get; }
        /// <summary>
        /// Component Id of NIC
        /// Serialized Name: HciNicDetail.componentId
        /// </summary>
        [WirePath("componentId")]
        public string ComponentId { get; }
        /// <summary>
        /// Driver Version of NIC
        /// Serialized Name: HciNicDetail.driverVersion
        /// </summary>
        [WirePath("driverVersion")]
        public string DriverVersion { get; }
        /// <summary>
        /// Subnet Mask of NIC
        /// Serialized Name: HciNicDetail.ip4Address
        /// </summary>
        [WirePath("ip4Address")]
        public string Ip4Address { get; }
        /// <summary>
        /// Subnet Mask of NIC
        /// Serialized Name: HciNicDetail.subnetMask
        /// </summary>
        [WirePath("subnetMask")]
        public string SubnetMask { get; }
        /// <summary>
        /// Default Gateway of NIC
        /// Serialized Name: HciNicDetail.defaultGateway
        /// </summary>
        [WirePath("defaultGateway")]
        public string DefaultGateway { get; }
        /// <summary>
        /// DNS Servers for NIC
        /// Serialized Name: HciNicDetail.dnsServers
        /// </summary>
        [WirePath("dnsServers")]
        public IReadOnlyList<string> DnsServers { get; }
        /// <summary>
        /// Default Isolation of Management NIC
        /// Serialized Name: HciNicDetail.defaultIsolationId
        /// </summary>
        [WirePath("defaultIsolationId")]
        public string DefaultIsolationId { get; }
        /// <summary>
        /// MAC address information of NIC.
        /// Serialized Name: HciNicDetail.macAddress
        /// </summary>
        [WirePath("macAddress")]
        public string MacAddress { get; }
        /// <summary>
        /// The slot attached to the NIC.
        /// Serialized Name: HciNicDetail.slot
        /// </summary>
        [WirePath("slot")]
        public string Slot { get; }
        /// <summary>
        /// The switch attached to the NIC, if any.
        /// Serialized Name: HciNicDetail.switchName
        /// </summary>
        [WirePath("switchName")]
        public string SwitchName { get; }
        /// <summary>
        /// The type of NIC, physical, virtual, management.
        /// Serialized Name: HciNicDetail.nicType
        /// </summary>
        [WirePath("nicType")]
        public string NicType { get; }
        /// <summary>
        /// The VLAN ID of the physical NIC.
        /// Serialized Name: HciNicDetail.vlanId
        /// </summary>
        [WirePath("vlanId")]
        public string VlanId { get; }
        /// <summary>
        /// The status of NIC, up, disconnected.
        /// Serialized Name: HciNicDetail.nicStatus
        /// </summary>
        [WirePath("nicStatus")]
        public string NicStatus { get; }
    }
}
