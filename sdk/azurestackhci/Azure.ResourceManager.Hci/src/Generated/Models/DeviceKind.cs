// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Hci.Models
{
    /// <summary> Edge device kind. </summary>
    internal readonly partial struct DeviceKind : IEquatable<DeviceKind>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="DeviceKind"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public DeviceKind(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string HCIValue = "HCI";

        /// <summary> Arc-enabled edge device with HCI OS. </summary>
        public static DeviceKind HCI { get; } = new DeviceKind(HCIValue);
        /// <summary> Determines if two <see cref="DeviceKind"/> values are the same. </summary>
        public static bool operator ==(DeviceKind left, DeviceKind right) => left.Equals(right);
        /// <summary> Determines if two <see cref="DeviceKind"/> values are not the same. </summary>
        public static bool operator !=(DeviceKind left, DeviceKind right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="DeviceKind"/>. </summary>
        public static implicit operator DeviceKind(string value) => new DeviceKind(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is DeviceKind other && Equals(other);
        /// <inheritdoc />
        public bool Equals(DeviceKind other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
