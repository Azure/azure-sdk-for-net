// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Hci.Models
{
    /// <summary> Type of the network. </summary>
    public readonly partial struct HciNetworkType : IEquatable<HciNetworkType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="HciNetworkType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public HciNetworkType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NatValue = "NAT";
        private const string TransparentValue = "Transparent";
        private const string L2BridgeValue = "L2Bridge";
        private const string L2TunnelValue = "L2Tunnel";
        private const string IcsValue = "ICS";
        private const string PrivateValue = "Private";
        private const string OverlayValue = "Overlay";
        private const string InternalValue = "Internal";
        private const string MirroredValue = "Mirrored";

        /// <summary> NAT. </summary>
        public static HciNetworkType Nat { get; } = new HciNetworkType(NatValue);
        /// <summary> Transparent. </summary>
        public static HciNetworkType Transparent { get; } = new HciNetworkType(TransparentValue);
        /// <summary> L2Bridge. </summary>
        public static HciNetworkType L2Bridge { get; } = new HciNetworkType(L2BridgeValue);
        /// <summary> L2Tunnel. </summary>
        public static HciNetworkType L2Tunnel { get; } = new HciNetworkType(L2TunnelValue);
        /// <summary> ICS. </summary>
        public static HciNetworkType Ics { get; } = new HciNetworkType(IcsValue);
        /// <summary> Private. </summary>
        public static HciNetworkType Private { get; } = new HciNetworkType(PrivateValue);
        /// <summary> Overlay. </summary>
        public static HciNetworkType Overlay { get; } = new HciNetworkType(OverlayValue);
        /// <summary> Internal. </summary>
        public static HciNetworkType Internal { get; } = new HciNetworkType(InternalValue);
        /// <summary> Mirrored. </summary>
        public static HciNetworkType Mirrored { get; } = new HciNetworkType(MirroredValue);
        /// <summary> Determines if two <see cref="HciNetworkType"/> values are the same. </summary>
        public static bool operator ==(HciNetworkType left, HciNetworkType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="HciNetworkType"/> values are not the same. </summary>
        public static bool operator !=(HciNetworkType left, HciNetworkType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="HciNetworkType"/>. </summary>
        public static implicit operator HciNetworkType(string value) => new HciNetworkType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is HciNetworkType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(HciNetworkType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
