// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Hci.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Hci
{
    public partial class UpdateData : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Location))
            {
                writer.WritePropertyName("location");
                writer.WriteStringValue(Location.Value);
            }
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Optional.IsDefined(InstalledOn))
            {
                writer.WritePropertyName("installedDate");
                writer.WriteStringValue(InstalledOn.Value, "O");
            }
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description");
                writer.WriteStringValue(Description);
            }
            if (Optional.IsDefined(State))
            {
                writer.WritePropertyName("state");
                writer.WriteStringValue(State.Value.ToString());
            }
            if (Optional.IsCollectionDefined(Prerequisites))
            {
                writer.WritePropertyName("prerequisites");
                writer.WriteStartArray();
                foreach (var item in Prerequisites)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(ComponentVersions))
            {
                writer.WritePropertyName("componentVersions");
                writer.WriteStartArray();
                foreach (var item in ComponentVersions)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(RebootRequired))
            {
                writer.WritePropertyName("rebootRequired");
                writer.WriteStringValue(RebootRequired.Value.ToString());
            }
            if (Optional.IsDefined(HealthState))
            {
                writer.WritePropertyName("healthState");
                writer.WriteStringValue(HealthState.Value.ToString());
            }
            if (Optional.IsCollectionDefined(HealthCheckResult))
            {
                writer.WritePropertyName("healthCheckResult");
                writer.WriteStartArray();
                foreach (var item in HealthCheckResult)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(HealthCheckOn))
            {
                writer.WritePropertyName("healthCheckDate");
                writer.WriteStringValue(HealthCheckOn.Value, "O");
            }
            if (Optional.IsDefined(PackagePath))
            {
                writer.WritePropertyName("packagePath");
                writer.WriteStringValue(PackagePath);
            }
            if (Optional.IsDefined(PackageSizeInMb))
            {
                writer.WritePropertyName("packageSizeInMb");
                writer.WriteNumberValue(PackageSizeInMb.Value);
            }
            if (Optional.IsDefined(DisplayName))
            {
                writer.WritePropertyName("displayName");
                writer.WriteStringValue(DisplayName);
            }
            if (Optional.IsDefined(Version))
            {
                writer.WritePropertyName("version");
                writer.WriteStringValue(Version);
            }
            if (Optional.IsDefined(Publisher))
            {
                writer.WritePropertyName("publisher");
                writer.WriteStringValue(Publisher);
            }
            if (Optional.IsDefined(ReleaseLink))
            {
                writer.WritePropertyName("releaseLink");
                writer.WriteStringValue(ReleaseLink);
            }
            if (Optional.IsDefined(AvailabilityType))
            {
                writer.WritePropertyName("availabilityType");
                writer.WriteStringValue(AvailabilityType.Value.ToString());
            }
            if (Optional.IsDefined(PackageType))
            {
                writer.WritePropertyName("packageType");
                writer.WriteStringValue(PackageType);
            }
            if (Optional.IsDefined(AdditionalProperties))
            {
                writer.WritePropertyName("additionalProperties");
                writer.WriteStringValue(AdditionalProperties);
            }
            writer.WritePropertyName("updateStateProperties");
            writer.WriteStartObject();
            if (Optional.IsDefined(ProgressPercentage))
            {
                writer.WritePropertyName("progressPercentage");
                writer.WriteNumberValue(ProgressPercentage.Value);
            }
            if (Optional.IsDefined(NotifyMessage))
            {
                writer.WritePropertyName("notifyMessage");
                writer.WriteStringValue(NotifyMessage);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static UpdateData DeserializeUpdateData(JsonElement element)
        {
            Optional<AzureLocation> location = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<HciProvisioningState> provisioningState = default;
            Optional<DateTimeOffset> installedDate = default;
            Optional<string> description = default;
            Optional<State> state = default;
            Optional<IList<UpdatePrerequisite>> prerequisites = default;
            Optional<IList<PackageVersionInfo>> componentVersions = default;
            Optional<RebootRequirement> rebootRequired = default;
            Optional<HealthState> healthState = default;
            Optional<IList<PrecheckResult>> healthCheckResult = default;
            Optional<DateTimeOffset> healthCheckDate = default;
            Optional<string> packagePath = default;
            Optional<float> packageSizeInMb = default;
            Optional<string> displayName = default;
            Optional<string> version = default;
            Optional<string> publisher = default;
            Optional<string> releaseLink = default;
            Optional<AvailabilityType> availabilityType = default;
            Optional<string> packageType = default;
            Optional<string> additionalProperties = default;
            Optional<float> progressPercentage = default;
            Optional<string> notifyMessage = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("location"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    location = new AzureLocation(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("provisioningState"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            provisioningState = new HciProvisioningState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("installedDate"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            installedDate = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("description"))
                        {
                            description = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("state"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            state = new State(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("prerequisites"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<UpdatePrerequisite> array = new List<UpdatePrerequisite>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(UpdatePrerequisite.DeserializeUpdatePrerequisite(item));
                            }
                            prerequisites = array;
                            continue;
                        }
                        if (property0.NameEquals("componentVersions"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<PackageVersionInfo> array = new List<PackageVersionInfo>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(PackageVersionInfo.DeserializePackageVersionInfo(item));
                            }
                            componentVersions = array;
                            continue;
                        }
                        if (property0.NameEquals("rebootRequired"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            rebootRequired = new RebootRequirement(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("healthState"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            healthState = new HealthState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("healthCheckResult"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            List<PrecheckResult> array = new List<PrecheckResult>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(PrecheckResult.DeserializePrecheckResult(item));
                            }
                            healthCheckResult = array;
                            continue;
                        }
                        if (property0.NameEquals("healthCheckDate"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            healthCheckDate = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("packagePath"))
                        {
                            packagePath = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("packageSizeInMb"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            packageSizeInMb = property0.Value.GetSingle();
                            continue;
                        }
                        if (property0.NameEquals("displayName"))
                        {
                            displayName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("version"))
                        {
                            version = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("publisher"))
                        {
                            publisher = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("releaseLink"))
                        {
                            releaseLink = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("availabilityType"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            availabilityType = new AvailabilityType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("packageType"))
                        {
                            packageType = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("additionalProperties"))
                        {
                            additionalProperties = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("updateStateProperties"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                if (property1.NameEquals("progressPercentage"))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        property1.ThrowNonNullablePropertyIsNull();
                                        continue;
                                    }
                                    progressPercentage = property1.Value.GetSingle();
                                    continue;
                                }
                                if (property1.NameEquals("notifyMessage"))
                                {
                                    notifyMessage = property1.Value.GetString();
                                    continue;
                                }
                            }
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new UpdateData(id, name, type, systemData.Value, Optional.ToNullable(location), Optional.ToNullable(provisioningState), Optional.ToNullable(installedDate), description.Value, Optional.ToNullable(state), Optional.ToList(prerequisites), Optional.ToList(componentVersions), Optional.ToNullable(rebootRequired), Optional.ToNullable(healthState), Optional.ToList(healthCheckResult), Optional.ToNullable(healthCheckDate), packagePath.Value, Optional.ToNullable(packageSizeInMb), displayName.Value, version.Value, publisher.Value, releaseLink.Value, Optional.ToNullable(availabilityType), packageType.Value, additionalProperties.Value, Optional.ToNullable(progressPercentage), notifyMessage.Value);
        }
    }
}
