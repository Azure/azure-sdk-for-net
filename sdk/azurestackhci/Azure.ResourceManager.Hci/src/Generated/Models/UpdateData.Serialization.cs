// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Hci.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Hci
{
    public partial class UpdateData : IUtf8JsonSerializable, IJsonModel<UpdateData>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<UpdateData>)this).Write(writer, new ModelReaderWriterOptions("W"));

        void IJsonModel<UpdateData>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<UpdateData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(UpdateData)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            if (Optional.IsDefined(Location))
            {
                writer.WritePropertyName("location"u8);
                writer.WriteStringValue(Location.Value);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("id"u8);
                writer.WriteStringValue(Id);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            if (options.Format != "W")
            {
                writer.WritePropertyName("type"u8);
                writer.WriteStringValue(ResourceType);
            }
            if (options.Format != "W" && Optional.IsDefined(SystemData))
            {
                writer.WritePropertyName("systemData"u8);
                JsonSerializer.Serialize(writer, SystemData);
            }
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (Optional.IsDefined(InstalledOn))
            {
                writer.WritePropertyName("installedDate"u8);
                writer.WriteStringValue(InstalledOn.Value, "O");
            }
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description"u8);
                writer.WriteStringValue(Description);
            }
            if (Optional.IsDefined(State))
            {
                writer.WritePropertyName("state"u8);
                writer.WriteStringValue(State.Value.ToString());
            }
            if (Optional.IsCollectionDefined(Prerequisites))
            {
                writer.WritePropertyName("prerequisites"u8);
                writer.WriteStartArray();
                foreach (var item in Prerequisites)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(ComponentVersions))
            {
                writer.WritePropertyName("componentVersions"u8);
                writer.WriteStartArray();
                foreach (var item in ComponentVersions)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(RebootRequired))
            {
                writer.WritePropertyName("rebootRequired"u8);
                writer.WriteStringValue(RebootRequired.Value.ToString());
            }
            if (Optional.IsDefined(HealthState))
            {
                writer.WritePropertyName("healthState"u8);
                writer.WriteStringValue(HealthState.Value.ToString());
            }
            if (Optional.IsCollectionDefined(HealthCheckResult))
            {
                writer.WritePropertyName("healthCheckResult"u8);
                writer.WriteStartArray();
                foreach (var item in HealthCheckResult)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(HealthCheckOn))
            {
                writer.WritePropertyName("healthCheckDate"u8);
                writer.WriteStringValue(HealthCheckOn.Value, "O");
            }
            if (Optional.IsDefined(PackagePath))
            {
                writer.WritePropertyName("packagePath"u8);
                writer.WriteStringValue(PackagePath);
            }
            if (Optional.IsDefined(PackageSizeInMb))
            {
                writer.WritePropertyName("packageSizeInMb"u8);
                writer.WriteNumberValue(PackageSizeInMb.Value);
            }
            if (Optional.IsDefined(DisplayName))
            {
                writer.WritePropertyName("displayName"u8);
                writer.WriteStringValue(DisplayName);
            }
            if (Optional.IsDefined(Version))
            {
                writer.WritePropertyName("version"u8);
                writer.WriteStringValue(Version);
            }
            if (Optional.IsDefined(Publisher))
            {
                writer.WritePropertyName("publisher"u8);
                writer.WriteStringValue(Publisher);
            }
            if (Optional.IsDefined(ReleaseLink))
            {
                writer.WritePropertyName("releaseLink"u8);
                writer.WriteStringValue(ReleaseLink);
            }
            if (Optional.IsDefined(AvailabilityType))
            {
                writer.WritePropertyName("availabilityType"u8);
                writer.WriteStringValue(AvailabilityType.Value.ToString());
            }
            if (Optional.IsDefined(PackageType))
            {
                writer.WritePropertyName("packageType"u8);
                writer.WriteStringValue(PackageType);
            }
            if (Optional.IsDefined(AdditionalProperties))
            {
                writer.WritePropertyName("additionalProperties"u8);
                writer.WriteStringValue(AdditionalProperties);
            }
            writer.WritePropertyName("updateStateProperties"u8);
            writer.WriteStartObject();
            if (Optional.IsDefined(ProgressPercentage))
            {
                writer.WritePropertyName("progressPercentage"u8);
                writer.WriteNumberValue(ProgressPercentage.Value);
            }
            if (Optional.IsDefined(NotifyMessage))
            {
                writer.WritePropertyName("notifyMessage"u8);
                writer.WriteStringValue(NotifyMessage);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        UpdateData IJsonModel<UpdateData>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<UpdateData>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(UpdateData)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeUpdateData(document.RootElement, options);
        }

        internal static UpdateData DeserializeUpdateData(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<AzureLocation> location = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<HciProvisioningState> provisioningState = default;
            Optional<DateTimeOffset> installedDate = default;
            Optional<string> description = default;
            Optional<HciUpdateState> state = default;
            Optional<IList<UpdatePrerequisite>> prerequisites = default;
            Optional<IList<HciPackageVersionInfo>> componentVersions = default;
            Optional<HciNodeRebootRequirement> rebootRequired = default;
            Optional<HciHealthState> healthState = default;
            Optional<IList<HciPrecheckResult>> healthCheckResult = default;
            Optional<DateTimeOffset> healthCheckDate = default;
            Optional<string> packagePath = default;
            Optional<float> packageSizeInMb = default;
            Optional<string> displayName = default;
            Optional<string> version = default;
            Optional<string> publisher = default;
            Optional<string> releaseLink = default;
            Optional<HciAvailabilityType> availabilityType = default;
            Optional<string> packageType = default;
            Optional<string> additionalProperties = default;
            Optional<float> progressPercentage = default;
            Optional<string> notifyMessage = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("location"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    location = new AzureLocation(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("provisioningState"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            provisioningState = new HciProvisioningState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("installedDate"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            installedDate = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("description"u8))
                        {
                            description = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("state"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            state = new HciUpdateState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("prerequisites"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<UpdatePrerequisite> array = new List<UpdatePrerequisite>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(UpdatePrerequisite.DeserializeUpdatePrerequisite(item));
                            }
                            prerequisites = array;
                            continue;
                        }
                        if (property0.NameEquals("componentVersions"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<HciPackageVersionInfo> array = new List<HciPackageVersionInfo>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(HciPackageVersionInfo.DeserializeHciPackageVersionInfo(item));
                            }
                            componentVersions = array;
                            continue;
                        }
                        if (property0.NameEquals("rebootRequired"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            rebootRequired = new HciNodeRebootRequirement(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("healthState"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            healthState = new HciHealthState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("healthCheckResult"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<HciPrecheckResult> array = new List<HciPrecheckResult>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(HciPrecheckResult.DeserializeHciPrecheckResult(item));
                            }
                            healthCheckResult = array;
                            continue;
                        }
                        if (property0.NameEquals("healthCheckDate"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            healthCheckDate = property0.Value.GetDateTimeOffset("O");
                            continue;
                        }
                        if (property0.NameEquals("packagePath"u8))
                        {
                            packagePath = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("packageSizeInMb"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            packageSizeInMb = property0.Value.GetSingle();
                            continue;
                        }
                        if (property0.NameEquals("displayName"u8))
                        {
                            displayName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("version"u8))
                        {
                            version = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("publisher"u8))
                        {
                            publisher = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("releaseLink"u8))
                        {
                            releaseLink = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("availabilityType"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            availabilityType = new HciAvailabilityType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("packageType"u8))
                        {
                            packageType = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("additionalProperties"u8))
                        {
                            additionalProperties = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("updateStateProperties"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                if (property1.NameEquals("progressPercentage"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    progressPercentage = property1.Value.GetSingle();
                                    continue;
                                }
                                if (property1.NameEquals("notifyMessage"u8))
                                {
                                    notifyMessage = property1.Value.GetString();
                                    continue;
                                }
                            }
                            continue;
                        }
                    }
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new UpdateData(id, name, type, systemData.Value, Optional.ToNullable(location), Optional.ToNullable(provisioningState), Optional.ToNullable(installedDate), description.Value, Optional.ToNullable(state), Optional.ToList(prerequisites), Optional.ToList(componentVersions), Optional.ToNullable(rebootRequired), Optional.ToNullable(healthState), Optional.ToList(healthCheckResult), Optional.ToNullable(healthCheckDate), packagePath.Value, Optional.ToNullable(packageSizeInMb), displayName.Value, version.Value, publisher.Value, releaseLink.Value, Optional.ToNullable(availabilityType), packageType.Value, additionalProperties.Value, Optional.ToNullable(progressPercentage), notifyMessage.Value, serializedAdditionalRawData);
        }

        private BinaryData SerializeBicep(ModelReaderWriterOptions options)
        {
            StringBuilder builder = new StringBuilder();
            builder.AppendLine("{");

            if (Optional.IsDefined(Name))
            {
                builder.Append("  name:");
                if (Name.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{Name}'''");
                }
                else
                {
                    builder.AppendLine($" '{Name}'");
                }
            }

            if (Optional.IsDefined(Location))
            {
                builder.Append("  location:");
                builder.AppendLine($" '{Location.Value.ToString()}'");
            }

            if (Optional.IsDefined(Id))
            {
                builder.Append("  id:");
                builder.AppendLine($" '{Id.ToString()}'");
            }

            if (Optional.IsDefined(SystemData))
            {
                builder.Append("  systemData:");
                builder.AppendLine($" '{SystemData.ToString()}'");
            }

            builder.Append("  properties:");
            builder.AppendLine(" {");
            if (Optional.IsDefined(ProvisioningState))
            {
                builder.Append("    provisioningState:");
                builder.AppendLine($" '{ProvisioningState.Value.ToString()}'");
            }

            if (Optional.IsDefined(InstalledOn))
            {
                builder.Append("    installedDate:");
                var formattedDateTimeString = TypeFormatters.ToString(InstalledOn.Value, "o");
                builder.AppendLine($" '{formattedDateTimeString}'");
            }

            if (Optional.IsDefined(Description))
            {
                builder.Append("    description:");
                if (Description.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{Description}'''");
                }
                else
                {
                    builder.AppendLine($" '{Description}'");
                }
            }

            if (Optional.IsDefined(State))
            {
                builder.Append("    state:");
                builder.AppendLine($" '{State.Value.ToString()}'");
            }

            if (Optional.IsCollectionDefined(Prerequisites))
            {
                if (Prerequisites.Any())
                {
                    builder.Append("    prerequisites:");
                    builder.AppendLine(" [");
                    foreach (var item in Prerequisites)
                    {
                        AppendChildObject(builder, item, options, 6, true);
                    }
                    builder.AppendLine("    ]");
                }
            }

            if (Optional.IsCollectionDefined(ComponentVersions))
            {
                if (ComponentVersions.Any())
                {
                    builder.Append("    componentVersions:");
                    builder.AppendLine(" [");
                    foreach (var item in ComponentVersions)
                    {
                        AppendChildObject(builder, item, options, 6, true);
                    }
                    builder.AppendLine("    ]");
                }
            }

            if (Optional.IsDefined(RebootRequired))
            {
                builder.Append("    rebootRequired:");
                builder.AppendLine($" '{RebootRequired.Value.ToString()}'");
            }

            if (Optional.IsDefined(HealthState))
            {
                builder.Append("    healthState:");
                builder.AppendLine($" '{HealthState.Value.ToString()}'");
            }

            if (Optional.IsCollectionDefined(HealthCheckResult))
            {
                if (HealthCheckResult.Any())
                {
                    builder.Append("    healthCheckResult:");
                    builder.AppendLine(" [");
                    foreach (var item in HealthCheckResult)
                    {
                        AppendChildObject(builder, item, options, 6, true);
                    }
                    builder.AppendLine("    ]");
                }
            }

            if (Optional.IsDefined(HealthCheckOn))
            {
                builder.Append("    healthCheckDate:");
                var formattedDateTimeString = TypeFormatters.ToString(HealthCheckOn.Value, "o");
                builder.AppendLine($" '{formattedDateTimeString}'");
            }

            if (Optional.IsDefined(PackagePath))
            {
                builder.Append("    packagePath:");
                if (PackagePath.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{PackagePath}'''");
                }
                else
                {
                    builder.AppendLine($" '{PackagePath}'");
                }
            }

            if (Optional.IsDefined(PackageSizeInMb))
            {
                builder.Append("    packageSizeInMb:");
                builder.AppendLine($" '{PackageSizeInMb.Value.ToString()}'");
            }

            if (Optional.IsDefined(DisplayName))
            {
                builder.Append("    displayName:");
                if (DisplayName.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{DisplayName}'''");
                }
                else
                {
                    builder.AppendLine($" '{DisplayName}'");
                }
            }

            if (Optional.IsDefined(Version))
            {
                builder.Append("    version:");
                if (Version.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{Version}'''");
                }
                else
                {
                    builder.AppendLine($" '{Version}'");
                }
            }

            if (Optional.IsDefined(Publisher))
            {
                builder.Append("    publisher:");
                if (Publisher.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{Publisher}'''");
                }
                else
                {
                    builder.AppendLine($" '{Publisher}'");
                }
            }

            if (Optional.IsDefined(ReleaseLink))
            {
                builder.Append("    releaseLink:");
                if (ReleaseLink.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{ReleaseLink}'''");
                }
                else
                {
                    builder.AppendLine($" '{ReleaseLink}'");
                }
            }

            if (Optional.IsDefined(AvailabilityType))
            {
                builder.Append("    availabilityType:");
                builder.AppendLine($" '{AvailabilityType.Value.ToString()}'");
            }

            if (Optional.IsDefined(PackageType))
            {
                builder.Append("    packageType:");
                if (PackageType.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{PackageType}'''");
                }
                else
                {
                    builder.AppendLine($" '{PackageType}'");
                }
            }

            if (Optional.IsDefined(AdditionalProperties))
            {
                builder.Append("    additionalProperties:");
                if (AdditionalProperties.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{AdditionalProperties}'''");
                }
                else
                {
                    builder.AppendLine($" '{AdditionalProperties}'");
                }
            }

            builder.Append("    updateStateProperties:");
            builder.AppendLine(" {");
            if (Optional.IsDefined(ProgressPercentage))
            {
                builder.Append("      progressPercentage:");
                builder.AppendLine($" '{ProgressPercentage.Value.ToString()}'");
            }

            if (Optional.IsDefined(NotifyMessage))
            {
                builder.Append("      notifyMessage:");
                if (NotifyMessage.Contains(Environment.NewLine))
                {
                    builder.AppendLine(" '''");
                    builder.AppendLine($"{NotifyMessage}'''");
                }
                else
                {
                    builder.AppendLine($" '{NotifyMessage}'");
                }
            }

            builder.AppendLine("    }");
            builder.AppendLine("  }");
            builder.AppendLine("}");
            return BinaryData.FromString(builder.ToString());
        }

        private void AppendChildObject(StringBuilder stringBuilder, object childObject, ModelReaderWriterOptions options, int spaces, bool indentFirstLine)
        {
            string indent = new string(' ', spaces);
            BinaryData data = ModelReaderWriter.Write(childObject, options);
            string[] lines = data.ToString().Split(Environment.NewLine.ToCharArray(), StringSplitOptions.RemoveEmptyEntries);
            bool inMultilineString = false;
            for (int i = 0; i < lines.Length; i++)
            {
                string line = lines[i];
                if (inMultilineString)
                {
                    if (line.Contains("'''"))
                    {
                        inMultilineString = false;
                    }
                    stringBuilder.AppendLine(line);
                    continue;
                }
                if (line.Contains("'''"))
                {
                    inMultilineString = true;
                    stringBuilder.AppendLine($"{indent}{line}");
                    continue;
                }
                if (i == 0 && !indentFirstLine)
                {
                    stringBuilder.AppendLine($" {line}");
                }
                else
                {
                    stringBuilder.AppendLine($"{indent}{line}");
                }
            }
        }

        BinaryData IPersistableModel<UpdateData>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<UpdateData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                case "B":
                    return SerializeBicep(options);
                default:
                    throw new FormatException($"The model {nameof(UpdateData)} does not support '{options.Format}' format.");
            }
        }

        UpdateData IPersistableModel<UpdateData>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<UpdateData>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeUpdateData(document.RootElement, options);
                    }
                case "B":
                    throw new InvalidOperationException("Bicep deserialization is not supported for this type.");
                default:
                    throw new FormatException($"The model {nameof(UpdateData)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<UpdateData>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
