// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Hci.Models
{
    /// <summary> State of the update as it relates to this stamp. </summary>
    public readonly partial struct State : IEquatable<State>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="State"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public State(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string HasPrerequisiteValue = "HasPrerequisite";
        private const string ObsoleteValue = "Obsolete";
        private const string ReadyValue = "Ready";
        private const string NotApplicableBecauseAnotherUpdateIsInProgressValue = "NotApplicableBecauseAnotherUpdateIsInProgress";
        private const string PreparingValue = "Preparing";
        private const string InstallingValue = "Installing";
        private const string InstalledValue = "Installed";
        private const string PreparationFailedValue = "PreparationFailed";
        private const string InstallationFailedValue = "InstallationFailed";
        private const string InvalidValue = "Invalid";
        private const string RecalledValue = "Recalled";
        private const string DownloadingValue = "Downloading";
        private const string DownloadFailedValue = "DownloadFailed";
        private const string HealthCheckingValue = "HealthChecking";
        private const string HealthCheckFailedValue = "HealthCheckFailed";
        private const string ReadyToInstallValue = "ReadyToInstall";
        private const string ScanInProgressValue = "ScanInProgress";
        private const string ScanFailedValue = "ScanFailed";

        /// <summary> HasPrerequisite. </summary>
        public static State HasPrerequisite { get; } = new State(HasPrerequisiteValue);
        /// <summary> Obsolete. </summary>
        public static State Obsolete { get; } = new State(ObsoleteValue);
        /// <summary> Ready. </summary>
        public static State Ready { get; } = new State(ReadyValue);
        /// <summary> NotApplicableBecauseAnotherUpdateIsInProgress. </summary>
        public static State NotApplicableBecauseAnotherUpdateIsInProgress { get; } = new State(NotApplicableBecauseAnotherUpdateIsInProgressValue);
        /// <summary> Preparing. </summary>
        public static State Preparing { get; } = new State(PreparingValue);
        /// <summary> Installing. </summary>
        public static State Installing { get; } = new State(InstallingValue);
        /// <summary> Installed. </summary>
        public static State Installed { get; } = new State(InstalledValue);
        /// <summary> PreparationFailed. </summary>
        public static State PreparationFailed { get; } = new State(PreparationFailedValue);
        /// <summary> InstallationFailed. </summary>
        public static State InstallationFailed { get; } = new State(InstallationFailedValue);
        /// <summary> Invalid. </summary>
        public static State Invalid { get; } = new State(InvalidValue);
        /// <summary> Recalled. </summary>
        public static State Recalled { get; } = new State(RecalledValue);
        /// <summary> Downloading. </summary>
        public static State Downloading { get; } = new State(DownloadingValue);
        /// <summary> DownloadFailed. </summary>
        public static State DownloadFailed { get; } = new State(DownloadFailedValue);
        /// <summary> HealthChecking. </summary>
        public static State HealthChecking { get; } = new State(HealthCheckingValue);
        /// <summary> HealthCheckFailed. </summary>
        public static State HealthCheckFailed { get; } = new State(HealthCheckFailedValue);
        /// <summary> ReadyToInstall. </summary>
        public static State ReadyToInstall { get; } = new State(ReadyToInstallValue);
        /// <summary> ScanInProgress. </summary>
        public static State ScanInProgress { get; } = new State(ScanInProgressValue);
        /// <summary> ScanFailed. </summary>
        public static State ScanFailed { get; } = new State(ScanFailedValue);
        /// <summary> Determines if two <see cref="State"/> values are the same. </summary>
        public static bool operator ==(State left, State right) => left.Equals(right);
        /// <summary> Determines if two <see cref="State"/> values are not the same. </summary>
        public static bool operator !=(State left, State right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="State"/>. </summary>
        public static implicit operator State(string value) => new State(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is State other && Equals(other);
        /// <inheritdoc />
        public bool Equals(State other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
