// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Hci.Models
{
    /// <summary>
    /// Extension managed by user or Azure.
    /// Serialized Name: ExtensionManagedBy
    /// </summary>
    public readonly partial struct ExtensionManagedBy : IEquatable<ExtensionManagedBy>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ExtensionManagedBy"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ExtensionManagedBy(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UserValue = "User";
        private const string AzureValue = "Azure";

        /// <summary>
        /// User
        /// Serialized Name: ExtensionManagedBy.User
        /// </summary>
        public static ExtensionManagedBy User { get; } = new ExtensionManagedBy(UserValue);
        /// <summary>
        /// Azure
        /// Serialized Name: ExtensionManagedBy.Azure
        /// </summary>
        public static ExtensionManagedBy Azure { get; } = new ExtensionManagedBy(AzureValue);
        /// <summary> Determines if two <see cref="ExtensionManagedBy"/> values are the same. </summary>
        public static bool operator ==(ExtensionManagedBy left, ExtensionManagedBy right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ExtensionManagedBy"/> values are not the same. </summary>
        public static bool operator !=(ExtensionManagedBy left, ExtensionManagedBy right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ExtensionManagedBy"/>. </summary>
        public static implicit operator ExtensionManagedBy(string value) => new ExtensionManagedBy(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ExtensionManagedBy other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ExtensionManagedBy other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
