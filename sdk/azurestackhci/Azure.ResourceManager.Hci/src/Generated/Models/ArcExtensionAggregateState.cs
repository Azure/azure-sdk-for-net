// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Hci.Models
{
    /// <summary>
    /// Aggregate state of Arc Extensions across the nodes in this HCI cluster.
    /// Serialized Name: ExtensionAggregateState
    /// </summary>
    public readonly partial struct ArcExtensionAggregateState : IEquatable<ArcExtensionAggregateState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ArcExtensionAggregateState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ArcExtensionAggregateState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NotSpecifiedValue = "NotSpecified";
        private const string ErrorValue = "Error";
        private const string SucceededValue = "Succeeded";
        private const string CanceledValue = "Canceled";
        private const string FailedValue = "Failed";
        private const string ConnectedValue = "Connected";
        private const string DisconnectedValue = "Disconnected";
        private const string DeletedValue = "Deleted";
        private const string CreatingValue = "Creating";
        private const string UpdatingValue = "Updating";
        private const string DeletingValue = "Deleting";
        private const string MovingValue = "Moving";
        private const string PartiallySucceededValue = "PartiallySucceeded";
        private const string PartiallyConnectedValue = "PartiallyConnected";
        private const string InProgressValue = "InProgress";
        private const string AcceptedValue = "Accepted";
        private const string ProvisioningValue = "Provisioning";
        private const string UpgradeFailedRollbackSucceededValue = "UpgradeFailedRollbackSucceeded";

        /// <summary>
        /// NotSpecified
        /// Serialized Name: ExtensionAggregateState.NotSpecified
        /// </summary>
        public static ArcExtensionAggregateState NotSpecified { get; } = new ArcExtensionAggregateState(NotSpecifiedValue);
        /// <summary>
        /// Error
        /// Serialized Name: ExtensionAggregateState.Error
        /// </summary>
        public static ArcExtensionAggregateState Error { get; } = new ArcExtensionAggregateState(ErrorValue);
        /// <summary>
        /// Succeeded
        /// Serialized Name: ExtensionAggregateState.Succeeded
        /// </summary>
        public static ArcExtensionAggregateState Succeeded { get; } = new ArcExtensionAggregateState(SucceededValue);
        /// <summary>
        /// Canceled
        /// Serialized Name: ExtensionAggregateState.Canceled
        /// </summary>
        public static ArcExtensionAggregateState Canceled { get; } = new ArcExtensionAggregateState(CanceledValue);
        /// <summary>
        /// Failed
        /// Serialized Name: ExtensionAggregateState.Failed
        /// </summary>
        public static ArcExtensionAggregateState Failed { get; } = new ArcExtensionAggregateState(FailedValue);
        /// <summary>
        /// Connected
        /// Serialized Name: ExtensionAggregateState.Connected
        /// </summary>
        public static ArcExtensionAggregateState Connected { get; } = new ArcExtensionAggregateState(ConnectedValue);
        /// <summary>
        /// Disconnected
        /// Serialized Name: ExtensionAggregateState.Disconnected
        /// </summary>
        public static ArcExtensionAggregateState Disconnected { get; } = new ArcExtensionAggregateState(DisconnectedValue);
        /// <summary>
        /// Deleted
        /// Serialized Name: ExtensionAggregateState.Deleted
        /// </summary>
        public static ArcExtensionAggregateState Deleted { get; } = new ArcExtensionAggregateState(DeletedValue);
        /// <summary>
        /// Creating
        /// Serialized Name: ExtensionAggregateState.Creating
        /// </summary>
        public static ArcExtensionAggregateState Creating { get; } = new ArcExtensionAggregateState(CreatingValue);
        /// <summary>
        /// Updating
        /// Serialized Name: ExtensionAggregateState.Updating
        /// </summary>
        public static ArcExtensionAggregateState Updating { get; } = new ArcExtensionAggregateState(UpdatingValue);
        /// <summary>
        /// Deleting
        /// Serialized Name: ExtensionAggregateState.Deleting
        /// </summary>
        public static ArcExtensionAggregateState Deleting { get; } = new ArcExtensionAggregateState(DeletingValue);
        /// <summary>
        /// Moving
        /// Serialized Name: ExtensionAggregateState.Moving
        /// </summary>
        public static ArcExtensionAggregateState Moving { get; } = new ArcExtensionAggregateState(MovingValue);
        /// <summary>
        /// PartiallySucceeded
        /// Serialized Name: ExtensionAggregateState.PartiallySucceeded
        /// </summary>
        public static ArcExtensionAggregateState PartiallySucceeded { get; } = new ArcExtensionAggregateState(PartiallySucceededValue);
        /// <summary>
        /// PartiallyConnected
        /// Serialized Name: ExtensionAggregateState.PartiallyConnected
        /// </summary>
        public static ArcExtensionAggregateState PartiallyConnected { get; } = new ArcExtensionAggregateState(PartiallyConnectedValue);
        /// <summary>
        /// InProgress
        /// Serialized Name: ExtensionAggregateState.InProgress
        /// </summary>
        public static ArcExtensionAggregateState InProgress { get; } = new ArcExtensionAggregateState(InProgressValue);
        /// <summary>
        /// Accepted
        /// Serialized Name: ExtensionAggregateState.Accepted
        /// </summary>
        public static ArcExtensionAggregateState Accepted { get; } = new ArcExtensionAggregateState(AcceptedValue);
        /// <summary>
        /// Provisioning
        /// Serialized Name: ExtensionAggregateState.Provisioning
        /// </summary>
        public static ArcExtensionAggregateState Provisioning { get; } = new ArcExtensionAggregateState(ProvisioningValue);
        /// <summary>
        /// UpgradeFailedRollbackSucceeded
        /// Serialized Name: ExtensionAggregateState.UpgradeFailedRollbackSucceeded
        /// </summary>
        public static ArcExtensionAggregateState UpgradeFailedRollbackSucceeded { get; } = new ArcExtensionAggregateState(UpgradeFailedRollbackSucceededValue);
        /// <summary> Determines if two <see cref="ArcExtensionAggregateState"/> values are the same. </summary>
        public static bool operator ==(ArcExtensionAggregateState left, ArcExtensionAggregateState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ArcExtensionAggregateState"/> values are not the same. </summary>
        public static bool operator !=(ArcExtensionAggregateState left, ArcExtensionAggregateState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ArcExtensionAggregateState"/>. </summary>
        public static implicit operator ArcExtensionAggregateState(string value) => new ArcExtensionAggregateState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ArcExtensionAggregateState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ArcExtensionAggregateState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
