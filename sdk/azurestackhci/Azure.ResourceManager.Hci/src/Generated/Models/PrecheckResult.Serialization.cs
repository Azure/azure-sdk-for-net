// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Hci.Models
{
    public partial class PrecheckResult : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(Name))
            {
                writer.WritePropertyName("name");
                writer.WriteStringValue(Name);
            }
            if (Optional.IsDefined(Tags))
            {
                writer.WritePropertyName("tags");
                writer.WriteObjectValue(Tags);
            }
            if (Optional.IsDefined(Title))
            {
                writer.WritePropertyName("title");
                writer.WriteStringValue(Title);
            }
            if (Optional.IsDefined(Status))
            {
                writer.WritePropertyName("status");
                writer.WriteStringValue(Status.Value.ToString());
            }
            if (Optional.IsDefined(Severity))
            {
                writer.WritePropertyName("severity");
                writer.WriteStringValue(Severity.Value.ToString());
            }
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description");
                writer.WriteStringValue(Description);
            }
            if (Optional.IsDefined(Remediation))
            {
                writer.WritePropertyName("remediation");
                writer.WriteStringValue(Remediation);
            }
            if (Optional.IsDefined(TargetResourceId))
            {
                writer.WritePropertyName("targetResourceID");
                writer.WriteStringValue(TargetResourceId);
            }
            if (Optional.IsDefined(TargetResourceName))
            {
                writer.WritePropertyName("targetResourceName");
                writer.WriteStringValue(TargetResourceName);
            }
            if (Optional.IsDefined(Timestamp))
            {
                writer.WritePropertyName("timestamp");
                writer.WriteStringValue(Timestamp.Value, "O");
            }
            if (Optional.IsDefined(AdditionalData))
            {
                writer.WritePropertyName("additionalData");
                writer.WriteStringValue(AdditionalData);
            }
            if (Optional.IsDefined(HealthCheckSource))
            {
                writer.WritePropertyName("healthCheckSource");
                writer.WriteStringValue(HealthCheckSource);
            }
            writer.WriteEndObject();
        }

        internal static PrecheckResult DeserializePrecheckResult(JsonElement element)
        {
            Optional<string> name = default;
            Optional<PrecheckResultTags> tags = default;
            Optional<string> title = default;
            Optional<HciClusterStatus> status = default;
            Optional<Severity> severity = default;
            Optional<string> description = default;
            Optional<string> remediation = default;
            Optional<string> targetResourceId = default;
            Optional<string> targetResourceName = default;
            Optional<DateTimeOffset> timestamp = default;
            Optional<string> additionalData = default;
            Optional<string> healthCheckSource = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("tags"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    tags = PrecheckResultTags.DeserializePrecheckResultTags(property.Value);
                    continue;
                }
                if (property.NameEquals("title"))
                {
                    title = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("status"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    status = new HciClusterStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("severity"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    severity = new Severity(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("description"))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("remediation"))
                {
                    remediation = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("targetResourceID"))
                {
                    targetResourceId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("targetResourceName"))
                {
                    targetResourceName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("timestamp"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    timestamp = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("additionalData"))
                {
                    additionalData = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("healthCheckSource"))
                {
                    healthCheckSource = property.Value.GetString();
                    continue;
                }
            }
            return new PrecheckResult(name.Value, tags.Value, title.Value, Optional.ToNullable(status), Optional.ToNullable(severity), description.Value, remediation.Value, targetResourceId.Value, targetResourceName.Value, Optional.ToNullable(timestamp), additionalData.Value, healthCheckSource.Value);
        }
    }
}
