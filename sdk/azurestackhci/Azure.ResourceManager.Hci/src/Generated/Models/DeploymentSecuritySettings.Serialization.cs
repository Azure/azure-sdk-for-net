// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Hci.Models
{
    public partial class DeploymentSecuritySettings : IUtf8JsonSerializable, IJsonModel<DeploymentSecuritySettings>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<DeploymentSecuritySettings>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<DeploymentSecuritySettings>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DeploymentSecuritySettings>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DeploymentSecuritySettings)} does not support writing '{format}' format.");
            }

            writer.WriteStartObject();
            if (Optional.IsDefined(HvciProtection))
            {
                writer.WritePropertyName("hvciProtection"u8);
                writer.WriteBooleanValue(HvciProtection.Value);
            }
            if (Optional.IsDefined(DrtmProtection))
            {
                writer.WritePropertyName("drtmProtection"u8);
                writer.WriteBooleanValue(DrtmProtection.Value);
            }
            if (Optional.IsDefined(DriftControlEnforced))
            {
                writer.WritePropertyName("driftControlEnforced"u8);
                writer.WriteBooleanValue(DriftControlEnforced.Value);
            }
            if (Optional.IsDefined(CredentialGuardEnforced))
            {
                writer.WritePropertyName("credentialGuardEnforced"u8);
                writer.WriteBooleanValue(CredentialGuardEnforced.Value);
            }
            if (Optional.IsDefined(SmbSigningEnforced))
            {
                writer.WritePropertyName("smbSigningEnforced"u8);
                writer.WriteBooleanValue(SmbSigningEnforced.Value);
            }
            if (Optional.IsDefined(SmbClusterEncryption))
            {
                writer.WritePropertyName("smbClusterEncryption"u8);
                writer.WriteBooleanValue(SmbClusterEncryption.Value);
            }
            if (Optional.IsDefined(SideChannelMitigationEnforced))
            {
                writer.WritePropertyName("sideChannelMitigationEnforced"u8);
                writer.WriteBooleanValue(SideChannelMitigationEnforced.Value);
            }
            if (Optional.IsDefined(BitlockerBootVolume))
            {
                writer.WritePropertyName("bitlockerBootVolume"u8);
                writer.WriteBooleanValue(BitlockerBootVolume.Value);
            }
            if (Optional.IsDefined(BitlockerDataVolumes))
            {
                writer.WritePropertyName("bitlockerDataVolumes"u8);
                writer.WriteBooleanValue(BitlockerDataVolumes.Value);
            }
            if (Optional.IsDefined(WdacEnforced))
            {
                writer.WritePropertyName("wdacEnforced"u8);
                writer.WriteBooleanValue(WdacEnforced.Value);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        DeploymentSecuritySettings IJsonModel<DeploymentSecuritySettings>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DeploymentSecuritySettings>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(DeploymentSecuritySettings)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeDeploymentSecuritySettings(document.RootElement, options);
        }

        internal static DeploymentSecuritySettings DeserializeDeploymentSecuritySettings(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            bool? hvciProtection = default;
            bool? drtmProtection = default;
            bool? driftControlEnforced = default;
            bool? credentialGuardEnforced = default;
            bool? smbSigningEnforced = default;
            bool? smbClusterEncryption = default;
            bool? sideChannelMitigationEnforced = default;
            bool? bitlockerBootVolume = default;
            bool? bitlockerDataVolumes = default;
            bool? wdacEnforced = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("hvciProtection"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    hvciProtection = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("drtmProtection"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    drtmProtection = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("driftControlEnforced"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    driftControlEnforced = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("credentialGuardEnforced"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    credentialGuardEnforced = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("smbSigningEnforced"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    smbSigningEnforced = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("smbClusterEncryption"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    smbClusterEncryption = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("sideChannelMitigationEnforced"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sideChannelMitigationEnforced = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("bitlockerBootVolume"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    bitlockerBootVolume = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("bitlockerDataVolumes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    bitlockerDataVolumes = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("wdacEnforced"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    wdacEnforced = property.Value.GetBoolean();
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new DeploymentSecuritySettings(
                hvciProtection,
                drtmProtection,
                driftControlEnforced,
                credentialGuardEnforced,
                smbSigningEnforced,
                smbClusterEncryption,
                sideChannelMitigationEnforced,
                bitlockerBootVolume,
                bitlockerDataVolumes,
                wdacEnforced,
                serializedAdditionalRawData);
        }

        private BinaryData SerializeBicep(ModelReaderWriterOptions options)
        {
            StringBuilder builder = new StringBuilder();
            BicepModelReaderWriterOptions bicepOptions = options as BicepModelReaderWriterOptions;
            IDictionary<string, string> propertyOverrides = null;
            bool hasObjectOverride = bicepOptions != null && bicepOptions.PropertyOverrides.TryGetValue(this, out propertyOverrides);
            bool hasPropertyOverride = false;
            string propertyOverride = null;

            builder.AppendLine("{");

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(HvciProtection), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  hvciProtection: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(HvciProtection))
                {
                    builder.Append("  hvciProtection: ");
                    var boolValue = HvciProtection.Value == true ? "true" : "false";
                    builder.AppendLine($"{boolValue}");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(DrtmProtection), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  drtmProtection: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(DrtmProtection))
                {
                    builder.Append("  drtmProtection: ");
                    var boolValue = DrtmProtection.Value == true ? "true" : "false";
                    builder.AppendLine($"{boolValue}");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(DriftControlEnforced), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  driftControlEnforced: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(DriftControlEnforced))
                {
                    builder.Append("  driftControlEnforced: ");
                    var boolValue = DriftControlEnforced.Value == true ? "true" : "false";
                    builder.AppendLine($"{boolValue}");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(CredentialGuardEnforced), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  credentialGuardEnforced: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(CredentialGuardEnforced))
                {
                    builder.Append("  credentialGuardEnforced: ");
                    var boolValue = CredentialGuardEnforced.Value == true ? "true" : "false";
                    builder.AppendLine($"{boolValue}");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(SmbSigningEnforced), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  smbSigningEnforced: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(SmbSigningEnforced))
                {
                    builder.Append("  smbSigningEnforced: ");
                    var boolValue = SmbSigningEnforced.Value == true ? "true" : "false";
                    builder.AppendLine($"{boolValue}");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(SmbClusterEncryption), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  smbClusterEncryption: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(SmbClusterEncryption))
                {
                    builder.Append("  smbClusterEncryption: ");
                    var boolValue = SmbClusterEncryption.Value == true ? "true" : "false";
                    builder.AppendLine($"{boolValue}");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(SideChannelMitigationEnforced), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  sideChannelMitigationEnforced: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(SideChannelMitigationEnforced))
                {
                    builder.Append("  sideChannelMitigationEnforced: ");
                    var boolValue = SideChannelMitigationEnforced.Value == true ? "true" : "false";
                    builder.AppendLine($"{boolValue}");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(BitlockerBootVolume), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  bitlockerBootVolume: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(BitlockerBootVolume))
                {
                    builder.Append("  bitlockerBootVolume: ");
                    var boolValue = BitlockerBootVolume.Value == true ? "true" : "false";
                    builder.AppendLine($"{boolValue}");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(BitlockerDataVolumes), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  bitlockerDataVolumes: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(BitlockerDataVolumes))
                {
                    builder.Append("  bitlockerDataVolumes: ");
                    var boolValue = BitlockerDataVolumes.Value == true ? "true" : "false";
                    builder.AppendLine($"{boolValue}");
                }
            }

            hasPropertyOverride = hasObjectOverride && propertyOverrides.TryGetValue(nameof(WdacEnforced), out propertyOverride);
            if (hasPropertyOverride)
            {
                builder.Append("  wdacEnforced: ");
                builder.AppendLine(propertyOverride);
            }
            else
            {
                if (Optional.IsDefined(WdacEnforced))
                {
                    builder.Append("  wdacEnforced: ");
                    var boolValue = WdacEnforced.Value == true ? "true" : "false";
                    builder.AppendLine($"{boolValue}");
                }
            }

            builder.AppendLine("}");
            return BinaryData.FromString(builder.ToString());
        }

        BinaryData IPersistableModel<DeploymentSecuritySettings>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DeploymentSecuritySettings>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                case "bicep":
                    return SerializeBicep(options);
                default:
                    throw new FormatException($"The model {nameof(DeploymentSecuritySettings)} does not support writing '{options.Format}' format.");
            }
        }

        DeploymentSecuritySettings IPersistableModel<DeploymentSecuritySettings>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<DeploymentSecuritySettings>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeDeploymentSecuritySettings(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(DeploymentSecuritySettings)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<DeploymentSecuritySettings>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
