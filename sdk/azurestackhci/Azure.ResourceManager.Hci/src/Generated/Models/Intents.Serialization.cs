// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Hci.Models
{
    public partial class Intents : IUtf8JsonSerializable, IJsonModel<Intents>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<Intents>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<Intents>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<Intents>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(Intents)} does not support writing '{format}' format.");
            }

            writer.WriteStartObject();
            if (Optional.IsDefined(Name))
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            if (Optional.IsCollectionDefined(TrafficType))
            {
                writer.WritePropertyName("trafficType"u8);
                writer.WriteStartArray();
                foreach (var item in TrafficType)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Adapter))
            {
                writer.WritePropertyName("adapter"u8);
                writer.WriteStartArray();
                foreach (var item in Adapter)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(OverrideVirtualSwitchConfiguration))
            {
                writer.WritePropertyName("overrideVirtualSwitchConfiguration"u8);
                writer.WriteBooleanValue(OverrideVirtualSwitchConfiguration.Value);
            }
            if (Optional.IsDefined(VirtualSwitchConfigurationOverrides))
            {
                writer.WritePropertyName("virtualSwitchConfigurationOverrides"u8);
                writer.WriteObjectValue(VirtualSwitchConfigurationOverrides, options);
            }
            if (Optional.IsDefined(OverrideQosPolicy))
            {
                writer.WritePropertyName("overrideQosPolicy"u8);
                writer.WriteBooleanValue(OverrideQosPolicy.Value);
            }
            if (Optional.IsDefined(QosPolicyOverrides))
            {
                writer.WritePropertyName("qosPolicyOverrides"u8);
                writer.WriteObjectValue(QosPolicyOverrides, options);
            }
            if (Optional.IsDefined(OverrideAdapterProperty))
            {
                writer.WritePropertyName("overrideAdapterProperty"u8);
                writer.WriteBooleanValue(OverrideAdapterProperty.Value);
            }
            if (Optional.IsDefined(AdapterPropertyOverrides))
            {
                writer.WritePropertyName("adapterPropertyOverrides"u8);
                writer.WriteObjectValue(AdapterPropertyOverrides, options);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        Intents IJsonModel<Intents>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<Intents>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(Intents)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeIntents(document.RootElement, options);
        }

        internal static Intents DeserializeIntents(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string name = default;
            IList<string> trafficType = default;
            IList<string> adapter = default;
            bool? overrideVirtualSwitchConfiguration = default;
            VirtualSwitchConfigurationOverrides virtualSwitchConfigurationOverrides = default;
            bool? overrideQosPolicy = default;
            QosPolicyOverrides qosPolicyOverrides = default;
            bool? overrideAdapterProperty = default;
            AdapterPropertyOverrides adapterPropertyOverrides = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("trafficType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    trafficType = array;
                    continue;
                }
                if (property.NameEquals("adapter"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    adapter = array;
                    continue;
                }
                if (property.NameEquals("overrideVirtualSwitchConfiguration"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    overrideVirtualSwitchConfiguration = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("virtualSwitchConfigurationOverrides"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    virtualSwitchConfigurationOverrides = VirtualSwitchConfigurationOverrides.DeserializeVirtualSwitchConfigurationOverrides(property.Value, options);
                    continue;
                }
                if (property.NameEquals("overrideQosPolicy"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    overrideQosPolicy = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("qosPolicyOverrides"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    qosPolicyOverrides = QosPolicyOverrides.DeserializeQosPolicyOverrides(property.Value, options);
                    continue;
                }
                if (property.NameEquals("overrideAdapterProperty"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    overrideAdapterProperty = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("adapterPropertyOverrides"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    adapterPropertyOverrides = AdapterPropertyOverrides.DeserializeAdapterPropertyOverrides(property.Value, options);
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new Intents(
                name,
                trafficType ?? new ChangeTrackingList<string>(),
                adapter ?? new ChangeTrackingList<string>(),
                overrideVirtualSwitchConfiguration,
                virtualSwitchConfigurationOverrides,
                overrideQosPolicy,
                qosPolicyOverrides,
                overrideAdapterProperty,
                adapterPropertyOverrides,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<Intents>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<Intents>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(Intents)} does not support writing '{options.Format}' format.");
            }
        }

        Intents IPersistableModel<Intents>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<Intents>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeIntents(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(Intents)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<Intents>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
