// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.Hci.Models
{
    /// <summary> StorageProfile - contains information about the disks and storage information for the virtual machine instance. </summary>
    public partial class VirtualMachineInstancePropertiesStorageProfile
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="VirtualMachineInstancePropertiesStorageProfile"/>. </summary>
        public VirtualMachineInstancePropertiesStorageProfile()
        {
            DataDisks = new ChangeTrackingList<WritableSubResource>();
        }

        /// <summary> Initializes a new instance of <see cref="VirtualMachineInstancePropertiesStorageProfile"/>. </summary>
        /// <param name="dataDisks"> adds data disks to the virtual machine instance. </param>
        /// <param name="imageReference"> Which Image to use for the virtual machine instance. </param>
        /// <param name="osDisk"> VHD to attach as OS disk. </param>
        /// <param name="vmConfigStoragePathId"> Id of the storage container that hosts the VM configuration file. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal VirtualMachineInstancePropertiesStorageProfile(IList<WritableSubResource> dataDisks, WritableSubResource imageReference, VirtualMachineInstancePropertiesStorageProfileOSDisk osDisk, ResourceIdentifier vmConfigStoragePathId, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            DataDisks = dataDisks;
            ImageReference = imageReference;
            OSDisk = osDisk;
            VmConfigStoragePathId = vmConfigStoragePathId;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> adds data disks to the virtual machine instance. </summary>
        public IList<WritableSubResource> DataDisks { get; }
        /// <summary> Which Image to use for the virtual machine instance. </summary>
        internal WritableSubResource ImageReference { get; set; }
        /// <summary> Gets or sets Id. </summary>
        public ResourceIdentifier ImageReferenceId
        {
            get => ImageReference is null ? default : ImageReference.Id;
            set
            {
                if (ImageReference is null)
                    ImageReference = new WritableSubResource();
                ImageReference.Id = value;
            }
        }

        /// <summary> VHD to attach as OS disk. </summary>
        public VirtualMachineInstancePropertiesStorageProfileOSDisk OSDisk { get; set; }
        /// <summary> Id of the storage container that hosts the VM configuration file. </summary>
        public ResourceIdentifier VmConfigStoragePathId { get; set; }
    }
}
