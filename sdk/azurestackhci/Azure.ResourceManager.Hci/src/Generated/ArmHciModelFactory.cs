// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure;
using Azure.Core;
using Azure.ResourceManager.Hci;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.Hci.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmHciModelFactory
    {
        /// <summary> Initializes a new instance of ArcSettingData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="provisioningState"> Provisioning state of the ArcSetting proxy resource. </param>
        /// <param name="arcInstanceResourceGroup"> The resource group that hosts the Arc agents, ie. Hybrid Compute Machine resources. </param>
        /// <param name="arcApplicationClientId"> App id of arc AAD identity. </param>
        /// <param name="arcApplicationTenantId"> Tenant id of arc AAD identity. </param>
        /// <param name="arcServicePrincipalObjectId"> Object id of arc AAD service principal. </param>
        /// <param name="arcApplicationObjectId"> Object id of arc AAD identity. </param>
        /// <param name="aggregateState"> Aggregate state of Arc agent across the nodes in this HCI cluster. </param>
        /// <param name="perNodeDetails"> State of Arc agent in each of the nodes. </param>
        /// <param name="connectivityProperties"> contains connectivity related configuration for ARC resources. </param>
        /// <param name="defaultExtensions"> Consent time for each of the default extensions category. </param>
        /// <returns> A new <see cref="Hci.ArcSettingData"/> instance for mocking. </returns>
        public static ArcSettingData ArcSettingData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, HciProvisioningState? provisioningState = null, string arcInstanceResourceGroup = null, Guid? arcApplicationClientId = null, Guid? arcApplicationTenantId = null, Guid? arcServicePrincipalObjectId = null, Guid? arcApplicationObjectId = null, ArcSettingAggregateState? aggregateState = null, IEnumerable<PerNodeArcState> perNodeDetails = null, BinaryData connectivityProperties = null, IEnumerable<DefaultExtensionDetails> defaultExtensions = null)
        {
            perNodeDetails ??= new List<PerNodeArcState>();
            defaultExtensions ??= new List<DefaultExtensionDetails>();

            return new ArcSettingData(id, name, resourceType, systemData, provisioningState, arcInstanceResourceGroup, arcApplicationClientId, arcApplicationTenantId, arcServicePrincipalObjectId, arcApplicationObjectId, aggregateState, perNodeDetails?.ToList(), connectivityProperties, defaultExtensions?.ToList());
        }

        /// <summary> Initializes a new instance of PerNodeArcState. </summary>
        /// <param name="name"> Name of the Node in HCI Cluster. </param>
        /// <param name="arcInstance"> Fully qualified resource ID for the Arc agent of this node. </param>
        /// <param name="state"> State of Arc agent in this node. </param>
        /// <returns> A new <see cref="Models.PerNodeArcState"/> instance for mocking. </returns>
        public static PerNodeArcState PerNodeArcState(string name = null, string arcInstance = null, NodeArcState? state = null)
        {
            return new PerNodeArcState(name, arcInstance, state);
        }

        /// <summary> Initializes a new instance of DefaultExtensionDetails. </summary>
        /// <param name="category"> Default extension category. </param>
        /// <param name="consentOn"> Consent time for extension category. </param>
        /// <returns> A new <see cref="Models.DefaultExtensionDetails"/> instance for mocking. </returns>
        public static DefaultExtensionDetails DefaultExtensionDetails(string category = null, DateTimeOffset? consentOn = null)
        {
            return new DefaultExtensionDetails(category, consentOn);
        }

        /// <summary> Initializes a new instance of ArcPasswordCredential. </summary>
        /// <param name="secretText"></param>
        /// <param name="keyId"></param>
        /// <param name="startOn"></param>
        /// <param name="endOn"></param>
        /// <returns> A new <see cref="Models.ArcPasswordCredential"/> instance for mocking. </returns>
        public static ArcPasswordCredential ArcPasswordCredential(string secretText = null, string keyId = null, DateTimeOffset? startOn = null, DateTimeOffset? endOn = null)
        {
            return new ArcPasswordCredential(secretText, keyId, startOn, endOn);
        }

        /// <summary> Initializes a new instance of ArcIdentityResult. </summary>
        /// <param name="arcApplicationClientId"></param>
        /// <param name="arcApplicationTenantId"></param>
        /// <param name="arcServicePrincipalObjectId"></param>
        /// <param name="arcApplicationObjectId"></param>
        /// <returns> A new <see cref="Models.ArcIdentityResult"/> instance for mocking. </returns>
        public static ArcIdentityResult ArcIdentityResult(Guid? arcApplicationClientId = null, Guid? arcApplicationTenantId = null, Guid? arcServicePrincipalObjectId = null, Guid? arcApplicationObjectId = null)
        {
            return new ArcIdentityResult(arcApplicationClientId, arcApplicationTenantId, arcServicePrincipalObjectId, arcApplicationObjectId);
        }

        /// <summary> Initializes a new instance of HciClusterData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="identity"> Identity of Cluster resource. </param>
        /// <param name="provisioningState"> Provisioning state. </param>
        /// <param name="status"> Status of the cluster agent. </param>
        /// <param name="cloudId"> Unique, immutable resource id. </param>
        /// <param name="cloudManagementEndpoint"> Endpoint configured for management from the Azure portal. </param>
        /// <param name="aadClientId"> App id of cluster AAD identity. </param>
        /// <param name="aadTenantId"> Tenant id of cluster AAD identity. </param>
        /// <param name="aadApplicationObjectId"> Object id of cluster AAD identity. </param>
        /// <param name="aadServicePrincipalObjectId"> Id of cluster identity service principal. </param>
        /// <param name="softwareAssuranceProperties"> Software Assurance properties of the cluster. </param>
        /// <param name="desiredProperties"> Desired properties of the cluster. </param>
        /// <param name="reportedProperties"> Properties reported by cluster agent. </param>
        /// <param name="trialDaysRemaining"> Number of days remaining in the trial period. </param>
        /// <param name="billingModel"> Type of billing applied to the resource. </param>
        /// <param name="registrationTimestamp"> First cluster sync timestamp. </param>
        /// <param name="lastSyncTimestamp"> Most recent cluster sync timestamp. </param>
        /// <param name="lastBillingTimestamp"> Most recent billing meter timestamp. </param>
        /// <param name="serviceEndpoint"> Region specific DataPath Endpoint of the cluster. </param>
        /// <param name="resourceProviderObjectId"> Object id of RP Service Principal. </param>
        /// <returns> A new <see cref="Hci.HciClusterData"/> instance for mocking. </returns>
        public static HciClusterData HciClusterData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ManagedServiceIdentity identity = null, HciProvisioningState? provisioningState = null, HciClusterStatus? status = null, Guid? cloudId = null, string cloudManagementEndpoint = null, Guid? aadClientId = null, Guid? aadTenantId = null, Guid? aadApplicationObjectId = null, Guid? aadServicePrincipalObjectId = null, SoftwareAssuranceProperties softwareAssuranceProperties = null, HciClusterDesiredProperties desiredProperties = null, HciClusterReportedProperties reportedProperties = null, float? trialDaysRemaining = null, string billingModel = null, DateTimeOffset? registrationTimestamp = null, DateTimeOffset? lastSyncTimestamp = null, DateTimeOffset? lastBillingTimestamp = null, string serviceEndpoint = null, string resourceProviderObjectId = null)
        {
            tags ??= new Dictionary<string, string>();

            return new HciClusterData(id, name, resourceType, systemData, tags, location, identity, provisioningState, status, cloudId, cloudManagementEndpoint, aadClientId, aadTenantId, aadApplicationObjectId, aadServicePrincipalObjectId, softwareAssuranceProperties, desiredProperties, reportedProperties, trialDaysRemaining, billingModel, registrationTimestamp, lastSyncTimestamp, lastBillingTimestamp, serviceEndpoint, resourceProviderObjectId);
        }

        /// <summary> Initializes a new instance of SoftwareAssuranceProperties. </summary>
        /// <param name="softwareAssuranceStatus"> Status of the Software Assurance for the cluster. </param>
        /// <param name="softwareAssuranceIntent"> Customer Intent for Software Assurance Benefit. </param>
        /// <param name="lastUpdated"> TimeStamp denoting the latest SA benefit applicability is validated. </param>
        /// <returns> A new <see cref="Models.SoftwareAssuranceProperties"/> instance for mocking. </returns>
        public static SoftwareAssuranceProperties SoftwareAssuranceProperties(SoftwareAssuranceStatus? softwareAssuranceStatus = null, SoftwareAssuranceIntent? softwareAssuranceIntent = null, DateTimeOffset? lastUpdated = null)
        {
            return new SoftwareAssuranceProperties(softwareAssuranceStatus, softwareAssuranceIntent, lastUpdated);
        }

        /// <summary> Initializes a new instance of HciClusterReportedProperties. </summary>
        /// <param name="clusterName"> Name of the on-prem cluster connected to this resource. </param>
        /// <param name="clusterId"> Unique id generated by the on-prem cluster. </param>
        /// <param name="clusterVersion"> Version of the cluster software. </param>
        /// <param name="nodes"> List of nodes reported by the cluster. </param>
        /// <param name="lastUpdatedOn"> Last time the cluster reported the data. </param>
        /// <param name="imdsAttestation"> IMDS attestation status of the cluster. </param>
        /// <param name="diagnosticLevel"> Level of diagnostic data emitted by the cluster. </param>
        /// <param name="supportedCapabilities"> Capabilities supported by the cluster. </param>
        /// <returns> A new <see cref="Models.HciClusterReportedProperties"/> instance for mocking. </returns>
        public static HciClusterReportedProperties HciClusterReportedProperties(string clusterName = null, Guid? clusterId = null, string clusterVersion = null, IEnumerable<HciClusterNode> nodes = null, DateTimeOffset? lastUpdatedOn = null, ImdsAttestationState? imdsAttestation = null, HciClusterDiagnosticLevel? diagnosticLevel = null, IEnumerable<string> supportedCapabilities = null)
        {
            nodes ??= new List<HciClusterNode>();
            supportedCapabilities ??= new List<string>();

            return new HciClusterReportedProperties(clusterName, clusterId, clusterVersion, nodes?.ToList(), lastUpdatedOn, imdsAttestation, diagnosticLevel, supportedCapabilities?.ToList());
        }

        /// <summary> Initializes a new instance of HciClusterNode. </summary>
        /// <param name="name"> Name of the cluster node. </param>
        /// <param name="id"> Id of the node in the cluster. </param>
        /// <param name="windowsServerSubscription"> State of Windows Server Subscription. </param>
        /// <param name="nodeType"> Type of the cluster node hardware. </param>
        /// <param name="ehcResourceId"> Edge Hardware Center Resource Id. </param>
        /// <param name="manufacturer"> Manufacturer of the cluster node hardware. </param>
        /// <param name="model"> Model name of the cluster node hardware. </param>
        /// <param name="osName"> Operating system running on the cluster node. </param>
        /// <param name="osVersion"> Version of the operating system running on the cluster node. </param>
        /// <param name="osDisplayVersion"> Display version of the operating system running on the cluster node. </param>
        /// <param name="serialNumber"> Immutable id of the cluster node. </param>
        /// <param name="coreCount"> Number of physical cores on the cluster node. </param>
        /// <param name="memoryInGiB"> Total available memory on the cluster node (in GiB). </param>
        /// <returns> A new <see cref="Models.HciClusterNode"/> instance for mocking. </returns>
        public static HciClusterNode HciClusterNode(string name = null, float? id = null, WindowsServerSubscription? windowsServerSubscription = null, ClusterNodeType? nodeType = null, string ehcResourceId = null, string manufacturer = null, string model = null, string osName = null, string osVersion = null, string osDisplayVersion = null, string serialNumber = null, float? coreCount = null, float? memoryInGiB = null)
        {
            return new HciClusterNode(name, id, windowsServerSubscription, nodeType, ehcResourceId, manufacturer, model, osName, osVersion, osDisplayVersion, serialNumber, coreCount, memoryInGiB);
        }

        /// <summary> Initializes a new instance of HciClusterIdentityResult. </summary>
        /// <param name="aadClientId"></param>
        /// <param name="aadTenantId"></param>
        /// <param name="aadServicePrincipalObjectId"></param>
        /// <param name="aadApplicationObjectId"></param>
        /// <returns> A new <see cref="Models.HciClusterIdentityResult"/> instance for mocking. </returns>
        public static HciClusterIdentityResult HciClusterIdentityResult(Guid? aadClientId = null, Guid? aadTenantId = null, Guid? aadServicePrincipalObjectId = null, Guid? aadApplicationObjectId = null)
        {
            return new HciClusterIdentityResult(aadClientId, aadTenantId, aadServicePrincipalObjectId, aadApplicationObjectId);
        }

        /// <summary> Initializes a new instance of ArcExtensionData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="provisioningState"> Provisioning state of the Extension proxy resource. </param>
        /// <param name="aggregateState"> Aggregate state of Arc Extensions across the nodes in this HCI cluster. </param>
        /// <param name="perNodeExtensionDetails"> State of Arc Extension in each of the nodes. </param>
        /// <param name="managedBy"> Indicates if the extension is managed by azure or the user. </param>
        /// <param name="forceUpdateTag"> How the extension handler should be forced to update even if the extension configuration has not changed. </param>
        /// <param name="publisher"> The name of the extension handler publisher. </param>
        /// <param name="arcExtensionType"> Specifies the type of the extension; an example is "CustomScriptExtension". </param>
        /// <param name="typeHandlerVersion"> Specifies the version of the script handler. Latest version would be used if not specified. </param>
        /// <param name="shouldAutoUpgradeMinorVersion"> Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true. </param>
        /// <param name="settings"> Json formatted public settings for the extension. </param>
        /// <param name="protectedSettings"> Protected settings (may contain secrets). </param>
        /// <param name="enableAutomaticUpgrade"> Indicates whether the extension should be automatically upgraded by the platform if there is a newer version available. </param>
        /// <returns> A new <see cref="Hci.ArcExtensionData"/> instance for mocking. </returns>
        public static ArcExtensionData ArcExtensionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, HciProvisioningState? provisioningState = null, ArcExtensionAggregateState? aggregateState = null, IEnumerable<PerNodeExtensionState> perNodeExtensionDetails = null, ExtensionManagedBy? managedBy = null, string forceUpdateTag = null, string publisher = null, string arcExtensionType = null, string typeHandlerVersion = null, bool? shouldAutoUpgradeMinorVersion = null, BinaryData settings = null, BinaryData protectedSettings = null, bool? enableAutomaticUpgrade = null)
        {
            perNodeExtensionDetails ??= new List<PerNodeExtensionState>();

            return new ArcExtensionData(id, name, resourceType, systemData, provisioningState, aggregateState, perNodeExtensionDetails?.ToList(), managedBy, forceUpdateTag, publisher, arcExtensionType, typeHandlerVersion, shouldAutoUpgradeMinorVersion, settings, protectedSettings, enableAutomaticUpgrade);
        }

        /// <summary> Initializes a new instance of PerNodeExtensionState. </summary>
        /// <param name="name"> Name of the node in HCI Cluster. </param>
        /// <param name="extension"> Fully qualified resource ID for the particular Arc Extension on this node. </param>
        /// <param name="typeHandlerVersion"> Specifies the version of the script handler. </param>
        /// <param name="state"> State of Arc Extension in this node. </param>
        /// <param name="instanceView"> The extension instance view. </param>
        /// <returns> A new <see cref="Models.PerNodeExtensionState"/> instance for mocking. </returns>
        public static PerNodeExtensionState PerNodeExtensionState(string name = null, string extension = null, string typeHandlerVersion = null, NodeExtensionState? state = null, HciExtensionInstanceView instanceView = null)
        {
            return new PerNodeExtensionState(name, extension, typeHandlerVersion, state, instanceView);
        }

        /// <summary> Initializes a new instance of HciExtensionInstanceView. </summary>
        /// <param name="name"> The extension name. </param>
        /// <param name="extensionInstanceViewType"> Specifies the type of the extension; an example is "MicrosoftMonitoringAgent". </param>
        /// <param name="typeHandlerVersion"> Specifies the version of the script handler. </param>
        /// <param name="status"> Instance view status. </param>
        /// <returns> A new <see cref="Models.HciExtensionInstanceView"/> instance for mocking. </returns>
        public static HciExtensionInstanceView HciExtensionInstanceView(string name = null, string extensionInstanceViewType = null, string typeHandlerVersion = null, ExtensionInstanceViewStatus status = null)
        {
            return new HciExtensionInstanceView(name, extensionInstanceViewType, typeHandlerVersion, status);
        }

        /// <summary> Initializes a new instance of ExtensionInstanceViewStatus. </summary>
        /// <param name="code"> The status code. </param>
        /// <param name="level"> The level code. </param>
        /// <param name="displayStatus"> The short localizable label for the status. </param>
        /// <param name="message"> The detailed status message, including for alerts and error messages. </param>
        /// <param name="time"> The time of the status. </param>
        /// <returns> A new <see cref="Models.ExtensionInstanceViewStatus"/> instance for mocking. </returns>
        public static ExtensionInstanceViewStatus ExtensionInstanceViewStatus(string code = null, HciStatusLevelType? level = null, string displayStatus = null, string message = null, DateTimeOffset? time = null)
        {
            return new ExtensionInstanceViewStatus(code, level, displayStatus, message, time);
        }

        /// <summary> Initializes a new instance of HciGalleryImageData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="extendedLocation"> The extendedLocation of the resource. </param>
        /// <param name="containerName"> Container Name for storage container. </param>
        /// <param name="imagePath"> location of the image the gallery image should be created from. </param>
        /// <param name="osType"> Operating system type that the gallery image uses [Windows, Linux]. </param>
        /// <param name="cloudInitDataSource"> Datasource for the gallery image when provisioning with cloud-init [NoCloud, Azure]. </param>
        /// <param name="hyperVGeneration"> The hypervisor generation of the Virtual Machine [V1, V2]. </param>
        /// <param name="identifier"> This is the gallery image definition identifier. </param>
        /// <param name="version"> Specifies information about the gallery image version that you want to create or update. </param>
        /// <param name="provisioningState"> Provisioning state of the gallery image. </param>
        /// <param name="status"> The observed state of gallery images. </param>
        /// <returns> A new <see cref="Hci.HciGalleryImageData"/> instance for mocking. </returns>
        public static HciGalleryImageData HciGalleryImageData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, HciExtendedLocation extendedLocation = null, string containerName = null, string imagePath = null, OperatingSystemType? osType = null, CloudInitDataSource? cloudInitDataSource = null, HciHyperVGeneration? hyperVGeneration = null, HciGalleryImageIdentifier identifier = null, HciGalleryImageVersion version = null, HciGenericProvisioningState? provisioningState = null, HciGalleryImageStatus status = null)
        {
            tags ??= new Dictionary<string, string>();

            return new HciGalleryImageData(id, name, resourceType, systemData, tags, location, extendedLocation, containerName, imagePath, osType, cloudInitDataSource, hyperVGeneration, identifier, version, provisioningState, status);
        }

        /// <summary> Initializes a new instance of HciGalleryImageStatus. </summary>
        /// <param name="errorCode"> GalleryImage provisioning error code. </param>
        /// <param name="errorMessage"> Descriptive error message. </param>
        /// <param name="provisioningStatus"></param>
        /// <param name="downloadSizeInMB"> The download status of the gallery image. </param>
        /// <param name="progressPercentage"> The progress of the operation in percentage. </param>
        /// <returns> A new <see cref="Models.HciGalleryImageStatus"/> instance for mocking. </returns>
        public static HciGalleryImageStatus HciGalleryImageStatus(string errorCode = null, string errorMessage = null, HciGalleryImageProvisioningStatus provisioningStatus = null, long? downloadSizeInMB = null, long? progressPercentage = null)
        {
            return new HciGalleryImageStatus(errorCode, errorMessage, provisioningStatus, downloadSizeInMB != null ? new GalleryImageStatusDownloadStatus(downloadSizeInMB) : null, progressPercentage);
        }

        /// <summary> Initializes a new instance of HciGalleryImageProvisioningStatus. </summary>
        /// <param name="operationId"> The ID of the operation performed on the gallery image. </param>
        /// <param name="status"> The status of the operation performed on the gallery image [Succeeded, Failed, InProgress]. </param>
        /// <returns> A new <see cref="Models.HciGalleryImageProvisioningStatus"/> instance for mocking. </returns>
        public static HciGalleryImageProvisioningStatus HciGalleryImageProvisioningStatus(string operationId = null, HciClusterStatus? status = null)
        {
            return new HciGalleryImageProvisioningStatus(operationId, status);
        }

        /// <summary> Initializes a new instance of HciMarketplaceGalleryImageData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="extendedLocation"> The extendedLocation of the resource. </param>
        /// <param name="containerName"> Container Name for storage container. </param>
        /// <param name="osType"> Operating system type that the gallery image uses [Windows, Linux]. </param>
        /// <param name="cloudInitDataSource"> Datasource for the gallery image when provisioning with cloud-init [NoCloud, Azure]. </param>
        /// <param name="hyperVGeneration"> The hypervisor generation of the Virtual Machine [V1, V2]. </param>
        /// <param name="identifier"> This is the gallery image definition identifier. </param>
        /// <param name="version"> Specifies information about the gallery image version that you want to create or update. </param>
        /// <param name="provisioningState"> Provisioning state of the marketplace gallery image. </param>
        /// <param name="status"> The observed state of marketplace gallery images. </param>
        /// <returns> A new <see cref="Hci.HciMarketplaceGalleryImageData"/> instance for mocking. </returns>
        public static HciMarketplaceGalleryImageData HciMarketplaceGalleryImageData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, HciExtendedLocation extendedLocation = null, string containerName = null, OperatingSystemType? osType = null, CloudInitDataSource? cloudInitDataSource = null, HciHyperVGeneration? hyperVGeneration = null, HciGalleryImageIdentifier identifier = null, HciGalleryImageVersion version = null, HciGenericProvisioningState? provisioningState = null, HciMarketplaceGalleryImageStatus status = null)
        {
            tags ??= new Dictionary<string, string>();

            return new HciMarketplaceGalleryImageData(id, name, resourceType, systemData, tags, location, extendedLocation, containerName, osType, cloudInitDataSource, hyperVGeneration, identifier, version, provisioningState, status);
        }

        /// <summary> Initializes a new instance of HciMarketplaceGalleryImageStatus. </summary>
        /// <param name="errorCode"> MarketplaceGalleryImage provisioning error code. </param>
        /// <param name="errorMessage"> Descriptive error message. </param>
        /// <param name="provisioningStatus"></param>
        /// <param name="downloadSizeInMB"> The download status of the gallery image. </param>
        /// <param name="progressPercentage"> The progress of the operation in percentage. </param>
        /// <returns> A new <see cref="Models.HciMarketplaceGalleryImageStatus"/> instance for mocking. </returns>
        public static HciMarketplaceGalleryImageStatus HciMarketplaceGalleryImageStatus(string errorCode = null, string errorMessage = null, HciMarketplaceGalleryImageProvisioningStatus provisioningStatus = null, long? downloadSizeInMB = null, long? progressPercentage = null)
        {
            return new HciMarketplaceGalleryImageStatus(errorCode, errorMessage, provisioningStatus, downloadSizeInMB != null ? new MarketplaceGalleryImageStatusDownloadStatus(downloadSizeInMB) : null, progressPercentage);
        }

        /// <summary> Initializes a new instance of HciMarketplaceGalleryImageProvisioningStatus. </summary>
        /// <param name="operationId"> The ID of the operation performed on the gallery image. </param>
        /// <param name="status"> The status of the operation performed on the gallery image [Succeeded, Failed, InProgress]. </param>
        /// <returns> A new <see cref="Models.HciMarketplaceGalleryImageProvisioningStatus"/> instance for mocking. </returns>
        public static HciMarketplaceGalleryImageProvisioningStatus HciMarketplaceGalleryImageProvisioningStatus(string operationId = null, HciClusterStatus? status = null)
        {
            return new HciMarketplaceGalleryImageProvisioningStatus(operationId, status);
        }

        /// <summary> Initializes a new instance of HciNetworkInterfaceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="extendedLocation"> The extendedLocation of the resource. </param>
        /// <param name="ipConfigurations"> IPConfigurations - A list of IPConfigurations of the network interface. </param>
        /// <param name="macAddress"> MacAddress - The MAC address of the network interface. </param>
        /// <param name="dnsServers"> DNS Settings for the interface. </param>
        /// <param name="provisioningState"> Provisioning state of the network interface. </param>
        /// <param name="status"> The observed state of network interfaces. </param>
        /// <returns> A new <see cref="Hci.HciNetworkInterfaceData"/> instance for mocking. </returns>
        public static HciNetworkInterfaceData HciNetworkInterfaceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, HciExtendedLocation extendedLocation = null, IEnumerable<HciIPConfiguration> ipConfigurations = null, string macAddress = null, IEnumerable<string> dnsServers = null, HciGenericProvisioningState? provisioningState = null, HciNetworkInterfaceStatus status = null)
        {
            tags ??= new Dictionary<string, string>();
            ipConfigurations ??= new List<HciIPConfiguration>();
            dnsServers ??= new List<string>();

            return new HciNetworkInterfaceData(id, name, resourceType, systemData, tags, location, extendedLocation, ipConfigurations?.ToList(), macAddress, dnsServers != null ? new InterfaceDnsSettings(dnsServers?.ToList()) : null, provisioningState, status);
        }

        /// <summary> Initializes a new instance of HciNetworkInterfaceStatus. </summary>
        /// <param name="errorCode"> NetworkInterface provisioning error code. </param>
        /// <param name="errorMessage"> Descriptive error message. </param>
        /// <param name="provisioningStatus"></param>
        /// <returns> A new <see cref="Models.HciNetworkInterfaceStatus"/> instance for mocking. </returns>
        public static HciNetworkInterfaceStatus HciNetworkInterfaceStatus(string errorCode = null, string errorMessage = null, HciNetworkInterfaceProvisioningStatus provisioningStatus = null)
        {
            return new HciNetworkInterfaceStatus(errorCode, errorMessage, provisioningStatus);
        }

        /// <summary> Initializes a new instance of HciNetworkInterfaceProvisioningStatus. </summary>
        /// <param name="operationId"> The ID of the operation performed on the network interface. </param>
        /// <param name="status"> The status of the operation performed on the network interface [Succeeded, Failed, InProgress]. </param>
        /// <returns> A new <see cref="Models.HciNetworkInterfaceProvisioningStatus"/> instance for mocking. </returns>
        public static HciNetworkInterfaceProvisioningStatus HciNetworkInterfaceProvisioningStatus(string operationId = null, HciClusterStatus? status = null)
        {
            return new HciNetworkInterfaceProvisioningStatus(operationId, status);
        }

        /// <summary> Initializes a new instance of OfferData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="provisioningState"> Provisioning State. </param>
        /// <param name="publisherId"> Identifier of the Publisher for the offer. </param>
        /// <param name="content"> JSON serialized catalog content of the offer. </param>
        /// <param name="contentVersion"> The API version of the catalog service used to serve the catalog content. </param>
        /// <param name="skuMappings"> Array of SKU mappings. </param>
        /// <returns> A new <see cref="Hci.OfferData"/> instance for mocking. </returns>
        public static OfferData OfferData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string provisioningState = null, string publisherId = null, string content = null, string contentVersion = null, IEnumerable<HciSkuMappings> skuMappings = null)
        {
            skuMappings ??= new List<HciSkuMappings>();

            return new OfferData(id, name, resourceType, systemData, provisioningState, publisherId, content, contentVersion, skuMappings?.ToList());
        }

        /// <summary> Initializes a new instance of PublisherData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="provisioningState"> Provisioning State. </param>
        /// <returns> A new <see cref="Hci.PublisherData"/> instance for mocking. </returns>
        public static PublisherData PublisherData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string provisioningState = null)
        {
            return new PublisherData(id, name, resourceType, systemData, provisioningState);
        }

        /// <summary> Initializes a new instance of HciSkuData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="provisioningState"> Provisioning State. </param>
        /// <param name="publisherId"> Identifier of the Publisher for the offer. </param>
        /// <param name="offerId"> Identifier of the Offer for the sku. </param>
        /// <param name="content"> JSON serialized catalog content of the sku offer. </param>
        /// <param name="contentVersion"> The API version of the catalog service used to serve the catalog content. </param>
        /// <param name="skuMappings"> Array of SKU mappings. </param>
        /// <returns> A new <see cref="Hci.HciSkuData"/> instance for mocking. </returns>
        public static HciSkuData HciSkuData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string provisioningState = null, string publisherId = null, string offerId = null, string content = null, string contentVersion = null, IEnumerable<HciSkuMappings> skuMappings = null)
        {
            skuMappings ??= new List<HciSkuMappings>();

            return new HciSkuData(id, name, resourceType, systemData, provisioningState, publisherId, offerId, content, contentVersion, skuMappings?.ToList());
        }

        /// <summary> Initializes a new instance of HciStorageContainerData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="extendedLocation"> The extendedLocation of the resource. </param>
        /// <param name="path"> Path of the storage container on the disk. </param>
        /// <param name="provisioningState"> Provisioning state of the storage container. </param>
        /// <param name="status"> The observed state of storage containers. </param>
        /// <returns> A new <see cref="Hci.HciStorageContainerData"/> instance for mocking. </returns>
        public static HciStorageContainerData HciStorageContainerData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, HciExtendedLocation extendedLocation = null, string path = null, HciGenericProvisioningState? provisioningState = null, HciStorageContainerStatus status = null)
        {
            tags ??= new Dictionary<string, string>();

            return new HciStorageContainerData(id, name, resourceType, systemData, tags, location, extendedLocation, path, provisioningState, status);
        }

        /// <summary> Initializes a new instance of HciStorageContainerStatus. </summary>
        /// <param name="errorCode"> StorageContainer provisioning error code. </param>
        /// <param name="errorMessage"> Descriptive error message. </param>
        /// <param name="availableSizeMB"> Amount of space available on the disk in MB. </param>
        /// <param name="containerSizeMB"> Total size of the disk in MB. </param>
        /// <param name="provisioningStatus"></param>
        /// <returns> A new <see cref="Models.HciStorageContainerStatus"/> instance for mocking. </returns>
        public static HciStorageContainerStatus HciStorageContainerStatus(string errorCode = null, string errorMessage = null, long? availableSizeMB = null, long? containerSizeMB = null, HciStorageContainerProvisioningStatus provisioningStatus = null)
        {
            return new HciStorageContainerStatus(errorCode, errorMessage, availableSizeMB, containerSizeMB, provisioningStatus);
        }

        /// <summary> Initializes a new instance of HciStorageContainerProvisioningStatus. </summary>
        /// <param name="operationId"> The ID of the operation performed on the storage container. </param>
        /// <param name="status"> The status of the operation performed on the storage container [Succeeded, Failed, InProgress]. </param>
        /// <returns> A new <see cref="Models.HciStorageContainerProvisioningStatus"/> instance for mocking. </returns>
        public static HciStorageContainerProvisioningStatus HciStorageContainerProvisioningStatus(string operationId = null, HciClusterStatus? status = null)
        {
            return new HciStorageContainerProvisioningStatus(operationId, status);
        }

        /// <summary> Initializes a new instance of UpdateRunData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="location"> The geo-location where the resource lives. </param>
        /// <param name="provisioningState"> Provisioning state of the UpdateRuns proxy resource. </param>
        /// <param name="timeStarted"> Timestamp of the update run was started. </param>
        /// <param name="lastUpdatedOn"> Timestamp of the most recently completed step in the update run. </param>
        /// <param name="duration"> Duration of the update run. </param>
        /// <param name="state"> State of the update run. </param>
        /// <param name="namePropertiesProgressName"> Name of the step. </param>
        /// <param name="description"> More detailed description of the step. </param>
        /// <param name="errorMessage"> Error message, specified if the step is in a failed state. </param>
        /// <param name="status"> Status of the step, bubbled up from the ECE action plan for installation attempts. Values are: 'Success', 'Error', 'InProgress', and 'Unknown status'. </param>
        /// <param name="startTimeUtc"> When the step started, or empty if it has not started executing. </param>
        /// <param name="endTimeUtc"> When the step reached a terminal state. </param>
        /// <param name="lastUpdatedTimeUtc"> Completion time of this step or the last completed sub-step. </param>
        /// <param name="expectedExecutionTime"> Expected execution time of a given step. This is optionally authored in the update action plan and can be empty. </param>
        /// <param name="steps"> Recursive model for child steps of this step. </param>
        /// <returns> A new <see cref="Hci.UpdateRunData"/> instance for mocking. </returns>
        public static UpdateRunData UpdateRunData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, AzureLocation? location = null, HciProvisioningState? provisioningState = null, DateTimeOffset? timeStarted = null, DateTimeOffset? lastUpdatedOn = null, string duration = null, UpdateRunPropertiesState? state = null, string namePropertiesProgressName = null, string description = null, string errorMessage = null, string status = null, DateTimeOffset? startTimeUtc = null, DateTimeOffset? endTimeUtc = null, DateTimeOffset? lastUpdatedTimeUtc = null, string expectedExecutionTime = null, IEnumerable<HciUpdateStep> steps = null)
        {
            steps ??= new List<HciUpdateStep>();

            return new UpdateRunData(id, name, resourceType, systemData, location, provisioningState, timeStarted, lastUpdatedOn, duration, state, namePropertiesProgressName, description, errorMessage, status, startTimeUtc, endTimeUtc, lastUpdatedTimeUtc, expectedExecutionTime, steps?.ToList());
        }

        /// <summary> Initializes a new instance of UpdateSummaryData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="location"> The geo-location where the resource lives. </param>
        /// <param name="provisioningState"> Provisioning state of the UpdateSummaries proxy resource. </param>
        /// <param name="oemFamily"> OEM family name. </param>
        /// <param name="currentOemVersion"> Current OEM Version. </param>
        /// <param name="hardwareModel"> Name of the hardware model. </param>
        /// <param name="packageVersions"> Current version of each updatable component. </param>
        /// <param name="currentVersion"> Current Solution Bundle version of the stamp. </param>
        /// <param name="lastUpdated"> Last time an update installation completed successfully. </param>
        /// <param name="lastChecked"> Last time the update service successfully checked for updates. </param>
        /// <param name="healthState"> Overall health state for update-specific health checks. </param>
        /// <param name="healthCheckResult"> An array of pre-check result objects. </param>
        /// <param name="healthCheckOn"> Last time the package-specific checks were run. </param>
        /// <param name="state"> Overall update state of the stamp. </param>
        /// <returns> A new <see cref="Hci.UpdateSummaryData"/> instance for mocking. </returns>
        public static UpdateSummaryData UpdateSummaryData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, AzureLocation? location = null, HciProvisioningState? provisioningState = null, string oemFamily = null, string currentOemVersion = null, string hardwareModel = null, IEnumerable<HciPackageVersionInfo> packageVersions = null, string currentVersion = null, DateTimeOffset? lastUpdated = null, DateTimeOffset? lastChecked = null, HciHealthState? healthState = null, IEnumerable<HciPrecheckResult> healthCheckResult = null, DateTimeOffset? healthCheckOn = null, UpdateSummariesPropertiesState? state = null)
        {
            packageVersions ??= new List<HciPackageVersionInfo>();
            healthCheckResult ??= new List<HciPrecheckResult>();

            return new UpdateSummaryData(id, name, resourceType, systemData, location, provisioningState, oemFamily, currentOemVersion, hardwareModel, packageVersions?.ToList(), currentVersion, lastUpdated, lastChecked, healthState, healthCheckResult?.ToList(), healthCheckOn, state);
        }

        /// <summary> Initializes a new instance of UpdateData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="location"> The geo-location where the resource lives. </param>
        /// <param name="provisioningState"> Provisioning state of the Updates proxy resource. </param>
        /// <param name="installedOn"> Date that the update was installed. </param>
        /// <param name="description"> Description of the update. </param>
        /// <param name="state"> State of the update as it relates to this stamp. </param>
        /// <param name="prerequisites"> If update State is HasPrerequisite, this property contains an array of objects describing prerequisite updates before installing this update. Otherwise, it is empty. </param>
        /// <param name="componentVersions"> An array of component versions for a Solution Bundle update, and an empty array otherwise.  </param>
        /// <param name="rebootRequired"></param>
        /// <param name="healthState"> Overall health state for update-specific health checks. </param>
        /// <param name="healthCheckResult"> An array of PrecheckResult objects. </param>
        /// <param name="healthCheckOn"> Last time the package-specific checks were run. </param>
        /// <param name="packagePath"> Path where the update package is available. </param>
        /// <param name="packageSizeInMb"> Size of the package. This value is a combination of the size from update metadata and size of the payload that results from the live scan operation for OS update content. </param>
        /// <param name="displayName"> Display name of the Update. </param>
        /// <param name="version"> Version of the update. </param>
        /// <param name="publisher"> Publisher of the update package. </param>
        /// <param name="releaseLink"> Link to release notes for the update. </param>
        /// <param name="availabilityType"> Indicates the way the update content can be downloaded. </param>
        /// <param name="packageType"> Customer-visible type of the update. </param>
        /// <param name="additionalProperties"> Extensible KV pairs serialized as a string. This is currently used to report the stamp OEM family and hardware model information when an update is flagged as Invalid for the stamp based on OEM type. </param>
        /// <param name="progressPercentage"> Progress percentage of ongoing operation. Currently this property is only valid when the update is in the Downloading state, where it maps to how much of the update content has been downloaded. </param>
        /// <param name="notifyMessage"> Brief message with instructions for updates of AvailabilityType Notify. </param>
        /// <returns> A new <see cref="Hci.UpdateData"/> instance for mocking. </returns>
        public static UpdateData UpdateData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, AzureLocation? location = null, HciProvisioningState? provisioningState = null, DateTimeOffset? installedOn = null, string description = null, HciUpdateState? state = null, IEnumerable<UpdatePrerequisite> prerequisites = null, IEnumerable<HciPackageVersionInfo> componentVersions = null, HciNodeRebootRequirement? rebootRequired = null, HciHealthState? healthState = null, IEnumerable<HciPrecheckResult> healthCheckResult = null, DateTimeOffset? healthCheckOn = null, string packagePath = null, float? packageSizeInMb = null, string displayName = null, string version = null, string publisher = null, string releaseLink = null, HciAvailabilityType? availabilityType = null, string packageType = null, string additionalProperties = null, float? progressPercentage = null, string notifyMessage = null)
        {
            prerequisites ??= new List<UpdatePrerequisite>();
            componentVersions ??= new List<HciPackageVersionInfo>();
            healthCheckResult ??= new List<HciPrecheckResult>();

            return new UpdateData(id, name, resourceType, systemData, location, provisioningState, installedOn, description, state, prerequisites?.ToList(), componentVersions?.ToList(), rebootRequired, healthState, healthCheckResult?.ToList(), healthCheckOn, packagePath, packageSizeInMb, displayName, version, publisher, releaseLink, availabilityType, packageType, additionalProperties, progressPercentage, notifyMessage);
        }

        /// <summary> Initializes a new instance of HciVirtualHardDiskData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="extendedLocation"> The extendedLocation of the resource. </param>
        /// <param name="blockSizeBytes"></param>
        /// <param name="diskSizeGB"> Size of the disk in GB. </param>
        /// <param name="dynamic"> Boolean for enabling dynamic sizing on the virtual hard disk. </param>
        /// <param name="logicalSectorBytes"></param>
        /// <param name="physicalSectorBytes"></param>
        /// <param name="hyperVGeneration"> The hypervisor generation of the Virtual Machine [V1, V2]. </param>
        /// <param name="diskFileFormat"> The format of the actual VHD file [vhd, vhdx]. </param>
        /// <param name="provisioningState"> Provisioning state of the virtual hard disk. </param>
        /// <param name="containerId"> Storage ContainerID of the storage container to be used for VHD. </param>
        /// <param name="status"> The observed state of virtual hard disks. </param>
        /// <returns> A new <see cref="Hci.HciVirtualHardDiskData"/> instance for mocking. </returns>
        public static HciVirtualHardDiskData HciVirtualHardDiskData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, HciExtendedLocation extendedLocation = null, int? blockSizeBytes = null, long? diskSizeGB = null, bool? @dynamic = null, int? logicalSectorBytes = null, int? physicalSectorBytes = null, HciHyperVGeneration? hyperVGeneration = null, HciDiskFileFormat? diskFileFormat = null, HciGenericProvisioningState? provisioningState = null, string containerId = null, HciVirtualHardDiskStatus status = null)
        {
            tags ??= new Dictionary<string, string>();

            return new HciVirtualHardDiskData(id, name, resourceType, systemData, tags, location, extendedLocation, blockSizeBytes, diskSizeGB, @dynamic, logicalSectorBytes, physicalSectorBytes, hyperVGeneration, diskFileFormat, provisioningState, containerId, status);
        }

        /// <summary> Initializes a new instance of HciVirtualHardDiskStatus. </summary>
        /// <param name="errorCode"> VirtualHardDisk provisioning error code. </param>
        /// <param name="errorMessage"> Descriptive error message. </param>
        /// <param name="provisioningStatus"></param>
        /// <returns> A new <see cref="Models.HciVirtualHardDiskStatus"/> instance for mocking. </returns>
        public static HciVirtualHardDiskStatus HciVirtualHardDiskStatus(string errorCode = null, string errorMessage = null, HciVirtualHardDiskProvisioningStatus provisioningStatus = null)
        {
            return new HciVirtualHardDiskStatus(errorCode, errorMessage, provisioningStatus);
        }

        /// <summary> Initializes a new instance of HciVirtualHardDiskProvisioningStatus. </summary>
        /// <param name="operationId"> The ID of the operation performed on the virtual hard disk. </param>
        /// <param name="status"> The status of the operation performed on the virtual hard disk [Succeeded, Failed, InProgress]. </param>
        /// <returns> A new <see cref="Models.HciVirtualHardDiskProvisioningStatus"/> instance for mocking. </returns>
        public static HciVirtualHardDiskProvisioningStatus HciVirtualHardDiskProvisioningStatus(string operationId = null, HciClusterStatus? status = null)
        {
            return new HciVirtualHardDiskProvisioningStatus(operationId, status);
        }

        /// <summary> Initializes a new instance of HciVirtualMachineData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="extendedLocation"> The extendedLocation of the resource. </param>
        /// <param name="identity"> Identity for the resource. Current supported identity types: SystemAssigned. </param>
        /// <param name="hardwareProfile"> HardwareProfile - Specifies the hardware settings for the virtual machine. </param>
        /// <param name="networkInterfaces"> NetworkProfile - describes the network configuration the virtual machine. </param>
        /// <param name="osProfile"> OsProfile - describes the configuration of the operating system and sets login data. </param>
        /// <param name="securityProfile"> SecurityProfile - Specifies the security settings for the virtual machine. </param>
        /// <param name="storageProfile"> StorageProfile - contains information about the disks and storage information for the virtual machine. </param>
        /// <param name="provisioningState"> Provisioning state of the virtual machine. </param>
        /// <param name="status"> The observed state of virtual machines. </param>
        /// <param name="guestAgentProfile"> Guest agent status properties. </param>
        /// <param name="vmId"> Unique identifier for the vm resource. </param>
        /// <returns> A new <see cref="Hci.HciVirtualMachineData"/> instance for mocking. </returns>
        public static HciVirtualMachineData HciVirtualMachineData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, HciExtendedLocation extendedLocation = null, ManagedServiceIdentity identity = null, HciHardwareProfile hardwareProfile = null, IEnumerable<WritableSubResource> networkInterfaces = null, HciOSProfile osProfile = null, HciSecurityProfile securityProfile = null, HciStorageProfile storageProfile = null, HciGenericProvisioningState? provisioningState = null, HciVirtualMachineStatus status = null, HciGuestAgentProfile guestAgentProfile = null, string vmId = null)
        {
            tags ??= new Dictionary<string, string>();
            networkInterfaces ??= new List<WritableSubResource>();

            return new HciVirtualMachineData(id, name, resourceType, systemData, tags, location, extendedLocation, identity, hardwareProfile, networkInterfaces != null ? new VirtualMachinePropertiesNetworkProfile(networkInterfaces?.ToList()) : null, osProfile, securityProfile, storageProfile, provisioningState, status, guestAgentProfile, vmId);
        }

        /// <summary> Initializes a new instance of HciVirtualMachineStatus. </summary>
        /// <param name="errorCode"> VirtualMachine provisioning error code. </param>
        /// <param name="errorMessage"> Descriptive error message. </param>
        /// <param name="powerState"> The power state of the virtual machine. </param>
        /// <param name="provisioningStatus"></param>
        /// <returns> A new <see cref="Models.HciVirtualMachineStatus"/> instance for mocking. </returns>
        public static HciVirtualMachineStatus HciVirtualMachineStatus(string errorCode = null, string errorMessage = null, HciPowerState? powerState = null, HciVirtualMachineProvisioningStatus provisioningStatus = null)
        {
            return new HciVirtualMachineStatus(errorCode, errorMessage, powerState, provisioningStatus);
        }

        /// <summary> Initializes a new instance of HciVirtualMachineProvisioningStatus. </summary>
        /// <param name="operationId"> The ID of the operation performed on the virtual machine. </param>
        /// <param name="status"> The status of the operation performed on the virtual machine [Succeeded, Failed, InProgress]. </param>
        /// <returns> A new <see cref="Models.HciVirtualMachineProvisioningStatus"/> instance for mocking. </returns>
        public static HciVirtualMachineProvisioningStatus HciVirtualMachineProvisioningStatus(string operationId = null, HciClusterStatus? status = null)
        {
            return new HciVirtualMachineProvisioningStatus(operationId, status);
        }

        /// <summary> Initializes a new instance of HciGuestAgentProfile. </summary>
        /// <param name="vmUuid"> Specifies the VM's unique SMBIOS ID. </param>
        /// <param name="status"> The status of the hybrid machine agent. </param>
        /// <param name="lastStatusChange"> The time of the last status change. </param>
        /// <param name="agentVersion"> The hybrid machine agent full version. </param>
        /// <param name="errorDetails"> Details about the error state. </param>
        /// <returns> A new <see cref="Models.HciGuestAgentProfile"/> instance for mocking. </returns>
        public static HciGuestAgentProfile HciGuestAgentProfile(string vmUuid = null, HciAgentStatusType? status = null, DateTimeOffset? lastStatusChange = null, string agentVersion = null, IEnumerable<ResponseError> errorDetails = null)
        {
            errorDetails ??= new List<ResponseError>();

            return new HciGuestAgentProfile(vmUuid, status, lastStatusChange, agentVersion, errorDetails?.ToList());
        }

        /// <summary> Initializes a new instance of HciHybridIdentityMetadataData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="resourceUid"> The unique identifier for the resource. </param>
        /// <param name="publicKey"> The Public Key. </param>
        /// <param name="identity"> Identity for the resource. Current supported identity types: SystemAssigned. </param>
        /// <param name="provisioningState"> The provisioning state. </param>
        /// <returns> A new <see cref="Hci.HciHybridIdentityMetadataData"/> instance for mocking. </returns>
        public static HciHybridIdentityMetadataData HciHybridIdentityMetadataData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string resourceUid = null, string publicKey = null, ManagedServiceIdentity identity = null, string provisioningState = null)
        {
            return new HciHybridIdentityMetadataData(id, name, resourceType, systemData, resourceUid, publicKey, identity, provisioningState);
        }

        /// <summary> Initializes a new instance of HciMachineExtensionData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="forceUpdateTag"> How the extension handler should be forced to update even if the extension configuration has not changed. </param>
        /// <param name="publisher"> The name of the extension handler publisher. </param>
        /// <param name="typePropertiesType"> Specifies the type of the extension; an example is "CustomScriptExtension". </param>
        /// <param name="typeHandlerVersion"> Specifies the version of the script handler. </param>
        /// <param name="autoUpgradeMinorVersion"> Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true. </param>
        /// <param name="settings"> Json formatted public settings for the extension. </param>
        /// <param name="protectedSettings"> The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all. </param>
        /// <param name="provisioningState"> The provisioning state, which only appears in the response. </param>
        /// <param name="instanceView"> The machine extension instance view. </param>
        /// <returns> A new <see cref="Hci.HciMachineExtensionData"/> instance for mocking. </returns>
        public static HciMachineExtensionData HciMachineExtensionData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, string forceUpdateTag = null, string publisher = null, string typePropertiesType = null, string typeHandlerVersion = null, bool? autoUpgradeMinorVersion = null, BinaryData settings = null, BinaryData protectedSettings = null, string provisioningState = null, HciMachineExtensionInstanceView instanceView = null)
        {
            tags ??= new Dictionary<string, string>();

            return new HciMachineExtensionData(id, name, resourceType, systemData, tags, location, forceUpdateTag, publisher, typePropertiesType, typeHandlerVersion, autoUpgradeMinorVersion, settings, protectedSettings, provisioningState, instanceView);
        }

        /// <summary> Initializes a new instance of HciMachineExtensionInstanceView. </summary>
        /// <param name="name"> The machine extension name. </param>
        /// <param name="machineExtensionInstanceViewType"> Specifies the type of the extension; an example is "CustomScriptExtension". </param>
        /// <param name="typeHandlerVersion"> Specifies the version of the script handler. </param>
        /// <param name="status"> Instance view status. </param>
        /// <returns> A new <see cref="Models.HciMachineExtensionInstanceView"/> instance for mocking. </returns>
        public static HciMachineExtensionInstanceView HciMachineExtensionInstanceView(string name = null, string machineExtensionInstanceViewType = null, string typeHandlerVersion = null, HciInstanceViewStatus status = null)
        {
            return new HciMachineExtensionInstanceView(name, machineExtensionInstanceViewType, typeHandlerVersion, status);
        }

        /// <summary> Initializes a new instance of HciInstanceViewStatus. </summary>
        /// <param name="code"> The status code. </param>
        /// <param name="level"> The level code. </param>
        /// <param name="displayStatus"> The short localizable label for the status. </param>
        /// <param name="message"> The detailed status message, including for alerts and error messages. </param>
        /// <param name="time"> The time of the status. </param>
        /// <returns> A new <see cref="Models.HciInstanceViewStatus"/> instance for mocking. </returns>
        public static HciInstanceViewStatus HciInstanceViewStatus(string code = null, HciStatusLevelType? level = null, string displayStatus = null, string message = null, DateTimeOffset? time = null)
        {
            return new HciInstanceViewStatus(code, level, displayStatus, message, time);
        }

        /// <summary> Initializes a new instance of HciGuestAgentData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="credentials"> Username / Password Credentials to provision guest agent. </param>
        /// <param name="httpsProxy"> HTTP Proxy configuration for the VM. </param>
        /// <param name="provisioningAction"> The guest agent provisioning action. </param>
        /// <param name="status"> The guest agent status. </param>
        /// <param name="provisioningState"> The provisioning state. </param>
        /// <returns> A new <see cref="Hci.HciGuestAgentData"/> instance for mocking. </returns>
        public static HciGuestAgentData HciGuestAgentData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, HciGuestCredential credentials = null, string httpsProxy = null, HciAgentProvisioningAction? provisioningAction = null, string status = null, string provisioningState = null)
        {
            return new HciGuestAgentData(id, name, resourceType, systemData, credentials, httpsProxy != null ? new HttpProxyConfiguration(httpsProxy) : null, provisioningAction, status, provisioningState);
        }

        /// <summary> Initializes a new instance of HciVirtualNetworkData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="extendedLocation"> The extendedLocation of the resource. </param>
        /// <param name="dhcpOptionsDnsServers"> DhcpOptions contains an array of DNS servers available to VMs deployed in the virtual network. Standard DHCP option for a subnet overrides VNET DHCP options. </param>
        /// <param name="networkType"> Type of the network. </param>
        /// <param name="subnets"> Subnet - list of subnets under the virtual network. </param>
        /// <param name="provisioningState"> Provisioning state of the virtual network. </param>
        /// <param name="vmSwitchName"> name of the network switch to be used for VMs. </param>
        /// <param name="status"> The observed state of virtual networks. </param>
        /// <returns> A new <see cref="Hci.HciVirtualNetworkData"/> instance for mocking. </returns>
        public static HciVirtualNetworkData HciVirtualNetworkData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, HciExtendedLocation extendedLocation = null, IEnumerable<string> dhcpOptionsDnsServers = null, HciNetworkType? networkType = null, IEnumerable<HciSubnet> subnets = null, HciGenericProvisioningState? provisioningState = null, string vmSwitchName = null, HciVirtualNetworkStatus status = null)
        {
            tags ??= new Dictionary<string, string>();
            dhcpOptionsDnsServers ??= new List<string>();
            subnets ??= new List<HciSubnet>();

            return new HciVirtualNetworkData(id, name, resourceType, systemData, tags, location, extendedLocation, dhcpOptionsDnsServers != null ? new VirtualNetworkPropertiesDhcpOptions(dhcpOptionsDnsServers?.ToList()) : null, networkType, subnets?.ToList(), provisioningState, vmSwitchName, status);
        }

        /// <summary> Initializes a new instance of HciIPPoolInfo. </summary>
        /// <param name="used"> no. of ip addresses allocated from the ip pool. </param>
        /// <param name="available"> no. of ip addresses available in the ip pool. </param>
        /// <returns> A new <see cref="Models.HciIPPoolInfo"/> instance for mocking. </returns>
        public static HciIPPoolInfo HciIPPoolInfo(string used = null, string available = null)
        {
            return new HciIPPoolInfo(used, available);
        }

        /// <summary> Initializes a new instance of HciVirtualNetworkStatus. </summary>
        /// <param name="errorCode"> VirtualNetwork provisioning error code. </param>
        /// <param name="errorMessage"> Descriptive error message. </param>
        /// <param name="provisioningStatus"></param>
        /// <returns> A new <see cref="Models.HciVirtualNetworkStatus"/> instance for mocking. </returns>
        public static HciVirtualNetworkStatus HciVirtualNetworkStatus(string errorCode = null, string errorMessage = null, HciVirtualNetworkProvisioningStatus provisioningStatus = null)
        {
            return new HciVirtualNetworkStatus(errorCode, errorMessage, provisioningStatus);
        }

        /// <summary> Initializes a new instance of HciVirtualNetworkProvisioningStatus. </summary>
        /// <param name="operationId"> The ID of the operation performed on the virtual network. </param>
        /// <param name="status"> The status of the operation performed on the virtual network [Succeeded, Failed, InProgress]. </param>
        /// <returns> A new <see cref="Models.HciVirtualNetworkProvisioningStatus"/> instance for mocking. </returns>
        public static HciVirtualNetworkProvisioningStatus HciVirtualNetworkProvisioningStatus(string operationId = null, HciClusterStatus? status = null)
        {
            return new HciVirtualNetworkProvisioningStatus(operationId, status);
        }
    }
}
