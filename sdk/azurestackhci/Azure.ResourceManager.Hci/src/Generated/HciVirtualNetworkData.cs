// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Hci.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Hci
{
    /// <summary>
    /// A class representing the HciVirtualNetwork data model.
    /// The virtual network resource definition.
    /// </summary>
    public partial class HciVirtualNetworkData : TrackedResourceData
    {
        /// <summary> Initializes a new instance of HciVirtualNetworkData. </summary>
        /// <param name="location"> The location. </param>
        public HciVirtualNetworkData(AzureLocation location) : base(location)
        {
            Subnets = new ChangeTrackingList<HciSubnet>();
        }

        /// <summary> Initializes a new instance of HciVirtualNetworkData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="extendedLocation"> The extendedLocation of the resource. </param>
        /// <param name="dhcpOptions"> DhcpOptions contains an array of DNS servers available to VMs deployed in the virtual network. Standard DHCP option for a subnet overrides VNET DHCP options. </param>
        /// <param name="networkType"> Type of the network. </param>
        /// <param name="subnets"> Subnet - list of subnets under the virtual network. </param>
        /// <param name="provisioningState"> Provisioning state of the virtual network. </param>
        /// <param name="vmSwitchName"> name of the network switch to be used for VMs. </param>
        /// <param name="status"> The observed state of virtual networks. </param>
        internal HciVirtualNetworkData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, IDictionary<string, string> tags, AzureLocation location, HciExtendedLocation extendedLocation, VirtualNetworkPropertiesDhcpOptions dhcpOptions, HciNetworkType? networkType, IList<HciSubnet> subnets, HciGenericProvisioningState? provisioningState, string vmSwitchName, HciVirtualNetworkStatus status) : base(id, name, resourceType, systemData, tags, location)
        {
            ExtendedLocation = extendedLocation;
            DhcpOptions = dhcpOptions;
            NetworkType = networkType;
            Subnets = subnets;
            ProvisioningState = provisioningState;
            VmSwitchName = vmSwitchName;
            Status = status;
        }

        /// <summary> The extendedLocation of the resource. </summary>
        public HciExtendedLocation ExtendedLocation { get; set; }
        /// <summary> DhcpOptions contains an array of DNS servers available to VMs deployed in the virtual network. Standard DHCP option for a subnet overrides VNET DHCP options. </summary>
        internal VirtualNetworkPropertiesDhcpOptions DhcpOptions { get; set; }
        /// <summary> The list of DNS servers IP addresses. </summary>
        public IList<string> DhcpOptionsDnsServers
        {
            get
            {
                if (DhcpOptions is null)
                    DhcpOptions = new VirtualNetworkPropertiesDhcpOptions();
                return DhcpOptions.DnsServers;
            }
        }

        /// <summary> Type of the network. </summary>
        public HciNetworkType? NetworkType { get; set; }
        /// <summary> Subnet - list of subnets under the virtual network. </summary>
        public IList<HciSubnet> Subnets { get; }
        /// <summary> Provisioning state of the virtual network. </summary>
        public HciGenericProvisioningState? ProvisioningState { get; }
        /// <summary> name of the network switch to be used for VMs. </summary>
        public string VmSwitchName { get; set; }
        /// <summary> The observed state of virtual networks. </summary>
        public HciVirtualNetworkStatus Status { get; }
    }
}
