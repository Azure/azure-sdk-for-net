// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

<<<<<<<< HEAD:sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/InstanceReconciliationPolicy.cs
namespace Azure.ResourceManager.WorkloadOrchestration.Models
{
    /// <summary> Defines a ReconciliationPolicy. </summary>
    public partial class InstanceReconciliationPolicy
========
namespace Azure.ResourceManager.Hci.Vm.Models
{
    /// <summary> Route table resource. </summary>
    public partial class HciVmNetworkingRouteTable
>>>>>>>> 55d5a2fdb94afd7949d951566821912afaacc538:sdk/azurestackhci/Azure.ResourceManager.Hci.Vm/src/Generated/Models/HciVmNetworkingRouteTable.cs
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

<<<<<<<< HEAD:sdk/workloadorchestration/Azure.ResourceManager.WorkloadOrchestration/src/Generated/Models/InstanceReconciliationPolicy.cs
        /// <summary> Initializes a new instance of <see cref="InstanceReconciliationPolicy"/>. </summary>
        /// <param name="state"> The state of the ReconciliationPolicy. </param>
        /// <param name="interval"> Policy interval. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="interval"/> is null. </exception>
        public InstanceReconciliationPolicy(InstanceReconciliationState state, string interval)
        {
            Argument.AssertNotNull(interval, nameof(interval));

            State = state;
            Interval = interval;
        }

        /// <summary> Initializes a new instance of <see cref="InstanceReconciliationPolicy"/>. </summary>
        /// <param name="state"> The state of the ReconciliationPolicy. </param>
        /// <param name="interval"> Policy interval. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal InstanceReconciliationPolicy(InstanceReconciliationState state, string interval, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            State = state;
            Interval = interval;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="InstanceReconciliationPolicy"/> for deserialization. </summary>
        internal InstanceReconciliationPolicy()
        {
        }

        /// <summary> The state of the ReconciliationPolicy. </summary>
        public InstanceReconciliationState State { get; set; }
        /// <summary> Policy interval. </summary>
        public string Interval { get; set; }
========
        /// <summary> Initializes a new instance of <see cref="HciVmNetworkingRouteTable"/>. </summary>
        public HciVmNetworkingRouteTable()
        {
            Routes = new ChangeTrackingList<HciVmNetworkingRoute>();
        }

        /// <summary> Initializes a new instance of <see cref="HciVmNetworkingRouteTable"/>. </summary>
        /// <param name="etag"> A unique read-only string that changes whenever the resource is updated. </param>
        /// <param name="name"> Resource name. </param>
        /// <param name="type"> Resource type. </param>
        /// <param name="routes"> Collection of routes contained within a route table. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal HciVmNetworkingRouteTable(string etag, string name, string type, IList<HciVmNetworkingRoute> routes, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ETag = etag;
            Name = name;
            Type = type;
            Routes = routes;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> A unique read-only string that changes whenever the resource is updated. </summary>
        public string ETag { get; }
        /// <summary> Resource name. </summary>
        public string Name { get; }
        /// <summary> Resource type. </summary>
        public string Type { get; }
        /// <summary> Collection of routes contained within a route table. </summary>
        public IList<HciVmNetworkingRoute> Routes { get; }
>>>>>>>> 55d5a2fdb94afd7949d951566821912afaacc538:sdk/azurestackhci/Azure.ResourceManager.Hci.Vm/src/Generated/Models/HciVmNetworkingRouteTable.cs
    }
}
