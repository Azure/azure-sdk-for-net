// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Hci.Vm.Models
{
    public partial class VirtualMachineInstanceProperties : IUtf8JsonSerializable, IJsonModel<VirtualMachineInstanceProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<VirtualMachineInstanceProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<VirtualMachineInstanceProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<VirtualMachineInstanceProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(VirtualMachineInstanceProperties)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(HardwareProfile))
            {
                writer.WritePropertyName("hardwareProfile"u8);
                writer.WriteObjectValue(HardwareProfile, options);
            }
            if (Optional.IsDefined(PlacementProfile))
            {
                writer.WritePropertyName("placementProfile"u8);
                writer.WriteObjectValue(PlacementProfile, options);
            }
            if (Optional.IsDefined(NetworkProfile))
            {
                writer.WritePropertyName("networkProfile"u8);
                writer.WriteObjectValue(NetworkProfile, options);
            }
            if (Optional.IsDefined(OSProfile))
            {
                writer.WritePropertyName("osProfile"u8);
                writer.WriteObjectValue(OSProfile, options);
            }
            if (Optional.IsDefined(SecurityProfile))
            {
                writer.WritePropertyName("securityProfile"u8);
                writer.WriteObjectValue(SecurityProfile, options);
            }
            if (Optional.IsDefined(StorageProfile))
            {
                writer.WritePropertyName("storageProfile"u8);
                writer.WriteObjectValue(StorageProfile, options);
            }
            if (Optional.IsDefined(HttpProxyConfig))
            {
                writer.WritePropertyName("httpProxyConfig"u8);
                writer.WriteObjectValue(HttpProxyConfig, options);
            }
            if (Optional.IsDefined(CreateFromLocal))
            {
                writer.WritePropertyName("createFromLocal"u8);
                writer.WriteBooleanValue(CreateFromLocal.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(InstanceView))
            {
                writer.WritePropertyName("instanceView"u8);
                writer.WriteObjectValue(InstanceView, options);
            }
            if (options.Format != "W" && Optional.IsDefined(Status))
            {
                writer.WritePropertyName("status"u8);
                writer.WriteObjectValue(Status, options);
            }
            if (Optional.IsDefined(GuestAgentInstallStatus))
            {
                writer.WritePropertyName("guestAgentInstallStatus"u8);
                writer.WriteObjectValue(GuestAgentInstallStatus, options);
            }
            if (options.Format != "W" && Optional.IsDefined(VmId))
            {
                writer.WritePropertyName("vmId"u8);
                writer.WriteStringValue(VmId);
            }
            if (Optional.IsDefined(ResourceUid))
            {
                writer.WritePropertyName("resourceUid"u8);
                writer.WriteStringValue(ResourceUid);
            }
            if (options.Format != "W" && Optional.IsDefined(HyperVVmId))
            {
                writer.WritePropertyName("hyperVVmId"u8);
                writer.WriteStringValue(HyperVVmId);
            }
            if (options.Format != "W" && Optional.IsDefined(HostNodeName))
            {
                writer.WritePropertyName("hostNodeName"u8);
                writer.WriteStringValue(HostNodeName);
            }
            if (options.Format != "W" && Optional.IsDefined(HostNodeIPAddress))
            {
                writer.WritePropertyName("hostNodeIpAddress"u8);
                writer.WriteStringValue(HostNodeIPAddress);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        VirtualMachineInstanceProperties IJsonModel<VirtualMachineInstanceProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<VirtualMachineInstanceProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(VirtualMachineInstanceProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeVirtualMachineInstanceProperties(document.RootElement, options);
        }

        internal static VirtualMachineInstanceProperties DeserializeVirtualMachineInstanceProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            VirtualMachineInstancePropertiesHardwareProfile hardwareProfile = default;
            VirtualMachineInstancePropertiesPlacementProfile placementProfile = default;
            VirtualMachineInstancePropertiesNetworkProfile networkProfile = default;
            VirtualMachineInstancePropertiesOSProfile osProfile = default;
            VirtualMachineInstancePropertiesSecurityProfile securityProfile = default;
            VirtualMachineInstancePropertiesStorageProfile storageProfile = default;
            HttpProxyConfiguration httpProxyConfig = default;
            bool? createFromLocal = default;
            ProvisioningStateEnum? provisioningState = default;
            VirtualMachineInstanceView instanceView = default;
            VirtualMachineInstanceStatus status = default;
            GuestAgentInstallStatus guestAgentInstallStatus = default;
            string vmId = default;
            string resourceUid = default;
            string hyperVVmId = default;
            string hostNodeName = default;
            string hostNodeIPAddress = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("hardwareProfile"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    hardwareProfile = VirtualMachineInstancePropertiesHardwareProfile.DeserializeVirtualMachineInstancePropertiesHardwareProfile(property.Value, options);
                    continue;
                }
                if (property.NameEquals("placementProfile"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    placementProfile = VirtualMachineInstancePropertiesPlacementProfile.DeserializeVirtualMachineInstancePropertiesPlacementProfile(property.Value, options);
                    continue;
                }
                if (property.NameEquals("networkProfile"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    networkProfile = VirtualMachineInstancePropertiesNetworkProfile.DeserializeVirtualMachineInstancePropertiesNetworkProfile(property.Value, options);
                    continue;
                }
                if (property.NameEquals("osProfile"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    osProfile = VirtualMachineInstancePropertiesOSProfile.DeserializeVirtualMachineInstancePropertiesOSProfile(property.Value, options);
                    continue;
                }
                if (property.NameEquals("securityProfile"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    securityProfile = VirtualMachineInstancePropertiesSecurityProfile.DeserializeVirtualMachineInstancePropertiesSecurityProfile(property.Value, options);
                    continue;
                }
                if (property.NameEquals("storageProfile"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    storageProfile = VirtualMachineInstancePropertiesStorageProfile.DeserializeVirtualMachineInstancePropertiesStorageProfile(property.Value, options);
                    continue;
                }
                if (property.NameEquals("httpProxyConfig"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    httpProxyConfig = HttpProxyConfiguration.DeserializeHttpProxyConfiguration(property.Value, options);
                    continue;
                }
                if (property.NameEquals("createFromLocal"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    createFromLocal = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new ProvisioningStateEnum(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("instanceView"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    instanceView = VirtualMachineInstanceView.DeserializeVirtualMachineInstanceView(property.Value, options);
                    continue;
                }
                if (property.NameEquals("status"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    status = VirtualMachineInstanceStatus.DeserializeVirtualMachineInstanceStatus(property.Value, options);
                    continue;
                }
                if (property.NameEquals("guestAgentInstallStatus"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    guestAgentInstallStatus = GuestAgentInstallStatus.DeserializeGuestAgentInstallStatus(property.Value, options);
                    continue;
                }
                if (property.NameEquals("vmId"u8))
                {
                    vmId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("resourceUid"u8))
                {
                    resourceUid = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("hyperVVmId"u8))
                {
                    hyperVVmId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("hostNodeName"u8))
                {
                    hostNodeName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("hostNodeIpAddress"u8))
                {
                    hostNodeIPAddress = property.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new VirtualMachineInstanceProperties(
                hardwareProfile,
                placementProfile,
                networkProfile,
                osProfile,
                securityProfile,
                storageProfile,
                httpProxyConfig,
                createFromLocal,
                provisioningState,
                instanceView,
                status,
                guestAgentInstallStatus,
                vmId,
                resourceUid,
                hyperVVmId,
                hostNodeName,
                hostNodeIPAddress,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<VirtualMachineInstanceProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<VirtualMachineInstanceProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerHciVmContext.Default);
                default:
                    throw new FormatException($"The model {nameof(VirtualMachineInstanceProperties)} does not support writing '{options.Format}' format.");
            }
        }

        VirtualMachineInstanceProperties IPersistableModel<VirtualMachineInstanceProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<VirtualMachineInstanceProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeVirtualMachineInstanceProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(VirtualMachineInstanceProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<VirtualMachineInstanceProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
