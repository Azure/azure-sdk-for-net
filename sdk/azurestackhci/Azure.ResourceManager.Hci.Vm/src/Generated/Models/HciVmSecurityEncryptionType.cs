// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using Azure.ResourceManager.Hci.Vm;

namespace Azure.ResourceManager.Hci.Vm.Models
{
    /// <summary> Encryption type of the managed disk enum. </summary>
    public readonly partial struct HciVmSecurityEncryptionType : IEquatable<HciVmSecurityEncryptionType>
    {
        private readonly string _value;
        /// <summary> Non-persisted TPM encryption type. </summary>
        private const string NonPersistedTpmValue = "NonPersistedTPM";

        /// <summary> Initializes a new instance of <see cref="HciVmSecurityEncryptionType"/>. </summary>
        /// <param name="value"> The value. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public HciVmSecurityEncryptionType(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        /// <summary> Non-persisted TPM encryption type. </summary>
        public static HciVmSecurityEncryptionType NonPersistedTpm { get; } = new HciVmSecurityEncryptionType(NonPersistedTpmValue);

        /// <summary> Determines if two <see cref="HciVmSecurityEncryptionType"/> values are the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator ==(HciVmSecurityEncryptionType left, HciVmSecurityEncryptionType right) => left.Equals(right);

        /// <summary> Determines if two <see cref="HciVmSecurityEncryptionType"/> values are not the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator !=(HciVmSecurityEncryptionType left, HciVmSecurityEncryptionType right) => !left.Equals(right);

        /// <summary> Converts a string to a <see cref="HciVmSecurityEncryptionType"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator HciVmSecurityEncryptionType(string value) => new HciVmSecurityEncryptionType(value);

        /// <summary> Converts a string to a <see cref="HciVmSecurityEncryptionType"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator HciVmSecurityEncryptionType?(string value) => value == null ? null : new HciVmSecurityEncryptionType(value);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is HciVmSecurityEncryptionType other && Equals(other);

        /// <inheritdoc/>
        public bool Equals(HciVmSecurityEncryptionType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        /// <inheritdoc/>
        public override string ToString() => _value;
    }
}
