// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Hci.Vm.Models
{
    /// <summary> Type of Logical Network. </summary>
    public readonly partial struct HciVmLogicalNetworkType : IEquatable<HciVmLogicalNetworkType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="HciVmLogicalNetworkType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public HciVmLogicalNetworkType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string WorkloadValue = "Workload";
        private const string InfrastructureValue = "Infrastructure";

        /// <summary> Logical Network of type Workload. </summary>
        public static HciVmLogicalNetworkType Workload { get; } = new HciVmLogicalNetworkType(WorkloadValue);
        /// <summary> Logical Network of type Infrastructure. </summary>
        public static HciVmLogicalNetworkType Infrastructure { get; } = new HciVmLogicalNetworkType(InfrastructureValue);
        /// <summary> Determines if two <see cref="HciVmLogicalNetworkType"/> values are the same. </summary>
        public static bool operator ==(HciVmLogicalNetworkType left, HciVmLogicalNetworkType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="HciVmLogicalNetworkType"/> values are not the same. </summary>
        public static bool operator !=(HciVmLogicalNetworkType left, HciVmLogicalNetworkType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="HciVmLogicalNetworkType"/>. </summary>
        public static implicit operator HciVmLogicalNetworkType(string value) => new HciVmLogicalNetworkType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is HciVmLogicalNetworkType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(HciVmLogicalNetworkType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
