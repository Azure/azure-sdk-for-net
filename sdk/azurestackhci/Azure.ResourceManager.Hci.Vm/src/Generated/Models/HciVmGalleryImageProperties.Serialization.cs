// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Hci.Vm.Models
{
    public partial class HciVmGalleryImageProperties : IUtf8JsonSerializable, IJsonModel<HciVmGalleryImageProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<HciVmGalleryImageProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<HciVmGalleryImageProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<HciVmGalleryImageProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(HciVmGalleryImageProperties)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(ContainerId))
            {
                writer.WritePropertyName("containerId"u8);
                writer.WriteStringValue(ContainerId);
            }
            if (Optional.IsDefined(ImagePath))
            {
                writer.WritePropertyName("imagePath"u8);
                writer.WriteStringValue(ImagePath);
            }
            writer.WritePropertyName("osType"u8);
            writer.WriteStringValue(OSType.ToString());
            if (Optional.IsDefined(CloudInitDataSource))
            {
                writer.WritePropertyName("cloudInitDataSource"u8);
                writer.WriteStringValue(CloudInitDataSource.Value.ToString());
            }
            if (Optional.IsDefined(HyperVGeneration))
            {
                writer.WritePropertyName("hyperVGeneration"u8);
                writer.WriteStringValue(HyperVGeneration.Value.ToString());
            }
            if (Optional.IsDefined(VmImageRepositoryCredentials))
            {
                writer.WritePropertyName("vmImageRepositoryCredentials"u8);
                writer.WriteObjectValue(VmImageRepositoryCredentials, options);
            }
            if (Optional.IsDefined(Identifier))
            {
                writer.WritePropertyName("identifier"u8);
                writer.WriteObjectValue(Identifier, options);
            }
            if (Optional.IsDefined(Version))
            {
                writer.WritePropertyName("version"u8);
                writer.WriteObjectValue(Version, options);
            }
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(Status))
            {
                writer.WritePropertyName("status"u8);
                writer.WriteObjectValue(Status, options);
            }
            if (Optional.IsDefined(SourceVirtualMachineId))
            {
                writer.WritePropertyName("sourceVirtualMachineId"u8);
                writer.WriteStringValue(SourceVirtualMachineId);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        HciVmGalleryImageProperties IJsonModel<HciVmGalleryImageProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<HciVmGalleryImageProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(HciVmGalleryImageProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeHciVmGalleryImageProperties(document.RootElement, options);
        }

        internal static HciVmGalleryImageProperties DeserializeHciVmGalleryImageProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ResourceIdentifier containerId = default;
            string imagePath = default;
            HciVmOSType osType = default;
            CloudInitDataSource? cloudInitDataSource = default;
            HciVmHyperVGeneration? hyperVGeneration = default;
            HciVmImageRepositoryCredentials vmImageRepositoryCredentials = default;
            HciVmGalleryImageIdentifier identifier = default;
            HciVmGalleryImageVersion version = default;
            HciVmProvisioningState? provisioningState = default;
            HciVmGalleryImageStatus status = default;
            ResourceIdentifier sourceVirtualMachineId = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("containerId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    containerId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("imagePath"u8))
                {
                    imagePath = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("osType"u8))
                {
                    osType = new HciVmOSType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("cloudInitDataSource"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    cloudInitDataSource = new CloudInitDataSource(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("hyperVGeneration"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    hyperVGeneration = new HciVmHyperVGeneration(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("vmImageRepositoryCredentials"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    vmImageRepositoryCredentials = HciVmImageRepositoryCredentials.DeserializeHciVmImageRepositoryCredentials(property.Value, options);
                    continue;
                }
                if (property.NameEquals("identifier"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    identifier = HciVmGalleryImageIdentifier.DeserializeHciVmGalleryImageIdentifier(property.Value, options);
                    continue;
                }
                if (property.NameEquals("version"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    version = HciVmGalleryImageVersion.DeserializeHciVmGalleryImageVersion(property.Value, options);
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new HciVmProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("status"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    status = HciVmGalleryImageStatus.DeserializeHciVmGalleryImageStatus(property.Value, options);
                    continue;
                }
                if (property.NameEquals("sourceVirtualMachineId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sourceVirtualMachineId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new HciVmGalleryImageProperties(
                containerId,
                imagePath,
                osType,
                cloudInitDataSource,
                hyperVGeneration,
                vmImageRepositoryCredentials,
                identifier,
                version,
                provisioningState,
                status,
                sourceVirtualMachineId,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<HciVmGalleryImageProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<HciVmGalleryImageProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerHciVmContext.Default);
                default:
                    throw new FormatException($"The model {nameof(HciVmGalleryImageProperties)} does not support writing '{options.Format}' format.");
            }
        }

        HciVmGalleryImageProperties IPersistableModel<HciVmGalleryImageProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<HciVmGalleryImageProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeHciVmGalleryImageProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(HciVmGalleryImageProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<HciVmGalleryImageProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
