// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.Hci.Vm.Models
{
    /// <summary> Properties under the logical network resource. </summary>
    public partial class LogicalNetworkProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="LogicalNetworkProperties"/>. </summary>
        public LogicalNetworkProperties()
        {
            Subnets = new ChangeTrackingList<Subnet>();
        }

        /// <summary> Initializes a new instance of <see cref="LogicalNetworkProperties"/>. </summary>
        /// <param name="dhcpOptions"> DhcpOptions contains an array of DNS servers available to VMs deployed in the logical network. Standard DHCP option for a subnet overrides logical network DHCP options. </param>
        /// <param name="subnets"> Subnet - list of subnets under the logical network. </param>
        /// <param name="provisioningState"> Provisioning state of the logical network. </param>
        /// <param name="vmSwitchName"> name of the network switch to be used for VMs. </param>
        /// <param name="status"> The observed state of logical networks. </param>
        /// <param name="networkType"> Type of the Logical Network. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal LogicalNetworkProperties(LogicalNetworkPropertiesDhcpOptions dhcpOptions, IList<Subnet> subnets, ProvisioningStateEnum? provisioningState, string vmSwitchName, LogicalNetworkStatus status, LogicalNetworkTypeEnum? networkType, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            DhcpOptions = dhcpOptions;
            Subnets = subnets;
            ProvisioningState = provisioningState;
            VmSwitchName = vmSwitchName;
            Status = status;
            NetworkType = networkType;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> DhcpOptions contains an array of DNS servers available to VMs deployed in the logical network. Standard DHCP option for a subnet overrides logical network DHCP options. </summary>
        internal LogicalNetworkPropertiesDhcpOptions DhcpOptions { get; set; }
        /// <summary> The list of DNS servers IP addresses. </summary>
        public IList<string> DhcpOptionsDnsServers
        {
            get
            {
                if (DhcpOptions is null)
                    DhcpOptions = new LogicalNetworkPropertiesDhcpOptions();
                return DhcpOptions.DnsServers;
            }
        }

        /// <summary> Subnet - list of subnets under the logical network. </summary>
        public IList<Subnet> Subnets { get; }
        /// <summary> Provisioning state of the logical network. </summary>
        public ProvisioningStateEnum? ProvisioningState { get; }
        /// <summary> name of the network switch to be used for VMs. </summary>
        public string VmSwitchName { get; set; }
        /// <summary> The observed state of logical networks. </summary>
        public LogicalNetworkStatus Status { get; }
        /// <summary> Type of the Logical Network. </summary>
        public LogicalNetworkTypeEnum? NetworkType { get; }
    }
}
