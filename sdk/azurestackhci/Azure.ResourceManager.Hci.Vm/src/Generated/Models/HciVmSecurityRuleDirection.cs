// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Hci.Vm.Models
{
    /// <summary> The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic. </summary>
    public readonly partial struct HciVmSecurityRuleDirection : IEquatable<HciVmSecurityRuleDirection>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="HciVmSecurityRuleDirection"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public HciVmSecurityRuleDirection(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string InboundValue = "Inbound";
        private const string OutboundValue = "Outbound";

        /// <summary> Rule is evaluated on incoming traffic. </summary>
        public static HciVmSecurityRuleDirection Inbound { get; } = new HciVmSecurityRuleDirection(InboundValue);
        /// <summary> Rule is evaluated on outgoing traffic. </summary>
        public static HciVmSecurityRuleDirection Outbound { get; } = new HciVmSecurityRuleDirection(OutboundValue);
        /// <summary> Determines if two <see cref="HciVmSecurityRuleDirection"/> values are the same. </summary>
        public static bool operator ==(HciVmSecurityRuleDirection left, HciVmSecurityRuleDirection right) => left.Equals(right);
        /// <summary> Determines if two <see cref="HciVmSecurityRuleDirection"/> values are not the same. </summary>
        public static bool operator !=(HciVmSecurityRuleDirection left, HciVmSecurityRuleDirection right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="HciVmSecurityRuleDirection"/>. </summary>
        public static implicit operator HciVmSecurityRuleDirection(string value) => new HciVmSecurityRuleDirection(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is HciVmSecurityRuleDirection other && Equals(other);
        /// <inheritdoc />
        public bool Equals(HciVmSecurityRuleDirection other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
