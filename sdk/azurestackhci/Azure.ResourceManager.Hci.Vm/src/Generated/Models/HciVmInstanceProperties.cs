// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.Hci.Vm.Models
{
    /// <summary> Properties under the virtual machine instance resource. </summary>
    public partial class HciVmInstanceProperties
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="HciVmInstanceProperties"/>. </summary>
        public HciVmInstanceProperties()
        {
        }

        /// <summary> Initializes a new instance of <see cref="HciVmInstanceProperties"/>. </summary>
        /// <param name="hardwareProfile"> HardwareProfile - Specifies the hardware settings for the virtual machine instance. </param>
        /// <param name="placementProfile"> PlacementProfile - Specifies the placement related settings for the virtual machine. </param>
        /// <param name="networkProfile"> NetworkProfile - describes the network configuration the virtual machine instance. </param>
        /// <param name="osProfile"> OsProfile - describes the configuration of the operating system and sets login data. </param>
        /// <param name="securityProfile"> SecurityProfile - Specifies the security settings for the virtual machine instance. </param>
        /// <param name="storageProfile"> StorageProfile - contains information about the disks and storage information for the virtual machine instance. </param>
        /// <param name="httpProxyConfig"> HTTP Proxy configuration for the VM. </param>
        /// <param name="isCreatingFromLocal"> Boolean indicating whether this is an existing local virtual machine or if one should be created. </param>
        /// <param name="provisioningState"> Provisioning state of the virtual machine instance. </param>
        /// <param name="instanceView"> The virtual machine instance view. </param>
        /// <param name="status"> The observed state of virtual machine instances. </param>
        /// <param name="guestAgentInstallStatus"> Guest agent install status. </param>
        /// <param name="vmId"> Unique identifier for the vm resource. </param>
        /// <param name="resourceUid"> Unique identifier defined by ARC to identify the guest of the VM. </param>
        /// <param name="hyperVVmId"> Unique identifier for the Hyper-V VM resource. </param>
        /// <param name="hostNodeName"> Name of the host node that the VM is on. </param>
        /// <param name="hostNodeIpAddress"> Name of the host node that the VM is on. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal HciVmInstanceProperties(HciVmInstanceHardwareProfile hardwareProfile, HciVmInstancePlacementProfile placementProfile, VirtualMachineInstancePropertiesNetworkProfile networkProfile, HciVmInstanceOSProfile osProfile, HciVmInstanceSecurityProfile securityProfile, HciVmInstanceStorageProfile storageProfile, HciVmHttpProxyConfiguration httpProxyConfig, bool? isCreatingFromLocal, HciVmProvisioningState? provisioningState, VirtualMachineInstanceView instanceView, HciVmInstanceStatus status, GuestAgentInstallStatus guestAgentInstallStatus, string vmId, string resourceUid, string hyperVVmId, string hostNodeName, string hostNodeIpAddress, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            HardwareProfile = hardwareProfile;
            PlacementProfile = placementProfile;
            NetworkProfile = networkProfile;
            OsProfile = osProfile;
            SecurityProfile = securityProfile;
            StorageProfile = storageProfile;
            HttpProxyConfig = httpProxyConfig;
            IsCreatingFromLocal = isCreatingFromLocal;
            ProvisioningState = provisioningState;
            InstanceView = instanceView;
            Status = status;
            GuestAgentInstallStatus = guestAgentInstallStatus;
            VmId = vmId;
            ResourceUid = resourceUid;
            HyperVVmId = hyperVVmId;
            HostNodeName = hostNodeName;
            HostNodeIpAddress = hostNodeIpAddress;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> HardwareProfile - Specifies the hardware settings for the virtual machine instance. </summary>
        public HciVmInstanceHardwareProfile HardwareProfile { get; set; }

        /// <summary> PlacementProfile - Specifies the placement related settings for the virtual machine. </summary>
        public HciVmInstancePlacementProfile PlacementProfile { get; set; }

        /// <summary> NetworkProfile - describes the network configuration the virtual machine instance. </summary>
        internal VirtualMachineInstancePropertiesNetworkProfile NetworkProfile { get; set; }

        /// <summary> OsProfile - describes the configuration of the operating system and sets login data. </summary>
        public HciVmInstanceOSProfile OsProfile { get; set; }

        /// <summary> SecurityProfile - Specifies the security settings for the virtual machine instance. </summary>
        public HciVmInstanceSecurityProfile SecurityProfile { get; set; }

        /// <summary> StorageProfile - contains information about the disks and storage information for the virtual machine instance. </summary>
        public HciVmInstanceStorageProfile StorageProfile { get; set; }

        /// <summary> HTTP Proxy configuration for the VM. </summary>
        public HciVmHttpProxyConfiguration HttpProxyConfig { get; set; }

        /// <summary> Boolean indicating whether this is an existing local virtual machine or if one should be created. </summary>
        public bool? IsCreatingFromLocal { get; set; }

        /// <summary> Provisioning state of the virtual machine instance. </summary>
        public HciVmProvisioningState? ProvisioningState { get; }

        /// <summary> The virtual machine instance view. </summary>
        internal VirtualMachineInstanceView InstanceView { get; }

        /// <summary> The observed state of virtual machine instances. </summary>
        public HciVmInstanceStatus Status { get; }

        /// <summary> Guest agent install status. </summary>
        public GuestAgentInstallStatus GuestAgentInstallStatus { get; set; }

        /// <summary> Unique identifier for the vm resource. </summary>
        public string VmId { get; }

        /// <summary> Unique identifier defined by ARC to identify the guest of the VM. </summary>
        public string ResourceUid { get; set; }

        /// <summary> Unique identifier for the Hyper-V VM resource. </summary>
        public string HyperVVmId { get; }

        /// <summary> Name of the host node that the VM is on. </summary>
        public string HostNodeName { get; }

        /// <summary> Name of the host node that the VM is on. </summary>
        public string HostNodeIpAddress { get; }

        /// <summary> NetworkInterfaces - list of network interfaces to be attached to the virtual machine instance. </summary>
        public IList<NetworkInterfaceArmReference> NetworkInterfaces
        {
            get
            {
                if (NetworkProfile is null)
                {
                    NetworkProfile = new VirtualMachineInstancePropertiesNetworkProfile();
                }
                return NetworkProfile.NetworkInterfaces;
            }
        }

        /// <summary> The VM Config Agent running on the virtual machine. </summary>
        public HciVmConfigAgentInstanceView InstanceViewVmAgent
        {
            get
            {
                return InstanceView.VmAgent;
            }
        }
    }
}
