// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using Azure.ResourceManager.Hci.Vm;

namespace Azure.ResourceManager.Hci.Vm.Models
{
    /// <summary> Defines the different types of operations for guest agent. </summary>
    public readonly partial struct GuestAgentProvisioningAction : IEquatable<GuestAgentProvisioningAction>
    {
        private readonly string _value;
        /// <summary> Install guest agent. </summary>
        private const string InstallValue = "install";
        /// <summary> Uninstall guest agent. </summary>
        private const string UninstallValue = "uninstall";
        /// <summary> Repair guest agent. </summary>
        private const string RepairValue = "repair";

        /// <summary> Initializes a new instance of <see cref="GuestAgentProvisioningAction"/>. </summary>
        /// <param name="value"> The value. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public GuestAgentProvisioningAction(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        /// <summary> Install guest agent. </summary>
        public static GuestAgentProvisioningAction Install { get; } = new GuestAgentProvisioningAction(InstallValue);

        /// <summary> Uninstall guest agent. </summary>
        public static GuestAgentProvisioningAction Uninstall { get; } = new GuestAgentProvisioningAction(UninstallValue);

        /// <summary> Repair guest agent. </summary>
        public static GuestAgentProvisioningAction Repair { get; } = new GuestAgentProvisioningAction(RepairValue);

        /// <summary> Determines if two <see cref="GuestAgentProvisioningAction"/> values are the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator ==(GuestAgentProvisioningAction left, GuestAgentProvisioningAction right) => left.Equals(right);

        /// <summary> Determines if two <see cref="GuestAgentProvisioningAction"/> values are not the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator !=(GuestAgentProvisioningAction left, GuestAgentProvisioningAction right) => !left.Equals(right);

        /// <summary> Converts a string to a <see cref="GuestAgentProvisioningAction"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator GuestAgentProvisioningAction(string value) => new GuestAgentProvisioningAction(value);

        /// <summary> Converts a string to a <see cref="GuestAgentProvisioningAction"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator GuestAgentProvisioningAction?(string value) => value == null ? null : new GuestAgentProvisioningAction(value);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is GuestAgentProvisioningAction other && Equals(other);

        /// <inheritdoc/>
        public bool Equals(GuestAgentProvisioningAction other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        /// <inheritdoc/>
        public override string ToString() => _value;
    }
}
