// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Hci.Vm.Models
{
    /// <summary> The format of the actual VHD file [vhd, vhdx]. </summary>
    public readonly partial struct HciVmDiskFileFormat : IEquatable<HciVmDiskFileFormat>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="HciVmDiskFileFormat"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public HciVmDiskFileFormat(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string VhdxValue = "vhdx";
        private const string VhdValue = "vhd";

        /// <summary> VHDX file format. </summary>
        public static HciVmDiskFileFormat Vhdx { get; } = new HciVmDiskFileFormat(VhdxValue);
        /// <summary> VHD file format. </summary>
        public static HciVmDiskFileFormat Vhd { get; } = new HciVmDiskFileFormat(VhdValue);
        /// <summary> Determines if two <see cref="HciVmDiskFileFormat"/> values are the same. </summary>
        public static bool operator ==(HciVmDiskFileFormat left, HciVmDiskFileFormat right) => left.Equals(right);
        /// <summary> Determines if two <see cref="HciVmDiskFileFormat"/> values are not the same. </summary>
        public static bool operator !=(HciVmDiskFileFormat left, HciVmDiskFileFormat right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="HciVmDiskFileFormat"/>. </summary>
        public static implicit operator HciVmDiskFileFormat(string value) => new HciVmDiskFileFormat(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is HciVmDiskFileFormat other && Equals(other);
        /// <inheritdoc />
        public bool Equals(HciVmDiskFileFormat other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
