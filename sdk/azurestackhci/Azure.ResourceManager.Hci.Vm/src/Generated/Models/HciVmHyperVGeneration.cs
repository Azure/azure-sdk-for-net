// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using Azure.ResourceManager.Hci.Vm;

namespace Azure.ResourceManager.Hci.Vm.Models
{
    /// <summary> The hypervisor generation of the Virtual Machine [V1, V2]. </summary>
    public readonly partial struct HciVmHyperVGeneration : IEquatable<HciVmHyperVGeneration>
    {
        private readonly string _value;
        /// <summary> Generation 1 (V1) hypervisor. </summary>
        private const string V1Value = "V1";
        /// <summary> Generation 2 (V2) hypervisor. </summary>
        private const string V2Value = "V2";

        /// <summary> Initializes a new instance of <see cref="HciVmHyperVGeneration"/>. </summary>
        /// <param name="value"> The value. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public HciVmHyperVGeneration(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        /// <summary> Generation 1 (V1) hypervisor. </summary>
        public static HciVmHyperVGeneration V1 { get; } = new HciVmHyperVGeneration(V1Value);

        /// <summary> Generation 2 (V2) hypervisor. </summary>
        public static HciVmHyperVGeneration V2 { get; } = new HciVmHyperVGeneration(V2Value);

        /// <summary> Determines if two <see cref="HciVmHyperVGeneration"/> values are the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator ==(HciVmHyperVGeneration left, HciVmHyperVGeneration right) => left.Equals(right);

        /// <summary> Determines if two <see cref="HciVmHyperVGeneration"/> values are not the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator !=(HciVmHyperVGeneration left, HciVmHyperVGeneration right) => !left.Equals(right);

        /// <summary> Converts a string to a <see cref="HciVmHyperVGeneration"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator HciVmHyperVGeneration(string value) => new HciVmHyperVGeneration(value);

        /// <summary> Converts a string to a <see cref="HciVmHyperVGeneration"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator HciVmHyperVGeneration?(string value) => value == null ? null : new HciVmHyperVGeneration(value);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is HciVmHyperVGeneration other && Equals(other);

        /// <inheritdoc/>
        public bool Equals(HciVmHyperVGeneration other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        /// <inheritdoc/>
        public override string ToString() => _value;
    }
}
