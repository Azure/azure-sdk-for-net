// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.Hci.Vm.Models
{
    /// <summary> Properties under the virtual machine instance resource. </summary>
    public partial class VirtualMachineInstanceProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="VirtualMachineInstanceProperties"/>. </summary>
        public VirtualMachineInstanceProperties()
        {
        }

        /// <summary> Initializes a new instance of <see cref="VirtualMachineInstanceProperties"/>. </summary>
        /// <param name="hardwareProfile"> HardwareProfile - Specifies the hardware settings for the virtual machine instance. </param>
        /// <param name="placementProfile"> PlacementProfile - Specifies the placement related settings for the virtual machine. </param>
        /// <param name="networkProfile"> NetworkProfile - describes the network configuration the virtual machine instance. </param>
        /// <param name="osProfile"> OsProfile - describes the configuration of the operating system and sets login data. </param>
        /// <param name="securityProfile"> SecurityProfile - Specifies the security settings for the virtual machine instance. </param>
        /// <param name="storageProfile"> StorageProfile - contains information about the disks and storage information for the virtual machine instance. </param>
        /// <param name="httpProxyConfig"> HTTP Proxy configuration for the VM. </param>
        /// <param name="createFromLocal"> Boolean indicating whether this is an existing local virtual machine or if one should be created. </param>
        /// <param name="provisioningState"> Provisioning state of the virtual machine instance. </param>
        /// <param name="instanceView"> The virtual machine instance view. </param>
        /// <param name="status"> The observed state of virtual machine instances. </param>
        /// <param name="guestAgentInstallStatus"> Guest agent install status. </param>
        /// <param name="vmId"> Unique identifier for the vm resource. </param>
        /// <param name="resourceUid"> Unique identifier defined by ARC to identify the guest of the VM. </param>
        /// <param name="hyperVVmId"> Unique identifier for the Hyper-V VM resource. </param>
        /// <param name="hostNodeName"> Name of the host node that the VM is on. </param>
        /// <param name="hostNodeIPAddress"> Name of the host node that the VM is on. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal VirtualMachineInstanceProperties(VirtualMachineInstancePropertiesHardwareProfile hardwareProfile, VirtualMachineInstancePropertiesPlacementProfile placementProfile, VirtualMachineInstancePropertiesNetworkProfile networkProfile, VirtualMachineInstancePropertiesOSProfile osProfile, VirtualMachineInstancePropertiesSecurityProfile securityProfile, VirtualMachineInstancePropertiesStorageProfile storageProfile, HttpProxyConfiguration httpProxyConfig, bool? createFromLocal, ProvisioningStateEnum? provisioningState, VirtualMachineInstanceView instanceView, VirtualMachineInstanceStatus status, GuestAgentInstallStatus guestAgentInstallStatus, string vmId, string resourceUid, string hyperVVmId, string hostNodeName, string hostNodeIPAddress, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            HardwareProfile = hardwareProfile;
            PlacementProfile = placementProfile;
            NetworkProfile = networkProfile;
            OSProfile = osProfile;
            SecurityProfile = securityProfile;
            StorageProfile = storageProfile;
            HttpProxyConfig = httpProxyConfig;
            CreateFromLocal = createFromLocal;
            ProvisioningState = provisioningState;
            InstanceView = instanceView;
            Status = status;
            GuestAgentInstallStatus = guestAgentInstallStatus;
            VmId = vmId;
            ResourceUid = resourceUid;
            HyperVVmId = hyperVVmId;
            HostNodeName = hostNodeName;
            HostNodeIPAddress = hostNodeIPAddress;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> HardwareProfile - Specifies the hardware settings for the virtual machine instance. </summary>
        public VirtualMachineInstancePropertiesHardwareProfile HardwareProfile { get; set; }
        /// <summary> PlacementProfile - Specifies the placement related settings for the virtual machine. </summary>
        public VirtualMachineInstancePropertiesPlacementProfile PlacementProfile { get; set; }
        /// <summary> NetworkProfile - describes the network configuration the virtual machine instance. </summary>
        internal VirtualMachineInstancePropertiesNetworkProfile NetworkProfile { get; set; }
        /// <summary> NetworkInterfaces - list of network interfaces to be attached to the virtual machine instance. </summary>
        public IList<WritableSubResource> NetworkInterfaces
        {
            get
            {
                if (NetworkProfile is null)
                    NetworkProfile = new VirtualMachineInstancePropertiesNetworkProfile();
                return NetworkProfile.NetworkInterfaces;
            }
        }

        /// <summary> OsProfile - describes the configuration of the operating system and sets login data. </summary>
        public VirtualMachineInstancePropertiesOSProfile OSProfile { get; set; }
        /// <summary> SecurityProfile - Specifies the security settings for the virtual machine instance. </summary>
        public VirtualMachineInstancePropertiesSecurityProfile SecurityProfile { get; set; }
        /// <summary> StorageProfile - contains information about the disks and storage information for the virtual machine instance. </summary>
        public VirtualMachineInstancePropertiesStorageProfile StorageProfile { get; set; }
        /// <summary> HTTP Proxy configuration for the VM. </summary>
        public HttpProxyConfiguration HttpProxyConfig { get; set; }
        /// <summary> Boolean indicating whether this is an existing local virtual machine or if one should be created. </summary>
        public bool? CreateFromLocal { get; set; }
        /// <summary> Provisioning state of the virtual machine instance. </summary>
        public ProvisioningStateEnum? ProvisioningState { get; }
        /// <summary> The virtual machine instance view. </summary>
        internal VirtualMachineInstanceView InstanceView { get; }
        /// <summary> The VM Config Agent running on the virtual machine. </summary>
        public VirtualMachineConfigAgentInstanceView InstanceViewVmAgent
        {
            get => InstanceView?.VmAgent;
        }

        /// <summary> The observed state of virtual machine instances. </summary>
        public VirtualMachineInstanceStatus Status { get; }
        /// <summary> Guest agent install status. </summary>
        public GuestAgentInstallStatus GuestAgentInstallStatus { get; set; }
        /// <summary> Unique identifier for the vm resource. </summary>
        public string VmId { get; }
        /// <summary> Unique identifier defined by ARC to identify the guest of the VM. </summary>
        public string ResourceUid { get; set; }
        /// <summary> Unique identifier for the Hyper-V VM resource. </summary>
        public string HyperVVmId { get; }
        /// <summary> Name of the host node that the VM is on. </summary>
        public string HostNodeName { get; }
        /// <summary> Name of the host node that the VM is on. </summary>
        public string HostNodeIPAddress { get; }
    }
}
