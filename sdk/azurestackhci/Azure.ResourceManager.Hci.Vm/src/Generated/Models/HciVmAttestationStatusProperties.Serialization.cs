// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Hci.Vm.Models
{
    public partial class HciVmAttestationStatusProperties : IUtf8JsonSerializable, IJsonModel<HciVmAttestationStatusProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<HciVmAttestationStatusProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<HciVmAttestationStatusProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<HciVmAttestationStatusProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(HciVmAttestationStatusProperties)} does not support writing '{format}' format.");
            }

            if (options.Format != "W" && Optional.IsDefined(AttestSecureBootEnabled))
            {
                writer.WritePropertyName("attestSecureBootEnabled"u8);
                writer.WriteStringValue(AttestSecureBootEnabled.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(AttestationCertValidated))
            {
                writer.WritePropertyName("attestationCertValidated"u8);
                writer.WriteStringValue(AttestationCertValidated.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(BootIntegrityValidated))
            {
                writer.WritePropertyName("bootIntegrityValidated"u8);
                writer.WriteStringValue(BootIntegrityValidated.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(LinuxKernelVersion))
            {
                writer.WritePropertyName("linuxKernelVersion"u8);
                writer.WriteStringValue(LinuxKernelVersion);
            }
            if (options.Format != "W" && Optional.IsDefined(HealthStatus))
            {
                writer.WritePropertyName("healthStatus"u8);
                writer.WriteStringValue(HealthStatus.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(Timestamp))
            {
                writer.WritePropertyName("timestamp"u8);
                writer.WriteStringValue(Timestamp);
            }
            if (options.Format != "W" && Optional.IsDefined(ErrorMessage))
            {
                writer.WritePropertyName("errorMessage"u8);
                writer.WriteStringValue(ErrorMessage);
            }
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(AttestHardwarePlatform))
            {
                writer.WritePropertyName("attestHardwarePlatform"u8);
                writer.WriteStringValue(AttestHardwarePlatform.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(AttestDiskSecurityEncryptionType))
            {
                writer.WritePropertyName("attestDiskSecurityEncryptionType"u8);
                writer.WriteStringValue(AttestDiskSecurityEncryptionType.Value.ToString());
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        HciVmAttestationStatusProperties IJsonModel<HciVmAttestationStatusProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<HciVmAttestationStatusProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(HciVmAttestationStatusProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeHciVmAttestationStatusProperties(document.RootElement, options);
        }

        internal static HciVmAttestationStatusProperties DeserializeHciVmAttestationStatusProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            AttestSecureBootStatus? attestSecureBootEnabled = default;
            AttestCertValidationStatus? attestationCertValidated = default;
            AttestBootIntegrityStatus? bootIntegrityValidated = default;
            string linuxKernelVersion = default;
            AttestHealthStatus? healthStatus = default;
            string timestamp = default;
            string errorMessage = default;
            HciVmProvisioningState? provisioningState = default;
            AttestHardwarePlatformType? attestHardwarePlatform = default;
            AttestDiskSecurityEncryptionType? attestDiskSecurityEncryptionType = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("attestSecureBootEnabled"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    attestSecureBootEnabled = new AttestSecureBootStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("attestationCertValidated"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    attestationCertValidated = new AttestCertValidationStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("bootIntegrityValidated"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    bootIntegrityValidated = new AttestBootIntegrityStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("linuxKernelVersion"u8))
                {
                    linuxKernelVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("healthStatus"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    healthStatus = new AttestHealthStatus(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("timestamp"u8))
                {
                    timestamp = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("errorMessage"u8))
                {
                    errorMessage = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new HciVmProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("attestHardwarePlatform"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    attestHardwarePlatform = new AttestHardwarePlatformType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("attestDiskSecurityEncryptionType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    attestDiskSecurityEncryptionType = new AttestDiskSecurityEncryptionType(property.Value.GetString());
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new HciVmAttestationStatusProperties(
                attestSecureBootEnabled,
                attestationCertValidated,
                bootIntegrityValidated,
                linuxKernelVersion,
                healthStatus,
                timestamp,
                errorMessage,
                provisioningState,
                attestHardwarePlatform,
                attestDiskSecurityEncryptionType,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<HciVmAttestationStatusProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<HciVmAttestationStatusProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerHciVmContext.Default);
                default:
                    throw new FormatException($"The model {nameof(HciVmAttestationStatusProperties)} does not support writing '{options.Format}' format.");
            }
        }

        HciVmAttestationStatusProperties IPersistableModel<HciVmAttestationStatusProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<HciVmAttestationStatusProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeHciVmAttestationStatusProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(HciVmAttestationStatusProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<HciVmAttestationStatusProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
