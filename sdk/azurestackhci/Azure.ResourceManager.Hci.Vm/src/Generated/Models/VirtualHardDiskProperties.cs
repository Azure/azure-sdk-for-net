// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.Hci.Vm.Models
{
    /// <summary> Properties under the virtual hard disk resource. </summary>
    public partial class VirtualHardDiskProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="VirtualHardDiskProperties"/>. </summary>
        public VirtualHardDiskProperties()
        {
        }

        /// <summary> Initializes a new instance of <see cref="VirtualHardDiskProperties"/>. </summary>
        /// <param name="blockSizeBytes"> Block size in bytes. </param>
        /// <param name="diskSizeGB"> Size of the disk in GB. </param>
        /// <param name="dynamic"> Boolean for enabling dynamic sizing on the virtual hard disk. </param>
        /// <param name="logicalSectorBytes"> Logical sector in bytes. </param>
        /// <param name="physicalSectorBytes"> Physical sector in bytes. </param>
        /// <param name="downloadUri"> URL for downloading or accessing the virtual hard disk. This URL points to a secure link from where the VHD can be downloaded or accessed directly. </param>
        /// <param name="hyperVGeneration"> The hypervisor generation of the Virtual Machine [V1, V2]. </param>
        /// <param name="diskFileFormat"> The format of the actual VHD file [vhd, vhdx]. </param>
        /// <param name="createFromLocal"> Boolean indicating whether it is an existing local hard disk or if one should be created. </param>
        /// <param name="provisioningState"> Provisioning state of the virtual hard disk. </param>
        /// <param name="containerId"> Storage ContainerID of the storage container to be used for VHD. </param>
        /// <param name="status"> The observed state of virtual hard disks. </param>
        /// <param name="maxShares"> The maximum number of VMs that can attach to the disk at the same time. Value greater than one indicates a disk that can be mounted on multiple VMs at the same time. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal VirtualHardDiskProperties(int? blockSizeBytes, long? diskSizeGB, bool? @dynamic, int? logicalSectorBytes, int? physicalSectorBytes, string downloadUri, HyperVGeneration? hyperVGeneration, DiskFileFormat? diskFileFormat, bool? createFromLocal, ProvisioningStateEnum? provisioningState, ResourceIdentifier containerId, VirtualHardDiskStatus status, long? maxShares, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            BlockSizeBytes = blockSizeBytes;
            DiskSizeGB = diskSizeGB;
            Dynamic = @dynamic;
            LogicalSectorBytes = logicalSectorBytes;
            PhysicalSectorBytes = physicalSectorBytes;
            DownloadUri = downloadUri;
            HyperVGeneration = hyperVGeneration;
            DiskFileFormat = diskFileFormat;
            CreateFromLocal = createFromLocal;
            ProvisioningState = provisioningState;
            ContainerId = containerId;
            Status = status;
            MaxShares = maxShares;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Block size in bytes. </summary>
        public int? BlockSizeBytes { get; set; }
        /// <summary> Size of the disk in GB. </summary>
        public long? DiskSizeGB { get; set; }
        /// <summary> Boolean for enabling dynamic sizing on the virtual hard disk. </summary>
        public bool? Dynamic { get; set; }
        /// <summary> Logical sector in bytes. </summary>
        public int? LogicalSectorBytes { get; set; }
        /// <summary> Physical sector in bytes. </summary>
        public int? PhysicalSectorBytes { get; set; }
        /// <summary> URL for downloading or accessing the virtual hard disk. This URL points to a secure link from where the VHD can be downloaded or accessed directly. </summary>
        public string DownloadUri { get; set; }
        /// <summary> The hypervisor generation of the Virtual Machine [V1, V2]. </summary>
        public HyperVGeneration? HyperVGeneration { get; set; }
        /// <summary> The format of the actual VHD file [vhd, vhdx]. </summary>
        public DiskFileFormat? DiskFileFormat { get; set; }
        /// <summary> Boolean indicating whether it is an existing local hard disk or if one should be created. </summary>
        public bool? CreateFromLocal { get; set; }
        /// <summary> Provisioning state of the virtual hard disk. </summary>
        public ProvisioningStateEnum? ProvisioningState { get; }
        /// <summary> Storage ContainerID of the storage container to be used for VHD. </summary>
        public ResourceIdentifier ContainerId { get; set; }
        /// <summary> The observed state of virtual hard disks. </summary>
        public VirtualHardDiskStatus Status { get; }
        /// <summary> The maximum number of VMs that can attach to the disk at the same time. Value greater than one indicates a disk that can be mounted on multiple VMs at the same time. </summary>
        public long? MaxShares { get; set; }
    }
}
