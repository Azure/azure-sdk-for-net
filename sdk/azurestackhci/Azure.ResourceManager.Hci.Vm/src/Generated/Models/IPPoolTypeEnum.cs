// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Hci.Vm.Models
{
    /// <summary> Type of the IP Pool [vm, vippool]. </summary>
    public readonly partial struct IPPoolTypeEnum : IEquatable<IPPoolTypeEnum>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="IPPoolTypeEnum"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public IPPoolTypeEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string VmValue = "vm";
        private const string VippoolValue = "vippool";

        /// <summary> Virtual Machine IP Pool. </summary>
        public static IPPoolTypeEnum Vm { get; } = new IPPoolTypeEnum(VmValue);
        /// <summary> VIP Pool. </summary>
        public static IPPoolTypeEnum Vippool { get; } = new IPPoolTypeEnum(VippoolValue);
        /// <summary> Determines if two <see cref="IPPoolTypeEnum"/> values are the same. </summary>
        public static bool operator ==(IPPoolTypeEnum left, IPPoolTypeEnum right) => left.Equals(right);
        /// <summary> Determines if two <see cref="IPPoolTypeEnum"/> values are not the same. </summary>
        public static bool operator !=(IPPoolTypeEnum left, IPPoolTypeEnum right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="IPPoolTypeEnum"/>. </summary>
        public static implicit operator IPPoolTypeEnum(string value) => new IPPoolTypeEnum(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is IPPoolTypeEnum other && Equals(other);
        /// <inheritdoc />
        public bool Equals(IPPoolTypeEnum other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
