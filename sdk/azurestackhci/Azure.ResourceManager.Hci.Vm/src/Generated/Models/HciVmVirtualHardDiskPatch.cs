// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.ResourceManager.Hci.Vm;

namespace Azure.ResourceManager.Hci.Vm.Models
{
    /// <summary> The virtual hard disk resource patch definition. </summary>
    public partial class HciVmVirtualHardDiskPatch
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="HciVmVirtualHardDiskPatch"/>. </summary>
        public HciVmVirtualHardDiskPatch()
        {
            Tags = new ChangeTrackingDictionary<string, string>();
        }

        /// <summary> Initializes a new instance of <see cref="HciVmVirtualHardDiskPatch"/>. </summary>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="properties"> Defines the resource properties for the update. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal HciVmVirtualHardDiskPatch(IDictionary<string, string> tags, HciVmVirtualHardDiskPatchProperties properties, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            Tags = tags;
            Properties = properties;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> Resource tags. </summary>
        public IDictionary<string, string> Tags { get; }

        /// <summary> Defines the resource properties for the update. </summary>
        internal HciVmVirtualHardDiskPatchProperties Properties { get; set; }

        /// <summary> Size of the disk in GB. </summary>
        public long? DiskSizeGB
        {
            get
            {
                return Properties is null ? default : Properties.DiskSizeGB;
            }
            set
            {
                if (Properties is null)
                {
                    Properties = new HciVmVirtualHardDiskPatchProperties();
                }
                Properties.DiskSizeGB = value;
            }
        }
    }
}
