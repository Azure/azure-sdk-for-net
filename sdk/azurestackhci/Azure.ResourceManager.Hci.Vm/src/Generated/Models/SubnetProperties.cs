// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Hci.Vm;

namespace Azure.ResourceManager.Hci.Vm.Models
{
    /// <summary> Properties of the subnet. </summary>
    internal partial class SubnetProperties
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="SubnetProperties"/>. </summary>
        public SubnetProperties()
        {
            AddressPrefixes = new ChangeTrackingList<string>();
            IPConfigurationReferences = new ChangeTrackingList<SubnetIpConfigurationReference>();
            IPPools = new ChangeTrackingList<HciVmNetworkingIPPool>();
        }

        /// <summary> Initializes a new instance of <see cref="SubnetProperties"/>. </summary>
        /// <param name="addressPrefix"> The address prefix for the subnet: Cidr for this subnet - IPv4, IPv6. </param>
        /// <param name="addressPrefixes"> List of address prefixes for the subnet. </param>
        /// <param name="ipAllocationMethod"> IPAllocationMethod - The IP address allocation method. Possible values include: 'Static', 'Dynamic'. </param>
        /// <param name="ipConfigurationReferences"> IPConfigurationReferences - list of IPConfigurationReferences. </param>
        /// <param name="networkSecurityGroup"> NetworkSecurityGroup - Network Security Group attached to the logical network. </param>
        /// <param name="routeTable"> Route table resource. </param>
        /// <param name="ipPools"> network associated pool of IP Addresses. </param>
        /// <param name="vlan"> Vlan to use for the subnet. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal SubnetProperties(string addressPrefix, IList<string> addressPrefixes, HciVmIPAllocationMethod? ipAllocationMethod, IList<SubnetIpConfigurationReference> ipConfigurationReferences, NetworkSecurityGroupArmReference networkSecurityGroup, HciVmNetworkingRouteTable routeTable, IList<HciVmNetworkingIPPool> ipPools, int? vlan, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            AddressPrefix = addressPrefix;
            AddressPrefixes = addressPrefixes;
            IPAllocationMethod = ipAllocationMethod;
            IPConfigurationReferences = ipConfigurationReferences;
            NetworkSecurityGroup = networkSecurityGroup;
            RouteTable = routeTable;
            IPPools = ipPools;
            Vlan = vlan;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> The address prefix for the subnet: Cidr for this subnet - IPv4, IPv6. </summary>
        public string AddressPrefix { get; set; }

        /// <summary> List of address prefixes for the subnet. </summary>
        public IList<string> AddressPrefixes { get; } = new ChangeTrackingList<string>();

        /// <summary> IPAllocationMethod - The IP address allocation method. Possible values include: 'Static', 'Dynamic'. </summary>
        public HciVmIPAllocationMethod? IPAllocationMethod { get; set; }

        /// <summary> IPConfigurationReferences - list of IPConfigurationReferences. </summary>
        public IList<SubnetIpConfigurationReference> IPConfigurationReferences { get; } = new ChangeTrackingList<SubnetIpConfigurationReference>();

        /// <summary> NetworkSecurityGroup - Network Security Group attached to the logical network. </summary>
        internal NetworkSecurityGroupArmReference NetworkSecurityGroup { get; set; }

        /// <summary> Route table resource. </summary>
        public HciVmNetworkingRouteTable RouteTable { get; set; }

        /// <summary> network associated pool of IP Addresses. </summary>
        public IList<HciVmNetworkingIPPool> IPPools { get; } = new ChangeTrackingList<HciVmNetworkingIPPool>();

        /// <summary> Vlan to use for the subnet. </summary>
        public int? Vlan { get; set; }

        /// <summary> The ARM ID for a Network Security Group. </summary>
        public ResourceIdentifier NetworkSecurityGroupId
        {
            get
            {
                return NetworkSecurityGroup is null ? default : NetworkSecurityGroup.Id;
            }
            set
            {
                if (NetworkSecurityGroup is null)
                {
                    NetworkSecurityGroup = new NetworkSecurityGroupArmReference();
                }
                NetworkSecurityGroup.Id = value;
            }
        }
    }
}
