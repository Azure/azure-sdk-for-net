// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.ResourceManager.Hci.Vm;

namespace Azure.ResourceManager.Hci.Vm.Models
{
    /// <summary> HTTP Proxy configuration for the VM. </summary>
    public partial class HciVmHttpProxyConfiguration
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="HciVmHttpProxyConfiguration"/>. </summary>
        public HciVmHttpProxyConfiguration()
        {
            NoProxy = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="HciVmHttpProxyConfiguration"/>. </summary>
        /// <param name="httpProxy"> The HTTP proxy server endpoint to use. </param>
        /// <param name="httpsProxy"> The HTTPS proxy server endpoint to use. </param>
        /// <param name="noProxy"> The endpoints that should not go through proxy. </param>
        /// <param name="trustedCa"> Alternative CA cert to use for connecting to proxy servers. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal HciVmHttpProxyConfiguration(string httpProxy, string httpsProxy, IList<string> noProxy, string trustedCa, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            HttpProxy = httpProxy;
            HttpsProxy = httpsProxy;
            NoProxy = noProxy;
            TrustedCa = trustedCa;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> The HTTP proxy server endpoint to use. </summary>
        public string HttpProxy { get; set; }

        /// <summary> The HTTPS proxy server endpoint to use. </summary>
        public string HttpsProxy { get; set; }

        /// <summary> The endpoints that should not go through proxy. </summary>
        public IList<string> NoProxy { get; }

        /// <summary> Alternative CA cert to use for connecting to proxy servers. </summary>
        public string TrustedCa { get; set; }
    }
}
