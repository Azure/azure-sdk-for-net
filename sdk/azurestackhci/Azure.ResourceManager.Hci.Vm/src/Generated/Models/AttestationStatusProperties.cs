// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.Hci.Vm.Models
{
    /// <summary> Defines the attestation status properties. </summary>
    public partial class AttestationStatusProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="AttestationStatusProperties"/>. </summary>
        internal AttestationStatusProperties()
        {
        }

        /// <summary> Initializes a new instance of <see cref="AttestationStatusProperties"/>. </summary>
        /// <param name="attestSecureBootEnabled"> The status of whether secure boot is enabled. </param>
        /// <param name="attestationCertValidated"> The status of whether attestation certificate is validated. </param>
        /// <param name="bootIntegrityValidated"> The status of whether the list of boot integrity properties is validated. </param>
        /// <param name="linuxKernelVersion"> kernel version string for Linux VM. </param>
        /// <param name="healthStatus"> The health status of attestation validation and parsing. </param>
        /// <param name="timestamp"> The time stamp of the last time attestation token is validated by relying party service. </param>
        /// <param name="errorMessage"> The error message of attestation validation and parsing. </param>
        /// <param name="provisioningState"> Provisioning state of the virtual machine instance. </param>
        /// <param name="attestHardwarePlatform"> The hardware platform information from attestation token. This only applies to Confidential VM. </param>
        /// <param name="attestDiskSecurityEncryptionType"> The managed disk security encryption type from attestation token. This only applies to Confidential VM. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal AttestationStatusProperties(AttestSecureBootPropertyEnum? attestSecureBootEnabled, AttestCertPropertyEnum? attestationCertValidated, AttestBootIntegrityPropertyEnum? bootIntegrityValidated, string linuxKernelVersion, AttestHealthStatusEnum? healthStatus, string timestamp, string errorMessage, ProvisioningStateEnum? provisioningState, AttestHWPlatformEnum? attestHardwarePlatform, AttestDiskSecurityEncryptionTypeEnum? attestDiskSecurityEncryptionType, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            AttestSecureBootEnabled = attestSecureBootEnabled;
            AttestationCertValidated = attestationCertValidated;
            BootIntegrityValidated = bootIntegrityValidated;
            LinuxKernelVersion = linuxKernelVersion;
            HealthStatus = healthStatus;
            Timestamp = timestamp;
            ErrorMessage = errorMessage;
            ProvisioningState = provisioningState;
            AttestHardwarePlatform = attestHardwarePlatform;
            AttestDiskSecurityEncryptionType = attestDiskSecurityEncryptionType;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The status of whether secure boot is enabled. </summary>
        public AttestSecureBootPropertyEnum? AttestSecureBootEnabled { get; }
        /// <summary> The status of whether attestation certificate is validated. </summary>
        public AttestCertPropertyEnum? AttestationCertValidated { get; }
        /// <summary> The status of whether the list of boot integrity properties is validated. </summary>
        public AttestBootIntegrityPropertyEnum? BootIntegrityValidated { get; }
        /// <summary> kernel version string for Linux VM. </summary>
        public string LinuxKernelVersion { get; }
        /// <summary> The health status of attestation validation and parsing. </summary>
        public AttestHealthStatusEnum? HealthStatus { get; }
        /// <summary> The time stamp of the last time attestation token is validated by relying party service. </summary>
        public string Timestamp { get; }
        /// <summary> The error message of attestation validation and parsing. </summary>
        public string ErrorMessage { get; }
        /// <summary> Provisioning state of the virtual machine instance. </summary>
        public ProvisioningStateEnum? ProvisioningState { get; }
        /// <summary> The hardware platform information from attestation token. This only applies to Confidential VM. </summary>
        public AttestHWPlatformEnum? AttestHardwarePlatform { get; }
        /// <summary> The managed disk security encryption type from attestation token. This only applies to Confidential VM. </summary>
        public AttestDiskSecurityEncryptionTypeEnum? AttestDiskSecurityEncryptionType { get; }
    }
}
