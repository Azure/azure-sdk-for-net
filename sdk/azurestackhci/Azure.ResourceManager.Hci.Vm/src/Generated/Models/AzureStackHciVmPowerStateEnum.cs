// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Hci.Vm.Models
{
    /// <summary> The power state of the virtual machine instance. </summary>
    public readonly partial struct AzureStackHciVmPowerStateEnum : IEquatable<AzureStackHciVmPowerStateEnum>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AzureStackHciVmPowerStateEnum"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AzureStackHciVmPowerStateEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string DeallocatedValue = "Deallocated";
        private const string DeallocatingValue = "Deallocating";
        private const string RunningValue = "Running";
        private const string StartingValue = "Starting";
        private const string StoppedValue = "Stopped";
        private const string StoppingValue = "Stopping";
        private const string PausedValue = "Paused";
        private const string SavedValue = "Saved";
        private const string UnknownValue = "Unknown";

        /// <summary> Virtual machine deallocated. </summary>
        public static AzureStackHciVmPowerStateEnum Deallocated { get; } = new AzureStackHciVmPowerStateEnum(DeallocatedValue);
        /// <summary> Virtual machine deallocating. </summary>
        public static AzureStackHciVmPowerStateEnum Deallocating { get; } = new AzureStackHciVmPowerStateEnum(DeallocatingValue);
        /// <summary> Virtual machine running. </summary>
        public static AzureStackHciVmPowerStateEnum Running { get; } = new AzureStackHciVmPowerStateEnum(RunningValue);
        /// <summary> Virtual machine starting. </summary>
        public static AzureStackHciVmPowerStateEnum Starting { get; } = new AzureStackHciVmPowerStateEnum(StartingValue);
        /// <summary> Virtual machine stopped. </summary>
        public static AzureStackHciVmPowerStateEnum Stopped { get; } = new AzureStackHciVmPowerStateEnum(StoppedValue);
        /// <summary> Virtual machine stopping. </summary>
        public static AzureStackHciVmPowerStateEnum Stopping { get; } = new AzureStackHciVmPowerStateEnum(StoppingValue);
        /// <summary> Virtual machine paused. </summary>
        public static AzureStackHciVmPowerStateEnum Paused { get; } = new AzureStackHciVmPowerStateEnum(PausedValue);
        /// <summary> Virtual machine Saved,. </summary>
        public static AzureStackHciVmPowerStateEnum Saved { get; } = new AzureStackHciVmPowerStateEnum(SavedValue);
        /// <summary> Power state of the virtual machine is unknown. </summary>
        public static AzureStackHciVmPowerStateEnum Unknown { get; } = new AzureStackHciVmPowerStateEnum(UnknownValue);
        /// <summary> Determines if two <see cref="AzureStackHciVmPowerStateEnum"/> values are the same. </summary>
        public static bool operator ==(AzureStackHciVmPowerStateEnum left, AzureStackHciVmPowerStateEnum right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AzureStackHciVmPowerStateEnum"/> values are not the same. </summary>
        public static bool operator !=(AzureStackHciVmPowerStateEnum left, AzureStackHciVmPowerStateEnum right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="AzureStackHciVmPowerStateEnum"/>. </summary>
        public static implicit operator AzureStackHciVmPowerStateEnum(string value) => new AzureStackHciVmPowerStateEnum(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AzureStackHciVmPowerStateEnum other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AzureStackHciVmPowerStateEnum other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
