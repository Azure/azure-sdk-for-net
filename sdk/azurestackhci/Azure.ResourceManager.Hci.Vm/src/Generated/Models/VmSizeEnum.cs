// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Hci.Vm.Models
{
    /// <summary> VM Sizes. </summary>
    public readonly partial struct VmSizeEnum : IEquatable<VmSizeEnum>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="VmSizeEnum"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public VmSizeEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string DefaultValue = "Default";
        private const string StandardA2V2Value = "Standard_A2_v2";
        private const string StandardA4V2Value = "Standard_A4_v2";
        private const string StandardD2sV3Value = "Standard_D2s_v3";
        private const string StandardD4sV3Value = "Standard_D4s_v3";
        private const string StandardD8sV3Value = "Standard_D8s_v3";
        private const string StandardD16sV3Value = "Standard_D16s_v3";
        private const string StandardD32sV3Value = "Standard_D32s_v3";
        private const string StandardDS2V2Value = "Standard_DS2_v2";
        private const string StandardDS3V2Value = "Standard_DS3_v2";
        private const string StandardDS4V2Value = "Standard_DS4_v2";
        private const string StandardDS5V2Value = "Standard_DS5_v2";
        private const string StandardDS13V2Value = "Standard_DS13_v2";
        private const string StandardK8SV1Value = "Standard_K8S_v1";
        private const string StandardK8S2V1Value = "Standard_K8S2_v1";
        private const string StandardK8S3V1Value = "Standard_K8S3_v1";
        private const string StandardK8S4V1Value = "Standard_K8S4_v1";
        private const string StandardNK6Value = "Standard_NK6";
        private const string StandardNK12Value = "Standard_NK12";
        private const string StandardNV6Value = "Standard_NV6";
        private const string StandardNV12Value = "Standard_NV12";
        private const string StandardK8S5V1Value = "Standard_K8S5_v1";
        private const string CustomValue = "Custom";

        /// <summary> Default virtual machine size. </summary>
        public static VmSizeEnum Default { get; } = new VmSizeEnum(DefaultValue);
        /// <summary> Standard A2 v2 virtual machine size. </summary>
        public static VmSizeEnum StandardA2V2 { get; } = new VmSizeEnum(StandardA2V2Value);
        /// <summary> Standard A4 v2 virtual machine size. </summary>
        public static VmSizeEnum StandardA4V2 { get; } = new VmSizeEnum(StandardA4V2Value);
        /// <summary> Standard D2s v3 virtual machine size. </summary>
        public static VmSizeEnum StandardD2sV3 { get; } = new VmSizeEnum(StandardD2sV3Value);
        /// <summary> Standard D4s v3 virtual machine size. </summary>
        public static VmSizeEnum StandardD4sV3 { get; } = new VmSizeEnum(StandardD4sV3Value);
        /// <summary> Standard D8s v3 virtual machine size. </summary>
        public static VmSizeEnum StandardD8sV3 { get; } = new VmSizeEnum(StandardD8sV3Value);
        /// <summary> Standard D16s v3 virtual machine size. </summary>
        public static VmSizeEnum StandardD16sV3 { get; } = new VmSizeEnum(StandardD16sV3Value);
        /// <summary> Standard D32s v3 virtual machine size. </summary>
        public static VmSizeEnum StandardD32sV3 { get; } = new VmSizeEnum(StandardD32sV3Value);
        /// <summary> Standard DS2 v2 virtual machine size. </summary>
        public static VmSizeEnum StandardDS2V2 { get; } = new VmSizeEnum(StandardDS2V2Value);
        /// <summary> Standard DS3 v2 virtual machine size. </summary>
        public static VmSizeEnum StandardDS3V2 { get; } = new VmSizeEnum(StandardDS3V2Value);
        /// <summary> Standard DS4 v2 virtual machine size. </summary>
        public static VmSizeEnum StandardDS4V2 { get; } = new VmSizeEnum(StandardDS4V2Value);
        /// <summary> Standard DS5 v2 virtual machine size. </summary>
        public static VmSizeEnum StandardDS5V2 { get; } = new VmSizeEnum(StandardDS5V2Value);
        /// <summary> Standard DS13 v2 virtual machine size. </summary>
        public static VmSizeEnum StandardDS13V2 { get; } = new VmSizeEnum(StandardDS13V2Value);
        /// <summary> Standard K8S v1 virtual machine size. </summary>
        public static VmSizeEnum StandardK8SV1 { get; } = new VmSizeEnum(StandardK8SV1Value);
        /// <summary> Standard K8S2 v1 virtual machine size. </summary>
        public static VmSizeEnum StandardK8S2V1 { get; } = new VmSizeEnum(StandardK8S2V1Value);
        /// <summary> Standard K8S3 v1 virtual machine size. </summary>
        public static VmSizeEnum StandardK8S3V1 { get; } = new VmSizeEnum(StandardK8S3V1Value);
        /// <summary> Standard K8S4 v1 virtual machine size. </summary>
        public static VmSizeEnum StandardK8S4V1 { get; } = new VmSizeEnum(StandardK8S4V1Value);
        /// <summary> Standard NK6 virtual machine size. </summary>
        public static VmSizeEnum StandardNK6 { get; } = new VmSizeEnum(StandardNK6Value);
        /// <summary> Standard NK12 virtual machine size. </summary>
        public static VmSizeEnum StandardNK12 { get; } = new VmSizeEnum(StandardNK12Value);
        /// <summary> Standard NV6 virtual machine size. </summary>
        public static VmSizeEnum StandardNV6 { get; } = new VmSizeEnum(StandardNV6Value);
        /// <summary> Standard NV12 virtual machine size. </summary>
        public static VmSizeEnum StandardNV12 { get; } = new VmSizeEnum(StandardNV12Value);
        /// <summary> Standard K8S5 v1 virtual machine size. </summary>
        public static VmSizeEnum StandardK8S5V1 { get; } = new VmSizeEnum(StandardK8S5V1Value);
        /// <summary> Custom virtual machine size. </summary>
        public static VmSizeEnum Custom { get; } = new VmSizeEnum(CustomValue);
        /// <summary> Determines if two <see cref="VmSizeEnum"/> values are the same. </summary>
        public static bool operator ==(VmSizeEnum left, VmSizeEnum right) => left.Equals(right);
        /// <summary> Determines if two <see cref="VmSizeEnum"/> values are not the same. </summary>
        public static bool operator !=(VmSizeEnum left, VmSizeEnum right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="VmSizeEnum"/>. </summary>
        public static implicit operator VmSizeEnum(string value) => new VmSizeEnum(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is VmSizeEnum other && Equals(other);
        /// <inheritdoc />
        public bool Equals(VmSizeEnum other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
