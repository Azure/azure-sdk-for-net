// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Hci.Vm.Models
{
    /// <summary> Defines type of hardware platform from attestation token. </summary>
    public readonly partial struct AttestHardwarePlatformType : IEquatable<AttestHardwarePlatformType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AttestHardwarePlatformType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AttestHardwarePlatformType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SevsnpValue = "SEVSNP";
        private const string UnknownValue = "Unknown";

        /// <summary> AttestHWPlatform is Secure Encrypted Virtualization Secure Nested Paging (SEVSNP). </summary>
        public static AttestHardwarePlatformType Sevsnp { get; } = new AttestHardwarePlatformType(SevsnpValue);
        /// <summary> AttestHWPlatform is unknown. </summary>
        public static AttestHardwarePlatformType Unknown { get; } = new AttestHardwarePlatformType(UnknownValue);
        /// <summary> Determines if two <see cref="AttestHardwarePlatformType"/> values are the same. </summary>
        public static bool operator ==(AttestHardwarePlatformType left, AttestHardwarePlatformType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AttestHardwarePlatformType"/> values are not the same. </summary>
        public static bool operator !=(AttestHardwarePlatformType left, AttestHardwarePlatformType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="AttestHardwarePlatformType"/>. </summary>
        public static implicit operator AttestHardwarePlatformType(string value) => new AttestHardwarePlatformType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AttestHardwarePlatformType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AttestHardwarePlatformType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
