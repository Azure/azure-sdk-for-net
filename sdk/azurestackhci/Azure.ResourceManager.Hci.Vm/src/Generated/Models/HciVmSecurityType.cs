// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Hci.Vm.Models
{
    /// <summary> Specifies the SecurityType of the virtual machine. EnableTPM and SecureBootEnabled must be set to true for SecurityType to function. </summary>
    public readonly partial struct HciVmSecurityType : IEquatable<HciVmSecurityType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="HciVmSecurityType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public HciVmSecurityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string TrustedLaunchValue = "TrustedLaunch";
        private const string ConfidentialVmValue = "ConfidentialVM";

        /// <summary> Trusted Launch security type. </summary>
        public static HciVmSecurityType TrustedLaunch { get; } = new HciVmSecurityType(TrustedLaunchValue);
        /// <summary> Confidential VM security type. </summary>
        public static HciVmSecurityType ConfidentialVm { get; } = new HciVmSecurityType(ConfidentialVmValue);
        /// <summary> Determines if two <see cref="HciVmSecurityType"/> values are the same. </summary>
        public static bool operator ==(HciVmSecurityType left, HciVmSecurityType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="HciVmSecurityType"/> values are not the same. </summary>
        public static bool operator !=(HciVmSecurityType left, HciVmSecurityType right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="HciVmSecurityType"/>. </summary>
        public static implicit operator HciVmSecurityType(string value) => new HciVmSecurityType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is HciVmSecurityType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(HciVmSecurityType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
