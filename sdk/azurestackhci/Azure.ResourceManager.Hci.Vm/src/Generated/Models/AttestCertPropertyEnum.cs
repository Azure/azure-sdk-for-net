// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Hci.Vm.Models
{
    /// <summary> The status of whether attestation certificate is validated. </summary>
    public readonly partial struct AttestCertPropertyEnum : IEquatable<AttestCertPropertyEnum>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="AttestCertPropertyEnum"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AttestCertPropertyEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ValidValue = "Valid";
        private const string InvalidValue = "Invalid";
        private const string UnknownValue = "Unknown";

        /// <summary> Attestation certificate is valid. </summary>
        public static AttestCertPropertyEnum Valid { get; } = new AttestCertPropertyEnum(ValidValue);
        /// <summary> Attestation certificate is invalid. </summary>
        public static AttestCertPropertyEnum Invalid { get; } = new AttestCertPropertyEnum(InvalidValue);
        /// <summary> Attestation certificate status is unknown. </summary>
        public static AttestCertPropertyEnum Unknown { get; } = new AttestCertPropertyEnum(UnknownValue);
        /// <summary> Determines if two <see cref="AttestCertPropertyEnum"/> values are the same. </summary>
        public static bool operator ==(AttestCertPropertyEnum left, AttestCertPropertyEnum right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AttestCertPropertyEnum"/> values are not the same. </summary>
        public static bool operator !=(AttestCertPropertyEnum left, AttestCertPropertyEnum right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="AttestCertPropertyEnum"/>. </summary>
        public static implicit operator AttestCertPropertyEnum(string value) => new AttestCertPropertyEnum(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AttestCertPropertyEnum other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AttestCertPropertyEnum other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
