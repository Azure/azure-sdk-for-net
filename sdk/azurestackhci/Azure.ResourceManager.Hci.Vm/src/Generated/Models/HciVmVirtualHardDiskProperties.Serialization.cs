// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.Hci.Vm;

namespace Azure.ResourceManager.Hci.Vm.Models
{
    /// <summary> Properties under the virtual hard disk resource. </summary>
    public partial class HciVmVirtualHardDiskProperties : IJsonModel<HciVmVirtualHardDiskProperties>
    {
        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<HciVmVirtualHardDiskProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<HciVmVirtualHardDiskProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(HciVmVirtualHardDiskProperties)} does not support writing '{format}' format.");
            }
            if (Optional.IsDefined(BlockSizeInBytes))
            {
                writer.WritePropertyName("blockSizeBytes"u8);
                writer.WriteNumberValue(BlockSizeInBytes.Value);
            }
            if (Optional.IsDefined(DiskSizeInGB))
            {
                writer.WritePropertyName("diskSizeGB"u8);
                writer.WriteNumberValue(DiskSizeInGB.Value);
            }
            if (Optional.IsDefined(Dynamic))
            {
                writer.WritePropertyName("dynamic"u8);
                writer.WriteBooleanValue(Dynamic.Value);
            }
            if (Optional.IsDefined(LogicalSectorInBytes))
            {
                writer.WritePropertyName("logicalSectorBytes"u8);
                writer.WriteNumberValue(LogicalSectorInBytes.Value);
            }
            if (Optional.IsDefined(PhysicalSectorInBytes))
            {
                writer.WritePropertyName("physicalSectorBytes"u8);
                writer.WriteNumberValue(PhysicalSectorInBytes.Value);
            }
            if (Optional.IsDefined(DownloadUri))
            {
                writer.WritePropertyName("downloadUrl"u8);
                writer.WriteStringValue(DownloadUri.AbsoluteUri);
            }
            if (Optional.IsDefined(HyperVGeneration))
            {
                writer.WritePropertyName("hyperVGeneration"u8);
                writer.WriteStringValue(HyperVGeneration.Value.ToString());
            }
            if (Optional.IsDefined(DiskFileFormat))
            {
                writer.WritePropertyName("diskFileFormat"u8);
                writer.WriteStringValue(DiskFileFormat.Value.ToString());
            }
            if (Optional.IsDefined(IsCreatingFromLocal))
            {
                writer.WritePropertyName("createFromLocal"u8);
                writer.WriteBooleanValue(IsCreatingFromLocal.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (Optional.IsDefined(ContainerId))
            {
                writer.WritePropertyName("containerId"u8);
                writer.WriteStringValue(ContainerId);
            }
            if (options.Format != "W" && Optional.IsDefined(Status))
            {
                writer.WritePropertyName("status"u8);
                writer.WriteObjectValue(Status, options);
            }
            if (Optional.IsDefined(MaxShares))
            {
                writer.WritePropertyName("maxShares"u8);
                writer.WriteNumberValue(MaxShares.Value);
            }
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        HciVmVirtualHardDiskProperties IJsonModel<HciVmVirtualHardDiskProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual HciVmVirtualHardDiskProperties JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<HciVmVirtualHardDiskProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(HciVmVirtualHardDiskProperties)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeHciVmVirtualHardDiskProperties(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static HciVmVirtualHardDiskProperties DeserializeHciVmVirtualHardDiskProperties(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            int? blockSizeInBytes = default;
            long? diskSizeInGB = default;
            bool? dynamic = default;
            int? logicalSectorInBytes = default;
            int? physicalSectorInBytes = default;
            Uri downloadUri = default;
            HciVmHyperVGeneration? hyperVGeneration = default;
            HciVmDiskFileFormat? diskFileFormat = default;
            bool? isCreatingFromLocal = default;
            HciVmProvisioningState? provisioningState = default;
            ResourceIdentifier containerId = default;
            HciVmVirtualHardDiskStatus status = default;
            long? maxShares = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("blockSizeBytes"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    blockSizeInBytes = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("diskSizeGB"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    diskSizeInGB = prop.Value.GetInt64();
                    continue;
                }
                if (prop.NameEquals("dynamic"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    dynamic = prop.Value.GetBoolean();
                    continue;
                }
                if (prop.NameEquals("logicalSectorBytes"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    logicalSectorInBytes = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("physicalSectorBytes"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    physicalSectorInBytes = prop.Value.GetInt32();
                    continue;
                }
                if (prop.NameEquals("downloadUrl"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    downloadUri = new Uri(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("hyperVGeneration"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    hyperVGeneration = new HciVmHyperVGeneration(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("diskFileFormat"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    diskFileFormat = new HciVmDiskFileFormat(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("createFromLocal"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isCreatingFromLocal = prop.Value.GetBoolean();
                    continue;
                }
                if (prop.NameEquals("provisioningState"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new HciVmProvisioningState(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("containerId"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    containerId = new ResourceIdentifier(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("status"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    status = HciVmVirtualHardDiskStatus.DeserializeHciVmVirtualHardDiskStatus(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("maxShares"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maxShares = prop.Value.GetInt64();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new HciVmVirtualHardDiskProperties(
                blockSizeInBytes,
                diskSizeInGB,
                dynamic,
                logicalSectorInBytes,
                physicalSectorInBytes,
                downloadUri,
                hyperVGeneration,
                diskFileFormat,
                isCreatingFromLocal,
                provisioningState,
                containerId,
                status,
                maxShares,
                additionalBinaryDataProperties);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<HciVmVirtualHardDiskProperties>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<HciVmVirtualHardDiskProperties>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerHciVmContext.Default);
                default:
                    throw new FormatException($"The model {nameof(HciVmVirtualHardDiskProperties)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        HciVmVirtualHardDiskProperties IPersistableModel<HciVmVirtualHardDiskProperties>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual HciVmVirtualHardDiskProperties PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<HciVmVirtualHardDiskProperties>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeHciVmVirtualHardDiskProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(HciVmVirtualHardDiskProperties)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<HciVmVirtualHardDiskProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
