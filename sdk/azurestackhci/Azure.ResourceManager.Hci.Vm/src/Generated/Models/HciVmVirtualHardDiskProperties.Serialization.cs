// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.Hci.Vm.Models
{
    public partial class HciVmVirtualHardDiskProperties : IUtf8JsonSerializable, IJsonModel<HciVmVirtualHardDiskProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<HciVmVirtualHardDiskProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<HciVmVirtualHardDiskProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<HciVmVirtualHardDiskProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(HciVmVirtualHardDiskProperties)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(BlockSizeInBytes))
            {
                writer.WritePropertyName("blockSizeBytes"u8);
                writer.WriteNumberValue(BlockSizeInBytes.Value);
            }
            if (Optional.IsDefined(DiskSizeInGB))
            {
                writer.WritePropertyName("diskSizeGB"u8);
                writer.WriteNumberValue(DiskSizeInGB.Value);
            }
            if (Optional.IsDefined(Dynamic))
            {
                writer.WritePropertyName("dynamic"u8);
                writer.WriteBooleanValue(Dynamic.Value);
            }
            if (Optional.IsDefined(LogicalSectorInBytes))
            {
                writer.WritePropertyName("logicalSectorBytes"u8);
                writer.WriteNumberValue(LogicalSectorInBytes.Value);
            }
            if (Optional.IsDefined(PhysicalSectorInBytes))
            {
                writer.WritePropertyName("physicalSectorBytes"u8);
                writer.WriteNumberValue(PhysicalSectorInBytes.Value);
            }
            if (Optional.IsDefined(DownloadUri))
            {
                writer.WritePropertyName("downloadUrl"u8);
                writer.WriteStringValue(DownloadUri.AbsoluteUri);
            }
            if (Optional.IsDefined(HyperVGeneration))
            {
                writer.WritePropertyName("hyperVGeneration"u8);
                writer.WriteStringValue(HyperVGeneration.Value.ToString());
            }
            if (Optional.IsDefined(DiskFileFormat))
            {
                writer.WritePropertyName("diskFileFormat"u8);
                writer.WriteStringValue(DiskFileFormat.Value.ToString());
            }
            if (Optional.IsDefined(IsCreatingFromLocal))
            {
                writer.WritePropertyName("createFromLocal"u8);
                writer.WriteBooleanValue(IsCreatingFromLocal.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (Optional.IsDefined(ContainerId))
            {
                writer.WritePropertyName("containerId"u8);
                writer.WriteStringValue(ContainerId);
            }
            if (options.Format != "W" && Optional.IsDefined(Status))
            {
                writer.WritePropertyName("status"u8);
                writer.WriteObjectValue(Status, options);
            }
            if (Optional.IsDefined(MaxShares))
            {
                writer.WritePropertyName("maxShares"u8);
                writer.WriteNumberValue(MaxShares.Value);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        HciVmVirtualHardDiskProperties IJsonModel<HciVmVirtualHardDiskProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<HciVmVirtualHardDiskProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(HciVmVirtualHardDiskProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeHciVmVirtualHardDiskProperties(document.RootElement, options);
        }

        internal static HciVmVirtualHardDiskProperties DeserializeHciVmVirtualHardDiskProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            int? blockSizeBytes = default;
            long? diskSizeGB = default;
            bool? @dynamic = default;
            int? logicalSectorBytes = default;
            int? physicalSectorBytes = default;
            Uri downloadUrl = default;
            HciVmHyperVGeneration? hyperVGeneration = default;
            HciVmDiskFileFormat? diskFileFormat = default;
            bool? createFromLocal = default;
            HciVmProvisioningState? provisioningState = default;
            ResourceIdentifier containerId = default;
            HciVmVirtualHardDiskStatus status = default;
            long? maxShares = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("blockSizeBytes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    blockSizeBytes = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("diskSizeGB"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    diskSizeGB = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("dynamic"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    @dynamic = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("logicalSectorBytes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    logicalSectorBytes = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("physicalSectorBytes"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    physicalSectorBytes = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("downloadUrl"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    downloadUrl = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("hyperVGeneration"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    hyperVGeneration = new HciVmHyperVGeneration(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("diskFileFormat"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    diskFileFormat = new HciVmDiskFileFormat(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("createFromLocal"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    createFromLocal = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("provisioningState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new HciVmProvisioningState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("containerId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    containerId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("status"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    status = HciVmVirtualHardDiskStatus.DeserializeHciVmVirtualHardDiskStatus(property.Value, options);
                    continue;
                }
                if (property.NameEquals("maxShares"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maxShares = property.Value.GetInt64();
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new HciVmVirtualHardDiskProperties(
                blockSizeBytes,
                diskSizeGB,
                @dynamic,
                logicalSectorBytes,
                physicalSectorBytes,
                downloadUrl,
                hyperVGeneration,
                diskFileFormat,
                createFromLocal,
                provisioningState,
                containerId,
                status,
                maxShares,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<HciVmVirtualHardDiskProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<HciVmVirtualHardDiskProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerHciVmContext.Default);
                default:
                    throw new FormatException($"The model {nameof(HciVmVirtualHardDiskProperties)} does not support writing '{options.Format}' format.");
            }
        }

        HciVmVirtualHardDiskProperties IPersistableModel<HciVmVirtualHardDiskProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<HciVmVirtualHardDiskProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeHciVmVirtualHardDiskProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(HciVmVirtualHardDiskProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<HciVmVirtualHardDiskProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
