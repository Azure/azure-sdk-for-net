// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.Hci.Vm.Models
{
    /// <summary> Properties of the subnet. </summary>
    public partial class HciVmNetworkingSubnet
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="HciVmNetworkingSubnet"/>. </summary>
        public HciVmNetworkingSubnet()
        {
        }

        /// <summary> Initializes a new instance of <see cref="HciVmNetworkingSubnet"/>. </summary>
        /// <param name="properties"> Properties of the subnet. </param>
        /// <param name="name"> Name - The name of the resource that is unique within a resource group. This name can be used to access the resource. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal HciVmNetworkingSubnet(SubnetProperties properties, string name, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            Properties = properties;
            Name = name;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> Properties of the subnet. </summary>
        internal SubnetProperties Properties { get; set; }

        /// <summary> Name - The name of the resource that is unique within a resource group. This name can be used to access the resource. </summary>
        public string Name { get; set; }

        /// <summary> The address prefix for the subnet: Cidr for this subnet - IPv4, IPv6. </summary>
        public string AddressPrefix
        {
            get
            {
                return Properties is null ? default : Properties.AddressPrefix;
            }
            set
            {
                if (Properties is null)
                {
                    Properties = new SubnetProperties();
                }
                Properties.AddressPrefix = value;
            }
        }

        /// <summary> List of address prefixes for the subnet. </summary>
        public IList<string> AddressPrefixes
        {
            get
            {
                if (Properties is null)
                {
                    Properties = new SubnetProperties();
                }
                return Properties.AddressPrefixes;
            }
        }

        /// <summary> IPAllocationMethod - The IP address allocation method. Possible values include: 'Static', 'Dynamic'. </summary>
        public HciVmIPAllocationMethod? IPAllocationMethod
        {
            get
            {
                return Properties is null ? default : Properties.IPAllocationMethod;
            }
            set
            {
                if (Properties is null)
                {
                    Properties = new SubnetProperties();
                }
                Properties.IPAllocationMethod = value.Value;
            }
        }

        /// <summary> IPConfigurationReferences - list of IPConfigurationReferences. </summary>
        public IList<SubnetIpConfigurationReference> IPConfigurationReferences
        {
            get
            {
                if (Properties is null)
                {
                    Properties = new SubnetProperties();
                }
                return Properties.IPConfigurationReferences;
            }
        }

        /// <summary> Route table resource. </summary>
        public HciVmNetworkingRouteTable RouteTable
        {
            get
            {
                return Properties is null ? default : Properties.RouteTable;
            }
            set
            {
                if (Properties is null)
                {
                    Properties = new SubnetProperties();
                }
                Properties.RouteTable = value;
            }
        }

        /// <summary> network associated pool of IP Addresses. </summary>
        public IList<HciVmNetworkingIPPool> IPPools
        {
            get
            {
                if (Properties is null)
                {
                    Properties = new SubnetProperties();
                }
                return Properties.IPPools;
            }
        }

        /// <summary> Vlan to use for the subnet. </summary>
        public int? Vlan
        {
            get
            {
                return Properties is null ? default : Properties.Vlan;
            }
            set
            {
                if (Properties is null)
                {
                    Properties = new SubnetProperties();
                }
                Properties.Vlan = value.Value;
            }
        }

        /// <summary> The ARM ID for a Network Security Group. </summary>
        public ResourceIdentifier NetworkSecurityGroupId
        {
            get
            {
                return Properties is null ? default : Properties.NetworkSecurityGroupId;
            }
            set
            {
                if (Properties is null)
                {
                    Properties = new SubnetProperties();
                }
                Properties.NetworkSecurityGroupId = value;
            }
        }
    }
}
