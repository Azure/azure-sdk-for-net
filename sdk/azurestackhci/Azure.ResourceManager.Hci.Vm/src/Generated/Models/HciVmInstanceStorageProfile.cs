// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Hci.Vm;

namespace Azure.ResourceManager.Hci.Vm.Models
{
    /// <summary> StorageProfile - contains information about the disks and storage information for the virtual machine instance. </summary>
    public partial class HciVmInstanceStorageProfile
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="HciVmInstanceStorageProfile"/>. </summary>
        public HciVmInstanceStorageProfile()
        {
            DataDisks = new ChangeTrackingList<VirtualHardDiskArmReference>();
        }

        /// <summary> Initializes a new instance of <see cref="HciVmInstanceStorageProfile"/>. </summary>
        /// <param name="dataDisks"> adds data disks to the virtual machine instance. </param>
        /// <param name="imageReference"> Which Image to use for the virtual machine instance. </param>
        /// <param name="osDisk"> VHD to attach as OS disk. </param>
        /// <param name="vmConfigStoragePathId"> Id of the storage container that hosts the VM configuration file. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal HciVmInstanceStorageProfile(IList<VirtualHardDiskArmReference> dataDisks, ImageArmReference imageReference, HciVmInstanceStorageProfileOSDisk osDisk, ResourceIdentifier vmConfigStoragePathId, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            DataDisks = dataDisks;
            ImageReference = imageReference;
            OsDisk = osDisk;
            VmConfigStoragePathId = vmConfigStoragePathId;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> adds data disks to the virtual machine instance. </summary>
        public IList<VirtualHardDiskArmReference> DataDisks { get; }

        /// <summary> Which Image to use for the virtual machine instance. </summary>
        internal ImageArmReference ImageReference { get; set; }

        /// <summary> VHD to attach as OS disk. </summary>
        public HciVmInstanceStorageProfileOSDisk OsDisk { get; set; }

        /// <summary> Id of the storage container that hosts the VM configuration file. </summary>
        public ResourceIdentifier VmConfigStoragePathId { get; set; }

        /// <summary> The ARM ID for an image resource used by the virtual machine instance. </summary>
        public ResourceIdentifier ImageReferenceId
        {
            get
            {
                return ImageReference is null ? default : ImageReference.Id;
            }
            set
            {
                if (ImageReference is null)
                {
                    ImageReference = new ImageArmReference();
                }
                ImageReference.Id = value;
            }
        }
    }
}
