// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.Hci.Vm.Models
{
    /// <summary> Properties under the gallery image resource. </summary>
    public partial class GalleryImageProperties
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="GalleryImageProperties"/>. </summary>
        /// <param name="osType"> Operating system type that the gallery image uses [Windows, Linux]. </param>
        public GalleryImageProperties(OperatingSystemType osType)
        {
            OSType = osType;
        }

        /// <summary> Initializes a new instance of <see cref="GalleryImageProperties"/>. </summary>
        /// <param name="containerId"> Storage ContainerID of the storage container to be used for gallery image. </param>
        /// <param name="imagePath"> location of the image the gallery image should be created from. </param>
        /// <param name="osType"> Operating system type that the gallery image uses [Windows, Linux]. </param>
        /// <param name="cloudInitDataSource"> Datasource for the gallery image when provisioning with cloud-init [NoCloud, Azure]. </param>
        /// <param name="hyperVGeneration"> The hypervisor generation of the Virtual Machine [V1, V2]. </param>
        /// <param name="vmImageRepositoryCredentials"> The credentials used to login to the image repository that has access to the specified image. </param>
        /// <param name="identifier"> This is the gallery image definition identifier. </param>
        /// <param name="version"> Specifies information about the gallery image version that you want to create or update. </param>
        /// <param name="provisioningState"> Provisioning state of the gallery image. </param>
        /// <param name="status"> The observed state of gallery images. </param>
        /// <param name="sourceVirtualMachineId"> Resource ID of the source virtual machine from whose OS disk the gallery image is created. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal GalleryImageProperties(ResourceIdentifier containerId, string imagePath, OperatingSystemType osType, CloudInitDataSource? cloudInitDataSource, HyperVGeneration? hyperVGeneration, VmImageRepositoryCredentials vmImageRepositoryCredentials, GalleryImageIdentifier identifier, GalleryImageVersion version, ProvisioningStateEnum? provisioningState, GalleryImageStatus status, ResourceIdentifier sourceVirtualMachineId, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ContainerId = containerId;
            ImagePath = imagePath;
            OSType = osType;
            CloudInitDataSource = cloudInitDataSource;
            HyperVGeneration = hyperVGeneration;
            VmImageRepositoryCredentials = vmImageRepositoryCredentials;
            Identifier = identifier;
            Version = version;
            ProvisioningState = provisioningState;
            Status = status;
            SourceVirtualMachineId = sourceVirtualMachineId;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="GalleryImageProperties"/> for deserialization. </summary>
        internal GalleryImageProperties()
        {
        }

        /// <summary> Storage ContainerID of the storage container to be used for gallery image. </summary>
        public ResourceIdentifier ContainerId { get; set; }
        /// <summary> location of the image the gallery image should be created from. </summary>
        public string ImagePath { get; set; }
        /// <summary> Operating system type that the gallery image uses [Windows, Linux]. </summary>
        public OperatingSystemType OSType { get; set; }
        /// <summary> Datasource for the gallery image when provisioning with cloud-init [NoCloud, Azure]. </summary>
        public CloudInitDataSource? CloudInitDataSource { get; set; }
        /// <summary> The hypervisor generation of the Virtual Machine [V1, V2]. </summary>
        public HyperVGeneration? HyperVGeneration { get; set; }
        /// <summary> The credentials used to login to the image repository that has access to the specified image. </summary>
        public VmImageRepositoryCredentials VmImageRepositoryCredentials { get; set; }
        /// <summary> This is the gallery image definition identifier. </summary>
        public GalleryImageIdentifier Identifier { get; set; }
        /// <summary> Specifies information about the gallery image version that you want to create or update. </summary>
        public GalleryImageVersion Version { get; set; }
        /// <summary> Provisioning state of the gallery image. </summary>
        public ProvisioningStateEnum? ProvisioningState { get; }
        /// <summary> The observed state of gallery images. </summary>
        public GalleryImageStatus Status { get; }
        /// <summary> Resource ID of the source virtual machine from whose OS disk the gallery image is created. </summary>
        public ResourceIdentifier SourceVirtualMachineId { get; set; }
    }
}
