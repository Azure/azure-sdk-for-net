// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.Hci.Vm.Models
{
    /// <summary> The download status of the virtual hard disk. </summary>
    public partial class HciVmVirtualHardDiskDownloadStatus
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="HciVmVirtualHardDiskDownloadStatus"/>. </summary>
        internal HciVmVirtualHardDiskDownloadStatus()
        {
        }

        /// <summary> Initializes a new instance of <see cref="HciVmVirtualHardDiskDownloadStatus"/>. </summary>
        /// <param name="downloadedSizeInMB"> The downloaded sized of the virtual hard disk in MB. </param>
        /// <param name="status"> The status of Uploading virtual hard disk [Succeeded, Failed, InProgress]. </param>
        /// <param name="progressPercentage"> The progress of the operation in percentage. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal HciVmVirtualHardDiskDownloadStatus(long? downloadedSizeInMB, HciVmOperationStatus? status, long? progressPercentage, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            DownloadedSizeInMB = downloadedSizeInMB;
            Status = status;
            ProgressPercentage = progressPercentage;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> The downloaded sized of the virtual hard disk in MB. </summary>
        public long? DownloadedSizeInMB { get; }

        /// <summary> The status of Uploading virtual hard disk [Succeeded, Failed, InProgress]. </summary>
        public HciVmOperationStatus? Status { get; }

        /// <summary> The progress of the operation in percentage. </summary>
        public long? ProgressPercentage { get; }
    }
}
