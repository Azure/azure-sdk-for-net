// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.Hci.Vm.Models
{
    /// <summary> The observed state of virtual hard disks. </summary>
    public partial class VirtualHardDiskStatus
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="VirtualHardDiskStatus"/>. </summary>
        internal VirtualHardDiskStatus()
        {
            ManagedBy = new ChangeTrackingList<string>();
        }

        /// <summary> Initializes a new instance of <see cref="VirtualHardDiskStatus"/>. </summary>
        /// <param name="errorCode"> VirtualHardDisk provisioning error code. </param>
        /// <param name="errorMessage"> Descriptive error message. </param>
        /// <param name="provisioningStatus"> Provisioning status of the vhd. </param>
        /// <param name="downloadStatus"> The download status of the virtual hard disk. </param>
        /// <param name="uploadStatus"> The upload status of the virtual hard disk. </param>
        /// <param name="managedBy"> ARM IDs of the VMs that are consuming the VHD. </param>
        /// <param name="uniqueId"> Unique Guid identifying the resource. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal VirtualHardDiskStatus(string errorCode, string errorMessage, VirtualHardDiskStatusProvisioningStatus provisioningStatus, VirtualHardDiskDownloadStatus downloadStatus, VirtualHardDiskUploadStatus uploadStatus, IReadOnlyList<string> managedBy, string uniqueId, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            ErrorCode = errorCode;
            ErrorMessage = errorMessage;
            ProvisioningStatus = provisioningStatus;
            DownloadStatus = downloadStatus;
            UploadStatus = uploadStatus;
            ManagedBy = managedBy;
            UniqueId = uniqueId;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> VirtualHardDisk provisioning error code. </summary>
        public string ErrorCode { get; }
        /// <summary> Descriptive error message. </summary>
        public string ErrorMessage { get; }
        /// <summary> Provisioning status of the vhd. </summary>
        public VirtualHardDiskStatusProvisioningStatus ProvisioningStatus { get; }
        /// <summary> The download status of the virtual hard disk. </summary>
        public VirtualHardDiskDownloadStatus DownloadStatus { get; }
        /// <summary> The upload status of the virtual hard disk. </summary>
        public VirtualHardDiskUploadStatus UploadStatus { get; }
        /// <summary> ARM IDs of the VMs that are consuming the VHD. </summary>
        public IReadOnlyList<string> ManagedBy { get; }
        /// <summary> Unique Guid identifying the resource. </summary>
        public string UniqueId { get; }
    }
}
