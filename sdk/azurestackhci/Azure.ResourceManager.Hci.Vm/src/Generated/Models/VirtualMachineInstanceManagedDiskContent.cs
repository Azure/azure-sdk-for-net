// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.Hci.Vm.Models
{
    /// <summary> The parameters of a managed disk. </summary>
    public partial class VirtualMachineInstanceManagedDiskContent
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="VirtualMachineInstanceManagedDiskContent"/>. </summary>
        public VirtualMachineInstanceManagedDiskContent()
        {
        }

        /// <summary> Initializes a new instance of <see cref="VirtualMachineInstanceManagedDiskContent"/>. </summary>
        /// <param name="securityProfile"> Specifies the security profile for the managed disk. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal VirtualMachineInstanceManagedDiskContent(VMDiskSecurityProfile securityProfile, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            SecurityProfile = securityProfile;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> Specifies the security profile for the managed disk. </summary>
        internal VMDiskSecurityProfile SecurityProfile { get; set; }

        /// <summary> Specifies the EncryptionType of the managed disk. It is set to NonPersistedTPM for not persisting firmware state in the VMGuestState blob. NOTE: It can be set for only Confidential VMs. </summary>
        public HciVmSecurityEncryptionType? SecurityEncryptionType
        {
            get
            {
                return SecurityProfile is null ? default : SecurityProfile.SecurityEncryptionType;
            }
            set
            {
                if (SecurityProfile is null)
                {
                    SecurityProfile = new VMDiskSecurityProfile();
                }
                SecurityProfile.SecurityEncryptionType = value;
            }
        }
    }
}
