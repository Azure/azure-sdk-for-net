// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.ResourceManager.Hci.Vm;

namespace Azure.ResourceManager.Hci.Vm.Models
{
    /// <summary> Properties under the virtual machine instance resource. </summary>
    public partial class HciVmInstanceProperties : IJsonModel<HciVmInstanceProperties>
    {
        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<HciVmInstanceProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<HciVmInstanceProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(HciVmInstanceProperties)} does not support writing '{format}' format.");
            }
            if (Optional.IsDefined(HardwareProfile))
            {
                writer.WritePropertyName("hardwareProfile"u8);
                writer.WriteObjectValue(HardwareProfile, options);
            }
            if (Optional.IsDefined(PlacementProfile))
            {
                writer.WritePropertyName("placementProfile"u8);
                writer.WriteObjectValue(PlacementProfile, options);
            }
            if (Optional.IsDefined(NetworkProfile))
            {
                writer.WritePropertyName("networkProfile"u8);
                writer.WriteObjectValue(NetworkProfile, options);
            }
            if (Optional.IsDefined(OsProfile))
            {
                writer.WritePropertyName("osProfile"u8);
                writer.WriteObjectValue(OsProfile, options);
            }
            if (Optional.IsDefined(SecurityProfile))
            {
                writer.WritePropertyName("securityProfile"u8);
                writer.WriteObjectValue(SecurityProfile, options);
            }
            if (Optional.IsDefined(StorageProfile))
            {
                writer.WritePropertyName("storageProfile"u8);
                writer.WriteObjectValue(StorageProfile, options);
            }
            if (Optional.IsDefined(HttpProxyConfig))
            {
                writer.WritePropertyName("httpProxyConfig"u8);
                writer.WriteObjectValue(HttpProxyConfig, options);
            }
            if (Optional.IsDefined(IsCreatingFromLocal))
            {
                writer.WritePropertyName("createFromLocal"u8);
                writer.WriteBooleanValue(IsCreatingFromLocal.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(InstanceView))
            {
                writer.WritePropertyName("instanceView"u8);
                writer.WriteObjectValue(InstanceView, options);
            }
            if (options.Format != "W" && Optional.IsDefined(Status))
            {
                writer.WritePropertyName("status"u8);
                writer.WriteObjectValue(Status, options);
            }
            if (Optional.IsDefined(GuestAgentInstallStatus))
            {
                writer.WritePropertyName("guestAgentInstallStatus"u8);
                writer.WriteObjectValue(GuestAgentInstallStatus, options);
            }
            if (options.Format != "W" && Optional.IsDefined(VmId))
            {
                writer.WritePropertyName("vmId"u8);
                writer.WriteStringValue(VmId);
            }
            if (Optional.IsDefined(ResourceUid))
            {
                writer.WritePropertyName("resourceUid"u8);
                writer.WriteStringValue(ResourceUid);
            }
            if (options.Format != "W" && Optional.IsDefined(HyperVVmId))
            {
                writer.WritePropertyName("hyperVVmId"u8);
                writer.WriteStringValue(HyperVVmId);
            }
            if (options.Format != "W" && Optional.IsDefined(HostNodeName))
            {
                writer.WritePropertyName("hostNodeName"u8);
                writer.WriteStringValue(HostNodeName);
            }
            if (options.Format != "W" && Optional.IsDefined(HostNodeIpAddress))
            {
                writer.WritePropertyName("hostNodeIpAddress"u8);
                writer.WriteStringValue(HostNodeIpAddress);
            }
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        HciVmInstanceProperties IJsonModel<HciVmInstanceProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual HciVmInstanceProperties JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<HciVmInstanceProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(HciVmInstanceProperties)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeHciVmInstanceProperties(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static HciVmInstanceProperties DeserializeHciVmInstanceProperties(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            HciVmInstanceHardwareProfile hardwareProfile = default;
            HciVmInstancePlacementProfile placementProfile = default;
            VirtualMachineInstancePropertiesNetworkProfile networkProfile = default;
            HciVmInstanceOSProfile osProfile = default;
            HciVmInstanceSecurityProfile securityProfile = default;
            HciVmInstanceStorageProfile storageProfile = default;
            HciVmHttpProxyConfiguration httpProxyConfig = default;
            bool? isCreatingFromLocal = default;
            HciVmProvisioningState? provisioningState = default;
            VirtualMachineInstanceView instanceView = default;
            HciVmInstanceStatus status = default;
            GuestAgentInstallStatus guestAgentInstallStatus = default;
            string vmId = default;
            string resourceUid = default;
            string hyperVVmId = default;
            string hostNodeName = default;
            string hostNodeIpAddress = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("hardwareProfile"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    hardwareProfile = HciVmInstanceHardwareProfile.DeserializeHciVmInstanceHardwareProfile(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("placementProfile"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    placementProfile = HciVmInstancePlacementProfile.DeserializeHciVmInstancePlacementProfile(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("networkProfile"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    networkProfile = VirtualMachineInstancePropertiesNetworkProfile.DeserializeVirtualMachineInstancePropertiesNetworkProfile(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("osProfile"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    osProfile = HciVmInstanceOSProfile.DeserializeHciVmInstanceOSProfile(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("securityProfile"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    securityProfile = HciVmInstanceSecurityProfile.DeserializeHciVmInstanceSecurityProfile(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("storageProfile"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    storageProfile = HciVmInstanceStorageProfile.DeserializeHciVmInstanceStorageProfile(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("httpProxyConfig"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    httpProxyConfig = HciVmHttpProxyConfiguration.DeserializeHciVmHttpProxyConfiguration(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("createFromLocal"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isCreatingFromLocal = prop.Value.GetBoolean();
                    continue;
                }
                if (prop.NameEquals("provisioningState"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new HciVmProvisioningState(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("instanceView"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    instanceView = VirtualMachineInstanceView.DeserializeVirtualMachineInstanceView(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("status"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    status = HciVmInstanceStatus.DeserializeHciVmInstanceStatus(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("guestAgentInstallStatus"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    guestAgentInstallStatus = GuestAgentInstallStatus.DeserializeGuestAgentInstallStatus(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("vmId"u8))
                {
                    vmId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("resourceUid"u8))
                {
                    resourceUid = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("hyperVVmId"u8))
                {
                    hyperVVmId = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("hostNodeName"u8))
                {
                    hostNodeName = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("hostNodeIpAddress"u8))
                {
                    hostNodeIpAddress = prop.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new HciVmInstanceProperties(
                hardwareProfile,
                placementProfile,
                networkProfile,
                osProfile,
                securityProfile,
                storageProfile,
                httpProxyConfig,
                isCreatingFromLocal,
                provisioningState,
                instanceView,
                status,
                guestAgentInstallStatus,
                vmId,
                resourceUid,
                hyperVVmId,
                hostNodeName,
                hostNodeIpAddress,
                additionalBinaryDataProperties);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<HciVmInstanceProperties>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<HciVmInstanceProperties>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerHciVmContext.Default);
                default:
                    throw new FormatException($"The model {nameof(HciVmInstanceProperties)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        HciVmInstanceProperties IPersistableModel<HciVmInstanceProperties>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual HciVmInstanceProperties PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<HciVmInstanceProperties>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeHciVmInstanceProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(HciVmInstanceProperties)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<HciVmInstanceProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
