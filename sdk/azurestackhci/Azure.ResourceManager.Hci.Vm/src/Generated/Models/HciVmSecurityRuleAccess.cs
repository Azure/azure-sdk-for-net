// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;
using Azure.ResourceManager.Hci.Vm;

namespace Azure.ResourceManager.Hci.Vm.Models
{
    /// <summary> Whether network traffic is allowed or denied. </summary>
    public readonly partial struct HciVmSecurityRuleAccess : IEquatable<HciVmSecurityRuleAccess>
    {
        private readonly string _value;
        /// <summary> Network traffic is allowed. </summary>
        private const string AllowValue = "Allow";
        /// <summary> Network traffic is denied. </summary>
        private const string DenyValue = "Deny";

        /// <summary> Initializes a new instance of <see cref="HciVmSecurityRuleAccess"/>. </summary>
        /// <param name="value"> The value. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public HciVmSecurityRuleAccess(string value)
        {
            Argument.AssertNotNull(value, nameof(value));

            _value = value;
        }

        /// <summary> Network traffic is allowed. </summary>
        public static HciVmSecurityRuleAccess Allow { get; } = new HciVmSecurityRuleAccess(AllowValue);

        /// <summary> Network traffic is denied. </summary>
        public static HciVmSecurityRuleAccess Deny { get; } = new HciVmSecurityRuleAccess(DenyValue);

        /// <summary> Determines if two <see cref="HciVmSecurityRuleAccess"/> values are the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator ==(HciVmSecurityRuleAccess left, HciVmSecurityRuleAccess right) => left.Equals(right);

        /// <summary> Determines if two <see cref="HciVmSecurityRuleAccess"/> values are not the same. </summary>
        /// <param name="left"> The left value to compare. </param>
        /// <param name="right"> The right value to compare. </param>
        public static bool operator !=(HciVmSecurityRuleAccess left, HciVmSecurityRuleAccess right) => !left.Equals(right);

        /// <summary> Converts a string to a <see cref="HciVmSecurityRuleAccess"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator HciVmSecurityRuleAccess(string value) => new HciVmSecurityRuleAccess(value);

        /// <summary> Converts a string to a <see cref="HciVmSecurityRuleAccess"/>. </summary>
        /// <param name="value"> The value. </param>
        public static implicit operator HciVmSecurityRuleAccess?(string value) => value == null ? null : new HciVmSecurityRuleAccess(value);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is HciVmSecurityRuleAccess other && Equals(other);

        /// <inheritdoc/>
        public bool Equals(HciVmSecurityRuleAccess other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc/>
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;

        /// <inheritdoc/>
        public override string ToString() => _value;
    }
}
