// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.Hci.Vm;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Hci.Vm.Mocking
{
    /// <summary> A class to add extension methods to <see cref="ResourceGroupResource"/>. </summary>
    public partial class MockableHciVmResourceGroupResource : ArmResource
    {
        /// <summary> Initializes a new instance of MockableHciVmResourceGroupResource for mocking. </summary>
        protected MockableHciVmResourceGroupResource()
        {
        }

        /// <summary> Initializes a new instance of <see cref="MockableHciVmResourceGroupResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MockableHciVmResourceGroupResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        /// <summary> Gets a collection of HciVmGalleryImages in the <see cref="ResourceGroupResource"/>. </summary>
        /// <returns> An object representing collection of HciVmGalleryImages and their operations over a HciVmGalleryImageResource. </returns>
        public virtual HciVmGalleryImageCollection GetHciVmGalleryImages()
        {
            return GetCachedClient(client => new HciVmGalleryImageCollection(client, Id));
        }

        /// <summary> Gets a gallery image. </summary>
        /// <param name="galleryImageName"> Name of the gallery image. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="galleryImageName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="galleryImageName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<HciVmGalleryImageResource>> GetHciVmGalleryImageAsync(string galleryImageName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(galleryImageName, nameof(galleryImageName));

            return await GetHciVmGalleryImages().GetAsync(galleryImageName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Gets a gallery image. </summary>
        /// <param name="galleryImageName"> Name of the gallery image. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="galleryImageName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="galleryImageName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<HciVmGalleryImageResource> GetHciVmGalleryImage(string galleryImageName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(galleryImageName, nameof(galleryImageName));

            return GetHciVmGalleryImages().Get(galleryImageName, cancellationToken);
        }

        /// <summary> Gets a collection of HciVmLogicalNetworks in the <see cref="ResourceGroupResource"/>. </summary>
        /// <returns> An object representing collection of HciVmLogicalNetworks and their operations over a HciVmLogicalNetworkResource. </returns>
        public virtual HciVmLogicalNetworkCollection GetHciVmLogicalNetworks()
        {
            return GetCachedClient(client => new HciVmLogicalNetworkCollection(client, Id));
        }

        /// <summary> The operation to get a logical network. </summary>
        /// <param name="logicalNetworkName"> Name of the logical network. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="logicalNetworkName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="logicalNetworkName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<HciVmLogicalNetworkResource>> GetHciVmLogicalNetworkAsync(string logicalNetworkName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(logicalNetworkName, nameof(logicalNetworkName));

            return await GetHciVmLogicalNetworks().GetAsync(logicalNetworkName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> The operation to get a logical network. </summary>
        /// <param name="logicalNetworkName"> Name of the logical network. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="logicalNetworkName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="logicalNetworkName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<HciVmLogicalNetworkResource> GetHciVmLogicalNetwork(string logicalNetworkName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(logicalNetworkName, nameof(logicalNetworkName));

            return GetHciVmLogicalNetworks().Get(logicalNetworkName, cancellationToken);
        }

        /// <summary> Gets a collection of HciVmMarketplaceGalleryImages in the <see cref="ResourceGroupResource"/>. </summary>
        /// <returns> An object representing collection of HciVmMarketplaceGalleryImages and their operations over a HciVmMarketplaceGalleryImageResource. </returns>
        public virtual HciVmMarketplaceGalleryImageCollection GetHciVmMarketplaceGalleryImages()
        {
            return GetCachedClient(client => new HciVmMarketplaceGalleryImageCollection(client, Id));
        }

        /// <summary> Gets a marketplace gallery image. </summary>
        /// <param name="marketplaceGalleryImageName"> Name of the marketplace gallery image. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="marketplaceGalleryImageName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="marketplaceGalleryImageName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<HciVmMarketplaceGalleryImageResource>> GetHciVmMarketplaceGalleryImageAsync(string marketplaceGalleryImageName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(marketplaceGalleryImageName, nameof(marketplaceGalleryImageName));

            return await GetHciVmMarketplaceGalleryImages().GetAsync(marketplaceGalleryImageName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Gets a marketplace gallery image. </summary>
        /// <param name="marketplaceGalleryImageName"> Name of the marketplace gallery image. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="marketplaceGalleryImageName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="marketplaceGalleryImageName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<HciVmMarketplaceGalleryImageResource> GetHciVmMarketplaceGalleryImage(string marketplaceGalleryImageName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(marketplaceGalleryImageName, nameof(marketplaceGalleryImageName));

            return GetHciVmMarketplaceGalleryImages().Get(marketplaceGalleryImageName, cancellationToken);
        }

        /// <summary> Gets a collection of HciVmNetworkInterfaces in the <see cref="ResourceGroupResource"/>. </summary>
        /// <returns> An object representing collection of HciVmNetworkInterfaces and their operations over a HciVmNetworkInterfaceResource. </returns>
        public virtual HciVmNetworkInterfaceCollection GetHciVmNetworkInterfaces()
        {
            return GetCachedClient(client => new HciVmNetworkInterfaceCollection(client, Id));
        }

        /// <summary> Gets a network interface. </summary>
        /// <param name="networkInterfaceName"> Name of the network interface. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="networkInterfaceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="networkInterfaceName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<HciVmNetworkInterfaceResource>> GetHciVmNetworkInterfaceAsync(string networkInterfaceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(networkInterfaceName, nameof(networkInterfaceName));

            return await GetHciVmNetworkInterfaces().GetAsync(networkInterfaceName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Gets a network interface. </summary>
        /// <param name="networkInterfaceName"> Name of the network interface. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="networkInterfaceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="networkInterfaceName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<HciVmNetworkInterfaceResource> GetHciVmNetworkInterface(string networkInterfaceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(networkInterfaceName, nameof(networkInterfaceName));

            return GetHciVmNetworkInterfaces().Get(networkInterfaceName, cancellationToken);
        }

        /// <summary> Gets a collection of HciVmNetworkSecurityGroups in the <see cref="ResourceGroupResource"/>. </summary>
        /// <returns> An object representing collection of HciVmNetworkSecurityGroups and their operations over a HciVmNetworkSecurityGroupResource. </returns>
        public virtual HciVmNetworkSecurityGroupCollection GetHciVmNetworkSecurityGroups()
        {
            return GetCachedClient(client => new HciVmNetworkSecurityGroupCollection(client, Id));
        }

        /// <summary> Gets the specified network security group. </summary>
        /// <param name="networkSecurityGroupName"> Name of the network security group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="networkSecurityGroupName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="networkSecurityGroupName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<HciVmNetworkSecurityGroupResource>> GetHciVmNetworkSecurityGroupAsync(string networkSecurityGroupName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(networkSecurityGroupName, nameof(networkSecurityGroupName));

            return await GetHciVmNetworkSecurityGroups().GetAsync(networkSecurityGroupName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Gets the specified network security group. </summary>
        /// <param name="networkSecurityGroupName"> Name of the network security group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="networkSecurityGroupName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="networkSecurityGroupName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<HciVmNetworkSecurityGroupResource> GetHciVmNetworkSecurityGroup(string networkSecurityGroupName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(networkSecurityGroupName, nameof(networkSecurityGroupName));

            return GetHciVmNetworkSecurityGroups().Get(networkSecurityGroupName, cancellationToken);
        }

        /// <summary> Gets a collection of HciVmStorageContainers in the <see cref="ResourceGroupResource"/>. </summary>
        /// <returns> An object representing collection of HciVmStorageContainers and their operations over a HciVmStorageContainerResource. </returns>
        public virtual HciVmStorageContainerCollection GetHciVmStorageContainers()
        {
            return GetCachedClient(client => new HciVmStorageContainerCollection(client, Id));
        }

        /// <summary> Gets a storage container. </summary>
        /// <param name="storageContainerName"> Name of the storage container. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="storageContainerName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="storageContainerName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<HciVmStorageContainerResource>> GetHciVmStorageContainerAsync(string storageContainerName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(storageContainerName, nameof(storageContainerName));

            return await GetHciVmStorageContainers().GetAsync(storageContainerName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Gets a storage container. </summary>
        /// <param name="storageContainerName"> Name of the storage container. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="storageContainerName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="storageContainerName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<HciVmStorageContainerResource> GetHciVmStorageContainer(string storageContainerName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(storageContainerName, nameof(storageContainerName));

            return GetHciVmStorageContainers().Get(storageContainerName, cancellationToken);
        }

        /// <summary> Gets a collection of HciVmVirtualHardDisks in the <see cref="ResourceGroupResource"/>. </summary>
        /// <returns> An object representing collection of HciVmVirtualHardDisks and their operations over a HciVmVirtualHardDiskResource. </returns>
        public virtual HciVmVirtualHardDiskCollection GetHciVmVirtualHardDisks()
        {
            return GetCachedClient(client => new HciVmVirtualHardDiskCollection(client, Id));
        }

        /// <summary> Gets a virtual hard disk. </summary>
        /// <param name="virtualHardDiskName"> Name of the virtual hard disk. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="virtualHardDiskName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="virtualHardDiskName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual async Task<Response<HciVmVirtualHardDiskResource>> GetHciVmVirtualHardDiskAsync(string virtualHardDiskName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(virtualHardDiskName, nameof(virtualHardDiskName));

            return await GetHciVmVirtualHardDisks().GetAsync(virtualHardDiskName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Gets a virtual hard disk. </summary>
        /// <param name="virtualHardDiskName"> Name of the virtual hard disk. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="virtualHardDiskName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="virtualHardDiskName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public virtual Response<HciVmVirtualHardDiskResource> GetHciVmVirtualHardDisk(string virtualHardDiskName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(virtualHardDiskName, nameof(virtualHardDiskName));

            return GetHciVmVirtualHardDisks().Get(virtualHardDiskName, cancellationToken);
        }
    }
}
