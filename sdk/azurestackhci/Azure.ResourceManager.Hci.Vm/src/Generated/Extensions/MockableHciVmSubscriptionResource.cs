// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Hci.Vm;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Hci.Vm.Mocking
{
    /// <summary> A class to add extension methods to <see cref="SubscriptionResource"/>. </summary>
    public partial class MockableHciVmSubscriptionResource : ArmResource
    {
        private ClientDiagnostics _galleryImagesClientDiagnostics;
        private GalleryImages _galleryImagesRestClient;
        private ClientDiagnostics _logicalNetworksClientDiagnostics;
        private LogicalNetworks _logicalNetworksRestClient;
        private ClientDiagnostics _marketplaceGalleryImagesClientDiagnostics;
        private MarketplaceGalleryImages _marketplaceGalleryImagesRestClient;
        private ClientDiagnostics _networkInterfacesClientDiagnostics;
        private NetworkInterfaces _networkInterfacesRestClient;
        private ClientDiagnostics _networkSecurityGroupsClientDiagnostics;
        private NetworkSecurityGroups _networkSecurityGroupsRestClient;
        private ClientDiagnostics _storageContainersClientDiagnostics;
        private StorageContainers _storageContainersRestClient;
        private ClientDiagnostics _virtualHardDisksClientDiagnostics;
        private VirtualHardDisks _virtualHardDisksRestClient;

        /// <summary> Initializes a new instance of MockableHciVmSubscriptionResource for mocking. </summary>
        protected MockableHciVmSubscriptionResource()
        {
        }

        /// <summary> Initializes a new instance of <see cref="MockableHciVmSubscriptionResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MockableHciVmSubscriptionResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics GalleryImagesClientDiagnostics => _galleryImagesClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Hci.Vm.Mocking", ProviderConstants.DefaultProviderNamespace, Diagnostics);

        private GalleryImages GalleryImagesRestClient => _galleryImagesRestClient ??= new GalleryImages(GalleryImagesClientDiagnostics, Pipeline, Endpoint, "2025-06-01-preview");

        private ClientDiagnostics LogicalNetworksClientDiagnostics => _logicalNetworksClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Hci.Vm.Mocking", ProviderConstants.DefaultProviderNamespace, Diagnostics);

        private LogicalNetworks LogicalNetworksRestClient => _logicalNetworksRestClient ??= new LogicalNetworks(LogicalNetworksClientDiagnostics, Pipeline, Endpoint, "2025-06-01-preview");

        private ClientDiagnostics MarketplaceGalleryImagesClientDiagnostics => _marketplaceGalleryImagesClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Hci.Vm.Mocking", ProviderConstants.DefaultProviderNamespace, Diagnostics);

        private MarketplaceGalleryImages MarketplaceGalleryImagesRestClient => _marketplaceGalleryImagesRestClient ??= new MarketplaceGalleryImages(MarketplaceGalleryImagesClientDiagnostics, Pipeline, Endpoint, "2025-06-01-preview");

        private ClientDiagnostics NetworkInterfacesClientDiagnostics => _networkInterfacesClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Hci.Vm.Mocking", ProviderConstants.DefaultProviderNamespace, Diagnostics);

        private NetworkInterfaces NetworkInterfacesRestClient => _networkInterfacesRestClient ??= new NetworkInterfaces(NetworkInterfacesClientDiagnostics, Pipeline, Endpoint, "2025-06-01-preview");

        private ClientDiagnostics NetworkSecurityGroupsClientDiagnostics => _networkSecurityGroupsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Hci.Vm.Mocking", ProviderConstants.DefaultProviderNamespace, Diagnostics);

        private NetworkSecurityGroups NetworkSecurityGroupsRestClient => _networkSecurityGroupsRestClient ??= new NetworkSecurityGroups(NetworkSecurityGroupsClientDiagnostics, Pipeline, Endpoint, "2025-06-01-preview");

        private ClientDiagnostics StorageContainersClientDiagnostics => _storageContainersClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Hci.Vm.Mocking", ProviderConstants.DefaultProviderNamespace, Diagnostics);

        private StorageContainers StorageContainersRestClient => _storageContainersRestClient ??= new StorageContainers(StorageContainersClientDiagnostics, Pipeline, Endpoint, "2025-06-01-preview");

        private ClientDiagnostics VirtualHardDisksClientDiagnostics => _virtualHardDisksClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Hci.Vm.Mocking", ProviderConstants.DefaultProviderNamespace, Diagnostics);

        private VirtualHardDisks VirtualHardDisksRestClient => _virtualHardDisksRestClient ??= new VirtualHardDisks(VirtualHardDisksClientDiagnostics, Pipeline, Endpoint, "2025-06-01-preview");

        /// <summary> Lists all of the gallery images in the specified subscription. Use the nextLink property in the response to get the next page of gallery images. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="HciVmGalleryImageResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<HciVmGalleryImageResource> GetHciVmGalleryImagesAsync(CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new AsyncPageableWrapper<HciVmGalleryImageData, HciVmGalleryImageResource>(new GalleryImagesGetAllAsyncCollectionResultOfT(GalleryImagesRestClient, Guid.Parse(Id.SubscriptionId), context), data => new HciVmGalleryImageResource(Client, data));
        }

        /// <summary> Lists all of the gallery images in the specified subscription. Use the nextLink property in the response to get the next page of gallery images. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="HciVmGalleryImageResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<HciVmGalleryImageResource> GetHciVmGalleryImages(CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new PageableWrapper<HciVmGalleryImageData, HciVmGalleryImageResource>(new GalleryImagesGetAllCollectionResultOfT(GalleryImagesRestClient, Guid.Parse(Id.SubscriptionId), context), data => new HciVmGalleryImageResource(Client, data));
        }

        /// <summary> Lists all of the logical networks in the specified subscription. Use the nextLink property in the response to get the next page of logical networks. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="HciVmLogicalNetworkResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<HciVmLogicalNetworkResource> GetHciVmLogicalNetworksAsync(CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new AsyncPageableWrapper<HciVmLogicalNetworkData, HciVmLogicalNetworkResource>(new LogicalNetworksGetAllAsyncCollectionResultOfT(LogicalNetworksRestClient, Guid.Parse(Id.SubscriptionId), context), data => new HciVmLogicalNetworkResource(Client, data));
        }

        /// <summary> Lists all of the logical networks in the specified subscription. Use the nextLink property in the response to get the next page of logical networks. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="HciVmLogicalNetworkResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<HciVmLogicalNetworkResource> GetHciVmLogicalNetworks(CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new PageableWrapper<HciVmLogicalNetworkData, HciVmLogicalNetworkResource>(new LogicalNetworksGetAllCollectionResultOfT(LogicalNetworksRestClient, Guid.Parse(Id.SubscriptionId), context), data => new HciVmLogicalNetworkResource(Client, data));
        }

        /// <summary> Lists all of the marketplace gallery images in the specified subscription. Use the nextLink property in the response to get the next page of marketplace gallery images. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="HciVmMarketplaceGalleryImageResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<HciVmMarketplaceGalleryImageResource> GetHciVmMarketplaceGalleryImagesAsync(CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new AsyncPageableWrapper<HciVmMarketplaceGalleryImageData, HciVmMarketplaceGalleryImageResource>(new MarketplaceGalleryImagesGetAllAsyncCollectionResultOfT(MarketplaceGalleryImagesRestClient, Guid.Parse(Id.SubscriptionId), context), data => new HciVmMarketplaceGalleryImageResource(Client, data));
        }

        /// <summary> Lists all of the marketplace gallery images in the specified subscription. Use the nextLink property in the response to get the next page of marketplace gallery images. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="HciVmMarketplaceGalleryImageResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<HciVmMarketplaceGalleryImageResource> GetHciVmMarketplaceGalleryImages(CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new PageableWrapper<HciVmMarketplaceGalleryImageData, HciVmMarketplaceGalleryImageResource>(new MarketplaceGalleryImagesGetAllCollectionResultOfT(MarketplaceGalleryImagesRestClient, Guid.Parse(Id.SubscriptionId), context), data => new HciVmMarketplaceGalleryImageResource(Client, data));
        }

        /// <summary> Lists all of the network interfaces in the specified subscription. Use the nextLink property in the response to get the next page of network interfaces. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="HciVmNetworkInterfaceResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<HciVmNetworkInterfaceResource> GetHciVmNetworkInterfacesAsync(CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new AsyncPageableWrapper<HciVmNetworkInterfaceData, HciVmNetworkInterfaceResource>(new NetworkInterfacesGetAllAsyncCollectionResultOfT(NetworkInterfacesRestClient, Guid.Parse(Id.SubscriptionId), context), data => new HciVmNetworkInterfaceResource(Client, data));
        }

        /// <summary> Lists all of the network interfaces in the specified subscription. Use the nextLink property in the response to get the next page of network interfaces. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="HciVmNetworkInterfaceResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<HciVmNetworkInterfaceResource> GetHciVmNetworkInterfaces(CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new PageableWrapper<HciVmNetworkInterfaceData, HciVmNetworkInterfaceResource>(new NetworkInterfacesGetAllCollectionResultOfT(NetworkInterfacesRestClient, Guid.Parse(Id.SubscriptionId), context), data => new HciVmNetworkInterfaceResource(Client, data));
        }

        /// <summary> Gets all network security groups in a subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="HciVmNetworkSecurityGroupResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<HciVmNetworkSecurityGroupResource> GetHciVmNetworkSecurityGroupsAsync(CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new AsyncPageableWrapper<HciVmNetworkSecurityGroupData, HciVmNetworkSecurityGroupResource>(new NetworkSecurityGroupsGetAllAsyncCollectionResultOfT(NetworkSecurityGroupsRestClient, Guid.Parse(Id.SubscriptionId), context), data => new HciVmNetworkSecurityGroupResource(Client, data));
        }

        /// <summary> Gets all network security groups in a subscription. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="HciVmNetworkSecurityGroupResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<HciVmNetworkSecurityGroupResource> GetHciVmNetworkSecurityGroups(CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new PageableWrapper<HciVmNetworkSecurityGroupData, HciVmNetworkSecurityGroupResource>(new NetworkSecurityGroupsGetAllCollectionResultOfT(NetworkSecurityGroupsRestClient, Guid.Parse(Id.SubscriptionId), context), data => new HciVmNetworkSecurityGroupResource(Client, data));
        }

        /// <summary> Lists all of the storage containers in the specified subscription. Use the nextLink property in the response to get the next page of storage containers. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="HciVmStorageContainerResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<HciVmStorageContainerResource> GetHciVmStorageContainersAsync(CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new AsyncPageableWrapper<HciVmStorageContainerData, HciVmStorageContainerResource>(new StorageContainersGetAllAsyncCollectionResultOfT(StorageContainersRestClient, Guid.Parse(Id.SubscriptionId), context), data => new HciVmStorageContainerResource(Client, data));
        }

        /// <summary> Lists all of the storage containers in the specified subscription. Use the nextLink property in the response to get the next page of storage containers. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="HciVmStorageContainerResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<HciVmStorageContainerResource> GetHciVmStorageContainers(CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new PageableWrapper<HciVmStorageContainerData, HciVmStorageContainerResource>(new StorageContainersGetAllCollectionResultOfT(StorageContainersRestClient, Guid.Parse(Id.SubscriptionId), context), data => new HciVmStorageContainerResource(Client, data));
        }

        /// <summary> Lists all of the virtual hard disks in the specified subscription. Use the nextLink property in the response to get the next page of virtual hard disks. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="HciVmVirtualHardDiskResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<HciVmVirtualHardDiskResource> GetHciVmVirtualHardDisksAsync(CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new AsyncPageableWrapper<HciVmVirtualHardDiskData, HciVmVirtualHardDiskResource>(new VirtualHardDisksGetAllAsyncCollectionResultOfT(VirtualHardDisksRestClient, Guid.Parse(Id.SubscriptionId), context), data => new HciVmVirtualHardDiskResource(Client, data));
        }

        /// <summary> Lists all of the virtual hard disks in the specified subscription. Use the nextLink property in the response to get the next page of virtual hard disks. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="HciVmVirtualHardDiskResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<HciVmVirtualHardDiskResource> GetHciVmVirtualHardDisks(CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new PageableWrapper<HciVmVirtualHardDiskData, HciVmVirtualHardDiskResource>(new VirtualHardDisksGetAllCollectionResultOfT(VirtualHardDisksRestClient, Guid.Parse(Id.SubscriptionId), context), data => new HciVmVirtualHardDiskResource(Client, data));
        }
    }
}
