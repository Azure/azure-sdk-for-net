// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.Hci.Vm.Mocking;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Hci.Vm
{
    /// <summary> A class to add extension methods to Azure.ResourceManager.Hci.Vm. </summary>
    public static partial class HciVmExtensions
    {
        /// <param name="client"></param>
        private static MockableHciVmArmClient GetMockableHciVmArmClient(ArmClient client)
        {
            return client.GetCachedClient(client0 => new MockableHciVmArmClient(client0, ResourceIdentifier.Root));
        }

        /// <param name="resourceGroupResource"></param>
        private static MockableHciVmResourceGroupResource GetMockableHciVmResourceGroupResource(ResourceGroupResource resourceGroupResource)
        {
            return resourceGroupResource.GetCachedClient(client => new MockableHciVmResourceGroupResource(client, resourceGroupResource.Id));
        }

        /// <param name="subscriptionResource"></param>
        private static MockableHciVmSubscriptionResource GetMockableHciVmSubscriptionResource(SubscriptionResource subscriptionResource)
        {
            return subscriptionResource.GetCachedClient(client => new MockableHciVmSubscriptionResource(client, subscriptionResource.Id));
        }

        /// <param name="tenantResource"></param>
        private static MockableHciVmTenantResource GetMockableHciVmTenantResource(TenantResource tenantResource)
        {
            return tenantResource.GetCachedClient(client => new MockableHciVmTenantResource(client, tenantResource.Id));
        }

        /// <summary> Gets an object representing a <see cref="HciVmGalleryImageResource"/> along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="client"> The <see cref="ArmClient"/> the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="HciVmGalleryImageResource"/> object. </returns>
        public static HciVmGalleryImageResource GetHciVmGalleryImageResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableHciVmArmClient(client).GetHciVmGalleryImageResource(id);
        }

        /// <summary> Gets an object representing a <see cref="HciVmLogicalNetworkResource"/> along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="client"> The <see cref="ArmClient"/> the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="HciVmLogicalNetworkResource"/> object. </returns>
        public static HciVmLogicalNetworkResource GetHciVmLogicalNetworkResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableHciVmArmClient(client).GetHciVmLogicalNetworkResource(id);
        }

        /// <summary> Gets an object representing a <see cref="HciVmMarketplaceGalleryImageResource"/> along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="client"> The <see cref="ArmClient"/> the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="HciVmMarketplaceGalleryImageResource"/> object. </returns>
        public static HciVmMarketplaceGalleryImageResource GetHciVmMarketplaceGalleryImageResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableHciVmArmClient(client).GetHciVmMarketplaceGalleryImageResource(id);
        }

        /// <summary> Gets an object representing a <see cref="HciVmNetworkInterfaceResource"/> along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="client"> The <see cref="ArmClient"/> the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="HciVmNetworkInterfaceResource"/> object. </returns>
        public static HciVmNetworkInterfaceResource GetHciVmNetworkInterfaceResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableHciVmArmClient(client).GetHciVmNetworkInterfaceResource(id);
        }

        /// <summary> Gets an object representing a <see cref="HciVmNetworkSecurityGroupResource"/> along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="client"> The <see cref="ArmClient"/> the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="HciVmNetworkSecurityGroupResource"/> object. </returns>
        public static HciVmNetworkSecurityGroupResource GetHciVmNetworkSecurityGroupResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableHciVmArmClient(client).GetHciVmNetworkSecurityGroupResource(id);
        }

        /// <summary> Gets an object representing a <see cref="HciVmSecurityRuleResource"/> along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="client"> The <see cref="ArmClient"/> the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="HciVmSecurityRuleResource"/> object. </returns>
        public static HciVmSecurityRuleResource GetHciVmSecurityRuleResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableHciVmArmClient(client).GetHciVmSecurityRuleResource(id);
        }

        /// <summary> Gets an object representing a <see cref="HciVmStorageContainerResource"/> along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="client"> The <see cref="ArmClient"/> the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="HciVmStorageContainerResource"/> object. </returns>
        public static HciVmStorageContainerResource GetHciVmStorageContainerResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableHciVmArmClient(client).GetHciVmStorageContainerResource(id);
        }

        /// <summary> Gets an object representing a <see cref="HciVmVirtualHardDiskResource"/> along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="client"> The <see cref="ArmClient"/> the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="HciVmVirtualHardDiskResource"/> object. </returns>
        public static HciVmVirtualHardDiskResource GetHciVmVirtualHardDiskResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableHciVmArmClient(client).GetHciVmVirtualHardDiskResource(id);
        }

        /// <summary> Gets an object representing a <see cref="HciVmInstanceResource"/> along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="client"> The <see cref="ArmClient"/> the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="HciVmInstanceResource"/> object. </returns>
        public static HciVmInstanceResource GetHciVmInstanceResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableHciVmArmClient(client).GetHciVmInstanceResource(id);
        }

        /// <summary> Gets an object representing a <see cref="HciVmInstanceResource"/> along with the instance operations that can be performed on it in the ArmClient. </summary>
        /// <param name="client"> The <see cref="ArmClient"/> the method will execute against. </param>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="HciVmInstanceResource"/> object. </returns>
        public static HciVmInstanceResource GetHciVmInstance(this ArmClient client, ResourceIdentifier scope)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableHciVmArmClient(client).GetHciVmInstance(scope);
        }

        /// <summary> Gets an object representing a <see cref="HciVmHybridIdentityMetadataResource"/> along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="client"> The <see cref="ArmClient"/> the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="HciVmHybridIdentityMetadataResource"/> object. </returns>
        public static HciVmHybridIdentityMetadataResource GetHciVmHybridIdentityMetadataResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableHciVmArmClient(client).GetHciVmHybridIdentityMetadataResource(id);
        }

        /// <summary> Gets an object representing a <see cref="HciVmHybridIdentityMetadataResource"/> along with the instance operations that can be performed on it in the ArmClient. </summary>
        /// <param name="client"> The <see cref="ArmClient"/> the method will execute against. </param>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="HciVmHybridIdentityMetadataResource"/> object. </returns>
        public static HciVmHybridIdentityMetadataResource GetHciVmHybridIdentityMetadata(this ArmClient client, ResourceIdentifier scope)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableHciVmArmClient(client).GetHciVmHybridIdentityMetadata(scope);
        }

        /// <summary> Gets an object representing a <see cref="HciVmAttestationStatusResource"/> along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="client"> The <see cref="ArmClient"/> the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="HciVmAttestationStatusResource"/> object. </returns>
        public static HciVmAttestationStatusResource GetHciVmAttestationStatusResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableHciVmArmClient(client).GetHciVmAttestationStatusResource(id);
        }

        /// <summary> Gets an object representing a <see cref="HciVmAttestationStatusResource"/> along with the instance operations that can be performed on it in the ArmClient. </summary>
        /// <param name="client"> The <see cref="ArmClient"/> the method will execute against. </param>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="HciVmAttestationStatusResource"/> object. </returns>
        public static HciVmAttestationStatusResource GetHciVmAttestationStatus(this ArmClient client, ResourceIdentifier scope)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableHciVmArmClient(client).GetHciVmAttestationStatus(scope);
        }

        /// <summary> Gets an object representing a <see cref="HciVmGuestAgentResource"/> along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="client"> The <see cref="ArmClient"/> the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="HciVmGuestAgentResource"/> object. </returns>
        public static HciVmGuestAgentResource GetHciVmGuestAgentResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableHciVmArmClient(client).GetHciVmGuestAgentResource(id);
        }

        /// <summary> Gets an object representing a <see cref="HciVmGuestAgentResource"/> along with the instance operations that can be performed on it in the ArmClient. </summary>
        /// <param name="client"> The <see cref="ArmClient"/> the method will execute against. </param>
        /// <param name="scope"> The scope that the resource will apply against. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="HciVmGuestAgentResource"/> object. </returns>
        public static HciVmGuestAgentResource GetHciVmGuestAgent(this ArmClient client, ResourceIdentifier scope)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableHciVmArmClient(client).GetHciVmGuestAgent(scope);
        }

        /// <summary> Gets a collection of HciVmGalleryImages in the <see cref="ResourceGroupResource"/>. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource"/> the method will execute against. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> is null. </exception>
        /// <returns> An object representing collection of HciVmGalleryImages and their operations over a HciVmGalleryImageResource. </returns>
        public static HciVmGalleryImageCollection GetHciVmGalleryImages(this ResourceGroupResource resourceGroupResource)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableHciVmResourceGroupResource(resourceGroupResource).GetHciVmGalleryImages();
        }

        /// <summary> Gets a gallery image. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource"/> the method will execute against. </param>
        /// <param name="galleryImageName"> Name of the gallery image. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<HciVmGalleryImageResource>> GetHciVmGalleryImageAsync(this ResourceGroupResource resourceGroupResource, string galleryImageName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return await GetMockableHciVmResourceGroupResource(resourceGroupResource).GetHciVmGalleryImageAsync(galleryImageName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Gets a gallery image. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource"/> the method will execute against. </param>
        /// <param name="galleryImageName"> Name of the gallery image. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<HciVmGalleryImageResource> GetHciVmGalleryImage(this ResourceGroupResource resourceGroupResource, string galleryImageName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableHciVmResourceGroupResource(resourceGroupResource).GetHciVmGalleryImage(galleryImageName, cancellationToken);
        }

        /// <summary> Gets a collection of HciVmLogicalNetworks in the <see cref="ResourceGroupResource"/>. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource"/> the method will execute against. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> is null. </exception>
        /// <returns> An object representing collection of HciVmLogicalNetworks and their operations over a HciVmLogicalNetworkResource. </returns>
        public static HciVmLogicalNetworkCollection GetHciVmLogicalNetworks(this ResourceGroupResource resourceGroupResource)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableHciVmResourceGroupResource(resourceGroupResource).GetHciVmLogicalNetworks();
        }

        /// <summary> The operation to get a logical network. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource"/> the method will execute against. </param>
        /// <param name="logicalNetworkName"> Name of the logical network. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<HciVmLogicalNetworkResource>> GetHciVmLogicalNetworkAsync(this ResourceGroupResource resourceGroupResource, string logicalNetworkName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return await GetMockableHciVmResourceGroupResource(resourceGroupResource).GetHciVmLogicalNetworkAsync(logicalNetworkName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> The operation to get a logical network. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource"/> the method will execute against. </param>
        /// <param name="logicalNetworkName"> Name of the logical network. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<HciVmLogicalNetworkResource> GetHciVmLogicalNetwork(this ResourceGroupResource resourceGroupResource, string logicalNetworkName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableHciVmResourceGroupResource(resourceGroupResource).GetHciVmLogicalNetwork(logicalNetworkName, cancellationToken);
        }

        /// <summary> Gets a collection of HciVmMarketplaceGalleryImages in the <see cref="ResourceGroupResource"/>. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource"/> the method will execute against. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> is null. </exception>
        /// <returns> An object representing collection of HciVmMarketplaceGalleryImages and their operations over a HciVmMarketplaceGalleryImageResource. </returns>
        public static HciVmMarketplaceGalleryImageCollection GetHciVmMarketplaceGalleryImages(this ResourceGroupResource resourceGroupResource)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableHciVmResourceGroupResource(resourceGroupResource).GetHciVmMarketplaceGalleryImages();
        }

        /// <summary> Gets a marketplace gallery image. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource"/> the method will execute against. </param>
        /// <param name="marketplaceGalleryImageName"> Name of the marketplace gallery image. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<HciVmMarketplaceGalleryImageResource>> GetHciVmMarketplaceGalleryImageAsync(this ResourceGroupResource resourceGroupResource, string marketplaceGalleryImageName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return await GetMockableHciVmResourceGroupResource(resourceGroupResource).GetHciVmMarketplaceGalleryImageAsync(marketplaceGalleryImageName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Gets a marketplace gallery image. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource"/> the method will execute against. </param>
        /// <param name="marketplaceGalleryImageName"> Name of the marketplace gallery image. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<HciVmMarketplaceGalleryImageResource> GetHciVmMarketplaceGalleryImage(this ResourceGroupResource resourceGroupResource, string marketplaceGalleryImageName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableHciVmResourceGroupResource(resourceGroupResource).GetHciVmMarketplaceGalleryImage(marketplaceGalleryImageName, cancellationToken);
        }

        /// <summary> Gets a collection of HciVmNetworkInterfaces in the <see cref="ResourceGroupResource"/>. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource"/> the method will execute against. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> is null. </exception>
        /// <returns> An object representing collection of HciVmNetworkInterfaces and their operations over a HciVmNetworkInterfaceResource. </returns>
        public static HciVmNetworkInterfaceCollection GetHciVmNetworkInterfaces(this ResourceGroupResource resourceGroupResource)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableHciVmResourceGroupResource(resourceGroupResource).GetHciVmNetworkInterfaces();
        }

        /// <summary> Gets a network interface. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource"/> the method will execute against. </param>
        /// <param name="networkInterfaceName"> Name of the network interface. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<HciVmNetworkInterfaceResource>> GetHciVmNetworkInterfaceAsync(this ResourceGroupResource resourceGroupResource, string networkInterfaceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return await GetMockableHciVmResourceGroupResource(resourceGroupResource).GetHciVmNetworkInterfaceAsync(networkInterfaceName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Gets a network interface. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource"/> the method will execute against. </param>
        /// <param name="networkInterfaceName"> Name of the network interface. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<HciVmNetworkInterfaceResource> GetHciVmNetworkInterface(this ResourceGroupResource resourceGroupResource, string networkInterfaceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableHciVmResourceGroupResource(resourceGroupResource).GetHciVmNetworkInterface(networkInterfaceName, cancellationToken);
        }

        /// <summary> Gets a collection of HciVmNetworkSecurityGroups in the <see cref="ResourceGroupResource"/>. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource"/> the method will execute against. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> is null. </exception>
        /// <returns> An object representing collection of HciVmNetworkSecurityGroups and their operations over a HciVmNetworkSecurityGroupResource. </returns>
        public static HciVmNetworkSecurityGroupCollection GetHciVmNetworkSecurityGroups(this ResourceGroupResource resourceGroupResource)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableHciVmResourceGroupResource(resourceGroupResource).GetHciVmNetworkSecurityGroups();
        }

        /// <summary> Gets the specified network security group. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource"/> the method will execute against. </param>
        /// <param name="networkSecurityGroupName"> Name of the network security group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<HciVmNetworkSecurityGroupResource>> GetHciVmNetworkSecurityGroupAsync(this ResourceGroupResource resourceGroupResource, string networkSecurityGroupName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return await GetMockableHciVmResourceGroupResource(resourceGroupResource).GetHciVmNetworkSecurityGroupAsync(networkSecurityGroupName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Gets the specified network security group. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource"/> the method will execute against. </param>
        /// <param name="networkSecurityGroupName"> Name of the network security group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<HciVmNetworkSecurityGroupResource> GetHciVmNetworkSecurityGroup(this ResourceGroupResource resourceGroupResource, string networkSecurityGroupName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableHciVmResourceGroupResource(resourceGroupResource).GetHciVmNetworkSecurityGroup(networkSecurityGroupName, cancellationToken);
        }

        /// <summary> Gets a collection of HciVmStorageContainers in the <see cref="ResourceGroupResource"/>. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource"/> the method will execute against. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> is null. </exception>
        /// <returns> An object representing collection of HciVmStorageContainers and their operations over a HciVmStorageContainerResource. </returns>
        public static HciVmStorageContainerCollection GetHciVmStorageContainers(this ResourceGroupResource resourceGroupResource)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableHciVmResourceGroupResource(resourceGroupResource).GetHciVmStorageContainers();
        }

        /// <summary> Gets a storage container. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource"/> the method will execute against. </param>
        /// <param name="storageContainerName"> Name of the storage container. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<HciVmStorageContainerResource>> GetHciVmStorageContainerAsync(this ResourceGroupResource resourceGroupResource, string storageContainerName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return await GetMockableHciVmResourceGroupResource(resourceGroupResource).GetHciVmStorageContainerAsync(storageContainerName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Gets a storage container. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource"/> the method will execute against. </param>
        /// <param name="storageContainerName"> Name of the storage container. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<HciVmStorageContainerResource> GetHciVmStorageContainer(this ResourceGroupResource resourceGroupResource, string storageContainerName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableHciVmResourceGroupResource(resourceGroupResource).GetHciVmStorageContainer(storageContainerName, cancellationToken);
        }

        /// <summary> Gets a collection of HciVmVirtualHardDisks in the <see cref="ResourceGroupResource"/>. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource"/> the method will execute against. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> is null. </exception>
        /// <returns> An object representing collection of HciVmVirtualHardDisks and their operations over a HciVmVirtualHardDiskResource. </returns>
        public static HciVmVirtualHardDiskCollection GetHciVmVirtualHardDisks(this ResourceGroupResource resourceGroupResource)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableHciVmResourceGroupResource(resourceGroupResource).GetHciVmVirtualHardDisks();
        }

        /// <summary> Gets a virtual hard disk. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource"/> the method will execute against. </param>
        /// <param name="virtualHardDiskName"> Name of the virtual hard disk. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<HciVmVirtualHardDiskResource>> GetHciVmVirtualHardDiskAsync(this ResourceGroupResource resourceGroupResource, string virtualHardDiskName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return await GetMockableHciVmResourceGroupResource(resourceGroupResource).GetHciVmVirtualHardDiskAsync(virtualHardDiskName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Gets a virtual hard disk. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource"/> the method will execute against. </param>
        /// <param name="virtualHardDiskName"> Name of the virtual hard disk. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<HciVmVirtualHardDiskResource> GetHciVmVirtualHardDisk(this ResourceGroupResource resourceGroupResource, string virtualHardDiskName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableHciVmResourceGroupResource(resourceGroupResource).GetHciVmVirtualHardDisk(virtualHardDiskName, cancellationToken);
        }

        /// <summary> Lists all of the gallery images in the specified subscription. Use the nextLink property in the response to get the next page of gallery images. </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource"/> the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> A collection of <see cref="HciVmGalleryImageResource"/> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<HciVmGalleryImageResource> GetHciVmGalleryImagesAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableHciVmSubscriptionResource(subscriptionResource).GetHciVmGalleryImagesAsync(cancellationToken);
        }

        /// <summary> Lists all of the gallery images in the specified subscription. Use the nextLink property in the response to get the next page of gallery images. </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource"/> the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> A collection of <see cref="HciVmGalleryImageResource"/> that may take multiple service requests to iterate over. </returns>
        public static Pageable<HciVmGalleryImageResource> GetHciVmGalleryImages(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableHciVmSubscriptionResource(subscriptionResource).GetHciVmGalleryImages(cancellationToken);
        }

        /// <summary> Lists all of the logical networks in the specified subscription. Use the nextLink property in the response to get the next page of logical networks. </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource"/> the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> A collection of <see cref="HciVmLogicalNetworkResource"/> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<HciVmLogicalNetworkResource> GetHciVmLogicalNetworksAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableHciVmSubscriptionResource(subscriptionResource).GetHciVmLogicalNetworksAsync(cancellationToken);
        }

        /// <summary> Lists all of the logical networks in the specified subscription. Use the nextLink property in the response to get the next page of logical networks. </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource"/> the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> A collection of <see cref="HciVmLogicalNetworkResource"/> that may take multiple service requests to iterate over. </returns>
        public static Pageable<HciVmLogicalNetworkResource> GetHciVmLogicalNetworks(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableHciVmSubscriptionResource(subscriptionResource).GetHciVmLogicalNetworks(cancellationToken);
        }

        /// <summary> Lists all of the marketplace gallery images in the specified subscription. Use the nextLink property in the response to get the next page of marketplace gallery images. </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource"/> the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> A collection of <see cref="HciVmMarketplaceGalleryImageResource"/> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<HciVmMarketplaceGalleryImageResource> GetHciVmMarketplaceGalleryImagesAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableHciVmSubscriptionResource(subscriptionResource).GetHciVmMarketplaceGalleryImagesAsync(cancellationToken);
        }

        /// <summary> Lists all of the marketplace gallery images in the specified subscription. Use the nextLink property in the response to get the next page of marketplace gallery images. </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource"/> the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> A collection of <see cref="HciVmMarketplaceGalleryImageResource"/> that may take multiple service requests to iterate over. </returns>
        public static Pageable<HciVmMarketplaceGalleryImageResource> GetHciVmMarketplaceGalleryImages(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableHciVmSubscriptionResource(subscriptionResource).GetHciVmMarketplaceGalleryImages(cancellationToken);
        }

        /// <summary> Lists all of the network interfaces in the specified subscription. Use the nextLink property in the response to get the next page of network interfaces. </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource"/> the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> A collection of <see cref="HciVmNetworkInterfaceResource"/> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<HciVmNetworkInterfaceResource> GetHciVmNetworkInterfacesAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableHciVmSubscriptionResource(subscriptionResource).GetHciVmNetworkInterfacesAsync(cancellationToken);
        }

        /// <summary> Lists all of the network interfaces in the specified subscription. Use the nextLink property in the response to get the next page of network interfaces. </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource"/> the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> A collection of <see cref="HciVmNetworkInterfaceResource"/> that may take multiple service requests to iterate over. </returns>
        public static Pageable<HciVmNetworkInterfaceResource> GetHciVmNetworkInterfaces(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableHciVmSubscriptionResource(subscriptionResource).GetHciVmNetworkInterfaces(cancellationToken);
        }

        /// <summary> Gets all network security groups in a subscription. </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource"/> the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> A collection of <see cref="HciVmNetworkSecurityGroupResource"/> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<HciVmNetworkSecurityGroupResource> GetHciVmNetworkSecurityGroupsAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableHciVmSubscriptionResource(subscriptionResource).GetHciVmNetworkSecurityGroupsAsync(cancellationToken);
        }

        /// <summary> Gets all network security groups in a subscription. </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource"/> the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> A collection of <see cref="HciVmNetworkSecurityGroupResource"/> that may take multiple service requests to iterate over. </returns>
        public static Pageable<HciVmNetworkSecurityGroupResource> GetHciVmNetworkSecurityGroups(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableHciVmSubscriptionResource(subscriptionResource).GetHciVmNetworkSecurityGroups(cancellationToken);
        }

        /// <summary> Lists all of the storage containers in the specified subscription. Use the nextLink property in the response to get the next page of storage containers. </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource"/> the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> A collection of <see cref="HciVmStorageContainerResource"/> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<HciVmStorageContainerResource> GetHciVmStorageContainersAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableHciVmSubscriptionResource(subscriptionResource).GetHciVmStorageContainersAsync(cancellationToken);
        }

        /// <summary> Lists all of the storage containers in the specified subscription. Use the nextLink property in the response to get the next page of storage containers. </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource"/> the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> A collection of <see cref="HciVmStorageContainerResource"/> that may take multiple service requests to iterate over. </returns>
        public static Pageable<HciVmStorageContainerResource> GetHciVmStorageContainers(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableHciVmSubscriptionResource(subscriptionResource).GetHciVmStorageContainers(cancellationToken);
        }

        /// <summary> Lists all of the virtual hard disks in the specified subscription. Use the nextLink property in the response to get the next page of virtual hard disks. </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource"/> the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> A collection of <see cref="HciVmVirtualHardDiskResource"/> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<HciVmVirtualHardDiskResource> GetHciVmVirtualHardDisksAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableHciVmSubscriptionResource(subscriptionResource).GetHciVmVirtualHardDisksAsync(cancellationToken);
        }

        /// <summary> Lists all of the virtual hard disks in the specified subscription. Use the nextLink property in the response to get the next page of virtual hard disks. </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource"/> the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> A collection of <see cref="HciVmVirtualHardDiskResource"/> that may take multiple service requests to iterate over. </returns>
        public static Pageable<HciVmVirtualHardDiskResource> GetHciVmVirtualHardDisks(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableHciVmSubscriptionResource(subscriptionResource).GetHciVmVirtualHardDisks(cancellationToken);
        }

        /// <summary> Lists all of the virtual machine instances within the specified parent resource. </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource"/> the method will execute against. </param>
        /// <param name="resourceUri"> The fully qualified Azure Resource manager identifier of the resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tenantResource"/> is null. </exception>
        /// <returns> A collection of <see cref="HciVmInstanceResource"/> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<HciVmInstanceResource> GetHciVmInstancesAsync(this TenantResource tenantResource, string resourceUri, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(tenantResource, nameof(tenantResource));

            return GetMockableHciVmTenantResource(tenantResource).GetHciVmInstancesAsync(resourceUri, cancellationToken);
        }

        /// <summary> Lists all of the virtual machine instances within the specified parent resource. </summary>
        /// <param name="tenantResource"> The <see cref="TenantResource"/> the method will execute against. </param>
        /// <param name="resourceUri"> The fully qualified Azure Resource manager identifier of the resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="tenantResource"/> is null. </exception>
        /// <returns> A collection of <see cref="HciVmInstanceResource"/> that may take multiple service requests to iterate over. </returns>
        public static Pageable<HciVmInstanceResource> GetHciVmInstances(this TenantResource tenantResource, string resourceUri, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(tenantResource, nameof(tenantResource));

            return GetMockableHciVmTenantResource(tenantResource).GetHciVmInstances(resourceUri, cancellationToken);
        }
    }
}
