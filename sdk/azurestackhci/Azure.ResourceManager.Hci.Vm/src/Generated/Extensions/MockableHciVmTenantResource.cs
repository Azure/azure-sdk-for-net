// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Hci.Vm;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Hci.Vm.Mocking
{
    /// <summary> A class to add extension methods to <see cref="TenantResource"/>. </summary>
    public partial class MockableHciVmTenantResource : ArmResource
    {
        private ClientDiagnostics _virtualMachineInstancesClientDiagnostics;
        private VirtualMachineInstances _virtualMachineInstancesRestClient;

        /// <summary> Initializes a new instance of MockableHciVmTenantResource for mocking. </summary>
        protected MockableHciVmTenantResource()
        {
        }

        /// <summary> Initializes a new instance of <see cref="MockableHciVmTenantResource"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal MockableHciVmTenantResource(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics VirtualMachineInstancesClientDiagnostics => _virtualMachineInstancesClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.Hci.Vm.Mocking", ProviderConstants.DefaultProviderNamespace, Diagnostics);

        private VirtualMachineInstances VirtualMachineInstancesRestClient => _virtualMachineInstancesRestClient ??= new VirtualMachineInstances(VirtualMachineInstancesClientDiagnostics, Pipeline, Endpoint, "2025-06-01-preview");

        /// <summary> Lists all of the virtual machine instances within the specified parent resource. </summary>
        /// <param name="resourceUri"> The fully qualified Azure Resource manager identifier of the resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceUri"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="resourceUri"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> A collection of <see cref="HciVmInstanceResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<HciVmInstanceResource> GetHciVmInstancesAsync(string resourceUri, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(resourceUri, nameof(resourceUri));

            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new AsyncPageableWrapper<HciVmInstanceData, HciVmInstanceResource>(new VirtualMachineInstancesGetAllAsyncCollectionResultOfT(VirtualMachineInstancesRestClient, resourceUri, context), data => new HciVmInstanceResource(Client, data));
        }

        /// <summary> Lists all of the virtual machine instances within the specified parent resource. </summary>
        /// <param name="resourceUri"> The fully qualified Azure Resource manager identifier of the resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceUri"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="resourceUri"/> is an empty string, and was expected to be non-empty. </exception>
        /// <returns> A collection of <see cref="HciVmInstanceResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<HciVmInstanceResource> GetHciVmInstances(string resourceUri, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(resourceUri, nameof(resourceUri));

            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new PageableWrapper<HciVmInstanceData, HciVmInstanceResource>(new VirtualMachineInstancesGetAllCollectionResultOfT(VirtualMachineInstancesRestClient, resourceUri, context), data => new HciVmInstanceResource(Client, data));
        }
    }
}
