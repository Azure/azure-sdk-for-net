// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Hci.Vm;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Hci.Vm.Models
{
    /// <summary> A factory class for creating instances of the models for mocking. </summary>
    public static partial class ArmHciVmModelFactory
    {
        /// <summary> The gallery images resource definition. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="resourceType"> The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts". </param>
        /// <param name="systemData"> Azure Resource Manager metadata containing createdBy and modifiedBy information. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="location"> The geo-location where the resource lives. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="extendedLocation"> The extendedLocation of the resource. </param>
        /// <returns> A new <see cref="Vm.HciVmGalleryImageData"/> instance for mocking. </returns>
        public static HciVmGalleryImageData HciVmGalleryImageData(ResourceIdentifier id = default, string name = default, ResourceType resourceType = default, SystemData systemData = default, IDictionary<string, string> tags = default, AzureLocation location = default, HciVmGalleryImageProperties properties = default, HciVmExtendedLocation extendedLocation = default)
        {
            tags ??= new ChangeTrackingDictionary<string, string>();

            return new HciVmGalleryImageData(
                id,
                name,
                resourceType,
                systemData,
                additionalBinaryDataProperties: null,
                tags,
                location,
                properties,
                extendedLocation);
        }

        /// <summary> Properties under the gallery image resource. </summary>
        /// <param name="containerId"> Storage ContainerID of the storage container to be used for gallery image. </param>
        /// <param name="imagePath"> location of the image the gallery image should be created from. </param>
        /// <param name="osType"> Operating system type that the gallery image uses [Windows, Linux]. </param>
        /// <param name="cloudInitDataSource"> Datasource for the gallery image when provisioning with cloud-init [NoCloud, Azure]. </param>
        /// <param name="hyperVGeneration"> The hypervisor generation of the Virtual Machine [V1, V2]. </param>
        /// <param name="vmImageRepositoryCredentials"> The credentials used to login to the image repository that has access to the specified image. </param>
        /// <param name="identifier"> This is the gallery image definition identifier. </param>
        /// <param name="version"> Specifies information about the gallery image version that you want to create or update. </param>
        /// <param name="provisioningState"> Provisioning state of the gallery image. </param>
        /// <param name="status"> The observed state of gallery images. </param>
        /// <param name="sourceVirtualMachineId"> Resource ID of the source virtual machine from whose OS disk the gallery image is created. </param>
        /// <returns> A new <see cref="Models.HciVmGalleryImageProperties"/> instance for mocking. </returns>
        public static HciVmGalleryImageProperties HciVmGalleryImageProperties(ResourceIdentifier containerId = default, string imagePath = default, HciVmOSType osType = default, CloudInitDataSource? cloudInitDataSource = default, HciVmHyperVGeneration? hyperVGeneration = default, HciVmImageRepositoryCredentials vmImageRepositoryCredentials = default, HciVmGalleryImageIdentifier identifier = default, HciVmGalleryImageVersion version = default, HciVmProvisioningState? provisioningState = default, HciVmGalleryImageStatus status = default, ResourceIdentifier sourceVirtualMachineId = default)
        {
            return new HciVmGalleryImageProperties(
                containerId,
                imagePath,
                osType,
                cloudInitDataSource,
                hyperVGeneration,
                vmImageRepositoryCredentials,
                identifier,
                version,
                provisioningState,
                status,
                sourceVirtualMachineId,
                additionalBinaryDataProperties: null);
        }

        /// <param name="osDiskImageSizeInMB"> This property indicates the size of the VHD to be created. </param>
        /// <returns> A new <see cref="Models.GalleryImageVersionStorageProfile"/> instance for mocking. </returns>
        public static GalleryImageVersionStorageProfile GalleryImageVersionStorageProfile(long? osDiskImageSizeInMB = default)
        {
            return new GalleryImageVersionStorageProfile(osDiskImageSizeInMB is null ? default : new GalleryOSDiskImage(osDiskImageSizeInMB, new Dictionary<string, BinaryData>()), additionalBinaryDataProperties: null);
        }

        /// <param name="errorCode"> GalleryImage provisioning error code. </param>
        /// <param name="errorMessage"> Descriptive error message. </param>
        /// <param name="provisioningStatus"> provisioning status of the gallery image. </param>
        /// <param name="downloadSizeInMB"> The downloaded sized of the image in MB. </param>
        /// <param name="progressPercentage"> The progress of the operation in percentage. </param>
        /// <returns> A new <see cref="Models.HciVmGalleryImageStatus"/> instance for mocking. </returns>
        public static HciVmGalleryImageStatus HciVmGalleryImageStatus(string errorCode = default, string errorMessage = default, HciVmGalleryImageProvisioningStatus provisioningStatus = default, long? downloadSizeInMB = default, long? progressPercentage = default)
        {
            return new HciVmGalleryImageStatus(
                errorCode,
                errorMessage,
                provisioningStatus,
                downloadSizeInMB is null ? default : new GalleryImageStatusDownloadStatus(downloadSizeInMB, new Dictionary<string, BinaryData>()),
                progressPercentage,
                additionalBinaryDataProperties: null);
        }

        /// <summary> The status of the operation performed on the gallery image. </summary>
        /// <param name="operationId"> The ID of the operation performed on the gallery image. </param>
        /// <param name="status"> The status of the operation performed on the gallery image [Succeeded, Failed, InProgress]. </param>
        /// <returns> A new <see cref="Models.HciVmGalleryImageProvisioningStatus"/> instance for mocking. </returns>
        public static HciVmGalleryImageProvisioningStatus HciVmGalleryImageProvisioningStatus(string operationId = default, HciVmOperationStatus? status = default)
        {
            return new HciVmGalleryImageProvisioningStatus(operationId, status, additionalBinaryDataProperties: null);
        }

        /// <summary> The error detail. </summary>
        /// <param name="code"> The error code. </param>
        /// <param name="message"> The error message. </param>
        /// <param name="target"> The error target. </param>
        /// <param name="details"> The error details. </param>
        /// <param name="additionalInfo"> The error additional info. </param>
        /// <returns> A new <see cref="Models.ErrorDetail"/> instance for mocking. </returns>
        public static ErrorDetail ErrorDetail(string code = default, string message = default, string target = default, IEnumerable<ErrorDetail> details = default, IEnumerable<ErrorAdditionalInfo> additionalInfo = default)
        {
            details ??= new ChangeTrackingList<ErrorDetail>();
            additionalInfo ??= new ChangeTrackingList<ErrorAdditionalInfo>();

            return new ErrorDetail(
                code,
                message,
                target,
                details.ToList(),
                additionalInfo.ToList(),
                additionalBinaryDataProperties: null);
        }

        /// <summary> The resource management error additional info. </summary>
        /// <param name="type"> The additional info type. </param>
        /// <param name="info"> The additional info. </param>
        /// <returns> A new <see cref="Models.ErrorAdditionalInfo"/> instance for mocking. </returns>
        public static ErrorAdditionalInfo ErrorAdditionalInfo(string @type = default, BinaryData info = default)
        {
            return new ErrorAdditionalInfo(@type, info, additionalBinaryDataProperties: null);
        }

        /// <summary> The type used for updating tags in GalleryImage resources. </summary>
        /// <param name="tags"> Resource tags. </param>
        /// <returns> A new <see cref="Models.HciVmGalleryImagePatch"/> instance for mocking. </returns>
        public static HciVmGalleryImagePatch HciVmGalleryImagePatch(IDictionary<string, string> tags = default)
        {
            tags ??= new ChangeTrackingDictionary<string, string>();

            return new HciVmGalleryImagePatch(tags, additionalBinaryDataProperties: null);
        }

        /// <summary> The logical network resource definition. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="resourceType"> The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts". </param>
        /// <param name="systemData"> Azure Resource Manager metadata containing createdBy and modifiedBy information. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="location"> The geo-location where the resource lives. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="extendedLocation"> The extendedLocation of the resource. </param>
        /// <returns> A new <see cref="Vm.HciVmLogicalNetworkData"/> instance for mocking. </returns>
        public static HciVmLogicalNetworkData HciVmLogicalNetworkData(ResourceIdentifier id = default, string name = default, ResourceType resourceType = default, SystemData systemData = default, IDictionary<string, string> tags = default, AzureLocation location = default, HciVmLogicalNetworkProperties properties = default, HciVmExtendedLocation extendedLocation = default)
        {
            tags ??= new ChangeTrackingDictionary<string, string>();

            return new HciVmLogicalNetworkData(
                id,
                name,
                resourceType,
                systemData,
                additionalBinaryDataProperties: null,
                tags,
                location,
                properties,
                extendedLocation);
        }

        /// <param name="dhcpOptionsDnsServers"> The list of DNS servers IP addresses. </param>
        /// <param name="subnets"> Subnet - list of subnets under the logical network. </param>
        /// <param name="provisioningState"> Provisioning state of the logical network. </param>
        /// <param name="vmSwitchName"> name of the network switch to be used for VMs. </param>
        /// <param name="status"> The observed state of logical networks. </param>
        /// <param name="networkType"> Type of the Logical Network. </param>
        /// <returns> A new <see cref="Models.HciVmLogicalNetworkProperties"/> instance for mocking. </returns>
        public static HciVmLogicalNetworkProperties HciVmLogicalNetworkProperties(IList<string> dhcpOptionsDnsServers = default, IEnumerable<HciVmNetworkingSubnet> subnets = default, HciVmProvisioningState? provisioningState = default, string vmSwitchName = default, HciVmLogicalNetworkStatus status = default, HciVmLogicalNetworkType? networkType = default)
        {
            subnets ??= new ChangeTrackingList<HciVmNetworkingSubnet>();

            return new HciVmLogicalNetworkProperties(
                dhcpOptionsDnsServers is null ? default : new HciVmLogicalNetworkDhcpOptions(dhcpOptionsDnsServers, new Dictionary<string, BinaryData>()),
                subnets.ToList(),
                provisioningState,
                vmSwitchName,
                status,
                networkType,
                additionalBinaryDataProperties: null);
        }

        /// <param name="addressPrefix"> The address prefix for the subnet: Cidr for this subnet - IPv4, IPv6. </param>
        /// <param name="addressPrefixes"> List of address prefixes for the subnet. </param>
        /// <param name="ipAllocationMethod"> IPAllocationMethod - The IP address allocation method. Possible values include: 'Static', 'Dynamic'. </param>
        /// <param name="ipConfigurationReferences"> IPConfigurationReferences - list of IPConfigurationReferences. </param>
        /// <param name="routeTable"> Route table resource. </param>
        /// <param name="ipPools"> network associated pool of IP Addresses. </param>
        /// <param name="vlan"> Vlan to use for the subnet. </param>
        /// <param name="networkSecurityGroupId"> The ARM ID for a Network Security Group. </param>
        /// <param name="name"> Name - The name of the resource that is unique within a resource group. This name can be used to access the resource. </param>
        /// <returns> A new <see cref="Models.HciVmNetworkingSubnet"/> instance for mocking. </returns>
        public static HciVmNetworkingSubnet HciVmNetworkingSubnet(string addressPrefix = default, IList<string> addressPrefixes = default, HciVmIPAllocationMethod? ipAllocationMethod = default, IList<SubnetIpConfigurationReference> ipConfigurationReferences = default, HciVmNetworkingRouteTable routeTable = default, IList<HciVmNetworkingIPPool> ipPools = default, int? vlan = default, ResourceIdentifier networkSecurityGroupId = default, string name = default)
        {
            return new HciVmNetworkingSubnet(addressPrefix is null || addressPrefixes is null || ipAllocationMethod is null || ipConfigurationReferences is null || routeTable is null || ipPools is null || vlan is null || networkSecurityGroupId is null ? default : new SubnetProperties(
                addressPrefix,
                addressPrefixes,
                ipAllocationMethod,
                ipConfigurationReferences,
                new NetworkSecurityGroupArmReference(networkSecurityGroupId, new Dictionary<string, BinaryData>()),
                routeTable,
                ipPools,
                vlan,
                new Dictionary<string, BinaryData>()), name, additionalBinaryDataProperties: null);
        }

        /// <param name="eTag"> A unique read-only string that changes whenever the resource is updated. </param>
        /// <param name="name"> Resource name. </param>
        /// <param name="type"> Resource type. </param>
        /// <param name="routes"> Collection of routes contained within a route table. </param>
        /// <returns> A new <see cref="Models.HciVmNetworkingRouteTable"/> instance for mocking. </returns>
        public static HciVmNetworkingRouteTable HciVmNetworkingRouteTable(string eTag = default, string name = default, string @type = default, IList<HciVmNetworkingRoute> routes = default)
        {
            return new HciVmNetworkingRouteTable(eTag, name, @type, routes is null ? default : new RouteTableProperties(routes, new Dictionary<string, BinaryData>()), additionalBinaryDataProperties: null);
        }

        /// <summary> IP Pool info. </summary>
        /// <param name="used"> Number of IP addresses allocated from the IP Pool. </param>
        /// <param name="available"> Number of IP addresses available in the IP Pool. </param>
        /// <returns> A new <see cref="Models.HciVmIPPoolInfo"/> instance for mocking. </returns>
        public static HciVmIPPoolInfo HciVmIPPoolInfo(string used = default, string available = default)
        {
            return new HciVmIPPoolInfo(used, available, additionalBinaryDataProperties: null);
        }

        /// <summary> The observed state of logical networks. </summary>
        /// <param name="errorCode"> LogicalNetwork provisioning error code. </param>
        /// <param name="errorMessage"> Descriptive error message. </param>
        /// <param name="provisioningStatus"> Logical network provisioning status. </param>
        /// <returns> A new <see cref="Models.HciVmLogicalNetworkStatus"/> instance for mocking. </returns>
        public static HciVmLogicalNetworkStatus HciVmLogicalNetworkStatus(string errorCode = default, string errorMessage = default, HciVmLogicalNetworkProvisioningStatus provisioningStatus = default)
        {
            return new HciVmLogicalNetworkStatus(errorCode, errorMessage, provisioningStatus, additionalBinaryDataProperties: null);
        }

        /// <summary> Describes the status of the provisioning. </summary>
        /// <param name="operationId"> The ID of the operation performed on the logical network. </param>
        /// <param name="status"> The status of the operation performed on the logical network [Succeeded, Failed, InProgress]. </param>
        /// <returns> A new <see cref="Models.HciVmLogicalNetworkProvisioningStatus"/> instance for mocking. </returns>
        public static HciVmLogicalNetworkProvisioningStatus HciVmLogicalNetworkProvisioningStatus(string operationId = default, HciVmOperationStatus? status = default)
        {
            return new HciVmLogicalNetworkProvisioningStatus(operationId, status, additionalBinaryDataProperties: null);
        }

        /// <summary> The logical network resource patch definition. </summary>
        /// <param name="tags"> Resource tags. </param>
        /// <returns> A new <see cref="Models.HciVmLogicalNetworkPatch"/> instance for mocking. </returns>
        public static HciVmLogicalNetworkPatch HciVmLogicalNetworkPatch(IDictionary<string, string> tags = default)
        {
            tags ??= new ChangeTrackingDictionary<string, string>();

            return new HciVmLogicalNetworkPatch(tags, additionalBinaryDataProperties: null);
        }

        /// <summary> The marketplace gallery image resource definition. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="resourceType"> The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts". </param>
        /// <param name="systemData"> Azure Resource Manager metadata containing createdBy and modifiedBy information. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="location"> The geo-location where the resource lives. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="extendedLocation"> The extendedLocation of the resource. </param>
        /// <returns> A new <see cref="Vm.HciVmMarketplaceGalleryImageData"/> instance for mocking. </returns>
        public static HciVmMarketplaceGalleryImageData HciVmMarketplaceGalleryImageData(ResourceIdentifier id = default, string name = default, ResourceType resourceType = default, SystemData systemData = default, IDictionary<string, string> tags = default, AzureLocation location = default, HciVmMarketplaceGalleryImageProperties properties = default, HciVmExtendedLocation extendedLocation = default)
        {
            tags ??= new ChangeTrackingDictionary<string, string>();

            return new HciVmMarketplaceGalleryImageData(
                id,
                name,
                resourceType,
                systemData,
                additionalBinaryDataProperties: null,
                tags,
                location,
                properties,
                extendedLocation);
        }

        /// <summary> Properties under the marketplace gallery image resource. </summary>
        /// <param name="containerId"> Storage ContainerID of the storage container to be used for marketplace gallery image. </param>
        /// <param name="osType"> Operating system type that the gallery image uses [Windows, Linux]. </param>
        /// <param name="cloudInitDataSource"> Datasource for the gallery image when provisioning with cloud-init [NoCloud, Azure]. </param>
        /// <param name="hyperVGeneration"> The hypervisor generation of the Virtual Machine [V1, V2]. </param>
        /// <param name="identifier"> This is the gallery image definition identifier. </param>
        /// <param name="version"> Specifies information about the gallery image version that you want to create or update. </param>
        /// <param name="provisioningState"> Provisioning state of the marketplace gallery image. </param>
        /// <param name="status"> The observed state of marketplace gallery images. </param>
        /// <returns> A new <see cref="Models.HciVmMarketplaceGalleryImageProperties"/> instance for mocking. </returns>
        public static HciVmMarketplaceGalleryImageProperties HciVmMarketplaceGalleryImageProperties(ResourceIdentifier containerId = default, HciVmOSType osType = default, CloudInitDataSource? cloudInitDataSource = default, HciVmHyperVGeneration? hyperVGeneration = default, HciVmGalleryImageIdentifier identifier = default, HciVmGalleryImageVersion version = default, HciVmProvisioningState? provisioningState = default, HciVmMarketplaceGalleryImageStatus status = default)
        {
            return new HciVmMarketplaceGalleryImageProperties(
                containerId,
                osType,
                cloudInitDataSource,
                hyperVGeneration,
                identifier,
                version,
                provisioningState,
                status,
                additionalBinaryDataProperties: null);
        }

        /// <param name="errorCode"> MarketplaceGalleryImage provisioning error code. </param>
        /// <param name="errorMessage"> Descriptive error message. </param>
        /// <param name="provisioningStatus"> Provisioning status of marketplace gallery image. </param>
        /// <param name="downloadSizeInMB"> The downloaded sized of the image in MB. </param>
        /// <param name="progressPercentage"> The progress of the operation in percentage. </param>
        /// <returns> A new <see cref="Models.HciVmMarketplaceGalleryImageStatus"/> instance for mocking. </returns>
        public static HciVmMarketplaceGalleryImageStatus HciVmMarketplaceGalleryImageStatus(string errorCode = default, string errorMessage = default, HciVmMarketplaceGalleryImageProvisioningStatus provisioningStatus = default, long? downloadSizeInMB = default, long? progressPercentage = default)
        {
            return new HciVmMarketplaceGalleryImageStatus(
                errorCode,
                errorMessage,
                provisioningStatus,
                downloadSizeInMB is null ? default : new MarketplaceGalleryImageStatusDownloadStatus(downloadSizeInMB, new Dictionary<string, BinaryData>()),
                progressPercentage,
                additionalBinaryDataProperties: null);
        }

        /// <summary> Marketplace GalleryImage provisioning status. </summary>
        /// <param name="operationId"> The ID of the operation performed on the gallery image. </param>
        /// <param name="status"> The status of the operation performed on the gallery image [Succeeded, Failed, InProgress]. </param>
        /// <returns> A new <see cref="Models.HciVmMarketplaceGalleryImageProvisioningStatus"/> instance for mocking. </returns>
        public static HciVmMarketplaceGalleryImageProvisioningStatus HciVmMarketplaceGalleryImageProvisioningStatus(string operationId = default, HciVmOperationStatus? status = default)
        {
            return new HciVmMarketplaceGalleryImageProvisioningStatus(operationId, status, additionalBinaryDataProperties: null);
        }

        /// <summary> The type used for updating tags in MarketplaceGalleryImage resources. </summary>
        /// <param name="tags"> Resource tags. </param>
        /// <returns> A new <see cref="Models.HciVmMarketplaceGalleryImagePatch"/> instance for mocking. </returns>
        public static HciVmMarketplaceGalleryImagePatch HciVmMarketplaceGalleryImagePatch(IDictionary<string, string> tags = default)
        {
            tags ??= new ChangeTrackingDictionary<string, string>();

            return new HciVmMarketplaceGalleryImagePatch(tags, additionalBinaryDataProperties: null);
        }

        /// <summary> The network interface resource definition. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="resourceType"> The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts". </param>
        /// <param name="systemData"> Azure Resource Manager metadata containing createdBy and modifiedBy information. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="location"> The geo-location where the resource lives. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="extendedLocation"> The extendedLocation of the resource. </param>
        /// <returns> A new <see cref="Vm.HciVmNetworkInterfaceData"/> instance for mocking. </returns>
        public static HciVmNetworkInterfaceData HciVmNetworkInterfaceData(ResourceIdentifier id = default, string name = default, ResourceType resourceType = default, SystemData systemData = default, IDictionary<string, string> tags = default, AzureLocation location = default, HciVmNetworkInterfaceProperties properties = default, HciVmExtendedLocation extendedLocation = default)
        {
            tags ??= new ChangeTrackingDictionary<string, string>();

            return new HciVmNetworkInterfaceData(
                id,
                name,
                resourceType,
                systemData,
                additionalBinaryDataProperties: null,
                tags,
                location,
                properties,
                extendedLocation);
        }

        /// <param name="ipConfigurations"> IPConfigurations - A list of IPConfigurations of the network interface. </param>
        /// <param name="macAddress"> MacAddress - The MAC address of the network interface. </param>
        /// <param name="dnsServers"> List of DNS server IP Addresses for the interface. </param>
        /// <param name="createFromLocal"> Boolean indicating whether this is a existing local network interface or if one should be created. </param>
        /// <param name="provisioningState"> Provisioning state of the network interface. </param>
        /// <param name="status"> The observed state of network interfaces. </param>
        /// <param name="networkSecurityGroupId"> The ARM ID for a Network Security Group. </param>
        /// <returns> A new <see cref="Models.HciVmNetworkInterfaceProperties"/> instance for mocking. </returns>
        public static HciVmNetworkInterfaceProperties HciVmNetworkInterfaceProperties(IEnumerable<HciVmIPConfiguration> ipConfigurations = default, string macAddress = default, IList<string> dnsServers = default, bool? createFromLocal = default, HciVmProvisioningState? provisioningState = default, HciVmNetworkInterfaceStatus status = default, ResourceIdentifier networkSecurityGroupId = default)
        {
            ipConfigurations ??= new ChangeTrackingList<HciVmIPConfiguration>();

            return new HciVmNetworkInterfaceProperties(
                ipConfigurations.ToList(),
                macAddress,
                dnsServers is null ? default : new InterfaceDNSSettings(dnsServers, new Dictionary<string, BinaryData>()),
                createFromLocal,
                provisioningState,
                status,
                networkSecurityGroupId is null ? default : new NetworkSecurityGroupArmReference(networkSecurityGroupId, new Dictionary<string, BinaryData>()),
                additionalBinaryDataProperties: null);
        }

        /// <param name="gateway"> Gateway for network interface. </param>
        /// <param name="prefixLength"> prefixLength for network interface. </param>
        /// <param name="privateIPAddress"> PrivateIPAddress - Private IP address of the IP configuration. </param>
        /// <param name="subnetId"> The ARM ID for a Logical Network. </param>
        /// <returns> A new <see cref="Models.HciVmIPConfigurationProperties"/> instance for mocking. </returns>
        public static HciVmIPConfigurationProperties HciVmIPConfigurationProperties(string gateway = default, string prefixLength = default, string privateIPAddress = default, ResourceIdentifier subnetId = default)
        {
            return new HciVmIPConfigurationProperties(gateway, prefixLength, privateIPAddress, subnetId is null ? default : new LogicalNetworkArmReference(subnetId, new Dictionary<string, BinaryData>()), additionalBinaryDataProperties: null);
        }

        /// <summary> The observed state of network interfaces. </summary>
        /// <param name="errorCode"> NetworkInterface provisioning error code. </param>
        /// <param name="errorMessage"> Descriptive error message. </param>
        /// <param name="provisioningStatus"> Network interface provisioning status. </param>
        /// <returns> A new <see cref="Models.HciVmNetworkInterfaceStatus"/> instance for mocking. </returns>
        public static HciVmNetworkInterfaceStatus HciVmNetworkInterfaceStatus(string errorCode = default, string errorMessage = default, HciVmNetworkInterfaceProvisioningStatus provisioningStatus = default)
        {
            return new HciVmNetworkInterfaceStatus(errorCode, errorMessage, provisioningStatus, additionalBinaryDataProperties: null);
        }

        /// <summary> Network interface provisioning status. </summary>
        /// <param name="operationId"> The ID of the operation performed on the network interface. </param>
        /// <param name="status"> The status of the operation performed on the network interface [Succeeded, Failed, InProgress]. </param>
        /// <returns> A new <see cref="Models.HciVmNetworkInterfaceProvisioningStatus"/> instance for mocking. </returns>
        public static HciVmNetworkInterfaceProvisioningStatus HciVmNetworkInterfaceProvisioningStatus(string operationId = default, HciVmOperationStatus? status = default)
        {
            return new HciVmNetworkInterfaceProvisioningStatus(operationId, status, additionalBinaryDataProperties: null);
        }

        /// <summary> The network interface resource patch definition. </summary>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="properties"> Defines the resource properties for the update. </param>
        /// <returns> A new <see cref="Models.HciVmNetworkInterfacePatch"/> instance for mocking. </returns>
        public static HciVmNetworkInterfacePatch HciVmNetworkInterfacePatch(IDictionary<string, string> tags = default, HciVmNetworkInterfacePatchProperties properties = default)
        {
            tags ??= new ChangeTrackingDictionary<string, string>();

            return new HciVmNetworkInterfacePatch(tags, properties, additionalBinaryDataProperties: null);
        }

        /// <param name="networkSecurityGroupId"> The ARM ID for a Network Security Group. </param>
        /// <param name="dnsServers"> List of DNS server IP Addresses for the interface. </param>
        /// <returns> A new <see cref="Models.HciVmNetworkInterfacePatchProperties"/> instance for mocking. </returns>
        public static HciVmNetworkInterfacePatchProperties HciVmNetworkInterfacePatchProperties(ResourceIdentifier networkSecurityGroupId = default, IList<string> dnsServers = default)
        {
            return new HciVmNetworkInterfacePatchProperties(networkSecurityGroupId is null ? default : new NetworkSecurityGroupArmReference(networkSecurityGroupId, new Dictionary<string, BinaryData>()), dnsServers is null ? default : new InterfaceDNSSettings(dnsServers, new Dictionary<string, BinaryData>()), additionalBinaryDataProperties: null);
        }

        /// <summary> NetworkSecurityGroup resource. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="resourceType"> The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts". </param>
        /// <param name="systemData"> Azure Resource Manager metadata containing createdBy and modifiedBy information. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="location"> The geo-location where the resource lives. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="extendedLocation"> The extendedLocation of the resource. </param>
        /// <param name="eTag"> If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields. </param>
        /// <returns> A new <see cref="Vm.HciVmNetworkSecurityGroupData"/> instance for mocking. </returns>
        public static HciVmNetworkSecurityGroupData HciVmNetworkSecurityGroupData(ResourceIdentifier id = default, string name = default, ResourceType resourceType = default, SystemData systemData = default, IDictionary<string, string> tags = default, AzureLocation location = default, HciVmNetworkSecurityGroupProperties properties = default, HciVmExtendedLocation extendedLocation = default, string eTag = default)
        {
            tags ??= new ChangeTrackingDictionary<string, string>();

            return new HciVmNetworkSecurityGroupData(
                id,
                name,
                resourceType,
                systemData,
                additionalBinaryDataProperties: null,
                tags,
                location,
                properties,
                extendedLocation,
                eTag);
        }

        /// <summary> Network Security Group resource. </summary>
        /// <param name="networkInterfaces"> A collection of references to network interfaces that are currently using this NSG. </param>
        /// <param name="subnets"> A collection of references to logical networks that are currently using this NSG. </param>
        /// <param name="provisioningState"> The provisioning state of the network security group resource. </param>
        /// <param name="status"> The observed state of Network Security Group. </param>
        /// <returns> A new <see cref="Models.HciVmNetworkSecurityGroupProperties"/> instance for mocking. </returns>
        public static HciVmNetworkSecurityGroupProperties HciVmNetworkSecurityGroupProperties(IEnumerable<NetworkInterfaceArmReference> networkInterfaces = default, IEnumerable<LogicalNetworkArmReference> subnets = default, HciVmProvisioningState? provisioningState = default, HciVmNetworkSecurityGroupStatus status = default)
        {
            networkInterfaces ??= new ChangeTrackingList<NetworkInterfaceArmReference>();
            subnets ??= new ChangeTrackingList<LogicalNetworkArmReference>();

            return new HciVmNetworkSecurityGroupProperties(networkInterfaces.ToList(), subnets.ToList(), provisioningState, status, additionalBinaryDataProperties: null);
        }

        /// <summary> The observed state of network security group. </summary>
        /// <param name="errorCode"> NetworkSecurityGroup provisioning error code. </param>
        /// <param name="errorMessage"> Descriptive error message. </param>
        /// <param name="provisioningStatus"> network security group provisioning status. </param>
        /// <returns> A new <see cref="Models.HciVmNetworkSecurityGroupStatus"/> instance for mocking. </returns>
        public static HciVmNetworkSecurityGroupStatus HciVmNetworkSecurityGroupStatus(string errorCode = default, string errorMessage = default, HciVmNetworkSecurityGroupProvisioningStatus provisioningStatus = default)
        {
            return new HciVmNetworkSecurityGroupStatus(errorCode, errorMessage, provisioningStatus, additionalBinaryDataProperties: null);
        }

        /// <summary> network security group provisioning status. </summary>
        /// <param name="operationId"> The ID of the operation performed on the network security group. </param>
        /// <param name="status"> The status of the operation performed on the network security group [Succeeded, Failed, InProgress]. </param>
        /// <returns> A new <see cref="Models.HciVmNetworkSecurityGroupProvisioningStatus"/> instance for mocking. </returns>
        public static HciVmNetworkSecurityGroupProvisioningStatus HciVmNetworkSecurityGroupProvisioningStatus(string operationId = default, HciVmOperationStatus? status = default)
        {
            return new HciVmNetworkSecurityGroupProvisioningStatus(operationId, status, additionalBinaryDataProperties: null);
        }

        /// <summary> The type used for updating tags in NetworkSecurityGroup resources. </summary>
        /// <param name="tags"> Resource tags. </param>
        /// <returns> A new <see cref="Models.HciVmNetworkSecurityGroupPatch"/> instance for mocking. </returns>
        public static HciVmNetworkSecurityGroupPatch HciVmNetworkSecurityGroupPatch(IDictionary<string, string> tags = default)
        {
            tags ??= new ChangeTrackingDictionary<string, string>();

            return new HciVmNetworkSecurityGroupPatch(tags, additionalBinaryDataProperties: null);
        }

        /// <summary> Security Rule resource. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="resourceType"> The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts". </param>
        /// <param name="systemData"> Azure Resource Manager metadata containing createdBy and modifiedBy information. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="extendedLocation"> The extendedLocation of the resource. </param>
        /// <returns> A new <see cref="Vm.HciVmSecurityRuleData"/> instance for mocking. </returns>
        public static HciVmSecurityRuleData HciVmSecurityRuleData(ResourceIdentifier id = default, string name = default, ResourceType resourceType = default, SystemData systemData = default, HciVmSecurityRuleProperties properties = default, HciVmExtendedLocation extendedLocation = default)
        {
            return new HciVmSecurityRuleData(
                id,
                name,
                resourceType,
                systemData,
                additionalBinaryDataProperties: null,
                properties,
                extendedLocation);
        }

        /// <summary> Security rule resource. </summary>
        /// <param name="description"> A description for this rule. Restricted to 140 chars. </param>
        /// <param name="protocol"> Network protocol this rule applies to. </param>
        /// <param name="sourceAddressPrefixes"> The CIDR or source IP ranges. </param>
        /// <param name="destinationAddressPrefixes"> The destination address prefixes. CIDR or destination IP ranges. </param>
        /// <param name="sourcePortRanges"> The source port ranges. Integer or range between 0 and 65535. Asterisk '*' can also be used to match all ports. </param>
        /// <param name="destinationPortRanges"> The destination port ranges. Integer or range between 0 and 65535. Asterisk '*' can also be used to match all ports. </param>
        /// <param name="access"> The network traffic is allowed or denied. </param>
        /// <param name="priority"> The priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule. </param>
        /// <param name="direction"> The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic. </param>
        /// <param name="provisioningState"> Provisioning state of the SR. </param>
        /// <returns> A new <see cref="Models.HciVmSecurityRuleProperties"/> instance for mocking. </returns>
        public static HciVmSecurityRuleProperties HciVmSecurityRuleProperties(string description = default, HciVmSecurityRuleProtocol protocol = default, IEnumerable<string> sourceAddressPrefixes = default, IEnumerable<string> destinationAddressPrefixes = default, IEnumerable<string> sourcePortRanges = default, IEnumerable<string> destinationPortRanges = default, HciVmSecurityRuleAccess access = default, int priority = default, HciVmSecurityRuleDirection direction = default, HciVmProvisioningState? provisioningState = default)
        {
            sourceAddressPrefixes ??= new ChangeTrackingList<string>();
            destinationAddressPrefixes ??= new ChangeTrackingList<string>();
            sourcePortRanges ??= new ChangeTrackingList<string>();
            destinationPortRanges ??= new ChangeTrackingList<string>();

            return new HciVmSecurityRuleProperties(
                description,
                protocol,
                sourceAddressPrefixes.ToList(),
                destinationAddressPrefixes.ToList(),
                sourcePortRanges.ToList(),
                destinationPortRanges.ToList(),
                access,
                priority,
                direction,
                provisioningState,
                additionalBinaryDataProperties: null);
        }

        /// <summary> The storage container resource definition. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="resourceType"> The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts". </param>
        /// <param name="systemData"> Azure Resource Manager metadata containing createdBy and modifiedBy information. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="location"> The geo-location where the resource lives. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="extendedLocation"> The extendedLocation of the resource. </param>
        /// <returns> A new <see cref="Vm.HciVmStorageContainerData"/> instance for mocking. </returns>
        public static HciVmStorageContainerData HciVmStorageContainerData(ResourceIdentifier id = default, string name = default, ResourceType resourceType = default, SystemData systemData = default, IDictionary<string, string> tags = default, AzureLocation location = default, HciVmStorageContainerProperties properties = default, HciVmExtendedLocation extendedLocation = default)
        {
            tags ??= new ChangeTrackingDictionary<string, string>();

            return new HciVmStorageContainerData(
                id,
                name,
                resourceType,
                systemData,
                additionalBinaryDataProperties: null,
                tags,
                location,
                properties,
                extendedLocation);
        }

        /// <summary> Properties under the storage container resource. </summary>
        /// <param name="path"> Path of the storage container on the disk. </param>
        /// <param name="provisioningState"> Provisioning state of the storage container. </param>
        /// <param name="status"> The observed state of storage containers. </param>
        /// <returns> A new <see cref="Models.HciVmStorageContainerProperties"/> instance for mocking. </returns>
        public static HciVmStorageContainerProperties HciVmStorageContainerProperties(string path = default, HciVmProvisioningState? provisioningState = default, HciVmStorageContainerStatus status = default)
        {
            return new HciVmStorageContainerProperties(path, provisioningState, status, additionalBinaryDataProperties: null);
        }

        /// <summary> The observed state of storage containers. </summary>
        /// <param name="errorCode"> StorageContainer provisioning error code. </param>
        /// <param name="errorMessage"> Descriptive error message. </param>
        /// <param name="availableSizeInMB"> Amount of space available on the disk in MB. </param>
        /// <param name="containerSizeInMB"> Total size of the disk in MB. </param>
        /// <param name="provisioningStatus"> Storage container's provisioning status. </param>
        /// <returns> A new <see cref="Models.HciVmStorageContainerStatus"/> instance for mocking. </returns>
        public static HciVmStorageContainerStatus HciVmStorageContainerStatus(string errorCode = default, string errorMessage = default, long? availableSizeInMB = default, long? containerSizeInMB = default, HciVmStorageContainerProvisioningStatus provisioningStatus = default)
        {
            return new HciVmStorageContainerStatus(
                errorCode,
                errorMessage,
                availableSizeInMB,
                containerSizeInMB,
                provisioningStatus,
                additionalBinaryDataProperties: null);
        }

        /// <summary> Storage container provisioning status. </summary>
        /// <param name="operationId"> The ID of the operation performed on the storage container. </param>
        /// <param name="status"> The status of the operation performed on the storage container [Succeeded, Failed, InProgress]. </param>
        /// <returns> A new <see cref="Models.HciVmStorageContainerProvisioningStatus"/> instance for mocking. </returns>
        public static HciVmStorageContainerProvisioningStatus HciVmStorageContainerProvisioningStatus(string operationId = default, HciVmOperationStatus? status = default)
        {
            return new HciVmStorageContainerProvisioningStatus(operationId, status, additionalBinaryDataProperties: null);
        }

        /// <summary> The type used for updating tags in StorageContainer resources. </summary>
        /// <param name="tags"> Resource tags. </param>
        /// <returns> A new <see cref="Models.HciVmStorageContainerPatch"/> instance for mocking. </returns>
        public static HciVmStorageContainerPatch HciVmStorageContainerPatch(IDictionary<string, string> tags = default)
        {
            tags ??= new ChangeTrackingDictionary<string, string>();

            return new HciVmStorageContainerPatch(tags, additionalBinaryDataProperties: null);
        }

        /// <summary> The virtual hard disk resource definition. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="resourceType"> The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts". </param>
        /// <param name="systemData"> Azure Resource Manager metadata containing createdBy and modifiedBy information. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="location"> The geo-location where the resource lives. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="extendedLocation"> The extendedLocation of the resource. </param>
        /// <returns> A new <see cref="Vm.HciVmVirtualHardDiskData"/> instance for mocking. </returns>
        public static HciVmVirtualHardDiskData HciVmVirtualHardDiskData(ResourceIdentifier id = default, string name = default, ResourceType resourceType = default, SystemData systemData = default, IDictionary<string, string> tags = default, AzureLocation location = default, HciVmVirtualHardDiskProperties properties = default, HciVmExtendedLocation extendedLocation = default)
        {
            tags ??= new ChangeTrackingDictionary<string, string>();

            return new HciVmVirtualHardDiskData(
                id,
                name,
                resourceType,
                systemData,
                additionalBinaryDataProperties: null,
                tags,
                location,
                properties,
                extendedLocation);
        }

        /// <summary> Properties under the virtual hard disk resource. </summary>
        /// <param name="blockSizeInBytes"> Block size in bytes. </param>
        /// <param name="diskSizeInGB"> Size of the disk in GB. </param>
        /// <param name="dynamic"> Boolean for enabling dynamic sizing on the virtual hard disk. </param>
        /// <param name="logicalSectorInBytes"> Logical sector in bytes. </param>
        /// <param name="physicalSectorInBytes"> Physical sector in bytes. </param>
        /// <param name="downloadUri"> URL for downloading or accessing the virtual hard disk. This URL points to a secure link from where the VHD can be downloaded or accessed directly. </param>
        /// <param name="hyperVGeneration"> The hypervisor generation of the Virtual Machine [V1, V2]. </param>
        /// <param name="diskFileFormat"> The format of the actual VHD file [vhd, vhdx]. </param>
        /// <param name="isCreatingFromLocal"> Boolean indicating whether it is an existing local hard disk or if one should be created. </param>
        /// <param name="provisioningState"> Provisioning state of the virtual hard disk. </param>
        /// <param name="containerId"> Storage ContainerID of the storage container to be used for VHD. </param>
        /// <param name="status"> The observed state of virtual hard disks. </param>
        /// <param name="maxShares"> The maximum number of VMs that can attach to the disk at the same time. Value greater than one indicates a disk that can be mounted on multiple VMs at the same time. </param>
        /// <returns> A new <see cref="Models.HciVmVirtualHardDiskProperties"/> instance for mocking. </returns>
        public static HciVmVirtualHardDiskProperties HciVmVirtualHardDiskProperties(int? blockSizeInBytes = default, long? diskSizeInGB = default, bool? dynamic = default, int? logicalSectorInBytes = default, int? physicalSectorInBytes = default, Uri downloadUri = default, HciVmHyperVGeneration? hyperVGeneration = default, HciVmDiskFileFormat? diskFileFormat = default, bool? isCreatingFromLocal = default, HciVmProvisioningState? provisioningState = default, ResourceIdentifier containerId = default, HciVmVirtualHardDiskStatus status = default, long? maxShares = default)
        {
            return new HciVmVirtualHardDiskProperties(
                blockSizeInBytes,
                diskSizeInGB,
                dynamic,
                logicalSectorInBytes,
                physicalSectorInBytes,
                downloadUri,
                hyperVGeneration,
                diskFileFormat,
                isCreatingFromLocal,
                provisioningState,
                containerId,
                status,
                maxShares,
                additionalBinaryDataProperties: null);
        }

        /// <summary> The observed state of virtual hard disks. </summary>
        /// <param name="errorCode"> VirtualHardDisk provisioning error code. </param>
        /// <param name="errorMessage"> Descriptive error message. </param>
        /// <param name="provisioningStatus"> Provisioning status of the vhd. </param>
        /// <param name="downloadStatus"> The download status of the virtual hard disk. </param>
        /// <param name="uploadStatus"> The upload status of the virtual hard disk. </param>
        /// <param name="managedBy"> ARM IDs of the VMs that are consuming the VHD. </param>
        /// <param name="uniqueId"> Unique Guid identifying the resource. </param>
        /// <returns> A new <see cref="Models.HciVmVirtualHardDiskStatus"/> instance for mocking. </returns>
        public static HciVmVirtualHardDiskStatus HciVmVirtualHardDiskStatus(string errorCode = default, string errorMessage = default, HciVmVirtualHardDiskProvisioningStatus provisioningStatus = default, HciVmVirtualHardDiskDownloadStatus downloadStatus = default, HciVmVirtualHardDiskUploadStatus uploadStatus = default, IEnumerable<string> managedBy = default, string uniqueId = default)
        {
            managedBy ??= new ChangeTrackingList<string>();

            return new HciVmVirtualHardDiskStatus(
                errorCode,
                errorMessage,
                provisioningStatus,
                downloadStatus,
                uploadStatus,
                managedBy.ToList(),
                uniqueId,
                additionalBinaryDataProperties: null);
        }

        /// <summary> VHD Status provisioning status. </summary>
        /// <param name="operationId"> The ID of the operation performed on the virtual hard disk. </param>
        /// <param name="status"> The status of the operation performed on the virtual hard disk [Succeeded, Failed, InProgress]. </param>
        /// <returns> A new <see cref="Models.HciVmVirtualHardDiskProvisioningStatus"/> instance for mocking. </returns>
        public static HciVmVirtualHardDiskProvisioningStatus HciVmVirtualHardDiskProvisioningStatus(string operationId = default, HciVmOperationStatus? status = default)
        {
            return new HciVmVirtualHardDiskProvisioningStatus(operationId, status, additionalBinaryDataProperties: null);
        }

        /// <summary> The download status of the virtual hard disk. </summary>
        /// <param name="downloadedSizeInMB"> The downloaded sized of the virtual hard disk in MB. </param>
        /// <param name="status"> The status of Uploading virtual hard disk [Succeeded, Failed, InProgress]. </param>
        /// <param name="progressPercentage"> The progress of the operation in percentage. </param>
        /// <returns> A new <see cref="Models.HciVmVirtualHardDiskDownloadStatus"/> instance for mocking. </returns>
        public static HciVmVirtualHardDiskDownloadStatus HciVmVirtualHardDiskDownloadStatus(long? downloadedSizeInMB = default, HciVmOperationStatus? status = default, long? progressPercentage = default)
        {
            return new HciVmVirtualHardDiskDownloadStatus(downloadedSizeInMB, status, progressPercentage, additionalBinaryDataProperties: null);
        }

        /// <summary> The upload status of the virtual hard disk. </summary>
        /// <param name="uploadedSizeInMB"> The uploaded sized of the virtual hard disk in MB. </param>
        /// <param name="status"> The status of Uploading virtual hard disk [Succeeded, Failed, InProgress]. </param>
        /// <param name="progressPercentage"> The progress of the operation in percentage. </param>
        /// <param name="errorCode"> VirtualHardDisk upload error code. </param>
        /// <param name="errorMessage"> Descriptive upload error message. </param>
        /// <returns> A new <see cref="Models.HciVmVirtualHardDiskUploadStatus"/> instance for mocking. </returns>
        public static HciVmVirtualHardDiskUploadStatus HciVmVirtualHardDiskUploadStatus(long? uploadedSizeInMB = default, HciVmOperationStatus? status = default, long? progressPercentage = default, string errorCode = default, string errorMessage = default)
        {
            return new HciVmVirtualHardDiskUploadStatus(
                uploadedSizeInMB,
                status,
                progressPercentage,
                errorCode,
                errorMessage,
                additionalBinaryDataProperties: null);
        }

        /// <param name="tags"> Resource tags. </param>
        /// <param name="diskSizeGB"> Size of the disk in GB. </param>
        /// <returns> A new <see cref="Models.HciVmVirtualHardDiskPatch"/> instance for mocking. </returns>
        public static HciVmVirtualHardDiskPatch HciVmVirtualHardDiskPatch(IDictionary<string, string> tags = default, long? diskSizeGB = default)
        {
            tags ??= new ChangeTrackingDictionary<string, string>();

            return new HciVmVirtualHardDiskPatch(tags, diskSizeGB is null ? default : new HciVmVirtualHardDiskPatchProperties(diskSizeGB, new Dictionary<string, BinaryData>()), additionalBinaryDataProperties: null);
        }

        /// <summary> Request for uploading virtual hard disk. </summary>
        /// <param name="managedDiskUploadUri"> The Azure managed disk SAS URL to upload the virtual hard disk to. </param>
        /// <returns> A new <see cref="Models.HciVmVirtualHardDiskUploadContent"/> instance for mocking. </returns>
        public static HciVmVirtualHardDiskUploadContent HciVmVirtualHardDiskUploadContent(Uri managedDiskUploadUri = default)
        {
            return new HciVmVirtualHardDiskUploadContent(managedDiskUploadUri, additionalBinaryDataProperties: null);
        }

        /// <summary> The virtual machine instance resource definition. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="resourceType"> The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts". </param>
        /// <param name="systemData"> Azure Resource Manager metadata containing createdBy and modifiedBy information. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="extendedLocation"> The extendedLocation of the resource. </param>
        /// <param name="identity"> The managed service identities assigned to this resource. </param>
        /// <returns> A new <see cref="Vm.HciVmInstanceData"/> instance for mocking. </returns>
        public static HciVmInstanceData HciVmInstanceData(ResourceIdentifier id = default, string name = default, ResourceType resourceType = default, SystemData systemData = default, HciVmInstanceProperties properties = default, HciVmExtendedLocation extendedLocation = default, ManagedServiceIdentity identity = default)
        {
            return new HciVmInstanceData(
                id,
                name,
                resourceType,
                systemData,
                additionalBinaryDataProperties: null,
                properties,
                extendedLocation,
                identity);
        }

        /// <param name="hardwareProfile"> HardwareProfile - Specifies the hardware settings for the virtual machine instance. </param>
        /// <param name="placementProfile"> PlacementProfile - Specifies the placement related settings for the virtual machine. </param>
        /// <param name="networkInterfaces"> NetworkInterfaces - list of network interfaces to be attached to the virtual machine instance. </param>
        /// <param name="osProfile"> OsProfile - describes the configuration of the operating system and sets login data. </param>
        /// <param name="securityProfile"> SecurityProfile - Specifies the security settings for the virtual machine instance. </param>
        /// <param name="storageProfile"> StorageProfile - contains information about the disks and storage information for the virtual machine instance. </param>
        /// <param name="httpProxyConfig"> HTTP Proxy configuration for the VM. </param>
        /// <param name="isCreatingFromLocal"> Boolean indicating whether this is an existing local virtual machine or if one should be created. </param>
        /// <param name="provisioningState"> Provisioning state of the virtual machine instance. </param>
        /// <param name="instanceViewVmAgent"> The VM Config Agent running on the virtual machine. </param>
        /// <param name="status"> The observed state of virtual machine instances. </param>
        /// <param name="guestAgentInstallStatus"> Guest agent install status. </param>
        /// <param name="vmId"> Unique identifier for the vm resource. </param>
        /// <param name="resourceUid"> Unique identifier defined by ARC to identify the guest of the VM. </param>
        /// <param name="hyperVVmId"> Unique identifier for the Hyper-V VM resource. </param>
        /// <param name="hostNodeName"> Name of the host node that the VM is on. </param>
        /// <param name="hostNodeIPAddress"> Name of the host node that the VM is on. </param>
        /// <returns> A new <see cref="Models.HciVmInstanceProperties"/> instance for mocking. </returns>
        public static HciVmInstanceProperties HciVmInstanceProperties(HciVmInstanceHardwareProfile hardwareProfile = default, HciVmInstancePlacementProfile placementProfile = default, IList<NetworkInterfaceArmReference> networkInterfaces = default, HciVmInstanceOSProfile osProfile = default, HciVmInstanceSecurityProfile securityProfile = default, HciVmInstanceStorageProfile storageProfile = default, HciVmHttpProxyConfiguration httpProxyConfig = default, bool? isCreatingFromLocal = default, HciVmProvisioningState? provisioningState = default, HciVmConfigAgentInstanceView instanceViewVmAgent = default, HciVmInstanceStatus status = default, GuestAgentInstallStatus guestAgentInstallStatus = default, string vmId = default, string resourceUid = default, string hyperVVmId = default, string hostNodeName = default, string hostNodeIPAddress = default)
        {
            return new HciVmInstanceProperties(
                hardwareProfile,
                placementProfile,
                networkInterfaces is null ? default : new VirtualMachineInstancePropertiesNetworkProfile(networkInterfaces, new Dictionary<string, BinaryData>()),
                osProfile,
                securityProfile,
                storageProfile,
                httpProxyConfig,
                isCreatingFromLocal,
                provisioningState,
                instanceViewVmAgent is null ? default : new VirtualMachineInstanceView(instanceViewVmAgent, new Dictionary<string, BinaryData>()),
                status,
                guestAgentInstallStatus,
                vmId,
                resourceUid,
                hyperVVmId,
                hostNodeName,
                hostNodeIPAddress,
                additionalBinaryDataProperties: null);
        }

        /// <summary> HardwareProfile - Specifies the hardware settings for the virtual machine instance. </summary>
        /// <param name="vmSize"> Enum of VM Sizes. </param>
        /// <param name="processors"> number of processors for the virtual machine instance. </param>
        /// <param name="memoryInMB"> RAM in MB for the virtual machine instance. </param>
        /// <param name="dynamicMemoryConfig"> Dynamic memory config. </param>
        /// <param name="virtualMachineGPUs"> virtualMachineGPUs - list of gpus to be attached to the virtual machine instance. </param>
        /// <returns> A new <see cref="Models.HciVmInstanceHardwareProfile"/> instance for mocking. </returns>
        public static HciVmInstanceHardwareProfile HciVmInstanceHardwareProfile(HciVmSize? vmSize = default, int? processors = default, long? memoryInMB = default, HciVmInstanceHardwareProfileDynamicMemoryConfiguration dynamicMemoryConfig = default, IEnumerable<HciVmInstanceHardwareProfileGpuConfiguration> virtualMachineGPUs = default)
        {
            virtualMachineGPUs ??= new ChangeTrackingList<HciVmInstanceHardwareProfileGpuConfiguration>();

            return new HciVmInstanceHardwareProfile(
                vmSize,
                processors,
                memoryInMB,
                dynamicMemoryConfig,
                virtualMachineGPUs.ToList(),
                additionalBinaryDataProperties: null);
        }

        /// <param name="disablePasswordAuthentication"> DisablePasswordAuthentication - whether password authentication should be disabled. </param>
        /// <param name="sshPublicKeys"> The list of SSH public keys used to authenticate with linux based VMs. </param>
        /// <param name="provisionVMAgent"> Used to indicate whether Arc for Servers agent onboarding should be triggered during the virtual machine instance creation process. </param>
        /// <param name="provisionVMConfigAgent"> Used to indicate whether the VM Config Agent should be installed during the virtual machine creation process. </param>
        /// <returns> A new <see cref="Models.HciVmInstanceOSProfileLinuxConfiguration"/> instance for mocking. </returns>
        public static HciVmInstanceOSProfileLinuxConfiguration HciVmInstanceOSProfileLinuxConfiguration(bool? disablePasswordAuthentication = default, IList<HciVmOSProfileSshPublicKey> sshPublicKeys = default, bool? provisionVMAgent = default, bool? provisionVMConfigAgent = default)
        {
            return new HciVmInstanceOSProfileLinuxConfiguration(disablePasswordAuthentication, sshPublicKeys is null ? default : new HciVmOSProfileSshConfiguration(sshPublicKeys, new Dictionary<string, BinaryData>()), provisionVMAgent, provisionVMConfigAgent, additionalBinaryDataProperties: null);
        }

        /// <param name="enableAutomaticUpdates"> Whether to EnableAutomaticUpdates on the machine. </param>
        /// <param name="sshPublicKeys"> The list of SSH public keys used to authenticate with linux based VMs. </param>
        /// <param name="timeZone"> TimeZone for the virtual machine instance. </param>
        /// <param name="provisionVMAgent"> Used to indicate whether Arc for Servers agent onboarding should be triggered during the virtual machine instance creation process. </param>
        /// <param name="provisionVMConfigAgent"> Used to indicate whether the VM Config Agent should be installed during the virtual machine creation process. </param>
        /// <returns> A new <see cref="Models.HciVmInstanceOSProfileWindowsConfiguration"/> instance for mocking. </returns>
        public static HciVmInstanceOSProfileWindowsConfiguration HciVmInstanceOSProfileWindowsConfiguration(bool? enableAutomaticUpdates = default, IList<HciVmOSProfileSshPublicKey> sshPublicKeys = default, string timeZone = default, bool? provisionVMAgent = default, bool? provisionVMConfigAgent = default)
        {
            return new HciVmInstanceOSProfileWindowsConfiguration(
                enableAutomaticUpdates,
                sshPublicKeys is null ? default : new HciVmOSProfileSshConfiguration(sshPublicKeys, new Dictionary<string, BinaryData>()),
                timeZone,
                provisionVMAgent,
                provisionVMConfigAgent,
                additionalBinaryDataProperties: null);
        }

        /// <param name="dataDisks"> adds data disks to the virtual machine instance. </param>
        /// <param name="imageReferenceId"> The ARM ID for an image resource used by the virtual machine instance. </param>
        /// <param name="osDisk"> VHD to attach as OS disk. </param>
        /// <param name="vmConfigStoragePathId"> Id of the storage container that hosts the VM configuration file. </param>
        /// <returns> A new <see cref="Models.HciVmInstanceStorageProfile"/> instance for mocking. </returns>
        public static HciVmInstanceStorageProfile HciVmInstanceStorageProfile(IEnumerable<VirtualHardDiskArmReference> dataDisks = default, ResourceIdentifier imageReferenceId = default, HciVmInstanceStorageProfileOSDisk osDisk = default, ResourceIdentifier vmConfigStoragePathId = default)
        {
            dataDisks ??= new ChangeTrackingList<VirtualHardDiskArmReference>();

            return new HciVmInstanceStorageProfile(dataDisks.ToList(), imageReferenceId is null ? default : new ImageArmReference(imageReferenceId, new Dictionary<string, BinaryData>()), osDisk, vmConfigStoragePathId, additionalBinaryDataProperties: null);
        }

        /// <summary> HTTP Proxy configuration for the VM. </summary>
        /// <param name="httpProxy"> The HTTP proxy server endpoint to use. </param>
        /// <param name="httpsProxy"> The HTTPS proxy server endpoint to use. </param>
        /// <param name="noProxy"> The endpoints that should not go through proxy. </param>
        /// <param name="trustedCa"> Alternative CA cert to use for connecting to proxy servers. </param>
        /// <returns> A new <see cref="Models.HciVmHttpProxyConfiguration"/> instance for mocking. </returns>
        public static HciVmHttpProxyConfiguration HciVmHttpProxyConfiguration(string httpProxy = default, string httpsProxy = default, IEnumerable<string> noProxy = default, string trustedCa = default)
        {
            noProxy ??= new ChangeTrackingList<string>();

            return new HciVmHttpProxyConfiguration(httpProxy, httpsProxy, noProxy.ToList(), trustedCa, additionalBinaryDataProperties: null);
        }

        /// <summary> The instance view of the VM Config Agent running on the virtual machine. </summary>
        /// <param name="vmConfigAgentVersion"> The VM Config Agent full version. </param>
        /// <param name="statuses"> The resource status information. </param>
        /// <returns> A new <see cref="Models.HciVmConfigAgentInstanceView"/> instance for mocking. </returns>
        public static HciVmConfigAgentInstanceView HciVmConfigAgentInstanceView(string vmConfigAgentVersion = default, IEnumerable<HciVmInstanceViewStatus> statuses = default)
        {
            statuses ??= new ChangeTrackingList<HciVmInstanceViewStatus>();

            return new HciVmConfigAgentInstanceView(vmConfigAgentVersion, statuses.ToList(), additionalBinaryDataProperties: null);
        }

        /// <summary> Instance view status. </summary>
        /// <param name="code"> The status code. </param>
        /// <param name="level"> The level code. </param>
        /// <param name="displayStatus"> The short localizable label for the status. </param>
        /// <param name="message"> The detailed status message, including for alerts and error messages. </param>
        /// <param name="time"> The time of the status. </param>
        /// <returns> A new <see cref="Models.HciVmInstanceViewStatus"/> instance for mocking. </returns>
        public static HciVmInstanceViewStatus HciVmInstanceViewStatus(string code = default, HciVmStatusLevelType? level = default, string displayStatus = default, string message = default, DateTimeOffset? time = default)
        {
            return new HciVmInstanceViewStatus(
                code,
                level,
                displayStatus,
                message,
                time,
                additionalBinaryDataProperties: null);
        }

        /// <summary> The observed state of virtual machine instances. </summary>
        /// <param name="errorCode"> VirtualMachine provisioning error code. </param>
        /// <param name="errorMessage"> Descriptive error message. </param>
        /// <param name="powerState"> The power state of the virtual machine instance. </param>
        /// <param name="provisioningStatus"> Provisioning status of the virtual machine instance. </param>
        /// <returns> A new <see cref="Models.HciVmInstanceStatus"/> instance for mocking. </returns>
        public static HciVmInstanceStatus HciVmInstanceStatus(string errorCode = default, string errorMessage = default, HciVmPowerState? powerState = default, HciVmInstanceProvisioningStatus provisioningStatus = default)
        {
            return new HciVmInstanceStatus(errorCode, errorMessage, powerState, provisioningStatus, additionalBinaryDataProperties: null);
        }

        /// <summary> Virtual machine instance provisioning status. </summary>
        /// <param name="operationId"> The ID of the operation performed on the virtual machine instance. </param>
        /// <param name="status"> The status of the operation performed on the virtual machine instance [Succeeded, Failed, InProgress]. </param>
        /// <returns> A new <see cref="Models.HciVmInstanceProvisioningStatus"/> instance for mocking. </returns>
        public static HciVmInstanceProvisioningStatus HciVmInstanceProvisioningStatus(string operationId = default, HciVmOperationStatus? status = default)
        {
            return new HciVmInstanceProvisioningStatus(operationId, status, additionalBinaryDataProperties: null);
        }

        /// <summary> Defines the status of a guest agent installation. </summary>
        /// <param name="vmUuid"> Specifies the VM's unique SMBIOS ID. </param>
        /// <param name="status"> The installation status of the hybrid machine agent installation. </param>
        /// <param name="lastStatusChangedOn"> The time of the last status change. </param>
        /// <param name="agentVersion"> The hybrid machine agent full version. </param>
        /// <param name="errorDetails"> Details about the error state. </param>
        /// <returns> A new <see cref="Models.GuestAgentInstallStatus"/> instance for mocking. </returns>
        public static GuestAgentInstallStatus GuestAgentInstallStatus(string vmUuid = default, HybridMachineAgentInstallationStatusType? status = default, DateTimeOffset? lastStatusChangedOn = default, string agentVersion = default, IEnumerable<ErrorDetail> errorDetails = default)
        {
            errorDetails ??= new ChangeTrackingList<ErrorDetail>();

            return new GuestAgentInstallStatus(
                vmUuid,
                status,
                lastStatusChangedOn,
                agentVersion,
                errorDetails.ToList(),
                additionalBinaryDataProperties: null);
        }

        /// <param name="hardwareProfile"> HardwareProfile - Specifies the hardware settings for the virtual machine instance. </param>
        /// <param name="storageDataDisks"> adds data disks to the virtual machine instance for the update call. </param>
        /// <param name="networkInterfaces"> NetworkInterfaces - list of network interfaces to be attached to the virtual machine instance. </param>
        /// <param name="osProfile"> OsProfile - describes the update configuration of the operating system. </param>
        /// <returns> A new <see cref="Models.HciVmInstancePatchProperties"/> instance for mocking. </returns>
        public static HciVmInstancePatchProperties HciVmInstancePatchProperties(HciVmInstanceHardwareProfileUpdate hardwareProfile = default, IList<VirtualHardDiskArmReference> storageDataDisks = default, IList<NetworkInterfaceArmReference> networkInterfaces = default, HciVmOSProfile osProfile = default)
        {
            return new HciVmInstancePatchProperties(hardwareProfile, storageDataDisks is null ? default : new StorageProfileUpdate(storageDataDisks, new Dictionary<string, BinaryData>()), networkInterfaces is null ? default : new NetworkProfileUpdate(networkInterfaces, new Dictionary<string, BinaryData>()), osProfile, additionalBinaryDataProperties: null);
        }

        /// <summary> HardwareProfile - Specifies the hardware settings for the virtual machine instance. </summary>
        /// <param name="vmSize"> VM Size Enum. </param>
        /// <param name="processors"> number of processors for the virtual machine instance. </param>
        /// <param name="memoryInMB"> RAM in MB for the virtual machine instance. </param>
        /// <param name="virtualMachineGPUs"> virtualMachineGPUs - updated list of GPUs on the virtual machine instance. </param>
        /// <returns> A new <see cref="Models.HciVmInstanceHardwareProfileUpdate"/> instance for mocking. </returns>
        public static HciVmInstanceHardwareProfileUpdate HciVmInstanceHardwareProfileUpdate(HciVmSize? vmSize = default, int? processors = default, long? memoryInMB = default, IEnumerable<HciVmInstanceHardwareProfileGpuConfiguration> virtualMachineGPUs = default)
        {
            virtualMachineGPUs ??= new ChangeTrackingList<HciVmInstanceHardwareProfileGpuConfiguration>();

            return new HciVmInstanceHardwareProfileUpdate(vmSize, processors, memoryInMB, virtualMachineGPUs.ToList(), additionalBinaryDataProperties: null);
        }

        /// <summary> Identity for the resource. </summary>
        /// <param name="principalId"> The principal ID of resource identity. The value must be an UUID. </param>
        /// <param name="tenantId"> The tenant ID of resource. The value must be an UUID. </param>
        /// <param name="type"> The identity type. </param>
        /// <returns> A new <see cref="Models.HciVmIdentity"/> instance for mocking. </returns>
        public static HciVmIdentity HciVmIdentity(string principalId = default, string tenantId = default, string @type = default)
        {
            return new HciVmIdentity(principalId, tenantId, @type, additionalBinaryDataProperties: null);
        }

        /// <summary> Defines the HybridIdentityMetadata. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="resourceType"> The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts". </param>
        /// <param name="systemData"> Azure Resource Manager metadata containing createdBy and modifiedBy information. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="Vm.HciVmHybridIdentityMetadataData"/> instance for mocking. </returns>
        public static HciVmHybridIdentityMetadataData HciVmHybridIdentityMetadataData(ResourceIdentifier id = default, string name = default, ResourceType resourceType = default, SystemData systemData = default, HciVmHybridIdentityMetadataProperties properties = default)
        {
            return new HciVmHybridIdentityMetadataData(
                id,
                name,
                resourceType,
                systemData,
                additionalBinaryDataProperties: null,
                properties);
        }

        /// <summary> Defines the resource properties. </summary>
        /// <param name="resourceUid"> The unique identifier for the resource. </param>
        /// <param name="publicKey"> The Public Key. </param>
        /// <param name="identity"> Identity for the resource. </param>
        /// <param name="provisioningState"> Provisioning state of the virtual machine instance. </param>
        /// <returns> A new <see cref="Models.HciVmHybridIdentityMetadataProperties"/> instance for mocking. </returns>
        public static HciVmHybridIdentityMetadataProperties HciVmHybridIdentityMetadataProperties(string resourceUid = default, string publicKey = default, HciVmIdentity identity = default, HciVmProvisioningState? provisioningState = default)
        {
            return new HciVmHybridIdentityMetadataProperties(resourceUid, publicKey, identity, provisioningState, additionalBinaryDataProperties: null);
        }

        /// <summary> The attestation status of the virtual machine. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="resourceType"> The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts". </param>
        /// <param name="systemData"> Azure Resource Manager metadata containing createdBy and modifiedBy information. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="Vm.HciVmAttestationStatusData"/> instance for mocking. </returns>
        public static HciVmAttestationStatusData HciVmAttestationStatusData(ResourceIdentifier id = default, string name = default, ResourceType resourceType = default, SystemData systemData = default, HciVmAttestationStatusProperties properties = default)
        {
            return new HciVmAttestationStatusData(
                id,
                name,
                resourceType,
                systemData,
                additionalBinaryDataProperties: null,
                properties);
        }

        /// <summary> Defines the attestation status properties. </summary>
        /// <param name="attestSecureBootEnabled"> The status of whether secure boot is enabled. </param>
        /// <param name="attestationCertValidated"> The status of whether attestation certificate is validated. </param>
        /// <param name="bootIntegrityValidated"> The status of whether the list of boot integrity properties is validated. </param>
        /// <param name="linuxKernelVersion"> kernel version string for Linux VM. </param>
        /// <param name="healthStatus"> The health status of attestation validation and parsing. </param>
        /// <param name="timestamp"> The time stamp of the last time attestation token is validated by relying party service. </param>
        /// <param name="errorMessage"> The error message of attestation validation and parsing. </param>
        /// <param name="provisioningState"> Provisioning state of the virtual machine instance. </param>
        /// <param name="attestHardwarePlatform"> The hardware platform information from attestation token. This only applies to Confidential VM. </param>
        /// <param name="attestDiskSecurityEncryptionType"> The managed disk security encryption type from attestation token. This only applies to Confidential VM. </param>
        /// <returns> A new <see cref="Models.HciVmAttestationStatusProperties"/> instance for mocking. </returns>
        public static HciVmAttestationStatusProperties HciVmAttestationStatusProperties(AttestSecureBootStatus? attestSecureBootEnabled = default, AttestCertValidationStatus? attestationCertValidated = default, AttestBootIntegrityStatus? bootIntegrityValidated = default, string linuxKernelVersion = default, AttestHealthStatus? healthStatus = default, string timestamp = default, string errorMessage = default, HciVmProvisioningState? provisioningState = default, AttestHardwarePlatformType? attestHardwarePlatform = default, AttestDiskSecurityEncryptionType? attestDiskSecurityEncryptionType = default)
        {
            return new HciVmAttestationStatusProperties(
                attestSecureBootEnabled,
                attestationCertValidated,
                bootIntegrityValidated,
                linuxKernelVersion,
                healthStatus,
                timestamp,
                errorMessage,
                provisioningState,
                attestHardwarePlatform,
                attestDiskSecurityEncryptionType,
                additionalBinaryDataProperties: null);
        }

        /// <summary> Defines the GuestAgent. </summary>
        /// <param name="id"> Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}. </param>
        /// <param name="name"> The name of the resource. </param>
        /// <param name="resourceType"> The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts". </param>
        /// <param name="systemData"> Azure Resource Manager metadata containing createdBy and modifiedBy information. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="Vm.HciVmGuestAgentData"/> instance for mocking. </returns>
        public static HciVmGuestAgentData HciVmGuestAgentData(ResourceIdentifier id = default, string name = default, ResourceType resourceType = default, SystemData systemData = default, HciVmGuestAgentProperties properties = default)
        {
            return new HciVmGuestAgentData(
                id,
                name,
                resourceType,
                systemData,
                additionalBinaryDataProperties: null,
                properties);
        }

        /// <summary> Defines the resource properties. </summary>
        /// <param name="credentials"> Username / Password Credentials to provision guest agent. </param>
        /// <param name="provisioningAction"> The guest agent provisioning action. </param>
        /// <param name="status"> The guest agent status. </param>
        /// <param name="provisioningState"> Provisioning state of the virtual machine instance. </param>
        /// <returns> A new <see cref="Models.HciVmGuestAgentProperties"/> instance for mocking. </returns>
        public static HciVmGuestAgentProperties HciVmGuestAgentProperties(HciVmGuestCredential credentials = default, GuestAgentProvisioningAction? provisioningAction = default, string status = default, HciVmProvisioningState? provisioningState = default)
        {
            return new HciVmGuestAgentProperties(credentials, provisioningAction, status, provisioningState, additionalBinaryDataProperties: null);
        }
    }
}
