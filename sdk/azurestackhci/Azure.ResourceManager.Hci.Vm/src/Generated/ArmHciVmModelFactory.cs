// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.Hci.Vm.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmHciVmModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Vm.GalleryImageData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="extendedLocation"> The extendedLocation of the resource. </param>
        /// <returns> A new <see cref="Vm.GalleryImageData"/> instance for mocking. </returns>
        public static GalleryImageData GalleryImageData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, GalleryImageProperties properties = null, ExtendedLocation extendedLocation = null)
        {
            tags ??= new Dictionary<string, string>();

            return new GalleryImageData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                extendedLocation,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.GalleryImageProperties"/>. </summary>
        /// <param name="containerId"> Storage ContainerID of the storage container to be used for gallery image. </param>
        /// <param name="imagePath"> location of the image the gallery image should be created from. </param>
        /// <param name="osType"> Operating system type that the gallery image uses [Windows, Linux]. </param>
        /// <param name="cloudInitDataSource"> Datasource for the gallery image when provisioning with cloud-init [NoCloud, Azure]. </param>
        /// <param name="hyperVGeneration"> The hypervisor generation of the Virtual Machine [V1, V2]. </param>
        /// <param name="vmImageRepositoryCredentials"> The credentials used to login to the image repository that has access to the specified image. </param>
        /// <param name="identifier"> This is the gallery image definition identifier. </param>
        /// <param name="version"> Specifies information about the gallery image version that you want to create or update. </param>
        /// <param name="provisioningState"> Provisioning state of the gallery image. </param>
        /// <param name="status"> The observed state of gallery images. </param>
        /// <param name="sourceVirtualMachineId"> Resource ID of the source virtual machine from whose OS disk the gallery image is created. </param>
        /// <returns> A new <see cref="Models.GalleryImageProperties"/> instance for mocking. </returns>
        public static GalleryImageProperties GalleryImageProperties(ResourceIdentifier containerId = null, string imagePath = null, OperatingSystemType osType = default, CloudInitDataSource? cloudInitDataSource = null, HyperVGeneration? hyperVGeneration = null, VmImageRepositoryCredentials vmImageRepositoryCredentials = null, GalleryImageIdentifier identifier = null, GalleryImageVersion version = null, ProvisioningStateEnum? provisioningState = null, GalleryImageStatus status = null, ResourceIdentifier sourceVirtualMachineId = null)
        {
            return new GalleryImageProperties(
                containerId,
                imagePath,
                osType,
                cloudInitDataSource,
                hyperVGeneration,
                vmImageRepositoryCredentials,
                identifier,
                version,
                provisioningState,
                status,
                sourceVirtualMachineId,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.GalleryImageStatus"/>. </summary>
        /// <param name="errorCode"> GalleryImage provisioning error code. </param>
        /// <param name="errorMessage"> Descriptive error message. </param>
        /// <param name="provisioningStatus"> provisioning status of the gallery image. </param>
        /// <param name="downloadSizeInMB"> The download status of the gallery image. </param>
        /// <param name="progressPercentage"> The progress of the operation in percentage. </param>
        /// <returns> A new <see cref="Models.GalleryImageStatus"/> instance for mocking. </returns>
        public static GalleryImageStatus GalleryImageStatus(string errorCode = null, string errorMessage = null, GalleryImageStatusProvisioningStatus provisioningStatus = null, long? downloadSizeInMB = null, long? progressPercentage = null)
        {
            return new GalleryImageStatus(
                errorCode,
                errorMessage,
                provisioningStatus,
                downloadSizeInMB != null ? new GalleryImageStatusDownloadStatus(downloadSizeInMB, serializedAdditionalRawData: null) : null,
                progressPercentage,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.GalleryImageStatusProvisioningStatus"/>. </summary>
        /// <param name="operationId"> The ID of the operation performed on the gallery image. </param>
        /// <param name="status"> The status of the operation performed on the gallery image [Succeeded, Failed, InProgress]. </param>
        /// <returns> A new <see cref="Models.GalleryImageStatusProvisioningStatus"/> instance for mocking. </returns>
        public static GalleryImageStatusProvisioningStatus GalleryImageStatusProvisioningStatus(string operationId = null, Status? status = null)
        {
            return new GalleryImageStatusProvisioningStatus(operationId, status, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Vm.LogicalNetworkData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="extendedLocation"> The extendedLocation of the resource. </param>
        /// <returns> A new <see cref="Vm.LogicalNetworkData"/> instance for mocking. </returns>
        public static LogicalNetworkData LogicalNetworkData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, LogicalNetworkProperties properties = null, ExtendedLocation extendedLocation = null)
        {
            tags ??= new Dictionary<string, string>();

            return new LogicalNetworkData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                extendedLocation,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.LogicalNetworkProperties"/>. </summary>
        /// <param name="dhcpOptionsDnsServers"> DhcpOptions contains an array of DNS servers available to VMs deployed in the logical network. Standard DHCP option for a subnet overrides logical network DHCP options. </param>
        /// <param name="subnets"> Subnet - list of subnets under the logical network. </param>
        /// <param name="provisioningState"> Provisioning state of the logical network. </param>
        /// <param name="vmSwitchName"> name of the network switch to be used for VMs. </param>
        /// <param name="status"> The observed state of logical networks. </param>
        /// <param name="networkType"> Type of the Logical Network. </param>
        /// <returns> A new <see cref="Models.LogicalNetworkProperties"/> instance for mocking. </returns>
        public static LogicalNetworkProperties LogicalNetworkProperties(IEnumerable<string> dhcpOptionsDnsServers = null, IEnumerable<Subnet> subnets = null, ProvisioningStateEnum? provisioningState = null, string vmSwitchName = null, LogicalNetworkStatus status = null, LogicalNetworkTypeEnum? networkType = null)
        {
            dhcpOptionsDnsServers ??= new List<string>();
            subnets ??= new List<Subnet>();

            return new LogicalNetworkProperties(
                dhcpOptionsDnsServers != null ? new LogicalNetworkPropertiesDhcpOptions(dhcpOptionsDnsServers?.ToList(), serializedAdditionalRawData: null) : null,
                subnets?.ToList(),
                provisioningState,
                vmSwitchName,
                status,
                networkType,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.RouteTable"/>. </summary>
        /// <param name="etag"> A unique read-only string that changes whenever the resource is updated. </param>
        /// <param name="name"> Resource name. </param>
        /// <param name="type"> Resource type. </param>
        /// <param name="routes"> Collection of routes contained within a route table. </param>
        /// <returns> A new <see cref="Models.RouteTable"/> instance for mocking. </returns>
        public static RouteTable RouteTable(string etag = null, string name = null, string type = null, IEnumerable<Route> routes = null)
        {
            routes ??= new List<Route>();

            return new RouteTable(etag, name, type, routes?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.IPPoolInfo"/>. </summary>
        /// <param name="used"> Number of IP addresses allocated from the IP Pool. </param>
        /// <param name="available"> Number of IP addresses available in the IP Pool. </param>
        /// <returns> A new <see cref="Models.IPPoolInfo"/> instance for mocking. </returns>
        public static IPPoolInfo IPPoolInfo(string used = null, string available = null)
        {
            return new IPPoolInfo(used, available, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.LogicalNetworkStatus"/>. </summary>
        /// <param name="errorCode"> LogicalNetwork provisioning error code. </param>
        /// <param name="errorMessage"> Descriptive error message. </param>
        /// <param name="provisioningStatus"> Logical network provisioning status. </param>
        /// <returns> A new <see cref="Models.LogicalNetworkStatus"/> instance for mocking. </returns>
        public static LogicalNetworkStatus LogicalNetworkStatus(string errorCode = null, string errorMessage = null, LogicalNetworkStatusProvisioningStatus provisioningStatus = null)
        {
            return new LogicalNetworkStatus(errorCode, errorMessage, provisioningStatus, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.LogicalNetworkStatusProvisioningStatus"/>. </summary>
        /// <param name="operationId"> The ID of the operation performed on the logical network. </param>
        /// <param name="status"> The status of the operation performed on the logical network [Succeeded, Failed, InProgress]. </param>
        /// <returns> A new <see cref="Models.LogicalNetworkStatusProvisioningStatus"/> instance for mocking. </returns>
        public static LogicalNetworkStatusProvisioningStatus LogicalNetworkStatusProvisioningStatus(string operationId = null, Status? status = null)
        {
            return new LogicalNetworkStatusProvisioningStatus(operationId, status, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Vm.MarketplaceGalleryImageData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="extendedLocation"> The extendedLocation of the resource. </param>
        /// <returns> A new <see cref="Vm.MarketplaceGalleryImageData"/> instance for mocking. </returns>
        public static MarketplaceGalleryImageData MarketplaceGalleryImageData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, MarketplaceGalleryImageProperties properties = null, ExtendedLocation extendedLocation = null)
        {
            tags ??= new Dictionary<string, string>();

            return new MarketplaceGalleryImageData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                extendedLocation,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MarketplaceGalleryImageProperties"/>. </summary>
        /// <param name="containerId"> Storage ContainerID of the storage container to be used for marketplace gallery image. </param>
        /// <param name="osType"> Operating system type that the gallery image uses [Windows, Linux]. </param>
        /// <param name="cloudInitDataSource"> Datasource for the gallery image when provisioning with cloud-init [NoCloud, Azure]. </param>
        /// <param name="hyperVGeneration"> The hypervisor generation of the Virtual Machine [V1, V2]. </param>
        /// <param name="identifier"> This is the gallery image definition identifier. </param>
        /// <param name="version"> Specifies information about the gallery image version that you want to create or update. </param>
        /// <param name="provisioningState"> Provisioning state of the marketplace gallery image. </param>
        /// <param name="status"> The observed state of marketplace gallery images. </param>
        /// <returns> A new <see cref="Models.MarketplaceGalleryImageProperties"/> instance for mocking. </returns>
        public static MarketplaceGalleryImageProperties MarketplaceGalleryImageProperties(ResourceIdentifier containerId = null, OperatingSystemType osType = default, CloudInitDataSource? cloudInitDataSource = null, HyperVGeneration? hyperVGeneration = null, GalleryImageIdentifier identifier = null, GalleryImageVersion version = null, ProvisioningStateEnum? provisioningState = null, MarketplaceGalleryImageStatus status = null)
        {
            return new MarketplaceGalleryImageProperties(
                containerId,
                osType,
                cloudInitDataSource,
                hyperVGeneration,
                identifier,
                version,
                provisioningState,
                status,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MarketplaceGalleryImageStatus"/>. </summary>
        /// <param name="errorCode"> MarketplaceGalleryImage provisioning error code. </param>
        /// <param name="errorMessage"> Descriptive error message. </param>
        /// <param name="provisioningStatus"> Provisioning status of marketplace gallery image. </param>
        /// <param name="downloadSizeInMB"> The download status of the gallery image. </param>
        /// <param name="progressPercentage"> The progress of the operation in percentage. </param>
        /// <returns> A new <see cref="Models.MarketplaceGalleryImageStatus"/> instance for mocking. </returns>
        public static MarketplaceGalleryImageStatus MarketplaceGalleryImageStatus(string errorCode = null, string errorMessage = null, MarketplaceGalleryImageStatusProvisioningStatus provisioningStatus = null, long? downloadSizeInMB = null, long? progressPercentage = null)
        {
            return new MarketplaceGalleryImageStatus(
                errorCode,
                errorMessage,
                provisioningStatus,
                downloadSizeInMB != null ? new MarketplaceGalleryImageStatusDownloadStatus(downloadSizeInMB, serializedAdditionalRawData: null) : null,
                progressPercentage,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MarketplaceGalleryImageStatusProvisioningStatus"/>. </summary>
        /// <param name="operationId"> The ID of the operation performed on the gallery image. </param>
        /// <param name="status"> The status of the operation performed on the gallery image [Succeeded, Failed, InProgress]. </param>
        /// <returns> A new <see cref="Models.MarketplaceGalleryImageStatusProvisioningStatus"/> instance for mocking. </returns>
        public static MarketplaceGalleryImageStatusProvisioningStatus MarketplaceGalleryImageStatusProvisioningStatus(string operationId = null, Status? status = null)
        {
            return new MarketplaceGalleryImageStatusProvisioningStatus(operationId, status, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Vm.NetworkInterfaceData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="extendedLocation"> The extendedLocation of the resource. </param>
        /// <returns> A new <see cref="Vm.NetworkInterfaceData"/> instance for mocking. </returns>
        public static NetworkInterfaceData NetworkInterfaceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, NetworkInterfaceProperties properties = null, ExtendedLocation extendedLocation = null)
        {
            tags ??= new Dictionary<string, string>();

            return new NetworkInterfaceData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                extendedLocation,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NetworkInterfaceProperties"/>. </summary>
        /// <param name="ipConfigurations"> IPConfigurations - A list of IPConfigurations of the network interface. </param>
        /// <param name="macAddress"> MacAddress - The MAC address of the network interface. </param>
        /// <param name="dnsServers"> DNS Settings for the interface. </param>
        /// <param name="createFromLocal"> Boolean indicating whether this is a existing local network interface or if one should be created. </param>
        /// <param name="provisioningState"> Provisioning state of the network interface. </param>
        /// <param name="status"> The observed state of network interfaces. </param>
        /// <param name="networkSecurityGroupId"> NetworkSecurityGroup - Network Security Group attached to the network interface. </param>
        /// <returns> A new <see cref="Models.NetworkInterfaceProperties"/> instance for mocking. </returns>
        public static NetworkInterfaceProperties NetworkInterfaceProperties(IEnumerable<IPConfiguration> ipConfigurations = null, string macAddress = null, IEnumerable<string> dnsServers = null, bool? createFromLocal = null, ProvisioningStateEnum? provisioningState = null, NetworkInterfaceStatus status = null, ResourceIdentifier networkSecurityGroupId = null)
        {
            ipConfigurations ??= new List<IPConfiguration>();
            dnsServers ??= new List<string>();

            return new NetworkInterfaceProperties(
                ipConfigurations?.ToList(),
                macAddress,
                dnsServers != null ? new InterfaceDnsSettings(dnsServers?.ToList(), serializedAdditionalRawData: null) : null,
                createFromLocal,
                provisioningState,
                status,
                networkSecurityGroupId != null ? ResourceManagerModelFactory.WritableSubResource(networkSecurityGroupId) : null,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.IPConfigurationProperties"/>. </summary>
        /// <param name="gateway"> Gateway for network interface. </param>
        /// <param name="prefixLength"> prefixLength for network interface. </param>
        /// <param name="privateIPAddress"> PrivateIPAddress - Private IP address of the IP configuration. </param>
        /// <param name="subnetId"> Subnet - Name of Subnet bound to the IP configuration. </param>
        /// <returns> A new <see cref="Models.IPConfigurationProperties"/> instance for mocking. </returns>
        public static IPConfigurationProperties IPConfigurationProperties(string gateway = null, string prefixLength = null, string privateIPAddress = null, ResourceIdentifier subnetId = null)
        {
            return new IPConfigurationProperties(gateway, prefixLength, privateIPAddress, subnetId != null ? ResourceManagerModelFactory.WritableSubResource(subnetId) : null, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NetworkInterfaceStatus"/>. </summary>
        /// <param name="errorCode"> NetworkInterface provisioning error code. </param>
        /// <param name="errorMessage"> Descriptive error message. </param>
        /// <param name="provisioningStatus"> Network interface provisioning status. </param>
        /// <returns> A new <see cref="Models.NetworkInterfaceStatus"/> instance for mocking. </returns>
        public static NetworkInterfaceStatus NetworkInterfaceStatus(string errorCode = null, string errorMessage = null, NetworkInterfaceStatusProvisioningStatus provisioningStatus = null)
        {
            return new NetworkInterfaceStatus(errorCode, errorMessage, provisioningStatus, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NetworkInterfaceStatusProvisioningStatus"/>. </summary>
        /// <param name="operationId"> The ID of the operation performed on the network interface. </param>
        /// <param name="status"> The status of the operation performed on the network interface [Succeeded, Failed, InProgress]. </param>
        /// <returns> A new <see cref="Models.NetworkInterfaceStatusProvisioningStatus"/> instance for mocking. </returns>
        public static NetworkInterfaceStatusProvisioningStatus NetworkInterfaceStatusProvisioningStatus(string operationId = null, Status? status = null)
        {
            return new NetworkInterfaceStatusProvisioningStatus(operationId, status, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Vm.NetworkSecurityGroupData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="extendedLocation"> The extendedLocation of the resource. </param>
        /// <param name="etag"> If eTag is provided in the response body, it may also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields. </param>
        /// <returns> A new <see cref="Vm.NetworkSecurityGroupData"/> instance for mocking. </returns>
        public static NetworkSecurityGroupData NetworkSecurityGroupData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, NetworkSecurityGroupProperties properties = null, ExtendedLocation extendedLocation = null, string etag = null)
        {
            tags ??= new Dictionary<string, string>();

            return new NetworkSecurityGroupData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                extendedLocation,
                etag,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NetworkSecurityGroupProperties"/>. </summary>
        /// <param name="networkInterfaces"> A collection of references to network interfaces that are currently using this NSG. </param>
        /// <param name="subnets"> A collection of references to logical networks that are currently using this NSG. </param>
        /// <param name="provisioningState"> The provisioning state of the network security group resource. </param>
        /// <param name="status"> The observed state of Network Security Group. </param>
        /// <returns> A new <see cref="Models.NetworkSecurityGroupProperties"/> instance for mocking. </returns>
        public static NetworkSecurityGroupProperties NetworkSecurityGroupProperties(IEnumerable<WritableSubResource> networkInterfaces = null, IEnumerable<WritableSubResource> subnets = null, ProvisioningStateEnum? provisioningState = null, NetworkSecurityGroupStatus status = null)
        {
            networkInterfaces ??= new List<WritableSubResource>();
            subnets ??= new List<WritableSubResource>();

            return new NetworkSecurityGroupProperties(networkInterfaces?.ToList(), subnets?.ToList(), provisioningState, status, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NetworkSecurityGroupStatus"/>. </summary>
        /// <param name="errorCode"> NetworkSecurityGroup provisioning error code. </param>
        /// <param name="errorMessage"> Descriptive error message. </param>
        /// <param name="provisioningStatus"> network security group provisioning status. </param>
        /// <returns> A new <see cref="Models.NetworkSecurityGroupStatus"/> instance for mocking. </returns>
        public static NetworkSecurityGroupStatus NetworkSecurityGroupStatus(string errorCode = null, string errorMessage = null, NetworkSecurityGroupStatusProvisioningStatus provisioningStatus = null)
        {
            return new NetworkSecurityGroupStatus(errorCode, errorMessage, provisioningStatus, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NetworkSecurityGroupStatusProvisioningStatus"/>. </summary>
        /// <param name="operationId"> The ID of the operation performed on the network security group. </param>
        /// <param name="status"> The status of the operation performed on the network security group [Succeeded, Failed, InProgress]. </param>
        /// <returns> A new <see cref="Models.NetworkSecurityGroupStatusProvisioningStatus"/> instance for mocking. </returns>
        public static NetworkSecurityGroupStatusProvisioningStatus NetworkSecurityGroupStatusProvisioningStatus(string operationId = null, Status? status = null)
        {
            return new NetworkSecurityGroupStatusProvisioningStatus(operationId, status, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Vm.SecurityRuleData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="extendedLocation"> The extendedLocation of the resource. </param>
        /// <returns> A new <see cref="Vm.SecurityRuleData"/> instance for mocking. </returns>
        public static SecurityRuleData SecurityRuleData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, SecurityRuleProperties properties = null, ExtendedLocation extendedLocation = null)
        {
            return new SecurityRuleData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                extendedLocation,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.SecurityRuleProperties"/>. </summary>
        /// <param name="description"> A description for this rule. Restricted to 140 chars. </param>
        /// <param name="protocol"> Network protocol this rule applies to. </param>
        /// <param name="sourceAddressPrefixes"> The CIDR or source IP ranges. </param>
        /// <param name="destinationAddressPrefixes"> The destination address prefixes. CIDR or destination IP ranges. </param>
        /// <param name="sourcePortRanges"> The source port ranges. Integer or range between 0 and 65535. Asterisk '*' can also be used to match all ports. </param>
        /// <param name="destinationPortRanges"> The destination port ranges. Integer or range between 0 and 65535. Asterisk '*' can also be used to match all ports. </param>
        /// <param name="access"> The network traffic is allowed or denied. </param>
        /// <param name="priority"> The priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule. </param>
        /// <param name="direction"> The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic. </param>
        /// <param name="provisioningState"> Provisioning state of the SR. </param>
        /// <returns> A new <see cref="Models.SecurityRuleProperties"/> instance for mocking. </returns>
        public static SecurityRuleProperties SecurityRuleProperties(string description = null, SecurityRuleProtocol protocol = default, IEnumerable<string> sourceAddressPrefixes = null, IEnumerable<string> destinationAddressPrefixes = null, IEnumerable<string> sourcePortRanges = null, IEnumerable<string> destinationPortRanges = null, SecurityRuleAccess access = default, int priority = default, SecurityRuleDirection direction = default, ProvisioningStateEnum? provisioningState = null)
        {
            sourceAddressPrefixes ??= new List<string>();
            destinationAddressPrefixes ??= new List<string>();
            sourcePortRanges ??= new List<string>();
            destinationPortRanges ??= new List<string>();

            return new SecurityRuleProperties(
                description,
                protocol,
                sourceAddressPrefixes?.ToList(),
                destinationAddressPrefixes?.ToList(),
                sourcePortRanges?.ToList(),
                destinationPortRanges?.ToList(),
                access,
                priority,
                direction,
                provisioningState,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Vm.StorageContainerData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="extendedLocation"> The extendedLocation of the resource. </param>
        /// <returns> A new <see cref="Vm.StorageContainerData"/> instance for mocking. </returns>
        public static StorageContainerData StorageContainerData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, StorageContainerProperties properties = null, ExtendedLocation extendedLocation = null)
        {
            tags ??= new Dictionary<string, string>();

            return new StorageContainerData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                extendedLocation,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.StorageContainerProperties"/>. </summary>
        /// <param name="path"> Path of the storage container on the disk. </param>
        /// <param name="provisioningState"> Provisioning state of the storage container. </param>
        /// <param name="status"> The observed state of storage containers. </param>
        /// <returns> A new <see cref="Models.StorageContainerProperties"/> instance for mocking. </returns>
        public static StorageContainerProperties StorageContainerProperties(string path = null, ProvisioningStateEnum? provisioningState = null, StorageContainerStatus status = null)
        {
            return new StorageContainerProperties(path, provisioningState, status, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.StorageContainerStatus"/>. </summary>
        /// <param name="errorCode"> StorageContainer provisioning error code. </param>
        /// <param name="errorMessage"> Descriptive error message. </param>
        /// <param name="availableSizeMB"> Amount of space available on the disk in MB. </param>
        /// <param name="containerSizeMB"> Total size of the disk in MB. </param>
        /// <param name="provisioningStatus"> Storage container's provisioning status. </param>
        /// <returns> A new <see cref="Models.StorageContainerStatus"/> instance for mocking. </returns>
        public static StorageContainerStatus StorageContainerStatus(string errorCode = null, string errorMessage = null, long? availableSizeMB = null, long? containerSizeMB = null, StorageContainerStatusProvisioningStatus provisioningStatus = null)
        {
            return new StorageContainerStatus(
                errorCode,
                errorMessage,
                availableSizeMB,
                containerSizeMB,
                provisioningStatus,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.StorageContainerStatusProvisioningStatus"/>. </summary>
        /// <param name="operationId"> The ID of the operation performed on the storage container. </param>
        /// <param name="status"> The status of the operation performed on the storage container [Succeeded, Failed, InProgress]. </param>
        /// <returns> A new <see cref="Models.StorageContainerStatusProvisioningStatus"/> instance for mocking. </returns>
        public static StorageContainerStatusProvisioningStatus StorageContainerStatusProvisioningStatus(string operationId = null, Status? status = null)
        {
            return new StorageContainerStatusProvisioningStatus(operationId, status, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Vm.VirtualHardDiskData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="extendedLocation"> The extendedLocation of the resource. </param>
        /// <returns> A new <see cref="Vm.VirtualHardDiskData"/> instance for mocking. </returns>
        public static VirtualHardDiskData VirtualHardDiskData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, VirtualHardDiskProperties properties = null, ExtendedLocation extendedLocation = null)
        {
            tags ??= new Dictionary<string, string>();

            return new VirtualHardDiskData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                properties,
                extendedLocation,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.VirtualHardDiskProperties"/>. </summary>
        /// <param name="blockSizeBytes"> Block size in bytes. </param>
        /// <param name="diskSizeGB"> Size of the disk in GB. </param>
        /// <param name="dynamic"> Boolean for enabling dynamic sizing on the virtual hard disk. </param>
        /// <param name="logicalSectorBytes"> Logical sector in bytes. </param>
        /// <param name="physicalSectorBytes"> Physical sector in bytes. </param>
        /// <param name="downloadUri"> URL for downloading or accessing the virtual hard disk. This URL points to a secure link from where the VHD can be downloaded or accessed directly. </param>
        /// <param name="hyperVGeneration"> The hypervisor generation of the Virtual Machine [V1, V2]. </param>
        /// <param name="diskFileFormat"> The format of the actual VHD file [vhd, vhdx]. </param>
        /// <param name="createFromLocal"> Boolean indicating whether it is an existing local hard disk or if one should be created. </param>
        /// <param name="provisioningState"> Provisioning state of the virtual hard disk. </param>
        /// <param name="containerId"> Storage ContainerID of the storage container to be used for VHD. </param>
        /// <param name="status"> The observed state of virtual hard disks. </param>
        /// <param name="maxShares"> The maximum number of VMs that can attach to the disk at the same time. Value greater than one indicates a disk that can be mounted on multiple VMs at the same time. </param>
        /// <returns> A new <see cref="Models.VirtualHardDiskProperties"/> instance for mocking. </returns>
        public static VirtualHardDiskProperties VirtualHardDiskProperties(int? blockSizeBytes = null, long? diskSizeGB = null, bool? @dynamic = null, int? logicalSectorBytes = null, int? physicalSectorBytes = null, string downloadUri = null, HyperVGeneration? hyperVGeneration = null, DiskFileFormat? diskFileFormat = null, bool? createFromLocal = null, ProvisioningStateEnum? provisioningState = null, ResourceIdentifier containerId = null, VirtualHardDiskStatus status = null, long? maxShares = null)
        {
            return new VirtualHardDiskProperties(
                blockSizeBytes,
                diskSizeGB,
                @dynamic,
                logicalSectorBytes,
                physicalSectorBytes,
                downloadUri,
                hyperVGeneration,
                diskFileFormat,
                createFromLocal,
                provisioningState,
                containerId,
                status,
                maxShares,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.VirtualHardDiskStatus"/>. </summary>
        /// <param name="errorCode"> VirtualHardDisk provisioning error code. </param>
        /// <param name="errorMessage"> Descriptive error message. </param>
        /// <param name="provisioningStatus"> Provisioning status of the vhd. </param>
        /// <param name="downloadStatus"> The download status of the virtual hard disk. </param>
        /// <param name="uploadStatus"> The upload status of the virtual hard disk. </param>
        /// <param name="managedBy"> ARM IDs of the VMs that are consuming the VHD. </param>
        /// <param name="uniqueId"> Unique Guid identifying the resource. </param>
        /// <returns> A new <see cref="Models.VirtualHardDiskStatus"/> instance for mocking. </returns>
        public static VirtualHardDiskStatus VirtualHardDiskStatus(string errorCode = null, string errorMessage = null, VirtualHardDiskStatusProvisioningStatus provisioningStatus = null, VirtualHardDiskDownloadStatus downloadStatus = null, VirtualHardDiskUploadStatus uploadStatus = null, IEnumerable<string> managedBy = null, string uniqueId = null)
        {
            managedBy ??= new List<string>();

            return new VirtualHardDiskStatus(
                errorCode,
                errorMessage,
                provisioningStatus,
                downloadStatus,
                uploadStatus,
                managedBy?.ToList(),
                uniqueId,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.VirtualHardDiskStatusProvisioningStatus"/>. </summary>
        /// <param name="operationId"> The ID of the operation performed on the virtual hard disk. </param>
        /// <param name="status"> The status of the operation performed on the virtual hard disk [Succeeded, Failed, InProgress]. </param>
        /// <returns> A new <see cref="Models.VirtualHardDiskStatusProvisioningStatus"/> instance for mocking. </returns>
        public static VirtualHardDiskStatusProvisioningStatus VirtualHardDiskStatusProvisioningStatus(string operationId = null, Status? status = null)
        {
            return new VirtualHardDiskStatusProvisioningStatus(operationId, status, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.VirtualHardDiskDownloadStatus"/>. </summary>
        /// <param name="downloadedSizeInMB"> The downloaded sized of the virtual hard disk in MB. </param>
        /// <param name="status"> The status of Uploading virtual hard disk [Succeeded, Failed, InProgress]. </param>
        /// <param name="progressPercentage"> The progress of the operation in percentage. </param>
        /// <returns> A new <see cref="Models.VirtualHardDiskDownloadStatus"/> instance for mocking. </returns>
        public static VirtualHardDiskDownloadStatus VirtualHardDiskDownloadStatus(long? downloadedSizeInMB = null, Status? status = null, long? progressPercentage = null)
        {
            return new VirtualHardDiskDownloadStatus(downloadedSizeInMB, status, progressPercentage, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.VirtualHardDiskUploadStatus"/>. </summary>
        /// <param name="uploadedSizeInMB"> The uploaded sized of the virtual hard disk in MB. </param>
        /// <param name="status"> The status of Uploading virtual hard disk [Succeeded, Failed, InProgress]. </param>
        /// <param name="progressPercentage"> The progress of the operation in percentage. </param>
        /// <param name="errorCode"> VirtualHardDisk upload error code. </param>
        /// <param name="errorMessage"> Descriptive upload error message. </param>
        /// <returns> A new <see cref="Models.VirtualHardDiskUploadStatus"/> instance for mocking. </returns>
        public static VirtualHardDiskUploadStatus VirtualHardDiskUploadStatus(long? uploadedSizeInMB = null, Status? status = null, long? progressPercentage = null, string errorCode = null, string errorMessage = null)
        {
            return new VirtualHardDiskUploadStatus(
                uploadedSizeInMB,
                status,
                progressPercentage,
                errorCode,
                errorMessage,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.VirtualHardDiskUploadResponse"/>. </summary>
        /// <param name="virtualHardDiskId"> The ARM ID for a Virtual Hard Disk. </param>
        /// <param name="uploadStatus"> The upload status of the virtual hard disk. </param>
        /// <returns> A new <see cref="Models.VirtualHardDiskUploadResponse"/> instance for mocking. </returns>
        public static VirtualHardDiskUploadResponse VirtualHardDiskUploadResponse(ResourceIdentifier virtualHardDiskId = null, VirtualHardDiskUploadStatus uploadStatus = null)
        {
            return new VirtualHardDiskUploadResponse(virtualHardDiskId, uploadStatus, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Vm.VirtualMachineInstanceData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <param name="extendedLocation"> The extendedLocation of the resource. </param>
        /// <param name="identity"> The managed service identities assigned to this resource. </param>
        /// <returns> A new <see cref="Vm.VirtualMachineInstanceData"/> instance for mocking. </returns>
        public static VirtualMachineInstanceData VirtualMachineInstanceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, VirtualMachineInstanceProperties properties = null, ExtendedLocation extendedLocation = null, ManagedServiceIdentity identity = null)
        {
            return new VirtualMachineInstanceData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                extendedLocation,
                identity,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.VirtualMachineInstanceProperties"/>. </summary>
        /// <param name="hardwareProfile"> HardwareProfile - Specifies the hardware settings for the virtual machine instance. </param>
        /// <param name="placementProfile"> PlacementProfile - Specifies the placement related settings for the virtual machine. </param>
        /// <param name="networkInterfaces"> NetworkProfile - describes the network configuration the virtual machine instance. </param>
        /// <param name="osProfile"> OsProfile - describes the configuration of the operating system and sets login data. </param>
        /// <param name="securityProfile"> SecurityProfile - Specifies the security settings for the virtual machine instance. </param>
        /// <param name="storageProfile"> StorageProfile - contains information about the disks and storage information for the virtual machine instance. </param>
        /// <param name="httpProxyConfig"> HTTP Proxy configuration for the VM. </param>
        /// <param name="createFromLocal"> Boolean indicating whether this is an existing local virtual machine or if one should be created. </param>
        /// <param name="provisioningState"> Provisioning state of the virtual machine instance. </param>
        /// <param name="instanceViewVmAgent"> The virtual machine instance view. </param>
        /// <param name="status"> The observed state of virtual machine instances. </param>
        /// <param name="guestAgentInstallStatus"> Guest agent install status. </param>
        /// <param name="vmId"> Unique identifier for the vm resource. </param>
        /// <param name="resourceUid"> Unique identifier defined by ARC to identify the guest of the VM. </param>
        /// <param name="hyperVVmId"> Unique identifier for the Hyper-V VM resource. </param>
        /// <param name="hostNodeName"> Name of the host node that the VM is on. </param>
        /// <param name="hostNodeIPAddress"> Name of the host node that the VM is on. </param>
        /// <returns> A new <see cref="Models.VirtualMachineInstanceProperties"/> instance for mocking. </returns>
        public static VirtualMachineInstanceProperties VirtualMachineInstanceProperties(VirtualMachineInstancePropertiesHardwareProfile hardwareProfile = null, VirtualMachineInstancePropertiesPlacementProfile placementProfile = null, IEnumerable<WritableSubResource> networkInterfaces = null, VirtualMachineInstancePropertiesOSProfile osProfile = null, VirtualMachineInstancePropertiesSecurityProfile securityProfile = null, VirtualMachineInstancePropertiesStorageProfile storageProfile = null, HttpProxyConfiguration httpProxyConfig = null, bool? createFromLocal = null, ProvisioningStateEnum? provisioningState = null, VirtualMachineConfigAgentInstanceView instanceViewVmAgent = null, VirtualMachineInstanceStatus status = null, GuestAgentInstallStatus guestAgentInstallStatus = null, string vmId = null, string resourceUid = null, string hyperVVmId = null, string hostNodeName = null, string hostNodeIPAddress = null)
        {
            networkInterfaces ??= new List<WritableSubResource>();

            return new VirtualMachineInstanceProperties(
                hardwareProfile,
                placementProfile,
                networkInterfaces != null ? new VirtualMachineInstancePropertiesNetworkProfile(networkInterfaces?.ToList(), serializedAdditionalRawData: null) : null,
                osProfile,
                securityProfile,
                storageProfile,
                httpProxyConfig,
                createFromLocal,
                provisioningState,
                instanceViewVmAgent != null ? new VirtualMachineInstanceView(instanceViewVmAgent, serializedAdditionalRawData: null) : null,
                status,
                guestAgentInstallStatus,
                vmId,
                resourceUid,
                hyperVVmId,
                hostNodeName,
                hostNodeIPAddress,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.VirtualMachineConfigAgentInstanceView"/>. </summary>
        /// <param name="vmConfigAgentVersion"> The VM Config Agent full version. </param>
        /// <param name="statuses"> The resource status information. </param>
        /// <returns> A new <see cref="Models.VirtualMachineConfigAgentInstanceView"/> instance for mocking. </returns>
        public static VirtualMachineConfigAgentInstanceView VirtualMachineConfigAgentInstanceView(string vmConfigAgentVersion = null, IEnumerable<InstanceViewStatus> statuses = null)
        {
            statuses ??= new List<InstanceViewStatus>();

            return new VirtualMachineConfigAgentInstanceView(vmConfigAgentVersion, statuses?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.InstanceViewStatus"/>. </summary>
        /// <param name="code"> The status code. </param>
        /// <param name="level"> The level code. </param>
        /// <param name="displayStatus"> The short localizable label for the status. </param>
        /// <param name="message"> The detailed status message, including for alerts and error messages. </param>
        /// <param name="time"> The time of the status. </param>
        /// <returns> A new <see cref="Models.InstanceViewStatus"/> instance for mocking. </returns>
        public static InstanceViewStatus InstanceViewStatus(string code = null, StatusLevelType? level = null, string displayStatus = null, string message = null, DateTimeOffset? time = null)
        {
            return new InstanceViewStatus(
                code,
                level,
                displayStatus,
                message,
                time,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.VirtualMachineInstanceStatus"/>. </summary>
        /// <param name="errorCode"> VirtualMachine provisioning error code. </param>
        /// <param name="errorMessage"> Descriptive error message. </param>
        /// <param name="powerState"> The power state of the virtual machine instance. </param>
        /// <param name="provisioningStatus"> Provisioning status of the virtual machine instance. </param>
        /// <returns> A new <see cref="Models.VirtualMachineInstanceStatus"/> instance for mocking. </returns>
        public static VirtualMachineInstanceStatus VirtualMachineInstanceStatus(string errorCode = null, string errorMessage = null, PowerStateEnum? powerState = null, VirtualMachineInstanceStatusProvisioningStatus provisioningStatus = null)
        {
            return new VirtualMachineInstanceStatus(errorCode, errorMessage, powerState, provisioningStatus, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.VirtualMachineInstanceStatusProvisioningStatus"/>. </summary>
        /// <param name="operationId"> The ID of the operation performed on the virtual machine instance. </param>
        /// <param name="status"> The status of the operation performed on the virtual machine instance [Succeeded, Failed, InProgress]. </param>
        /// <returns> A new <see cref="Models.VirtualMachineInstanceStatusProvisioningStatus"/> instance for mocking. </returns>
        public static VirtualMachineInstanceStatusProvisioningStatus VirtualMachineInstanceStatusProvisioningStatus(string operationId = null, Status? status = null)
        {
            return new VirtualMachineInstanceStatusProvisioningStatus(operationId, status, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.GuestAgentInstallStatus"/>. </summary>
        /// <param name="vmUuid"> Specifies the VM's unique SMBIOS ID. </param>
        /// <param name="status"> The installation status of the hybrid machine agent installation. </param>
        /// <param name="lastStatusChange"> The time of the last status change. </param>
        /// <param name="agentVersion"> The hybrid machine agent full version. </param>
        /// <param name="errorDetails"> Details about the error state. </param>
        /// <returns> A new <see cref="Models.GuestAgentInstallStatus"/> instance for mocking. </returns>
        public static GuestAgentInstallStatus GuestAgentInstallStatus(string vmUuid = null, StatusType? status = null, DateTimeOffset? lastStatusChange = null, string agentVersion = null, IEnumerable<ResponseError> errorDetails = null)
        {
            errorDetails ??= new List<ResponseError>();

            return new GuestAgentInstallStatus(
                vmUuid,
                status,
                lastStatusChange,
                agentVersion,
                errorDetails?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Vm.HybridIdentityMetadataData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="Vm.HybridIdentityMetadataData"/> instance for mocking. </returns>
        public static HybridIdentityMetadataData HybridIdentityMetadataData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, HybridIdentityMetadataProperties properties = null)
        {
            return new HybridIdentityMetadataData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.HybridIdentityMetadataProperties"/>. </summary>
        /// <param name="resourceUid"> The unique identifier for the resource. </param>
        /// <param name="publicKey"> The Public Key. </param>
        /// <param name="identity"> Identity for the resource. Current supported identity types: SystemAssigned. </param>
        /// <param name="provisioningState"> Provisioning state of the virtual machine instance. </param>
        /// <returns> A new <see cref="Models.HybridIdentityMetadataProperties"/> instance for mocking. </returns>
        public static HybridIdentityMetadataProperties HybridIdentityMetadataProperties(string resourceUid = null, string publicKey = null, ManagedServiceIdentity identity = null, ProvisioningStateEnum? provisioningState = null)
        {
            return new HybridIdentityMetadataProperties(resourceUid, publicKey, identity, provisioningState, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Vm.AttestationStatusData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="Vm.AttestationStatusData"/> instance for mocking. </returns>
        public static AttestationStatusData AttestationStatusData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, AttestationStatusProperties properties = null)
        {
            return new AttestationStatusData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.AttestationStatusProperties"/>. </summary>
        /// <param name="attestSecureBootEnabled"> The status of whether secure boot is enabled. </param>
        /// <param name="attestationCertValidated"> The status of whether attestation certificate is validated. </param>
        /// <param name="bootIntegrityValidated"> The status of whether the list of boot integrity properties is validated. </param>
        /// <param name="linuxKernelVersion"> kernel version string for Linux VM. </param>
        /// <param name="healthStatus"> The health status of attestation validation and parsing. </param>
        /// <param name="timestamp"> The time stamp of the last time attestation token is validated by relying party service. </param>
        /// <param name="errorMessage"> The error message of attestation validation and parsing. </param>
        /// <param name="provisioningState"> Provisioning state of the virtual machine instance. </param>
        /// <param name="attestHardwarePlatform"> The hardware platform information from attestation token. This only applies to Confidential VM. </param>
        /// <param name="attestDiskSecurityEncryptionType"> The managed disk security encryption type from attestation token. This only applies to Confidential VM. </param>
        /// <returns> A new <see cref="Models.AttestationStatusProperties"/> instance for mocking. </returns>
        public static AttestationStatusProperties AttestationStatusProperties(AttestSecureBootPropertyEnum? attestSecureBootEnabled = null, AttestCertPropertyEnum? attestationCertValidated = null, AttestBootIntegrityPropertyEnum? bootIntegrityValidated = null, string linuxKernelVersion = null, AttestHealthStatusEnum? healthStatus = null, string timestamp = null, string errorMessage = null, ProvisioningStateEnum? provisioningState = null, AttestHWPlatformEnum? attestHardwarePlatform = null, AttestDiskSecurityEncryptionTypeEnum? attestDiskSecurityEncryptionType = null)
        {
            return new AttestationStatusProperties(
                attestSecureBootEnabled,
                attestationCertValidated,
                bootIntegrityValidated,
                linuxKernelVersion,
                healthStatus,
                timestamp,
                errorMessage,
                provisioningState,
                attestHardwarePlatform,
                attestDiskSecurityEncryptionType,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Vm.GuestAgentData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="properties"> The resource-specific properties for this resource. </param>
        /// <returns> A new <see cref="Vm.GuestAgentData"/> instance for mocking. </returns>
        public static GuestAgentData GuestAgentData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, GuestAgentProperties properties = null)
        {
            return new GuestAgentData(
                id,
                name,
                resourceType,
                systemData,
                properties,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.GuestAgentProperties"/>. </summary>
        /// <param name="credentials"> Username / Password Credentials to provision guest agent. </param>
        /// <param name="provisioningAction"> The guest agent provisioning action. </param>
        /// <param name="status"> The guest agent status. </param>
        /// <param name="provisioningState"> Provisioning state of the virtual machine instance. </param>
        /// <returns> A new <see cref="Models.GuestAgentProperties"/> instance for mocking. </returns>
        public static GuestAgentProperties GuestAgentProperties(GuestCredential credentials = null, ProvisioningAction? provisioningAction = null, string status = null, ProvisioningStateEnum? provisioningState = null)
        {
            return new GuestAgentProperties(credentials, provisioningAction, status, provisioningState, serializedAdditionalRawData: null);
        }
    }
}
