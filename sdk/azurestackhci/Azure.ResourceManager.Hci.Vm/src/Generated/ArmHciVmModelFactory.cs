// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.Hci.Vm.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmHciVmModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Vm.GalleryImageData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="extendedLocation"> The extendedLocation of the resource. </param>
        /// <param name="containerId"> Storage ContainerID of the storage container to be used for gallery image. </param>
        /// <param name="imagePath"> location of the image the gallery image should be created from. </param>
        /// <param name="osType"> Operating system type that the gallery image uses [Windows, Linux]. </param>
        /// <param name="cloudInitDataSource"> Datasource for the gallery image when provisioning with cloud-init [NoCloud, Azure]. </param>
        /// <param name="hyperVGeneration"> The hypervisor generation of the Virtual Machine [V1, V2]. </param>
        /// <param name="identifier"> This is the gallery image definition identifier. </param>
        /// <param name="version"> Specifies information about the gallery image version that you want to create or update. </param>
        /// <param name="provisioningState"> Provisioning state of the gallery image. </param>
        /// <param name="status"> The observed state of gallery images. </param>
        /// <returns> A new <see cref="Vm.GalleryImageData"/> instance for mocking. </returns>
        public static GalleryImageData GalleryImageData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ExtendedLocation extendedLocation = null, ResourceIdentifier containerId = null, string imagePath = null, OperatingSystemType? osType = null, CloudInitDataSource? cloudInitDataSource = null, HyperVGeneration? hyperVGeneration = null, GalleryImageIdentifier identifier = null, GalleryImageVersion version = null, ProvisioningStateEnum? provisioningState = null, GalleryImageStatus status = null)
        {
            tags ??= new Dictionary<string, string>();

            return new GalleryImageData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                extendedLocation,
                containerId,
                imagePath,
                osType,
                cloudInitDataSource,
                hyperVGeneration,
                identifier,
                version,
                provisioningState,
                status,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.GalleryImageStatus"/>. </summary>
        /// <param name="errorCode"> GalleryImage provisioning error code. </param>
        /// <param name="errorMessage"> Descriptive error message. </param>
        /// <param name="provisioningStatus"></param>
        /// <param name="downloadSizeInMB"> The download status of the gallery image. </param>
        /// <param name="progressPercentage"> The progress of the operation in percentage. </param>
        /// <returns> A new <see cref="Models.GalleryImageStatus"/> instance for mocking. </returns>
        public static GalleryImageStatus GalleryImageStatus(string errorCode = null, string errorMessage = null, GalleryImageStatusProvisioningStatus provisioningStatus = null, long? downloadSizeInMB = null, long? progressPercentage = null)
        {
            return new GalleryImageStatus(
                errorCode,
                errorMessage,
                provisioningStatus,
                downloadSizeInMB != null ? new GalleryImageStatusDownloadStatus(downloadSizeInMB, serializedAdditionalRawData: null) : null,
                progressPercentage,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.GalleryImageStatusProvisioningStatus"/>. </summary>
        /// <param name="operationId"> The ID of the operation performed on the gallery image. </param>
        /// <param name="status"> The status of the operation performed on the gallery image [Succeeded, Failed, InProgress]. </param>
        /// <returns> A new <see cref="Models.GalleryImageStatusProvisioningStatus"/> instance for mocking. </returns>
        public static GalleryImageStatusProvisioningStatus GalleryImageStatusProvisioningStatus(string operationId = null, Status? status = null)
        {
            return new GalleryImageStatusProvisioningStatus(operationId, status, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Vm.LogicalNetworkData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="extendedLocation"> The extendedLocation of the resource. </param>
        /// <param name="dhcpOptionsDnsServers"> DhcpOptions contains an array of DNS servers available to VMs deployed in the logical network. Standard DHCP option for a subnet overrides logical network DHCP options. </param>
        /// <param name="subnets"> Subnet - list of subnets under the logical network. </param>
        /// <param name="provisioningState"> Provisioning state of the logical network. </param>
        /// <param name="vmSwitchName"> name of the network switch to be used for VMs. </param>
        /// <param name="status"> The observed state of logical networks. </param>
        /// <returns> A new <see cref="Vm.LogicalNetworkData"/> instance for mocking. </returns>
        public static LogicalNetworkData LogicalNetworkData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ExtendedLocation extendedLocation = null, IEnumerable<string> dhcpOptionsDnsServers = null, IEnumerable<Subnet> subnets = null, ProvisioningStateEnum? provisioningState = null, string vmSwitchName = null, LogicalNetworkStatus status = null)
        {
            tags ??= new Dictionary<string, string>();
            dhcpOptionsDnsServers ??= new List<string>();
            subnets ??= new List<Subnet>();

            return new LogicalNetworkData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                extendedLocation,
                dhcpOptionsDnsServers != null ? new LogicalNetworkPropertiesDhcpOptions(dhcpOptionsDnsServers?.ToList(), serializedAdditionalRawData: null) : null,
                subnets?.ToList(),
                provisioningState,
                vmSwitchName,
                status,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.RouteTable"/>. </summary>
        /// <param name="etag"> A unique read-only string that changes whenever the resource is updated. </param>
        /// <param name="name"> Resource name. </param>
        /// <param name="routeTableType"> Resource type. </param>
        /// <param name="routes"> Collection of routes contained within a route table. </param>
        /// <returns> A new <see cref="Models.RouteTable"/> instance for mocking. </returns>
        public static RouteTable RouteTable(string etag = null, string name = null, string routeTableType = null, IEnumerable<Route> routes = null)
        {
            routes ??= new List<Route>();

            return new RouteTable(etag, name, routeTableType, routes?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.IPPoolInfo"/>. </summary>
        /// <param name="used"> Number of IP addresses allocated from the IP Pool. </param>
        /// <param name="available"> Number of IP addresses available in the IP Pool. </param>
        /// <returns> A new <see cref="Models.IPPoolInfo"/> instance for mocking. </returns>
        public static IPPoolInfo IPPoolInfo(string used = null, string available = null)
        {
            return new IPPoolInfo(used, available, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.LogicalNetworkStatus"/>. </summary>
        /// <param name="errorCode"> LogicalNetwork provisioning error code. </param>
        /// <param name="errorMessage"> Descriptive error message. </param>
        /// <param name="provisioningStatus"></param>
        /// <returns> A new <see cref="Models.LogicalNetworkStatus"/> instance for mocking. </returns>
        public static LogicalNetworkStatus LogicalNetworkStatus(string errorCode = null, string errorMessage = null, LogicalNetworkStatusProvisioningStatus provisioningStatus = null)
        {
            return new LogicalNetworkStatus(errorCode, errorMessage, provisioningStatus, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.LogicalNetworkStatusProvisioningStatus"/>. </summary>
        /// <param name="operationId"> The ID of the operation performed on the logical network. </param>
        /// <param name="status"> The status of the operation performed on the logical network [Succeeded, Failed, InProgress]. </param>
        /// <returns> A new <see cref="Models.LogicalNetworkStatusProvisioningStatus"/> instance for mocking. </returns>
        public static LogicalNetworkStatusProvisioningStatus LogicalNetworkStatusProvisioningStatus(string operationId = null, Status? status = null)
        {
            return new LogicalNetworkStatusProvisioningStatus(operationId, status, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Vm.MarketplaceGalleryImageData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="extendedLocation"> The extendedLocation of the resource. </param>
        /// <param name="containerId"> Storage ContainerID of the storage container to be used for marketplace gallery image. </param>
        /// <param name="osType"> Operating system type that the gallery image uses [Windows, Linux]. </param>
        /// <param name="cloudInitDataSource"> Datasource for the gallery image when provisioning with cloud-init [NoCloud, Azure]. </param>
        /// <param name="hyperVGeneration"> The hypervisor generation of the Virtual Machine [V1, V2]. </param>
        /// <param name="identifier"> This is the gallery image definition identifier. </param>
        /// <param name="version"> Specifies information about the gallery image version that you want to create or update. </param>
        /// <param name="provisioningState"> Provisioning state of the marketplace gallery image. </param>
        /// <param name="status"> The observed state of marketplace gallery images. </param>
        /// <returns> A new <see cref="Vm.MarketplaceGalleryImageData"/> instance for mocking. </returns>
        public static MarketplaceGalleryImageData MarketplaceGalleryImageData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ExtendedLocation extendedLocation = null, ResourceIdentifier containerId = null, OperatingSystemType? osType = null, CloudInitDataSource? cloudInitDataSource = null, HyperVGeneration? hyperVGeneration = null, GalleryImageIdentifier identifier = null, GalleryImageVersion version = null, ProvisioningStateEnum? provisioningState = null, MarketplaceGalleryImageStatus status = null)
        {
            tags ??= new Dictionary<string, string>();

            return new MarketplaceGalleryImageData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                extendedLocation,
                containerId,
                osType,
                cloudInitDataSource,
                hyperVGeneration,
                identifier,
                version,
                provisioningState,
                status,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MarketplaceGalleryImageStatus"/>. </summary>
        /// <param name="errorCode"> MarketplaceGalleryImage provisioning error code. </param>
        /// <param name="errorMessage"> Descriptive error message. </param>
        /// <param name="provisioningStatus"></param>
        /// <param name="downloadSizeInMB"> The download status of the gallery image. </param>
        /// <param name="progressPercentage"> The progress of the operation in percentage. </param>
        /// <returns> A new <see cref="Models.MarketplaceGalleryImageStatus"/> instance for mocking. </returns>
        public static MarketplaceGalleryImageStatus MarketplaceGalleryImageStatus(string errorCode = null, string errorMessage = null, MarketplaceGalleryImageStatusProvisioningStatus provisioningStatus = null, long? downloadSizeInMB = null, long? progressPercentage = null)
        {
            return new MarketplaceGalleryImageStatus(
                errorCode,
                errorMessage,
                provisioningStatus,
                downloadSizeInMB != null ? new MarketplaceGalleryImageStatusDownloadStatus(downloadSizeInMB, serializedAdditionalRawData: null) : null,
                progressPercentage,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.MarketplaceGalleryImageStatusProvisioningStatus"/>. </summary>
        /// <param name="operationId"> The ID of the operation performed on the gallery image. </param>
        /// <param name="status"> The status of the operation performed on the gallery image [Succeeded, Failed, InProgress]. </param>
        /// <returns> A new <see cref="Models.MarketplaceGalleryImageStatusProvisioningStatus"/> instance for mocking. </returns>
        public static MarketplaceGalleryImageStatusProvisioningStatus MarketplaceGalleryImageStatusProvisioningStatus(string operationId = null, Status? status = null)
        {
            return new MarketplaceGalleryImageStatusProvisioningStatus(operationId, status, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Vm.NetworkInterfaceData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="extendedLocation"> The extendedLocation of the resource. </param>
        /// <param name="ipConfigurations"> IPConfigurations - A list of IPConfigurations of the network interface. </param>
        /// <param name="macAddress"> MacAddress - The MAC address of the network interface. </param>
        /// <param name="dnsServers"> DNS Settings for the interface. </param>
        /// <param name="provisioningState"> Provisioning state of the network interface. </param>
        /// <param name="status"> The observed state of network interfaces. </param>
        /// <returns> A new <see cref="Vm.NetworkInterfaceData"/> instance for mocking. </returns>
        public static NetworkInterfaceData NetworkInterfaceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ExtendedLocation extendedLocation = null, IEnumerable<IPConfiguration> ipConfigurations = null, string macAddress = null, IEnumerable<string> dnsServers = null, ProvisioningStateEnum? provisioningState = null, NetworkInterfaceStatus status = null)
        {
            tags ??= new Dictionary<string, string>();
            ipConfigurations ??= new List<IPConfiguration>();
            dnsServers ??= new List<string>();

            return new NetworkInterfaceData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                extendedLocation,
                ipConfigurations?.ToList(),
                macAddress,
                dnsServers != null ? new InterfaceDNSSettings(dnsServers?.ToList(), serializedAdditionalRawData: null) : null,
                provisioningState,
                status,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.IPConfigurationProperties"/>. </summary>
        /// <param name="gateway"> Gateway for network interface. </param>
        /// <param name="prefixLength"> prefixLength for network interface. </param>
        /// <param name="privateIPAddress"> PrivateIPAddress - Private IP address of the IP configuration. </param>
        /// <param name="subnetId"> Subnet - Name of Subnet bound to the IP configuration. </param>
        /// <returns> A new <see cref="Models.IPConfigurationProperties"/> instance for mocking. </returns>
        public static IPConfigurationProperties IPConfigurationProperties(string gateway = null, string prefixLength = null, string privateIPAddress = null, ResourceIdentifier subnetId = null)
        {
            return new IPConfigurationProperties(gateway, prefixLength, privateIPAddress, subnetId != null ? ResourceManagerModelFactory.WritableSubResource(subnetId) : null, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NetworkInterfaceStatus"/>. </summary>
        /// <param name="errorCode"> NetworkInterface provisioning error code. </param>
        /// <param name="errorMessage"> Descriptive error message. </param>
        /// <param name="provisioningStatus"></param>
        /// <returns> A new <see cref="Models.NetworkInterfaceStatus"/> instance for mocking. </returns>
        public static NetworkInterfaceStatus NetworkInterfaceStatus(string errorCode = null, string errorMessage = null, NetworkInterfaceStatusProvisioningStatus provisioningStatus = null)
        {
            return new NetworkInterfaceStatus(errorCode, errorMessage, provisioningStatus, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.NetworkInterfaceStatusProvisioningStatus"/>. </summary>
        /// <param name="operationId"> The ID of the operation performed on the network interface. </param>
        /// <param name="status"> The status of the operation performed on the network interface [Succeeded, Failed, InProgress]. </param>
        /// <returns> A new <see cref="Models.NetworkInterfaceStatusProvisioningStatus"/> instance for mocking. </returns>
        public static NetworkInterfaceStatusProvisioningStatus NetworkInterfaceStatusProvisioningStatus(string operationId = null, Status? status = null)
        {
            return new NetworkInterfaceStatusProvisioningStatus(operationId, status, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Vm.StorageContainerData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="extendedLocation"> The extendedLocation of the resource. </param>
        /// <param name="path"> Path of the storage container on the disk. </param>
        /// <param name="provisioningState"> Provisioning state of the storage container. </param>
        /// <param name="status"> The observed state of storage containers. </param>
        /// <returns> A new <see cref="Vm.StorageContainerData"/> instance for mocking. </returns>
        public static StorageContainerData StorageContainerData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ExtendedLocation extendedLocation = null, string path = null, ProvisioningStateEnum? provisioningState = null, StorageContainerStatus status = null)
        {
            tags ??= new Dictionary<string, string>();

            return new StorageContainerData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                extendedLocation,
                path,
                provisioningState,
                status,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.StorageContainerStatus"/>. </summary>
        /// <param name="errorCode"> StorageContainer provisioning error code. </param>
        /// <param name="errorMessage"> Descriptive error message. </param>
        /// <param name="availableSizeMB"> Amount of space available on the disk in MB. </param>
        /// <param name="containerSizeMB"> Total size of the disk in MB. </param>
        /// <param name="provisioningStatus"></param>
        /// <returns> A new <see cref="Models.StorageContainerStatus"/> instance for mocking. </returns>
        public static StorageContainerStatus StorageContainerStatus(string errorCode = null, string errorMessage = null, long? availableSizeMB = null, long? containerSizeMB = null, StorageContainerStatusProvisioningStatus provisioningStatus = null)
        {
            return new StorageContainerStatus(
                errorCode,
                errorMessage,
                availableSizeMB,
                containerSizeMB,
                provisioningStatus,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.StorageContainerStatusProvisioningStatus"/>. </summary>
        /// <param name="operationId"> The ID of the operation performed on the storage container. </param>
        /// <param name="status"> The status of the operation performed on the storage container [Succeeded, Failed, InProgress]. </param>
        /// <returns> A new <see cref="Models.StorageContainerStatusProvisioningStatus"/> instance for mocking. </returns>
        public static StorageContainerStatusProvisioningStatus StorageContainerStatusProvisioningStatus(string operationId = null, Status? status = null)
        {
            return new StorageContainerStatusProvisioningStatus(operationId, status, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Vm.VirtualHardDiskData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="extendedLocation"> The extendedLocation of the resource. </param>
        /// <param name="blockSizeBytes"></param>
        /// <param name="diskSizeGB"> Size of the disk in GB. </param>
        /// <param name="dynamic"> Boolean for enabling dynamic sizing on the virtual hard disk. </param>
        /// <param name="logicalSectorBytes"></param>
        /// <param name="physicalSectorBytes"></param>
        /// <param name="hyperVGeneration"> The hypervisor generation of the Virtual Machine [V1, V2]. </param>
        /// <param name="diskFileFormat"> The format of the actual VHD file [vhd, vhdx]. </param>
        /// <param name="provisioningState"> Provisioning state of the virtual hard disk. </param>
        /// <param name="containerId"> Storage ContainerID of the storage container to be used for VHD. </param>
        /// <param name="status"> The observed state of virtual hard disks. </param>
        /// <returns> A new <see cref="Vm.VirtualHardDiskData"/> instance for mocking. </returns>
        public static VirtualHardDiskData VirtualHardDiskData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ExtendedLocation extendedLocation = null, int? blockSizeBytes = null, long? diskSizeGB = null, bool? @dynamic = null, int? logicalSectorBytes = null, int? physicalSectorBytes = null, HyperVGeneration? hyperVGeneration = null, DiskFileFormat? diskFileFormat = null, ProvisioningStateEnum? provisioningState = null, ResourceIdentifier containerId = null, VirtualHardDiskStatus status = null)
        {
            tags ??= new Dictionary<string, string>();

            return new VirtualHardDiskData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                extendedLocation,
                blockSizeBytes,
                diskSizeGB,
                @dynamic,
                logicalSectorBytes,
                physicalSectorBytes,
                hyperVGeneration,
                diskFileFormat,
                provisioningState,
                containerId,
                status,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.VirtualHardDiskStatus"/>. </summary>
        /// <param name="errorCode"> VirtualHardDisk provisioning error code. </param>
        /// <param name="errorMessage"> Descriptive error message. </param>
        /// <param name="provisioningStatus"></param>
        /// <returns> A new <see cref="Models.VirtualHardDiskStatus"/> instance for mocking. </returns>
        public static VirtualHardDiskStatus VirtualHardDiskStatus(string errorCode = null, string errorMessage = null, VirtualHardDiskStatusProvisioningStatus provisioningStatus = null)
        {
            return new VirtualHardDiskStatus(errorCode, errorMessage, provisioningStatus, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.VirtualHardDiskStatusProvisioningStatus"/>. </summary>
        /// <param name="operationId"> The ID of the operation performed on the virtual hard disk. </param>
        /// <param name="status"> The status of the operation performed on the virtual hard disk [Succeeded, Failed, InProgress]. </param>
        /// <returns> A new <see cref="Models.VirtualHardDiskStatusProvisioningStatus"/> instance for mocking. </returns>
        public static VirtualHardDiskStatusProvisioningStatus VirtualHardDiskStatusProvisioningStatus(string operationId = null, Status? status = null)
        {
            return new VirtualHardDiskStatusProvisioningStatus(operationId, status, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Vm.VirtualMachineInstanceData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="extendedLocation"> The extendedLocation of the resource. </param>
        /// <param name="identity"> Identity for the resource. Current supported identity types: SystemAssigned. </param>
        /// <param name="hardwareProfile"> HardwareProfile - Specifies the hardware settings for the virtual machine instance. </param>
        /// <param name="networkInterfaces"> NetworkProfile - describes the network configuration the virtual machine instance. </param>
        /// <param name="osProfile"> OsProfile - describes the configuration of the operating system and sets login data. </param>
        /// <param name="securityProfile"> SecurityProfile - Specifies the security settings for the virtual machine instance. </param>
        /// <param name="storageProfile"> StorageProfile - contains information about the disks and storage information for the virtual machine instance. </param>
        /// <param name="httpProxyConfig"> HTTP Proxy configuration for the VM. </param>
        /// <param name="provisioningState"> Provisioning state of the virtual machine instance. </param>
        /// <param name="instanceViewVmAgent"> The virtual machine instance view. </param>
        /// <param name="status"> The observed state of virtual machine instances. </param>
        /// <param name="guestAgentInstallStatus"> Guest agent install status. </param>
        /// <param name="vmId"> Unique identifier for the vm resource. </param>
        /// <param name="resourceUid"> Unique identifier defined by ARC to identify the guest of the VM. </param>
        /// <returns> A new <see cref="Vm.VirtualMachineInstanceData"/> instance for mocking. </returns>
        public static VirtualMachineInstanceData VirtualMachineInstanceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ExtendedLocation extendedLocation = null, ManagedServiceIdentity identity = null, VirtualMachineInstancePropertiesHardwareProfile hardwareProfile = null, IEnumerable<WritableSubResource> networkInterfaces = null, VirtualMachineInstancePropertiesOsProfile osProfile = null, VirtualMachineInstancePropertiesSecurityProfile securityProfile = null, VirtualMachineInstancePropertiesStorageProfile storageProfile = null, HttpProxyConfiguration httpProxyConfig = null, ProvisioningStateEnum? provisioningState = null, VirtualMachineConfigAgentInstanceView instanceViewVmAgent = null, VirtualMachineInstanceStatus status = null, GuestAgentInstallStatus guestAgentInstallStatus = null, string vmId = null, string resourceUid = null)
        {
            networkInterfaces ??= new List<WritableSubResource>();

            return new VirtualMachineInstanceData(
                id,
                name,
                resourceType,
                systemData,
                extendedLocation,
                identity,
                hardwareProfile,
                networkInterfaces != null ? new VirtualMachineInstancePropertiesNetworkProfile(networkInterfaces?.ToList(), serializedAdditionalRawData: null) : null,
                osProfile,
                securityProfile,
                storageProfile,
                httpProxyConfig,
                provisioningState,
                instanceViewVmAgent != null ? new VirtualMachineInstanceView(instanceViewVmAgent, serializedAdditionalRawData: null) : null,
                status,
                guestAgentInstallStatus,
                vmId,
                resourceUid,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.VirtualMachineConfigAgentInstanceView"/>. </summary>
        /// <param name="vmConfigAgentVersion"> The VM Config Agent full version. </param>
        /// <param name="statuses"> The resource status information. </param>
        /// <returns> A new <see cref="Models.VirtualMachineConfigAgentInstanceView"/> instance for mocking. </returns>
        public static VirtualMachineConfigAgentInstanceView VirtualMachineConfigAgentInstanceView(string vmConfigAgentVersion = null, IEnumerable<InstanceViewStatus> statuses = null)
        {
            statuses ??= new List<InstanceViewStatus>();

            return new VirtualMachineConfigAgentInstanceView(vmConfigAgentVersion, statuses?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.InstanceViewStatus"/>. </summary>
        /// <param name="code"> The status code. </param>
        /// <param name="level"> The level code. </param>
        /// <param name="displayStatus"> The short localizable label for the status. </param>
        /// <param name="message"> The detailed status message, including for alerts and error messages. </param>
        /// <param name="time"> The time of the status. </param>
        /// <returns> A new <see cref="Models.InstanceViewStatus"/> instance for mocking. </returns>
        public static InstanceViewStatus InstanceViewStatus(string code = null, StatusLevelType? level = null, string displayStatus = null, string message = null, DateTimeOffset? time = null)
        {
            return new InstanceViewStatus(
                code,
                level,
                displayStatus,
                message,
                time,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.VirtualMachineInstanceStatus"/>. </summary>
        /// <param name="errorCode"> VirtualMachine provisioning error code. </param>
        /// <param name="errorMessage"> Descriptive error message. </param>
        /// <param name="powerState"> The power state of the virtual machine instance. </param>
        /// <param name="provisioningStatus"></param>
        /// <returns> A new <see cref="Models.VirtualMachineInstanceStatus"/> instance for mocking. </returns>
        public static VirtualMachineInstanceStatus VirtualMachineInstanceStatus(string errorCode = null, string errorMessage = null, PowerStateEnum? powerState = null, VirtualMachineInstanceStatusProvisioningStatus provisioningStatus = null)
        {
            return new VirtualMachineInstanceStatus(errorCode, errorMessage, powerState, provisioningStatus, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.VirtualMachineInstanceStatusProvisioningStatus"/>. </summary>
        /// <param name="operationId"> The ID of the operation performed on the virtual machine instance. </param>
        /// <param name="status"> The status of the operation performed on the virtual machine instance [Succeeded, Failed, InProgress]. </param>
        /// <returns> A new <see cref="Models.VirtualMachineInstanceStatusProvisioningStatus"/> instance for mocking. </returns>
        public static VirtualMachineInstanceStatusProvisioningStatus VirtualMachineInstanceStatusProvisioningStatus(string operationId = null, Status? status = null)
        {
            return new VirtualMachineInstanceStatusProvisioningStatus(operationId, status, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.GuestAgentInstallStatus"/>. </summary>
        /// <param name="vmUuid"> Specifies the VM's unique SMBIOS ID. </param>
        /// <param name="status"> The installation status of the hybrid machine agent installation. </param>
        /// <param name="lastStatusChange"> The time of the last status change. </param>
        /// <param name="agentVersion"> The hybrid machine agent full version. </param>
        /// <param name="errorDetails"> Details about the error state. </param>
        /// <returns> A new <see cref="Models.GuestAgentInstallStatus"/> instance for mocking. </returns>
        public static GuestAgentInstallStatus GuestAgentInstallStatus(string vmUuid = null, StatusType? status = null, DateTimeOffset? lastStatusChange = null, string agentVersion = null, IEnumerable<ResponseError> errorDetails = null)
        {
            errorDetails ??= new List<ResponseError>();

            return new GuestAgentInstallStatus(
                vmUuid,
                status,
                lastStatusChange,
                agentVersion,
                errorDetails?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Vm.HybridIdentityMetadataData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="resourceUid"> The unique identifier for the resource. </param>
        /// <param name="publicKey"> The Public Key. </param>
        /// <param name="identity"> Identity for the resource. Current supported identity types: SystemAssigned. </param>
        /// <param name="provisioningState"> The provisioning state. </param>
        /// <returns> A new <see cref="Vm.HybridIdentityMetadataData"/> instance for mocking. </returns>
        public static HybridIdentityMetadataData HybridIdentityMetadataData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string resourceUid = null, string publicKey = null, ManagedServiceIdentity identity = null, string provisioningState = null)
        {
            return new HybridIdentityMetadataData(
                id,
                name,
                resourceType,
                systemData,
                resourceUid,
                publicKey,
                identity,
                provisioningState,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Vm.GuestAgentData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="credentials"> Username / Password Credentials to provision guest agent. </param>
        /// <param name="provisioningAction"> The guest agent provisioning action. </param>
        /// <param name="status"> The guest agent status. </param>
        /// <param name="provisioningState"> The provisioning state. </param>
        /// <returns> A new <see cref="Vm.GuestAgentData"/> instance for mocking. </returns>
        public static GuestAgentData GuestAgentData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, GuestCredential credentials = null, ProvisioningAction? provisioningAction = null, string status = null, string provisioningState = null)
        {
            return new GuestAgentData(
                id,
                name,
                resourceType,
                systemData,
                credentials,
                provisioningAction,
                status,
                provisioningState,
                serializedAdditionalRawData: null);
        }
    }
}
