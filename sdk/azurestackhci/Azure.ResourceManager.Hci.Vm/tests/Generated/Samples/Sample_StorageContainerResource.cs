// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.Hci.Vm.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.Hci.Vm.Samples
{
    public partial class Sample_StorageContainerResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_GetStorageContainer()
        {
            // Generated from example definition: 2025-06-01-preview/StorageContainers_Get.json
            // this example is just showing the usage of "StorageContainer_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this StorageContainerResource created on azure
            // for more information of creating StorageContainerResource, please refer to the document of StorageContainerResource
            string subscriptionId = "fd3c3665-1729-4b7b-9a38-238e83b0f98b";
            string resourceGroupName = "test-rg";
            string storageContainerName = "Default_Container";
            ResourceIdentifier storageContainerResourceId = StorageContainerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, storageContainerName);
            StorageContainerResource storageContainer = client.GetStorageContainerResource(storageContainerResourceId);

            // invoke the operation
            StorageContainerResource result = await storageContainer.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            StorageContainerData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_DeleteStorageContainer()
        {
            // Generated from example definition: 2025-06-01-preview/StorageContainers_Delete.json
            // this example is just showing the usage of "StorageContainer_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this StorageContainerResource created on azure
            // for more information of creating StorageContainerResource, please refer to the document of StorageContainerResource
            string subscriptionId = "fd3c3665-1729-4b7b-9a38-238e83b0f98b";
            string resourceGroupName = "test-rg";
            string storageContainerName = "Default_Container";
            ResourceIdentifier storageContainerResourceId = StorageContainerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, storageContainerName);
            StorageContainerResource storageContainer = client.GetStorageContainerResource(storageContainerResourceId);

            // invoke the operation
            await storageContainer.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_UpdateStorageContainer()
        {
            // Generated from example definition: 2025-06-01-preview/StorageContainers_Update.json
            // this example is just showing the usage of "StorageContainer_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this StorageContainerResource created on azure
            // for more information of creating StorageContainerResource, please refer to the document of StorageContainerResource
            string subscriptionId = "fd3c3665-1729-4b7b-9a38-238e83b0f98b";
            string resourceGroupName = "test-rg";
            string storageContainerName = "Default_Container";
            ResourceIdentifier storageContainerResourceId = StorageContainerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, storageContainerName);
            StorageContainerResource storageContainer = client.GetStorageContainerResource(storageContainerResourceId);

            // invoke the operation
            StorageContainerPatch patch = new StorageContainerPatch
            {
                Tags =
{
["additionalProperties"] = "sample"
},
            };
            ArmOperation<StorageContainerResource> lro = await storageContainer.UpdateAsync(WaitUntil.Completed, patch);
            StorageContainerResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            StorageContainerData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
