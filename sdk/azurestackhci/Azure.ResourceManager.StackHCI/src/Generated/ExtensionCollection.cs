// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.Core;
using Azure.ResourceManager.StackHCI.Models;

namespace Azure.ResourceManager.StackHCI
{
    /// <summary> A class representing collection of Extension and their operations over its parent. </summary>
    public partial class ExtensionCollection : ArmCollection, IEnumerable<Extension>, IAsyncEnumerable<Extension>
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly ExtensionsRestOperations _extensionsRestClient;

        /// <summary> Initializes a new instance of the <see cref="ExtensionCollection"/> class for mocking. </summary>
        protected ExtensionCollection()
        {
        }

        /// <summary> Initializes a new instance of ExtensionCollection class. </summary>
        /// <param name="parent"> The resource representing the parent resource. </param>
        internal ExtensionCollection(ArmResource parent) : base(parent)
        {
            _clientDiagnostics = new ClientDiagnostics(ClientOptions);
            _extensionsRestClient = new ExtensionsRestOperations(_clientDiagnostics, Pipeline, ClientOptions, BaseUri);
        }

        /// <summary> Gets the valid resource type for this object. </summary>
        protected override ResourceType ValidResourceType => ArcSetting.ResourceType;

        // Collection level operations.

        /// <summary> Create Extension for HCI cluster. </summary>
        /// <param name="extensionName"> The name of the machine extension. </param>
        /// <param name="extension"> Details of the Machine Extension to be created. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="extensionName"/> or <paramref name="extension"/> is null. </exception>
        public virtual ExtensionCreateOperation CreateOrUpdate(string extensionName, ExtensionData extension, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (extensionName == null)
            {
                throw new ArgumentNullException(nameof(extensionName));
            }
            if (extension == null)
            {
                throw new ArgumentNullException(nameof(extension));
            }

            using var scope = _clientDiagnostics.CreateScope("ExtensionCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = _extensionsRestClient.Create(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, extensionName, extension, cancellationToken);
                var operation = new ExtensionCreateOperation(Parent, _clientDiagnostics, Pipeline, _extensionsRestClient.CreateCreateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, extensionName, extension).Request, response);
                if (waitForCompletion)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create Extension for HCI cluster. </summary>
        /// <param name="extensionName"> The name of the machine extension. </param>
        /// <param name="extension"> Details of the Machine Extension to be created. </param>
        /// <param name="waitForCompletion"> Waits for the completion of the long running operations. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="extensionName"/> or <paramref name="extension"/> is null. </exception>
        public async virtual Task<ExtensionCreateOperation> CreateOrUpdateAsync(string extensionName, ExtensionData extension, bool waitForCompletion = true, CancellationToken cancellationToken = default)
        {
            if (extensionName == null)
            {
                throw new ArgumentNullException(nameof(extensionName));
            }
            if (extension == null)
            {
                throw new ArgumentNullException(nameof(extension));
            }

            using var scope = _clientDiagnostics.CreateScope("ExtensionCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                var response = await _extensionsRestClient.CreateAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, extensionName, extension, cancellationToken).ConfigureAwait(false);
                var operation = new ExtensionCreateOperation(Parent, _clientDiagnostics, Pipeline, _extensionsRestClient.CreateCreateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, extensionName, extension).Request, response);
                if (waitForCompletion)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get particular Arc Extension of HCI Cluster. </summary>
        /// <param name="extensionName"> The name of the machine extension. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="extensionName"/> is null. </exception>
        public virtual Response<Extension> Get(string extensionName, CancellationToken cancellationToken = default)
        {
            if (extensionName == null)
            {
                throw new ArgumentNullException(nameof(extensionName));
            }

            using var scope = _clientDiagnostics.CreateScope("ExtensionCollection.Get");
            scope.Start();
            try
            {
                var response = _extensionsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, extensionName, cancellationToken);
                if (response.Value == null)
                    throw _clientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new Extension(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get particular Arc Extension of HCI Cluster. </summary>
        /// <param name="extensionName"> The name of the machine extension. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="extensionName"/> is null. </exception>
        public async virtual Task<Response<Extension>> GetAsync(string extensionName, CancellationToken cancellationToken = default)
        {
            if (extensionName == null)
            {
                throw new ArgumentNullException(nameof(extensionName));
            }

            using var scope = _clientDiagnostics.CreateScope("ExtensionCollection.Get");
            scope.Start();
            try
            {
                var response = await _extensionsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, extensionName, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new Extension(Parent, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="extensionName"> The name of the machine extension. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="extensionName"/> is null. </exception>
        public virtual Response<Extension> GetIfExists(string extensionName, CancellationToken cancellationToken = default)
        {
            if (extensionName == null)
            {
                throw new ArgumentNullException(nameof(extensionName));
            }

            using var scope = _clientDiagnostics.CreateScope("ExtensionCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _extensionsRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, extensionName, cancellationToken: cancellationToken);
                return response.Value == null
                    ? Response.FromValue<Extension>(null, response.GetRawResponse())
                    : Response.FromValue(new Extension(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="extensionName"> The name of the machine extension. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="extensionName"/> is null. </exception>
        public async virtual Task<Response<Extension>> GetIfExistsAsync(string extensionName, CancellationToken cancellationToken = default)
        {
            if (extensionName == null)
            {
                throw new ArgumentNullException(nameof(extensionName));
            }

            using var scope = _clientDiagnostics.CreateScope("ExtensionCollection.GetIfExistsAsync");
            scope.Start();
            try
            {
                var response = await _extensionsRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, extensionName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return response.Value == null
                    ? Response.FromValue<Extension>(null, response.GetRawResponse())
                    : Response.FromValue(new Extension(this, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="extensionName"> The name of the machine extension. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="extensionName"/> is null. </exception>
        public virtual Response<bool> Exists(string extensionName, CancellationToken cancellationToken = default)
        {
            if (extensionName == null)
            {
                throw new ArgumentNullException(nameof(extensionName));
            }

            using var scope = _clientDiagnostics.CreateScope("ExtensionCollection.Exists");
            scope.Start();
            try
            {
                var response = GetIfExists(extensionName, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="extensionName"> The name of the machine extension. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="extensionName"/> is null. </exception>
        public async virtual Task<Response<bool>> ExistsAsync(string extensionName, CancellationToken cancellationToken = default)
        {
            if (extensionName == null)
            {
                throw new ArgumentNullException(nameof(extensionName));
            }

            using var scope = _clientDiagnostics.CreateScope("ExtensionCollection.ExistsAsync");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(extensionName, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List all Extensions under ArcSetting resource. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="Extension" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<Extension> GetAll(CancellationToken cancellationToken = default)
        {
            Page<Extension> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ExtensionCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _extensionsRestClient.ListByArcSetting(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new Extension(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<Extension> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ExtensionCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _extensionsRestClient.ListByArcSettingNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new Extension(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> List all Extensions under ArcSetting resource. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="Extension" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<Extension> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<Extension>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ExtensionCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _extensionsRestClient.ListByArcSettingAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new Extension(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<Extension>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ExtensionCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _extensionsRestClient.ListByArcSettingNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new Extension(Parent, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        IEnumerator<Extension> IEnumerable<Extension>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<Extension> IAsyncEnumerable<Extension>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }

        // Builders.
        // public ArmBuilder<Azure.Core.ResourceIdentifier, Extension, ExtensionData> Construct() { }
    }
}
