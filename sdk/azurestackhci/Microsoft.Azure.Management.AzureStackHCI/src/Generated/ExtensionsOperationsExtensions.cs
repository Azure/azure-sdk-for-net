// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.AzureStackHCI
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ExtensionsOperations.
    /// </summary>
    public static partial class ExtensionsOperationsExtensions
    {
            /// <summary>
            /// List all Extensions under ArcSetting resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the cluster.
            /// </param>
            /// <param name='arcSettingName'>
            /// The name of the proxy resource holding details of HCI ArcSetting
            /// information.
            /// </param>
            public static IPage<Extension> ListByArcSetting(this IExtensionsOperations operations, string resourceGroupName, string clusterName, string arcSettingName)
            {
                return operations.ListByArcSettingAsync(resourceGroupName, clusterName, arcSettingName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all Extensions under ArcSetting resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the cluster.
            /// </param>
            /// <param name='arcSettingName'>
            /// The name of the proxy resource holding details of HCI ArcSetting
            /// information.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Extension>> ListByArcSettingAsync(this IExtensionsOperations operations, string resourceGroupName, string clusterName, string arcSettingName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByArcSettingWithHttpMessagesAsync(resourceGroupName, clusterName, arcSettingName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get particular Arc Extension of HCI Cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the cluster.
            /// </param>
            /// <param name='arcSettingName'>
            /// The name of the proxy resource holding details of HCI ArcSetting
            /// information.
            /// </param>
            /// <param name='extensionName'>
            /// The name of the machine extension.
            /// </param>
            public static Extension Get(this IExtensionsOperations operations, string resourceGroupName, string clusterName, string arcSettingName, string extensionName)
            {
                return operations.GetAsync(resourceGroupName, clusterName, arcSettingName, extensionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get particular Arc Extension of HCI Cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the cluster.
            /// </param>
            /// <param name='arcSettingName'>
            /// The name of the proxy resource holding details of HCI ArcSetting
            /// information.
            /// </param>
            /// <param name='extensionName'>
            /// The name of the machine extension.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Extension> GetAsync(this IExtensionsOperations operations, string resourceGroupName, string clusterName, string arcSettingName, string extensionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, clusterName, arcSettingName, extensionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create Extension for HCI cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the cluster.
            /// </param>
            /// <param name='arcSettingName'>
            /// The name of the proxy resource holding details of HCI ArcSetting
            /// information.
            /// </param>
            /// <param name='extensionName'>
            /// The name of the machine extension.
            /// </param>
            /// <param name='extension'>
            /// Details of the Machine Extension to be created.
            /// </param>
            public static Extension Create(this IExtensionsOperations operations, string resourceGroupName, string clusterName, string arcSettingName, string extensionName, Extension extension)
            {
                return operations.CreateAsync(resourceGroupName, clusterName, arcSettingName, extensionName, extension).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create Extension for HCI cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the cluster.
            /// </param>
            /// <param name='arcSettingName'>
            /// The name of the proxy resource holding details of HCI ArcSetting
            /// information.
            /// </param>
            /// <param name='extensionName'>
            /// The name of the machine extension.
            /// </param>
            /// <param name='extension'>
            /// Details of the Machine Extension to be created.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Extension> CreateAsync(this IExtensionsOperations operations, string resourceGroupName, string clusterName, string arcSettingName, string extensionName, Extension extension, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, clusterName, arcSettingName, extensionName, extension, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update Extension for HCI cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the cluster.
            /// </param>
            /// <param name='arcSettingName'>
            /// The name of the proxy resource holding details of HCI ArcSetting
            /// information.
            /// </param>
            /// <param name='extensionName'>
            /// The name of the machine extension.
            /// </param>
            /// <param name='extension'>
            /// Details of the Machine Extension to be created.
            /// </param>
            public static Extension Update(this IExtensionsOperations operations, string resourceGroupName, string clusterName, string arcSettingName, string extensionName, Extension extension)
            {
                return operations.UpdateAsync(resourceGroupName, clusterName, arcSettingName, extensionName, extension).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update Extension for HCI cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the cluster.
            /// </param>
            /// <param name='arcSettingName'>
            /// The name of the proxy resource holding details of HCI ArcSetting
            /// information.
            /// </param>
            /// <param name='extensionName'>
            /// The name of the machine extension.
            /// </param>
            /// <param name='extension'>
            /// Details of the Machine Extension to be created.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Extension> UpdateAsync(this IExtensionsOperations operations, string resourceGroupName, string clusterName, string arcSettingName, string extensionName, Extension extension, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, clusterName, arcSettingName, extensionName, extension, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete particular Arc Extension of HCI Cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the cluster.
            /// </param>
            /// <param name='arcSettingName'>
            /// The name of the proxy resource holding details of HCI ArcSetting
            /// information.
            /// </param>
            /// <param name='extensionName'>
            /// The name of the machine extension.
            /// </param>
            public static void Delete(this IExtensionsOperations operations, string resourceGroupName, string clusterName, string arcSettingName, string extensionName)
            {
                operations.DeleteAsync(resourceGroupName, clusterName, arcSettingName, extensionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete particular Arc Extension of HCI Cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the cluster.
            /// </param>
            /// <param name='arcSettingName'>
            /// The name of the proxy resource holding details of HCI ArcSetting
            /// information.
            /// </param>
            /// <param name='extensionName'>
            /// The name of the machine extension.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IExtensionsOperations operations, string resourceGroupName, string clusterName, string arcSettingName, string extensionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, clusterName, arcSettingName, extensionName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Create Extension for HCI cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the cluster.
            /// </param>
            /// <param name='arcSettingName'>
            /// The name of the proxy resource holding details of HCI ArcSetting
            /// information.
            /// </param>
            /// <param name='extensionName'>
            /// The name of the machine extension.
            /// </param>
            /// <param name='extension'>
            /// Details of the Machine Extension to be created.
            /// </param>
            public static Extension BeginCreate(this IExtensionsOperations operations, string resourceGroupName, string clusterName, string arcSettingName, string extensionName, Extension extension)
            {
                return operations.BeginCreateAsync(resourceGroupName, clusterName, arcSettingName, extensionName, extension).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create Extension for HCI cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the cluster.
            /// </param>
            /// <param name='arcSettingName'>
            /// The name of the proxy resource holding details of HCI ArcSetting
            /// information.
            /// </param>
            /// <param name='extensionName'>
            /// The name of the machine extension.
            /// </param>
            /// <param name='extension'>
            /// Details of the Machine Extension to be created.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Extension> BeginCreateAsync(this IExtensionsOperations operations, string resourceGroupName, string clusterName, string arcSettingName, string extensionName, Extension extension, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateWithHttpMessagesAsync(resourceGroupName, clusterName, arcSettingName, extensionName, extension, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update Extension for HCI cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the cluster.
            /// </param>
            /// <param name='arcSettingName'>
            /// The name of the proxy resource holding details of HCI ArcSetting
            /// information.
            /// </param>
            /// <param name='extensionName'>
            /// The name of the machine extension.
            /// </param>
            /// <param name='extension'>
            /// Details of the Machine Extension to be created.
            /// </param>
            public static Extension BeginUpdate(this IExtensionsOperations operations, string resourceGroupName, string clusterName, string arcSettingName, string extensionName, Extension extension)
            {
                return operations.BeginUpdateAsync(resourceGroupName, clusterName, arcSettingName, extensionName, extension).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update Extension for HCI cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the cluster.
            /// </param>
            /// <param name='arcSettingName'>
            /// The name of the proxy resource holding details of HCI ArcSetting
            /// information.
            /// </param>
            /// <param name='extensionName'>
            /// The name of the machine extension.
            /// </param>
            /// <param name='extension'>
            /// Details of the Machine Extension to be created.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Extension> BeginUpdateAsync(this IExtensionsOperations operations, string resourceGroupName, string clusterName, string arcSettingName, string extensionName, Extension extension, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(resourceGroupName, clusterName, arcSettingName, extensionName, extension, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete particular Arc Extension of HCI Cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the cluster.
            /// </param>
            /// <param name='arcSettingName'>
            /// The name of the proxy resource holding details of HCI ArcSetting
            /// information.
            /// </param>
            /// <param name='extensionName'>
            /// The name of the machine extension.
            /// </param>
            public static void BeginDelete(this IExtensionsOperations operations, string resourceGroupName, string clusterName, string arcSettingName, string extensionName)
            {
                operations.BeginDeleteAsync(resourceGroupName, clusterName, arcSettingName, extensionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete particular Arc Extension of HCI Cluster.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='clusterName'>
            /// The name of the cluster.
            /// </param>
            /// <param name='arcSettingName'>
            /// The name of the proxy resource holding details of HCI ArcSetting
            /// information.
            /// </param>
            /// <param name='extensionName'>
            /// The name of the machine extension.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IExtensionsOperations operations, string resourceGroupName, string clusterName, string arcSettingName, string extensionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, clusterName, arcSettingName, extensionName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List all Extensions under ArcSetting resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Extension> ListByArcSettingNext(this IExtensionsOperations operations, string nextPageLink)
            {
                return operations.ListByArcSettingNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all Extensions under ArcSetting resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Extension>> ListByArcSettingNextAsync(this IExtensionsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByArcSettingNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
