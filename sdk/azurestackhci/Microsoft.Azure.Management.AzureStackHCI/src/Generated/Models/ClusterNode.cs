// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.AzureStackHCI.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Cluster node details.
    /// </summary>
    public partial class ClusterNode
    {
        /// <summary>
        /// Initializes a new instance of the ClusterNode class.
        /// </summary>
        public ClusterNode()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ClusterNode class.
        /// </summary>
        /// <param name="name">Name of the cluster node.</param>
        /// <param name="id">Id of the node in the cluster.</param>
        /// <param name="manufacturer">Manufacturer of the cluster node
        /// hardware.</param>
        /// <param name="model">Model name of the cluster node
        /// hardware.</param>
        /// <param name="osName">Operating system running on the cluster
        /// node.</param>
        /// <param name="osVersion">Version of the operating system running on
        /// the cluster node.</param>
        /// <param name="serialNumber">Immutable id of the cluster
        /// node.</param>
        /// <param name="coreCount">Number of physical cores on the cluster
        /// node.</param>
        /// <param name="memoryInGiB">Total available memory on the cluster
        /// node (in GiB).</param>
        public ClusterNode(string name = default(string), double? id = default(double?), string manufacturer = default(string), string model = default(string), string osName = default(string), string osVersion = default(string), string serialNumber = default(string), double? coreCount = default(double?), double? memoryInGiB = default(double?))
        {
            Name = name;
            Id = id;
            Manufacturer = manufacturer;
            Model = model;
            OsName = osName;
            OsVersion = osVersion;
            SerialNumber = serialNumber;
            CoreCount = coreCount;
            MemoryInGiB = memoryInGiB;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets name of the cluster node.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; private set; }

        /// <summary>
        /// Gets id of the node in the cluster.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public double? Id { get; private set; }

        /// <summary>
        /// Gets manufacturer of the cluster node hardware.
        /// </summary>
        [JsonProperty(PropertyName = "manufacturer")]
        public string Manufacturer { get; private set; }

        /// <summary>
        /// Gets model name of the cluster node hardware.
        /// </summary>
        [JsonProperty(PropertyName = "model")]
        public string Model { get; private set; }

        /// <summary>
        /// Gets operating system running on the cluster node.
        /// </summary>
        [JsonProperty(PropertyName = "osName")]
        public string OsName { get; private set; }

        /// <summary>
        /// Gets version of the operating system running on the cluster node.
        /// </summary>
        [JsonProperty(PropertyName = "osVersion")]
        public string OsVersion { get; private set; }

        /// <summary>
        /// Gets immutable id of the cluster node.
        /// </summary>
        [JsonProperty(PropertyName = "serialNumber")]
        public string SerialNumber { get; private set; }

        /// <summary>
        /// Gets number of physical cores on the cluster node.
        /// </summary>
        [JsonProperty(PropertyName = "coreCount")]
        public double? CoreCount { get; private set; }

        /// <summary>
        /// Gets total available memory on the cluster node (in GiB).
        /// </summary>
        [JsonProperty(PropertyName = "memoryInGiB")]
        public double? MemoryInGiB { get; private set; }

    }
}
