// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.Contoso.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.Contoso.Samples
{
    public partial class Sample_EmployeeResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_EmployeesGet()
        {
            // Generated from example definition: 2021-11-01/Employees_Get.json
            // this example is just showing the usage of "Employee_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EmployeeResource created on azure
            // for more information of creating EmployeeResource, please refer to the document of EmployeeResource
            string subscriptionId = "11809CA1-E126-4017-945E-AA795CD5C5A9";
            string resourceGroupName = "rgopenapi";
            string employeeName = "le-8MU--J3W6q8D386p3-iT3";
            ResourceIdentifier employeeResourceId = EmployeeResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, employeeName);
            EmployeeResource employee = client.GetEmployeeResource(employeeResourceId);

            // invoke the operation
            EmployeeResource result = await employee.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EmployeeData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_EmployeesDelete()
        {
            // Generated from example definition: 2021-11-01/Employees_Delete.json
            // this example is just showing the usage of "Employee_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EmployeeResource created on azure
            // for more information of creating EmployeeResource, please refer to the document of EmployeeResource
            string subscriptionId = "11809CA1-E126-4017-945E-AA795CD5C5A9";
            string resourceGroupName = "rgopenapi";
            string employeeName = "5vX--BxSu3ux48rI4O9OQ569";
            ResourceIdentifier employeeResourceId = EmployeeResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, employeeName);
            EmployeeResource employee = client.GetEmployeeResource(employeeResourceId);

            // invoke the operation
            await employee.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_EmployeesUpdate()
        {
            // Generated from example definition: 2021-11-01/Employees_Update.json
            // this example is just showing the usage of "Employee_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EmployeeResource created on azure
            // for more information of creating EmployeeResource, please refer to the document of EmployeeResource
            string subscriptionId = "11809CA1-E126-4017-945E-AA795CD5C5A9";
            string resourceGroupName = "rgopenapi";
            string employeeName = "-XhyNJ--";
            ResourceIdentifier employeeResourceId = EmployeeResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, employeeName);
            EmployeeResource employee = client.GetEmployeeResource(employeeResourceId);

            // invoke the operation
            EmployeeData data = new EmployeeData(default)
            {
                Properties = new EmployeeProperties
                {
                    Age = 24,
                    City = "uyfg",
                    Profile = Encoding.UTF8.GetBytes("oapgijcswfkruiuuzbwco"),
                },
                Tags =
{
["key7952"] = "no"
},
            };
            EmployeeResource result = await employee.UpdateAsync(data);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EmployeeData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
