// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ContainerInstance
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ContainersOperations.
    /// </summary>
    public static partial class ContainersOperationsExtensions
    {
            /// <summary>
            /// Get the logs for a specified container instance.
            /// </summary>
            /// <remarks>
            /// Get the logs for a specified container instance in a specified resource
            /// group and container group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='containerGroupName'>
            /// The name of the container group.
            /// </param>
            /// <param name='containerName'>
            /// The name of the container instance.
            /// </param>
            /// <param name='tail'>
            /// The number of lines to show from the tail of the container instance log. If
            /// not provided, all available logs are shown up to 4mb.
            /// </param>
            /// <param name='timestamps'>
            /// If true, adds a timestamp at the beginning of every line of log output. If
            /// not provided, defaults to false.
            /// </param>
            public static Logs ListLogs(this IContainersOperations operations, string resourceGroupName, string containerGroupName, string containerName, int? tail = default(int?), bool? timestamps = default(bool?))
            {
                return operations.ListLogsAsync(resourceGroupName, containerGroupName, containerName, tail, timestamps).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the logs for a specified container instance.
            /// </summary>
            /// <remarks>
            /// Get the logs for a specified container instance in a specified resource
            /// group and container group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='containerGroupName'>
            /// The name of the container group.
            /// </param>
            /// <param name='containerName'>
            /// The name of the container instance.
            /// </param>
            /// <param name='tail'>
            /// The number of lines to show from the tail of the container instance log. If
            /// not provided, all available logs are shown up to 4mb.
            /// </param>
            /// <param name='timestamps'>
            /// If true, adds a timestamp at the beginning of every line of log output. If
            /// not provided, defaults to false.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Logs> ListLogsAsync(this IContainersOperations operations, string resourceGroupName, string containerGroupName, string containerName, int? tail = default(int?), bool? timestamps = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListLogsWithHttpMessagesAsync(resourceGroupName, containerGroupName, containerName, tail, timestamps, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Executes a command in a specific container instance.
            /// </summary>
            /// <remarks>
            /// Executes a command for a specific container instance in a specified
            /// resource group and container group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='containerGroupName'>
            /// The name of the container group.
            /// </param>
            /// <param name='containerName'>
            /// The name of the container instance.
            /// </param>
            /// <param name='containerExecRequest'>
            /// The request for the exec command.
            /// </param>
            public static ContainerExecResponse ExecuteCommand(this IContainersOperations operations, string resourceGroupName, string containerGroupName, string containerName, ContainerExecRequest containerExecRequest)
            {
                return operations.ExecuteCommandAsync(resourceGroupName, containerGroupName, containerName, containerExecRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Executes a command in a specific container instance.
            /// </summary>
            /// <remarks>
            /// Executes a command for a specific container instance in a specified
            /// resource group and container group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='containerGroupName'>
            /// The name of the container group.
            /// </param>
            /// <param name='containerName'>
            /// The name of the container instance.
            /// </param>
            /// <param name='containerExecRequest'>
            /// The request for the exec command.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ContainerExecResponse> ExecuteCommandAsync(this IContainersOperations operations, string resourceGroupName, string containerGroupName, string containerName, ContainerExecRequest containerExecRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ExecuteCommandWithHttpMessagesAsync(resourceGroupName, containerGroupName, containerName, containerExecRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Attach to the output of a specific container instance.
            /// </summary>
            /// <remarks>
            /// Attach to the output stream of a specific container instance in a specified
            /// resource group and container group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='containerGroupName'>
            /// The name of the container group.
            /// </param>
            /// <param name='containerName'>
            /// The name of the container instance.
            /// </param>
            public static ContainerAttachResponse Attach(this IContainersOperations operations, string resourceGroupName, string containerGroupName, string containerName)
            {
                return operations.AttachAsync(resourceGroupName, containerGroupName, containerName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Attach to the output of a specific container instance.
            /// </summary>
            /// <remarks>
            /// Attach to the output stream of a specific container instance in a specified
            /// resource group and container group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='containerGroupName'>
            /// The name of the container group.
            /// </param>
            /// <param name='containerName'>
            /// The name of the container instance.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ContainerAttachResponse> AttachAsync(this IContainersOperations operations, string resourceGroupName, string containerGroupName, string containerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AttachWithHttpMessagesAsync(resourceGroupName, containerGroupName, containerName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
