// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ContainerInstance.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The container group encryption properties.
    /// </summary>
    public partial class EncryptionProperties
    {
        /// <summary>
        /// Initializes a new instance of the EncryptionProperties class.
        /// </summary>
        public EncryptionProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EncryptionProperties class.
        /// </summary>
        /// <param name="vaultBaseUrl">The keyvault base url.</param>
        /// <param name="keyName">The encryption key name.</param>
        /// <param name="keyVersion">The encryption key version.</param>
        public EncryptionProperties(string vaultBaseUrl, string keyName, string keyVersion)
        {
            VaultBaseUrl = vaultBaseUrl;
            KeyName = keyName;
            KeyVersion = keyVersion;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the keyvault base url.
        /// </summary>
        [JsonProperty(PropertyName = "vaultBaseUrl")]
        public string VaultBaseUrl { get; set; }

        /// <summary>
        /// Gets or sets the encryption key name.
        /// </summary>
        [JsonProperty(PropertyName = "keyName")]
        public string KeyName { get; set; }

        /// <summary>
        /// Gets or sets the encryption key version.
        /// </summary>
        [JsonProperty(PropertyName = "keyVersion")]
        public string KeyVersion { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (VaultBaseUrl == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "VaultBaseUrl");
            }
            if (KeyName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "KeyName");
            }
            if (KeyVersion == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "KeyVersion");
            }
        }
    }
}
