// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ContainerInstance.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The container Http Get settings, for liveness or readiness probe
    /// </summary>
    public partial class ContainerHttpGet
    {
        /// <summary>
        /// Initializes a new instance of the ContainerHttpGet class.
        /// </summary>
        public ContainerHttpGet()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ContainerHttpGet class.
        /// </summary>
        /// <param name="port">The port number to probe.</param>
        /// <param name="path">The path to probe.</param>
        /// <param name="scheme">The scheme. Possible values include: 'http',
        /// 'https'</param>
        /// <param name="httpHeaders">The HTTP headers.</param>
        public ContainerHttpGet(int port, string path = default(string), string scheme = default(string), IList<HttpHeader> httpHeaders = default(IList<HttpHeader>))
        {
            Path = path;
            Port = port;
            Scheme = scheme;
            HttpHeaders = httpHeaders;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the path to probe.
        /// </summary>
        [JsonProperty(PropertyName = "path")]
        public string Path { get; set; }

        /// <summary>
        /// Gets or sets the port number to probe.
        /// </summary>
        [JsonProperty(PropertyName = "port")]
        public int Port { get; set; }

        /// <summary>
        /// Gets or sets the scheme. Possible values include: 'http', 'https'
        /// </summary>
        [JsonProperty(PropertyName = "scheme")]
        public string Scheme { get; set; }

        /// <summary>
        /// Gets or sets the HTTP headers.
        /// </summary>
        [JsonProperty(PropertyName = "httpHeaders")]
        public IList<HttpHeader> HttpHeaders { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
        }
    }
}
