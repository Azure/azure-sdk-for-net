// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ContainerInstance.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A container instance.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class Container
    {
        /// <summary>
        /// Initializes a new instance of the Container class.
        /// </summary>
        public Container()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Container class.
        /// </summary>
        /// <param name="name">The user-provided name of the container
        /// instance.</param>
        /// <param name="image">The name of the image used to create the
        /// container instance.</param>
        /// <param name="resources">The resource requirements of the container
        /// instance.</param>
        /// <param name="command">The commands to execute within the container
        /// instance in exec form.</param>
        /// <param name="ports">The exposed ports on the container
        /// instance.</param>
        /// <param name="environmentVariables">The environment variables to set
        /// in the container instance.</param>
        /// <param name="instanceView">The instance view of the container
        /// instance. Only valid in response.</param>
        /// <param name="volumeMounts">The volume mounts available to the
        /// container instance.</param>
        /// <param name="livenessProbe">The liveness probe.</param>
        /// <param name="readinessProbe">The readiness probe.</param>
        public Container(string name, string image, ResourceRequirements resources, IList<string> command = default(IList<string>), IList<ContainerPort> ports = default(IList<ContainerPort>), IList<EnvironmentVariable> environmentVariables = default(IList<EnvironmentVariable>), ContainerPropertiesInstanceView instanceView = default(ContainerPropertiesInstanceView), IList<VolumeMount> volumeMounts = default(IList<VolumeMount>), ContainerProbe livenessProbe = default(ContainerProbe), ContainerProbe readinessProbe = default(ContainerProbe))
        {
            Name = name;
            Image = image;
            Command = command;
            Ports = ports;
            EnvironmentVariables = environmentVariables;
            InstanceView = instanceView;
            Resources = resources;
            VolumeMounts = volumeMounts;
            LivenessProbe = livenessProbe;
            ReadinessProbe = readinessProbe;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the user-provided name of the container instance.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the name of the image used to create the container
        /// instance.
        /// </summary>
        [JsonProperty(PropertyName = "properties.image")]
        public string Image { get; set; }

        /// <summary>
        /// Gets or sets the commands to execute within the container instance
        /// in exec form.
        /// </summary>
        [JsonProperty(PropertyName = "properties.command")]
        public IList<string> Command { get; set; }

        /// <summary>
        /// Gets or sets the exposed ports on the container instance.
        /// </summary>
        [JsonProperty(PropertyName = "properties.ports")]
        public IList<ContainerPort> Ports { get; set; }

        /// <summary>
        /// Gets or sets the environment variables to set in the container
        /// instance.
        /// </summary>
        [JsonProperty(PropertyName = "properties.environmentVariables")]
        public IList<EnvironmentVariable> EnvironmentVariables { get; set; }

        /// <summary>
        /// Gets the instance view of the container instance. Only valid in
        /// response.
        /// </summary>
        [JsonProperty(PropertyName = "properties.instanceView")]
        public ContainerPropertiesInstanceView InstanceView { get; private set; }

        /// <summary>
        /// Gets or sets the resource requirements of the container instance.
        /// </summary>
        [JsonProperty(PropertyName = "properties.resources")]
        public ResourceRequirements Resources { get; set; }

        /// <summary>
        /// Gets or sets the volume mounts available to the container instance.
        /// </summary>
        [JsonProperty(PropertyName = "properties.volumeMounts")]
        public IList<VolumeMount> VolumeMounts { get; set; }

        /// <summary>
        /// Gets or sets the liveness probe.
        /// </summary>
        [JsonProperty(PropertyName = "properties.livenessProbe")]
        public ContainerProbe LivenessProbe { get; set; }

        /// <summary>
        /// Gets or sets the readiness probe.
        /// </summary>
        [JsonProperty(PropertyName = "properties.readinessProbe")]
        public ContainerProbe ReadinessProbe { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Image == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Image");
            }
            if (Resources == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Resources");
            }
            if (Ports != null)
            {
                foreach (var element in Ports)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (EnvironmentVariables != null)
            {
                foreach (var element1 in EnvironmentVariables)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
            if (Resources != null)
            {
                Resources.Validate();
            }
            if (VolumeMounts != null)
            {
                foreach (var element2 in VolumeMounts)
                {
                    if (element2 != null)
                    {
                        element2.Validate();
                    }
                }
            }
            if (LivenessProbe != null)
            {
                LivenessProbe.Validate();
            }
            if (ReadinessProbe != null)
            {
                ReadinessProbe.Validate();
            }
        }
    }
}
