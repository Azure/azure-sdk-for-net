// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.ContainerInstance.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The init container definition.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class InitContainerDefinition
    {
        /// <summary>
        /// Initializes a new instance of the InitContainerDefinition class.
        /// </summary>
        public InitContainerDefinition()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the InitContainerDefinition class.
        /// </summary>
        /// <param name="name">The name for the init container.</param>
        /// <param name="image">The image of the init container.</param>
        /// <param name="command">The command to execute within the init
        /// container in exec form.</param>
        /// <param name="environmentVariables">The environment variables to set
        /// in the init container.</param>
        /// <param name="instanceView">The instance view of the init container.
        /// Only valid in response.</param>
        /// <param name="volumeMounts">The volume mounts available to the init
        /// container.</param>
        public InitContainerDefinition(string name, string image = default(string), IList<string> command = default(IList<string>), IList<EnvironmentVariable> environmentVariables = default(IList<EnvironmentVariable>), InitContainerPropertiesDefinitionInstanceView instanceView = default(InitContainerPropertiesDefinitionInstanceView), IList<VolumeMount> volumeMounts = default(IList<VolumeMount>))
        {
            Name = name;
            Image = image;
            Command = command;
            EnvironmentVariables = environmentVariables;
            InstanceView = instanceView;
            VolumeMounts = volumeMounts;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the name for the init container.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the image of the init container.
        /// </summary>
        [JsonProperty(PropertyName = "properties.image")]
        public string Image { get; set; }

        /// <summary>
        /// Gets or sets the command to execute within the init container in
        /// exec form.
        /// </summary>
        [JsonProperty(PropertyName = "properties.command")]
        public IList<string> Command { get; set; }

        /// <summary>
        /// Gets or sets the environment variables to set in the init
        /// container.
        /// </summary>
        [JsonProperty(PropertyName = "properties.environmentVariables")]
        public IList<EnvironmentVariable> EnvironmentVariables { get; set; }

        /// <summary>
        /// Gets the instance view of the init container. Only valid in
        /// response.
        /// </summary>
        [JsonProperty(PropertyName = "properties.instanceView")]
        public InitContainerPropertiesDefinitionInstanceView InstanceView { get; private set; }

        /// <summary>
        /// Gets or sets the volume mounts available to the init container.
        /// </summary>
        [JsonProperty(PropertyName = "properties.volumeMounts")]
        public IList<VolumeMount> VolumeMounts { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (EnvironmentVariables != null)
            {
                foreach (var element in EnvironmentVariables)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (VolumeMounts != null)
            {
                foreach (var element1 in VolumeMounts)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
