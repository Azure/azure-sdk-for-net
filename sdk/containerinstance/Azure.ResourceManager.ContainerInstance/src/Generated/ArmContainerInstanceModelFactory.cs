// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using Azure.Core;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.ContainerInstance.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmContainerInstanceModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="ContainerInstance.ContainerGroupData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="zones"> The zones for the container group. </param>
        /// <returns> A new <see cref="ContainerInstance.ContainerGroupData"/> instance for mocking. </returns>
        public static ContainerGroupData ContainerGroupData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, IEnumerable<string> zones = null)
        {
            tags ??= new Dictionary<string, string>();
            zones ??= new List<string>();

            return new ContainerGroupData(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                zones?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ContainerGroupPatch"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="zones"> The zones for the container group. </param>
        /// <returns> A new <see cref="Models.ContainerGroupPatch"/> instance for mocking. </returns>
        public static ContainerGroupPatch ContainerGroupPatch(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, IEnumerable<string> zones = null)
        {
            tags ??= new Dictionary<string, string>();
            zones ??= new List<string>();

            return new ContainerGroupPatch(
                id,
                name,
                resourceType,
                systemData,
                tags,
                location,
                zones?.ToList(),
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ContainerGroupIPAddress"/>. </summary>
        /// <param name="ports"> The list of ports exposed on the container group. </param>
        /// <param name="addressType"> Specifies if the IP is exposed to the public internet or private VNET. </param>
        /// <param name="ip"> The IP exposed to the public internet. </param>
        /// <param name="dnsNameLabel"> The Dns name label for the IP. </param>
        /// <param name="autoGeneratedDomainNameLabelScope"> The value representing the security enum. The 'Unsecure' value is the default value if not selected and means the object's domain name label is not secured against subdomain takeover. The 'TenantReuse' value is the default value if selected and means the object's domain name label can be reused within the same tenant. The 'SubscriptionReuse' value means the object's domain name label can be reused within the same subscription. The 'ResourceGroupReuse' value means the object's domain name label can be reused within the same resource group. The 'NoReuse' value means the object's domain name label cannot be reused within the same resource group, subscription, or tenant. </param>
        /// <param name="fqdn"> The FQDN for the IP. </param>
        /// <returns> A new <see cref="Models.ContainerGroupIPAddress"/> instance for mocking. </returns>
        public static ContainerGroupIPAddress ContainerGroupIPAddress(IEnumerable<ContainerGroupPort> ports = null, ContainerGroupIPAddressType addressType = default, IPAddress ip = null, string dnsNameLabel = null, DnsNameLabelReusePolicy? autoGeneratedDomainNameLabelScope = null, string fqdn = null)
        {
            ports ??= new List<ContainerGroupPort>();

            return new ContainerGroupIPAddress(
                ports?.ToList(),
                addressType,
                ip,
                dnsNameLabel,
                autoGeneratedDomainNameLabelScope,
                fqdn,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ContainerInstanceUsage"/>. </summary>
        /// <param name="id"> Id of the usage result. </param>
        /// <param name="unit"> Unit of the usage result. </param>
        /// <param name="currentValue"> The current usage of the resource. </param>
        /// <param name="limit"> The maximum permitted usage of the resource. </param>
        /// <param name="name"> The name object of the resource. </param>
        /// <returns> A new <see cref="Models.ContainerInstanceUsage"/> instance for mocking. </returns>
        public static ContainerInstanceUsage ContainerInstanceUsage(string id = null, string unit = null, int? currentValue = null, int? limit = null, ContainerInstanceUsageName name = null)
        {
            return new ContainerInstanceUsage(
                id,
                unit,
                currentValue,
                limit,
                name,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ContainerInstanceUsageName"/>. </summary>
        /// <param name="value"> The name of the resource. </param>
        /// <param name="localizedValue"> The localized name of the resource. </param>
        /// <returns> A new <see cref="Models.ContainerInstanceUsageName"/> instance for mocking. </returns>
        public static ContainerInstanceUsageName ContainerInstanceUsageName(string value = null, string localizedValue = null)
        {
            return new ContainerInstanceUsageName(value, localizedValue, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ContainerLogs"/>. </summary>
        /// <param name="content"> The content of the log. </param>
        /// <returns> A new <see cref="Models.ContainerLogs"/> instance for mocking. </returns>
        public static ContainerLogs ContainerLogs(string content = null)
        {
            return new ContainerLogs(content, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ContainerExecResult"/>. </summary>
        /// <param name="webSocketUri"> The uri for the exec websocket. </param>
        /// <param name="password"> The password to start the exec command. </param>
        /// <returns> A new <see cref="Models.ContainerExecResult"/> instance for mocking. </returns>
        public static ContainerExecResult ContainerExecResult(Uri webSocketUri = null, string password = null)
        {
            return new ContainerExecResult(webSocketUri, password, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ContainerAttachResult"/>. </summary>
        /// <param name="webSocketUri"> The uri for the output stream from the attach. </param>
        /// <param name="password"> The password to the output stream from the attach. Send as an Authorization header value when connecting to the websocketUri. </param>
        /// <returns> A new <see cref="Models.ContainerAttachResult"/> instance for mocking. </returns>
        public static ContainerAttachResult ContainerAttachResult(Uri webSocketUri = null, string password = null)
        {
            return new ContainerAttachResult(webSocketUri, password, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.CachedImages"/>. </summary>
        /// <param name="osType"> The OS type of the cached image. </param>
        /// <param name="image"> The cached image name. </param>
        /// <returns> A new <see cref="Models.CachedImages"/> instance for mocking. </returns>
        public static CachedImages CachedImages(string osType = null, string image = null)
        {
            return new CachedImages(osType, image, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ContainerCapabilities"/>. </summary>
        /// <param name="resourceType"> The resource type that this capability describes. </param>
        /// <param name="osType"> The OS type that this capability describes. </param>
        /// <param name="location"> The resource location. </param>
        /// <param name="ipAddressType"> The ip address type that this capability describes. </param>
        /// <param name="gpu"> The GPU sku that this capability describes. </param>
        /// <param name="capabilities"> The supported capabilities. </param>
        /// <returns> A new <see cref="Models.ContainerCapabilities"/> instance for mocking. </returns>
        public static ContainerCapabilities ContainerCapabilities(string resourceType = null, string osType = null, AzureLocation? location = null, string ipAddressType = null, string gpu = null, ContainerSupportedCapabilities capabilities = null)
        {
            return new ContainerCapabilities(
                resourceType,
                osType,
                location,
                ipAddressType,
                gpu,
                capabilities,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ContainerSupportedCapabilities"/>. </summary>
        /// <param name="maxMemoryInGB"> The maximum allowed memory request in GB. </param>
        /// <param name="maxCpu"> The maximum allowed CPU request in cores. </param>
        /// <param name="maxGpuCount"> The maximum allowed GPU count. </param>
        /// <returns> A new <see cref="Models.ContainerSupportedCapabilities"/> instance for mocking. </returns>
        public static ContainerSupportedCapabilities ContainerSupportedCapabilities(float? maxMemoryInGB = null, float? maxCpu = null, float? maxGpuCount = null)
        {
            return new ContainerSupportedCapabilities(maxMemoryInGB, maxCpu, maxGpuCount, serializedAdditionalRawData: null);
        }
    }
}
