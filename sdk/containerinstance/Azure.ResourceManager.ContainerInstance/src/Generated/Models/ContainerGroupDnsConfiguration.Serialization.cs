// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.ContainerInstance.Models
{
    public partial class ContainerGroupDnsConfiguration : IUtf8JsonSerializable, Core.IModelSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((Core.IModelSerializable)this).Serialize(writer, new Core.Serialization.SerializableOptions());

        void Core.IModelSerializable.Serialize(Utf8JsonWriter writer, Core.Serialization.SerializableOptions options)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("nameServers"u8);
            writer.WriteStartArray();
            foreach (var item in NameServers)
            {
                writer.WriteStringValue(item);
            }
            writer.WriteEndArray();
            if (Optional.IsDefined(SearchDomains))
            {
                writer.WritePropertyName("searchDomains"u8);
                writer.WriteStringValue(SearchDomains);
            }
            if (Optional.IsDefined(Options))
            {
                writer.WritePropertyName("options"u8);
                writer.WriteStringValue(Options);
            }
            writer.WriteEndObject();
        }

        internal static ContainerGroupDnsConfiguration DeserializeContainerGroupDnsConfiguration(JsonElement element, Core.Serialization.SerializableOptions options = default)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IList<string> nameServers = default;
            Optional<string> searchDomains = default;
            Optional<string> options = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("nameServers"u8))
                {
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    nameServers = array;
                    continue;
                }
                if (property.NameEquals("searchDomains"u8))
                {
                    searchDomains = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("options"u8))
                {
                    options = property.Value.GetString();
                    continue;
                }
            }
            return new ContainerGroupDnsConfiguration(nameServers, searchDomains.Value, options.Value);
        }
    }
}
