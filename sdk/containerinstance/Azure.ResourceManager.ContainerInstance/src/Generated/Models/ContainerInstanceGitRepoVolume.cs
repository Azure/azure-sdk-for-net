// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.ResourceManager.ContainerInstance.Models
{
    /// <summary> Represents a volume that is populated with the contents of a git repository. </summary>
    public partial class ContainerInstanceGitRepoVolume
    {
        /// <summary> Initializes a new instance of ContainerInstanceGitRepoVolume. </summary>
        /// <param name="repository"> Repository URL. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="repository"/> is null. </exception>
        public ContainerInstanceGitRepoVolume(string repository)
        {
            if (repository == null)
            {
                throw new ArgumentNullException(nameof(repository));
            }

            Repository = repository;
        }

        /// <summary> Initializes a new instance of ContainerInstanceGitRepoVolume. </summary>
        /// <param name="directory"> Target directory name. Must not contain or start with &apos;..&apos;.  If &apos;.&apos; is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name. </param>
        /// <param name="repository"> Repository URL. </param>
        /// <param name="revision"> Commit hash for the specified revision. </param>
        internal ContainerInstanceGitRepoVolume(string directory, string repository, string revision)
        {
            Directory = directory;
            Repository = repository;
            Revision = revision;
        }

        /// <summary> Target directory name. Must not contain or start with &apos;..&apos;.  If &apos;.&apos; is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name. </summary>
        public string Directory { get; set; }
        /// <summary> Repository URL. </summary>
        public string Repository { get; set; }
        /// <summary> Commit hash for the specified revision. </summary>
        public string Revision { get; set; }
    }
}
