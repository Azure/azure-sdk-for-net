// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.ResourceManager.ContainerInstance.Models
{
    /// <summary> This profile allows the customers to customize the rolling update. </summary>
    public partial class NGroupRollingUpdateProfile
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="NGroupRollingUpdateProfile"/>. </summary>
        public NGroupRollingUpdateProfile()
        {
        }

        /// <summary> Initializes a new instance of <see cref="NGroupRollingUpdateProfile"/>. </summary>
        /// <param name="maxBatchPercent"> Maximum percentage of total Container Groups which can be updated simultaneously by rolling update in one batch. </param>
        /// <param name="maxUnhealthyPercent"> Maximum percentage of the updated Container Groups which can be in unhealthy state after each batch is updated. </param>
        /// <param name="pauseTimeBetweenBatches"> The wait time between batches after completing the one batch of the rolling update and starting the next batch. The time duration should be specified in ISO 8601 format for duration. </param>
        /// <param name="inPlaceUpdate"> Default is false. If set to true, the CGs will be updated in-place instead of creating new CG and deleting old ones. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal NGroupRollingUpdateProfile(int? maxBatchPercent, int? maxUnhealthyPercent, string pauseTimeBetweenBatches, bool? inPlaceUpdate, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            MaxBatchPercent = maxBatchPercent;
            MaxUnhealthyPercent = maxUnhealthyPercent;
            PauseTimeBetweenBatches = pauseTimeBetweenBatches;
            InPlaceUpdate = inPlaceUpdate;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Maximum percentage of total Container Groups which can be updated simultaneously by rolling update in one batch. </summary>
        public int? MaxBatchPercent { get; set; }
        /// <summary> Maximum percentage of the updated Container Groups which can be in unhealthy state after each batch is updated. </summary>
        public int? MaxUnhealthyPercent { get; set; }
        /// <summary> The wait time between batches after completing the one batch of the rolling update and starting the next batch. The time duration should be specified in ISO 8601 format for duration. </summary>
        public string PauseTimeBetweenBatches { get; set; }
        /// <summary> Default is false. If set to true, the CGs will be updated in-place instead of creating new CG and deleting old ones. </summary>
        public bool? InPlaceUpdate { get; set; }
    }
}
