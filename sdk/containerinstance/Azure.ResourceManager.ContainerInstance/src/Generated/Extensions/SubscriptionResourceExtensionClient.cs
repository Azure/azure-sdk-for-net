// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.ContainerInstance.Models;

namespace Azure.ResourceManager.ContainerInstance
{
    /// <summary> A class to add extension methods to SubscriptionResource. </summary>
    internal partial class SubscriptionResourceExtensionClient : ArmResource
    {
        private ClientDiagnostics _containerGroupClientDiagnostics;
        private ContainerGroupsRestOperations _containerGroupRestClient;
        private ClientDiagnostics _locationClientDiagnostics;
        private LocationRestOperations _locationRestClient;

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class for mocking. </summary>
        protected SubscriptionResourceExtensionClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal SubscriptionResourceExtensionClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics ContainerGroupClientDiagnostics => _containerGroupClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.ContainerInstance", ContainerGroupResource.ResourceType.Namespace, Diagnostics);
        private ContainerGroupsRestOperations ContainerGroupRestClient => _containerGroupRestClient ??= new ContainerGroupsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(ContainerGroupResource.ResourceType));
        private ClientDiagnostics LocationClientDiagnostics => _locationClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.ContainerInstance", ProviderConstants.DefaultProviderNamespace, Diagnostics);
        private LocationRestOperations LocationRestClient => _locationRestClient ??= new LocationRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint);

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary>
        /// Get a list of container groups in the specified subscription. This operation returns properties of each container group including containers, image registry credentials, restart policy, IP address type, OS type, state, and volumes.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ContainerInstance/containerGroups
        /// Operation Id: ContainerGroups_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ContainerGroupResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ContainerGroupResource> GetContainerGroupsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<ContainerGroupResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ContainerGroupClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetContainerGroups");
                scope.Start();
                try
                {
                    var response = await ContainerGroupRestClient.ListAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ContainerGroupResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ContainerGroupResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ContainerGroupClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetContainerGroups");
                scope.Start();
                try
                {
                    var response = await ContainerGroupRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ContainerGroupResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Get a list of container groups in the specified subscription. This operation returns properties of each container group including containers, image registry credentials, restart policy, IP address type, OS type, state, and volumes.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ContainerInstance/containerGroups
        /// Operation Id: ContainerGroups_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ContainerGroupResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ContainerGroupResource> GetContainerGroups(CancellationToken cancellationToken = default)
        {
            Page<ContainerGroupResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ContainerGroupClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetContainerGroups");
                scope.Start();
                try
                {
                    var response = ContainerGroupRestClient.List(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ContainerGroupResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ContainerGroupResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ContainerGroupClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetContainerGroups");
                scope.Start();
                try
                {
                    var response = ContainerGroupRestClient.ListNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ContainerGroupResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Get the usage for a subscription
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ContainerInstance/locations/{location}/usages
        /// Operation Id: Location_ListUsage
        /// </summary>
        /// <param name="location"> The identifier for the physical azure location. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ContainerInstanceUsage" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ContainerInstanceUsage> GetUsagesWithLocationAsync(AzureLocation location, CancellationToken cancellationToken = default)
        {
            async Task<Page<ContainerInstanceUsage>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = LocationClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetUsagesWithLocation");
                scope.Start();
                try
                {
                    var response = await LocationRestClient.ListUsageAsync(Id.SubscriptionId, location, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Get the usage for a subscription
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ContainerInstance/locations/{location}/usages
        /// Operation Id: Location_ListUsage
        /// </summary>
        /// <param name="location"> The identifier for the physical azure location. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ContainerInstanceUsage" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ContainerInstanceUsage> GetUsagesWithLocation(AzureLocation location, CancellationToken cancellationToken = default)
        {
            Page<ContainerInstanceUsage> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = LocationClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetUsagesWithLocation");
                scope.Start();
                try
                {
                    var response = LocationRestClient.ListUsage(Id.SubscriptionId, location, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, null, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, null);
        }

        /// <summary>
        /// Get the list of cached images on specific OS type for a subscription in a region.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ContainerInstance/locations/{location}/cachedImages
        /// Operation Id: Location_ListCachedImages
        /// </summary>
        /// <param name="location"> The identifier for the physical azure location. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="CachedImages" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<CachedImages> GetCachedImagesWithLocationAsync(AzureLocation location, CancellationToken cancellationToken = default)
        {
            async Task<Page<CachedImages>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = LocationClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetCachedImagesWithLocation");
                scope.Start();
                try
                {
                    var response = await LocationRestClient.ListCachedImagesAsync(Id.SubscriptionId, location, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<CachedImages>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = LocationClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetCachedImagesWithLocation");
                scope.Start();
                try
                {
                    var response = await LocationRestClient.ListCachedImagesNextPageAsync(nextLink, Id.SubscriptionId, location, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Get the list of cached images on specific OS type for a subscription in a region.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ContainerInstance/locations/{location}/cachedImages
        /// Operation Id: Location_ListCachedImages
        /// </summary>
        /// <param name="location"> The identifier for the physical azure location. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="CachedImages" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<CachedImages> GetCachedImagesWithLocation(AzureLocation location, CancellationToken cancellationToken = default)
        {
            Page<CachedImages> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = LocationClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetCachedImagesWithLocation");
                scope.Start();
                try
                {
                    var response = LocationRestClient.ListCachedImages(Id.SubscriptionId, location, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<CachedImages> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = LocationClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetCachedImagesWithLocation");
                scope.Start();
                try
                {
                    var response = LocationRestClient.ListCachedImagesNextPage(nextLink, Id.SubscriptionId, location, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Get the list of CPU/memory/GPU capabilities of a region.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ContainerInstance/locations/{location}/capabilities
        /// Operation Id: Location_ListCapabilities
        /// </summary>
        /// <param name="location"> The identifier for the physical azure location. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ContainerCapabilities" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ContainerCapabilities> GetCapabilitiesWithLocationAsync(AzureLocation location, CancellationToken cancellationToken = default)
        {
            async Task<Page<ContainerCapabilities>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = LocationClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetCapabilitiesWithLocation");
                scope.Start();
                try
                {
                    var response = await LocationRestClient.ListCapabilitiesAsync(Id.SubscriptionId, location, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ContainerCapabilities>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = LocationClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetCapabilitiesWithLocation");
                scope.Start();
                try
                {
                    var response = await LocationRestClient.ListCapabilitiesNextPageAsync(nextLink, Id.SubscriptionId, location, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Get the list of CPU/memory/GPU capabilities of a region.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ContainerInstance/locations/{location}/capabilities
        /// Operation Id: Location_ListCapabilities
        /// </summary>
        /// <param name="location"> The identifier for the physical azure location. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ContainerCapabilities" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ContainerCapabilities> GetCapabilitiesWithLocation(AzureLocation location, CancellationToken cancellationToken = default)
        {
            Page<ContainerCapabilities> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = LocationClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetCapabilitiesWithLocation");
                scope.Start();
                try
                {
                    var response = LocationRestClient.ListCapabilities(Id.SubscriptionId, location, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ContainerCapabilities> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = LocationClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetCapabilitiesWithLocation");
                scope.Start();
                try
                {
                    var response = LocationRestClient.ListCapabilitiesNextPage(nextLink, Id.SubscriptionId, location, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value, response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
