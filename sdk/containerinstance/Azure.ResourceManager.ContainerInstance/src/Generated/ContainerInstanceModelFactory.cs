// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using Azure.Core;
using Azure.ResourceManager.ContainerInstance;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.ContainerInstance.Models
{
    /// <summary> Model factory for generated models. </summary>
    public static partial class ContainerInstanceModelFactory
    {
        /// <summary> Initializes a new instance of ContainerGroupData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="identity"> The identity of the container group, if configured. </param>
        /// <param name="provisioningState"> The provisioning state of the container group. This only appears in the response. </param>
        /// <param name="containers"> The containers within the container group. </param>
        /// <param name="imageRegistryCredentials"> The image registry credentials by which the container group is created from. </param>
        /// <param name="restartPolicy">
        /// Restart policy for all containers within the container group. 
        /// - `Always` Always restart
        /// - `OnFailure` Restart on failure
        /// - `Never` Never restart
        /// 
        /// </param>
        /// <param name="ipAddress"> The IP address type of the container group. </param>
        /// <param name="osType"> The operating system type required by the containers in the container group. </param>
        /// <param name="volumes"> The list of volumes that can be mounted by containers in this container group. </param>
        /// <param name="instanceView"> The instance view of the container group. Only valid in response. </param>
        /// <param name="diagnosticsLogAnalytics"> The diagnostic information for a container group. </param>
        /// <param name="subnetIds"> The subnet resource IDs for a container group. </param>
        /// <param name="dnsConfig"> The DNS config information for a container group. </param>
        /// <param name="sku"> The SKU for a container group. </param>
        /// <param name="encryptionProperties"> The encryption properties for a container group. </param>
        /// <param name="initContainers"> The init containers for a container group. </param>
        /// <param name="zones"> The zones for the container group. </param>
        /// <returns> A new <see cref="ContainerInstance.ContainerGroupData"/> instance for mocking. </returns>
        public static ContainerGroupData ContainerGroupData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ManagedServiceIdentity identity = null, string provisioningState = null, IEnumerable<ContainerInstanceContainer> containers = null, IEnumerable<ContainerGroupImageRegistryCredential> imageRegistryCredentials = null, ContainerGroupRestartPolicy? restartPolicy = null, ContainerGroupIPAddress ipAddress = null, ContainerInstanceOperatingSystemType osType = default, IEnumerable<ContainerVolume> volumes = null, ContainerGroupInstanceView instanceView = null, ContainerGroupLogAnalytics diagnosticsLogAnalytics = null, IEnumerable<ContainerGroupSubnetId> subnetIds = null, ContainerGroupDnsConfiguration dnsConfig = null, ContainerGroupSku? sku = null, ContainerGroupEncryptionProperties encryptionProperties = null, IEnumerable<InitContainerDefinitionContent> initContainers = null, IEnumerable<string> zones = null)
        {
            tags ??= new Dictionary<string, string>();
            containers ??= new List<ContainerInstanceContainer>();
            imageRegistryCredentials ??= new List<ContainerGroupImageRegistryCredential>();
            volumes ??= new List<ContainerVolume>();
            subnetIds ??= new List<ContainerGroupSubnetId>();
            initContainers ??= new List<InitContainerDefinitionContent>();
            zones ??= new List<string>();

            return new ContainerGroupData(id, name, resourceType, systemData, tags, location, identity, provisioningState, containers?.ToList(), imageRegistryCredentials?.ToList(), restartPolicy, ipAddress, osType, volumes?.ToList(), instanceView, new ContainerGroupDiagnostics(diagnosticsLogAnalytics), subnetIds?.ToList(), dnsConfig, sku, encryptionProperties, initContainers?.ToList(), zones?.ToList());
        }

        /// <summary> Initializes a new instance of ContainerInstanceContainer. </summary>
        /// <param name="name"> The user-provided name of the container instance. </param>
        /// <param name="image"> The name of the image used to create the container instance. </param>
        /// <param name="command"> The commands to execute within the container instance in exec form. </param>
        /// <param name="ports"> The exposed ports on the container instance. </param>
        /// <param name="environmentVariables"> The environment variables to set in the container instance. </param>
        /// <param name="instanceView"> The instance view of the container instance. Only valid in response. </param>
        /// <param name="resources"> The resource requirements of the container instance. </param>
        /// <param name="volumeMounts"> The volume mounts available to the container instance. </param>
        /// <param name="livenessProbe"> The liveness probe. </param>
        /// <param name="readinessProbe"> The readiness probe. </param>
        /// <returns> A new <see cref="Models.ContainerInstanceContainer"/> instance for mocking. </returns>
        public static ContainerInstanceContainer ContainerInstanceContainer(string name = null, string image = null, IEnumerable<string> command = null, IEnumerable<ContainerPort> ports = null, IEnumerable<ContainerEnvironmentVariable> environmentVariables = null, ContainerInstanceView instanceView = null, ContainerResourceRequirements resources = null, IEnumerable<ContainerVolumeMount> volumeMounts = null, ContainerProbe livenessProbe = null, ContainerProbe readinessProbe = null)
        {
            command ??= new List<string>();
            ports ??= new List<ContainerPort>();
            environmentVariables ??= new List<ContainerEnvironmentVariable>();
            volumeMounts ??= new List<ContainerVolumeMount>();

            return new ContainerInstanceContainer(name, image, command?.ToList(), ports?.ToList(), environmentVariables?.ToList(), instanceView, resources, volumeMounts?.ToList(), livenessProbe, readinessProbe);
        }

        /// <summary> Initializes a new instance of ContainerPort. </summary>
        /// <param name="protocol"> The protocol associated with the port. </param>
        /// <param name="port"> The port number exposed within the container group. </param>
        /// <returns> A new <see cref="Models.ContainerPort"/> instance for mocking. </returns>
        public static ContainerPort ContainerPort(ContainerNetworkProtocol? protocol = null, int port = default)
        {
            return new ContainerPort(protocol, port);
        }

        /// <summary> Initializes a new instance of ContainerEnvironmentVariable. </summary>
        /// <param name="name"> The name of the environment variable. </param>
        /// <param name="value"> The value of the environment variable. </param>
        /// <param name="secureValue"> The value of the secure environment variable. </param>
        /// <returns> A new <see cref="Models.ContainerEnvironmentVariable"/> instance for mocking. </returns>
        public static ContainerEnvironmentVariable ContainerEnvironmentVariable(string name = null, string value = null, string secureValue = null)
        {
            return new ContainerEnvironmentVariable(name, value, secureValue);
        }

        /// <summary> Initializes a new instance of ContainerInstanceView. </summary>
        /// <param name="restartCount"> The number of times that the container instance has been restarted. </param>
        /// <param name="currentState"> Current container instance state. </param>
        /// <param name="previousState"> Previous container instance state. </param>
        /// <param name="events"> The events of the container instance. </param>
        /// <returns> A new <see cref="Models.ContainerInstanceView"/> instance for mocking. </returns>
        public static ContainerInstanceView ContainerInstanceView(int? restartCount = null, ContainerState currentState = null, ContainerState previousState = null, IEnumerable<ContainerEvent> events = null)
        {
            events ??= new List<ContainerEvent>();

            return new ContainerInstanceView(restartCount, currentState, previousState, events?.ToList());
        }

        /// <summary> Initializes a new instance of ContainerState. </summary>
        /// <param name="state"> The state of the container instance. </param>
        /// <param name="startOn"> The date-time when the container instance state started. </param>
        /// <param name="exitCode"> The container instance exit codes correspond to those from the `docker run` command. </param>
        /// <param name="finishOn"> The date-time when the container instance state finished. </param>
        /// <param name="detailStatus"> The human-readable status of the container instance state. </param>
        /// <returns> A new <see cref="Models.ContainerState"/> instance for mocking. </returns>
        public static ContainerState ContainerState(string state = null, DateTimeOffset? startOn = null, int? exitCode = null, DateTimeOffset? finishOn = null, string detailStatus = null)
        {
            return new ContainerState(state, startOn, exitCode, finishOn, detailStatus);
        }

        /// <summary> Initializes a new instance of ContainerEvent. </summary>
        /// <param name="count"> The count of the event. </param>
        /// <param name="firstTimestamp"> The date-time of the earliest logged event. </param>
        /// <param name="lastTimestamp"> The date-time of the latest logged event. </param>
        /// <param name="name"> The event name. </param>
        /// <param name="message"> The event message. </param>
        /// <param name="eventType"> The event type. </param>
        /// <returns> A new <see cref="Models.ContainerEvent"/> instance for mocking. </returns>
        public static ContainerEvent ContainerEvent(int? count = null, DateTimeOffset? firstTimestamp = null, DateTimeOffset? lastTimestamp = null, string name = null, string message = null, string eventType = null)
        {
            return new ContainerEvent(count, firstTimestamp, lastTimestamp, name, message, eventType);
        }

        /// <summary> Initializes a new instance of ContainerResourceRequirements. </summary>
        /// <param name="requests"> The resource requests of this container instance. </param>
        /// <param name="limits"> The resource limits of this container instance. </param>
        /// <returns> A new <see cref="Models.ContainerResourceRequirements"/> instance for mocking. </returns>
        public static ContainerResourceRequirements ContainerResourceRequirements(ContainerResourceRequestsContent requests = null, ContainerResourceLimits limits = null)
        {
            return new ContainerResourceRequirements(requests, limits);
        }

        /// <summary> Initializes a new instance of ContainerResourceRequestsContent. </summary>
        /// <param name="memoryInGB"> The memory request in GB of this container instance. </param>
        /// <param name="cpu"> The CPU request of this container instance. </param>
        /// <param name="gpu"> The GPU request of this container instance. </param>
        /// <returns> A new <see cref="Models.ContainerResourceRequestsContent"/> instance for mocking. </returns>
        public static ContainerResourceRequestsContent ContainerResourceRequestsContent(double memoryInGB = default, double cpu = default, ContainerGpuResourceInfo gpu = null)
        {
            return new ContainerResourceRequestsContent(memoryInGB, cpu, gpu);
        }

        /// <summary> Initializes a new instance of ContainerResourceLimits. </summary>
        /// <param name="memoryInGB"> The memory limit in GB of this container instance. </param>
        /// <param name="cpu"> The CPU limit of this container instance. </param>
        /// <param name="gpu"> The GPU limit of this container instance. </param>
        /// <returns> A new <see cref="Models.ContainerResourceLimits"/> instance for mocking. </returns>
        public static ContainerResourceLimits ContainerResourceLimits(double? memoryInGB = null, double? cpu = null, ContainerGpuResourceInfo gpu = null)
        {
            return new ContainerResourceLimits(memoryInGB, cpu, gpu);
        }

        /// <summary> Initializes a new instance of ContainerVolumeMount. </summary>
        /// <param name="name"> The name of the volume mount. </param>
        /// <param name="mountPath"> The path within the container where the volume should be mounted. Must not contain colon (:). </param>
        /// <param name="isReadOnly"> The flag indicating whether the volume mount is read-only. </param>
        /// <returns> A new <see cref="Models.ContainerVolumeMount"/> instance for mocking. </returns>
        public static ContainerVolumeMount ContainerVolumeMount(string name = null, string mountPath = null, bool? isReadOnly = null)
        {
            return new ContainerVolumeMount(name, mountPath, isReadOnly);
        }

        /// <summary> Initializes a new instance of ContainerProbe. </summary>
        /// <param name="execCommand"> The execution command to probe. </param>
        /// <param name="httpGet"> The Http Get settings to probe. </param>
        /// <param name="initialDelayInSeconds"> The initial delay seconds. </param>
        /// <param name="periodInSeconds"> The period seconds. </param>
        /// <param name="failureThreshold"> The failure threshold. </param>
        /// <param name="successThreshold"> The success threshold. </param>
        /// <param name="timeoutInSeconds"> The timeout seconds. </param>
        /// <returns> A new <see cref="Models.ContainerProbe"/> instance for mocking. </returns>
        public static ContainerProbe ContainerProbe(IEnumerable<string> execCommand = null, ContainerHttpGet httpGet = null, int? initialDelayInSeconds = null, int? periodInSeconds = null, int? failureThreshold = null, int? successThreshold = null, int? timeoutInSeconds = null)
        {
            execCommand ??= new List<string>();

            return new ContainerProbe(new ContainerExec(execCommand?.ToList()), httpGet, initialDelayInSeconds, periodInSeconds, failureThreshold, successThreshold, timeoutInSeconds);
        }

        /// <summary> Initializes a new instance of ContainerHttpGet. </summary>
        /// <param name="path"> The path to probe. </param>
        /// <param name="port"> The port number to probe. </param>
        /// <param name="scheme"> The scheme. </param>
        /// <param name="httpHeaders"> The HTTP headers. </param>
        /// <returns> A new <see cref="Models.ContainerHttpGet"/> instance for mocking. </returns>
        public static ContainerHttpGet ContainerHttpGet(string path = null, int port = default, ContainerHttpGetScheme? scheme = null, IEnumerable<ContainerHttpHeader> httpHeaders = null)
        {
            httpHeaders ??= new List<ContainerHttpHeader>();

            return new ContainerHttpGet(path, port, scheme, httpHeaders?.ToList());
        }

        /// <summary> Initializes a new instance of ContainerHttpHeader. </summary>
        /// <param name="name"> The header name. </param>
        /// <param name="value"> The header value. </param>
        /// <returns> A new <see cref="Models.ContainerHttpHeader"/> instance for mocking. </returns>
        public static ContainerHttpHeader ContainerHttpHeader(string name = null, string value = null)
        {
            return new ContainerHttpHeader(name, value);
        }

        /// <summary> Initializes a new instance of ContainerGroupImageRegistryCredential. </summary>
        /// <param name="server"> The Docker image registry server without a protocol such as &quot;http&quot; and &quot;https&quot;. </param>
        /// <param name="username"> The username for the private registry. </param>
        /// <param name="password"> The password for the private registry. </param>
        /// <param name="identity"> The identity for the private registry. </param>
        /// <param name="identityUri"> The identity URL for the private registry. </param>
        /// <returns> A new <see cref="Models.ContainerGroupImageRegistryCredential"/> instance for mocking. </returns>
        public static ContainerGroupImageRegistryCredential ContainerGroupImageRegistryCredential(string server = null, string username = null, string password = null, string identity = null, Uri identityUri = null)
        {
            return new ContainerGroupImageRegistryCredential(server, username, password, identity, identityUri);
        }

        /// <summary> Initializes a new instance of ContainerGroupIPAddress. </summary>
        /// <param name="ports"> The list of ports exposed on the container group. </param>
        /// <param name="addressType"> Specifies if the IP is exposed to the public internet or private VNET. </param>
        /// <param name="ip"> The IP exposed to the public internet. </param>
        /// <param name="dnsNameLabel"> The Dns name label for the IP. </param>
        /// <param name="dnsNameLabelReusePolicy"> The value representing the security enum. </param>
        /// <param name="fqdn"> The FQDN for the IP. </param>
        /// <returns> A new <see cref="Models.ContainerGroupIPAddress"/> instance for mocking. </returns>
        public static ContainerGroupIPAddress ContainerGroupIPAddress(IEnumerable<ContainerGroupPort> ports = null, ContainerGroupIPAddressType addressType = default, IPAddress ip = null, string dnsNameLabel = null, AutoGeneratedDomainNameLabelScope? dnsNameLabelReusePolicy = null, string fqdn = null)
        {
            ports ??= new List<ContainerGroupPort>();

            return new ContainerGroupIPAddress(ports?.ToList(), addressType, ip, dnsNameLabel, dnsNameLabelReusePolicy, fqdn);
        }

        /// <summary> Initializes a new instance of ContainerGroupPort. </summary>
        /// <param name="protocol"> The protocol associated with the port. </param>
        /// <param name="port"> The port number. </param>
        /// <returns> A new <see cref="Models.ContainerGroupPort"/> instance for mocking. </returns>
        public static ContainerGroupPort ContainerGroupPort(ContainerGroupNetworkProtocol? protocol = null, int port = default)
        {
            return new ContainerGroupPort(protocol, port);
        }

        /// <summary> Initializes a new instance of ContainerVolume. </summary>
        /// <param name="name"> The name of the volume. </param>
        /// <param name="azureFile"> The Azure File volume. </param>
        /// <param name="emptyDir"> The empty directory volume. </param>
        /// <param name="secret"> The secret volume. </param>
        /// <param name="gitRepo"> The git repo volume. </param>
        /// <returns> A new <see cref="Models.ContainerVolume"/> instance for mocking. </returns>
        public static ContainerVolume ContainerVolume(string name = null, ContainerInstanceAzureFileVolume azureFile = null, BinaryData emptyDir = null, IDictionary<string, string> secret = null, ContainerInstanceGitRepoVolume gitRepo = null)
        {
            secret ??= new Dictionary<string, string>();

            return new ContainerVolume(name, azureFile, emptyDir, secret, gitRepo);
        }

        /// <summary> Initializes a new instance of ContainerInstanceAzureFileVolume. </summary>
        /// <param name="shareName"> The name of the Azure File share to be mounted as a volume. </param>
        /// <param name="isReadOnly"> The flag indicating whether the Azure File shared mounted as a volume is read-only. </param>
        /// <param name="storageAccountName"> The name of the storage account that contains the Azure File share. </param>
        /// <param name="storageAccountKey"> The storage account access key used to access the Azure File share. </param>
        /// <returns> A new <see cref="Models.ContainerInstanceAzureFileVolume"/> instance for mocking. </returns>
        public static ContainerInstanceAzureFileVolume ContainerInstanceAzureFileVolume(string shareName = null, bool? isReadOnly = null, string storageAccountName = null, string storageAccountKey = null)
        {
            return new ContainerInstanceAzureFileVolume(shareName, isReadOnly, storageAccountName, storageAccountKey);
        }

        /// <summary> Initializes a new instance of ContainerInstanceGitRepoVolume. </summary>
        /// <param name="directory"> Target directory name. Must not contain or start with &apos;..&apos;.  If &apos;.&apos; is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name. </param>
        /// <param name="repository"> Repository URL. </param>
        /// <param name="revision"> Commit hash for the specified revision. </param>
        /// <returns> A new <see cref="Models.ContainerInstanceGitRepoVolume"/> instance for mocking. </returns>
        public static ContainerInstanceGitRepoVolume ContainerInstanceGitRepoVolume(string directory = null, string repository = null, string revision = null)
        {
            return new ContainerInstanceGitRepoVolume(directory, repository, revision);
        }

        /// <summary> Initializes a new instance of ContainerGroupInstanceView. </summary>
        /// <param name="events"> The events of this container group. </param>
        /// <param name="state"> The state of the container group. Only valid in response. </param>
        /// <returns> A new <see cref="Models.ContainerGroupInstanceView"/> instance for mocking. </returns>
        public static ContainerGroupInstanceView ContainerGroupInstanceView(IEnumerable<ContainerEvent> events = null, string state = null)
        {
            events ??= new List<ContainerEvent>();

            return new ContainerGroupInstanceView(events?.ToList(), state);
        }

        /// <summary> Initializes a new instance of ContainerGroupLogAnalytics. </summary>
        /// <param name="workspaceId"> The workspace id for log analytics. </param>
        /// <param name="workspaceKey"> The workspace key for log analytics. </param>
        /// <param name="logType"> The log type to be used. </param>
        /// <param name="metadata"> Metadata for log analytics. </param>
        /// <param name="workspaceResourceId"> The workspace resource id for log analytics. </param>
        /// <returns> A new <see cref="Models.ContainerGroupLogAnalytics"/> instance for mocking. </returns>
        public static ContainerGroupLogAnalytics ContainerGroupLogAnalytics(string workspaceId = null, string workspaceKey = null, ContainerGroupLogAnalyticsLogType? logType = null, IDictionary<string, string> metadata = null, ResourceIdentifier workspaceResourceId = null)
        {
            metadata ??= new Dictionary<string, string>();

            return new ContainerGroupLogAnalytics(workspaceId, workspaceKey, logType, metadata, workspaceResourceId);
        }

        /// <summary> Initializes a new instance of ContainerGroupSubnetId. </summary>
        /// <param name="id"> Resource ID of virtual network and subnet. </param>
        /// <param name="name"> Friendly name for the subnet. </param>
        /// <returns> A new <see cref="Models.ContainerGroupSubnetId"/> instance for mocking. </returns>
        public static ContainerGroupSubnetId ContainerGroupSubnetId(ResourceIdentifier id = null, string name = null)
        {
            return new ContainerGroupSubnetId(id, name);
        }

        /// <summary> Initializes a new instance of ContainerGroupDnsConfiguration. </summary>
        /// <param name="nameServers"> The DNS servers for the container group. </param>
        /// <param name="searchDomains"> The DNS search domains for hostname lookup in the container group. </param>
        /// <param name="options"> The DNS options for the container group. </param>
        /// <returns> A new <see cref="Models.ContainerGroupDnsConfiguration"/> instance for mocking. </returns>
        public static ContainerGroupDnsConfiguration ContainerGroupDnsConfiguration(IEnumerable<string> nameServers = null, string searchDomains = null, string options = null)
        {
            nameServers ??= new List<string>();

            return new ContainerGroupDnsConfiguration(nameServers?.ToList(), searchDomains, options);
        }

        /// <summary> Initializes a new instance of InitContainerDefinitionContent. </summary>
        /// <param name="name"> The name for the init container. </param>
        /// <param name="image"> The image of the init container. </param>
        /// <param name="command"> The command to execute within the init container in exec form. </param>
        /// <param name="environmentVariables"> The environment variables to set in the init container. </param>
        /// <param name="instanceView"> The instance view of the init container. Only valid in response. </param>
        /// <param name="volumeMounts"> The volume mounts available to the init container. </param>
        /// <returns> A new <see cref="Models.InitContainerDefinitionContent"/> instance for mocking. </returns>
        public static InitContainerDefinitionContent InitContainerDefinitionContent(string name = null, string image = null, IEnumerable<string> command = null, IEnumerable<ContainerEnvironmentVariable> environmentVariables = null, InitContainerPropertiesDefinitionInstanceView instanceView = null, IEnumerable<ContainerVolumeMount> volumeMounts = null)
        {
            command ??= new List<string>();
            environmentVariables ??= new List<ContainerEnvironmentVariable>();
            volumeMounts ??= new List<ContainerVolumeMount>();

            return new InitContainerDefinitionContent(name, image, command?.ToList(), environmentVariables?.ToList(), instanceView, volumeMounts?.ToList());
        }

        /// <summary> Initializes a new instance of InitContainerPropertiesDefinitionInstanceView. </summary>
        /// <param name="restartCount"> The number of times that the init container has been restarted. </param>
        /// <param name="currentState"> The current state of the init container. </param>
        /// <param name="previousState"> The previous state of the init container. </param>
        /// <param name="events"> The events of the init container. </param>
        /// <returns> A new <see cref="Models.InitContainerPropertiesDefinitionInstanceView"/> instance for mocking. </returns>
        public static InitContainerPropertiesDefinitionInstanceView InitContainerPropertiesDefinitionInstanceView(int? restartCount = null, ContainerState currentState = null, ContainerState previousState = null, IEnumerable<ContainerEvent> events = null)
        {
            events ??= new List<ContainerEvent>();

            return new InitContainerPropertiesDefinitionInstanceView(restartCount, currentState, previousState, events?.ToList());
        }

        /// <summary> Initializes a new instance of ContainerGroupPatch. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="zones"> The zones for the container group. </param>
        /// <returns> A new <see cref="Models.ContainerGroupPatch"/> instance for mocking. </returns>
        public static ContainerGroupPatch ContainerGroupPatch(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, IEnumerable<string> zones = null)
        {
            tags ??= new Dictionary<string, string>();
            zones ??= new List<string>();

            return new ContainerGroupPatch(id, name, resourceType, systemData, tags, location, zones?.ToList());
        }

        /// <summary> Initializes a new instance of ContainerInstanceUsage. </summary>
        /// <param name="unit"> Unit of the usage result. </param>
        /// <param name="currentValue"> The current usage of the resource. </param>
        /// <param name="limit"> The maximum permitted usage of the resource. </param>
        /// <param name="name"> The name object of the resource. </param>
        /// <returns> A new <see cref="Models.ContainerInstanceUsage"/> instance for mocking. </returns>
        public static ContainerInstanceUsage ContainerInstanceUsage(string unit = null, int? currentValue = null, int? limit = null, ContainerInstanceUsageName name = null)
        {
            return new ContainerInstanceUsage(unit, currentValue, limit, name);
        }

        /// <summary> Initializes a new instance of ContainerInstanceUsageName. </summary>
        /// <param name="value"> The name of the resource. </param>
        /// <param name="localizedValue"> The localized name of the resource. </param>
        /// <returns> A new <see cref="Models.ContainerInstanceUsageName"/> instance for mocking. </returns>
        public static ContainerInstanceUsageName ContainerInstanceUsageName(string value = null, string localizedValue = null)
        {
            return new ContainerInstanceUsageName(value, localizedValue);
        }

        /// <summary> Initializes a new instance of ContainerLogs. </summary>
        /// <param name="content"> The content of the log. </param>
        /// <returns> A new <see cref="Models.ContainerLogs"/> instance for mocking. </returns>
        public static ContainerLogs ContainerLogs(string content = null)
        {
            return new ContainerLogs(content);
        }

        /// <summary> Initializes a new instance of ContainerExecResult. </summary>
        /// <param name="webSocketUri"> The uri for the exec websocket. </param>
        /// <param name="password"> The password to start the exec command. </param>
        /// <returns> A new <see cref="Models.ContainerExecResult"/> instance for mocking. </returns>
        public static ContainerExecResult ContainerExecResult(Uri webSocketUri = null, string password = null)
        {
            return new ContainerExecResult(webSocketUri, password);
        }

        /// <summary> Initializes a new instance of ContainerAttachResult. </summary>
        /// <param name="webSocketUri"> The uri for the output stream from the attach. </param>
        /// <param name="password"> The password to the output stream from the attach. Send as an Authorization header value when connecting to the websocketUri. </param>
        /// <returns> A new <see cref="Models.ContainerAttachResult"/> instance for mocking. </returns>
        public static ContainerAttachResult ContainerAttachResult(Uri webSocketUri = null, string password = null)
        {
            return new ContainerAttachResult(webSocketUri, password);
        }

        /// <summary> Initializes a new instance of CachedImages. </summary>
        /// <param name="osType"> The OS type of the cached image. </param>
        /// <param name="image"> The cached image name. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="osType"/> or <paramref name="image"/> is null. </exception>
        /// <returns> A new <see cref="Models.CachedImages"/> instance for mocking. </returns>
        public static CachedImages CachedImages(string osType = null, string image = null)
        {
            if (osType == null)
            {
                throw new ArgumentNullException(nameof(osType));
            }
            if (image == null)
            {
                throw new ArgumentNullException(nameof(image));
            }

            return new CachedImages(osType, image);
        }

        /// <summary> Initializes a new instance of ContainerCapabilities. </summary>
        /// <param name="resourceType"> The resource type that this capability describes. </param>
        /// <param name="osType"> The OS type that this capability describes. </param>
        /// <param name="location"> The resource location. </param>
        /// <param name="ipAddressType"> The ip address type that this capability describes. </param>
        /// <param name="gpu"> The GPU sku that this capability describes. </param>
        /// <param name="capabilities"> The supported capabilities. </param>
        /// <returns> A new <see cref="Models.ContainerCapabilities"/> instance for mocking. </returns>
        public static ContainerCapabilities ContainerCapabilities(string resourceType = null, string osType = null, AzureLocation? location = null, string ipAddressType = null, string gpu = null, ContainerSupportedCapabilities capabilities = null)
        {
            return new ContainerCapabilities(resourceType, osType, location, ipAddressType, gpu, capabilities);
        }

        /// <summary> Initializes a new instance of ContainerSupportedCapabilities. </summary>
        /// <param name="maxMemoryInGB"> The maximum allowed memory request in GB. </param>
        /// <param name="maxCpu"> The maximum allowed CPU request in cores. </param>
        /// <param name="maxGpuCount"> The maximum allowed GPU count. </param>
        /// <returns> A new <see cref="Models.ContainerSupportedCapabilities"/> instance for mocking. </returns>
        public static ContainerSupportedCapabilities ContainerSupportedCapabilities(float? maxMemoryInGB = null, float? maxCpu = null, float? maxGpuCount = null)
        {
            return new ContainerSupportedCapabilities(maxMemoryInGB, maxCpu, maxGpuCount);
        }
    }
}
