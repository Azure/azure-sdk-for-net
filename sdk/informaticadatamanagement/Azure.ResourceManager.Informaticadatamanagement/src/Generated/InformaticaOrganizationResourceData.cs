// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;
using Azure.ResourceManager.Informaticadatamanagement.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Informaticadatamanagement
{
    /// <summary>
    /// A class representing the InformaticaOrganizationResource data model.
    /// An Organization Resource by Informatica.
    /// </summary>
    public partial class InformaticaOrganizationResourceData : TrackedResourceData
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="InformaticaOrganizationResourceData"/>. </summary>
        /// <param name="location"> The location. </param>
        public InformaticaOrganizationResourceData(AzureLocation location) : base(location)
        {
        }

        /// <summary> Initializes a new instance of <see cref="InformaticaOrganizationResourceData"/>. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="provisioningState"> Provisioning State of the resource. </param>
        /// <param name="informaticaProperties"> Informatica Organization properties. </param>
        /// <param name="marketplaceDetails"> Marketplace details. </param>
        /// <param name="userDetails"> User details. </param>
        /// <param name="companyDetails"> Company details. </param>
        /// <param name="linkOrganization"> Link Organization. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal InformaticaOrganizationResourceData(ResourceIdentifier id, string name, ResourceType resourceType, SystemData systemData, IDictionary<string, string> tags, AzureLocation location, ProvisioningState? provisioningState, InformaticaProperties informaticaProperties, MarketplaceDetails marketplaceDetails, UserDetails userDetails, CompanyDetails companyDetails, LinkOrganization linkOrganization, IDictionary<string, BinaryData> serializedAdditionalRawData) : base(id, name, resourceType, systemData, tags, location)
        {
            ProvisioningState = provisioningState;
            InformaticaProperties = informaticaProperties;
            MarketplaceDetails = marketplaceDetails;
            UserDetails = userDetails;
            CompanyDetails = companyDetails;
            LinkOrganization = linkOrganization;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> Initializes a new instance of <see cref="InformaticaOrganizationResourceData"/> for deserialization. </summary>
        internal InformaticaOrganizationResourceData()
        {
        }

        /// <summary> Provisioning State of the resource. </summary>
        public ProvisioningState? ProvisioningState { get; }
        /// <summary> Informatica Organization properties. </summary>
        public InformaticaProperties InformaticaProperties { get; set; }
        /// <summary> Marketplace details. </summary>
        public MarketplaceDetails MarketplaceDetails { get; set; }
        /// <summary> User details. </summary>
        public UserDetails UserDetails { get; set; }
        /// <summary> Company details. </summary>
        public CompanyDetails CompanyDetails { get; set; }
        /// <summary> Link Organization. </summary>
        internal LinkOrganization LinkOrganization { get; set; }
        /// <summary> Link organization token. </summary>
        public string LinkOrganizationToken
        {
            get => LinkOrganization is null ? default : LinkOrganization.Token;
            set
            {
                if (LinkOrganization is null)
                    LinkOrganization = new LinkOrganization();
                LinkOrganization.Token = value;
            }
        }
    }
}
