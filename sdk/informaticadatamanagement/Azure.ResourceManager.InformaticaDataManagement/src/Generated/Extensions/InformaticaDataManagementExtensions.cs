// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.InformaticaDataManagement.Mocking;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.InformaticaDataManagement
{
    /// <summary> A class to add extension methods to Azure.ResourceManager.InformaticaDataManagement. </summary>
    public static partial class InformaticaDataManagementExtensions
    {
        /// <param name="client"></param>
        private static MockableInformaticaDataManagementArmClient GetMockableInformaticaDataManagementArmClient(ArmClient client)
        {
            return client.GetCachedClient(client0 => new MockableInformaticaDataManagementArmClient(client0, ResourceIdentifier.Root));
        }

        /// <param name="resourceGroupResource"></param>
        private static MockableInformaticaDataManagementResourceGroupResource GetMockableInformaticaDataManagementResourceGroupResource(ResourceGroupResource resourceGroupResource)
        {
            return resourceGroupResource.GetCachedClient(client => new MockableInformaticaDataManagementResourceGroupResource(client, resourceGroupResource.Id));
        }

        /// <param name="subscriptionResource"></param>
        private static MockableInformaticaDataManagementSubscriptionResource GetMockableInformaticaDataManagementSubscriptionResource(SubscriptionResource subscriptionResource)
        {
            return subscriptionResource.GetCachedClient(client => new MockableInformaticaDataManagementSubscriptionResource(client, subscriptionResource.Id));
        }

        /// <summary> Gets an object representing a <see cref="InformaticaOrganizationResource"/> along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="client"> The <see cref="ArmClient"/> the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="InformaticaOrganizationResource"/> object. </returns>
        public static InformaticaOrganizationResource GetInformaticaOrganizationResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableInformaticaDataManagementArmClient(client).GetInformaticaOrganizationResource(id);
        }

        /// <summary> Gets an object representing a <see cref="InformaticaServerlessRuntimeResource"/> along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="client"> The <see cref="ArmClient"/> the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="InformaticaServerlessRuntimeResource"/> object. </returns>
        public static InformaticaServerlessRuntimeResource GetInformaticaServerlessRuntimeResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableInformaticaDataManagementArmClient(client).GetInformaticaServerlessRuntimeResource(id);
        }

        /// <summary> Gets a collection of InformaticaOrganizations in the <see cref="ResourceGroupResource"/>. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource"/> the method will execute against. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> is null. </exception>
        /// <returns> An object representing collection of InformaticaOrganizations and their operations over a InformaticaOrganizationResource. </returns>
        public static InformaticaOrganizationCollection GetInformaticaOrganizations(this ResourceGroupResource resourceGroupResource)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableInformaticaDataManagementResourceGroupResource(resourceGroupResource).GetInformaticaOrganizations();
        }

        /// <summary> Get a InformaticaOrganizationResource. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource"/> the method will execute against. </param>
        /// <param name="organizationName"> Name of the Organizations resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<InformaticaOrganizationResource>> GetInformaticaOrganizationAsync(this ResourceGroupResource resourceGroupResource, string organizationName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return await GetMockableInformaticaDataManagementResourceGroupResource(resourceGroupResource).GetInformaticaOrganizationAsync(organizationName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary> Get a InformaticaOrganizationResource. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource"/> the method will execute against. </param>
        /// <param name="organizationName"> Name of the Organizations resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<InformaticaOrganizationResource> GetInformaticaOrganization(this ResourceGroupResource resourceGroupResource, string organizationName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableInformaticaDataManagementResourceGroupResource(resourceGroupResource).GetInformaticaOrganization(organizationName, cancellationToken);
        }

        /// <summary> List InformaticaOrganizationResource resources by subscription ID. </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource"/> the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> A collection of <see cref="InformaticaOrganizationResource"/> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<InformaticaOrganizationResource> GetInformaticaOrganizationsAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableInformaticaDataManagementSubscriptionResource(subscriptionResource).GetInformaticaOrganizationsAsync(cancellationToken);
        }

        /// <summary> List InformaticaOrganizationResource resources by subscription ID. </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource"/> the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> A collection of <see cref="InformaticaOrganizationResource"/> that may take multiple service requests to iterate over. </returns>
        public static Pageable<InformaticaOrganizationResource> GetInformaticaOrganizations(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableInformaticaDataManagementSubscriptionResource(subscriptionResource).GetInformaticaOrganizations(cancellationToken);
        }
    }
}
