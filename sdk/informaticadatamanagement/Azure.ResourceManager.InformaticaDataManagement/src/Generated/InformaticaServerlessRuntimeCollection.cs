// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace Azure.ResourceManager.InformaticaDataManagement
{
    /// <summary>
    /// A class representing a collection of <see cref="InformaticaServerlessRuntimeResource"/> and their operations.
    /// Each <see cref="InformaticaServerlessRuntimeResource"/> in the collection will belong to the same instance of a parent resource (TODO: add parent resource information).
    /// To get a <see cref="InformaticaServerlessRuntimeCollection"/> instance call the GetInformaticaServerlessRuntimes method from an instance of the parent resource.
    /// </summary>
    public partial class InformaticaServerlessRuntimeCollection : ArmCollection, IEnumerable<InformaticaServerlessRuntimeResource>, IAsyncEnumerable<InformaticaServerlessRuntimeResource>
    {
        private readonly ClientDiagnostics _serverlessRuntimesClientDiagnostics;
        private readonly ServerlessRuntimes _serverlessRuntimesRestClient;

        /// <summary> Initializes a new instance of InformaticaServerlessRuntimeCollection for mocking. </summary>
        protected InformaticaServerlessRuntimeCollection()
        {
        }

        /// <summary> Initializes a new instance of <see cref="InformaticaServerlessRuntimeCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal InformaticaServerlessRuntimeCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            TryGetApiVersion(InformaticaServerlessRuntimeResource.ResourceType, out string informaticaServerlessRuntimeApiVersion);
            _serverlessRuntimesClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.InformaticaDataManagement", InformaticaServerlessRuntimeResource.ResourceType.Namespace, Diagnostics);
            _serverlessRuntimesRestClient = new ServerlessRuntimes(_serverlessRuntimesClientDiagnostics, Pipeline, Endpoint, informaticaServerlessRuntimeApiVersion ?? "2024-05-08");
            ValidateResourceId(id);
        }

        /// <param name="id"></param>
        [Conditional("DEBUG")]
        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != InformaticaOrganizationResource.ResourceType)
            {
                throw new ArgumentException(string.Format("Invalid resource type {0} expected {1}", id.ResourceType, InformaticaOrganizationResource.ResourceType), id);
            }
        }

        /// <summary> Create a InformaticaServerlessRuntimeResource. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="serverlessRuntimeName"> Name of the Serverless Runtime resource. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serverlessRuntimeName"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="serverlessRuntimeName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<ArmOperation<InformaticaServerlessRuntimeResource>> CreateOrUpdateAsync(WaitUntil waitUntil, string serverlessRuntimeName, InformaticaServerlessRuntimeData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(serverlessRuntimeName, nameof(serverlessRuntimeName));
            Argument.AssertNotNull(data, nameof(data));

            using DiagnosticScope scope = _serverlessRuntimesClientDiagnostics.CreateScope("InformaticaServerlessRuntimeCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _serverlessRuntimesRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, serverlessRuntimeName, InformaticaServerlessRuntimeData.ToRequestContent(data), context);
                Response response = await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
                InformaticaDataManagementArmOperation<InformaticaServerlessRuntimeResource> operation = new InformaticaDataManagementArmOperation<InformaticaServerlessRuntimeResource>(
                    new InformaticaServerlessRuntimeOperationSource(Client),
                    _serverlessRuntimesClientDiagnostics,
                    Pipeline,
                    message.Request,
                    response,
                    OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                {
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                }
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a InformaticaServerlessRuntimeResource. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="serverlessRuntimeName"> Name of the Serverless Runtime resource. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serverlessRuntimeName"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="serverlessRuntimeName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual ArmOperation<InformaticaServerlessRuntimeResource> CreateOrUpdate(WaitUntil waitUntil, string serverlessRuntimeName, InformaticaServerlessRuntimeData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(serverlessRuntimeName, nameof(serverlessRuntimeName));
            Argument.AssertNotNull(data, nameof(data));

            using DiagnosticScope scope = _serverlessRuntimesClientDiagnostics.CreateScope("InformaticaServerlessRuntimeCollection.CreateOrUpdate");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _serverlessRuntimesRestClient.CreateCreateOrUpdateRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, serverlessRuntimeName, InformaticaServerlessRuntimeData.ToRequestContent(data), context);
                Response response = Pipeline.ProcessMessage(message, context);
                InformaticaDataManagementArmOperation<InformaticaServerlessRuntimeResource> operation = new InformaticaDataManagementArmOperation<InformaticaServerlessRuntimeResource>(
                    new InformaticaServerlessRuntimeOperationSource(Client),
                    _serverlessRuntimesClientDiagnostics,
                    Pipeline,
                    message.Request,
                    response,
                    OperationFinalStateVia.AzureAsyncOperation);
                if (waitUntil == WaitUntil.Completed)
                {
                    operation.WaitForCompletion(cancellationToken);
                }
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a InformaticaServerlessRuntimeResource. </summary>
        /// <param name="serverlessRuntimeName"> Name of the Serverless Runtime resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serverlessRuntimeName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="serverlessRuntimeName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Response<InformaticaServerlessRuntimeResource>> GetAsync(string serverlessRuntimeName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(serverlessRuntimeName, nameof(serverlessRuntimeName));

            using DiagnosticScope scope = _serverlessRuntimesClientDiagnostics.CreateScope("InformaticaServerlessRuntimeCollection.Get");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _serverlessRuntimesRestClient.CreateGetRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, serverlessRuntimeName, context);
                Response result = await Pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
                Response<InformaticaServerlessRuntimeData> response = Response.FromValue(InformaticaServerlessRuntimeData.FromResponse(result), result);
                if (response.Value == null)
                {
                    throw new RequestFailedException(response.GetRawResponse());
                }
                return Response.FromValue(new InformaticaServerlessRuntimeResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a InformaticaServerlessRuntimeResource. </summary>
        /// <param name="serverlessRuntimeName"> Name of the Serverless Runtime resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serverlessRuntimeName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="serverlessRuntimeName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Response<InformaticaServerlessRuntimeResource> Get(string serverlessRuntimeName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(serverlessRuntimeName, nameof(serverlessRuntimeName));

            using DiagnosticScope scope = _serverlessRuntimesClientDiagnostics.CreateScope("InformaticaServerlessRuntimeCollection.Get");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _serverlessRuntimesRestClient.CreateGetRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, serverlessRuntimeName, context);
                Response result = Pipeline.ProcessMessage(message, context);
                Response<InformaticaServerlessRuntimeData> response = Response.FromValue(InformaticaServerlessRuntimeData.FromResponse(result), result);
                if (response.Value == null)
                {
                    throw new RequestFailedException(response.GetRawResponse());
                }
                return Response.FromValue(new InformaticaServerlessRuntimeResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> List InformaticaServerlessRuntimeResource resources by InformaticaOrganizationResource. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="InformaticaServerlessRuntimeResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<InformaticaServerlessRuntimeResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new AsyncPageableWrapper<InformaticaServerlessRuntimeData, InformaticaServerlessRuntimeResource>(new ServerlessRuntimesGetByInformaticaOrganizationResourceAsyncCollectionResultOfT(_serverlessRuntimesRestClient, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, context), data => new InformaticaServerlessRuntimeResource(Client, data));
        }

        /// <summary> List InformaticaServerlessRuntimeResource resources by InformaticaOrganizationResource. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="InformaticaServerlessRuntimeResource"/> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<InformaticaServerlessRuntimeResource> GetAll(CancellationToken cancellationToken = default)
        {
            RequestContext context = new RequestContext
            {
                CancellationToken = cancellationToken
            };
            return new PageableWrapper<InformaticaServerlessRuntimeData, InformaticaServerlessRuntimeResource>(new ServerlessRuntimesGetByInformaticaOrganizationResourceCollectionResultOfT(_serverlessRuntimesRestClient, Id.SubscriptionId, Id.ResourceGroupName, Id.Name, context), data => new InformaticaServerlessRuntimeResource(Client, data));
        }

        /// <summary> Checks to see if the resource exists in azure. </summary>
        /// <param name="serverlessRuntimeName"> Name of the Serverless Runtime resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serverlessRuntimeName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="serverlessRuntimeName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string serverlessRuntimeName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(serverlessRuntimeName, nameof(serverlessRuntimeName));

            using DiagnosticScope scope = _serverlessRuntimesClientDiagnostics.CreateScope("InformaticaServerlessRuntimeCollection.Exists");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _serverlessRuntimesRestClient.CreateGetRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, serverlessRuntimeName, context);
                await Pipeline.SendAsync(message, context.CancellationToken).ConfigureAwait(false);
                Response result = message.Response;
                Response<InformaticaServerlessRuntimeData> response = default;
                switch (result.Status)
                {
                    case 200:
                        response = Response.FromValue(InformaticaServerlessRuntimeData.FromResponse(result), result);
                        break;
                    case 404:
                        response = Response.FromValue((InformaticaServerlessRuntimeData)null, result);
                        break;
                    default:
                        throw new RequestFailedException(result);
                }
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Checks to see if the resource exists in azure. </summary>
        /// <param name="serverlessRuntimeName"> Name of the Serverless Runtime resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serverlessRuntimeName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="serverlessRuntimeName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual Response<bool> Exists(string serverlessRuntimeName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(serverlessRuntimeName, nameof(serverlessRuntimeName));

            using DiagnosticScope scope = _serverlessRuntimesClientDiagnostics.CreateScope("InformaticaServerlessRuntimeCollection.Exists");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _serverlessRuntimesRestClient.CreateGetRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, serverlessRuntimeName, context);
                Pipeline.Send(message, context.CancellationToken);
                Response result = message.Response;
                Response<InformaticaServerlessRuntimeData> response = default;
                switch (result.Status)
                {
                    case 200:
                        response = Response.FromValue(InformaticaServerlessRuntimeData.FromResponse(result), result);
                        break;
                    case 404:
                        response = Response.FromValue((InformaticaServerlessRuntimeData)null, result);
                        break;
                    default:
                        throw new RequestFailedException(result);
                }
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="serverlessRuntimeName"> Name of the Serverless Runtime resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serverlessRuntimeName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="serverlessRuntimeName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual async Task<NullableResponse<InformaticaServerlessRuntimeResource>> GetIfExistsAsync(string serverlessRuntimeName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(serverlessRuntimeName, nameof(serverlessRuntimeName));

            using DiagnosticScope scope = _serverlessRuntimesClientDiagnostics.CreateScope("InformaticaServerlessRuntimeCollection.GetIfExists");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _serverlessRuntimesRestClient.CreateGetRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, serverlessRuntimeName, context);
                await Pipeline.SendAsync(message, context.CancellationToken).ConfigureAwait(false);
                Response result = message.Response;
                Response<InformaticaServerlessRuntimeData> response = default;
                switch (result.Status)
                {
                    case 200:
                        response = Response.FromValue(InformaticaServerlessRuntimeData.FromResponse(result), result);
                        break;
                    case 404:
                        response = Response.FromValue((InformaticaServerlessRuntimeData)null, result);
                        break;
                    default:
                        throw new RequestFailedException(result);
                }
                if (response.Value == null)
                {
                    return new NoValueResponse<InformaticaServerlessRuntimeResource>(response.GetRawResponse());
                }
                return Response.FromValue(new InformaticaServerlessRuntimeResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Tries to get details for this resource from the service. </summary>
        /// <param name="serverlessRuntimeName"> Name of the Serverless Runtime resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="serverlessRuntimeName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="serverlessRuntimeName"/> is an empty string, and was expected to be non-empty. </exception>
        public virtual NullableResponse<InformaticaServerlessRuntimeResource> GetIfExists(string serverlessRuntimeName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(serverlessRuntimeName, nameof(serverlessRuntimeName));

            using DiagnosticScope scope = _serverlessRuntimesClientDiagnostics.CreateScope("InformaticaServerlessRuntimeCollection.GetIfExists");
            scope.Start();
            try
            {
                RequestContext context = new RequestContext
                {
                    CancellationToken = cancellationToken
                };
                HttpMessage message = _serverlessRuntimesRestClient.CreateGetRequest(Id.SubscriptionId, Id.ResourceGroupName, Id.Name, serverlessRuntimeName, context);
                Pipeline.Send(message, context.CancellationToken);
                Response result = message.Response;
                Response<InformaticaServerlessRuntimeData> response = default;
                switch (result.Status)
                {
                    case 200:
                        response = Response.FromValue(InformaticaServerlessRuntimeData.FromResponse(result), result);
                        break;
                    case 404:
                        response = Response.FromValue((InformaticaServerlessRuntimeData)null, result);
                        break;
                    default:
                        throw new RequestFailedException(result);
                }
                if (response.Value == null)
                {
                    return new NoValueResponse<InformaticaServerlessRuntimeResource>(response.GetRawResponse());
                }
                return Response.FromValue(new InformaticaServerlessRuntimeResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<InformaticaServerlessRuntimeResource> IEnumerable<InformaticaServerlessRuntimeResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        /// <param name="cancellationToken"> The cancellation token to use. </param>
        IAsyncEnumerator<InformaticaServerlessRuntimeResource> IAsyncEnumerable<InformaticaServerlessRuntimeResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
