// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.ResourceManager.InformaticaDataManagement;

namespace Azure.ResourceManager.InformaticaDataManagement.Models
{
    /// <summary> Application configs. </summary>
    public partial class InformaticaApplicationConfigs
    {
        /// <summary> Keeps track of any properties unknown to the library. </summary>
        private protected readonly IDictionary<string, BinaryData> _additionalBinaryDataProperties;

        /// <summary> Initializes a new instance of <see cref="InformaticaApplicationConfigs"/>. </summary>
        /// <param name="applicationConfigsType"> Type of the application config. </param>
        /// <param name="name"> Name of the application config. </param>
        /// <param name="value"> Value of the application config. </param>
        /// <param name="platform"> Platform type of the application config. </param>
        /// <param name="customized"> Customized value of the application config. </param>
        /// <param name="defaultValue"> Default value of the application config. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="applicationConfigsType"/>, <paramref name="name"/>, <paramref name="value"/>, <paramref name="platform"/>, <paramref name="customized"/> or <paramref name="defaultValue"/> is null. </exception>
        public InformaticaApplicationConfigs(string applicationConfigsType, string name, string value, string platform, string customized, string defaultValue)
        {
            Argument.AssertNotNull(applicationConfigsType, nameof(applicationConfigsType));
            Argument.AssertNotNull(name, nameof(name));
            Argument.AssertNotNull(value, nameof(value));
            Argument.AssertNotNull(platform, nameof(platform));
            Argument.AssertNotNull(customized, nameof(customized));
            Argument.AssertNotNull(defaultValue, nameof(defaultValue));

            ApplicationConfigsType = applicationConfigsType;
            Name = name;
            Value = value;
            Platform = platform;
            Customized = customized;
            DefaultValue = defaultValue;
        }

        /// <summary> Initializes a new instance of <see cref="InformaticaApplicationConfigs"/>. </summary>
        /// <param name="applicationConfigsType"> Type of the application config. </param>
        /// <param name="name"> Name of the application config. </param>
        /// <param name="value"> Value of the application config. </param>
        /// <param name="platform"> Platform type of the application config. </param>
        /// <param name="customized"> Customized value of the application config. </param>
        /// <param name="defaultValue"> Default value of the application config. </param>
        /// <param name="additionalBinaryDataProperties"> Keeps track of any properties unknown to the library. </param>
        internal InformaticaApplicationConfigs(string applicationConfigsType, string name, string value, string platform, string customized, string defaultValue, IDictionary<string, BinaryData> additionalBinaryDataProperties)
        {
            ApplicationConfigsType = applicationConfigsType;
            Name = name;
            Value = value;
            Platform = platform;
            Customized = customized;
            DefaultValue = defaultValue;
            _additionalBinaryDataProperties = additionalBinaryDataProperties;
        }

        /// <summary> Type of the application config. </summary>
        public string ApplicationConfigsType { get; set; }

        /// <summary> Name of the application config. </summary>
        public string Name { get; set; }

        /// <summary> Value of the application config. </summary>
        public string Value { get; set; }

        /// <summary> Platform type of the application config. </summary>
        public string Platform { get; set; }

        /// <summary> Customized value of the application config. </summary>
        public string Customized { get; set; }

        /// <summary> Default value of the application config. </summary>
        public string DefaultValue { get; set; }
    }
}
