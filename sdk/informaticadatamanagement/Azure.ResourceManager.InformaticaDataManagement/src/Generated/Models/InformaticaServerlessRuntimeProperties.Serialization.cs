// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.ResourceManager.InformaticaDataManagement;

namespace Azure.ResourceManager.InformaticaDataManagement.Models
{
    /// <summary> Serverless Runtime properties. </summary>
    public partial class InformaticaServerlessRuntimeProperties : IJsonModel<InformaticaServerlessRuntimeProperties>
    {
        /// <summary> Initializes a new instance of <see cref="InformaticaServerlessRuntimeProperties"/> for deserialization. </summary>
        internal InformaticaServerlessRuntimeProperties()
        {
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        void IJsonModel<InformaticaServerlessRuntimeProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<InformaticaServerlessRuntimeProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(InformaticaServerlessRuntimeProperties)} does not support writing '{format}' format.");
            }
            if (options.Format != "W" && Optional.IsDefined(ProvisioningState))
            {
                writer.WritePropertyName("provisioningState"u8);
                writer.WriteStringValue(ProvisioningState.Value.ToString());
            }
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description"u8);
                writer.WriteStringValue(Description);
            }
            if (Optional.IsDefined(Platform))
            {
                writer.WritePropertyName("platform"u8);
                writer.WriteStringValue(Platform.Value.ToString());
            }
            if (Optional.IsDefined(ApplicationType))
            {
                writer.WritePropertyName("applicationType"u8);
                writer.WriteStringValue(ApplicationType.Value.ToString());
            }
            if (Optional.IsDefined(ComputeUnits))
            {
                writer.WritePropertyName("computeUnits"u8);
                writer.WriteStringValue(ComputeUnits);
            }
            if (Optional.IsDefined(ExecutionTimeout))
            {
                writer.WritePropertyName("executionTimeout"u8);
                writer.WriteStringValue(ExecutionTimeout);
            }
            writer.WritePropertyName("serverlessAccountLocation"u8);
            writer.WriteStringValue(ServerlessAccountLocation);
            if (Optional.IsDefined(ServerlessRuntimeNetworkProfile))
            {
                writer.WritePropertyName("serverlessRuntimeNetworkProfile"u8);
                writer.WriteObjectValue(ServerlessRuntimeNetworkProfile, options);
            }
            if (Optional.IsCollectionDefined(AdvancedCustomProperties))
            {
                writer.WritePropertyName("advancedCustomProperties"u8);
                writer.WriteStartArray();
                foreach (AdvancedCustomProperties item in AdvancedCustomProperties)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(SupplementaryFileLocation))
            {
                writer.WritePropertyName("supplementaryFileLocation"u8);
                writer.WriteStringValue(SupplementaryFileLocation);
            }
            if (Optional.IsDefined(ServerlessRuntimeConfig))
            {
                writer.WritePropertyName("serverlessRuntimeConfig"u8);
                writer.WriteObjectValue(ServerlessRuntimeConfig, options);
            }
            if (Optional.IsCollectionDefined(ServerlessRuntimeTags))
            {
                writer.WritePropertyName("serverlessRuntimeTags"u8);
                writer.WriteStartArray();
                foreach (ServerlessRuntimeTag item in ServerlessRuntimeTags)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(ServerlessRuntimeUserContextProperties))
            {
                writer.WritePropertyName("serverlessRuntimeUserContextProperties"u8);
                writer.WriteObjectValue(ServerlessRuntimeUserContextProperties, options);
            }
            if (options.Format != "W" && _additionalBinaryDataProperties != null)
            {
                foreach (var item in _additionalBinaryDataProperties)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
                    writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        InformaticaServerlessRuntimeProperties IJsonModel<InformaticaServerlessRuntimeProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options) => JsonModelCreateCore(ref reader, options);

        /// <param name="reader"> The JSON reader. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual InformaticaServerlessRuntimeProperties JsonModelCreateCore(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<InformaticaServerlessRuntimeProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(InformaticaServerlessRuntimeProperties)} does not support reading '{format}' format.");
            }
            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeInformaticaServerlessRuntimeProperties(document.RootElement, options);
        }

        /// <param name="element"> The JSON element to deserialize. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        internal static InformaticaServerlessRuntimeProperties DeserializeInformaticaServerlessRuntimeProperties(JsonElement element, ModelReaderWriterOptions options)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            InformaticaProvisioningState? provisioningState = default;
            string description = default;
            InformaticaPlatformType? platform = default;
            InformaticaApplicationType? applicationType = default;
            string computeUnits = default;
            string executionTimeout = default;
            string serverlessAccountLocation = default;
            ServerlessRuntimeNetworkProfile serverlessRuntimeNetworkProfile = default;
            IList<AdvancedCustomProperties> advancedCustomProperties = default;
            string supplementaryFileLocation = default;
            ServerlessRuntimeConfigProperties serverlessRuntimeConfig = default;
            IList<ServerlessRuntimeTag> serverlessRuntimeTags = default;
            ServerlessRuntimeUserContextProperties serverlessRuntimeUserContextProperties = default;
            IDictionary<string, BinaryData> additionalBinaryDataProperties = new ChangeTrackingDictionary<string, BinaryData>();
            foreach (var prop in element.EnumerateObject())
            {
                if (prop.NameEquals("provisioningState"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    provisioningState = new InformaticaProvisioningState(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("description"u8))
                {
                    description = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("platform"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    platform = new InformaticaPlatformType(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("applicationType"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    applicationType = new InformaticaApplicationType(prop.Value.GetString());
                    continue;
                }
                if (prop.NameEquals("computeUnits"u8))
                {
                    computeUnits = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("executionTimeout"u8))
                {
                    executionTimeout = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("serverlessAccountLocation"u8))
                {
                    serverlessAccountLocation = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("serverlessRuntimeNetworkProfile"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    serverlessRuntimeNetworkProfile = ServerlessRuntimeNetworkProfile.DeserializeServerlessRuntimeNetworkProfile(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("advancedCustomProperties"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<AdvancedCustomProperties> array = new List<AdvancedCustomProperties>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(Models.AdvancedCustomProperties.DeserializeAdvancedCustomProperties(item, options));
                    }
                    advancedCustomProperties = array;
                    continue;
                }
                if (prop.NameEquals("supplementaryFileLocation"u8))
                {
                    supplementaryFileLocation = prop.Value.GetString();
                    continue;
                }
                if (prop.NameEquals("serverlessRuntimeConfig"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    serverlessRuntimeConfig = ServerlessRuntimeConfigProperties.DeserializeServerlessRuntimeConfigProperties(prop.Value, options);
                    continue;
                }
                if (prop.NameEquals("serverlessRuntimeTags"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<ServerlessRuntimeTag> array = new List<ServerlessRuntimeTag>();
                    foreach (var item in prop.Value.EnumerateArray())
                    {
                        array.Add(ServerlessRuntimeTag.DeserializeServerlessRuntimeTag(item, options));
                    }
                    serverlessRuntimeTags = array;
                    continue;
                }
                if (prop.NameEquals("serverlessRuntimeUserContextProperties"u8))
                {
                    if (prop.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    serverlessRuntimeUserContextProperties = ServerlessRuntimeUserContextProperties.DeserializeServerlessRuntimeUserContextProperties(prop.Value, options);
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalBinaryDataProperties.Add(prop.Name, BinaryData.FromString(prop.Value.GetRawText()));
                }
            }
            return new InformaticaServerlessRuntimeProperties(
                provisioningState,
                description,
                platform,
                applicationType,
                computeUnits,
                executionTimeout,
                serverlessAccountLocation,
                serverlessRuntimeNetworkProfile,
                advancedCustomProperties ?? new ChangeTrackingList<AdvancedCustomProperties>(),
                supplementaryFileLocation,
                serverlessRuntimeConfig,
                serverlessRuntimeTags ?? new ChangeTrackingList<ServerlessRuntimeTag>(),
                serverlessRuntimeUserContextProperties,
                additionalBinaryDataProperties);
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        BinaryData IPersistableModel<InformaticaServerlessRuntimeProperties>.Write(ModelReaderWriterOptions options) => PersistableModelWriteCore(options);

        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual BinaryData PersistableModelWriteCore(ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<InformaticaServerlessRuntimeProperties>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerInformaticaDataManagementContext.Default);
                default:
                    throw new FormatException($"The model {nameof(InformaticaServerlessRuntimeProperties)} does not support writing '{options.Format}' format.");
            }
        }

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        InformaticaServerlessRuntimeProperties IPersistableModel<InformaticaServerlessRuntimeProperties>.Create(BinaryData data, ModelReaderWriterOptions options) => PersistableModelCreateCore(data, options);

        /// <param name="data"> The data to parse. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual InformaticaServerlessRuntimeProperties PersistableModelCreateCore(BinaryData data, ModelReaderWriterOptions options)
        {
            string format = options.Format == "W" ? ((IPersistableModel<InformaticaServerlessRuntimeProperties>)this).GetFormatFromOptions(options) : options.Format;
            switch (format)
            {
                case "J":
                    using (JsonDocument document = JsonDocument.Parse(data))
                    {
                        return DeserializeInformaticaServerlessRuntimeProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(InformaticaServerlessRuntimeProperties)} does not support reading '{options.Format}' format.");
            }
        }

        /// <param name="options"> The client options for reading and writing models. </param>
        string IPersistableModel<InformaticaServerlessRuntimeProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
