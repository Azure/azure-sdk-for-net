// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataLake.Analytics.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Scope job properties used when submitting and retrieving Scope jobs.
    /// (Only for use internally with Scope job type.)
    /// </summary>
    [Newtonsoft.Json.JsonObject("Scope")]
    public partial class ScopeJobProperties : JobProperties
    {
        /// <summary>
        /// Initializes a new instance of the ScopeJobProperties class.
        /// </summary>
        public ScopeJobProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ScopeJobProperties class.
        /// </summary>
        /// <param name="script">The script to run. Please note that the
        /// maximum script size is 3 MB.</param>
        /// <param name="runtimeVersion">The runtime version of the Data Lake
        /// Analytics engine to use for the specific type of job being
        /// run.</param>
        /// <param name="resources">The list of resources that are required by
        /// the job.</param>
        /// <param name="userAlgebraPath">The algebra file path after the job
        /// has completed.</param>
        /// <param name="notifier">The list of email addresses, separated by
        /// semi-colons, to notify when the job reaches a terminal
        /// state.</param>
        /// <param name="totalCompilationTime">The total time this job spent
        /// compiling. This value should not be set by the user and will be
        /// ignored if it is.</param>
        /// <param name="totalQueuedTime">The total time this job spent queued.
        /// This value should not be set by the user and will be ignored if it
        /// is.</param>
        /// <param name="totalRunningTime">The total time this job spent
        /// executing. This value should not be set by the user and will be
        /// ignored if it is.</param>
        /// <param name="totalPausedTime">The total time this job spent paused.
        /// This value should not be set by the user and will be ignored if it
        /// is.</param>
        /// <param name="rootProcessNodeId">The ID used to identify the job
        /// manager coordinating job execution. This value should not be set by
        /// the user and will be ignored if it is.</param>
        /// <param name="yarnApplicationId">The ID used to identify the yarn
        /// application executing the job. This value should not be set by the
        /// user and will be ignored if it is.</param>
        public ScopeJobProperties(string script, string runtimeVersion = default(string), IList<ScopeJobResource> resources = default(IList<ScopeJobResource>), string userAlgebraPath = default(string), string notifier = default(string), System.TimeSpan? totalCompilationTime = default(System.TimeSpan?), System.TimeSpan? totalQueuedTime = default(System.TimeSpan?), System.TimeSpan? totalRunningTime = default(System.TimeSpan?), System.TimeSpan? totalPausedTime = default(System.TimeSpan?), string rootProcessNodeId = default(string), string yarnApplicationId = default(string))
            : base(script, runtimeVersion)
        {
            Resources = resources;
            UserAlgebraPath = userAlgebraPath;
            Notifier = notifier;
            TotalCompilationTime = totalCompilationTime;
            TotalQueuedTime = totalQueuedTime;
            TotalRunningTime = totalRunningTime;
            TotalPausedTime = totalPausedTime;
            RootProcessNodeId = rootProcessNodeId;
            YarnApplicationId = yarnApplicationId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the list of resources that are required by the job.
        /// </summary>
        [JsonProperty(PropertyName = "resources")]
        public IList<ScopeJobResource> Resources { get; private set; }

        /// <summary>
        /// Gets the algebra file path after the job has completed.
        /// </summary>
        [JsonProperty(PropertyName = "userAlgebraPath")]
        public string UserAlgebraPath { get; private set; }

        /// <summary>
        /// Gets or sets the list of email addresses, separated by semi-colons,
        /// to notify when the job reaches a terminal state.
        /// </summary>
        [JsonProperty(PropertyName = "notifier")]
        public string Notifier { get; set; }

        /// <summary>
        /// Gets the total time this job spent compiling. This value should not
        /// be set by the user and will be ignored if it is.
        /// </summary>
        [JsonProperty(PropertyName = "totalCompilationTime")]
        public System.TimeSpan? TotalCompilationTime { get; private set; }

        /// <summary>
        /// Gets the total time this job spent queued. This value should not be
        /// set by the user and will be ignored if it is.
        /// </summary>
        [JsonProperty(PropertyName = "totalQueuedTime")]
        public System.TimeSpan? TotalQueuedTime { get; private set; }

        /// <summary>
        /// Gets the total time this job spent executing. This value should not
        /// be set by the user and will be ignored if it is.
        /// </summary>
        [JsonProperty(PropertyName = "totalRunningTime")]
        public System.TimeSpan? TotalRunningTime { get; private set; }

        /// <summary>
        /// Gets the total time this job spent paused. This value should not be
        /// set by the user and will be ignored if it is.
        /// </summary>
        [JsonProperty(PropertyName = "totalPausedTime")]
        public System.TimeSpan? TotalPausedTime { get; private set; }

        /// <summary>
        /// Gets the ID used to identify the job manager coordinating job
        /// execution. This value should not be set by the user and will be
        /// ignored if it is.
        /// </summary>
        [JsonProperty(PropertyName = "rootProcessNodeId")]
        public string RootProcessNodeId { get; private set; }

        /// <summary>
        /// Gets the ID used to identify the yarn application executing the
        /// job. This value should not be set by the user and will be ignored
        /// if it is.
        /// </summary>
        [JsonProperty(PropertyName = "yarnApplicationId")]
        public string YarnApplicationId { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
        }
    }
}
