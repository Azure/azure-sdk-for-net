// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.DataLake.Analytics.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The extended Data Lake Analytics job information properties returned
    /// when retrieving a specific job.
    /// </summary>
    public partial class JobInformation : JobInformationBasic
    {
        /// <summary>
        /// Initializes a new instance of the JobInformation class.
        /// </summary>
        public JobInformation()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the JobInformation class.
        /// </summary>
        /// <param name="name">The friendly name of the job.</param>
        /// <param name="type">The job type of the current job (Hive, USql, or
        /// Scope (for internal use only)). Possible values include: 'USql',
        /// 'Hive', 'Scope'</param>
        /// <param name="properties">The job specific properties.</param>
        /// <param name="jobId">The job's unique identifier (a GUID).</param>
        /// <param name="submitter">The user or account that submitted the
        /// job.</param>
        /// <param name="degreeOfParallelism">The degree of parallelism used
        /// for this job.</param>
        /// <param name="degreeOfParallelismPercent">the degree of parallelism
        /// in percentage used for this job.</param>
        /// <param name="priority">The priority value for the current job.
        /// Lower numbers have a higher priority. By default, a job has a
        /// priority of 1000. This must be greater than 0.</param>
        /// <param name="submitTime">The time the job was submitted to the
        /// service.</param>
        /// <param name="startTime">The start time of the job.</param>
        /// <param name="endTime">The completion time of the job.</param>
        /// <param name="state">The job state. When the job is in the Ended
        /// state, refer to Result and ErrorMessage for details. Possible
        /// values include: 'Accepted', 'Compiling', 'Ended', 'New', 'Queued',
        /// 'Running', 'Scheduling', 'Starting', 'Paused',
        /// 'WaitingForCapacity', 'Yielded', 'Finalizing'</param>
        /// <param name="result">The result of job execution or the current
        /// result of the running job. Possible values include: 'None',
        /// 'Succeeded', 'Cancelled', 'Failed'</param>
        /// <param name="logFolder">The log folder path to use in the following
        /// format:
        /// adl://&lt;accountName&gt;.azuredatalakestore.net/system/jobservice/jobs/Usql/2016/03/13/17/18/5fe51957-93bc-4de0-8ddc-c5a4753b068b/logs/.</param>
        /// <param name="logFilePatterns">The list of log file name patterns to
        /// find in the logFolder. '*' is the only matching character allowed.
        /// Example format: jobExecution*.log or *mylog*.txt</param>
        /// <param name="related">The recurring job relationship information
        /// properties.</param>
        /// <param name="tags">The key-value pairs used to add additional
        /// metadata to the job information. (Only for use internally with
        /// Scope job type.)</param>
        /// <param name="hierarchyQueueNode">the name of hierarchy queue node
        /// this job is assigned to, Null if job has not been assigned yet or
        /// the account doesn't have hierarchy queue.</param>
        /// <param name="errorMessage">The error message details for the job,
        /// if the job failed.</param>
        /// <param name="stateAuditRecords">The job state audit records,
        /// indicating when various operations have been performed on this
        /// job.</param>
        public JobInformation(string name, JobType type, JobProperties properties, System.Guid? jobId = default(System.Guid?), string submitter = default(string), int? degreeOfParallelism = default(int?), double? degreeOfParallelismPercent = default(double?), int? priority = default(int?), System.DateTimeOffset? submitTime = default(System.DateTimeOffset?), System.DateTimeOffset? startTime = default(System.DateTimeOffset?), System.DateTimeOffset? endTime = default(System.DateTimeOffset?), JobState? state = default(JobState?), JobResult? result = default(JobResult?), string logFolder = default(string), IList<string> logFilePatterns = default(IList<string>), JobRelationshipProperties related = default(JobRelationshipProperties), IDictionary<string, string> tags = default(IDictionary<string, string>), string hierarchyQueueNode = default(string), IList<JobErrorDetails> errorMessage = default(IList<JobErrorDetails>), IList<JobStateAuditRecord> stateAuditRecords = default(IList<JobStateAuditRecord>))
            : base(name, type, jobId, submitter, degreeOfParallelism, degreeOfParallelismPercent, priority, submitTime, startTime, endTime, state, result, logFolder, logFilePatterns, related, tags, hierarchyQueueNode)
        {
            ErrorMessage = errorMessage;
            StateAuditRecords = stateAuditRecords;
            Properties = properties;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the error message details for the job, if the job failed.
        /// </summary>
        [JsonProperty(PropertyName = "errorMessage")]
        public IList<JobErrorDetails> ErrorMessage { get; private set; }

        /// <summary>
        /// Gets the job state audit records, indicating when various
        /// operations have been performed on this job.
        /// </summary>
        [JsonProperty(PropertyName = "stateAuditRecords")]
        public IList<JobStateAuditRecord> StateAuditRecords { get; private set; }

        /// <summary>
        /// Gets or sets the job specific properties.
        /// </summary>
        [JsonProperty(PropertyName = "properties")]
        public JobProperties Properties { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (Properties == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Properties");
            }
            if (Properties != null)
            {
                Properties.Validate();
            }
        }
    }
}
