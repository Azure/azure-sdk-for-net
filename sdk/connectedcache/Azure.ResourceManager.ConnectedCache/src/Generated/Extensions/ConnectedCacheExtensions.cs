// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.ResourceManager.ConnectedCache.Mocking;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.ConnectedCache
{
    /// <summary> A class to add extension methods to Azure.ResourceManager.ConnectedCache. </summary>
    public static partial class ConnectedCacheExtensions
    {
        private static MockableConnectedCacheArmClient GetMockableConnectedCacheArmClient(ArmClient client)
        {
            return client.GetCachedClient(client0 => new MockableConnectedCacheArmClient(client0));
        }

        private static MockableConnectedCacheResourceGroupResource GetMockableConnectedCacheResourceGroupResource(ArmResource resource)
        {
            return resource.GetCachedClient(client => new MockableConnectedCacheResourceGroupResource(client, resource.Id));
        }

        private static MockableConnectedCacheSubscriptionResource GetMockableConnectedCacheSubscriptionResource(ArmResource resource)
        {
            return resource.GetCachedClient(client => new MockableConnectedCacheSubscriptionResource(client, resource.Id));
        }

        /// <summary>
        /// Gets an object representing an <see cref="IspCustomerResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="IspCustomerResource.CreateResourceIdentifier" /> to create an <see cref="IspCustomerResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableConnectedCacheArmClient.GetIspCustomerResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="IspCustomerResource"/> object. </returns>
        public static IspCustomerResource GetIspCustomerResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableConnectedCacheArmClient(client).GetIspCustomerResource(id);
        }

        /// <summary>
        /// Gets an object representing an <see cref="IspCacheNodeResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="IspCacheNodeResource.CreateResourceIdentifier" /> to create an <see cref="IspCacheNodeResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableConnectedCacheArmClient.GetIspCacheNodeResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="IspCacheNodeResource"/> object. </returns>
        public static IspCacheNodeResource GetIspCacheNodeResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableConnectedCacheArmClient(client).GetIspCacheNodeResource(id);
        }

        /// <summary>
        /// Gets an object representing an <see cref="EnterpriseMccCustomerResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="EnterpriseMccCustomerResource.CreateResourceIdentifier" /> to create an <see cref="EnterpriseMccCustomerResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableConnectedCacheArmClient.GetEnterpriseMccCustomerResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="EnterpriseMccCustomerResource"/> object. </returns>
        public static EnterpriseMccCustomerResource GetEnterpriseMccCustomerResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableConnectedCacheArmClient(client).GetEnterpriseMccCustomerResource(id);
        }

        /// <summary>
        /// Gets an object representing an <see cref="EnterpriseMccCacheNodeResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="EnterpriseMccCacheNodeResource.CreateResourceIdentifier" /> to create an <see cref="EnterpriseMccCacheNodeResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableConnectedCacheArmClient.GetEnterpriseMccCacheNodeResource(ResourceIdentifier)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="client"/> is null. </exception>
        /// <returns> Returns a <see cref="EnterpriseMccCacheNodeResource"/> object. </returns>
        public static EnterpriseMccCacheNodeResource GetEnterpriseMccCacheNodeResource(this ArmClient client, ResourceIdentifier id)
        {
            Argument.AssertNotNull(client, nameof(client));

            return GetMockableConnectedCacheArmClient(client).GetEnterpriseMccCacheNodeResource(id);
        }

        /// <summary>
        /// Gets a collection of IspCustomerResources in the ResourceGroupResource.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableConnectedCacheResourceGroupResource.GetIspCustomerResources()"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> is null. </exception>
        /// <returns> An object representing collection of IspCustomerResources and their operations over a IspCustomerResource. </returns>
        public static IspCustomerResourceCollection GetIspCustomerResources(this ResourceGroupResource resourceGroupResource)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableConnectedCacheResourceGroupResource(resourceGroupResource).GetIspCustomerResources();
        }

        /// <summary>
        /// Gets the ispCustomer resource information using this get call
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedCache/ispCustomers/{customerResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>IspCustomerResource_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-11-30-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="IspCustomerResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableConnectedCacheResourceGroupResource.GetIspCustomerResourceAsync(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="customerResourceName"> Name of the Customer resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> or <paramref name="customerResourceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="customerResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<IspCustomerResource>> GetIspCustomerResourceAsync(this ResourceGroupResource resourceGroupResource, string customerResourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return await GetMockableConnectedCacheResourceGroupResource(resourceGroupResource).GetIspCustomerResourceAsync(customerResourceName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets the ispCustomer resource information using this get call
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedCache/ispCustomers/{customerResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>IspCustomerResource_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-11-30-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="IspCustomerResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableConnectedCacheResourceGroupResource.GetIspCustomerResource(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="customerResourceName"> Name of the Customer resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> or <paramref name="customerResourceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="customerResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public static Response<IspCustomerResource> GetIspCustomerResource(this ResourceGroupResource resourceGroupResource, string customerResourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableConnectedCacheResourceGroupResource(resourceGroupResource).GetIspCustomerResource(customerResourceName, cancellationToken);
        }

        /// <summary>
        /// Gets a collection of EnterpriseMccCustomerResources in the ResourceGroupResource.
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableConnectedCacheResourceGroupResource.GetEnterpriseMccCustomerResources()"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> is null. </exception>
        /// <returns> An object representing collection of EnterpriseMccCustomerResources and their operations over a EnterpriseMccCustomerResource. </returns>
        public static EnterpriseMccCustomerResourceCollection GetEnterpriseMccCustomerResources(this ResourceGroupResource resourceGroupResource)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableConnectedCacheResourceGroupResource(resourceGroupResource).GetEnterpriseMccCustomerResources();
        }

        /// <summary>
        /// Gets the enterprise mcc customer resource information using this get call
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedCache/enterpriseMccCustomers/{customerResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>EnterpriseMccCustomerResource_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-11-30-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EnterpriseMccCustomerResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableConnectedCacheResourceGroupResource.GetEnterpriseMccCustomerResourceAsync(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="customerResourceName"> Name of the Customer resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> or <paramref name="customerResourceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="customerResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<EnterpriseMccCustomerResource>> GetEnterpriseMccCustomerResourceAsync(this ResourceGroupResource resourceGroupResource, string customerResourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return await GetMockableConnectedCacheResourceGroupResource(resourceGroupResource).GetEnterpriseMccCustomerResourceAsync(customerResourceName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets the enterprise mcc customer resource information using this get call
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedCache/enterpriseMccCustomers/{customerResourceName}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>EnterpriseMccCustomerResource_Get</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-11-30-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EnterpriseMccCustomerResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableConnectedCacheResourceGroupResource.GetEnterpriseMccCustomerResource(string,CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="customerResourceName"> Name of the Customer resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupResource"/> or <paramref name="customerResourceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="customerResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        [ForwardsClientCalls]
        public static Response<EnterpriseMccCustomerResource> GetEnterpriseMccCustomerResource(this ResourceGroupResource resourceGroupResource, string customerResourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(resourceGroupResource, nameof(resourceGroupResource));

            return GetMockableConnectedCacheResourceGroupResource(resourceGroupResource).GetEnterpriseMccCustomerResource(customerResourceName, cancellationToken);
        }

        /// <summary>
        /// This api gets information about all ispCustomer resources under the given subscription
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.ConnectedCache/ispCustomers</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>IspCustomerResource_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-11-30-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="IspCustomerResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableConnectedCacheSubscriptionResource.GetIspCustomerResources(CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> An async collection of <see cref="IspCustomerResource"/> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<IspCustomerResource> GetIspCustomerResourcesAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableConnectedCacheSubscriptionResource(subscriptionResource).GetIspCustomerResourcesAsync(cancellationToken);
        }

        /// <summary>
        /// This api gets information about all ispCustomer resources under the given subscription
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.ConnectedCache/ispCustomers</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>IspCustomerResource_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-11-30-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="IspCustomerResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableConnectedCacheSubscriptionResource.GetIspCustomerResources(CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> A collection of <see cref="IspCustomerResource"/> that may take multiple service requests to iterate over. </returns>
        public static Pageable<IspCustomerResource> GetIspCustomerResources(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableConnectedCacheSubscriptionResource(subscriptionResource).GetIspCustomerResources(cancellationToken);
        }

        /// <summary>
        /// This api gets information about all enterpriseMccCustomer resources under the given subscription
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.ConnectedCache/enterpriseMccCustomers</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>EnterpriseMccCustomerResource_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-11-30-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EnterpriseMccCustomerResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableConnectedCacheSubscriptionResource.GetEnterpriseMccCustomerResources(CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> An async collection of <see cref="EnterpriseMccCustomerResource"/> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<EnterpriseMccCustomerResource> GetEnterpriseMccCustomerResourcesAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableConnectedCacheSubscriptionResource(subscriptionResource).GetEnterpriseMccCustomerResourcesAsync(cancellationToken);
        }

        /// <summary>
        /// This api gets information about all enterpriseMccCustomer resources under the given subscription
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/subscriptions/{subscriptionId}/providers/Microsoft.ConnectedCache/enterpriseMccCustomers</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>EnterpriseMccCustomerResource_ListBySubscription</description>
        /// </item>
        /// <item>
        /// <term>Default Api Version</term>
        /// <description>2024-11-30-preview</description>
        /// </item>
        /// <item>
        /// <term>Resource</term>
        /// <description><see cref="EnterpriseMccCustomerResource"/></description>
        /// </item>
        /// </list>
        /// <item>
        /// <term>Mocking</term>
        /// <description>To mock this method, please mock <see cref="MockableConnectedCacheSubscriptionResource.GetEnterpriseMccCustomerResources(CancellationToken)"/> instead.</description>
        /// </item>
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionResource"/> is null. </exception>
        /// <returns> A collection of <see cref="EnterpriseMccCustomerResource"/> that may take multiple service requests to iterate over. </returns>
        public static Pageable<EnterpriseMccCustomerResource> GetEnterpriseMccCustomerResources(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(subscriptionResource, nameof(subscriptionResource));

            return GetMockableConnectedCacheSubscriptionResource(subscriptionResource).GetEnterpriseMccCustomerResources(cancellationToken);
        }
    }
}
