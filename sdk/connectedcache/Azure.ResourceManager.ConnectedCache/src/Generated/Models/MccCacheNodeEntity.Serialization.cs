// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ConnectedCache.Models
{
    public partial class MccCacheNodeEntity : IUtf8JsonSerializable, IJsonModel<MccCacheNodeEntity>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<MccCacheNodeEntity>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<MccCacheNodeEntity>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MccCacheNodeEntity>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(MccCacheNodeEntity)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(FullyQualifiedResourceId))
            {
                writer.WritePropertyName("fullyQualifiedResourceId"u8);
                writer.WriteStringValue(FullyQualifiedResourceId);
            }
            if (options.Format != "W" && Optional.IsDefined(CustomerId))
            {
                writer.WritePropertyName("customerId"u8);
                writer.WriteStringValue(CustomerId);
            }
            if (Optional.IsDefined(CustomerName))
            {
                writer.WritePropertyName("customerName"u8);
                writer.WriteStringValue(CustomerName);
            }
            if (Optional.IsDefined(IPAddress))
            {
                writer.WritePropertyName("ipAddress"u8);
                writer.WriteStringValue(IPAddress);
            }
            if (Optional.IsDefined(CustomerIndex))
            {
                writer.WritePropertyName("customerIndex"u8);
                writer.WriteStringValue(CustomerIndex);
            }
            if (Optional.IsDefined(CacheNodeId))
            {
                writer.WritePropertyName("cacheNodeId"u8);
                writer.WriteStringValue(CacheNodeId);
            }
            if (Optional.IsDefined(CacheNodeName))
            {
                writer.WritePropertyName("cacheNodeName"u8);
                writer.WriteStringValue(CacheNodeName);
            }
            if (Optional.IsDefined(CustomerAsn))
            {
                writer.WritePropertyName("customerAsn"u8);
                writer.WriteNumberValue(CustomerAsn.Value);
            }
            if (Optional.IsDefined(IsEnabled))
            {
                writer.WritePropertyName("isEnabled"u8);
                writer.WriteBooleanValue(IsEnabled.Value);
            }
            if (Optional.IsDefined(MaxAllowableEgressInMbps))
            {
                writer.WritePropertyName("maxAllowableEgressInMbps"u8);
                writer.WriteNumberValue(MaxAllowableEgressInMbps.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(MaxAllowableProbability))
            {
                writer.WritePropertyName("maxAllowableProbability"u8);
                writer.WriteNumberValue(MaxAllowableProbability.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(XCid))
            {
                writer.WritePropertyName("xCid"u8);
                writer.WriteStringValue(XCid);
            }
            if (Optional.IsDefined(IsEnterpriseManaged))
            {
                writer.WritePropertyName("isEnterpriseManaged"u8);
                writer.WriteBooleanValue(IsEnterpriseManaged.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(CreateAsyncOperationId))
            {
                writer.WritePropertyName("createAsyncOperationId"u8);
                writer.WriteStringValue(CreateAsyncOperationId);
            }
            if (options.Format != "W" && Optional.IsDefined(DeleteAsyncOperationId))
            {
                writer.WritePropertyName("deleteAsyncOperationId"u8);
                writer.WriteStringValue(DeleteAsyncOperationId);
            }
            if (options.Format != "W" && Optional.IsDefined(ClientTenantId))
            {
                writer.WritePropertyName("clientTenantId"u8);
                writer.WriteStringValue(ClientTenantId);
            }
            if (options.Format != "W" && Optional.IsDefined(Category))
            {
                writer.WritePropertyName("category"u8);
                writer.WriteStringValue(Category);
            }
            if (options.Format != "W" && Optional.IsDefined(ReleaseVersion))
            {
                writer.WritePropertyName("releaseVersion"u8);
                writer.WriteNumberValue(ReleaseVersion.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(LastSyncedWithAzureOn))
            {
                writer.WritePropertyName("lastSyncWithAzureTimestamp"u8);
                writer.WriteStringValue(LastSyncedWithAzureOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(LastUpdatedOn))
            {
                writer.WritePropertyName("lastUpdatedTimestamp"u8);
                writer.WriteStringValue(LastUpdatedOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(SynchWithAzureAttemptsCount))
            {
                writer.WritePropertyName("synchWithAzureAttemptsCount"u8);
                writer.WriteNumberValue(SynchWithAzureAttemptsCount.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(ContainerConfigurations))
            {
                writer.WritePropertyName("containerConfigurations"u8);
                writer.WriteStringValue(ContainerConfigurations);
            }
            if (Optional.IsCollectionDefined(CidrCsv))
            {
                writer.WritePropertyName("cidrCsv"u8);
                writer.WriteStartArray();
                foreach (var item in CidrCsv)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsDefined(CidrCsvLastUpdatedOn))
            {
                writer.WritePropertyName("cidrCsvLastUpdateTime"u8);
                writer.WriteStringValue(CidrCsvLastUpdatedOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(BgpCidrCsvLastUpdatedOn))
            {
                writer.WritePropertyName("bgpCidrCsvLastUpdateTime"u8);
                writer.WriteStringValue(BgpCidrCsvLastUpdatedOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(BgpLastReportedOn))
            {
                writer.WritePropertyName("bgpLastReportedTime"u8);
                writer.WriteStringValue(BgpLastReportedOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(BgpReviewStateText))
            {
                writer.WritePropertyName("bgpReviewStateText"u8);
                writer.WriteStringValue(BgpReviewStateText);
            }
            if (options.Format != "W" && Optional.IsDefined(BgpReviewState))
            {
                writer.WritePropertyName("bgpReviewState"u8);
                writer.WriteStringValue(BgpReviewState.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(BgpReviewFeedback))
            {
                writer.WritePropertyName("bgpReviewFeedback"u8);
                writer.WriteStringValue(BgpReviewFeedback);
            }
            if (options.Format != "W" && Optional.IsDefined(BgpNumberOfTimesUpdated))
            {
                writer.WritePropertyName("bgpNumberOfTimesUpdated"u8);
                writer.WriteNumberValue(BgpNumberOfTimesUpdated.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(BgpNumberOfRecords))
            {
                writer.WritePropertyName("bgpNumberOfRecords"u8);
                writer.WriteNumberValue(BgpNumberOfRecords.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(BgpCidrBlocksCount))
            {
                writer.WritePropertyName("bgpCidrBlocksCount"u8);
                writer.WriteNumberValue(BgpCidrBlocksCount.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(BgpAddressSpace))
            {
                writer.WritePropertyName("bgpAddressSpace"u8);
                writer.WriteNumberValue(BgpAddressSpace.Value);
            }
            if (Optional.IsDefined(ShouldMigrate))
            {
                writer.WritePropertyName("shouldMigrate"u8);
                writer.WriteBooleanValue(ShouldMigrate.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(BgpFileBytesTruncated))
            {
                writer.WritePropertyName("bgpFileBytesTruncated"u8);
                writer.WriteNumberValue(BgpFileBytesTruncated.Value);
            }
            if (Optional.IsDefined(CidrSelectionType))
            {
                writer.WritePropertyName("cidrSelectionType"u8);
                writer.WriteNumberValue(CidrSelectionType.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(IsFrozen))
            {
                writer.WritePropertyName("isFrozen"u8);
                writer.WriteBooleanValue(IsFrozen.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(ReviewState))
            {
                writer.WritePropertyName("reviewState"u8);
                writer.WriteNumberValue(ReviewState.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(ReviewStateText))
            {
                writer.WritePropertyName("reviewStateText"u8);
                writer.WriteStringValue(ReviewStateText);
            }
            if (options.Format != "W" && Optional.IsDefined(ReviewFeedback))
            {
                writer.WritePropertyName("reviewFeedback"u8);
                writer.WriteStringValue(ReviewFeedback);
            }
            if (options.Format != "W" && Optional.IsDefined(ConfigurationState))
            {
                writer.WritePropertyName("configurationState"u8);
                writer.WriteStringValue(ConfigurationState.Value.ToString());
            }
            if (options.Format != "W" && Optional.IsDefined(ConfigurationStateText))
            {
                writer.WritePropertyName("configurationStateText"u8);
                writer.WriteStringValue(ConfigurationStateText);
            }
            if (options.Format != "W" && Optional.IsDefined(AddressSpace))
            {
                writer.WritePropertyName("addressSpace"u8);
                writer.WriteNumberValue(AddressSpace.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(WorkerConnections))
            {
                writer.WritePropertyName("workerConnections"u8);
                writer.WriteNumberValue(WorkerConnections.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(WorkerConnectionsLastUpdatedOn))
            {
                writer.WritePropertyName("workerConnectionsLastUpdatedDateTime"u8);
                writer.WriteStringValue(WorkerConnectionsLastUpdatedOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(ContainerResyncTrigger))
            {
                writer.WritePropertyName("containerResyncTrigger"u8);
                writer.WriteNumberValue(ContainerResyncTrigger.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(ImageUri))
            {
                writer.WritePropertyName("imageUri"u8);
                writer.WriteStringValue(ImageUri.AbsoluteUri);
            }
            if (Optional.IsDefined(FullyQualifiedDomainName))
            {
                writer.WritePropertyName("fullyQualifiedDomainName"u8);
                writer.WriteStringValue(FullyQualifiedDomainName);
            }
            if (Optional.IsDefined(AutoUpdateRingType))
            {
                writer.WritePropertyName("autoUpdateRingType"u8);
                writer.WriteStringValue(AutoUpdateRingType.Value.ToString());
            }
            if (Optional.IsDefined(AutoUpdateRequestedWeek))
            {
                writer.WritePropertyName("autoUpdateRequestedWeek"u8);
                writer.WriteNumberValue(AutoUpdateRequestedWeek.Value);
            }
            if (Optional.IsDefined(AutoUpdateRequestedDay))
            {
                writer.WritePropertyName("autoUpdateRequestedDay"u8);
                writer.WriteNumberValue(AutoUpdateRequestedDay.Value);
            }
            if (Optional.IsDefined(AutoUpdateRequestedTime))
            {
                writer.WritePropertyName("autoUpdateRequestedTime"u8);
                writer.WriteStringValue(AutoUpdateRequestedTime);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        MccCacheNodeEntity IJsonModel<MccCacheNodeEntity>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MccCacheNodeEntity>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(MccCacheNodeEntity)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeMccCacheNodeEntity(document.RootElement, options);
        }

        internal static MccCacheNodeEntity DeserializeMccCacheNodeEntity(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ResourceIdentifier fullyQualifiedResourceId = default;
            string customerId = default;
            string customerName = default;
            string ipAddress = default;
            string customerIndex = default;
            string cacheNodeId = default;
            string cacheNodeName = default;
            int? customerAsn = default;
            bool? isEnabled = default;
            int? maxAllowableEgressInMbps = default;
            float? maxAllowableProbability = default;
            string xCid = default;
            bool? isEnterpriseManaged = default;
            string createAsyncOperationId = default;
            string deleteAsyncOperationId = default;
            string clientTenantId = default;
            string category = default;
            int? releaseVersion = default;
            DateTimeOffset? lastSyncWithAzureTimestamp = default;
            DateTimeOffset? lastUpdatedTimestamp = default;
            int? synchWithAzureAttemptsCount = default;
            string containerConfigurations = default;
            IList<string> cidrCsv = default;
            DateTimeOffset? cidrCsvLastUpdateTime = default;
            DateTimeOffset? bgpCidrCsvLastUpdateTime = default;
            DateTimeOffset? bgpLastReportedTime = default;
            string bgpReviewStateText = default;
            MccCacheNodeBgpReviewState? bgpReviewState = default;
            string bgpReviewFeedback = default;
            int? bgpNumberOfTimesUpdated = default;
            int? bgpNumberOfRecords = default;
            int? bgpCidrBlocksCount = default;
            int? bgpAddressSpace = default;
            bool? shouldMigrate = default;
            int? bgpFileBytesTruncated = default;
            int? cidrSelectionType = default;
            bool? isFrozen = default;
            int? reviewState = default;
            string reviewStateText = default;
            string reviewFeedback = default;
            MccCacheNodeConfigurationState? configurationState = default;
            string configurationStateText = default;
            int? addressSpace = default;
            int? workerConnections = default;
            DateTimeOffset? workerConnectionsLastUpdatedDateTime = default;
            int? containerResyncTrigger = default;
            Uri imageUri = default;
            string fullyQualifiedDomainName = default;
            AutoUpdateRingType? autoUpdateRingType = default;
            int? autoUpdateRequestedWeek = default;
            int? autoUpdateRequestedDay = default;
            string autoUpdateRequestedTime = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("fullyQualifiedResourceId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    fullyQualifiedResourceId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("customerId"u8))
                {
                    customerId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("customerName"u8))
                {
                    customerName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ipAddress"u8))
                {
                    ipAddress = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("customerIndex"u8))
                {
                    customerIndex = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("cacheNodeId"u8))
                {
                    cacheNodeId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("cacheNodeName"u8))
                {
                    cacheNodeName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("customerAsn"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    customerAsn = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("isEnabled"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("maxAllowableEgressInMbps"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maxAllowableEgressInMbps = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("maxAllowableProbability"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    maxAllowableProbability = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("xCid"u8))
                {
                    xCid = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("isEnterpriseManaged"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isEnterpriseManaged = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("createAsyncOperationId"u8))
                {
                    createAsyncOperationId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("deleteAsyncOperationId"u8))
                {
                    deleteAsyncOperationId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("clientTenantId"u8))
                {
                    clientTenantId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("category"u8))
                {
                    category = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("releaseVersion"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    releaseVersion = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("lastSyncWithAzureTimestamp"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastSyncWithAzureTimestamp = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("lastUpdatedTimestamp"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastUpdatedTimestamp = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("synchWithAzureAttemptsCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    synchWithAzureAttemptsCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("containerConfigurations"u8))
                {
                    containerConfigurations = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("cidrCsv"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    cidrCsv = array;
                    continue;
                }
                if (property.NameEquals("cidrCsvLastUpdateTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    cidrCsvLastUpdateTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("bgpCidrCsvLastUpdateTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    bgpCidrCsvLastUpdateTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("bgpLastReportedTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    bgpLastReportedTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("bgpReviewStateText"u8))
                {
                    bgpReviewStateText = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("bgpReviewState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    bgpReviewState = new MccCacheNodeBgpReviewState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("bgpReviewFeedback"u8))
                {
                    bgpReviewFeedback = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("bgpNumberOfTimesUpdated"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    bgpNumberOfTimesUpdated = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("bgpNumberOfRecords"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    bgpNumberOfRecords = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("bgpCidrBlocksCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    bgpCidrBlocksCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("bgpAddressSpace"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    bgpAddressSpace = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("shouldMigrate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    shouldMigrate = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("bgpFileBytesTruncated"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    bgpFileBytesTruncated = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("cidrSelectionType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    cidrSelectionType = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("isFrozen"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isFrozen = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("reviewState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    reviewState = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("reviewStateText"u8))
                {
                    reviewStateText = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("reviewFeedback"u8))
                {
                    reviewFeedback = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("configurationState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    configurationState = new MccCacheNodeConfigurationState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("configurationStateText"u8))
                {
                    configurationStateText = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("addressSpace"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    addressSpace = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("workerConnections"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    workerConnections = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("workerConnectionsLastUpdatedDateTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    workerConnectionsLastUpdatedDateTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("containerResyncTrigger"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    containerResyncTrigger = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("imageUri"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    imageUri = new Uri(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("fullyQualifiedDomainName"u8))
                {
                    fullyQualifiedDomainName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("autoUpdateRingType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    autoUpdateRingType = new AutoUpdateRingType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("autoUpdateRequestedWeek"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    autoUpdateRequestedWeek = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("autoUpdateRequestedDay"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    autoUpdateRequestedDay = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("autoUpdateRequestedTime"u8))
                {
                    autoUpdateRequestedTime = property.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new MccCacheNodeEntity(
                fullyQualifiedResourceId,
                customerId,
                customerName,
                ipAddress,
                customerIndex,
                cacheNodeId,
                cacheNodeName,
                customerAsn,
                isEnabled,
                maxAllowableEgressInMbps,
                maxAllowableProbability,
                xCid,
                isEnterpriseManaged,
                createAsyncOperationId,
                deleteAsyncOperationId,
                clientTenantId,
                category,
                releaseVersion,
                lastSyncWithAzureTimestamp,
                lastUpdatedTimestamp,
                synchWithAzureAttemptsCount,
                containerConfigurations,
                cidrCsv ?? new ChangeTrackingList<string>(),
                cidrCsvLastUpdateTime,
                bgpCidrCsvLastUpdateTime,
                bgpLastReportedTime,
                bgpReviewStateText,
                bgpReviewState,
                bgpReviewFeedback,
                bgpNumberOfTimesUpdated,
                bgpNumberOfRecords,
                bgpCidrBlocksCount,
                bgpAddressSpace,
                shouldMigrate,
                bgpFileBytesTruncated,
                cidrSelectionType,
                isFrozen,
                reviewState,
                reviewStateText,
                reviewFeedback,
                configurationState,
                configurationStateText,
                addressSpace,
                workerConnections,
                workerConnectionsLastUpdatedDateTime,
                containerResyncTrigger,
                imageUri,
                fullyQualifiedDomainName,
                autoUpdateRingType,
                autoUpdateRequestedWeek,
                autoUpdateRequestedDay,
                autoUpdateRequestedTime,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<MccCacheNodeEntity>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MccCacheNodeEntity>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerConnectedCacheContext.Default);
                default:
                    throw new FormatException($"The model {nameof(MccCacheNodeEntity)} does not support writing '{options.Format}' format.");
            }
        }

        MccCacheNodeEntity IPersistableModel<MccCacheNodeEntity>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MccCacheNodeEntity>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeMccCacheNodeEntity(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(MccCacheNodeEntity)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<MccCacheNodeEntity>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
