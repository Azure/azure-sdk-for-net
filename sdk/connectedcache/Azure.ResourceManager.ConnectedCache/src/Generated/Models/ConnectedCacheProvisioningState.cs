// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ConnectedCache.Models
{
    /// <summary> provisioning state of the resource. </summary>
    public readonly partial struct ConnectedCacheProvisioningState : IEquatable<ConnectedCacheProvisioningState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ConnectedCacheProvisioningState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ConnectedCacheProvisioningState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SucceededValue = "Succeeded";
        private const string FailedValue = "Failed";
        private const string CanceledValue = "Canceled";
        private const string UnknownValue = "Unknown";
        private const string AcceptedValue = "Accepted";
        private const string UpgradingValue = "Upgrading";
        private const string DeletingValue = "Deleting";

        /// <summary> Resource has been created. </summary>
        public static ConnectedCacheProvisioningState Succeeded { get; } = new ConnectedCacheProvisioningState(SucceededValue);
        /// <summary> Resource creation failed. </summary>
        public static ConnectedCacheProvisioningState Failed { get; } = new ConnectedCacheProvisioningState(FailedValue);
        /// <summary> Resource creation was canceled. </summary>
        public static ConnectedCacheProvisioningState Canceled { get; } = new ConnectedCacheProvisioningState(CanceledValue);
        /// <summary> unknown  state of the provisioning state. </summary>
        public static ConnectedCacheProvisioningState Unknown { get; } = new ConnectedCacheProvisioningState(UnknownValue);
        /// <summary> Accepted state of the provisioning state during the Async Operations. </summary>
        public static ConnectedCacheProvisioningState Accepted { get; } = new ConnectedCacheProvisioningState(AcceptedValue);
        /// <summary> Upgrading state of the provisioning state. </summary>
        public static ConnectedCacheProvisioningState Upgrading { get; } = new ConnectedCacheProvisioningState(UpgradingValue);
        /// <summary> Deleting state of the provisioning state. </summary>
        public static ConnectedCacheProvisioningState Deleting { get; } = new ConnectedCacheProvisioningState(DeletingValue);
        /// <summary> Determines if two <see cref="ConnectedCacheProvisioningState"/> values are the same. </summary>
        public static bool operator ==(ConnectedCacheProvisioningState left, ConnectedCacheProvisioningState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ConnectedCacheProvisioningState"/> values are not the same. </summary>
        public static bool operator !=(ConnectedCacheProvisioningState left, ConnectedCacheProvisioningState right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ConnectedCacheProvisioningState"/>. </summary>
        public static implicit operator ConnectedCacheProvisioningState(string value) => new ConnectedCacheProvisioningState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ConnectedCacheProvisioningState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ConnectedCacheProvisioningState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
