// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ConnectedCache.Models
{
    public partial class MccCacheNodeAutoUpdateInfo : IUtf8JsonSerializable, IJsonModel<MccCacheNodeAutoUpdateInfo>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<MccCacheNodeAutoUpdateInfo>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<MccCacheNodeAutoUpdateInfo>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MccCacheNodeAutoUpdateInfo>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(MccCacheNodeAutoUpdateInfo)} does not support writing '{format}' format.");
            }

            if (options.Format != "W" && Optional.IsDefined(ImageUriBeforeUpdate))
            {
                writer.WritePropertyName("imageUriBeforeUpdate"u8);
                writer.WriteStringValue(ImageUriBeforeUpdate);
            }
            if (options.Format != "W" && Optional.IsDefined(ImageUriTargeted))
            {
                writer.WritePropertyName("imageUriTargeted"u8);
                writer.WriteStringValue(ImageUriTargeted);
            }
            if (options.Format != "W" && Optional.IsDefined(ImageUriTerminal))
            {
                writer.WritePropertyName("imageUriTerminal"u8);
                writer.WriteStringValue(ImageUriTerminal);
            }
            if (options.Format != "W" && Optional.IsDefined(AutoUpdateRingType))
            {
                writer.WritePropertyName("autoUpdateRingType"u8);
                writer.WriteNumberValue(AutoUpdateRingType.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(MovedToTerminalStateOn))
            {
                writer.WritePropertyName("movedToTerminalStateDateTime"u8);
                writer.WriteStringValue(MovedToTerminalStateOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(RuleRequestedWeek))
            {
                writer.WritePropertyName("ruleRequestedWeek"u8);
                writer.WriteNumberValue(RuleRequestedWeek.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(RuleRequestedDay))
            {
                writer.WritePropertyName("ruleRequestedDay"u8);
                writer.WriteNumberValue(RuleRequestedDay.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(CreatedOn))
            {
                writer.WritePropertyName("createdDateTimeUtc"u8);
                writer.WriteStringValue(CreatedOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(UpdatedRegistryOn))
            {
                writer.WritePropertyName("updatedRegistryDateTimeUtc"u8);
                writer.WriteStringValue(UpdatedRegistryOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(PlanChangeLogText))
            {
                writer.WritePropertyName("planChangeLogText"u8);
                writer.WriteStringValue(PlanChangeLogText);
            }
            if (options.Format != "W" && Optional.IsDefined(AutoUpdateLastAppliedStatus))
            {
                writer.WritePropertyName("autoUpdateLastAppliedStatus"u8);
                writer.WriteNumberValue(AutoUpdateLastAppliedStatus.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(AutoUpdateLastAppliedStatusText))
            {
                writer.WritePropertyName("autoUpdateLastAppliedStatusText"u8);
                writer.WriteStringValue(AutoUpdateLastAppliedStatusText);
            }
            if (options.Format != "W" && Optional.IsDefined(AutoUpdateLastAppliedStatusDetailedText))
            {
                writer.WritePropertyName("autoUpdateLastAppliedStatusDetailedText"u8);
                writer.WriteStringValue(AutoUpdateLastAppliedStatusDetailedText);
            }
            if (options.Format != "W" && Optional.IsDefined(PlanId))
            {
                writer.WritePropertyName("planId"u8);
                writer.WriteNumberValue(PlanId.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(TimeToGoLiveDateTime))
            {
                writer.WritePropertyName("timeToGoLiveDateTime"u8);
                writer.WriteStringValue(TimeToGoLiveDateTime);
            }
            if (options.Format != "W" && Optional.IsDefined(RuleRequestedMinute))
            {
                writer.WritePropertyName("ruleRequestedMinute"u8);
                writer.WriteStringValue(RuleRequestedMinute);
            }
            if (options.Format != "W" && Optional.IsDefined(RuleRequestedHour))
            {
                writer.WritePropertyName("ruleRequestedHour"u8);
                writer.WriteStringValue(RuleRequestedHour);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        MccCacheNodeAutoUpdateInfo IJsonModel<MccCacheNodeAutoUpdateInfo>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MccCacheNodeAutoUpdateInfo>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(MccCacheNodeAutoUpdateInfo)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeMccCacheNodeAutoUpdateInfo(document.RootElement, options);
        }

        internal static MccCacheNodeAutoUpdateInfo DeserializeMccCacheNodeAutoUpdateInfo(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            string imageUriBeforeUpdate = default;
            string imageUriTargeted = default;
            string imageUriTerminal = default;
            int? autoUpdateRingType = default;
            DateTimeOffset? movedToTerminalStateDateTime = default;
            int? ruleRequestedWeek = default;
            int? ruleRequestedDay = default;
            DateTimeOffset? createdDateTimeUtc = default;
            DateTimeOffset? updatedRegistryDateTimeUtc = default;
            string planChangeLogText = default;
            int? autoUpdateLastAppliedStatus = default;
            string autoUpdateLastAppliedStatusText = default;
            string autoUpdateLastAppliedStatusDetailedText = default;
            long? planId = default;
            string timeToGoLiveDateTime = default;
            string ruleRequestedMinute = default;
            string ruleRequestedHour = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("imageUriBeforeUpdate"u8))
                {
                    imageUriBeforeUpdate = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("imageUriTargeted"u8))
                {
                    imageUriTargeted = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("imageUriTerminal"u8))
                {
                    imageUriTerminal = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("autoUpdateRingType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    autoUpdateRingType = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("movedToTerminalStateDateTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    movedToTerminalStateDateTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("ruleRequestedWeek"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    ruleRequestedWeek = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("ruleRequestedDay"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    ruleRequestedDay = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("createdDateTimeUtc"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    createdDateTimeUtc = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("updatedRegistryDateTimeUtc"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    updatedRegistryDateTimeUtc = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("planChangeLogText"u8))
                {
                    planChangeLogText = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("autoUpdateLastAppliedStatus"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    autoUpdateLastAppliedStatus = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("autoUpdateLastAppliedStatusText"u8))
                {
                    autoUpdateLastAppliedStatusText = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("autoUpdateLastAppliedStatusDetailedText"u8))
                {
                    autoUpdateLastAppliedStatusDetailedText = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("planId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    planId = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("timeToGoLiveDateTime"u8))
                {
                    timeToGoLiveDateTime = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ruleRequestedMinute"u8))
                {
                    ruleRequestedMinute = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("ruleRequestedHour"u8))
                {
                    ruleRequestedHour = property.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new MccCacheNodeAutoUpdateInfo(
                imageUriBeforeUpdate,
                imageUriTargeted,
                imageUriTerminal,
                autoUpdateRingType,
                movedToTerminalStateDateTime,
                ruleRequestedWeek,
                ruleRequestedDay,
                createdDateTimeUtc,
                updatedRegistryDateTimeUtc,
                planChangeLogText,
                autoUpdateLastAppliedStatus,
                autoUpdateLastAppliedStatusText,
                autoUpdateLastAppliedStatusDetailedText,
                planId,
                timeToGoLiveDateTime,
                ruleRequestedMinute,
                ruleRequestedHour,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<MccCacheNodeAutoUpdateInfo>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MccCacheNodeAutoUpdateInfo>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerConnectedCacheContext.Default);
                default:
                    throw new FormatException($"The model {nameof(MccCacheNodeAutoUpdateInfo)} does not support writing '{options.Format}' format.");
            }
        }

        MccCacheNodeAutoUpdateInfo IPersistableModel<MccCacheNodeAutoUpdateInfo>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MccCacheNodeAutoUpdateInfo>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeMccCacheNodeAutoUpdateInfo(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(MccCacheNodeAutoUpdateInfo)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<MccCacheNodeAutoUpdateInfo>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
