// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ConnectedCache.Models
{
    public partial class MccCacheNodeAdditionalProperties : IUtf8JsonSerializable, IJsonModel<MccCacheNodeAdditionalProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<MccCacheNodeAdditionalProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<MccCacheNodeAdditionalProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MccCacheNodeAdditionalProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(MccCacheNodeAdditionalProperties)} does not support writing '{format}' format.");
            }

            if (Optional.IsCollectionDefined(CacheNodePropertiesDetailsIssuesList))
            {
                writer.WritePropertyName("cacheNodePropertiesDetailsIssuesList"u8);
                writer.WriteStartArray();
                foreach (var item in CacheNodePropertiesDetailsIssuesList)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsCollectionDefined(IssuesList))
            {
                writer.WritePropertyName("issuesList"u8);
                writer.WriteStartArray();
                foreach (var item in IssuesList)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (options.Format != "W" && Optional.IsDefined(IssuesCount))
            {
                writer.WritePropertyName("issuesCount"u8);
                writer.WriteNumberValue(IssuesCount.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(CurrentTlsCertificate))
            {
                writer.WritePropertyName("currentTlsCertificate"u8);
                writer.WriteObjectValue(CurrentTlsCertificate, options);
            }
            if (options.Format != "W" && Optional.IsDefined(LastAutoUpdateInfo))
            {
                writer.WritePropertyName("lastAutoUpdateInfo"u8);
                writer.WriteObjectValue(LastAutoUpdateInfo, options);
            }
            if (options.Format != "W" && Optional.IsDefined(AggregatedStatusDetails))
            {
                writer.WritePropertyName("aggregatedStatusDetails"u8);
                writer.WriteStringValue(AggregatedStatusDetails);
            }
            if (options.Format != "W" && Optional.IsDefined(AggregatedStatusText))
            {
                writer.WritePropertyName("aggregatedStatusText"u8);
                writer.WriteStringValue(AggregatedStatusText);
            }
            if (options.Format != "W" && Optional.IsDefined(AggregatedStatusCode))
            {
                writer.WritePropertyName("aggregatedStatusCode"u8);
                writer.WriteNumberValue(AggregatedStatusCode.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(ProductVersion))
            {
                writer.WritePropertyName("productVersion"u8);
                writer.WriteStringValue(ProductVersion);
            }
            if (options.Format != "W" && Optional.IsDefined(IsProvisioned))
            {
                writer.WritePropertyName("isProvisioned"u8);
                writer.WriteBooleanValue(IsProvisioned.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(CacheNodeStateDetailedText))
            {
                writer.WritePropertyName("cacheNodeStateDetailedText"u8);
                writer.WriteStringValue(CacheNodeStateDetailedText);
            }
            if (options.Format != "W" && Optional.IsDefined(CacheNodeStateShortText))
            {
                writer.WritePropertyName("cacheNodeStateShortText"u8);
                writer.WriteStringValue(CacheNodeStateShortText);
            }
            if (options.Format != "W" && Optional.IsDefined(CacheNodeState))
            {
                writer.WritePropertyName("cacheNodeState"u8);
                writer.WriteNumberValue(CacheNodeState.Value);
            }
            if (Optional.IsCollectionDefined(DriveConfiguration))
            {
                writer.WritePropertyName("driveConfiguration"u8);
                writer.WriteStartArray();
                foreach (var item in DriveConfiguration)
                {
                    writer.WriteObjectValue(item, options);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(BgpConfiguration))
            {
                writer.WritePropertyName("bgpConfiguration"u8);
                writer.WriteObjectValue(BgpConfiguration, options);
            }
            if (Optional.IsDefined(ProxyUrlConfiguration))
            {
                writer.WritePropertyName("proxyUrlConfiguration"u8);
                writer.WriteObjectValue(ProxyUrlConfiguration, options);
            }
            if (Optional.IsDefined(IsProxyRequired))
            {
                writer.WritePropertyName("isProxyRequired"u8);
                writer.WriteStringValue(IsProxyRequired.Value.ToString());
            }
            if (Optional.IsDefined(OSType))
            {
                writer.WritePropertyName("osType"u8);
                writer.WriteStringValue(OSType.Value.ToString());
            }
            if (Optional.IsDefined(AutoUpdateVersion))
            {
                writer.WritePropertyName("autoUpdateVersion"u8);
                writer.WriteStringValue(AutoUpdateVersion);
            }
            if (Optional.IsDefined(UpdateInfoDetails))
            {
                writer.WritePropertyName("updateInfoDetails"u8);
                writer.WriteStringValue(UpdateInfoDetails);
            }
            if (Optional.IsDefined(UpdateRequestedOn))
            {
                writer.WritePropertyName("updateRequestedDateTime"u8);
                writer.WriteStringValue(UpdateRequestedOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(AutoUpdateNextAvailableVersion))
            {
                writer.WritePropertyName("autoUpdateNextAvailableVersion"u8);
                writer.WriteStringValue(AutoUpdateNextAvailableVersion);
            }
            if (options.Format != "W" && Optional.IsDefined(AutoUpdateNextAvailableOn))
            {
                writer.WritePropertyName("autoUpdateNextAvailableDateTime"u8);
                writer.WriteStringValue(AutoUpdateNextAvailableOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(AutoUpdateAppliedVersion))
            {
                writer.WritePropertyName("autoUpdateAppliedVersion"u8);
                writer.WriteStringValue(AutoUpdateAppliedVersion);
            }
            if (options.Format != "W" && Optional.IsDefined(AutoUpdateLastAppliedDetails))
            {
                writer.WritePropertyName("autoUpdateLastAppliedDetails"u8);
                writer.WriteStringValue(AutoUpdateLastAppliedDetails);
            }
            if (options.Format != "W" && Optional.IsDefined(AutoUpdateLastAppliedState))
            {
                writer.WritePropertyName("autoUpdateLastAppliedState"u8);
                writer.WriteStringValue(AutoUpdateLastAppliedState);
            }
            if (options.Format != "W" && Optional.IsDefined(AutoUpdateLastAppliedOn))
            {
                writer.WritePropertyName("autoUpdateLastAppliedDateTime"u8);
                writer.WriteStringValue(AutoUpdateLastAppliedOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(AutoUpdateLastTriggeredOn))
            {
                writer.WritePropertyName("autoUpdateLastTriggeredDateTime"u8);
                writer.WriteStringValue(AutoUpdateLastTriggeredOn.Value, "O");
            }
            if (Optional.IsDefined(CreationMethod))
            {
                writer.WritePropertyName("creationMethod"u8);
                writer.WriteNumberValue(CreationMethod.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(TlsStatus))
            {
                writer.WritePropertyName("tlsStatus"u8);
                writer.WriteStringValue(TlsStatus);
            }
            if (Optional.IsDefined(OptionalProperty1))
            {
                writer.WritePropertyName("optionalProperty1"u8);
                writer.WriteStringValue(OptionalProperty1);
            }
            if (Optional.IsDefined(OptionalProperty2))
            {
                writer.WritePropertyName("optionalProperty2"u8);
                writer.WriteStringValue(OptionalProperty2);
            }
            if (Optional.IsDefined(OptionalProperty3))
            {
                writer.WritePropertyName("optionalProperty3"u8);
                writer.WriteStringValue(OptionalProperty3);
            }
            if (Optional.IsDefined(OptionalProperty4))
            {
                writer.WritePropertyName("optionalProperty4"u8);
                writer.WriteStringValue(OptionalProperty4);
            }
            if (Optional.IsDefined(OptionalProperty5))
            {
                writer.WritePropertyName("optionalProperty5"u8);
                writer.WriteStringValue(OptionalProperty5);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        MccCacheNodeAdditionalProperties IJsonModel<MccCacheNodeAdditionalProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MccCacheNodeAdditionalProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(MccCacheNodeAdditionalProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeMccCacheNodeAdditionalProperties(document.RootElement, options);
        }

        internal static MccCacheNodeAdditionalProperties DeserializeMccCacheNodeAdditionalProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            IList<string> cacheNodePropertiesDetailsIssuesList = default;
            IReadOnlyList<string> issuesList = default;
            int? issuesCount = default;
            MccCacheNodeTlsCertificate currentTlsCertificate = default;
            MccCacheNodeAutoUpdateInfo lastAutoUpdateInfo = default;
            string aggregatedStatusDetails = default;
            string aggregatedStatusText = default;
            int? aggregatedStatusCode = default;
            string productVersion = default;
            bool? isProvisioned = default;
            string cacheNodeStateDetailedText = default;
            string cacheNodeStateShortText = default;
            int? cacheNodeState = default;
            IList<CacheNodeDriveConfiguration> driveConfiguration = default;
            MccCacheNodeBgpConfiguration bgpConfiguration = default;
            MccCacheNodeProxyUriConfiguration proxyUrlConfiguration = default;
            MccCacheNodeProxyRequired? isProxyRequired = default;
            MccCacheNodeOSType? osType = default;
            string autoUpdateVersion = default;
            string updateInfoDetails = default;
            DateTimeOffset? updateRequestedDateTime = default;
            string autoUpdateNextAvailableVersion = default;
            DateTimeOffset? autoUpdateNextAvailableDateTime = default;
            string autoUpdateAppliedVersion = default;
            string autoUpdateLastAppliedDetails = default;
            string autoUpdateLastAppliedState = default;
            DateTimeOffset? autoUpdateLastAppliedDateTime = default;
            DateTimeOffset? autoUpdateLastTriggeredDateTime = default;
            int? creationMethod = default;
            string tlsStatus = default;
            string optionalProperty1 = default;
            string optionalProperty2 = default;
            string optionalProperty3 = default;
            string optionalProperty4 = default;
            string optionalProperty5 = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("cacheNodePropertiesDetailsIssuesList"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    cacheNodePropertiesDetailsIssuesList = array;
                    continue;
                }
                if (property.NameEquals("issuesList"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    issuesList = array;
                    continue;
                }
                if (property.NameEquals("issuesCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    issuesCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("currentTlsCertificate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    currentTlsCertificate = MccCacheNodeTlsCertificate.DeserializeMccCacheNodeTlsCertificate(property.Value, options);
                    continue;
                }
                if (property.NameEquals("lastAutoUpdateInfo"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastAutoUpdateInfo = MccCacheNodeAutoUpdateInfo.DeserializeMccCacheNodeAutoUpdateInfo(property.Value, options);
                    continue;
                }
                if (property.NameEquals("aggregatedStatusDetails"u8))
                {
                    aggregatedStatusDetails = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("aggregatedStatusText"u8))
                {
                    aggregatedStatusText = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("aggregatedStatusCode"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    aggregatedStatusCode = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("productVersion"u8))
                {
                    productVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("isProvisioned"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isProvisioned = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("cacheNodeStateDetailedText"u8))
                {
                    cacheNodeStateDetailedText = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("cacheNodeStateShortText"u8))
                {
                    cacheNodeStateShortText = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("cacheNodeState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    cacheNodeState = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("driveConfiguration"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<CacheNodeDriveConfiguration> array = new List<CacheNodeDriveConfiguration>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(CacheNodeDriveConfiguration.DeserializeCacheNodeDriveConfiguration(item, options));
                    }
                    driveConfiguration = array;
                    continue;
                }
                if (property.NameEquals("bgpConfiguration"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    bgpConfiguration = MccCacheNodeBgpConfiguration.DeserializeMccCacheNodeBgpConfiguration(property.Value, options);
                    continue;
                }
                if (property.NameEquals("proxyUrlConfiguration"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    proxyUrlConfiguration = MccCacheNodeProxyUriConfiguration.DeserializeMccCacheNodeProxyUriConfiguration(property.Value, options);
                    continue;
                }
                if (property.NameEquals("isProxyRequired"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isProxyRequired = new MccCacheNodeProxyRequired(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("osType"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    osType = new MccCacheNodeOSType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("autoUpdateVersion"u8))
                {
                    autoUpdateVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("updateInfoDetails"u8))
                {
                    updateInfoDetails = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("updateRequestedDateTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    updateRequestedDateTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("autoUpdateNextAvailableVersion"u8))
                {
                    autoUpdateNextAvailableVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("autoUpdateNextAvailableDateTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    autoUpdateNextAvailableDateTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("autoUpdateAppliedVersion"u8))
                {
                    autoUpdateAppliedVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("autoUpdateLastAppliedDetails"u8))
                {
                    autoUpdateLastAppliedDetails = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("autoUpdateLastAppliedState"u8))
                {
                    autoUpdateLastAppliedState = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("autoUpdateLastAppliedDateTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    autoUpdateLastAppliedDateTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("autoUpdateLastTriggeredDateTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    autoUpdateLastTriggeredDateTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("creationMethod"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    creationMethod = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("tlsStatus"u8))
                {
                    tlsStatus = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("optionalProperty1"u8))
                {
                    optionalProperty1 = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("optionalProperty2"u8))
                {
                    optionalProperty2 = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("optionalProperty3"u8))
                {
                    optionalProperty3 = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("optionalProperty4"u8))
                {
                    optionalProperty4 = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("optionalProperty5"u8))
                {
                    optionalProperty5 = property.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new MccCacheNodeAdditionalProperties(
                cacheNodePropertiesDetailsIssuesList ?? new ChangeTrackingList<string>(),
                issuesList ?? new ChangeTrackingList<string>(),
                issuesCount,
                currentTlsCertificate,
                lastAutoUpdateInfo,
                aggregatedStatusDetails,
                aggregatedStatusText,
                aggregatedStatusCode,
                productVersion,
                isProvisioned,
                cacheNodeStateDetailedText,
                cacheNodeStateShortText,
                cacheNodeState,
                driveConfiguration ?? new ChangeTrackingList<CacheNodeDriveConfiguration>(),
                bgpConfiguration,
                proxyUrlConfiguration,
                isProxyRequired,
                osType,
                autoUpdateVersion,
                updateInfoDetails,
                updateRequestedDateTime,
                autoUpdateNextAvailableVersion,
                autoUpdateNextAvailableDateTime,
                autoUpdateAppliedVersion,
                autoUpdateLastAppliedDetails,
                autoUpdateLastAppliedState,
                autoUpdateLastAppliedDateTime,
                autoUpdateLastTriggeredDateTime,
                creationMethod,
                tlsStatus,
                optionalProperty1,
                optionalProperty2,
                optionalProperty3,
                optionalProperty4,
                optionalProperty5,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<MccCacheNodeAdditionalProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MccCacheNodeAdditionalProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerConnectedCacheContext.Default);
                default:
                    throw new FormatException($"The model {nameof(MccCacheNodeAdditionalProperties)} does not support writing '{options.Format}' format.");
            }
        }

        MccCacheNodeAdditionalProperties IPersistableModel<MccCacheNodeAdditionalProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MccCacheNodeAdditionalProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeMccCacheNodeAdditionalProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(MccCacheNodeAdditionalProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<MccCacheNodeAdditionalProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
