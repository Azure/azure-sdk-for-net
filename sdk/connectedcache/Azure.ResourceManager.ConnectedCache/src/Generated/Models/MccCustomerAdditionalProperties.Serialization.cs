// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ConnectedCache.Models
{
    public partial class MccCustomerAdditionalProperties : IUtf8JsonSerializable, IJsonModel<MccCustomerAdditionalProperties>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<MccCustomerAdditionalProperties>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<MccCustomerAdditionalProperties>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MccCustomerAdditionalProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(MccCustomerAdditionalProperties)} does not support writing '{format}' format.");
            }

            if (options.Format != "W" && Optional.IsDefined(CustomerPropertiesOverviewCacheEfficiency))
            {
                writer.WritePropertyName("customerPropertiesOverviewCacheEfficiency"u8);
                writer.WriteNumberValue(CustomerPropertiesOverviewCacheEfficiency.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(CustomerPropertiesOverviewAverageEgressMbps))
            {
                writer.WritePropertyName("customerPropertiesOverviewAverageEgressMbps"u8);
                writer.WriteNumberValue(CustomerPropertiesOverviewAverageEgressMbps.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(CustomerPropertiesOverviewAverageMissMbps))
            {
                writer.WritePropertyName("customerPropertiesOverviewAverageMissMbps"u8);
                writer.WriteNumberValue(CustomerPropertiesOverviewAverageMissMbps.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(CustomerPropertiesOverviewEgressMbpsMax))
            {
                writer.WritePropertyName("customerPropertiesOverviewEgressMbpsMax"u8);
                writer.WriteNumberValue(CustomerPropertiesOverviewEgressMbpsMax.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(CustomerPropertiesOverviewEgressMbpsMaxOn))
            {
                writer.WritePropertyName("customerPropertiesOverviewEgressMbpsMaxDateTime"u8);
                writer.WriteStringValue(CustomerPropertiesOverviewEgressMbpsMaxOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(CustomerPropertiesOverviewMissMbpsMax))
            {
                writer.WritePropertyName("customerPropertiesOverviewMissMbpsMax"u8);
                writer.WriteNumberValue(CustomerPropertiesOverviewMissMbpsMax.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(CustomerPropertiesOverviewMissMbpsMaxOn))
            {
                writer.WritePropertyName("customerPropertiesOverviewMissMbpsMaxDateTime"u8);
                writer.WriteStringValue(CustomerPropertiesOverviewMissMbpsMaxOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(CustomerPropertiesOverviewCacheNodesHealthyCount))
            {
                writer.WritePropertyName("customerPropertiesOverviewCacheNodesHealthyCount"u8);
                writer.WriteNumberValue(CustomerPropertiesOverviewCacheNodesHealthyCount.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(CustomerPropertiesOverviewCacheNodesUnhealthyCount))
            {
                writer.WritePropertyName("customerPropertiesOverviewCacheNodesUnhealthyCount"u8);
                writer.WriteNumberValue(CustomerPropertiesOverviewCacheNodesUnhealthyCount.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(SignupStatus))
            {
                writer.WritePropertyName("signupStatus"u8);
                writer.WriteBooleanValue(SignupStatus.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(SignupStatusCode))
            {
                writer.WritePropertyName("signupStatusCode"u8);
                writer.WriteNumberValue(SignupStatusCode.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(SignupStatusText))
            {
                writer.WritePropertyName("signupStatusText"u8);
                writer.WriteStringValue(SignupStatusText);
            }
            if (options.Format != "W" && Optional.IsDefined(SignupPhaseStatusCode))
            {
                writer.WritePropertyName("signupPhaseStatusCode"u8);
                writer.WriteNumberValue(SignupPhaseStatusCode.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(SignupPhaseStatusText))
            {
                writer.WritePropertyName("signupPhaseStatusText"u8);
                writer.WriteStringValue(SignupPhaseStatusText);
            }
            if (options.Format != "W" && Optional.IsDefined(PeeringDBLastUpdatedOn))
            {
                writer.WritePropertyName("peeringDbLastUpdateDate"u8);
                writer.WriteStringValue(PeeringDBLastUpdatedOn.Value, "O");
            }
            if (options.Format != "W" && Optional.IsDefined(CustomerOrgName))
            {
                writer.WritePropertyName("customerOrgName"u8);
                writer.WriteStringValue(CustomerOrgName);
            }
            if (Optional.IsDefined(CustomerEmail))
            {
                writer.WritePropertyName("customerEmail"u8);
                writer.WriteStringValue(CustomerEmail);
            }
            if (Optional.IsDefined(CustomerTransitAsn))
            {
                writer.WritePropertyName("customerTransitAsn"u8);
                writer.WriteStringValue(CustomerTransitAsn);
            }
            if (Optional.IsDefined(CustomerTransitState))
            {
                writer.WritePropertyName("customerTransitState"u8);
                writer.WriteStringValue(CustomerTransitState.Value.ToString());
            }
            if (Optional.IsDefined(CustomerAsn))
            {
                writer.WritePropertyName("customerAsn"u8);
                writer.WriteStringValue(CustomerAsn);
            }
            if (options.Format != "W" && Optional.IsDefined(CustomerAsnEstimatedEgressPeekGbps))
            {
                writer.WritePropertyName("customerAsnEstimatedEgressPeekGbps"u8);
                writer.WriteNumberValue(CustomerAsnEstimatedEgressPeekGbps.Value);
            }
            if (Optional.IsDefined(CustomerEntitlementSkuId))
            {
                writer.WritePropertyName("customerEntitlementSkuId"u8);
                writer.WriteStringValue(CustomerEntitlementSkuId);
            }
            if (Optional.IsDefined(CustomerEntitlementSkuGuid))
            {
                writer.WritePropertyName("customerEntitlementSkuGuid"u8);
                writer.WriteStringValue(CustomerEntitlementSkuGuid);
            }
            if (Optional.IsDefined(CustomerEntitlementSkuName))
            {
                writer.WritePropertyName("customerEntitlementSkuName"u8);
                writer.WriteStringValue(CustomerEntitlementSkuName);
            }
            if (Optional.IsDefined(CustomerEntitlementExpiryOn))
            {
                writer.WritePropertyName("customerEntitlementExpiration"u8);
                writer.WriteStringValue(CustomerEntitlementExpiryOn.Value, "O");
            }
            if (Optional.IsDefined(OptionalProperty1))
            {
                writer.WritePropertyName("optionalProperty1"u8);
                writer.WriteStringValue(OptionalProperty1);
            }
            if (Optional.IsDefined(OptionalProperty2))
            {
                writer.WritePropertyName("optionalProperty2"u8);
                writer.WriteStringValue(OptionalProperty2);
            }
            if (Optional.IsDefined(OptionalProperty3))
            {
                writer.WritePropertyName("optionalProperty3"u8);
                writer.WriteStringValue(OptionalProperty3);
            }
            if (Optional.IsDefined(OptionalProperty4))
            {
                writer.WritePropertyName("optionalProperty4"u8);
                writer.WriteStringValue(OptionalProperty4);
            }
            if (Optional.IsDefined(OptionalProperty5))
            {
                writer.WritePropertyName("optionalProperty5"u8);
                writer.WriteStringValue(OptionalProperty5);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        MccCustomerAdditionalProperties IJsonModel<MccCustomerAdditionalProperties>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MccCustomerAdditionalProperties>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(MccCustomerAdditionalProperties)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeMccCustomerAdditionalProperties(document.RootElement, options);
        }

        internal static MccCustomerAdditionalProperties DeserializeMccCustomerAdditionalProperties(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            float? customerPropertiesOverviewCacheEfficiency = default;
            float? customerPropertiesOverviewAverageEgressMbps = default;
            float? customerPropertiesOverviewAverageMissMbps = default;
            float? customerPropertiesOverviewEgressMbpsMax = default;
            DateTimeOffset? customerPropertiesOverviewEgressMbpsMaxDateTime = default;
            float? customerPropertiesOverviewMissMbpsMax = default;
            DateTimeOffset? customerPropertiesOverviewMissMbpsMaxDateTime = default;
            int? customerPropertiesOverviewCacheNodesHealthyCount = default;
            int? customerPropertiesOverviewCacheNodesUnhealthyCount = default;
            bool? signupStatus = default;
            int? signupStatusCode = default;
            string signupStatusText = default;
            int? signupPhaseStatusCode = default;
            string signupPhaseStatusText = default;
            DateTimeOffset? peeringDbLastUpdateDate = default;
            string customerOrgName = default;
            string customerEmail = default;
            string customerTransitAsn = default;
            CustomerTransitState? customerTransitState = default;
            string customerAsn = default;
            float? customerAsnEstimatedEgressPeekGbps = default;
            string customerEntitlementSkuId = default;
            string customerEntitlementSkuGuid = default;
            string customerEntitlementSkuName = default;
            DateTimeOffset? customerEntitlementExpiration = default;
            string optionalProperty1 = default;
            string optionalProperty2 = default;
            string optionalProperty3 = default;
            string optionalProperty4 = default;
            string optionalProperty5 = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("customerPropertiesOverviewCacheEfficiency"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    customerPropertiesOverviewCacheEfficiency = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("customerPropertiesOverviewAverageEgressMbps"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    customerPropertiesOverviewAverageEgressMbps = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("customerPropertiesOverviewAverageMissMbps"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    customerPropertiesOverviewAverageMissMbps = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("customerPropertiesOverviewEgressMbpsMax"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    customerPropertiesOverviewEgressMbpsMax = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("customerPropertiesOverviewEgressMbpsMaxDateTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    customerPropertiesOverviewEgressMbpsMaxDateTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("customerPropertiesOverviewMissMbpsMax"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    customerPropertiesOverviewMissMbpsMax = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("customerPropertiesOverviewMissMbpsMaxDateTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    customerPropertiesOverviewMissMbpsMaxDateTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("customerPropertiesOverviewCacheNodesHealthyCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    customerPropertiesOverviewCacheNodesHealthyCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("customerPropertiesOverviewCacheNodesUnhealthyCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    customerPropertiesOverviewCacheNodesUnhealthyCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("signupStatus"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    signupStatus = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("signupStatusCode"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    signupStatusCode = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("signupStatusText"u8))
                {
                    signupStatusText = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("signupPhaseStatusCode"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    signupPhaseStatusCode = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("signupPhaseStatusText"u8))
                {
                    signupPhaseStatusText = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("peeringDbLastUpdateDate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    peeringDbLastUpdateDate = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("customerOrgName"u8))
                {
                    customerOrgName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("customerEmail"u8))
                {
                    customerEmail = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("customerTransitAsn"u8))
                {
                    customerTransitAsn = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("customerTransitState"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    customerTransitState = new CustomerTransitState(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("customerAsn"u8))
                {
                    customerAsn = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("customerAsnEstimatedEgressPeekGbps"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    customerAsnEstimatedEgressPeekGbps = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("customerEntitlementSkuId"u8))
                {
                    customerEntitlementSkuId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("customerEntitlementSkuGuid"u8))
                {
                    customerEntitlementSkuGuid = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("customerEntitlementSkuName"u8))
                {
                    customerEntitlementSkuName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("customerEntitlementExpiration"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    customerEntitlementExpiration = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("optionalProperty1"u8))
                {
                    optionalProperty1 = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("optionalProperty2"u8))
                {
                    optionalProperty2 = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("optionalProperty3"u8))
                {
                    optionalProperty3 = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("optionalProperty4"u8))
                {
                    optionalProperty4 = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("optionalProperty5"u8))
                {
                    optionalProperty5 = property.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new MccCustomerAdditionalProperties(
                customerPropertiesOverviewCacheEfficiency,
                customerPropertiesOverviewAverageEgressMbps,
                customerPropertiesOverviewAverageMissMbps,
                customerPropertiesOverviewEgressMbpsMax,
                customerPropertiesOverviewEgressMbpsMaxDateTime,
                customerPropertiesOverviewMissMbpsMax,
                customerPropertiesOverviewMissMbpsMaxDateTime,
                customerPropertiesOverviewCacheNodesHealthyCount,
                customerPropertiesOverviewCacheNodesUnhealthyCount,
                signupStatus,
                signupStatusCode,
                signupStatusText,
                signupPhaseStatusCode,
                signupPhaseStatusText,
                peeringDbLastUpdateDate,
                customerOrgName,
                customerEmail,
                customerTransitAsn,
                customerTransitState,
                customerAsn,
                customerAsnEstimatedEgressPeekGbps,
                customerEntitlementSkuId,
                customerEntitlementSkuGuid,
                customerEntitlementSkuName,
                customerEntitlementExpiration,
                optionalProperty1,
                optionalProperty2,
                optionalProperty3,
                optionalProperty4,
                optionalProperty5,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<MccCustomerAdditionalProperties>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MccCustomerAdditionalProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerConnectedCacheContext.Default);
                default:
                    throw new FormatException($"The model {nameof(MccCustomerAdditionalProperties)} does not support writing '{options.Format}' format.");
            }
        }

        MccCustomerAdditionalProperties IPersistableModel<MccCustomerAdditionalProperties>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MccCustomerAdditionalProperties>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeMccCustomerAdditionalProperties(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(MccCustomerAdditionalProperties)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<MccCustomerAdditionalProperties>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
