// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ConnectedCache.Models
{
    /// <summary> Cache node configuration setup state. </summary>
    public readonly partial struct MccCacheNodeConfigurationState : IEquatable<MccCacheNodeConfigurationState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="MccCacheNodeConfigurationState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public MccCacheNodeConfigurationState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ConfiguredValue = "Configured";
        private const string NotConfiguredIPValue = "NotConfigured_Ip";

        /// <summary> connected cache setup configured. </summary>
        public static MccCacheNodeConfigurationState Configured { get; } = new MccCacheNodeConfigurationState(ConfiguredValue);
        /// <summary> connected cache setup not configured. </summary>
        public static MccCacheNodeConfigurationState NotConfiguredIP { get; } = new MccCacheNodeConfigurationState(NotConfiguredIPValue);
        /// <summary> Determines if two <see cref="MccCacheNodeConfigurationState"/> values are the same. </summary>
        public static bool operator ==(MccCacheNodeConfigurationState left, MccCacheNodeConfigurationState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="MccCacheNodeConfigurationState"/> values are not the same. </summary>
        public static bool operator !=(MccCacheNodeConfigurationState left, MccCacheNodeConfigurationState right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="MccCacheNodeConfigurationState"/>. </summary>
        public static implicit operator MccCacheNodeConfigurationState(string value) => new MccCacheNodeConfigurationState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is MccCacheNodeConfigurationState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(MccCacheNodeConfigurationState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
