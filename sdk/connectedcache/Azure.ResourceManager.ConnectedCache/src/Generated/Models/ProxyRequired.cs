// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.ConnectedCache.Models
{
    /// <summary> Proxy details enum. </summary>
    public readonly partial struct ProxyRequired : IEquatable<ProxyRequired>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ProxyRequired"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ProxyRequired(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NoneValue = "None";
        private const string RequiredValue = "Required";

        /// <summary> Proxy is not required in setup. </summary>
        public static ProxyRequired None { get; } = new ProxyRequired(NoneValue);
        /// <summary> proxy is required in setup. </summary>
        public static ProxyRequired Required { get; } = new ProxyRequired(RequiredValue);
        /// <summary> Determines if two <see cref="ProxyRequired"/> values are the same. </summary>
        public static bool operator ==(ProxyRequired left, ProxyRequired right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ProxyRequired"/> values are not the same. </summary>
        public static bool operator !=(ProxyRequired left, ProxyRequired right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ProxyRequired"/>. </summary>
        public static implicit operator ProxyRequired(string value) => new ProxyRequired(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ProxyRequired other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ProxyRequired other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
