// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ConnectedCache.Models
{
    public partial class MccCustomerEntity : IUtf8JsonSerializable, IJsonModel<MccCustomerEntity>
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((IJsonModel<MccCustomerEntity>)this).Write(writer, ModelSerializationExtensions.WireOptions);

        void IJsonModel<MccCustomerEntity>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            writer.WriteStartObject();
            JsonModelWriteCore(writer, options);
            writer.WriteEndObject();
        }

        /// <param name="writer"> The JSON writer. </param>
        /// <param name="options"> The client options for reading and writing models. </param>
        protected virtual void JsonModelWriteCore(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MccCustomerEntity>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(MccCustomerEntity)} does not support writing '{format}' format.");
            }

            if (Optional.IsDefined(FullyQualifiedResourceId))
            {
                writer.WritePropertyName("fullyQualifiedResourceId"u8);
                writer.WriteStringValue(FullyQualifiedResourceId);
            }
            if (options.Format != "W" && Optional.IsDefined(CustomerId))
            {
                writer.WritePropertyName("customerId"u8);
                writer.WriteStringValue(CustomerId);
            }
            if (Optional.IsDefined(CustomerName))
            {
                writer.WritePropertyName("customerName"u8);
                writer.WriteStringValue(CustomerName);
            }
            if (Optional.IsDefined(ContactEmail))
            {
                writer.WritePropertyName("contactEmail"u8);
                writer.WriteStringValue(ContactEmail);
            }
            if (Optional.IsDefined(ContactPhone))
            {
                writer.WritePropertyName("contactPhone"u8);
                writer.WriteStringValue(ContactPhone);
            }
            if (Optional.IsDefined(ContactName))
            {
                writer.WritePropertyName("contactName"u8);
                writer.WriteStringValue(ContactName);
            }
            if (Optional.IsDefined(IsEntitled))
            {
                writer.WritePropertyName("isEntitled"u8);
                writer.WriteBooleanValue(IsEntitled.Value);
            }
            if (Optional.IsDefined(ReleaseVersion))
            {
                writer.WritePropertyName("releaseVersion"u8);
                writer.WriteNumberValue(ReleaseVersion.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(CreateAsyncOperationId))
            {
                writer.WritePropertyName("createAsyncOperationId"u8);
                writer.WriteStringValue(CreateAsyncOperationId);
            }
            if (options.Format != "W" && Optional.IsDefined(DeleteAsyncOperationId))
            {
                writer.WritePropertyName("deleteAsyncOperationId"u8);
                writer.WriteStringValue(DeleteAsyncOperationId);
            }
            if (Optional.IsDefined(ClientTenantId))
            {
                writer.WritePropertyName("clientTenantId"u8);
                writer.WriteStringValue(ClientTenantId);
            }
            if (options.Format != "W" && Optional.IsDefined(SynchWithAzureAttemptsCount))
            {
                writer.WritePropertyName("synchWithAzureAttemptsCount"u8);
                writer.WriteNumberValue(SynchWithAzureAttemptsCount.Value);
            }
            if (options.Format != "W" && Optional.IsDefined(LastSyncedWithAzureOn))
            {
                writer.WritePropertyName("lastSyncWithAzureTimestamp"u8);
                writer.WriteStringValue(LastSyncedWithAzureOn.Value, "O");
            }
            if (Optional.IsDefined(IsEnterpriseManaged))
            {
                writer.WritePropertyName("isEnterpriseManaged"u8);
                writer.WriteBooleanValue(IsEnterpriseManaged.Value);
            }
            if (Optional.IsDefined(ShouldMigrate))
            {
                writer.WritePropertyName("shouldMigrate"u8);
                writer.WriteBooleanValue(ShouldMigrate.Value);
            }
            if (Optional.IsDefined(ResendSignupCode))
            {
                writer.WritePropertyName("resendSignupCode"u8);
                writer.WriteBooleanValue(ResendSignupCode.Value);
            }
            if (Optional.IsDefined(VerifySignupCode))
            {
                writer.WritePropertyName("verifySignupCode"u8);
                writer.WriteBooleanValue(VerifySignupCode.Value);
            }
            if (Optional.IsDefined(VerifySignupPhrase))
            {
                writer.WritePropertyName("verifySignupPhrase"u8);
                writer.WriteStringValue(VerifySignupPhrase);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value, ModelSerializationExtensions.JsonDocumentOptions))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
        }

        MccCustomerEntity IJsonModel<MccCustomerEntity>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MccCustomerEntity>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(MccCustomerEntity)} does not support reading '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeMccCustomerEntity(document.RootElement, options);
        }

        internal static MccCustomerEntity DeserializeMccCustomerEntity(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= ModelSerializationExtensions.WireOptions;

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            ResourceIdentifier fullyQualifiedResourceId = default;
            string customerId = default;
            string customerName = default;
            string contactEmail = default;
            string contactPhone = default;
            string contactName = default;
            bool? isEntitled = default;
            int? releaseVersion = default;
            string createAsyncOperationId = default;
            string deleteAsyncOperationId = default;
            string clientTenantId = default;
            int? synchWithAzureAttemptsCount = default;
            DateTimeOffset? lastSyncWithAzureTimestamp = default;
            bool? isEnterpriseManaged = default;
            bool? shouldMigrate = default;
            bool? resendSignupCode = default;
            bool? verifySignupCode = default;
            string verifySignupPhrase = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> rawDataDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("fullyQualifiedResourceId"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    fullyQualifiedResourceId = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("customerId"u8))
                {
                    customerId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("customerName"u8))
                {
                    customerName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("contactEmail"u8))
                {
                    contactEmail = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("contactPhone"u8))
                {
                    contactPhone = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("contactName"u8))
                {
                    contactName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("isEntitled"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isEntitled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("releaseVersion"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    releaseVersion = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("createAsyncOperationId"u8))
                {
                    createAsyncOperationId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("deleteAsyncOperationId"u8))
                {
                    deleteAsyncOperationId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("clientTenantId"u8))
                {
                    clientTenantId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("synchWithAzureAttemptsCount"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    synchWithAzureAttemptsCount = property.Value.GetInt32();
                    continue;
                }
                if (property.NameEquals("lastSyncWithAzureTimestamp"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    lastSyncWithAzureTimestamp = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("isEnterpriseManaged"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    isEnterpriseManaged = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("shouldMigrate"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    shouldMigrate = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("resendSignupCode"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    resendSignupCode = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("verifySignupCode"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    verifySignupCode = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("verifySignupPhrase"u8))
                {
                    verifySignupPhrase = property.Value.GetString();
                    continue;
                }
                if (options.Format != "W")
                {
                    rawDataDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = rawDataDictionary;
            return new MccCustomerEntity(
                fullyQualifiedResourceId,
                customerId,
                customerName,
                contactEmail,
                contactPhone,
                contactName,
                isEntitled,
                releaseVersion,
                createAsyncOperationId,
                deleteAsyncOperationId,
                clientTenantId,
                synchWithAzureAttemptsCount,
                lastSyncWithAzureTimestamp,
                isEnterpriseManaged,
                shouldMigrate,
                resendSignupCode,
                verifySignupCode,
                verifySignupPhrase,
                serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<MccCustomerEntity>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MccCustomerEntity>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options, AzureResourceManagerConnectedCacheContext.Default);
                default:
                    throw new FormatException($"The model {nameof(MccCustomerEntity)} does not support writing '{options.Format}' format.");
            }
        }

        MccCustomerEntity IPersistableModel<MccCustomerEntity>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<MccCustomerEntity>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data, ModelSerializationExtensions.JsonDocumentOptions);
                        return DeserializeMccCustomerEntity(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(MccCustomerEntity)} does not support reading '{options.Format}' format.");
            }
        }

        string IPersistableModel<MccCustomerEntity>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";
    }
}
