// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager.ConnectedCache.Models;

namespace Azure.ResourceManager.ConnectedCache
{
    internal partial class IspCacheNodesRestOperations
    {
        private readonly TelemetryDetails _userAgent;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> Initializes a new instance of IspCacheNodesRestOperations. </summary>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="applicationId"> The application id to use for user agent. </param>
        /// <param name="endpoint"> Service host. </param>
        /// <param name="apiVersion"> The API version to use for this operation. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="pipeline"/> or <paramref name="apiVersion"/> is null. </exception>
        public IspCacheNodesRestOperations(HttpPipeline pipeline, string applicationId, Uri endpoint = null, string apiVersion = default)
        {
            _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
            _endpoint = endpoint ?? new Uri("https://management.azure.com");
            _apiVersion = apiVersion ?? "2024-11-30-preview";
            _userAgent = new TelemetryDetails(GetType().Assembly, applicationId);
        }

        internal RequestUriBuilder CreateGetRequestUri(string subscriptionId, string resourceGroupName, string customerResourceName, string cacheNodeResourceName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.ConnectedCache/ispCustomers/", false);
            uri.AppendPath(customerResourceName, true);
            uri.AppendPath("/ispCacheNodes/", false);
            uri.AppendPath(cacheNodeResourceName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateGetRequest(string subscriptionId, string resourceGroupName, string customerResourceName, string cacheNodeResourceName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.ConnectedCache/ispCustomers/", false);
            uri.AppendPath(customerResourceName, true);
            uri.AppendPath("/ispCacheNodes/", false);
            uri.AppendPath(cacheNodeResourceName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> This api gets ispCacheNode resource information. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="customerResourceName"> Name of the Customer resource. </param>
        /// <param name="cacheNodeResourceName"> Name of the ConnectedCache resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="customerResourceName"/> or <paramref name="cacheNodeResourceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="customerResourceName"/> or <paramref name="cacheNodeResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<IspCacheNodeData>> GetAsync(string subscriptionId, string resourceGroupName, string customerResourceName, string cacheNodeResourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(customerResourceName, nameof(customerResourceName));
            Argument.AssertNotNullOrEmpty(cacheNodeResourceName, nameof(cacheNodeResourceName));

            using var message = CreateGetRequest(subscriptionId, resourceGroupName, customerResourceName, cacheNodeResourceName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IspCacheNodeData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = IspCacheNodeData.DeserializeIspCacheNodeData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((IspCacheNodeData)null, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> This api gets ispCacheNode resource information. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="customerResourceName"> Name of the Customer resource. </param>
        /// <param name="cacheNodeResourceName"> Name of the ConnectedCache resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="customerResourceName"/> or <paramref name="cacheNodeResourceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="customerResourceName"/> or <paramref name="cacheNodeResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<IspCacheNodeData> Get(string subscriptionId, string resourceGroupName, string customerResourceName, string cacheNodeResourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(customerResourceName, nameof(customerResourceName));
            Argument.AssertNotNullOrEmpty(cacheNodeResourceName, nameof(cacheNodeResourceName));

            using var message = CreateGetRequest(subscriptionId, resourceGroupName, customerResourceName, cacheNodeResourceName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IspCacheNodeData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = IspCacheNodeData.DeserializeIspCacheNodeData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                case 404:
                    return Response.FromValue((IspCacheNodeData)null, message.Response);
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateCreateOrUpdateRequestUri(string subscriptionId, string resourceGroupName, string customerResourceName, string cacheNodeResourceName, IspCacheNodeData data)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.ConnectedCache/ispCustomers/", false);
            uri.AppendPath(customerResourceName, true);
            uri.AppendPath("/ispCacheNodes/", false);
            uri.AppendPath(cacheNodeResourceName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateCreateOrUpdateRequest(string subscriptionId, string resourceGroupName, string customerResourceName, string cacheNodeResourceName, IspCacheNodeData data)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.ConnectedCache/ispCustomers/", false);
            uri.AppendPath(customerResourceName, true);
            uri.AppendPath("/ispCacheNodes/", false);
            uri.AppendPath(cacheNodeResourceName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(data, ModelSerializationExtensions.WireOptions);
            request.Content = content;
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> This api creates an ispCacheNode with the specified create parameters. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="customerResourceName"> Name of the Customer resource. </param>
        /// <param name="cacheNodeResourceName"> Name of the ConnectedCache resource. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="customerResourceName"/>, <paramref name="cacheNodeResourceName"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="customerResourceName"/> or <paramref name="cacheNodeResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response> CreateOrUpdateAsync(string subscriptionId, string resourceGroupName, string customerResourceName, string cacheNodeResourceName, IspCacheNodeData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(customerResourceName, nameof(customerResourceName));
            Argument.AssertNotNullOrEmpty(cacheNodeResourceName, nameof(cacheNodeResourceName));
            Argument.AssertNotNull(data, nameof(data));

            using var message = CreateCreateOrUpdateRequest(subscriptionId, resourceGroupName, customerResourceName, cacheNodeResourceName, data);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> This api creates an ispCacheNode with the specified create parameters. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="customerResourceName"> Name of the Customer resource. </param>
        /// <param name="cacheNodeResourceName"> Name of the ConnectedCache resource. </param>
        /// <param name="data"> Resource create parameters. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="customerResourceName"/>, <paramref name="cacheNodeResourceName"/> or <paramref name="data"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="customerResourceName"/> or <paramref name="cacheNodeResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response CreateOrUpdate(string subscriptionId, string resourceGroupName, string customerResourceName, string cacheNodeResourceName, IspCacheNodeData data, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(customerResourceName, nameof(customerResourceName));
            Argument.AssertNotNullOrEmpty(cacheNodeResourceName, nameof(cacheNodeResourceName));
            Argument.AssertNotNull(data, nameof(data));

            using var message = CreateCreateOrUpdateRequest(subscriptionId, resourceGroupName, customerResourceName, cacheNodeResourceName, data);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateUpdateRequestUri(string subscriptionId, string resourceGroupName, string customerResourceName, string cacheNodeResourceName, ConnectedCachePatchContent content)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.ConnectedCache/ispCustomers/", false);
            uri.AppendPath(customerResourceName, true);
            uri.AppendPath("/ispCacheNodes/", false);
            uri.AppendPath(cacheNodeResourceName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateUpdateRequest(string subscriptionId, string resourceGroupName, string customerResourceName, string cacheNodeResourceName, ConnectedCachePatchContent content)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.ConnectedCache/ispCustomers/", false);
            uri.AppendPath(customerResourceName, true);
            uri.AppendPath("/ispCacheNodes/", false);
            uri.AppendPath(cacheNodeResourceName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content0 = new Utf8JsonRequestContent();
            content0.JsonWriter.WriteObjectValue(content, ModelSerializationExtensions.WireOptions);
            request.Content = content0;
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> This api updates an existing ispCacheNode resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="customerResourceName"> Name of the Customer resource. </param>
        /// <param name="cacheNodeResourceName"> Name of the ConnectedCache resource. </param>
        /// <param name="content"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="customerResourceName"/>, <paramref name="cacheNodeResourceName"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="customerResourceName"/> or <paramref name="cacheNodeResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<IspCacheNodeData>> UpdateAsync(string subscriptionId, string resourceGroupName, string customerResourceName, string cacheNodeResourceName, ConnectedCachePatchContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(customerResourceName, nameof(customerResourceName));
            Argument.AssertNotNullOrEmpty(cacheNodeResourceName, nameof(cacheNodeResourceName));
            Argument.AssertNotNull(content, nameof(content));

            using var message = CreateUpdateRequest(subscriptionId, resourceGroupName, customerResourceName, cacheNodeResourceName, content);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IspCacheNodeData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = IspCacheNodeData.DeserializeIspCacheNodeData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> This api updates an existing ispCacheNode resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="customerResourceName"> Name of the Customer resource. </param>
        /// <param name="cacheNodeResourceName"> Name of the ConnectedCache resource. </param>
        /// <param name="content"> The resource properties to be updated. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="customerResourceName"/>, <paramref name="cacheNodeResourceName"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="customerResourceName"/> or <paramref name="cacheNodeResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<IspCacheNodeData> Update(string subscriptionId, string resourceGroupName, string customerResourceName, string cacheNodeResourceName, ConnectedCachePatchContent content, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(customerResourceName, nameof(customerResourceName));
            Argument.AssertNotNullOrEmpty(cacheNodeResourceName, nameof(cacheNodeResourceName));
            Argument.AssertNotNull(content, nameof(content));

            using var message = CreateUpdateRequest(subscriptionId, resourceGroupName, customerResourceName, cacheNodeResourceName, content);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IspCacheNodeData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = IspCacheNodeData.DeserializeIspCacheNodeData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateDeleteRequestUri(string subscriptionId, string resourceGroupName, string customerResourceName, string cacheNodeResourceName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.ConnectedCache/ispCustomers/", false);
            uri.AppendPath(customerResourceName, true);
            uri.AppendPath("/ispCacheNodes/", false);
            uri.AppendPath(cacheNodeResourceName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateDeleteRequest(string subscriptionId, string resourceGroupName, string customerResourceName, string cacheNodeResourceName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.ConnectedCache/ispCustomers/", false);
            uri.AppendPath(customerResourceName, true);
            uri.AppendPath("/ispCacheNodes/", false);
            uri.AppendPath(cacheNodeResourceName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> This api deletes an existing ispCacheNode resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="customerResourceName"> Name of the Customer resource. </param>
        /// <param name="cacheNodeResourceName"> Name of the ConnectedCache resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="customerResourceName"/> or <paramref name="cacheNodeResourceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="customerResourceName"/> or <paramref name="cacheNodeResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response> DeleteAsync(string subscriptionId, string resourceGroupName, string customerResourceName, string cacheNodeResourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(customerResourceName, nameof(customerResourceName));
            Argument.AssertNotNullOrEmpty(cacheNodeResourceName, nameof(cacheNodeResourceName));

            using var message = CreateDeleteRequest(subscriptionId, resourceGroupName, customerResourceName, cacheNodeResourceName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 202:
                case 204:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> This api deletes an existing ispCacheNode resource. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="customerResourceName"> Name of the Customer resource. </param>
        /// <param name="cacheNodeResourceName"> Name of the ConnectedCache resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="customerResourceName"/> or <paramref name="cacheNodeResourceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="customerResourceName"/> or <paramref name="cacheNodeResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response Delete(string subscriptionId, string resourceGroupName, string customerResourceName, string cacheNodeResourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(customerResourceName, nameof(customerResourceName));
            Argument.AssertNotNullOrEmpty(cacheNodeResourceName, nameof(cacheNodeResourceName));

            using var message = CreateDeleteRequest(subscriptionId, resourceGroupName, customerResourceName, cacheNodeResourceName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 202:
                case 204:
                    return message.Response;
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateListByIspCustomerResourceRequestUri(string subscriptionId, string resourceGroupName, string customerResourceName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.ConnectedCache/ispCustomers/", false);
            uri.AppendPath(customerResourceName, true);
            uri.AppendPath("/ispCacheNodes", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateListByIspCustomerResourceRequest(string subscriptionId, string resourceGroupName, string customerResourceName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.ConnectedCache/ispCustomers/", false);
            uri.AppendPath(customerResourceName, true);
            uri.AppendPath("/ispCacheNodes", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> This api retrieves information about all ispCacheNode resources under the given subscription and resource group. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="customerResourceName"> Name of the Customer resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="customerResourceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="customerResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<IspCacheNodeResourceListResult>> ListByIspCustomerResourceAsync(string subscriptionId, string resourceGroupName, string customerResourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(customerResourceName, nameof(customerResourceName));

            using var message = CreateListByIspCustomerResourceRequest(subscriptionId, resourceGroupName, customerResourceName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IspCacheNodeResourceListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = IspCacheNodeResourceListResult.DeserializeIspCacheNodeResourceListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> This api retrieves information about all ispCacheNode resources under the given subscription and resource group. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="customerResourceName"> Name of the Customer resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="customerResourceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="customerResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<IspCacheNodeResourceListResult> ListByIspCustomerResource(string subscriptionId, string resourceGroupName, string customerResourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(customerResourceName, nameof(customerResourceName));

            using var message = CreateListByIspCustomerResourceRequest(subscriptionId, resourceGroupName, customerResourceName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IspCacheNodeResourceListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = IspCacheNodeResourceListResult.DeserializeIspCacheNodeResourceListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateGetBgpCidrsRequestUri(string subscriptionId, string resourceGroupName, string customerResourceName, string cacheNodeResourceName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.ConnectedCache/ispCustomers/", false);
            uri.AppendPath(customerResourceName, true);
            uri.AppendPath("/ispCacheNodes/", false);
            uri.AppendPath(cacheNodeResourceName, true);
            uri.AppendPath("/getBgpCidrs", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateGetBgpCidrsRequest(string subscriptionId, string resourceGroupName, string customerResourceName, string cacheNodeResourceName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.ConnectedCache/ispCustomers/", false);
            uri.AppendPath(customerResourceName, true);
            uri.AppendPath("/ispCacheNodes/", false);
            uri.AppendPath(cacheNodeResourceName, true);
            uri.AppendPath("/getBgpCidrs", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> This api gets ispCacheNode resource information. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="customerResourceName"> Name of the Customer resource. </param>
        /// <param name="cacheNodeResourceName"> Name of the ConnectedCache resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="customerResourceName"/> or <paramref name="cacheNodeResourceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="customerResourceName"/> or <paramref name="cacheNodeResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<MccCacheNodeBgpCidrDetails>> GetBgpCidrsAsync(string subscriptionId, string resourceGroupName, string customerResourceName, string cacheNodeResourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(customerResourceName, nameof(customerResourceName));
            Argument.AssertNotNullOrEmpty(cacheNodeResourceName, nameof(cacheNodeResourceName));

            using var message = CreateGetBgpCidrsRequest(subscriptionId, resourceGroupName, customerResourceName, cacheNodeResourceName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        MccCacheNodeBgpCidrDetails value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = MccCacheNodeBgpCidrDetails.DeserializeMccCacheNodeBgpCidrDetails(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> This api gets ispCacheNode resource information. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="customerResourceName"> Name of the Customer resource. </param>
        /// <param name="cacheNodeResourceName"> Name of the ConnectedCache resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="customerResourceName"/> or <paramref name="cacheNodeResourceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="customerResourceName"/> or <paramref name="cacheNodeResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<MccCacheNodeBgpCidrDetails> GetBgpCidrs(string subscriptionId, string resourceGroupName, string customerResourceName, string cacheNodeResourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(customerResourceName, nameof(customerResourceName));
            Argument.AssertNotNullOrEmpty(cacheNodeResourceName, nameof(cacheNodeResourceName));

            using var message = CreateGetBgpCidrsRequest(subscriptionId, resourceGroupName, customerResourceName, cacheNodeResourceName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        MccCacheNodeBgpCidrDetails value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = MccCacheNodeBgpCidrDetails.DeserializeMccCacheNodeBgpCidrDetails(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateGetCacheNodeInstallDetailsRequestUri(string subscriptionId, string resourceGroupName, string customerResourceName, string cacheNodeResourceName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.ConnectedCache/ispCustomers/", false);
            uri.AppendPath(customerResourceName, true);
            uri.AppendPath("/ispCacheNodes/", false);
            uri.AppendPath(cacheNodeResourceName, true);
            uri.AppendPath("/getCacheNodeInstallDetails", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateGetCacheNodeInstallDetailsRequest(string subscriptionId, string resourceGroupName, string customerResourceName, string cacheNodeResourceName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.ConnectedCache/ispCustomers/", false);
            uri.AppendPath(customerResourceName, true);
            uri.AppendPath("/ispCacheNodes/", false);
            uri.AppendPath(cacheNodeResourceName, true);
            uri.AppendPath("/getCacheNodeInstallDetails", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> This api gets secrets of the ispCacheNode resource install details. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="customerResourceName"> Name of the Customer resource. </param>
        /// <param name="cacheNodeResourceName"> Name of the ConnectedCache resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="customerResourceName"/> or <paramref name="cacheNodeResourceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="customerResourceName"/> or <paramref name="cacheNodeResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<MccCacheNodeInstallDetails>> GetCacheNodeInstallDetailsAsync(string subscriptionId, string resourceGroupName, string customerResourceName, string cacheNodeResourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(customerResourceName, nameof(customerResourceName));
            Argument.AssertNotNullOrEmpty(cacheNodeResourceName, nameof(cacheNodeResourceName));

            using var message = CreateGetCacheNodeInstallDetailsRequest(subscriptionId, resourceGroupName, customerResourceName, cacheNodeResourceName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        MccCacheNodeInstallDetails value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = MccCacheNodeInstallDetails.DeserializeMccCacheNodeInstallDetails(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> This api gets secrets of the ispCacheNode resource install details. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="customerResourceName"> Name of the Customer resource. </param>
        /// <param name="cacheNodeResourceName"> Name of the ConnectedCache resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="customerResourceName"/> or <paramref name="cacheNodeResourceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="customerResourceName"/> or <paramref name="cacheNodeResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<MccCacheNodeInstallDetails> GetCacheNodeInstallDetails(string subscriptionId, string resourceGroupName, string customerResourceName, string cacheNodeResourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(customerResourceName, nameof(customerResourceName));
            Argument.AssertNotNullOrEmpty(cacheNodeResourceName, nameof(cacheNodeResourceName));

            using var message = CreateGetCacheNodeInstallDetailsRequest(subscriptionId, resourceGroupName, customerResourceName, cacheNodeResourceName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        MccCacheNodeInstallDetails value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = MccCacheNodeInstallDetails.DeserializeMccCacheNodeInstallDetails(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateGetCacheNodeAutoUpdateHistoryRequestUri(string subscriptionId, string resourceGroupName, string customerResourceName, string cacheNodeResourceName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.ConnectedCache/ispCustomers/", false);
            uri.AppendPath(customerResourceName, true);
            uri.AppendPath("/ispCacheNodes/", false);
            uri.AppendPath(cacheNodeResourceName, true);
            uri.AppendPath("/getCacheNodeAutoUpdateHistory", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateGetCacheNodeAutoUpdateHistoryRequest(string subscriptionId, string resourceGroupName, string customerResourceName, string cacheNodeResourceName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.ConnectedCache/ispCustomers/", false);
            uri.AppendPath(customerResourceName, true);
            uri.AppendPath("/ispCacheNodes/", false);
            uri.AppendPath(cacheNodeResourceName, true);
            uri.AppendPath("/getCacheNodeAutoUpdateHistory", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> This api gets ispCacheNode resource auto update histrory information. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="customerResourceName"> Name of the Customer resource. </param>
        /// <param name="cacheNodeResourceName"> Name of the ConnectedCache resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="customerResourceName"/> or <paramref name="cacheNodeResourceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="customerResourceName"/> or <paramref name="cacheNodeResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<MccCacheNodeAutoUpdateHistoryData>> GetCacheNodeAutoUpdateHistoryAsync(string subscriptionId, string resourceGroupName, string customerResourceName, string cacheNodeResourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(customerResourceName, nameof(customerResourceName));
            Argument.AssertNotNullOrEmpty(cacheNodeResourceName, nameof(cacheNodeResourceName));

            using var message = CreateGetCacheNodeAutoUpdateHistoryRequest(subscriptionId, resourceGroupName, customerResourceName, cacheNodeResourceName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        MccCacheNodeAutoUpdateHistoryData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = MccCacheNodeAutoUpdateHistoryData.DeserializeMccCacheNodeAutoUpdateHistoryData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> This api gets ispCacheNode resource auto update histrory information. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="customerResourceName"> Name of the Customer resource. </param>
        /// <param name="cacheNodeResourceName"> Name of the ConnectedCache resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="customerResourceName"/> or <paramref name="cacheNodeResourceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="customerResourceName"/> or <paramref name="cacheNodeResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<MccCacheNodeAutoUpdateHistoryData> GetCacheNodeAutoUpdateHistory(string subscriptionId, string resourceGroupName, string customerResourceName, string cacheNodeResourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(customerResourceName, nameof(customerResourceName));
            Argument.AssertNotNullOrEmpty(cacheNodeResourceName, nameof(cacheNodeResourceName));

            using var message = CreateGetCacheNodeAutoUpdateHistoryRequest(subscriptionId, resourceGroupName, customerResourceName, cacheNodeResourceName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        MccCacheNodeAutoUpdateHistoryData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = MccCacheNodeAutoUpdateHistoryData.DeserializeMccCacheNodeAutoUpdateHistoryData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateGetCacheNodeMccIssueDetailsHistoryRequestUri(string subscriptionId, string resourceGroupName, string customerResourceName, string cacheNodeResourceName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.ConnectedCache/ispCustomers/", false);
            uri.AppendPath(customerResourceName, true);
            uri.AppendPath("/ispCacheNodes/", false);
            uri.AppendPath(cacheNodeResourceName, true);
            uri.AppendPath("/getCacheNodeMccIssueDetailsHistory", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            return uri;
        }

        internal HttpMessage CreateGetCacheNodeMccIssueDetailsHistoryRequest(string subscriptionId, string resourceGroupName, string customerResourceName, string cacheNodeResourceName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.ConnectedCache/ispCustomers/", false);
            uri.AppendPath(customerResourceName, true);
            uri.AppendPath("/ispCacheNodes/", false);
            uri.AppendPath(cacheNodeResourceName, true);
            uri.AppendPath("/getCacheNodeMccIssueDetailsHistory", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> This api gets ispCacheNode resource issues details histrory information. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="customerResourceName"> Name of the Customer resource. </param>
        /// <param name="cacheNodeResourceName"> Name of the ConnectedCache resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="customerResourceName"/> or <paramref name="cacheNodeResourceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="customerResourceName"/> or <paramref name="cacheNodeResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<MccCacheNodeIssueHistoryData>> GetCacheNodeMccIssueDetailsHistoryAsync(string subscriptionId, string resourceGroupName, string customerResourceName, string cacheNodeResourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(customerResourceName, nameof(customerResourceName));
            Argument.AssertNotNullOrEmpty(cacheNodeResourceName, nameof(cacheNodeResourceName));

            using var message = CreateGetCacheNodeMccIssueDetailsHistoryRequest(subscriptionId, resourceGroupName, customerResourceName, cacheNodeResourceName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        MccCacheNodeIssueHistoryData value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = MccCacheNodeIssueHistoryData.DeserializeMccCacheNodeIssueHistoryData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> This api gets ispCacheNode resource issues details histrory information. </summary>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="customerResourceName"> Name of the Customer resource. </param>
        /// <param name="cacheNodeResourceName"> Name of the ConnectedCache resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="customerResourceName"/> or <paramref name="cacheNodeResourceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/>, <paramref name="customerResourceName"/> or <paramref name="cacheNodeResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<MccCacheNodeIssueHistoryData> GetCacheNodeMccIssueDetailsHistory(string subscriptionId, string resourceGroupName, string customerResourceName, string cacheNodeResourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(customerResourceName, nameof(customerResourceName));
            Argument.AssertNotNullOrEmpty(cacheNodeResourceName, nameof(cacheNodeResourceName));

            using var message = CreateGetCacheNodeMccIssueDetailsHistoryRequest(subscriptionId, resourceGroupName, customerResourceName, cacheNodeResourceName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        MccCacheNodeIssueHistoryData value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = MccCacheNodeIssueHistoryData.DeserializeMccCacheNodeIssueHistoryData(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        internal RequestUriBuilder CreateListByIspCustomerResourceNextPageRequestUri(string nextLink, string subscriptionId, string resourceGroupName, string customerResourceName)
        {
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            return uri;
        }

        internal HttpMessage CreateListByIspCustomerResourceNextPageRequest(string nextLink, string subscriptionId, string resourceGroupName, string customerResourceName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            _userAgent.Apply(message);
            return message;
        }

        /// <summary> This api retrieves information about all ispCacheNode resources under the given subscription and resource group. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="customerResourceName"> Name of the Customer resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="customerResourceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="customerResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        public async Task<Response<IspCacheNodeResourceListResult>> ListByIspCustomerResourceNextPageAsync(string nextLink, string subscriptionId, string resourceGroupName, string customerResourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(nextLink, nameof(nextLink));
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(customerResourceName, nameof(customerResourceName));

            using var message = CreateListByIspCustomerResourceNextPageRequest(nextLink, subscriptionId, resourceGroupName, customerResourceName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IspCacheNodeResourceListResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions, cancellationToken).ConfigureAwait(false);
                        value = IspCacheNodeResourceListResult.DeserializeIspCacheNodeResourceListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }

        /// <summary> This api retrieves information about all ispCacheNode resources under the given subscription and resource group. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="subscriptionId"> The ID of the target subscription. The value must be an UUID. </param>
        /// <param name="resourceGroupName"> The name of the resource group. The name is case insensitive. </param>
        /// <param name="customerResourceName"> Name of the Customer resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/>, <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="customerResourceName"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/>, <paramref name="resourceGroupName"/> or <paramref name="customerResourceName"/> is an empty string, and was expected to be non-empty. </exception>
        public Response<IspCacheNodeResourceListResult> ListByIspCustomerResourceNextPage(string nextLink, string subscriptionId, string resourceGroupName, string customerResourceName, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(nextLink, nameof(nextLink));
            Argument.AssertNotNullOrEmpty(subscriptionId, nameof(subscriptionId));
            Argument.AssertNotNullOrEmpty(resourceGroupName, nameof(resourceGroupName));
            Argument.AssertNotNullOrEmpty(customerResourceName, nameof(customerResourceName));

            using var message = CreateListByIspCustomerResourceNextPageRequest(nextLink, subscriptionId, resourceGroupName, customerResourceName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        IspCacheNodeResourceListResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream, ModelSerializationExtensions.JsonDocumentOptions);
                        value = IspCacheNodeResourceListResult.DeserializeIspCacheNodeResourceListResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw new RequestFailedException(message.Response);
            }
        }
    }
}
