// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.ConnectedCache.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.ConnectedCache.Samples
{
    public partial class Sample_EnterpriseMccCacheNodeResource
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_GetsEnterpriseMccCacheNodeResourceInformationOfAnEnterpriseMccCustomerParentResourceGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2024-11-30-preview/EnterpriseMccCacheNodesOperations_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "EnterpriseMccCacheNodeResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EnterpriseMccCacheNodeResource created on azure
            // for more information of creating EnterpriseMccCacheNodeResource, please refer to the document of EnterpriseMccCacheNodeResource
            string subscriptionId = "12345678-1234-1234-1234-123456789098";
            string resourceGroupName = "rgConnectedCache";
            string customerResourceName = "cygqjgtcetihsajgyqwwrbclssqsvhgltrboemcqqtpoxdbhykqxblaihmrumyhbsx";
            string cacheNodeResourceName = "fqxfadsultwjfzdwlqkvneakfsbyhratytmssmiukpbnus";
            ResourceIdentifier enterpriseMccCacheNodeResourceId = EnterpriseMccCacheNodeResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, customerResourceName, cacheNodeResourceName);
            EnterpriseMccCacheNodeResource enterpriseMccCacheNode = client.GetEnterpriseMccCacheNodeResource(enterpriseMccCacheNodeResourceId);

            // invoke the operation
            EnterpriseMccCacheNodeResource result = await enterpriseMccCacheNode.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EnterpriseMccCacheNodeData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Delete_EnterpriseMccCacheNodesOperationsDeleteOperationGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2024-11-30-preview/EnterpriseMccCacheNodesOperations_Delete_MaximumSet_Gen.json
            // this example is just showing the usage of "EnterpriseMccCacheNodeResource_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EnterpriseMccCacheNodeResource created on azure
            // for more information of creating EnterpriseMccCacheNodeResource, please refer to the document of EnterpriseMccCacheNodeResource
            string subscriptionId = "12345678-1234-1234-1234-123456789098";
            string resourceGroupName = "rgConnectedCache";
            string customerResourceName = "hsincngmssuzeyispnufqwinpopadvhsbsemisguxgovwdjwviqexocelijvuyr";
            string cacheNodeResourceName = "vwtrhdoxvkrunpliwcao";
            ResourceIdentifier enterpriseMccCacheNodeResourceId = EnterpriseMccCacheNodeResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, customerResourceName, cacheNodeResourceName);
            EnterpriseMccCacheNodeResource enterpriseMccCacheNode = client.GetEnterpriseMccCacheNodeResource(enterpriseMccCacheNodeResourceId);

            // invoke the operation
            await enterpriseMccCacheNode.DeleteAsync(WaitUntil.Completed);

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Update_EnterpriseMccCacheNodesOperationsUpdateGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2024-11-30-preview/EnterpriseMccCacheNodesOperations_Update_MaximumSet_Gen.json
            // this example is just showing the usage of "EnterpriseMccCacheNodeResource_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EnterpriseMccCacheNodeResource created on azure
            // for more information of creating EnterpriseMccCacheNodeResource, please refer to the document of EnterpriseMccCacheNodeResource
            string subscriptionId = "12345678-1234-1234-1234-123456789098";
            string resourceGroupName = "rgConnectedCache";
            string customerResourceName = "qanjqtvrxzjkljdysdjvdiqcxkttskpdzykzuefhbhz";
            string cacheNodeResourceName = "kllmlvazrcxmfjfozulzqnsgvspgwmhogcafvauchunlgfr";
            ResourceIdentifier enterpriseMccCacheNodeResourceId = EnterpriseMccCacheNodeResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, customerResourceName, cacheNodeResourceName);
            EnterpriseMccCacheNodeResource enterpriseMccCacheNode = client.GetEnterpriseMccCacheNodeResource(enterpriseMccCacheNodeResourceId);

            // invoke the operation
            ConnectedCachePatchContent content = new ConnectedCachePatchContent
            {
                Tags =
{
["key1653"] = "nzjczrhclhkndesgy"
},
            };
            EnterpriseMccCacheNodeResource result = await enterpriseMccCacheNode.UpdateAsync(content);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EnterpriseMccCacheNodeData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetCacheNodeInstallDetails_GetsRequiredPropertiesForEnterpriseMccCacheNodeResourceInstallKeyDetailsGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2024-11-30-preview/EnterpriseMccCacheNodesOperations_GetCacheNodeInstallDetails_MaximumSet_Gen.json
            // this example is just showing the usage of "EnterpriseMccCacheNodesOperations_GetCacheNodeInstallDetails" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EnterpriseMccCacheNodeResource created on azure
            // for more information of creating EnterpriseMccCacheNodeResource, please refer to the document of EnterpriseMccCacheNodeResource
            string subscriptionId = "12345678-1234-1234-1234-123456789098";
            string resourceGroupName = "rgConnectedCache";
            string customerResourceName = "fzwxcjmdpxxzayecabqqlh";
            string cacheNodeResourceName = "ccexmqqttritxvtctivraso";
            ResourceIdentifier enterpriseMccCacheNodeResourceId = EnterpriseMccCacheNodeResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, customerResourceName, cacheNodeResourceName);
            EnterpriseMccCacheNodeResource enterpriseMccCacheNode = client.GetEnterpriseMccCacheNodeResource(enterpriseMccCacheNodeResourceId);

            // invoke the operation
            MccCacheNodeInstallDetails result = await enterpriseMccCacheNode.GetCacheNodeInstallDetailsAsync();

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetCacheNodeAutoUpdateHistory_EnterpriseMccCacheNodesOperationsGetCacheNodeAutoUpdateHistoryMaximumSet()
        {
            // Generated from example definition: 2024-11-30-preview/EnterpriseMccCacheNodesOperations_GetCacheNodeAutoUpdateHistory_MaximumSet_Gen.json
            // this example is just showing the usage of "EnterpriseMccCacheNodesOperations_GetCacheNodeAutoUpdateHistory" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EnterpriseMccCacheNodeResource created on azure
            // for more information of creating EnterpriseMccCacheNodeResource, please refer to the document of EnterpriseMccCacheNodeResource
            string subscriptionId = "12345678-1234-1234-1234-123456789098";
            string resourceGroupName = "rgConnectedCache";
            string customerResourceName = "MccRPTest1";
            string cacheNodeResourceName = "MCCCachenode1";
            ResourceIdentifier enterpriseMccCacheNodeResourceId = EnterpriseMccCacheNodeResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, customerResourceName, cacheNodeResourceName);
            EnterpriseMccCacheNodeResource enterpriseMccCacheNode = client.GetEnterpriseMccCacheNodeResource(enterpriseMccCacheNodeResourceId);

            // invoke the operation
            MccCacheNodeAutoUpdateHistoryData result = await enterpriseMccCacheNode.GetCacheNodeAutoUpdateHistoryAsync();

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetCacheNodeMccIssueDetailsHistory_EnterpriseMccCacheNodesOperationsGetCacheNodeMccIssueDetailsHistoryMaximumSet()
        {
            // Generated from example definition: 2024-11-30-preview/EnterpriseMccCacheNodesOperations_GetCacheNodeMccIssueDetailsHistory_MaximumSet_Gen.json
            // this example is just showing the usage of "EnterpriseMccCacheNodesOperations_GetCacheNodeMccIssueDetailsHistory" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EnterpriseMccCacheNodeResource created on azure
            // for more information of creating EnterpriseMccCacheNodeResource, please refer to the document of EnterpriseMccCacheNodeResource
            string subscriptionId = "12345678-1234-1234-1234-123456789098";
            string resourceGroupName = "rgConnectedCache";
            string customerResourceName = "MccRPTest1";
            string cacheNodeResourceName = "MCCCachenode1";
            ResourceIdentifier enterpriseMccCacheNodeResourceId = EnterpriseMccCacheNodeResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, customerResourceName, cacheNodeResourceName);
            EnterpriseMccCacheNodeResource enterpriseMccCacheNode = client.GetEnterpriseMccCacheNodeResource(enterpriseMccCacheNodeResourceId);

            // invoke the operation
            MccCacheNodeIssueHistoryData result = await enterpriseMccCacheNode.GetCacheNodeMccIssueDetailsHistoryAsync();

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetCacheNodeTlsCertificateHistory_EnterpriseMccCacheNodesOperationsGetCacheNodeTlsCertificateHistoryMaximumSet()
        {
            // Generated from example definition: 2024-11-30-preview/EnterpriseMccCacheNodesOperations_GetCacheNodeTlsCertificateHistory_MaximumSet_Gen.json
            // this example is just showing the usage of "EnterpriseMccCacheNodesOperations_GetCacheNodeTlsCertificateHistory" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EnterpriseMccCacheNodeResource created on azure
            // for more information of creating EnterpriseMccCacheNodeResource, please refer to the document of EnterpriseMccCacheNodeResource
            string subscriptionId = "12345678-1234-1234-1234-123456789098";
            string resourceGroupName = "rgConnectedCache";
            string customerResourceName = "MccRPTest1";
            string cacheNodeResourceName = "MCCCachenode1";
            ResourceIdentifier enterpriseMccCacheNodeResourceId = EnterpriseMccCacheNodeResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, customerResourceName, cacheNodeResourceName);
            EnterpriseMccCacheNodeResource enterpriseMccCacheNode = client.GetEnterpriseMccCacheNodeResource(enterpriseMccCacheNodeResourceId);

            // invoke the operation
            MccCacheNodeTlsCertificateHistoryData result = await enterpriseMccCacheNode.GetCacheNodeTlsCertificateHistoryAsync();

            Console.WriteLine($"Succeeded: {result}");
        }
    }
}
