// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager.ConnectedCache.Models;
using NUnit.Framework;

namespace Azure.ResourceManager.ConnectedCache.Samples
{
    public partial class Sample_EnterpriseMccCacheNodeCollection
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task CreateOrUpdate_CreatesAnEnterpriseMccCacheNodeResourceGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2024-11-30-preview/EnterpriseMccCacheNodesOperations_CreateOrUpdate_MaximumSet_Gen.json
            // this example is just showing the usage of "EnterpriseMccCacheNodeResource_CreateOrUpdate" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EnterpriseMccCustomerResource created on azure
            // for more information of creating EnterpriseMccCustomerResource, please refer to the document of EnterpriseMccCustomerResource
            string subscriptionId = "12345678-1234-1234-1234-123456789098";
            string resourceGroupName = "rgConnectedCache";
            string customerResourceName = "nhdkvstdrrtsxxuz";
            ResourceIdentifier enterpriseMccCustomerResourceId = EnterpriseMccCustomerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, customerResourceName);
            EnterpriseMccCustomerResource enterpriseMccCustomer = client.GetEnterpriseMccCustomerResource(enterpriseMccCustomerResourceId);

            // get the collection of this EnterpriseMccCacheNodeResource
            EnterpriseMccCacheNodeCollection collection = enterpriseMccCustomer.GetEnterpriseMccCacheNodes();

            // invoke the operation
            string cacheNodeResourceName = "fgduqdovidpemlnmhelomffuafdrbgaasqznvrdkbvspfzsnrhncdtqquhijhdpwyzwleukqldpceyxqhqlftqrr";
            EnterpriseMccCacheNodeData data = new EnterpriseMccCacheNodeData(new AzureLocation("westus"))
            {
                Properties = new MccCacheNodeProperty
                {
                    CacheNode = new MccCacheNodeEntity
                    {
                        FullyQualifiedResourceId = new ResourceIdentifier("yeinlleavzbehelhsucb"),
                        CustomerName = "zsklcocjfjhkcpmzyefzkwamdzc",
                        IPAddress = "gbfkdhloyphnpnhemwrcrxlk",
                        CustomerIndex = "vafvezmelfgmjsrccjukrhppljvipg",
                        CacheNodeId = "fmrjefyddfn",
                        CacheNodeName = "qppvqxliajjfoalzjbgmxggr",
                        CustomerAsn = 25,
                        IsEnabled = true,
                        MaxAllowableEgressInMbps = 27,
                        IsEnterpriseManaged = true,
                        CidrCsv = { "nlqlvrthafvvljuupcbcw" },
                        ShouldMigrate = true,
                        CidrSelectionType = 11,
                    },
                    AdditionalCacheNodeProperties = new MccCacheNodeAdditionalProperties
                    {
                        CacheNodePropertiesDetailsIssuesList = { "ennbzfpuszgalzpawmwicaofqcwcj" },
                        DriveConfiguration = {new CacheNodeDriveConfiguration
{
PhysicalPath = "pcbkezoofhamkycot",
SizeInGb = 14,
CacheNumber = 11,
NginxMapping = "cirlpkpuxg",
}},
                        BgpAsnToIPAddressMapping = "fjbggfvumrn",
                        ProxyUri = new Uri("hplstyg"),
                        OptionalProperty1 = "ph",
                        OptionalProperty2 = "soqqgpgcbhb",
                        OptionalProperty3 = "fpnycrbagptsujiotnjfuhlm",
                        OptionalProperty4 = "gesqugrxvhxlxxyvatgrautxwlmxsf",
                        OptionalProperty5 = "zknjgzpaqtvdqjydd",
                    },
                    StatusCode = "1",
                    StatusText = "Success",
                    StatusDetails = "lgljxmyyoakw",
                    Error = new ResponseError(null, null),
                },
                Tags =
{
["key259"] = "qbkixjuyjkoj"
},
            };
            ArmOperation<EnterpriseMccCacheNodeResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, cacheNodeResourceName, data);
            EnterpriseMccCacheNodeResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EnterpriseMccCacheNodeData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Get_GetsEnterpriseMccCacheNodeResourceInformationOfAnEnterpriseMccCustomerParentResourceGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2024-11-30-preview/EnterpriseMccCacheNodesOperations_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "EnterpriseMccCacheNodeResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EnterpriseMccCustomerResource created on azure
            // for more information of creating EnterpriseMccCustomerResource, please refer to the document of EnterpriseMccCustomerResource
            string subscriptionId = "12345678-1234-1234-1234-123456789098";
            string resourceGroupName = "rgConnectedCache";
            string customerResourceName = "cygqjgtcetihsajgyqwwrbclssqsvhgltrboemcqqtpoxdbhykqxblaihmrumyhbsx";
            ResourceIdentifier enterpriseMccCustomerResourceId = EnterpriseMccCustomerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, customerResourceName);
            EnterpriseMccCustomerResource enterpriseMccCustomer = client.GetEnterpriseMccCustomerResource(enterpriseMccCustomerResourceId);

            // get the collection of this EnterpriseMccCacheNodeResource
            EnterpriseMccCacheNodeCollection collection = enterpriseMccCustomer.GetEnterpriseMccCacheNodes();

            // invoke the operation
            string cacheNodeResourceName = "fqxfadsultwjfzdwlqkvneakfsbyhratytmssmiukpbnus";
            EnterpriseMccCacheNodeResource result = await collection.GetAsync(cacheNodeResourceName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            EnterpriseMccCacheNodeData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetAll_EnterpriseMccCacheNodesOperationsListByEnterpriseMccCustomerResource()
        {
            // Generated from example definition: 2024-11-30-preview/EnterpriseMccCacheNodesOperations_ListByEnterpriseMccCustomerResource_MaximumSet_Gen.json
            // this example is just showing the usage of "EnterpriseMccCacheNodeResource_ListByEnterpriseMccCustomerResource" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EnterpriseMccCustomerResource created on azure
            // for more information of creating EnterpriseMccCustomerResource, please refer to the document of EnterpriseMccCustomerResource
            string subscriptionId = "12345678-1234-1234-1234-123456789098";
            string resourceGroupName = "rgConnectedCache";
            string customerResourceName = "syjjjzk";
            ResourceIdentifier enterpriseMccCustomerResourceId = EnterpriseMccCustomerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, customerResourceName);
            EnterpriseMccCustomerResource enterpriseMccCustomer = client.GetEnterpriseMccCustomerResource(enterpriseMccCustomerResourceId);

            // get the collection of this EnterpriseMccCacheNodeResource
            EnterpriseMccCacheNodeCollection collection = enterpriseMccCustomer.GetEnterpriseMccCacheNodes();

            // invoke the operation and iterate over the result
            await foreach (EnterpriseMccCacheNodeResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                EnterpriseMccCacheNodeData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine("Succeeded");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Exists_GetsEnterpriseMccCacheNodeResourceInformationOfAnEnterpriseMccCustomerParentResourceGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2024-11-30-preview/EnterpriseMccCacheNodesOperations_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "EnterpriseMccCacheNodeResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EnterpriseMccCustomerResource created on azure
            // for more information of creating EnterpriseMccCustomerResource, please refer to the document of EnterpriseMccCustomerResource
            string subscriptionId = "12345678-1234-1234-1234-123456789098";
            string resourceGroupName = "rgConnectedCache";
            string customerResourceName = "cygqjgtcetihsajgyqwwrbclssqsvhgltrboemcqqtpoxdbhykqxblaihmrumyhbsx";
            ResourceIdentifier enterpriseMccCustomerResourceId = EnterpriseMccCustomerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, customerResourceName);
            EnterpriseMccCustomerResource enterpriseMccCustomer = client.GetEnterpriseMccCustomerResource(enterpriseMccCustomerResourceId);

            // get the collection of this EnterpriseMccCacheNodeResource
            EnterpriseMccCacheNodeCollection collection = enterpriseMccCustomer.GetEnterpriseMccCacheNodes();

            // invoke the operation
            string cacheNodeResourceName = "fqxfadsultwjfzdwlqkvneakfsbyhratytmssmiukpbnus";
            bool result = await collection.ExistsAsync(cacheNodeResourceName);

            Console.WriteLine($"Succeeded: {result}");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task GetIfExists_GetsEnterpriseMccCacheNodeResourceInformationOfAnEnterpriseMccCustomerParentResourceGeneratedByMaximumSetRule()
        {
            // Generated from example definition: 2024-11-30-preview/EnterpriseMccCacheNodesOperations_Get_MaximumSet_Gen.json
            // this example is just showing the usage of "EnterpriseMccCacheNodeResource_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this EnterpriseMccCustomerResource created on azure
            // for more information of creating EnterpriseMccCustomerResource, please refer to the document of EnterpriseMccCustomerResource
            string subscriptionId = "12345678-1234-1234-1234-123456789098";
            string resourceGroupName = "rgConnectedCache";
            string customerResourceName = "cygqjgtcetihsajgyqwwrbclssqsvhgltrboemcqqtpoxdbhykqxblaihmrumyhbsx";
            ResourceIdentifier enterpriseMccCustomerResourceId = EnterpriseMccCustomerResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, customerResourceName);
            EnterpriseMccCustomerResource enterpriseMccCustomer = client.GetEnterpriseMccCustomerResource(enterpriseMccCustomerResourceId);

            // get the collection of this EnterpriseMccCacheNodeResource
            EnterpriseMccCacheNodeCollection collection = enterpriseMccCustomer.GetEnterpriseMccCacheNodes();

            // invoke the operation
            string cacheNodeResourceName = "fqxfadsultwjfzdwlqkvneakfsbyhratytmssmiukpbnus";
            NullableResponse<EnterpriseMccCacheNodeResource> response = await collection.GetIfExistsAsync(cacheNodeResourceName);
            EnterpriseMccCacheNodeResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine("Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                EnterpriseMccCacheNodeData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }
    }
}
