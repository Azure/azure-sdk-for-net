// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Verticals.AgriFood.Farming
{
    // Data plane generated sub-client. The NutrientAnalyses sub-client.
    /// <summary> The NutrientAnalyses sub-client. </summary>
    public partial class NutrientAnalyses
    {
        private static readonly string[] AuthorizationScopes = new string[] { "https://farmbeats.azure.net/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of NutrientAnalyses for mocking. </summary>
        protected NutrientAnalyses()
        {
        }

        /// <summary> Initializes a new instance of NutrientAnalyses. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="tokenCredential"> The token credential to copy. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="apiVersion"> Api Version. </param>
        internal NutrientAnalyses(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, TokenCredential tokenCredential, Uri endpoint, string apiVersion)
        {
            ClientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
            _tokenCredential = tokenCredential;
            _endpoint = endpoint;
            _apiVersion = apiVersion;
        }

        /// <summary> Gets a specified nutrient analysis resource under a particular farmer. </summary>
        /// <param name="farmerId"> Id of the associated farmer. </param>
        /// <param name="nutrientAnalysisId"> Id of the nutrient analysis. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="farmerId"/> or <paramref name="nutrientAnalysisId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="farmerId"/> or <paramref name="nutrientAnalysisId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetNutrientAnalysisAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new FarmBeatsClient(credential).GetNutrientAnalysesClient(<2021-07-31-preview>);
        /// 
        /// Response response = await client.GetNutrientAnalysisAsync("<farmerId>", "<nutrientAnalysisId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("farmerId").ToString());
        /// Console.WriteLine(result.GetProperty("parentId").ToString());
        /// Console.WriteLine(result.GetProperty("parentType").ToString());
        /// Console.WriteLine(result.GetProperty("unit").ToString());
        /// Console.WriteLine(result.GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("referenceValueLow").ToString());
        /// Console.WriteLine(result.GetProperty("referenceValueHigh").ToString());
        /// Console.WriteLine(result.GetProperty("classification").ToString());
        /// Console.WriteLine(result.GetProperty("recommendation").ToString());
        /// Console.WriteLine(result.GetProperty("products")[0].GetProperty("rate").ToString());
        /// Console.WriteLine(result.GetProperty("products")[0].GetProperty("instruction").ToString());
        /// Console.WriteLine(result.GetProperty("products")[0].GetProperty("product").ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("eTag").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>NutrientAnalysis</c>:
        /// <code>{
        ///   farmerId: string, # Optional. Farmer id for this nutrient analysis.
        ///   parentId: string, # Optional. Parent id for this nutrient analysis.
        ///   parentType: &quot;PlantTissueAnalysis&quot;, # Optional. Parent type for this nutrient analysis.
        /// i.e. PlantTissueAnalysis.
        ///   unit: string, # Optional. Unit for this nutrient analysis.
        ///   value: number, # Optional. Value for this nutrient analysis.
        ///   referenceValueLow: number, # Optional. Reference value low for this nutrient analysis.
        ///   referenceValueHigh: number, # Optional. Reference value high for this nutrient analysis.
        ///   classification: string, # Optional. Classification for this nutrient analysis.
        ///   recommendation: string, # Optional. Recommendation for this nutrient analysis.
        ///   products: [
        ///     {
        ///       rate: string, # Optional. Rate of the product.
        ///       instruction: string, # Optional. Instruction of the resource.
        ///       product: string, # Optional. Product of the resource.
        ///     }
        ///   ], # Optional. Products for this nutrient analysis.
        ///   id: string, # Optional. Unique resource ID.
        ///   eTag: string, # Optional. The ETag value to implement optimistic concurrency.
        ///   status: string, # Optional. Status of the resource.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   source: string, # Optional. Source of the resource.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string,
        /// numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetNutrientAnalysisAsync(string farmerId, string nutrientAnalysisId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(farmerId, nameof(farmerId));
            Argument.AssertNotNullOrEmpty(nutrientAnalysisId, nameof(nutrientAnalysisId));

            using var scope = ClientDiagnostics.CreateScope("NutrientAnalyses.GetNutrientAnalysis");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetNutrientAnalysisRequest(farmerId, nutrientAnalysisId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a specified nutrient analysis resource under a particular farmer. </summary>
        /// <param name="farmerId"> Id of the associated farmer. </param>
        /// <param name="nutrientAnalysisId"> Id of the nutrient analysis. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="farmerId"/> or <paramref name="nutrientAnalysisId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="farmerId"/> or <paramref name="nutrientAnalysisId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetNutrientAnalysis with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new FarmBeatsClient(credential).GetNutrientAnalysesClient(<2021-07-31-preview>);
        /// 
        /// Response response = client.GetNutrientAnalysis("<farmerId>", "<nutrientAnalysisId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("farmerId").ToString());
        /// Console.WriteLine(result.GetProperty("parentId").ToString());
        /// Console.WriteLine(result.GetProperty("parentType").ToString());
        /// Console.WriteLine(result.GetProperty("unit").ToString());
        /// Console.WriteLine(result.GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("referenceValueLow").ToString());
        /// Console.WriteLine(result.GetProperty("referenceValueHigh").ToString());
        /// Console.WriteLine(result.GetProperty("classification").ToString());
        /// Console.WriteLine(result.GetProperty("recommendation").ToString());
        /// Console.WriteLine(result.GetProperty("products")[0].GetProperty("rate").ToString());
        /// Console.WriteLine(result.GetProperty("products")[0].GetProperty("instruction").ToString());
        /// Console.WriteLine(result.GetProperty("products")[0].GetProperty("product").ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("eTag").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>NutrientAnalysis</c>:
        /// <code>{
        ///   farmerId: string, # Optional. Farmer id for this nutrient analysis.
        ///   parentId: string, # Optional. Parent id for this nutrient analysis.
        ///   parentType: &quot;PlantTissueAnalysis&quot;, # Optional. Parent type for this nutrient analysis.
        /// i.e. PlantTissueAnalysis.
        ///   unit: string, # Optional. Unit for this nutrient analysis.
        ///   value: number, # Optional. Value for this nutrient analysis.
        ///   referenceValueLow: number, # Optional. Reference value low for this nutrient analysis.
        ///   referenceValueHigh: number, # Optional. Reference value high for this nutrient analysis.
        ///   classification: string, # Optional. Classification for this nutrient analysis.
        ///   recommendation: string, # Optional. Recommendation for this nutrient analysis.
        ///   products: [
        ///     {
        ///       rate: string, # Optional. Rate of the product.
        ///       instruction: string, # Optional. Instruction of the resource.
        ///       product: string, # Optional. Product of the resource.
        ///     }
        ///   ], # Optional. Products for this nutrient analysis.
        ///   id: string, # Optional. Unique resource ID.
        ///   eTag: string, # Optional. The ETag value to implement optimistic concurrency.
        ///   status: string, # Optional. Status of the resource.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   source: string, # Optional. Source of the resource.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string,
        /// numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetNutrientAnalysis(string farmerId, string nutrientAnalysisId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(farmerId, nameof(farmerId));
            Argument.AssertNotNullOrEmpty(nutrientAnalysisId, nameof(nutrientAnalysisId));

            using var scope = ClientDiagnostics.CreateScope("NutrientAnalyses.GetNutrientAnalysis");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetNutrientAnalysisRequest(farmerId, nutrientAnalysisId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates or updates a nutrient analysis resource. </summary>
        /// <param name="farmerId"> Id of the farmer resource. </param>
        /// <param name="nutrientAnalysisId"> Id of the nutrient analysis resource. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="farmerId"/>, <paramref name="nutrientAnalysisId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="farmerId"/> or <paramref name="nutrientAnalysisId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateOrUpdateAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new FarmBeatsClient(credential).GetNutrientAnalysesClient(<2021-07-31-preview>);
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.CreateOrUpdateAsync("<farmerId>", "<nutrientAnalysisId>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call CreateOrUpdateAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new FarmBeatsClient(credential).GetNutrientAnalysesClient(<2021-07-31-preview>);
        /// 
        /// var data = new {
        ///     parentId = "<parentId>",
        ///     parentType = "PlantTissueAnalysis",
        ///     unit = "<unit>",
        ///     value = 123.45d,
        ///     referenceValueLow = 123.45d,
        ///     referenceValueHigh = 123.45d,
        ///     classification = "<classification>",
        ///     recommendation = "<recommendation>",
        ///     products = new[] {
        ///         new {
        ///             rate = "<rate>",
        ///             instruction = "<instruction>",
        ///             product = "<product>",
        ///         }
        ///     },
        ///     status = "<status>",
        ///     source = "<source>",
        ///     name = "<name>",
        ///     description = "<description>",
        ///     properties = new {
        ///         key = new {},
        ///     },
        /// };
        /// 
        /// Response response = await client.CreateOrUpdateAsync("<farmerId>", "<nutrientAnalysisId>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("farmerId").ToString());
        /// Console.WriteLine(result.GetProperty("parentId").ToString());
        /// Console.WriteLine(result.GetProperty("parentType").ToString());
        /// Console.WriteLine(result.GetProperty("unit").ToString());
        /// Console.WriteLine(result.GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("referenceValueLow").ToString());
        /// Console.WriteLine(result.GetProperty("referenceValueHigh").ToString());
        /// Console.WriteLine(result.GetProperty("classification").ToString());
        /// Console.WriteLine(result.GetProperty("recommendation").ToString());
        /// Console.WriteLine(result.GetProperty("products")[0].GetProperty("rate").ToString());
        /// Console.WriteLine(result.GetProperty("products")[0].GetProperty("instruction").ToString());
        /// Console.WriteLine(result.GetProperty("products")[0].GetProperty("product").ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("eTag").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>NutrientAnalysis</c>:
        /// <code>{
        ///   farmerId: string, # Optional. Farmer id for this nutrient analysis.
        ///   parentId: string, # Optional. Parent id for this nutrient analysis.
        ///   parentType: &quot;PlantTissueAnalysis&quot;, # Optional. Parent type for this nutrient analysis.
        /// i.e. PlantTissueAnalysis.
        ///   unit: string, # Optional. Unit for this nutrient analysis.
        ///   value: number, # Optional. Value for this nutrient analysis.
        ///   referenceValueLow: number, # Optional. Reference value low for this nutrient analysis.
        ///   referenceValueHigh: number, # Optional. Reference value high for this nutrient analysis.
        ///   classification: string, # Optional. Classification for this nutrient analysis.
        ///   recommendation: string, # Optional. Recommendation for this nutrient analysis.
        ///   products: [
        ///     {
        ///       rate: string, # Optional. Rate of the product.
        ///       instruction: string, # Optional. Instruction of the resource.
        ///       product: string, # Optional. Product of the resource.
        ///     }
        ///   ], # Optional. Products for this nutrient analysis.
        ///   id: string, # Optional. Unique resource ID.
        ///   eTag: string, # Optional. The ETag value to implement optimistic concurrency.
        ///   status: string, # Optional. Status of the resource.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   source: string, # Optional. Source of the resource.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string,
        /// numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>NutrientAnalysis</c>:
        /// <code>{
        ///   farmerId: string, # Optional. Farmer id for this nutrient analysis.
        ///   parentId: string, # Optional. Parent id for this nutrient analysis.
        ///   parentType: &quot;PlantTissueAnalysis&quot;, # Optional. Parent type for this nutrient analysis.
        /// i.e. PlantTissueAnalysis.
        ///   unit: string, # Optional. Unit for this nutrient analysis.
        ///   value: number, # Optional. Value for this nutrient analysis.
        ///   referenceValueLow: number, # Optional. Reference value low for this nutrient analysis.
        ///   referenceValueHigh: number, # Optional. Reference value high for this nutrient analysis.
        ///   classification: string, # Optional. Classification for this nutrient analysis.
        ///   recommendation: string, # Optional. Recommendation for this nutrient analysis.
        ///   products: [
        ///     {
        ///       rate: string, # Optional. Rate of the product.
        ///       instruction: string, # Optional. Instruction of the resource.
        ///       product: string, # Optional. Product of the resource.
        ///     }
        ///   ], # Optional. Products for this nutrient analysis.
        ///   id: string, # Optional. Unique resource ID.
        ///   eTag: string, # Optional. The ETag value to implement optimistic concurrency.
        ///   status: string, # Optional. Status of the resource.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   source: string, # Optional. Source of the resource.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string,
        /// numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> CreateOrUpdateAsync(string farmerId, string nutrientAnalysisId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(farmerId, nameof(farmerId));
            Argument.AssertNotNullOrEmpty(nutrientAnalysisId, nameof(nutrientAnalysisId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("NutrientAnalyses.CreateOrUpdate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateRequest(farmerId, nutrientAnalysisId, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates or updates a nutrient analysis resource. </summary>
        /// <param name="farmerId"> Id of the farmer resource. </param>
        /// <param name="nutrientAnalysisId"> Id of the nutrient analysis resource. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="farmerId"/>, <paramref name="nutrientAnalysisId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="farmerId"/> or <paramref name="nutrientAnalysisId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateOrUpdate with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new FarmBeatsClient(credential).GetNutrientAnalysesClient(<2021-07-31-preview>);
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.CreateOrUpdate("<farmerId>", "<nutrientAnalysisId>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call CreateOrUpdate with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new FarmBeatsClient(credential).GetNutrientAnalysesClient(<2021-07-31-preview>);
        /// 
        /// var data = new {
        ///     parentId = "<parentId>",
        ///     parentType = "PlantTissueAnalysis",
        ///     unit = "<unit>",
        ///     value = 123.45d,
        ///     referenceValueLow = 123.45d,
        ///     referenceValueHigh = 123.45d,
        ///     classification = "<classification>",
        ///     recommendation = "<recommendation>",
        ///     products = new[] {
        ///         new {
        ///             rate = "<rate>",
        ///             instruction = "<instruction>",
        ///             product = "<product>",
        ///         }
        ///     },
        ///     status = "<status>",
        ///     source = "<source>",
        ///     name = "<name>",
        ///     description = "<description>",
        ///     properties = new {
        ///         key = new {},
        ///     },
        /// };
        /// 
        /// Response response = client.CreateOrUpdate("<farmerId>", "<nutrientAnalysisId>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("farmerId").ToString());
        /// Console.WriteLine(result.GetProperty("parentId").ToString());
        /// Console.WriteLine(result.GetProperty("parentType").ToString());
        /// Console.WriteLine(result.GetProperty("unit").ToString());
        /// Console.WriteLine(result.GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("referenceValueLow").ToString());
        /// Console.WriteLine(result.GetProperty("referenceValueHigh").ToString());
        /// Console.WriteLine(result.GetProperty("classification").ToString());
        /// Console.WriteLine(result.GetProperty("recommendation").ToString());
        /// Console.WriteLine(result.GetProperty("products")[0].GetProperty("rate").ToString());
        /// Console.WriteLine(result.GetProperty("products")[0].GetProperty("instruction").ToString());
        /// Console.WriteLine(result.GetProperty("products")[0].GetProperty("product").ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("eTag").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>NutrientAnalysis</c>:
        /// <code>{
        ///   farmerId: string, # Optional. Farmer id for this nutrient analysis.
        ///   parentId: string, # Optional. Parent id for this nutrient analysis.
        ///   parentType: &quot;PlantTissueAnalysis&quot;, # Optional. Parent type for this nutrient analysis.
        /// i.e. PlantTissueAnalysis.
        ///   unit: string, # Optional. Unit for this nutrient analysis.
        ///   value: number, # Optional. Value for this nutrient analysis.
        ///   referenceValueLow: number, # Optional. Reference value low for this nutrient analysis.
        ///   referenceValueHigh: number, # Optional. Reference value high for this nutrient analysis.
        ///   classification: string, # Optional. Classification for this nutrient analysis.
        ///   recommendation: string, # Optional. Recommendation for this nutrient analysis.
        ///   products: [
        ///     {
        ///       rate: string, # Optional. Rate of the product.
        ///       instruction: string, # Optional. Instruction of the resource.
        ///       product: string, # Optional. Product of the resource.
        ///     }
        ///   ], # Optional. Products for this nutrient analysis.
        ///   id: string, # Optional. Unique resource ID.
        ///   eTag: string, # Optional. The ETag value to implement optimistic concurrency.
        ///   status: string, # Optional. Status of the resource.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   source: string, # Optional. Source of the resource.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string,
        /// numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>NutrientAnalysis</c>:
        /// <code>{
        ///   farmerId: string, # Optional. Farmer id for this nutrient analysis.
        ///   parentId: string, # Optional. Parent id for this nutrient analysis.
        ///   parentType: &quot;PlantTissueAnalysis&quot;, # Optional. Parent type for this nutrient analysis.
        /// i.e. PlantTissueAnalysis.
        ///   unit: string, # Optional. Unit for this nutrient analysis.
        ///   value: number, # Optional. Value for this nutrient analysis.
        ///   referenceValueLow: number, # Optional. Reference value low for this nutrient analysis.
        ///   referenceValueHigh: number, # Optional. Reference value high for this nutrient analysis.
        ///   classification: string, # Optional. Classification for this nutrient analysis.
        ///   recommendation: string, # Optional. Recommendation for this nutrient analysis.
        ///   products: [
        ///     {
        ///       rate: string, # Optional. Rate of the product.
        ///       instruction: string, # Optional. Instruction of the resource.
        ///       product: string, # Optional. Product of the resource.
        ///     }
        ///   ], # Optional. Products for this nutrient analysis.
        ///   id: string, # Optional. Unique resource ID.
        ///   eTag: string, # Optional. The ETag value to implement optimistic concurrency.
        ///   status: string, # Optional. Status of the resource.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   source: string, # Optional. Source of the resource.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string,
        /// numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response CreateOrUpdate(string farmerId, string nutrientAnalysisId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(farmerId, nameof(farmerId));
            Argument.AssertNotNullOrEmpty(nutrientAnalysisId, nameof(nutrientAnalysisId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("NutrientAnalyses.CreateOrUpdate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateRequest(farmerId, nutrientAnalysisId, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a specified nutrient analysis resource under a particular farmer. </summary>
        /// <param name="farmerId"> Id of the farmer. </param>
        /// <param name="nutrientAnalysisId"> Id of the nutrient analysis. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="farmerId"/> or <paramref name="nutrientAnalysisId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="farmerId"/> or <paramref name="nutrientAnalysisId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteAsync with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new FarmBeatsClient(credential).GetNutrientAnalysesClient(<2021-07-31-preview>);
        /// 
        /// Response response = await client.DeleteAsync("<farmerId>", "<nutrientAnalysisId>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> DeleteAsync(string farmerId, string nutrientAnalysisId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(farmerId, nameof(farmerId));
            Argument.AssertNotNullOrEmpty(nutrientAnalysisId, nameof(nutrientAnalysisId));

            using var scope = ClientDiagnostics.CreateScope("NutrientAnalyses.Delete");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteRequest(farmerId, nutrientAnalysisId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a specified nutrient analysis resource under a particular farmer. </summary>
        /// <param name="farmerId"> Id of the farmer. </param>
        /// <param name="nutrientAnalysisId"> Id of the nutrient analysis. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="farmerId"/> or <paramref name="nutrientAnalysisId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="farmerId"/> or <paramref name="nutrientAnalysisId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call Delete with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new FarmBeatsClient(credential).GetNutrientAnalysesClient(<2021-07-31-preview>);
        /// 
        /// Response response = client.Delete("<farmerId>", "<nutrientAnalysisId>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response Delete(string farmerId, string nutrientAnalysisId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(farmerId, nameof(farmerId));
            Argument.AssertNotNullOrEmpty(nutrientAnalysisId, nameof(nutrientAnalysisId));

            using var scope = ClientDiagnostics.CreateScope("NutrientAnalyses.Delete");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteRequest(farmerId, nutrientAnalysisId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a paginated list of nutrient analysis resources under a particular farmer. </summary>
        /// <param name="farmerId"> Id of the associated farmer. </param>
        /// <param name="parentType">
        /// Type of the parent it belongs to.
        /// i.e. PlantTissueAnalysis.
        /// </param>
        /// <param name="parentIds"> Parent ids of the resource. </param>
        /// <param name="classifications"> Classifications for nutrient analyses. </param>
        /// <param name="ids"> Ids of the resource. </param>
        /// <param name="names"> Names of the resource. </param>
        /// <param name="propertyFilters">
        /// Filters on key-value pairs within the Properties object.
        /// eg. &quot;{testKey} eq {testValue}&quot;.
        /// </param>
        /// <param name="statuses"> Statuses of the resource. </param>
        /// <param name="minCreatedDateTime"> Minimum creation date of resource (inclusive). </param>
        /// <param name="maxCreatedDateTime"> Maximum creation date of resource (inclusive). </param>
        /// <param name="minLastModifiedDateTime"> Minimum last modified date of resource (inclusive). </param>
        /// <param name="maxLastModifiedDateTime"> Maximum last modified date of resource (inclusive). </param>
        /// <param name="maxPageSize">
        /// Maximum number of items needed (inclusive).
        /// Minimum = 10, Maximum = 1000, Default value = 50.
        /// </param>
        /// <param name="skipToken"> Skip token for getting next set of results. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="farmerId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="farmerId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetNutrientAnalysesByFarmerIdAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new FarmBeatsClient(credential).GetNutrientAnalysesClient(<2021-07-31-preview>);
        /// 
        /// await foreach (var data in client.GetNutrientAnalysesByFarmerIdAsync("<farmerId>"))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.ToString());
        /// }
        /// ]]></code>
        /// This sample shows how to call GetNutrientAnalysesByFarmerIdAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new FarmBeatsClient(credential).GetNutrientAnalysesClient(<2021-07-31-preview>);
        /// 
        /// await foreach (var data in client.GetNutrientAnalysesByFarmerIdAsync("<farmerId>", "<parentType>", new String[]{"<parentIds>"}, new String[]{"<classifications>"}, new String[]{"<ids>"}, new String[]{"<names>"}, new String[]{"<propertyFilters>"}, new String[]{"<statuses>"}, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 1234, "<skipToken>"))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.GetProperty("farmerId").ToString());
        ///     Console.WriteLine(result.GetProperty("parentId").ToString());
        ///     Console.WriteLine(result.GetProperty("parentType").ToString());
        ///     Console.WriteLine(result.GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("referenceValueLow").ToString());
        ///     Console.WriteLine(result.GetProperty("referenceValueHigh").ToString());
        ///     Console.WriteLine(result.GetProperty("classification").ToString());
        ///     Console.WriteLine(result.GetProperty("recommendation").ToString());
        ///     Console.WriteLine(result.GetProperty("products")[0].GetProperty("rate").ToString());
        ///     Console.WriteLine(result.GetProperty("products")[0].GetProperty("instruction").ToString());
        ///     Console.WriteLine(result.GetProperty("products")[0].GetProperty("product").ToString());
        ///     Console.WriteLine(result.GetProperty("id").ToString());
        ///     Console.WriteLine(result.GetProperty("eTag").ToString());
        ///     Console.WriteLine(result.GetProperty("status").ToString());
        ///     Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("source").ToString());
        ///     Console.WriteLine(result.GetProperty("name").ToString());
        ///     Console.WriteLine(result.GetProperty("description").ToString());
        ///     Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
        /// }
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for one item in the pageable response.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>NutrientAnalysisListResponseValue</c>:
        /// <code>{
        ///   farmerId: string, # Optional. Farmer id for this nutrient analysis.
        ///   parentId: string, # Optional. Parent id for this nutrient analysis.
        ///   parentType: &quot;PlantTissueAnalysis&quot;, # Optional. Parent type for this nutrient analysis.
        /// i.e. PlantTissueAnalysis.
        ///   unit: string, # Optional. Unit for this nutrient analysis.
        ///   value: number, # Optional. Value for this nutrient analysis.
        ///   referenceValueLow: number, # Optional. Reference value low for this nutrient analysis.
        ///   referenceValueHigh: number, # Optional. Reference value high for this nutrient analysis.
        ///   classification: string, # Optional. Classification for this nutrient analysis.
        ///   recommendation: string, # Optional. Recommendation for this nutrient analysis.
        ///   products: [
        ///     {
        ///       rate: string, # Optional. Rate of the product.
        ///       instruction: string, # Optional. Instruction of the resource.
        ///       product: string, # Optional. Product of the resource.
        ///     }
        ///   ], # Optional. Products for this nutrient analysis.
        ///   id: string, # Optional. Unique resource ID.
        ///   eTag: string, # Optional. The ETag value to implement optimistic concurrency.
        ///   status: string, # Optional. Status of the resource.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   source: string, # Optional. Source of the resource.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string,
        /// numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual AsyncPageable<BinaryData> GetNutrientAnalysesByFarmerIdAsync(string farmerId, string parentType = null, IEnumerable<string> parentIds = null, IEnumerable<string> classifications = null, IEnumerable<string> ids = null, IEnumerable<string> names = null, IEnumerable<string> propertyFilters = null, IEnumerable<string> statuses = null, DateTimeOffset? minCreatedDateTime = null, DateTimeOffset? maxCreatedDateTime = null, DateTimeOffset? minLastModifiedDateTime = null, DateTimeOffset? maxLastModifiedDateTime = null, int? maxPageSize = null, string skipToken = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(farmerId, nameof(farmerId));

            return GetNutrientAnalysesByFarmerIdImplementationAsync("NutrientAnalyses.GetNutrientAnalysesByFarmerId", farmerId, parentType, parentIds, classifications, ids, names, propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken, context);
        }

        private AsyncPageable<BinaryData> GetNutrientAnalysesByFarmerIdImplementationAsync(string diagnosticsScopeName, string farmerId, string parentType, IEnumerable<string> parentIds, IEnumerable<string> classifications, IEnumerable<string> ids, IEnumerable<string> names, IEnumerable<string> propertyFilters, IEnumerable<string> statuses, DateTimeOffset? minCreatedDateTime, DateTimeOffset? maxCreatedDateTime, DateTimeOffset? minLastModifiedDateTime, DateTimeOffset? maxLastModifiedDateTime, int? maxPageSize, string skipToken, RequestContext context)
        {
            return PageableHelpers.CreateAsyncPageable(CreateEnumerableAsync, ClientDiagnostics, diagnosticsScopeName);
            async IAsyncEnumerable<Page<BinaryData>> CreateEnumerableAsync(string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken = default)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetNutrientAnalysesByFarmerIdRequest(farmerId, parentType, parentIds, classifications, ids, names, propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken, context)
                        : CreateGetNutrientAnalysesByFarmerIdNextPageRequest(nextLink, farmerId, parentType, parentIds, classifications, ids, names, propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken, context);
                    var page = await LowLevelPageableHelpers.ProcessMessageAsync(_pipeline, message, context, "value", "nextLink", cancellationToken).ConfigureAwait(false);
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Returns a paginated list of nutrient analysis resources under a particular farmer. </summary>
        /// <param name="farmerId"> Id of the associated farmer. </param>
        /// <param name="parentType">
        /// Type of the parent it belongs to.
        /// i.e. PlantTissueAnalysis.
        /// </param>
        /// <param name="parentIds"> Parent ids of the resource. </param>
        /// <param name="classifications"> Classifications for nutrient analyses. </param>
        /// <param name="ids"> Ids of the resource. </param>
        /// <param name="names"> Names of the resource. </param>
        /// <param name="propertyFilters">
        /// Filters on key-value pairs within the Properties object.
        /// eg. &quot;{testKey} eq {testValue}&quot;.
        /// </param>
        /// <param name="statuses"> Statuses of the resource. </param>
        /// <param name="minCreatedDateTime"> Minimum creation date of resource (inclusive). </param>
        /// <param name="maxCreatedDateTime"> Maximum creation date of resource (inclusive). </param>
        /// <param name="minLastModifiedDateTime"> Minimum last modified date of resource (inclusive). </param>
        /// <param name="maxLastModifiedDateTime"> Maximum last modified date of resource (inclusive). </param>
        /// <param name="maxPageSize">
        /// Maximum number of items needed (inclusive).
        /// Minimum = 10, Maximum = 1000, Default value = 50.
        /// </param>
        /// <param name="skipToken"> Skip token for getting next set of results. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="farmerId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="farmerId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetNutrientAnalysesByFarmerId with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new FarmBeatsClient(credential).GetNutrientAnalysesClient(<2021-07-31-preview>);
        /// 
        /// foreach (var data in client.GetNutrientAnalysesByFarmerId("<farmerId>"))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.ToString());
        /// }
        /// ]]></code>
        /// This sample shows how to call GetNutrientAnalysesByFarmerId with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new FarmBeatsClient(credential).GetNutrientAnalysesClient(<2021-07-31-preview>);
        /// 
        /// foreach (var data in client.GetNutrientAnalysesByFarmerId("<farmerId>", "<parentType>", new String[]{"<parentIds>"}, new String[]{"<classifications>"}, new String[]{"<ids>"}, new String[]{"<names>"}, new String[]{"<propertyFilters>"}, new String[]{"<statuses>"}, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 1234, "<skipToken>"))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.GetProperty("farmerId").ToString());
        ///     Console.WriteLine(result.GetProperty("parentId").ToString());
        ///     Console.WriteLine(result.GetProperty("parentType").ToString());
        ///     Console.WriteLine(result.GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("referenceValueLow").ToString());
        ///     Console.WriteLine(result.GetProperty("referenceValueHigh").ToString());
        ///     Console.WriteLine(result.GetProperty("classification").ToString());
        ///     Console.WriteLine(result.GetProperty("recommendation").ToString());
        ///     Console.WriteLine(result.GetProperty("products")[0].GetProperty("rate").ToString());
        ///     Console.WriteLine(result.GetProperty("products")[0].GetProperty("instruction").ToString());
        ///     Console.WriteLine(result.GetProperty("products")[0].GetProperty("product").ToString());
        ///     Console.WriteLine(result.GetProperty("id").ToString());
        ///     Console.WriteLine(result.GetProperty("eTag").ToString());
        ///     Console.WriteLine(result.GetProperty("status").ToString());
        ///     Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("source").ToString());
        ///     Console.WriteLine(result.GetProperty("name").ToString());
        ///     Console.WriteLine(result.GetProperty("description").ToString());
        ///     Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
        /// }
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for one item in the pageable response.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>NutrientAnalysisListResponseValue</c>:
        /// <code>{
        ///   farmerId: string, # Optional. Farmer id for this nutrient analysis.
        ///   parentId: string, # Optional. Parent id for this nutrient analysis.
        ///   parentType: &quot;PlantTissueAnalysis&quot;, # Optional. Parent type for this nutrient analysis.
        /// i.e. PlantTissueAnalysis.
        ///   unit: string, # Optional. Unit for this nutrient analysis.
        ///   value: number, # Optional. Value for this nutrient analysis.
        ///   referenceValueLow: number, # Optional. Reference value low for this nutrient analysis.
        ///   referenceValueHigh: number, # Optional. Reference value high for this nutrient analysis.
        ///   classification: string, # Optional. Classification for this nutrient analysis.
        ///   recommendation: string, # Optional. Recommendation for this nutrient analysis.
        ///   products: [
        ///     {
        ///       rate: string, # Optional. Rate of the product.
        ///       instruction: string, # Optional. Instruction of the resource.
        ///       product: string, # Optional. Product of the resource.
        ///     }
        ///   ], # Optional. Products for this nutrient analysis.
        ///   id: string, # Optional. Unique resource ID.
        ///   eTag: string, # Optional. The ETag value to implement optimistic concurrency.
        ///   status: string, # Optional. Status of the resource.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   source: string, # Optional. Source of the resource.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string,
        /// numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Pageable<BinaryData> GetNutrientAnalysesByFarmerId(string farmerId, string parentType = null, IEnumerable<string> parentIds = null, IEnumerable<string> classifications = null, IEnumerable<string> ids = null, IEnumerable<string> names = null, IEnumerable<string> propertyFilters = null, IEnumerable<string> statuses = null, DateTimeOffset? minCreatedDateTime = null, DateTimeOffset? maxCreatedDateTime = null, DateTimeOffset? minLastModifiedDateTime = null, DateTimeOffset? maxLastModifiedDateTime = null, int? maxPageSize = null, string skipToken = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(farmerId, nameof(farmerId));

            return GetNutrientAnalysesByFarmerIdImplementation("NutrientAnalyses.GetNutrientAnalysesByFarmerId", farmerId, parentType, parentIds, classifications, ids, names, propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken, context);
        }

        private Pageable<BinaryData> GetNutrientAnalysesByFarmerIdImplementation(string diagnosticsScopeName, string farmerId, string parentType, IEnumerable<string> parentIds, IEnumerable<string> classifications, IEnumerable<string> ids, IEnumerable<string> names, IEnumerable<string> propertyFilters, IEnumerable<string> statuses, DateTimeOffset? minCreatedDateTime, DateTimeOffset? maxCreatedDateTime, DateTimeOffset? minLastModifiedDateTime, DateTimeOffset? maxLastModifiedDateTime, int? maxPageSize, string skipToken, RequestContext context)
        {
            return PageableHelpers.CreatePageable(CreateEnumerable, ClientDiagnostics, diagnosticsScopeName);
            IEnumerable<Page<BinaryData>> CreateEnumerable(string nextLink, int? pageSizeHint)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetNutrientAnalysesByFarmerIdRequest(farmerId, parentType, parentIds, classifications, ids, names, propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken, context)
                        : CreateGetNutrientAnalysesByFarmerIdNextPageRequest(nextLink, farmerId, parentType, parentIds, classifications, ids, names, propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken, context);
                    var page = LowLevelPageableHelpers.ProcessMessage(_pipeline, message, context, "value", "nextLink");
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Returns a paginated list of nutrient analysis resources across all farmers. </summary>
        /// <param name="parentType">
        /// Type of the parent it belongs to.
        /// i.e. PlantTissueAnalysis.
        /// </param>
        /// <param name="parentIds"> Parent ids of the resource. </param>
        /// <param name="classifications"> Classifications for nutrient analyses. </param>
        /// <param name="ids"> Ids of the resource. </param>
        /// <param name="names"> Names of the resource. </param>
        /// <param name="propertyFilters">
        /// Filters on key-value pairs within the Properties object.
        /// eg. &quot;{testKey} eq {testValue}&quot;.
        /// </param>
        /// <param name="statuses"> Statuses of the resource. </param>
        /// <param name="minCreatedDateTime"> Minimum creation date of resource (inclusive). </param>
        /// <param name="maxCreatedDateTime"> Maximum creation date of resource (inclusive). </param>
        /// <param name="minLastModifiedDateTime"> Minimum last modified date of resource (inclusive). </param>
        /// <param name="maxLastModifiedDateTime"> Maximum last modified date of resource (inclusive). </param>
        /// <param name="maxPageSize">
        /// Maximum number of items needed (inclusive).
        /// Minimum = 10, Maximum = 1000, Default value = 50.
        /// </param>
        /// <param name="skipToken"> Skip token for getting next set of results. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetNutrientAnalysesAsync and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new FarmBeatsClient(credential).GetNutrientAnalysesClient(<2021-07-31-preview>);
        /// 
        /// await foreach (var data in client.GetNutrientAnalysesAsync())
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.ToString());
        /// }
        /// ]]></code>
        /// This sample shows how to call GetNutrientAnalysesAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new FarmBeatsClient(credential).GetNutrientAnalysesClient(<2021-07-31-preview>);
        /// 
        /// await foreach (var data in client.GetNutrientAnalysesAsync("<parentType>", new String[]{"<parentIds>"}, new String[]{"<classifications>"}, new String[]{"<ids>"}, new String[]{"<names>"}, new String[]{"<propertyFilters>"}, new String[]{"<statuses>"}, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 1234, "<skipToken>"))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.GetProperty("farmerId").ToString());
        ///     Console.WriteLine(result.GetProperty("parentId").ToString());
        ///     Console.WriteLine(result.GetProperty("parentType").ToString());
        ///     Console.WriteLine(result.GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("referenceValueLow").ToString());
        ///     Console.WriteLine(result.GetProperty("referenceValueHigh").ToString());
        ///     Console.WriteLine(result.GetProperty("classification").ToString());
        ///     Console.WriteLine(result.GetProperty("recommendation").ToString());
        ///     Console.WriteLine(result.GetProperty("products")[0].GetProperty("rate").ToString());
        ///     Console.WriteLine(result.GetProperty("products")[0].GetProperty("instruction").ToString());
        ///     Console.WriteLine(result.GetProperty("products")[0].GetProperty("product").ToString());
        ///     Console.WriteLine(result.GetProperty("id").ToString());
        ///     Console.WriteLine(result.GetProperty("eTag").ToString());
        ///     Console.WriteLine(result.GetProperty("status").ToString());
        ///     Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("source").ToString());
        ///     Console.WriteLine(result.GetProperty("name").ToString());
        ///     Console.WriteLine(result.GetProperty("description").ToString());
        ///     Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
        /// }
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for one item in the pageable response.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>NutrientAnalysisListResponseValue</c>:
        /// <code>{
        ///   farmerId: string, # Optional. Farmer id for this nutrient analysis.
        ///   parentId: string, # Optional. Parent id for this nutrient analysis.
        ///   parentType: &quot;PlantTissueAnalysis&quot;, # Optional. Parent type for this nutrient analysis.
        /// i.e. PlantTissueAnalysis.
        ///   unit: string, # Optional. Unit for this nutrient analysis.
        ///   value: number, # Optional. Value for this nutrient analysis.
        ///   referenceValueLow: number, # Optional. Reference value low for this nutrient analysis.
        ///   referenceValueHigh: number, # Optional. Reference value high for this nutrient analysis.
        ///   classification: string, # Optional. Classification for this nutrient analysis.
        ///   recommendation: string, # Optional. Recommendation for this nutrient analysis.
        ///   products: [
        ///     {
        ///       rate: string, # Optional. Rate of the product.
        ///       instruction: string, # Optional. Instruction of the resource.
        ///       product: string, # Optional. Product of the resource.
        ///     }
        ///   ], # Optional. Products for this nutrient analysis.
        ///   id: string, # Optional. Unique resource ID.
        ///   eTag: string, # Optional. The ETag value to implement optimistic concurrency.
        ///   status: string, # Optional. Status of the resource.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   source: string, # Optional. Source of the resource.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string,
        /// numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual AsyncPageable<BinaryData> GetNutrientAnalysesAsync(string parentType = null, IEnumerable<string> parentIds = null, IEnumerable<string> classifications = null, IEnumerable<string> ids = null, IEnumerable<string> names = null, IEnumerable<string> propertyFilters = null, IEnumerable<string> statuses = null, DateTimeOffset? minCreatedDateTime = null, DateTimeOffset? maxCreatedDateTime = null, DateTimeOffset? minLastModifiedDateTime = null, DateTimeOffset? maxLastModifiedDateTime = null, int? maxPageSize = null, string skipToken = null, RequestContext context = null)
        {
            return GetNutrientAnalysesImplementationAsync("NutrientAnalyses.GetNutrientAnalyses", parentType, parentIds, classifications, ids, names, propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken, context);
        }

        private AsyncPageable<BinaryData> GetNutrientAnalysesImplementationAsync(string diagnosticsScopeName, string parentType, IEnumerable<string> parentIds, IEnumerable<string> classifications, IEnumerable<string> ids, IEnumerable<string> names, IEnumerable<string> propertyFilters, IEnumerable<string> statuses, DateTimeOffset? minCreatedDateTime, DateTimeOffset? maxCreatedDateTime, DateTimeOffset? minLastModifiedDateTime, DateTimeOffset? maxLastModifiedDateTime, int? maxPageSize, string skipToken, RequestContext context)
        {
            return PageableHelpers.CreateAsyncPageable(CreateEnumerableAsync, ClientDiagnostics, diagnosticsScopeName);
            async IAsyncEnumerable<Page<BinaryData>> CreateEnumerableAsync(string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken = default)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetNutrientAnalysesRequest(parentType, parentIds, classifications, ids, names, propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken, context)
                        : CreateGetNutrientAnalysesNextPageRequest(nextLink, parentType, parentIds, classifications, ids, names, propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken, context);
                    var page = await LowLevelPageableHelpers.ProcessMessageAsync(_pipeline, message, context, "value", "nextLink", cancellationToken).ConfigureAwait(false);
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Returns a paginated list of nutrient analysis resources across all farmers. </summary>
        /// <param name="parentType">
        /// Type of the parent it belongs to.
        /// i.e. PlantTissueAnalysis.
        /// </param>
        /// <param name="parentIds"> Parent ids of the resource. </param>
        /// <param name="classifications"> Classifications for nutrient analyses. </param>
        /// <param name="ids"> Ids of the resource. </param>
        /// <param name="names"> Names of the resource. </param>
        /// <param name="propertyFilters">
        /// Filters on key-value pairs within the Properties object.
        /// eg. &quot;{testKey} eq {testValue}&quot;.
        /// </param>
        /// <param name="statuses"> Statuses of the resource. </param>
        /// <param name="minCreatedDateTime"> Minimum creation date of resource (inclusive). </param>
        /// <param name="maxCreatedDateTime"> Maximum creation date of resource (inclusive). </param>
        /// <param name="minLastModifiedDateTime"> Minimum last modified date of resource (inclusive). </param>
        /// <param name="maxLastModifiedDateTime"> Maximum last modified date of resource (inclusive). </param>
        /// <param name="maxPageSize">
        /// Maximum number of items needed (inclusive).
        /// Minimum = 10, Maximum = 1000, Default value = 50.
        /// </param>
        /// <param name="skipToken"> Skip token for getting next set of results. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetNutrientAnalyses and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new FarmBeatsClient(credential).GetNutrientAnalysesClient(<2021-07-31-preview>);
        /// 
        /// foreach (var data in client.GetNutrientAnalyses())
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.ToString());
        /// }
        /// ]]></code>
        /// This sample shows how to call GetNutrientAnalyses with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new FarmBeatsClient(credential).GetNutrientAnalysesClient(<2021-07-31-preview>);
        /// 
        /// foreach (var data in client.GetNutrientAnalyses("<parentType>", new String[]{"<parentIds>"}, new String[]{"<classifications>"}, new String[]{"<ids>"}, new String[]{"<names>"}, new String[]{"<propertyFilters>"}, new String[]{"<statuses>"}, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 1234, "<skipToken>"))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.GetProperty("farmerId").ToString());
        ///     Console.WriteLine(result.GetProperty("parentId").ToString());
        ///     Console.WriteLine(result.GetProperty("parentType").ToString());
        ///     Console.WriteLine(result.GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("referenceValueLow").ToString());
        ///     Console.WriteLine(result.GetProperty("referenceValueHigh").ToString());
        ///     Console.WriteLine(result.GetProperty("classification").ToString());
        ///     Console.WriteLine(result.GetProperty("recommendation").ToString());
        ///     Console.WriteLine(result.GetProperty("products")[0].GetProperty("rate").ToString());
        ///     Console.WriteLine(result.GetProperty("products")[0].GetProperty("instruction").ToString());
        ///     Console.WriteLine(result.GetProperty("products")[0].GetProperty("product").ToString());
        ///     Console.WriteLine(result.GetProperty("id").ToString());
        ///     Console.WriteLine(result.GetProperty("eTag").ToString());
        ///     Console.WriteLine(result.GetProperty("status").ToString());
        ///     Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("source").ToString());
        ///     Console.WriteLine(result.GetProperty("name").ToString());
        ///     Console.WriteLine(result.GetProperty("description").ToString());
        ///     Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
        /// }
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for one item in the pageable response.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>NutrientAnalysisListResponseValue</c>:
        /// <code>{
        ///   farmerId: string, # Optional. Farmer id for this nutrient analysis.
        ///   parentId: string, # Optional. Parent id for this nutrient analysis.
        ///   parentType: &quot;PlantTissueAnalysis&quot;, # Optional. Parent type for this nutrient analysis.
        /// i.e. PlantTissueAnalysis.
        ///   unit: string, # Optional. Unit for this nutrient analysis.
        ///   value: number, # Optional. Value for this nutrient analysis.
        ///   referenceValueLow: number, # Optional. Reference value low for this nutrient analysis.
        ///   referenceValueHigh: number, # Optional. Reference value high for this nutrient analysis.
        ///   classification: string, # Optional. Classification for this nutrient analysis.
        ///   recommendation: string, # Optional. Recommendation for this nutrient analysis.
        ///   products: [
        ///     {
        ///       rate: string, # Optional. Rate of the product.
        ///       instruction: string, # Optional. Instruction of the resource.
        ///       product: string, # Optional. Product of the resource.
        ///     }
        ///   ], # Optional. Products for this nutrient analysis.
        ///   id: string, # Optional. Unique resource ID.
        ///   eTag: string, # Optional. The ETag value to implement optimistic concurrency.
        ///   status: string, # Optional. Status of the resource.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   source: string, # Optional. Source of the resource.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string,
        /// numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Pageable<BinaryData> GetNutrientAnalyses(string parentType = null, IEnumerable<string> parentIds = null, IEnumerable<string> classifications = null, IEnumerable<string> ids = null, IEnumerable<string> names = null, IEnumerable<string> propertyFilters = null, IEnumerable<string> statuses = null, DateTimeOffset? minCreatedDateTime = null, DateTimeOffset? maxCreatedDateTime = null, DateTimeOffset? minLastModifiedDateTime = null, DateTimeOffset? maxLastModifiedDateTime = null, int? maxPageSize = null, string skipToken = null, RequestContext context = null)
        {
            return GetNutrientAnalysesImplementation("NutrientAnalyses.GetNutrientAnalyses", parentType, parentIds, classifications, ids, names, propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken, context);
        }

        private Pageable<BinaryData> GetNutrientAnalysesImplementation(string diagnosticsScopeName, string parentType, IEnumerable<string> parentIds, IEnumerable<string> classifications, IEnumerable<string> ids, IEnumerable<string> names, IEnumerable<string> propertyFilters, IEnumerable<string> statuses, DateTimeOffset? minCreatedDateTime, DateTimeOffset? maxCreatedDateTime, DateTimeOffset? minLastModifiedDateTime, DateTimeOffset? maxLastModifiedDateTime, int? maxPageSize, string skipToken, RequestContext context)
        {
            return PageableHelpers.CreatePageable(CreateEnumerable, ClientDiagnostics, diagnosticsScopeName);
            IEnumerable<Page<BinaryData>> CreateEnumerable(string nextLink, int? pageSizeHint)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetNutrientAnalysesRequest(parentType, parentIds, classifications, ids, names, propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken, context)
                        : CreateGetNutrientAnalysesNextPageRequest(nextLink, parentType, parentIds, classifications, ids, names, propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken, context);
                    var page = LowLevelPageableHelpers.ProcessMessage(_pipeline, message, context, "value", "nextLink");
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        internal HttpMessage CreateGetNutrientAnalysesByFarmerIdRequest(string farmerId, string parentType, IEnumerable<string> parentIds, IEnumerable<string> classifications, IEnumerable<string> ids, IEnumerable<string> names, IEnumerable<string> propertyFilters, IEnumerable<string> statuses, DateTimeOffset? minCreatedDateTime, DateTimeOffset? maxCreatedDateTime, DateTimeOffset? minLastModifiedDateTime, DateTimeOffset? maxLastModifiedDateTime, int? maxPageSize, string skipToken, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/farmers/", false);
            uri.AppendPath(farmerId, true);
            uri.AppendPath("/nutrient-analyses", false);
            if (parentType != null)
            {
                uri.AppendQuery("parentType", parentType, true);
            }
            if (parentIds != null)
            {
                foreach (var param in parentIds)
                {
                    uri.AppendQuery("parentIds", param, true);
                }
            }
            if (classifications != null)
            {
                foreach (var param in classifications)
                {
                    uri.AppendQuery("classifications", param, true);
                }
            }
            if (ids != null)
            {
                foreach (var param in ids)
                {
                    uri.AppendQuery("ids", param, true);
                }
            }
            if (names != null)
            {
                foreach (var param in names)
                {
                    uri.AppendQuery("names", param, true);
                }
            }
            if (propertyFilters != null)
            {
                foreach (var param in propertyFilters)
                {
                    uri.AppendQuery("propertyFilters", param, true);
                }
            }
            if (statuses != null)
            {
                foreach (var param in statuses)
                {
                    uri.AppendQuery("statuses", param, true);
                }
            }
            if (minCreatedDateTime != null)
            {
                uri.AppendQuery("minCreatedDateTime", minCreatedDateTime.Value, "O", true);
            }
            if (maxCreatedDateTime != null)
            {
                uri.AppendQuery("maxCreatedDateTime", maxCreatedDateTime.Value, "O", true);
            }
            if (minLastModifiedDateTime != null)
            {
                uri.AppendQuery("minLastModifiedDateTime", minLastModifiedDateTime.Value, "O", true);
            }
            if (maxLastModifiedDateTime != null)
            {
                uri.AppendQuery("maxLastModifiedDateTime", maxLastModifiedDateTime.Value, "O", true);
            }
            if (maxPageSize != null)
            {
                uri.AppendQuery("$maxPageSize", maxPageSize.Value, true);
            }
            if (skipToken != null)
            {
                uri.AppendQuery("$skipToken", skipToken, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetNutrientAnalysisRequest(string farmerId, string nutrientAnalysisId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/farmers/", false);
            uri.AppendPath(farmerId, true);
            uri.AppendPath("/nutrient-analyses/", false);
            uri.AppendPath(nutrientAnalysisId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCreateOrUpdateRequest(string farmerId, string nutrientAnalysisId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200201);
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/farmers/", false);
            uri.AppendPath(farmerId, true);
            uri.AppendPath("/nutrient-analyses/", false);
            uri.AppendPath(nutrientAnalysisId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/merge-patch+json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteRequest(string farmerId, string nutrientAnalysisId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/farmers/", false);
            uri.AppendPath(farmerId, true);
            uri.AppendPath("/nutrient-analyses/", false);
            uri.AppendPath(nutrientAnalysisId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetNutrientAnalysesRequest(string parentType, IEnumerable<string> parentIds, IEnumerable<string> classifications, IEnumerable<string> ids, IEnumerable<string> names, IEnumerable<string> propertyFilters, IEnumerable<string> statuses, DateTimeOffset? minCreatedDateTime, DateTimeOffset? maxCreatedDateTime, DateTimeOffset? minLastModifiedDateTime, DateTimeOffset? maxLastModifiedDateTime, int? maxPageSize, string skipToken, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/nutrient-analyses", false);
            if (parentType != null)
            {
                uri.AppendQuery("parentType", parentType, true);
            }
            if (parentIds != null)
            {
                foreach (var param in parentIds)
                {
                    uri.AppendQuery("parentIds", param, true);
                }
            }
            if (classifications != null)
            {
                foreach (var param in classifications)
                {
                    uri.AppendQuery("classifications", param, true);
                }
            }
            if (ids != null)
            {
                foreach (var param in ids)
                {
                    uri.AppendQuery("ids", param, true);
                }
            }
            if (names != null)
            {
                foreach (var param in names)
                {
                    uri.AppendQuery("names", param, true);
                }
            }
            if (propertyFilters != null)
            {
                foreach (var param in propertyFilters)
                {
                    uri.AppendQuery("propertyFilters", param, true);
                }
            }
            if (statuses != null)
            {
                foreach (var param in statuses)
                {
                    uri.AppendQuery("statuses", param, true);
                }
            }
            if (minCreatedDateTime != null)
            {
                uri.AppendQuery("minCreatedDateTime", minCreatedDateTime.Value, "O", true);
            }
            if (maxCreatedDateTime != null)
            {
                uri.AppendQuery("maxCreatedDateTime", maxCreatedDateTime.Value, "O", true);
            }
            if (minLastModifiedDateTime != null)
            {
                uri.AppendQuery("minLastModifiedDateTime", minLastModifiedDateTime.Value, "O", true);
            }
            if (maxLastModifiedDateTime != null)
            {
                uri.AppendQuery("maxLastModifiedDateTime", maxLastModifiedDateTime.Value, "O", true);
            }
            if (maxPageSize != null)
            {
                uri.AppendQuery("$maxPageSize", maxPageSize.Value, true);
            }
            if (skipToken != null)
            {
                uri.AppendQuery("$skipToken", skipToken, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetNutrientAnalysesByFarmerIdNextPageRequest(string nextLink, string farmerId, string parentType, IEnumerable<string> parentIds, IEnumerable<string> classifications, IEnumerable<string> ids, IEnumerable<string> names, IEnumerable<string> propertyFilters, IEnumerable<string> statuses, DateTimeOffset? minCreatedDateTime, DateTimeOffset? maxCreatedDateTime, DateTimeOffset? minLastModifiedDateTime, DateTimeOffset? maxLastModifiedDateTime, int? maxPageSize, string skipToken, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetNutrientAnalysesNextPageRequest(string nextLink, string parentType, IEnumerable<string> parentIds, IEnumerable<string> classifications, IEnumerable<string> ids, IEnumerable<string> names, IEnumerable<string> propertyFilters, IEnumerable<string> statuses, DateTimeOffset? minCreatedDateTime, DateTimeOffset? maxCreatedDateTime, DateTimeOffset? minLastModifiedDateTime, DateTimeOffset? maxLastModifiedDateTime, int? maxPageSize, string skipToken, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier200201;
        private static ResponseClassifier ResponseClassifier200201 => _responseClassifier200201 ??= new StatusCodeClassifier(stackalloc ushort[] { 200, 201 });
        private static ResponseClassifier _responseClassifier204;
        private static ResponseClassifier ResponseClassifier204 => _responseClassifier204 ??= new StatusCodeClassifier(stackalloc ushort[] { 204 });
    }
}
