// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Verticals.AgriFood.Farming
{
    /// <summary> The PlantingData service client. </summary>
    public partial class PlantingDataClient
    {
        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline { get => _pipeline; }
        private HttpPipeline _pipeline;
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly PlantingDataRestClient _restClient;
        private readonly string[] AuthorizationScopes = { "https://farmbeats.azure.net/.default" };
        private readonly TokenCredential _tokenCredential;

        /// <summary> Initializes a new instance of PlantingDataClient for mocking. </summary>
        protected PlantingDataClient()
        {
        }

        /// <summary> Initializes a new instance of PlantingDataClient. </summary>
        /// <param name="endpoint"> The endpoint of your FarmBeats resource (protocol and hostname, for example: https://{resourceName}.farmbeats.azure.net). </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public PlantingDataClient(Uri endpoint, TokenCredential credential, FarmBeatsClientOptions options = null)
        {
            if (endpoint == null)
            {
                throw new ArgumentNullException(nameof(endpoint));
            }
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }

            options ??= new FarmBeatsClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            _tokenCredential = credential;
            var authPolicy = new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes);
            _pipeline = HttpPipelineBuilder.Build(options, new HttpPipelinePolicy[] { new LowLevelCallbackPolicy() }, new HttpPipelinePolicy[] { authPolicy }, new ResponseClassifier());
            _restClient = new PlantingDataRestClient(_clientDiagnostics, _pipeline, endpoint, options.Version);
        }

        /// <summary> Get a specified planting data resource under a particular farmer. </summary>
        /// <param name="farmerId"> ID of the associated farmer resource. </param>
        /// <param name="plantingDataId"> ID of the planting data resource. </param>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   avgPlantingRate: {
        ///     unit: string,
        ///     value: number
        ///   },
        ///   totalMaterial: Measure,
        ///   avgMaterial: Measure,
        ///   plantingProductDetails: [
        ///     {
        ///       productName: string,
        ///       area: Measure,
        ///       totalMaterial: Measure,
        ///       avgMaterial: Measure
        ///     }
        ///   ],
        ///   area: Measure,
        ///   source: string,
        ///   operationModifiedDateTime: string (ISO 8601 Format),
        ///   operationStartDateTime: string (ISO 8601 Format),
        ///   operationEndDateTime: string (ISO 8601 Format),
        ///   attachmentsLink: string,
        ///   associatedBoundaryId: string,
        ///   operationBoundaryId: string,
        ///   farmerId: string,
        ///   id: string,
        ///   eTag: string,
        ///   status: string,
        ///   createdDateTime: string (ISO 8601 Format),
        ///   modifiedDateTime: string (ISO 8601 Format),
        ///   name: string,
        ///   description: string,
        ///   properties: Dictionary&lt;string, AnyObject&gt;
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [Error],
        ///     innererror: {
        ///       code: string,
        ///       innererror: InnerError
        ///     }
        ///   },
        ///   traceId: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetAsync(string farmerId, string plantingDataId, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("PlantingDataClient.Get");
            scope.Start();
            try
            {
                return await _restClient.GetAsync(farmerId, plantingDataId, options).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a specified planting data resource under a particular farmer. </summary>
        /// <param name="farmerId"> ID of the associated farmer resource. </param>
        /// <param name="plantingDataId"> ID of the planting data resource. </param>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   avgPlantingRate: {
        ///     unit: string,
        ///     value: number
        ///   },
        ///   totalMaterial: Measure,
        ///   avgMaterial: Measure,
        ///   plantingProductDetails: [
        ///     {
        ///       productName: string,
        ///       area: Measure,
        ///       totalMaterial: Measure,
        ///       avgMaterial: Measure
        ///     }
        ///   ],
        ///   area: Measure,
        ///   source: string,
        ///   operationModifiedDateTime: string (ISO 8601 Format),
        ///   operationStartDateTime: string (ISO 8601 Format),
        ///   operationEndDateTime: string (ISO 8601 Format),
        ///   attachmentsLink: string,
        ///   associatedBoundaryId: string,
        ///   operationBoundaryId: string,
        ///   farmerId: string,
        ///   id: string,
        ///   eTag: string,
        ///   status: string,
        ///   createdDateTime: string (ISO 8601 Format),
        ///   modifiedDateTime: string (ISO 8601 Format),
        ///   name: string,
        ///   description: string,
        ///   properties: Dictionary&lt;string, AnyObject&gt;
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [Error],
        ///     innererror: {
        ///       code: string,
        ///       innererror: InnerError
        ///     }
        ///   },
        ///   traceId: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Response Get(string farmerId, string plantingDataId, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("PlantingDataClient.Get");
            scope.Start();
            try
            {
                return _restClient.Get(farmerId, plantingDataId, options);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates or updates an planting data resource under a particular farmer. </summary>
        /// <param name="farmerId"> ID of the associated farmer. </param>
        /// <param name="plantingDataId"> ID of the planting data resource. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   avgPlantingRate: {
        ///     unit: string,
        ///     value: number
        ///   },
        ///   totalMaterial: Measure,
        ///   avgMaterial: Measure,
        ///   plantingProductDetails: [
        ///     {
        ///       productName: string,
        ///       area: Measure,
        ///       totalMaterial: Measure,
        ///       avgMaterial: Measure
        ///     }
        ///   ],
        ///   area: Measure,
        ///   source: string,
        ///   operationModifiedDateTime: string (ISO 8601 Format),
        ///   operationStartDateTime: string (ISO 8601 Format),
        ///   operationEndDateTime: string (ISO 8601 Format),
        ///   attachmentsLink: string,
        ///   associatedBoundaryId: string,
        ///   operationBoundaryId: string,
        ///   farmerId: string,
        ///   id: string,
        ///   eTag: string,
        ///   status: string,
        ///   createdDateTime: string (ISO 8601 Format),
        ///   modifiedDateTime: string (ISO 8601 Format),
        ///   name: string,
        ///   description: string,
        ///   properties: Dictionary&lt;string, AnyObject&gt;
        /// }
        /// </code>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   avgPlantingRate: {
        ///     unit: string,
        ///     value: number
        ///   },
        ///   totalMaterial: Measure,
        ///   avgMaterial: Measure,
        ///   plantingProductDetails: [
        ///     {
        ///       productName: string,
        ///       area: Measure,
        ///       totalMaterial: Measure,
        ///       avgMaterial: Measure
        ///     }
        ///   ],
        ///   area: Measure,
        ///   source: string,
        ///   operationModifiedDateTime: string (ISO 8601 Format),
        ///   operationStartDateTime: string (ISO 8601 Format),
        ///   operationEndDateTime: string (ISO 8601 Format),
        ///   attachmentsLink: string,
        ///   associatedBoundaryId: string,
        ///   operationBoundaryId: string,
        ///   farmerId: string,
        ///   id: string,
        ///   eTag: string,
        ///   status: string,
        ///   createdDateTime: string (ISO 8601 Format),
        ///   modifiedDateTime: string (ISO 8601 Format),
        ///   name: string,
        ///   description: string,
        ///   properties: Dictionary&lt;string, AnyObject&gt;
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [Error],
        ///     innererror: {
        ///       code: string,
        ///       innererror: InnerError
        ///     }
        ///   },
        ///   traceId: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual async Task<Response> CreateOrUpdateAsync(string farmerId, string plantingDataId, RequestContent content, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("PlantingDataClient.CreateOrUpdate");
            scope.Start();
            try
            {
                return await _restClient.CreateOrUpdateAsync(farmerId, plantingDataId, content, options).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates or updates an planting data resource under a particular farmer. </summary>
        /// <param name="farmerId"> ID of the associated farmer. </param>
        /// <param name="plantingDataId"> ID of the planting data resource. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   avgPlantingRate: {
        ///     unit: string,
        ///     value: number
        ///   },
        ///   totalMaterial: Measure,
        ///   avgMaterial: Measure,
        ///   plantingProductDetails: [
        ///     {
        ///       productName: string,
        ///       area: Measure,
        ///       totalMaterial: Measure,
        ///       avgMaterial: Measure
        ///     }
        ///   ],
        ///   area: Measure,
        ///   source: string,
        ///   operationModifiedDateTime: string (ISO 8601 Format),
        ///   operationStartDateTime: string (ISO 8601 Format),
        ///   operationEndDateTime: string (ISO 8601 Format),
        ///   attachmentsLink: string,
        ///   associatedBoundaryId: string,
        ///   operationBoundaryId: string,
        ///   farmerId: string,
        ///   id: string,
        ///   eTag: string,
        ///   status: string,
        ///   createdDateTime: string (ISO 8601 Format),
        ///   modifiedDateTime: string (ISO 8601 Format),
        ///   name: string,
        ///   description: string,
        ///   properties: Dictionary&lt;string, AnyObject&gt;
        /// }
        /// </code>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   avgPlantingRate: {
        ///     unit: string,
        ///     value: number
        ///   },
        ///   totalMaterial: Measure,
        ///   avgMaterial: Measure,
        ///   plantingProductDetails: [
        ///     {
        ///       productName: string,
        ///       area: Measure,
        ///       totalMaterial: Measure,
        ///       avgMaterial: Measure
        ///     }
        ///   ],
        ///   area: Measure,
        ///   source: string,
        ///   operationModifiedDateTime: string (ISO 8601 Format),
        ///   operationStartDateTime: string (ISO 8601 Format),
        ///   operationEndDateTime: string (ISO 8601 Format),
        ///   attachmentsLink: string,
        ///   associatedBoundaryId: string,
        ///   operationBoundaryId: string,
        ///   farmerId: string,
        ///   id: string,
        ///   eTag: string,
        ///   status: string,
        ///   createdDateTime: string (ISO 8601 Format),
        ///   modifiedDateTime: string (ISO 8601 Format),
        ///   name: string,
        ///   description: string,
        ///   properties: Dictionary&lt;string, AnyObject&gt;
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [Error],
        ///     innererror: {
        ///       code: string,
        ///       innererror: InnerError
        ///     }
        ///   },
        ///   traceId: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Response CreateOrUpdate(string farmerId, string plantingDataId, RequestContent content, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("PlantingDataClient.CreateOrUpdate");
            scope.Start();
            try
            {
                return _restClient.CreateOrUpdate(farmerId, plantingDataId, content, options);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a specified planting data resource under a particular farmer. </summary>
        /// <param name="farmerId"> ID of the associated farmer resource. </param>
        /// <param name="plantingDataId"> ID of the planting data. </param>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [Error],
        ///     innererror: {
        ///       code: string,
        ///       innererror: InnerError
        ///     }
        ///   },
        ///   traceId: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual async Task<Response> DeleteAsync(string farmerId, string plantingDataId, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("PlantingDataClient.Delete");
            scope.Start();
            try
            {
                return await _restClient.DeleteAsync(farmerId, plantingDataId, options).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a specified planting data resource under a particular farmer. </summary>
        /// <param name="farmerId"> ID of the associated farmer resource. </param>
        /// <param name="plantingDataId"> ID of the planting data. </param>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [Error],
        ///     innererror: {
        ///       code: string,
        ///       innererror: InnerError
        ///     }
        ///   },
        ///   traceId: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Response Delete(string farmerId, string plantingDataId, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("PlantingDataClient.Delete");
            scope.Start();
            try
            {
                return _restClient.Delete(farmerId, plantingDataId, options);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a paginated list of planting data resources under a particular farm. </summary>
        /// <param name="farmerId"> ID of the associated farmer. </param>
        /// <param name="minAvgPlantingRate"> Minimum AvgPlantingRate value(inclusive). </param>
        /// <param name="maxAvgPlantingRate"> Maximum AvgPlantingRate value (inclusive). </param>
        /// <param name="minTotalMaterial"> Minimum TotalMaterial value(inclusive). </param>
        /// <param name="maxTotalMaterial"> Maximum TotalMaterial value (inclusive). </param>
        /// <param name="minAvgMaterial"> Minimum AvgMaterial value(inclusive). </param>
        /// <param name="maxAvgMaterial"> Maximum AvgMaterial value (inclusive). </param>
        /// <param name="sources"> Sources of the operation data. </param>
        /// <param name="associatedBoundaryIds"> Boundary IDs associated with operation data. </param>
        /// <param name="operationBoundaryIds"> Operation boundary IDs associated with operation data. </param>
        /// <param name="minOperationStartDateTime"> Minimum start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="maxOperationStartDateTime"> Maximum start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="minOperationEndDateTime"> Minimum end date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="maxOperationEndDateTime"> Maximum end date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="minOperationModifiedDateTime"> Minimum modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="maxOperationModifiedDateTime"> Maximum modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="minArea"> Minimum area for which operation was applied (inclusive). </param>
        /// <param name="maxArea"> Maximum area for which operation was applied (inclusive). </param>
        /// <param name="ids"> Ids of the resource. </param>
        /// <param name="names"> Names of the resource. </param>
        /// <param name="propertyFilters">
        /// Filters on key-value pairs within the Properties object.
        /// eg. &quot;{testKey} eq {testValue}&quot;.
        /// </param>
        /// <param name="statuses"> Statuses of the resource. </param>
        /// <param name="minCreatedDateTime"> Minimum creation date of resource (inclusive). </param>
        /// <param name="maxCreatedDateTime"> Maximum creation date of resource (inclusive). </param>
        /// <param name="minLastModifiedDateTime"> Minimum last modified date of resource (inclusive). </param>
        /// <param name="maxLastModifiedDateTime"> Maximum last modified date of resource (inclusive). </param>
        /// <param name="maxPageSize">
        /// Maximum number of items needed (inclusive).
        /// Minimum = 10, Maximum = 1000, Default value = 50.
        /// </param>
        /// <param name="skipToken"> Skip token for getting next set of results. </param>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       avgPlantingRate: {
        ///         unit: string,
        ///         value: number
        ///       },
        ///       totalMaterial: Measure,
        ///       avgMaterial: Measure,
        ///       plantingProductDetails: [
        ///         {
        ///           productName: string,
        ///           area: Measure,
        ///           totalMaterial: Measure,
        ///           avgMaterial: Measure
        ///         }
        ///       ],
        ///       area: Measure,
        ///       source: string,
        ///       operationModifiedDateTime: string (ISO 8601 Format),
        ///       operationStartDateTime: string (ISO 8601 Format),
        ///       operationEndDateTime: string (ISO 8601 Format),
        ///       attachmentsLink: string,
        ///       associatedBoundaryId: string,
        ///       operationBoundaryId: string,
        ///       farmerId: string,
        ///       id: string,
        ///       eTag: string,
        ///       status: string,
        ///       createdDateTime: string (ISO 8601 Format),
        ///       modifiedDateTime: string (ISO 8601 Format),
        ///       name: string,
        ///       description: string,
        ///       properties: Dictionary&lt;string, AnyObject&gt;
        ///     }
        ///   ],
        ///   $skipToken: string,
        ///   nextLink: string
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [Error],
        ///     innererror: {
        ///       code: string,
        ///       innererror: InnerError
        ///     }
        ///   },
        ///   traceId: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual AsyncPageable<BinaryData> ListByFarmerIdAsync(string farmerId, double? minAvgPlantingRate = null, double? maxAvgPlantingRate = null, double? minTotalMaterial = null, double? maxTotalMaterial = null, double? minAvgMaterial = null, double? maxAvgMaterial = null, IEnumerable<string> sources = null, IEnumerable<string> associatedBoundaryIds = null, IEnumerable<string> operationBoundaryIds = null, DateTimeOffset? minOperationStartDateTime = null, DateTimeOffset? maxOperationStartDateTime = null, DateTimeOffset? minOperationEndDateTime = null, DateTimeOffset? maxOperationEndDateTime = null, DateTimeOffset? minOperationModifiedDateTime = null, DateTimeOffset? maxOperationModifiedDateTime = null, double? minArea = null, double? maxArea = null, IEnumerable<string> ids = null, IEnumerable<string> names = null, IEnumerable<string> propertyFilters = null, IEnumerable<string> statuses = null, DateTimeOffset? minCreatedDateTime = null, DateTimeOffset? maxCreatedDateTime = null, DateTimeOffset? minLastModifiedDateTime = null, DateTimeOffset? maxLastModifiedDateTime = null, int? maxPageSize = null, string skipToken = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            var sourcesValues = sources.ToArray();
            var associatedBoundaryIdsValues = associatedBoundaryIds.ToArray();
            var operationBoundaryIdsValues = operationBoundaryIds.ToArray();
            var idsValues = ids.ToArray();
            var namesValues = names.ToArray();
            var propertyFiltersValues = propertyFilters.ToArray();
            var statusesValues = statuses.ToArray();
            async Task<Page<BinaryData>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PlantingDataClient.ListByFarmerId");
                scope.Start();
                try
                {
                    Response response = await _restClient.ListByFarmerIdAsync(farmerId, minAvgPlantingRate, maxAvgPlantingRate, minTotalMaterial, maxTotalMaterial, minAvgMaterial, maxAvgMaterial, sourcesValues, associatedBoundaryIdsValues, operationBoundaryIdsValues, minOperationStartDateTime, maxOperationStartDateTime, minOperationEndDateTime, maxOperationEndDateTime, minOperationModifiedDateTime, maxOperationModifiedDateTime, minArea, maxArea, idsValues, namesValues, propertyFiltersValues, statusesValues, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken, options).ConfigureAwait(false);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "value", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            async Task<Page<BinaryData>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PlantingDataClient.ListByFarmerId");
                scope.Start();
                try
                {
                    Response response = await _restClient.ListByFarmerIdNextPageAsync(nextLink, farmerId, minAvgPlantingRate, maxAvgPlantingRate, minTotalMaterial, maxTotalMaterial, minAvgMaterial, maxAvgMaterial, sourcesValues, associatedBoundaryIdsValues, operationBoundaryIdsValues, minOperationStartDateTime, maxOperationStartDateTime, minOperationEndDateTime, maxOperationEndDateTime, minOperationModifiedDateTime, maxOperationModifiedDateTime, minArea, maxArea, idsValues, namesValues, propertyFiltersValues, statusesValues, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken, options).ConfigureAwait(false);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "value", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Returns a paginated list of planting data resources under a particular farm. </summary>
        /// <param name="farmerId"> ID of the associated farmer. </param>
        /// <param name="minAvgPlantingRate"> Minimum AvgPlantingRate value(inclusive). </param>
        /// <param name="maxAvgPlantingRate"> Maximum AvgPlantingRate value (inclusive). </param>
        /// <param name="minTotalMaterial"> Minimum TotalMaterial value(inclusive). </param>
        /// <param name="maxTotalMaterial"> Maximum TotalMaterial value (inclusive). </param>
        /// <param name="minAvgMaterial"> Minimum AvgMaterial value(inclusive). </param>
        /// <param name="maxAvgMaterial"> Maximum AvgMaterial value (inclusive). </param>
        /// <param name="sources"> Sources of the operation data. </param>
        /// <param name="associatedBoundaryIds"> Boundary IDs associated with operation data. </param>
        /// <param name="operationBoundaryIds"> Operation boundary IDs associated with operation data. </param>
        /// <param name="minOperationStartDateTime"> Minimum start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="maxOperationStartDateTime"> Maximum start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="minOperationEndDateTime"> Minimum end date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="maxOperationEndDateTime"> Maximum end date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="minOperationModifiedDateTime"> Minimum modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="maxOperationModifiedDateTime"> Maximum modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="minArea"> Minimum area for which operation was applied (inclusive). </param>
        /// <param name="maxArea"> Maximum area for which operation was applied (inclusive). </param>
        /// <param name="ids"> Ids of the resource. </param>
        /// <param name="names"> Names of the resource. </param>
        /// <param name="propertyFilters">
        /// Filters on key-value pairs within the Properties object.
        /// eg. &quot;{testKey} eq {testValue}&quot;.
        /// </param>
        /// <param name="statuses"> Statuses of the resource. </param>
        /// <param name="minCreatedDateTime"> Minimum creation date of resource (inclusive). </param>
        /// <param name="maxCreatedDateTime"> Maximum creation date of resource (inclusive). </param>
        /// <param name="minLastModifiedDateTime"> Minimum last modified date of resource (inclusive). </param>
        /// <param name="maxLastModifiedDateTime"> Maximum last modified date of resource (inclusive). </param>
        /// <param name="maxPageSize">
        /// Maximum number of items needed (inclusive).
        /// Minimum = 10, Maximum = 1000, Default value = 50.
        /// </param>
        /// <param name="skipToken"> Skip token for getting next set of results. </param>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       avgPlantingRate: {
        ///         unit: string,
        ///         value: number
        ///       },
        ///       totalMaterial: Measure,
        ///       avgMaterial: Measure,
        ///       plantingProductDetails: [
        ///         {
        ///           productName: string,
        ///           area: Measure,
        ///           totalMaterial: Measure,
        ///           avgMaterial: Measure
        ///         }
        ///       ],
        ///       area: Measure,
        ///       source: string,
        ///       operationModifiedDateTime: string (ISO 8601 Format),
        ///       operationStartDateTime: string (ISO 8601 Format),
        ///       operationEndDateTime: string (ISO 8601 Format),
        ///       attachmentsLink: string,
        ///       associatedBoundaryId: string,
        ///       operationBoundaryId: string,
        ///       farmerId: string,
        ///       id: string,
        ///       eTag: string,
        ///       status: string,
        ///       createdDateTime: string (ISO 8601 Format),
        ///       modifiedDateTime: string (ISO 8601 Format),
        ///       name: string,
        ///       description: string,
        ///       properties: Dictionary&lt;string, AnyObject&gt;
        ///     }
        ///   ],
        ///   $skipToken: string,
        ///   nextLink: string
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [Error],
        ///     innererror: {
        ///       code: string,
        ///       innererror: InnerError
        ///     }
        ///   },
        ///   traceId: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Pageable<BinaryData> ListByFarmerId(string farmerId, double? minAvgPlantingRate = null, double? maxAvgPlantingRate = null, double? minTotalMaterial = null, double? maxTotalMaterial = null, double? minAvgMaterial = null, double? maxAvgMaterial = null, IEnumerable<string> sources = null, IEnumerable<string> associatedBoundaryIds = null, IEnumerable<string> operationBoundaryIds = null, DateTimeOffset? minOperationStartDateTime = null, DateTimeOffset? maxOperationStartDateTime = null, DateTimeOffset? minOperationEndDateTime = null, DateTimeOffset? maxOperationEndDateTime = null, DateTimeOffset? minOperationModifiedDateTime = null, DateTimeOffset? maxOperationModifiedDateTime = null, double? minArea = null, double? maxArea = null, IEnumerable<string> ids = null, IEnumerable<string> names = null, IEnumerable<string> propertyFilters = null, IEnumerable<string> statuses = null, DateTimeOffset? minCreatedDateTime = null, DateTimeOffset? maxCreatedDateTime = null, DateTimeOffset? minLastModifiedDateTime = null, DateTimeOffset? maxLastModifiedDateTime = null, int? maxPageSize = null, string skipToken = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            var sourcesValues = sources.ToArray();
            var associatedBoundaryIdsValues = associatedBoundaryIds.ToArray();
            var operationBoundaryIdsValues = operationBoundaryIds.ToArray();
            var idsValues = ids.ToArray();
            var namesValues = names.ToArray();
            var propertyFiltersValues = propertyFilters.ToArray();
            var statusesValues = statuses.ToArray();
            Page<BinaryData> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PlantingDataClient.ListByFarmerId");
                scope.Start();
                try
                {
                    Response response = _restClient.ListByFarmerId(farmerId, minAvgPlantingRate, maxAvgPlantingRate, minTotalMaterial, maxTotalMaterial, minAvgMaterial, maxAvgMaterial, sourcesValues, associatedBoundaryIdsValues, operationBoundaryIdsValues, minOperationStartDateTime, maxOperationStartDateTime, minOperationEndDateTime, maxOperationEndDateTime, minOperationModifiedDateTime, maxOperationModifiedDateTime, minArea, maxArea, idsValues, namesValues, propertyFiltersValues, statusesValues, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken, options);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "value", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            Page<BinaryData> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PlantingDataClient.ListByFarmerId");
                scope.Start();
                try
                {
                    Response response = _restClient.ListByFarmerIdNextPage(nextLink, farmerId, minAvgPlantingRate, maxAvgPlantingRate, minTotalMaterial, maxTotalMaterial, minAvgMaterial, maxAvgMaterial, sourcesValues, associatedBoundaryIdsValues, operationBoundaryIdsValues, minOperationStartDateTime, maxOperationStartDateTime, minOperationEndDateTime, maxOperationEndDateTime, minOperationModifiedDateTime, maxOperationModifiedDateTime, minArea, maxArea, idsValues, namesValues, propertyFiltersValues, statusesValues, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken, options);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "value", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Returns a paginated list of planting data resources across all farmers. </summary>
        /// <param name="minAvgPlantingRate"> Minimum AvgPlantingRate value(inclusive). </param>
        /// <param name="maxAvgPlantingRate"> Maximum AvgPlantingRate value (inclusive). </param>
        /// <param name="minTotalMaterial"> Minimum TotalMaterial value(inclusive). </param>
        /// <param name="maxTotalMaterial"> Maximum TotalMaterial value (inclusive). </param>
        /// <param name="minAvgMaterial"> Minimum AvgMaterial value(inclusive). </param>
        /// <param name="maxAvgMaterial"> Maximum AvgMaterial value (inclusive). </param>
        /// <param name="sources"> Sources of the operation data. </param>
        /// <param name="associatedBoundaryIds"> Boundary IDs associated with operation data. </param>
        /// <param name="operationBoundaryIds"> Operation boundary IDs associated with operation data. </param>
        /// <param name="minOperationStartDateTime"> Minimum start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="maxOperationStartDateTime"> Maximum start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="minOperationEndDateTime"> Minimum end date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="maxOperationEndDateTime"> Maximum end date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="minOperationModifiedDateTime"> Minimum modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="maxOperationModifiedDateTime"> Maximum modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="minArea"> Minimum area for which operation was applied (inclusive). </param>
        /// <param name="maxArea"> Maximum area for which operation was applied (inclusive). </param>
        /// <param name="ids"> Ids of the resource. </param>
        /// <param name="names"> Names of the resource. </param>
        /// <param name="propertyFilters">
        /// Filters on key-value pairs within the Properties object.
        /// eg. &quot;{testKey} eq {testValue}&quot;.
        /// </param>
        /// <param name="statuses"> Statuses of the resource. </param>
        /// <param name="minCreatedDateTime"> Minimum creation date of resource (inclusive). </param>
        /// <param name="maxCreatedDateTime"> Maximum creation date of resource (inclusive). </param>
        /// <param name="minLastModifiedDateTime"> Minimum last modified date of resource (inclusive). </param>
        /// <param name="maxLastModifiedDateTime"> Maximum last modified date of resource (inclusive). </param>
        /// <param name="maxPageSize">
        /// Maximum number of items needed (inclusive).
        /// Minimum = 10, Maximum = 1000, Default value = 50.
        /// </param>
        /// <param name="skipToken"> Skip token for getting next set of results. </param>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       avgPlantingRate: {
        ///         unit: string,
        ///         value: number
        ///       },
        ///       totalMaterial: Measure,
        ///       avgMaterial: Measure,
        ///       plantingProductDetails: [
        ///         {
        ///           productName: string,
        ///           area: Measure,
        ///           totalMaterial: Measure,
        ///           avgMaterial: Measure
        ///         }
        ///       ],
        ///       area: Measure,
        ///       source: string,
        ///       operationModifiedDateTime: string (ISO 8601 Format),
        ///       operationStartDateTime: string (ISO 8601 Format),
        ///       operationEndDateTime: string (ISO 8601 Format),
        ///       attachmentsLink: string,
        ///       associatedBoundaryId: string,
        ///       operationBoundaryId: string,
        ///       farmerId: string,
        ///       id: string,
        ///       eTag: string,
        ///       status: string,
        ///       createdDateTime: string (ISO 8601 Format),
        ///       modifiedDateTime: string (ISO 8601 Format),
        ///       name: string,
        ///       description: string,
        ///       properties: Dictionary&lt;string, AnyObject&gt;
        ///     }
        ///   ],
        ///   $skipToken: string,
        ///   nextLink: string
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [Error],
        ///     innererror: {
        ///       code: string,
        ///       innererror: InnerError
        ///     }
        ///   },
        ///   traceId: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual AsyncPageable<BinaryData> ListAsync(double? minAvgPlantingRate = null, double? maxAvgPlantingRate = null, double? minTotalMaterial = null, double? maxTotalMaterial = null, double? minAvgMaterial = null, double? maxAvgMaterial = null, IEnumerable<string> sources = null, IEnumerable<string> associatedBoundaryIds = null, IEnumerable<string> operationBoundaryIds = null, DateTimeOffset? minOperationStartDateTime = null, DateTimeOffset? maxOperationStartDateTime = null, DateTimeOffset? minOperationEndDateTime = null, DateTimeOffset? maxOperationEndDateTime = null, DateTimeOffset? minOperationModifiedDateTime = null, DateTimeOffset? maxOperationModifiedDateTime = null, double? minArea = null, double? maxArea = null, IEnumerable<string> ids = null, IEnumerable<string> names = null, IEnumerable<string> propertyFilters = null, IEnumerable<string> statuses = null, DateTimeOffset? minCreatedDateTime = null, DateTimeOffset? maxCreatedDateTime = null, DateTimeOffset? minLastModifiedDateTime = null, DateTimeOffset? maxLastModifiedDateTime = null, int? maxPageSize = null, string skipToken = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            var sourcesValues = sources.ToArray();
            var associatedBoundaryIdsValues = associatedBoundaryIds.ToArray();
            var operationBoundaryIdsValues = operationBoundaryIds.ToArray();
            var idsValues = ids.ToArray();
            var namesValues = names.ToArray();
            var propertyFiltersValues = propertyFilters.ToArray();
            var statusesValues = statuses.ToArray();
            async Task<Page<BinaryData>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PlantingDataClient.List");
                scope.Start();
                try
                {
                    Response response = await _restClient.ListAsync(minAvgPlantingRate, maxAvgPlantingRate, minTotalMaterial, maxTotalMaterial, minAvgMaterial, maxAvgMaterial, sourcesValues, associatedBoundaryIdsValues, operationBoundaryIdsValues, minOperationStartDateTime, maxOperationStartDateTime, minOperationEndDateTime, maxOperationEndDateTime, minOperationModifiedDateTime, maxOperationModifiedDateTime, minArea, maxArea, idsValues, namesValues, propertyFiltersValues, statusesValues, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken, options).ConfigureAwait(false);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "value", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            async Task<Page<BinaryData>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PlantingDataClient.List");
                scope.Start();
                try
                {
                    Response response = await _restClient.ListNextPageAsync(nextLink, minAvgPlantingRate, maxAvgPlantingRate, minTotalMaterial, maxTotalMaterial, minAvgMaterial, maxAvgMaterial, sourcesValues, associatedBoundaryIdsValues, operationBoundaryIdsValues, minOperationStartDateTime, maxOperationStartDateTime, minOperationEndDateTime, maxOperationEndDateTime, minOperationModifiedDateTime, maxOperationModifiedDateTime, minArea, maxArea, idsValues, namesValues, propertyFiltersValues, statusesValues, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken, options).ConfigureAwait(false);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "value", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Returns a paginated list of planting data resources across all farmers. </summary>
        /// <param name="minAvgPlantingRate"> Minimum AvgPlantingRate value(inclusive). </param>
        /// <param name="maxAvgPlantingRate"> Maximum AvgPlantingRate value (inclusive). </param>
        /// <param name="minTotalMaterial"> Minimum TotalMaterial value(inclusive). </param>
        /// <param name="maxTotalMaterial"> Maximum TotalMaterial value (inclusive). </param>
        /// <param name="minAvgMaterial"> Minimum AvgMaterial value(inclusive). </param>
        /// <param name="maxAvgMaterial"> Maximum AvgMaterial value (inclusive). </param>
        /// <param name="sources"> Sources of the operation data. </param>
        /// <param name="associatedBoundaryIds"> Boundary IDs associated with operation data. </param>
        /// <param name="operationBoundaryIds"> Operation boundary IDs associated with operation data. </param>
        /// <param name="minOperationStartDateTime"> Minimum start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="maxOperationStartDateTime"> Maximum start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="minOperationEndDateTime"> Minimum end date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="maxOperationEndDateTime"> Maximum end date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="minOperationModifiedDateTime"> Minimum modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="maxOperationModifiedDateTime"> Maximum modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="minArea"> Minimum area for which operation was applied (inclusive). </param>
        /// <param name="maxArea"> Maximum area for which operation was applied (inclusive). </param>
        /// <param name="ids"> Ids of the resource. </param>
        /// <param name="names"> Names of the resource. </param>
        /// <param name="propertyFilters">
        /// Filters on key-value pairs within the Properties object.
        /// eg. &quot;{testKey} eq {testValue}&quot;.
        /// </param>
        /// <param name="statuses"> Statuses of the resource. </param>
        /// <param name="minCreatedDateTime"> Minimum creation date of resource (inclusive). </param>
        /// <param name="maxCreatedDateTime"> Maximum creation date of resource (inclusive). </param>
        /// <param name="minLastModifiedDateTime"> Minimum last modified date of resource (inclusive). </param>
        /// <param name="maxLastModifiedDateTime"> Maximum last modified date of resource (inclusive). </param>
        /// <param name="maxPageSize">
        /// Maximum number of items needed (inclusive).
        /// Minimum = 10, Maximum = 1000, Default value = 50.
        /// </param>
        /// <param name="skipToken"> Skip token for getting next set of results. </param>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       avgPlantingRate: {
        ///         unit: string,
        ///         value: number
        ///       },
        ///       totalMaterial: Measure,
        ///       avgMaterial: Measure,
        ///       plantingProductDetails: [
        ///         {
        ///           productName: string,
        ///           area: Measure,
        ///           totalMaterial: Measure,
        ///           avgMaterial: Measure
        ///         }
        ///       ],
        ///       area: Measure,
        ///       source: string,
        ///       operationModifiedDateTime: string (ISO 8601 Format),
        ///       operationStartDateTime: string (ISO 8601 Format),
        ///       operationEndDateTime: string (ISO 8601 Format),
        ///       attachmentsLink: string,
        ///       associatedBoundaryId: string,
        ///       operationBoundaryId: string,
        ///       farmerId: string,
        ///       id: string,
        ///       eTag: string,
        ///       status: string,
        ///       createdDateTime: string (ISO 8601 Format),
        ///       modifiedDateTime: string (ISO 8601 Format),
        ///       name: string,
        ///       description: string,
        ///       properties: Dictionary&lt;string, AnyObject&gt;
        ///     }
        ///   ],
        ///   $skipToken: string,
        ///   nextLink: string
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [Error],
        ///     innererror: {
        ///       code: string,
        ///       innererror: InnerError
        ///     }
        ///   },
        ///   traceId: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Pageable<BinaryData> List(double? minAvgPlantingRate = null, double? maxAvgPlantingRate = null, double? minTotalMaterial = null, double? maxTotalMaterial = null, double? minAvgMaterial = null, double? maxAvgMaterial = null, IEnumerable<string> sources = null, IEnumerable<string> associatedBoundaryIds = null, IEnumerable<string> operationBoundaryIds = null, DateTimeOffset? minOperationStartDateTime = null, DateTimeOffset? maxOperationStartDateTime = null, DateTimeOffset? minOperationEndDateTime = null, DateTimeOffset? maxOperationEndDateTime = null, DateTimeOffset? minOperationModifiedDateTime = null, DateTimeOffset? maxOperationModifiedDateTime = null, double? minArea = null, double? maxArea = null, IEnumerable<string> ids = null, IEnumerable<string> names = null, IEnumerable<string> propertyFilters = null, IEnumerable<string> statuses = null, DateTimeOffset? minCreatedDateTime = null, DateTimeOffset? maxCreatedDateTime = null, DateTimeOffset? minLastModifiedDateTime = null, DateTimeOffset? maxLastModifiedDateTime = null, int? maxPageSize = null, string skipToken = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            var sourcesValues = sources.ToArray();
            var associatedBoundaryIdsValues = associatedBoundaryIds.ToArray();
            var operationBoundaryIdsValues = operationBoundaryIds.ToArray();
            var idsValues = ids.ToArray();
            var namesValues = names.ToArray();
            var propertyFiltersValues = propertyFilters.ToArray();
            var statusesValues = statuses.ToArray();
            Page<BinaryData> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PlantingDataClient.List");
                scope.Start();
                try
                {
                    Response response = _restClient.List(minAvgPlantingRate, maxAvgPlantingRate, minTotalMaterial, maxTotalMaterial, minAvgMaterial, maxAvgMaterial, sourcesValues, associatedBoundaryIdsValues, operationBoundaryIdsValues, minOperationStartDateTime, maxOperationStartDateTime, minOperationEndDateTime, maxOperationEndDateTime, minOperationModifiedDateTime, maxOperationModifiedDateTime, minArea, maxArea, idsValues, namesValues, propertyFiltersValues, statusesValues, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken, options);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "value", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            Page<BinaryData> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("PlantingDataClient.List");
                scope.Start();
                try
                {
                    Response response = _restClient.ListNextPage(nextLink, minAvgPlantingRate, maxAvgPlantingRate, minTotalMaterial, maxTotalMaterial, minAvgMaterial, maxAvgMaterial, sourcesValues, associatedBoundaryIdsValues, operationBoundaryIdsValues, minOperationStartDateTime, maxOperationStartDateTime, minOperationEndDateTime, maxOperationEndDateTime, minOperationModifiedDateTime, maxOperationModifiedDateTime, minArea, maxArea, idsValues, namesValues, propertyFiltersValues, statusesValues, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken, options);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "value", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
