// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.Verticals.AgriFood.Farming.Models
{
    /// <summary> Model factory for read-only models. </summary>
    public static partial class FarmBeatsModelFactory
    {
        /// <summary> Initializes a new instance of ApplicationData. </summary>
        /// <param name="applicationProductDetails"> Application product details. </param>
        /// <param name="avgMaterial"> Schema for storing measurement reading and unit. </param>
        /// <param name="totalMaterial"> Schema for storing measurement reading and unit. </param>
        /// <param name="area"> Schema for storing measurement reading and unit. </param>
        /// <param name="source"> Source of the operation data. </param>
        /// <param name="operationModifiedDateTime">
        /// Modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.
        /// Note: this will be specified by the source provider itself.
        /// </param>
        /// <param name="operationStartDateTime"> Start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="operationEndDateTime"> End date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="attachmentsLink"> Link for attachments. </param>
        /// <param name="associatedBoundaryId"> Optional boundary ID of the field for which operation was applied. </param>
        /// <param name="operationBoundaryId"> Optional boundary ID of the actual area for which operation was applied inside the specified field. </param>
        /// <param name="farmerId"> Farmer ID which belongs to the operation data. </param>
        /// <param name="id"> Unique resource ID. </param>
        /// <param name="eTag"> The ETag value to implement optimistic concurrency. </param>
        /// <param name="status"> Status of the resource. </param>
        /// <param name="createdDateTime"> Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="modifiedDateTime"> Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="name"> Name to identify resource. </param>
        /// <param name="description"> Textual description of the resource. </param>
        /// <param name="properties">
        /// A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
        /// </param>
        /// <returns> A new <see cref="Models.ApplicationData"/> instance for mocking. </returns>
        public static ApplicationData ApplicationData(IEnumerable<ApplicationProductDetail> applicationProductDetails = null, Measure avgMaterial = null, Measure totalMaterial = null, Measure area = null, string source = null, DateTimeOffset? operationModifiedDateTime = null, DateTimeOffset? operationStartDateTime = null, DateTimeOffset? operationEndDateTime = null, string attachmentsLink = null, string associatedBoundaryId = null, string operationBoundaryId = null, string farmerId = null, string id = null, string eTag = null, string status = null, DateTimeOffset? createdDateTime = null, DateTimeOffset? modifiedDateTime = null, string name = null, string description = null, IDictionary<string, object> properties = null)
        {
            applicationProductDetails ??= new List<ApplicationProductDetail>();
            properties ??= new Dictionary<string, object>();

            return new ApplicationData(applicationProductDetails?.ToList(), avgMaterial, totalMaterial, area, source, operationModifiedDateTime, operationStartDateTime, operationEndDateTime, attachmentsLink, associatedBoundaryId, operationBoundaryId, farmerId, id, eTag, status, createdDateTime, modifiedDateTime, name, description, properties);
        }

        /// <summary> Initializes a new instance of Attachment. </summary>
        /// <param name="farmerId"> Farmer id for this attachment. </param>
        /// <param name="resourceId"> Associated Resource id for this attachment. </param>
        /// <param name="resourceType">
        /// Associated Resource type for this attachment
        /// i.e. Farmer, Farm, Field, SeasonalField, Boundary, FarmOperationApplicationData, HarvestData, TillageData, PlantingData.
        /// </param>
        /// <param name="originalFileName"> Original File Name for this attachment. </param>
        /// <param name="id"> Unique id. </param>
        /// <param name="status"> Status of the resource. </param>
        /// <param name="createdDateTime"> Date when resource was created. </param>
        /// <param name="modifiedDateTime"> Date when resource was last modified. </param>
        /// <param name="name"> Name to identify resource. </param>
        /// <param name="description"> Textual description of resource. </param>
        /// <param name="eTag"> The ETag value to implement optimistic concurrency. </param>
        /// <returns> A new <see cref="Models.Attachment"/> instance for mocking. </returns>
        public static Attachment Attachment(string farmerId = null, string resourceId = null, string resourceType = null, string originalFileName = null, string id = null, string status = null, DateTimeOffset? createdDateTime = null, DateTimeOffset? modifiedDateTime = null, string name = null, string description = null, string eTag = null)
        {
            return new Attachment(farmerId, resourceId, resourceType, originalFileName, id, status, createdDateTime, modifiedDateTime, name, description, eTag);
        }

        /// <summary> Initializes a new instance of Boundary. </summary>
        /// <param name="farmerId"> Farmer ID. </param>
        /// <param name="parentId"> ID of the parent(field or seasonalField) it belongs to. </param>
        /// <param name="geometry"> GeoJSON abstract class. </param>
        /// <param name="isPrimary"> Is the boundary primary. </param>
        /// <param name="acreage"> Boundary area in acres. </param>
        /// <param name="parentType"> Type of the parent it belongs to. </param>
        /// <param name="id"> Unique resource ID. </param>
        /// <param name="eTag"> The ETag value to implement optimistic concurrency. </param>
        /// <param name="status"> Status of the resource. </param>
        /// <param name="createdDateTime"> Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="modifiedDateTime"> Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="name"> Name to identify resource. </param>
        /// <param name="description"> Textual description of the resource. </param>
        /// <param name="properties">
        /// A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
        /// </param>
        /// <returns> A new <see cref="Models.Boundary"/> instance for mocking. </returns>
        public static Boundary Boundary(string farmerId = null, string parentId = null, GeoJsonObject geometry = null, bool? isPrimary = null, double? acreage = null, string parentType = null, string id = null, string eTag = null, string status = null, DateTimeOffset? createdDateTime = null, DateTimeOffset? modifiedDateTime = null, string name = null, string description = null, IDictionary<string, object> properties = null)
        {
            properties ??= new Dictionary<string, object>();

            return new Boundary(farmerId, parentId, geometry, isPrimary, acreage, parentType, id, eTag, status, createdDateTime, modifiedDateTime, name, description, properties);
        }

        /// <summary> Initializes a new instance of CascadeDeleteJob. </summary>
        /// <param name="farmerId"> Farmer ID. </param>
        /// <param name="resourceId"> The id of the resource. </param>
        /// <param name="resourceType"> The type of the resource. </param>
        /// <param name="id"> Unique job id. </param>
        /// <param name="status">
        /// Status of the job.
        /// Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
        /// </param>
        /// <param name="durationInSeconds"> Duration of the job in seconds. </param>
        /// <param name="message"> Status message to capture more details of the job. </param>
        /// <param name="createdDateTime"> Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="lastActionDateTime"> Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="startTime"> Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="endTime"> Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="name"> Name to identify resource. </param>
        /// <param name="description"> Textual description of the resource. </param>
        /// <param name="properties">
        /// A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
        /// </param>
        /// <returns> A new <see cref="Models.CascadeDeleteJob"/> instance for mocking. </returns>
        public static CascadeDeleteJob CascadeDeleteJob(string farmerId = null, string resourceId = null, string resourceType = null, string id = null, string status = null, double? durationInSeconds = null, string message = null, DateTimeOffset? createdDateTime = null, DateTimeOffset? lastActionDateTime = null, DateTimeOffset? startTime = null, DateTimeOffset? endTime = null, string name = null, string description = null, IReadOnlyDictionary<string, object> properties = null)
        {
            properties ??= new Dictionary<string, object>();

            return new CascadeDeleteJob(farmerId, resourceId, resourceType, id, status, durationInSeconds, message, createdDateTime, lastActionDateTime, startTime, endTime, name, description, properties);
        }

        /// <summary> Initializes a new instance of BoundaryOverlapResponse. </summary>
        /// <param name="boundaryAcreage"> Acreage of Main boundary. </param>
        /// <param name="otherBoundaryAcreage"> Acreage of other boundary. </param>
        /// <param name="intersectingAcreage"> Acreage of intersecting boundary. </param>
        /// <returns> A new <see cref="Models.BoundaryOverlapResponse"/> instance for mocking. </returns>
        public static BoundaryOverlapResponse BoundaryOverlapResponse(double? boundaryAcreage = null, double? otherBoundaryAcreage = null, double? intersectingAcreage = null)
        {
            return new BoundaryOverlapResponse(boundaryAcreage, otherBoundaryAcreage, intersectingAcreage);
        }

        /// <summary> Initializes a new instance of Crop. </summary>
        /// <param name="phenotype"> Crop phenotype. </param>
        /// <param name="id"> Unique resource ID. </param>
        /// <param name="eTag"> The ETag value to implement optimistic concurrency. </param>
        /// <param name="status"> Status of the resource. </param>
        /// <param name="createdDateTime"> Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="modifiedDateTime"> Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="name"> Name to identify resource. </param>
        /// <param name="description"> Textual description of the resource. </param>
        /// <param name="properties">
        /// A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
        /// </param>
        /// <returns> A new <see cref="Models.Crop"/> instance for mocking. </returns>
        public static Crop Crop(string phenotype = null, string id = null, string eTag = null, string status = null, DateTimeOffset? createdDateTime = null, DateTimeOffset? modifiedDateTime = null, string name = null, string description = null, IDictionary<string, object> properties = null)
        {
            properties ??= new Dictionary<string, object>();

            return new Crop(phenotype, id, eTag, status, createdDateTime, modifiedDateTime, name, description, properties);
        }

        /// <summary> Initializes a new instance of CropVariety. </summary>
        /// <param name="cropId"> ID of the crop it belongs to. </param>
        /// <param name="brand"> CropVariety Brand. </param>
        /// <param name="product"> CropVariety product. </param>
        /// <param name="id"> Unique resource ID. </param>
        /// <param name="eTag"> The ETag value to implement optimistic concurrency. </param>
        /// <param name="status"> Status of the resource. </param>
        /// <param name="createdDateTime"> Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="modifiedDateTime"> Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="name"> Name to identify resource. </param>
        /// <param name="description"> Textual description of the resource. </param>
        /// <param name="properties">
        /// A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
        /// </param>
        /// <returns> A new <see cref="Models.CropVariety"/> instance for mocking. </returns>
        public static CropVariety CropVariety(string cropId = null, string brand = null, string product = null, string id = null, string eTag = null, string status = null, DateTimeOffset? createdDateTime = null, DateTimeOffset? modifiedDateTime = null, string name = null, string description = null, IDictionary<string, object> properties = null)
        {
            properties ??= new Dictionary<string, object>();

            return new CropVariety(cropId, brand, product, id, eTag, status, createdDateTime, modifiedDateTime, name, description, properties);
        }

        /// <summary> Initializes a new instance of Farmer. </summary>
        /// <param name="id"> Unique resource ID. </param>
        /// <param name="eTag"> The ETag value to implement optimistic concurrency. </param>
        /// <param name="status"> Status of the resource. </param>
        /// <param name="createdDateTime"> Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="modifiedDateTime"> Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="name"> Name to identify resource. </param>
        /// <param name="description"> Textual description of the resource. </param>
        /// <param name="properties">
        /// A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
        /// </param>
        /// <returns> A new <see cref="Models.Farmer"/> instance for mocking. </returns>
        public static Farmer Farmer(string id = null, string eTag = null, string status = null, DateTimeOffset? createdDateTime = null, DateTimeOffset? modifiedDateTime = null, string name = null, string description = null, IDictionary<string, object> properties = null)
        {
            properties ??= new Dictionary<string, object>();

            return new Farmer(id, eTag, status, createdDateTime, modifiedDateTime, name, description, properties);
        }

        /// <summary> Initializes a new instance of FarmOperationDataIngestionJob. </summary>
        /// <param name="farmerId"> Farmer ID. </param>
        /// <param name="authProviderId"> Authentication provider ID. </param>
        /// <param name="operations"> List of operation types for which data needs to be downloaded. Available values: AllOperations, Application, Planting, Harvest, Tillage. </param>
        /// <param name="startYear"> Start Year (Minimum = 2000, Maximum = CurrentYear). </param>
        /// <param name="id"> Unique job id. </param>
        /// <param name="status">
        /// Status of the job.
        /// Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
        /// </param>
        /// <param name="durationInSeconds"> Duration of the job in seconds. </param>
        /// <param name="message"> Status message to capture more details of the job. </param>
        /// <param name="createdDateTime"> Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="lastActionDateTime"> Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="startTime"> Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="endTime"> Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="name"> Name to identify resource. </param>
        /// <param name="description"> Textual description of the resource. </param>
        /// <param name="properties">
        /// A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
        /// </param>
        /// <returns> A new <see cref="Models.FarmOperationDataIngestionJob"/> instance for mocking. </returns>
        public static FarmOperationDataIngestionJob FarmOperationDataIngestionJob(string farmerId = null, string authProviderId = null, IEnumerable<string> operations = null, int startYear = default, string id = null, string status = null, double? durationInSeconds = null, string message = null, DateTimeOffset? createdDateTime = null, DateTimeOffset? lastActionDateTime = null, DateTimeOffset? startTime = null, DateTimeOffset? endTime = null, string name = null, string description = null, IDictionary<string, object> properties = null)
        {
            operations ??= new List<string>();
            properties ??= new Dictionary<string, object>();

            return new FarmOperationDataIngestionJob(farmerId, authProviderId, operations?.ToList(), startYear, id, status, durationInSeconds, message, createdDateTime, lastActionDateTime, startTime, endTime, name, description, properties);
        }

        /// <summary> Initializes a new instance of Farm. </summary>
        /// <param name="farmerId"> Farmer ID. </param>
        /// <param name="id"> Unique resource ID. </param>
        /// <param name="eTag"> The ETag value to implement optimistic concurrency. </param>
        /// <param name="status"> Status of the resource. </param>
        /// <param name="createdDateTime"> Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="modifiedDateTime"> Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="name"> Name to identify resource. </param>
        /// <param name="description"> Textual description of the resource. </param>
        /// <param name="properties">
        /// A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
        /// </param>
        /// <returns> A new <see cref="Models.Farm"/> instance for mocking. </returns>
        public static Farm Farm(string farmerId = null, string id = null, string eTag = null, string status = null, DateTimeOffset? createdDateTime = null, DateTimeOffset? modifiedDateTime = null, string name = null, string description = null, IDictionary<string, object> properties = null)
        {
            properties ??= new Dictionary<string, object>();

            return new Farm(farmerId, id, eTag, status, createdDateTime, modifiedDateTime, name, description, properties);
        }

        /// <summary> Initializes a new instance of Field. </summary>
        /// <param name="farmId"> ID of the associated Farm. </param>
        /// <param name="farmerId"> Farmer ID. </param>
        /// <param name="primaryBoundaryId"> Primary boundary id. </param>
        /// <param name="boundaryIds"> Boundary Ids. </param>
        /// <param name="id"> Unique resource ID. </param>
        /// <param name="eTag"> The ETag value to implement optimistic concurrency. </param>
        /// <param name="status"> Status of the resource. </param>
        /// <param name="createdDateTime"> Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="modifiedDateTime"> Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="name"> Name to identify resource. </param>
        /// <param name="description"> Textual description of the resource. </param>
        /// <param name="properties">
        /// A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
        /// </param>
        /// <returns> A new <see cref="Models.Field"/> instance for mocking. </returns>
        public static Field Field(string farmId = null, string farmerId = null, string primaryBoundaryId = null, IEnumerable<string> boundaryIds = null, string id = null, string eTag = null, string status = null, DateTimeOffset? createdDateTime = null, DateTimeOffset? modifiedDateTime = null, string name = null, string description = null, IDictionary<string, object> properties = null)
        {
            boundaryIds ??= new List<string>();
            properties ??= new Dictionary<string, object>();

            return new Field(farmId, farmerId, primaryBoundaryId, boundaryIds?.ToList(), id, eTag, status, createdDateTime, modifiedDateTime, name, description, properties);
        }

        /// <summary> Initializes a new instance of HarvestData. </summary>
        /// <param name="totalYield"> Schema for storing measurement reading and unit. </param>
        /// <param name="avgYield"> Schema for storing measurement reading and unit. </param>
        /// <param name="totalWetMass"> Schema for storing measurement reading and unit. </param>
        /// <param name="avgWetMass"> Schema for storing measurement reading and unit. </param>
        /// <param name="avgMoisture"> Schema for storing measurement reading and unit. </param>
        /// <param name="avgSpeed"> Schema for storing measurement reading and unit. </param>
        /// <param name="harvestProductDetails"> Harvest product details. </param>
        /// <param name="area"> Schema for storing measurement reading and unit. </param>
        /// <param name="source"> Source of the operation data. </param>
        /// <param name="operationModifiedDateTime">
        /// Modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.
        /// Note: this will be specified by the source provider itself.
        /// </param>
        /// <param name="operationStartDateTime"> Start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="operationEndDateTime"> End date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="attachmentsLink"> Link for attachments. </param>
        /// <param name="associatedBoundaryId"> Optional boundary ID of the field for which operation was applied. </param>
        /// <param name="operationBoundaryId"> Optional boundary ID of the actual area for which operation was applied inside the specified field. </param>
        /// <param name="farmerId"> Farmer ID which belongs to the operation data. </param>
        /// <param name="id"> Unique resource ID. </param>
        /// <param name="eTag"> The ETag value to implement optimistic concurrency. </param>
        /// <param name="status"> Status of the resource. </param>
        /// <param name="createdDateTime"> Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="modifiedDateTime"> Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="name"> Name to identify resource. </param>
        /// <param name="description"> Textual description of the resource. </param>
        /// <param name="properties">
        /// A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
        /// </param>
        /// <returns> A new <see cref="Models.HarvestData"/> instance for mocking. </returns>
        public static HarvestData HarvestData(Measure totalYield = null, Measure avgYield = null, Measure totalWetMass = null, Measure avgWetMass = null, Measure avgMoisture = null, Measure avgSpeed = null, IEnumerable<HarvestProductDetail> harvestProductDetails = null, Measure area = null, string source = null, DateTimeOffset? operationModifiedDateTime = null, DateTimeOffset? operationStartDateTime = null, DateTimeOffset? operationEndDateTime = null, string attachmentsLink = null, string associatedBoundaryId = null, string operationBoundaryId = null, string farmerId = null, string id = null, string eTag = null, string status = null, DateTimeOffset? createdDateTime = null, DateTimeOffset? modifiedDateTime = null, string name = null, string description = null, IDictionary<string, object> properties = null)
        {
            harvestProductDetails ??= new List<HarvestProductDetail>();
            properties ??= new Dictionary<string, object>();

            return new HarvestData(totalYield, avgYield, totalWetMass, avgWetMass, avgMoisture, avgSpeed, harvestProductDetails?.ToList(), area, source, operationModifiedDateTime, operationStartDateTime, operationEndDateTime, attachmentsLink, associatedBoundaryId, operationBoundaryId, farmerId, id, eTag, status, createdDateTime, modifiedDateTime, name, description, properties);
        }

        /// <summary> Initializes a new instance of ImageProcessingRasterizeJob. </summary>
        /// <param name="farmerId"> Farmer ID. </param>
        /// <param name="shapefileAttachmentId"> Shapefile attachment ID. </param>
        /// <param name="shapefileColumnNames"> List of shapefile column names to create raster attachments. </param>
        /// <param name="id"> Unique job id. </param>
        /// <param name="status">
        /// Status of the job.
        /// Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
        /// </param>
        /// <param name="durationInSeconds"> Duration of the job in seconds. </param>
        /// <param name="message"> Status message to capture more details of the job. </param>
        /// <param name="createdDateTime"> Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="lastActionDateTime"> Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="startTime"> Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="endTime"> Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="name"> Name to identify resource. </param>
        /// <param name="description"> Textual description of the resource. </param>
        /// <param name="properties">
        /// A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
        /// </param>
        /// <returns> A new <see cref="Models.ImageProcessingRasterizeJob"/> instance for mocking. </returns>
        public static ImageProcessingRasterizeJob ImageProcessingRasterizeJob(string farmerId = null, string shapefileAttachmentId = null, IEnumerable<string> shapefileColumnNames = null, string id = null, string status = null, double? durationInSeconds = null, string message = null, DateTimeOffset? createdDateTime = null, DateTimeOffset? lastActionDateTime = null, DateTimeOffset? startTime = null, DateTimeOffset? endTime = null, string name = null, string description = null, IDictionary<string, object> properties = null)
        {
            shapefileColumnNames ??= new List<string>();
            properties ??= new Dictionary<string, object>();

            return new ImageProcessingRasterizeJob(farmerId, shapefileAttachmentId, shapefileColumnNames?.ToList(), id, status, durationInSeconds, message, createdDateTime, lastActionDateTime, startTime, endTime, name, description, properties);
        }

        /// <summary> Initializes a new instance of OAuthProvider. </summary>
        /// <param name="appId"> OAuth App ID for given OAuth Provider. </param>
        /// <param name="appSecret">
        /// OAuth App secret for given Provider.
        /// Note: Won&apos;t be sent in response.
        /// </param>
        /// <param name="apiKey">
        /// OAuth Api key for given Provider.
        /// Note: currently Applicable to Climate provider. Won&apos;t be sent in response.
        /// </param>
        /// <param name="isProductionApp">
        /// An optional flag to determine if the App is ready to be used for Production scenarios in the provider side or not. (Default value: false)
        /// Note: Currently applicable for JohnDeere.
        /// </param>
        /// <param name="id"> Unique OAuth provider ID. </param>
        /// <param name="eTag"> The ETag value to implement optimistic concurrency. </param>
        /// <param name="createdDateTime"> Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="modifiedDateTime"> Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="name"> Name to identify resource. </param>
        /// <param name="description"> Textual description of the resource. </param>
        /// <param name="properties">
        /// A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
        /// </param>
        /// <returns> A new <see cref="Models.OAuthProvider"/> instance for mocking. </returns>
        public static OAuthProvider OAuthProvider(string appId = null, string appSecret = null, string apiKey = null, bool? isProductionApp = null, string id = null, string eTag = null, DateTimeOffset? createdDateTime = null, DateTimeOffset? modifiedDateTime = null, string name = null, string description = null, IDictionary<string, object> properties = null)
        {
            properties ??= new Dictionary<string, object>();

            return new OAuthProvider(appId, appSecret, apiKey, isProductionApp, id, eTag, createdDateTime, modifiedDateTime, name, description, properties);
        }

        /// <summary> Initializes a new instance of OAuthToken. </summary>
        /// <param name="farmerId"> Farmer ID for this OAuth config. </param>
        /// <param name="authProviderId"> ID of the OAuth provider resource containing app information. </param>
        /// <param name="isValid"> An optional flag indicating whether the token is a valid or expired (Default value: true). </param>
        /// <param name="eTag"> The ETag value to implement optimistic concurrency. </param>
        /// <param name="createdDateTime"> Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="modifiedDateTime"> Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <returns> A new <see cref="Models.OAuthToken"/> instance for mocking. </returns>
        public static OAuthToken OAuthToken(string farmerId = null, string authProviderId = null, bool? isValid = null, string eTag = null, DateTimeOffset? createdDateTime = null, DateTimeOffset? modifiedDateTime = null)
        {
            return new OAuthToken(farmerId, authProviderId, isValid, eTag, createdDateTime, modifiedDateTime);
        }

        /// <summary> Initializes a new instance of PlantingData. </summary>
        /// <param name="avgPlantingRate"> Schema for storing measurement reading and unit. </param>
        /// <param name="totalMaterial"> Schema for storing measurement reading and unit. </param>
        /// <param name="avgMaterial"> Schema for storing measurement reading and unit. </param>
        /// <param name="plantingProductDetails"> Planting product details. </param>
        /// <param name="area"> Schema for storing measurement reading and unit. </param>
        /// <param name="source"> Source of the operation data. </param>
        /// <param name="operationModifiedDateTime">
        /// Modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.
        /// Note: this will be specified by the source provider itself.
        /// </param>
        /// <param name="operationStartDateTime"> Start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="operationEndDateTime"> End date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="attachmentsLink"> Link for attachments. </param>
        /// <param name="associatedBoundaryId"> Optional boundary ID of the field for which operation was applied. </param>
        /// <param name="operationBoundaryId"> Optional boundary ID of the actual area for which operation was applied inside the specified field. </param>
        /// <param name="farmerId"> Farmer ID which belongs to the operation data. </param>
        /// <param name="id"> Unique resource ID. </param>
        /// <param name="eTag"> The ETag value to implement optimistic concurrency. </param>
        /// <param name="status"> Status of the resource. </param>
        /// <param name="createdDateTime"> Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="modifiedDateTime"> Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="name"> Name to identify resource. </param>
        /// <param name="description"> Textual description of the resource. </param>
        /// <param name="properties">
        /// A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
        /// </param>
        /// <returns> A new <see cref="Models.PlantingData"/> instance for mocking. </returns>
        public static PlantingData PlantingData(Measure avgPlantingRate = null, Measure totalMaterial = null, Measure avgMaterial = null, IEnumerable<PlantingProductDetail> plantingProductDetails = null, Measure area = null, string source = null, DateTimeOffset? operationModifiedDateTime = null, DateTimeOffset? operationStartDateTime = null, DateTimeOffset? operationEndDateTime = null, string attachmentsLink = null, string associatedBoundaryId = null, string operationBoundaryId = null, string farmerId = null, string id = null, string eTag = null, string status = null, DateTimeOffset? createdDateTime = null, DateTimeOffset? modifiedDateTime = null, string name = null, string description = null, IDictionary<string, object> properties = null)
        {
            plantingProductDetails ??= new List<PlantingProductDetail>();
            properties ??= new Dictionary<string, object>();

            return new PlantingData(avgPlantingRate, totalMaterial, avgMaterial, plantingProductDetails?.ToList(), area, source, operationModifiedDateTime, operationStartDateTime, operationEndDateTime, attachmentsLink, associatedBoundaryId, operationBoundaryId, farmerId, id, eTag, status, createdDateTime, modifiedDateTime, name, description, properties);
        }

        /// <summary> Initializes a new instance of Scene. </summary>
        /// <param name="sceneDateTime"> Date-time of the scene, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="provider"> Data provider of the scene. </param>
        /// <param name="source"> Data source of the scene. </param>
        /// <param name="imageFiles"> Collection of image files. </param>
        /// <param name="imageFormat"> Supported image formats for scene resource. </param>
        /// <param name="cloudCoverPercentage"> Cloud cover percentage of the scene. </param>
        /// <param name="darkPixelPercentage"> Dark pixel percentage of the scene. </param>
        /// <param name="ndviMedianValue"> Median of NDVI of the scene. </param>
        /// <param name="boundaryId"> Boundary ID which belongs to the scene. </param>
        /// <param name="farmerId"> Farmer ID which belongs to the scene. </param>
        /// <param name="id"> Unique scene resource ID. </param>
        /// <param name="eTag"> The ETag value to implement optimistic concurrency. </param>
        /// <returns> A new <see cref="Models.Scene"/> instance for mocking. </returns>
        public static Scene Scene(DateTimeOffset? sceneDateTime = null, string provider = null, string source = null, IEnumerable<ImageFile> imageFiles = null, ImageFormat? imageFormat = null, double? cloudCoverPercentage = null, double? darkPixelPercentage = null, double? ndviMedianValue = null, string boundaryId = null, string farmerId = null, string id = null, string eTag = null)
        {
            imageFiles ??= new List<ImageFile>();

            return new Scene(sceneDateTime, provider, source, imageFiles?.ToList(), imageFormat, cloudCoverPercentage, darkPixelPercentage, ndviMedianValue, boundaryId, farmerId, id, eTag);
        }

        /// <summary> Initializes a new instance of ImageFile. </summary>
        /// <param name="fileLink"> Link of the image file. </param>
        /// <param name="name"> Name of the image file. </param>
        /// <param name="imageFormat"> Supported image formats for scene resource. </param>
        /// <param name="resolution"> Resolution of image file in meters. </param>
        /// <returns> A new <see cref="Models.ImageFile"/> instance for mocking. </returns>
        public static ImageFile ImageFile(string fileLink = null, string name = null, ImageFormat? imageFormat = null, double? resolution = null)
        {
            return new ImageFile(fileLink, name, imageFormat, resolution);
        }

        /// <summary> Initializes a new instance of SatelliteDataIngestionJob. </summary>
        /// <param name="farmerId"> Farmer ID. </param>
        /// <param name="boundaryId"> The id of the boundary object for which satellite data is being fetched. </param>
        /// <param name="startDateTime"> Start Date. </param>
        /// <param name="endDateTime"> End Date. </param>
        /// <param name="provider"> Provider of satellite data. </param>
        /// <param name="source"> Source of satellite data. </param>
        /// <param name="data"> Data Model for SatelliteIngestionJobRequest. </param>
        /// <param name="id"> Unique job id. </param>
        /// <param name="status">
        /// Status of the job.
        /// Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
        /// </param>
        /// <param name="durationInSeconds"> Duration of the job in seconds. </param>
        /// <param name="message"> Status message to capture more details of the job. </param>
        /// <param name="createdDateTime"> Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="lastActionDateTime"> Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="startTime"> Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="endTime"> Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="name"> Name to identify resource. </param>
        /// <param name="description"> Textual description of the resource. </param>
        /// <param name="properties">
        /// A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
        /// </param>
        /// <returns> A new <see cref="Models.SatelliteDataIngestionJob"/> instance for mocking. </returns>
        public static SatelliteDataIngestionJob SatelliteDataIngestionJob(string farmerId = null, string boundaryId = null, DateTimeOffset startDateTime = default, DateTimeOffset endDateTime = default, DataProvider? provider = null, Source? source = null, SatelliteData data = null, string id = null, string status = null, double? durationInSeconds = null, string message = null, DateTimeOffset? createdDateTime = null, DateTimeOffset? lastActionDateTime = null, DateTimeOffset? startTime = null, DateTimeOffset? endTime = null, string name = null, string description = null, IDictionary<string, object> properties = null)
        {
            properties ??= new Dictionary<string, object>();

            return new SatelliteDataIngestionJob(farmerId, boundaryId, startDateTime, endDateTime, provider, source, data, id, status, durationInSeconds, message, createdDateTime, lastActionDateTime, startTime, endTime, name, description, properties);
        }

        /// <summary> Initializes a new instance of SeasonalField. </summary>
        /// <param name="farmerId"> Farmer ID. </param>
        /// <param name="primaryBoundaryId"> Primary boundary id. </param>
        /// <param name="boundaryIds"> Boundary Ids. </param>
        /// <param name="farmId"> ID of the associated Farm. </param>
        /// <param name="fieldId"> ID of the associated Field. </param>
        /// <param name="seasonId"> ID of the season it belongs to. </param>
        /// <param name="cropVarietyIds"> CropVariety ids. </param>
        /// <param name="cropId"> ID of the crop it belongs to. </param>
        /// <param name="avgYieldValue"> Average yield value of the seasonal field. </param>
        /// <param name="avgYieldUnit"> Unit of the average yield value attribute. </param>
        /// <param name="avgSeedPopulationValue"> Average seed population value of the seasonal field. </param>
        /// <param name="avgSeedPopulationUnit"> Unit of average seed population value attribute. </param>
        /// <param name="plantingDateTime"> Planting datetime, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="id"> Unique resource ID. </param>
        /// <param name="eTag"> The ETag value to implement optimistic concurrency. </param>
        /// <param name="status"> Status of the resource. </param>
        /// <param name="createdDateTime"> Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="modifiedDateTime"> Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="name"> Name to identify resource. </param>
        /// <param name="description"> Textual description of the resource. </param>
        /// <param name="properties">
        /// A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
        /// </param>
        /// <returns> A new <see cref="Models.SeasonalField"/> instance for mocking. </returns>
        public static SeasonalField SeasonalField(string farmerId = null, string primaryBoundaryId = null, IEnumerable<string> boundaryIds = null, string farmId = null, string fieldId = null, string seasonId = null, IEnumerable<string> cropVarietyIds = null, string cropId = null, double? avgYieldValue = null, string avgYieldUnit = null, double? avgSeedPopulationValue = null, string avgSeedPopulationUnit = null, DateTimeOffset? plantingDateTime = null, string id = null, string eTag = null, string status = null, DateTimeOffset? createdDateTime = null, DateTimeOffset? modifiedDateTime = null, string name = null, string description = null, IDictionary<string, object> properties = null)
        {
            boundaryIds ??= new List<string>();
            cropVarietyIds ??= new List<string>();
            properties ??= new Dictionary<string, object>();

            return new SeasonalField(farmerId, primaryBoundaryId, boundaryIds?.ToList(), farmId, fieldId, seasonId, cropVarietyIds?.ToList(), cropId, avgYieldValue, avgYieldUnit, avgSeedPopulationValue, avgSeedPopulationUnit, plantingDateTime, id, eTag, status, createdDateTime, modifiedDateTime, name, description, properties);
        }

        /// <summary> Initializes a new instance of Season. </summary>
        /// <param name="startDateTime"> Season start datetime, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="endDateTime"> Season end datetime, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="year"> Season year. </param>
        /// <param name="id"> Unique resource ID. </param>
        /// <param name="eTag"> The ETag value to implement optimistic concurrency. </param>
        /// <param name="status"> Status of the resource. </param>
        /// <param name="createdDateTime"> Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="modifiedDateTime"> Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="name"> Name to identify resource. </param>
        /// <param name="description"> Textual description of the resource. </param>
        /// <param name="properties">
        /// A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
        /// </param>
        /// <returns> A new <see cref="Models.Season"/> instance for mocking. </returns>
        public static Season Season(DateTimeOffset? startDateTime = null, DateTimeOffset? endDateTime = null, int? year = null, string id = null, string eTag = null, string status = null, DateTimeOffset? createdDateTime = null, DateTimeOffset? modifiedDateTime = null, string name = null, string description = null, IDictionary<string, object> properties = null)
        {
            properties ??= new Dictionary<string, object>();

            return new Season(startDateTime, endDateTime, year, id, eTag, status, createdDateTime, modifiedDateTime, name, description, properties);
        }

        /// <summary> Initializes a new instance of TillageData. </summary>
        /// <param name="tillageDepth"> Schema for storing measurement reading and unit. </param>
        /// <param name="tillagePressure"> Schema for storing measurement reading and unit. </param>
        /// <param name="area"> Schema for storing measurement reading and unit. </param>
        /// <param name="source"> Source of the operation data. </param>
        /// <param name="operationModifiedDateTime">
        /// Modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.
        /// Note: this will be specified by the source provider itself.
        /// </param>
        /// <param name="operationStartDateTime"> Start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="operationEndDateTime"> End date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="attachmentsLink"> Link for attachments. </param>
        /// <param name="associatedBoundaryId"> Optional boundary ID of the field for which operation was applied. </param>
        /// <param name="operationBoundaryId"> Optional boundary ID of the actual area for which operation was applied inside the specified field. </param>
        /// <param name="farmerId"> Farmer ID which belongs to the operation data. </param>
        /// <param name="id"> Unique resource ID. </param>
        /// <param name="eTag"> The ETag value to implement optimistic concurrency. </param>
        /// <param name="status"> Status of the resource. </param>
        /// <param name="createdDateTime"> Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="modifiedDateTime"> Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="name"> Name to identify resource. </param>
        /// <param name="description"> Textual description of the resource. </param>
        /// <param name="properties">
        /// A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
        /// </param>
        /// <returns> A new <see cref="Models.TillageData"/> instance for mocking. </returns>
        public static TillageData TillageData(Measure tillageDepth = null, Measure tillagePressure = null, Measure area = null, string source = null, DateTimeOffset? operationModifiedDateTime = null, DateTimeOffset? operationStartDateTime = null, DateTimeOffset? operationEndDateTime = null, string attachmentsLink = null, string associatedBoundaryId = null, string operationBoundaryId = null, string farmerId = null, string id = null, string eTag = null, string status = null, DateTimeOffset? createdDateTime = null, DateTimeOffset? modifiedDateTime = null, string name = null, string description = null, IDictionary<string, object> properties = null)
        {
            properties ??= new Dictionary<string, object>();

            return new TillageData(tillageDepth, tillagePressure, area, source, operationModifiedDateTime, operationStartDateTime, operationEndDateTime, attachmentsLink, associatedBoundaryId, operationBoundaryId, farmerId, id, eTag, status, createdDateTime, modifiedDateTime, name, description, properties);
        }

        /// <summary> Initializes a new instance of WeatherData. </summary>
        /// <param name="farmerId"> Farmer ID. </param>
        /// <param name="boundaryId"> Boundary ID. </param>
        /// <param name="extensionId"> ID of the weather extension. </param>
        /// <param name="location"> Location model class. </param>
        /// <param name="dateTime"> Date-time of the weather data, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="unitSystemCode"> Unit System like US/SI etc. </param>
        /// <param name="extensionVersion"> Version of the weather data extension. </param>
        /// <param name="weatherDataType"> Type of weather data (forecast/historical). </param>
        /// <param name="granularity"> Granularity of weather data (daily/hourly). </param>
        /// <param name="cloudCover"> Schema for storing measurement reading and unit. </param>
        /// <param name="dewPoint"> Schema for storing measurement reading and unit. </param>
        /// <param name="growingDegreeDay"> Schema for storing measurement reading and unit. </param>
        /// <param name="precipitation"> Schema for storing measurement reading and unit. </param>
        /// <param name="pressure"> Schema for storing measurement reading and unit. </param>
        /// <param name="relativeHumidity"> Schema for storing measurement reading and unit. </param>
        /// <param name="soilMoisture"> Schema for storing measurement reading and unit. </param>
        /// <param name="soilTemperature"> Schema for storing measurement reading and unit. </param>
        /// <param name="temperature"> Schema for storing measurement reading and unit. </param>
        /// <param name="visibility"> Schema for storing measurement reading and unit. </param>
        /// <param name="wetBulbTemperature"> Schema for storing measurement reading and unit. </param>
        /// <param name="windChill"> Schema for storing measurement reading and unit. </param>
        /// <param name="windDirection"> Schema for storing measurement reading and unit. </param>
        /// <param name="windGust"> Schema for storing measurement reading and unit. </param>
        /// <param name="windSpeed"> Schema for storing measurement reading and unit. </param>
        /// <param name="id"> Weather data ID. </param>
        /// <param name="eTag"> The ETag value to implement optimistic concurrency. </param>
        /// <param name="createdDateTime"> Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="modifiedDateTime"> Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="properties">
        /// A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
        /// </param>
        /// <returns> A new <see cref="Models.WeatherData"/> instance for mocking. </returns>
        public static WeatherData WeatherData(string farmerId = null, string boundaryId = null, string extensionId = null, Location location = null, DateTimeOffset dateTime = default, string unitSystemCode = null, string extensionVersion = null, string weatherDataType = null, string granularity = null, Measure cloudCover = null, Measure dewPoint = null, Measure growingDegreeDay = null, Measure precipitation = null, Measure pressure = null, Measure relativeHumidity = null, Measure soilMoisture = null, Measure soilTemperature = null, Measure temperature = null, Measure visibility = null, Measure wetBulbTemperature = null, Measure windChill = null, Measure windDirection = null, Measure windGust = null, Measure windSpeed = null, string id = null, string eTag = null, DateTimeOffset? createdDateTime = null, DateTimeOffset? modifiedDateTime = null, IReadOnlyDictionary<string, object> properties = null)
        {
            properties ??= new Dictionary<string, object>();

            return new WeatherData(farmerId, boundaryId, extensionId, location, dateTime, unitSystemCode, extensionVersion, weatherDataType, granularity, cloudCover, dewPoint, growingDegreeDay, precipitation, pressure, relativeHumidity, soilMoisture, soilTemperature, temperature, visibility, wetBulbTemperature, windChill, windDirection, windGust, windSpeed, id, eTag, createdDateTime, modifiedDateTime, properties);
        }

        /// <summary> Initializes a new instance of Location. </summary>
        /// <param name="latitude"> Latitude of the location. </param>
        /// <param name="longitude"> Longitude of the location. </param>
        /// <returns> A new <see cref="Models.Location"/> instance for mocking. </returns>
        public static Location Location(double latitude = default, double longitude = default)
        {
            return new Location(latitude, longitude);
        }

        /// <summary> Initializes a new instance of WeatherDataIngestionJob. </summary>
        /// <param name="boundaryId"> The id of the boundary object for which weather data is being fetched. </param>
        /// <param name="farmerId"> The id of the farmer object for which weather data is being fetched. </param>
        /// <param name="extensionId"> ID of the extension to be used for the providerInput. eg. DTN.ClearAg. </param>
        /// <param name="extensionApiName"> Extension api name to which request is to be made. </param>
        /// <param name="extensionApiInput"> Extension api input dictionary which would be used to feed request query/body/parameter information. </param>
        /// <param name="extensionDataProviderAppId"> App id of the weather data provider. </param>
        /// <param name="extensionDataProviderApiKey"> Api key of the weather data provider. </param>
        /// <param name="id"> Unique job id. </param>
        /// <param name="status">
        /// Status of the job.
        /// Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
        /// </param>
        /// <param name="durationInSeconds"> Duration of the job in seconds. </param>
        /// <param name="message"> Status message to capture more details of the job. </param>
        /// <param name="createdDateTime"> Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="lastActionDateTime"> Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="startTime"> Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="endTime"> Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="name"> Name to identify resource. </param>
        /// <param name="description"> Textual description of the resource. </param>
        /// <param name="properties">
        /// A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
        /// </param>
        /// <returns> A new <see cref="Models.WeatherDataIngestionJob"/> instance for mocking. </returns>
        public static WeatherDataIngestionJob WeatherDataIngestionJob(string boundaryId = null, string farmerId = null, string extensionId = null, string extensionApiName = null, IDictionary<string, object> extensionApiInput = null, string extensionDataProviderAppId = null, string extensionDataProviderApiKey = null, string id = null, string status = null, double? durationInSeconds = null, string message = null, DateTimeOffset? createdDateTime = null, DateTimeOffset? lastActionDateTime = null, DateTimeOffset? startTime = null, DateTimeOffset? endTime = null, string name = null, string description = null, IDictionary<string, object> properties = null)
        {
            extensionApiInput ??= new Dictionary<string, object>();
            properties ??= new Dictionary<string, object>();

            return new WeatherDataIngestionJob(boundaryId, farmerId, extensionId, extensionApiName, extensionApiInput, extensionDataProviderAppId, extensionDataProviderApiKey, id, status, durationInSeconds, message, createdDateTime, lastActionDateTime, startTime, endTime, name, description, properties);
        }

        /// <summary> Initializes a new instance of WeatherDataDeleteJob. </summary>
        /// <param name="extensionId"> ID of the extension to be used for the providerInput. eg. DTN.ClearAg. </param>
        /// <param name="farmerId"> The id of the farmer object for which weather data is being fetched. </param>
        /// <param name="boundaryId"> The id of the boundary object for which weather data is being fetched. </param>
        /// <param name="weatherDataType"> Type of weather data. Possible values include: &apos;forecast&apos; , &apos;historical&apos;. </param>
        /// <param name="granularity"> Granularity of weather data. Possible values include: &apos;daily&apos; , &apos;hourly&apos;. </param>
        /// <param name="startDateTime"> Weather data start UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="endDateTime"> Weather data end UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="id"> Unique job id. </param>
        /// <param name="status">
        /// Status of the job.
        /// Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
        /// </param>
        /// <param name="durationInSeconds"> Duration of the job in seconds. </param>
        /// <param name="message"> Status message to capture more details of the job. </param>
        /// <param name="createdDateTime"> Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="lastActionDateTime"> Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="startTime"> Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="endTime"> Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="name"> Name to identify resource. </param>
        /// <param name="description"> Textual description of the resource. </param>
        /// <param name="properties">
        /// A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
        /// </param>
        /// <returns> A new <see cref="Models.WeatherDataDeleteJob"/> instance for mocking. </returns>
        public static WeatherDataDeleteJob WeatherDataDeleteJob(string extensionId = null, string farmerId = null, string boundaryId = null, string weatherDataType = null, string granularity = null, DateTimeOffset? startDateTime = null, DateTimeOffset? endDateTime = null, string id = null, string status = null, double? durationInSeconds = null, string message = null, DateTimeOffset? createdDateTime = null, DateTimeOffset? lastActionDateTime = null, DateTimeOffset? startTime = null, DateTimeOffset? endTime = null, string name = null, string description = null, IDictionary<string, object> properties = null)
        {
            properties ??= new Dictionary<string, object>();

            return new WeatherDataDeleteJob(extensionId, farmerId, boundaryId, weatherDataType, granularity, startDateTime, endDateTime, id, status, durationInSeconds, message, createdDateTime, lastActionDateTime, startTime, endTime, name, description, properties);
        }
    }
}
