// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Verticals.AgriFood.Farming
{
    /// <summary> The HarvestData service client. </summary>
    public partial class HarvestDataClient
    {
        private static readonly string[] AuthorizationScopes = new string[] { "https://farmbeats.azure.net/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;
        internal ClientDiagnostics ClientDiagnostics { get; }
        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of HarvestDataClient for mocking. </summary>
        protected HarvestDataClient()
        {
        }

        /// <summary> Initializes a new instance of HarvestDataClient. </summary>
        /// <param name="endpoint"> The endpoint of your FarmBeats resource (protocol and hostname, for example: https://{resourceName}.farmbeats.azure.net). </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public HarvestDataClient(Uri endpoint, TokenCredential credential, FarmBeatsClientOptions options = null)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(credential, nameof(credential));
            options ??= new FarmBeatsClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options);
            _tokenCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) }, new ResponseClassifier());
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Get a specified harvest data resource under a particular farmer. </summary>
        /// <param name="farmerId"> ID of the associated farmer resource. </param>
        /// <param name="harvestDataId"> ID of the harvest data resource. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="farmerId"/> or <paramref name="harvestDataId"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   totalYield: {
        ///     unit: string,
        ///     value: number
        ///   },
        ///   avgYield: Measure,
        ///   totalWetMass: Measure,
        ///   avgWetMass: Measure,
        ///   avgMoisture: Measure,
        ///   avgSpeed: Measure,
        ///   harvestProductDetails: [
        ///     {
        ///       productName: string,
        ///       area: Measure,
        ///       totalYield: Measure,
        ///       avgYield: Measure,
        ///       avgMoisture: Measure,
        ///       totalWetMass: Measure,
        ///       avgWetMass: Measure
        ///     }
        ///   ],
        ///   area: Measure,
        ///   source: string,
        ///   operationModifiedDateTime: string (ISO 8601 Format),
        ///   operationStartDateTime: string (ISO 8601 Format),
        ///   operationEndDateTime: string (ISO 8601 Format),
        ///   attachmentsLink: string,
        ///   associatedBoundaryId: string,
        ///   operationBoundaryId: string,
        ///   farmerId: string,
        ///   id: string,
        ///   eTag: string,
        ///   status: string,
        ///   createdDateTime: string (ISO 8601 Format),
        ///   modifiedDateTime: string (ISO 8601 Format),
        ///   name: string,
        ///   description: string,
        ///   properties: Dictionary&lt;string, AnyObject&gt;
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [Error],
        ///     innererror: {
        ///       code: string,
        ///       innererror: InnerError
        ///     }
        ///   },
        ///   traceId: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetHarvestDataAsync(string farmerId, string harvestDataId, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(farmerId, nameof(farmerId));
            Argument.AssertNotNull(harvestDataId, nameof(harvestDataId));

            using var scope = ClientDiagnostics.CreateScope("HarvestDataClient.GetHarvestData");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetHarvestDataRequest(farmerId, harvestDataId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a specified harvest data resource under a particular farmer. </summary>
        /// <param name="farmerId"> ID of the associated farmer resource. </param>
        /// <param name="harvestDataId"> ID of the harvest data resource. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="farmerId"/> or <paramref name="harvestDataId"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   totalYield: {
        ///     unit: string,
        ///     value: number
        ///   },
        ///   avgYield: Measure,
        ///   totalWetMass: Measure,
        ///   avgWetMass: Measure,
        ///   avgMoisture: Measure,
        ///   avgSpeed: Measure,
        ///   harvestProductDetails: [
        ///     {
        ///       productName: string,
        ///       area: Measure,
        ///       totalYield: Measure,
        ///       avgYield: Measure,
        ///       avgMoisture: Measure,
        ///       totalWetMass: Measure,
        ///       avgWetMass: Measure
        ///     }
        ///   ],
        ///   area: Measure,
        ///   source: string,
        ///   operationModifiedDateTime: string (ISO 8601 Format),
        ///   operationStartDateTime: string (ISO 8601 Format),
        ///   operationEndDateTime: string (ISO 8601 Format),
        ///   attachmentsLink: string,
        ///   associatedBoundaryId: string,
        ///   operationBoundaryId: string,
        ///   farmerId: string,
        ///   id: string,
        ///   eTag: string,
        ///   status: string,
        ///   createdDateTime: string (ISO 8601 Format),
        ///   modifiedDateTime: string (ISO 8601 Format),
        ///   name: string,
        ///   description: string,
        ///   properties: Dictionary&lt;string, AnyObject&gt;
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [Error],
        ///     innererror: {
        ///       code: string,
        ///       innererror: InnerError
        ///     }
        ///   },
        ///   traceId: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Response GetHarvestData(string farmerId, string harvestDataId, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(farmerId, nameof(farmerId));
            Argument.AssertNotNull(harvestDataId, nameof(harvestDataId));

            using var scope = ClientDiagnostics.CreateScope("HarvestDataClient.GetHarvestData");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetHarvestDataRequest(farmerId, harvestDataId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates or updates harvest data resource under a particular farmer. </summary>
        /// <param name="farmerId"> ID of the farmer. </param>
        /// <param name="harvestDataId"> ID of the harvest data resource. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="farmerId"/> or <paramref name="harvestDataId"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   totalYield: {
        ///     unit: string,
        ///     value: number
        ///   },
        ///   avgYield: Measure,
        ///   totalWetMass: Measure,
        ///   avgWetMass: Measure,
        ///   avgMoisture: Measure,
        ///   avgSpeed: Measure,
        ///   harvestProductDetails: [
        ///     {
        ///       productName: string,
        ///       area: Measure,
        ///       totalYield: Measure,
        ///       avgYield: Measure,
        ///       avgMoisture: Measure,
        ///       totalWetMass: Measure,
        ///       avgWetMass: Measure
        ///     }
        ///   ],
        ///   area: Measure,
        ///   source: string,
        ///   operationModifiedDateTime: string (ISO 8601 Format),
        ///   operationStartDateTime: string (ISO 8601 Format),
        ///   operationEndDateTime: string (ISO 8601 Format),
        ///   attachmentsLink: string,
        ///   associatedBoundaryId: string,
        ///   operationBoundaryId: string,
        ///   farmerId: string,
        ///   id: string,
        ///   eTag: string,
        ///   status: string,
        ///   createdDateTime: string (ISO 8601 Format),
        ///   modifiedDateTime: string (ISO 8601 Format),
        ///   name: string,
        ///   description: string,
        ///   properties: Dictionary&lt;string, AnyObject&gt;
        /// }
        /// </code>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   totalYield: {
        ///     unit: string,
        ///     value: number
        ///   },
        ///   avgYield: Measure,
        ///   totalWetMass: Measure,
        ///   avgWetMass: Measure,
        ///   avgMoisture: Measure,
        ///   avgSpeed: Measure,
        ///   harvestProductDetails: [
        ///     {
        ///       productName: string,
        ///       area: Measure,
        ///       totalYield: Measure,
        ///       avgYield: Measure,
        ///       avgMoisture: Measure,
        ///       totalWetMass: Measure,
        ///       avgWetMass: Measure
        ///     }
        ///   ],
        ///   area: Measure,
        ///   source: string,
        ///   operationModifiedDateTime: string (ISO 8601 Format),
        ///   operationStartDateTime: string (ISO 8601 Format),
        ///   operationEndDateTime: string (ISO 8601 Format),
        ///   attachmentsLink: string,
        ///   associatedBoundaryId: string,
        ///   operationBoundaryId: string,
        ///   farmerId: string,
        ///   id: string,
        ///   eTag: string,
        ///   status: string,
        ///   createdDateTime: string (ISO 8601 Format),
        ///   modifiedDateTime: string (ISO 8601 Format),
        ///   name: string,
        ///   description: string,
        ///   properties: Dictionary&lt;string, AnyObject&gt;
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [Error],
        ///     innererror: {
        ///       code: string,
        ///       innererror: InnerError
        ///     }
        ///   },
        ///   traceId: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual async Task<Response> CreateOrUpdateAsync(string farmerId, string harvestDataId, RequestContent content, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(farmerId, nameof(farmerId));
            Argument.AssertNotNull(harvestDataId, nameof(harvestDataId));

            using var scope = ClientDiagnostics.CreateScope("HarvestDataClient.CreateOrUpdate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateRequest(farmerId, harvestDataId, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates or updates harvest data resource under a particular farmer. </summary>
        /// <param name="farmerId"> ID of the farmer. </param>
        /// <param name="harvestDataId"> ID of the harvest data resource. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="farmerId"/> or <paramref name="harvestDataId"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   totalYield: {
        ///     unit: string,
        ///     value: number
        ///   },
        ///   avgYield: Measure,
        ///   totalWetMass: Measure,
        ///   avgWetMass: Measure,
        ///   avgMoisture: Measure,
        ///   avgSpeed: Measure,
        ///   harvestProductDetails: [
        ///     {
        ///       productName: string,
        ///       area: Measure,
        ///       totalYield: Measure,
        ///       avgYield: Measure,
        ///       avgMoisture: Measure,
        ///       totalWetMass: Measure,
        ///       avgWetMass: Measure
        ///     }
        ///   ],
        ///   area: Measure,
        ///   source: string,
        ///   operationModifiedDateTime: string (ISO 8601 Format),
        ///   operationStartDateTime: string (ISO 8601 Format),
        ///   operationEndDateTime: string (ISO 8601 Format),
        ///   attachmentsLink: string,
        ///   associatedBoundaryId: string,
        ///   operationBoundaryId: string,
        ///   farmerId: string,
        ///   id: string,
        ///   eTag: string,
        ///   status: string,
        ///   createdDateTime: string (ISO 8601 Format),
        ///   modifiedDateTime: string (ISO 8601 Format),
        ///   name: string,
        ///   description: string,
        ///   properties: Dictionary&lt;string, AnyObject&gt;
        /// }
        /// </code>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   totalYield: {
        ///     unit: string,
        ///     value: number
        ///   },
        ///   avgYield: Measure,
        ///   totalWetMass: Measure,
        ///   avgWetMass: Measure,
        ///   avgMoisture: Measure,
        ///   avgSpeed: Measure,
        ///   harvestProductDetails: [
        ///     {
        ///       productName: string,
        ///       area: Measure,
        ///       totalYield: Measure,
        ///       avgYield: Measure,
        ///       avgMoisture: Measure,
        ///       totalWetMass: Measure,
        ///       avgWetMass: Measure
        ///     }
        ///   ],
        ///   area: Measure,
        ///   source: string,
        ///   operationModifiedDateTime: string (ISO 8601 Format),
        ///   operationStartDateTime: string (ISO 8601 Format),
        ///   operationEndDateTime: string (ISO 8601 Format),
        ///   attachmentsLink: string,
        ///   associatedBoundaryId: string,
        ///   operationBoundaryId: string,
        ///   farmerId: string,
        ///   id: string,
        ///   eTag: string,
        ///   status: string,
        ///   createdDateTime: string (ISO 8601 Format),
        ///   modifiedDateTime: string (ISO 8601 Format),
        ///   name: string,
        ///   description: string,
        ///   properties: Dictionary&lt;string, AnyObject&gt;
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [Error],
        ///     innererror: {
        ///       code: string,
        ///       innererror: InnerError
        ///     }
        ///   },
        ///   traceId: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Response CreateOrUpdate(string farmerId, string harvestDataId, RequestContent content, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(farmerId, nameof(farmerId));
            Argument.AssertNotNull(harvestDataId, nameof(harvestDataId));

            using var scope = ClientDiagnostics.CreateScope("HarvestDataClient.CreateOrUpdate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateRequest(farmerId, harvestDataId, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a specified harvest data resource under a particular farmer. </summary>
        /// <param name="farmerId"> ID of the associated farmer resource. </param>
        /// <param name="harvestDataId"> ID of the harvest data. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="farmerId"/> or <paramref name="harvestDataId"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [Error],
        ///     innererror: {
        ///       code: string,
        ///       innererror: InnerError
        ///     }
        ///   },
        ///   traceId: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual async Task<Response> DeleteAsync(string farmerId, string harvestDataId, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(farmerId, nameof(farmerId));
            Argument.AssertNotNull(harvestDataId, nameof(harvestDataId));

            using var scope = ClientDiagnostics.CreateScope("HarvestDataClient.Delete");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteRequest(farmerId, harvestDataId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a specified harvest data resource under a particular farmer. </summary>
        /// <param name="farmerId"> ID of the associated farmer resource. </param>
        /// <param name="harvestDataId"> ID of the harvest data. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="farmerId"/> or <paramref name="harvestDataId"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [Error],
        ///     innererror: {
        ///       code: string,
        ///       innererror: InnerError
        ///     }
        ///   },
        ///   traceId: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Response Delete(string farmerId, string harvestDataId, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(farmerId, nameof(farmerId));
            Argument.AssertNotNull(harvestDataId, nameof(harvestDataId));

            using var scope = ClientDiagnostics.CreateScope("HarvestDataClient.Delete");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteRequest(farmerId, harvestDataId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a paginated list of harvest data resources under a particular farm. </summary>
        /// <param name="farmerId"> ID of the associated farmer. </param>
        /// <param name="minTotalYield"> Minimum Yield value(inclusive). </param>
        /// <param name="maxTotalYield"> Maximum Yield value (inclusive). </param>
        /// <param name="minAvgYield"> Minimum AvgYield value(inclusive). </param>
        /// <param name="maxAvgYield"> Maximum AvgYield value (inclusive). </param>
        /// <param name="minTotalWetMass"> Minimum Total WetMass value(inclusive). </param>
        /// <param name="maxTotalWetMass"> Maximum Total WetMass value (inclusive). </param>
        /// <param name="minAvgWetMass"> Minimum AvgWetMass value(inclusive). </param>
        /// <param name="maxAvgWetMass"> Maximum AvgWetMass value (inclusive). </param>
        /// <param name="minAvgMoisture"> Minimum AvgMoisture value(inclusive). </param>
        /// <param name="maxAvgMoisture"> Maximum AvgMoisture value (inclusive). </param>
        /// <param name="minAvgSpeed"> Minimum AvgSpeed value(inclusive). </param>
        /// <param name="maxAvgSpeed"> Maximum AvgSpeed value (inclusive). </param>
        /// <param name="sources"> Sources of the operation data. </param>
        /// <param name="associatedBoundaryIds"> Boundary IDs associated with operation data. </param>
        /// <param name="operationBoundaryIds"> Operation boundary IDs associated with operation data. </param>
        /// <param name="minOperationStartDateTime"> Minimum start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="maxOperationStartDateTime"> Maximum start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="minOperationEndDateTime"> Minimum end date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="maxOperationEndDateTime"> Maximum end date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="minOperationModifiedDateTime"> Minimum modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="maxOperationModifiedDateTime"> Maximum modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="minArea"> Minimum area for which operation was applied (inclusive). </param>
        /// <param name="maxArea"> Maximum area for which operation was applied (inclusive). </param>
        /// <param name="ids"> Ids of the resource. </param>
        /// <param name="names"> Names of the resource. </param>
        /// <param name="propertyFilters">
        /// Filters on key-value pairs within the Properties object.
        /// eg. &quot;{testKey} eq {testValue}&quot;.
        /// </param>
        /// <param name="statuses"> Statuses of the resource. </param>
        /// <param name="minCreatedDateTime"> Minimum creation date of resource (inclusive). </param>
        /// <param name="maxCreatedDateTime"> Maximum creation date of resource (inclusive). </param>
        /// <param name="minLastModifiedDateTime"> Minimum last modified date of resource (inclusive). </param>
        /// <param name="maxLastModifiedDateTime"> Maximum last modified date of resource (inclusive). </param>
        /// <param name="maxPageSize">
        /// Maximum number of items needed (inclusive).
        /// Minimum = 10, Maximum = 1000, Default value = 50.
        /// </param>
        /// <param name="skipToken"> Skip token for getting next set of results. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="farmerId"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       totalYield: {
        ///         unit: string,
        ///         value: number
        ///       },
        ///       avgYield: Measure,
        ///       totalWetMass: Measure,
        ///       avgWetMass: Measure,
        ///       avgMoisture: Measure,
        ///       avgSpeed: Measure,
        ///       harvestProductDetails: [
        ///         {
        ///           productName: string,
        ///           area: Measure,
        ///           totalYield: Measure,
        ///           avgYield: Measure,
        ///           avgMoisture: Measure,
        ///           totalWetMass: Measure,
        ///           avgWetMass: Measure
        ///         }
        ///       ],
        ///       area: Measure,
        ///       source: string,
        ///       operationModifiedDateTime: string (ISO 8601 Format),
        ///       operationStartDateTime: string (ISO 8601 Format),
        ///       operationEndDateTime: string (ISO 8601 Format),
        ///       attachmentsLink: string,
        ///       associatedBoundaryId: string,
        ///       operationBoundaryId: string,
        ///       farmerId: string,
        ///       id: string,
        ///       eTag: string,
        ///       status: string,
        ///       createdDateTime: string (ISO 8601 Format),
        ///       modifiedDateTime: string (ISO 8601 Format),
        ///       name: string,
        ///       description: string,
        ///       properties: Dictionary&lt;string, AnyObject&gt;
        ///     }
        ///   ],
        ///   $skipToken: string,
        ///   nextLink: string
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [Error],
        ///     innererror: {
        ///       code: string,
        ///       innererror: InnerError
        ///     }
        ///   },
        ///   traceId: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual AsyncPageable<BinaryData> GetAllHarvestDataByFarmerIdAsync(string farmerId, double? minTotalYield = null, double? maxTotalYield = null, double? minAvgYield = null, double? maxAvgYield = null, double? minTotalWetMass = null, double? maxTotalWetMass = null, double? minAvgWetMass = null, double? maxAvgWetMass = null, double? minAvgMoisture = null, double? maxAvgMoisture = null, double? minAvgSpeed = null, double? maxAvgSpeed = null, IEnumerable<string> sources = null, IEnumerable<string> associatedBoundaryIds = null, IEnumerable<string> operationBoundaryIds = null, DateTimeOffset? minOperationStartDateTime = null, DateTimeOffset? maxOperationStartDateTime = null, DateTimeOffset? minOperationEndDateTime = null, DateTimeOffset? maxOperationEndDateTime = null, DateTimeOffset? minOperationModifiedDateTime = null, DateTimeOffset? maxOperationModifiedDateTime = null, double? minArea = null, double? maxArea = null, IEnumerable<string> ids = null, IEnumerable<string> names = null, IEnumerable<string> propertyFilters = null, IEnumerable<string> statuses = null, DateTimeOffset? minCreatedDateTime = null, DateTimeOffset? maxCreatedDateTime = null, DateTimeOffset? minLastModifiedDateTime = null, DateTimeOffset? maxLastModifiedDateTime = null, int? maxPageSize = null, string skipToken = null, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(farmerId, nameof(farmerId));

            return PageableHelpers.CreateAsyncPageable(CreateEnumerableAsync, ClientDiagnostics, "HarvestDataClient.GetAllHarvestDataByFarmerId");
            async IAsyncEnumerable<Page<BinaryData>> CreateEnumerableAsync(string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken = default)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetAllHarvestDataByFarmerIdRequest(farmerId, minTotalYield, maxTotalYield, minAvgYield, maxAvgYield, minTotalWetMass, maxTotalWetMass, minAvgWetMass, maxAvgWetMass, minAvgMoisture, maxAvgMoisture, minAvgSpeed, maxAvgSpeed, sources, associatedBoundaryIds, operationBoundaryIds, minOperationStartDateTime, maxOperationStartDateTime, minOperationEndDateTime, maxOperationEndDateTime, minOperationModifiedDateTime, maxOperationModifiedDateTime, minArea, maxArea, ids, names, propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken, context)
                        : CreateGetAllHarvestDataByFarmerIdNextPageRequest(nextLink, farmerId, minTotalYield, maxTotalYield, minAvgYield, maxAvgYield, minTotalWetMass, maxTotalWetMass, minAvgWetMass, maxAvgWetMass, minAvgMoisture, maxAvgMoisture, minAvgSpeed, maxAvgSpeed, sources, associatedBoundaryIds, operationBoundaryIds, minOperationStartDateTime, maxOperationStartDateTime, minOperationEndDateTime, maxOperationEndDateTime, minOperationModifiedDateTime, maxOperationModifiedDateTime, minArea, maxArea, ids, names, propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken, context);
                    var page = await LowLevelPageableHelpers.ProcessMessageAsync(_pipeline, message, context, "value", "nextLink", cancellationToken).ConfigureAwait(false);
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Returns a paginated list of harvest data resources under a particular farm. </summary>
        /// <param name="farmerId"> ID of the associated farmer. </param>
        /// <param name="minTotalYield"> Minimum Yield value(inclusive). </param>
        /// <param name="maxTotalYield"> Maximum Yield value (inclusive). </param>
        /// <param name="minAvgYield"> Minimum AvgYield value(inclusive). </param>
        /// <param name="maxAvgYield"> Maximum AvgYield value (inclusive). </param>
        /// <param name="minTotalWetMass"> Minimum Total WetMass value(inclusive). </param>
        /// <param name="maxTotalWetMass"> Maximum Total WetMass value (inclusive). </param>
        /// <param name="minAvgWetMass"> Minimum AvgWetMass value(inclusive). </param>
        /// <param name="maxAvgWetMass"> Maximum AvgWetMass value (inclusive). </param>
        /// <param name="minAvgMoisture"> Minimum AvgMoisture value(inclusive). </param>
        /// <param name="maxAvgMoisture"> Maximum AvgMoisture value (inclusive). </param>
        /// <param name="minAvgSpeed"> Minimum AvgSpeed value(inclusive). </param>
        /// <param name="maxAvgSpeed"> Maximum AvgSpeed value (inclusive). </param>
        /// <param name="sources"> Sources of the operation data. </param>
        /// <param name="associatedBoundaryIds"> Boundary IDs associated with operation data. </param>
        /// <param name="operationBoundaryIds"> Operation boundary IDs associated with operation data. </param>
        /// <param name="minOperationStartDateTime"> Minimum start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="maxOperationStartDateTime"> Maximum start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="minOperationEndDateTime"> Minimum end date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="maxOperationEndDateTime"> Maximum end date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="minOperationModifiedDateTime"> Minimum modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="maxOperationModifiedDateTime"> Maximum modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="minArea"> Minimum area for which operation was applied (inclusive). </param>
        /// <param name="maxArea"> Maximum area for which operation was applied (inclusive). </param>
        /// <param name="ids"> Ids of the resource. </param>
        /// <param name="names"> Names of the resource. </param>
        /// <param name="propertyFilters">
        /// Filters on key-value pairs within the Properties object.
        /// eg. &quot;{testKey} eq {testValue}&quot;.
        /// </param>
        /// <param name="statuses"> Statuses of the resource. </param>
        /// <param name="minCreatedDateTime"> Minimum creation date of resource (inclusive). </param>
        /// <param name="maxCreatedDateTime"> Maximum creation date of resource (inclusive). </param>
        /// <param name="minLastModifiedDateTime"> Minimum last modified date of resource (inclusive). </param>
        /// <param name="maxLastModifiedDateTime"> Maximum last modified date of resource (inclusive). </param>
        /// <param name="maxPageSize">
        /// Maximum number of items needed (inclusive).
        /// Minimum = 10, Maximum = 1000, Default value = 50.
        /// </param>
        /// <param name="skipToken"> Skip token for getting next set of results. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="farmerId"/> is null. </exception>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       totalYield: {
        ///         unit: string,
        ///         value: number
        ///       },
        ///       avgYield: Measure,
        ///       totalWetMass: Measure,
        ///       avgWetMass: Measure,
        ///       avgMoisture: Measure,
        ///       avgSpeed: Measure,
        ///       harvestProductDetails: [
        ///         {
        ///           productName: string,
        ///           area: Measure,
        ///           totalYield: Measure,
        ///           avgYield: Measure,
        ///           avgMoisture: Measure,
        ///           totalWetMass: Measure,
        ///           avgWetMass: Measure
        ///         }
        ///       ],
        ///       area: Measure,
        ///       source: string,
        ///       operationModifiedDateTime: string (ISO 8601 Format),
        ///       operationStartDateTime: string (ISO 8601 Format),
        ///       operationEndDateTime: string (ISO 8601 Format),
        ///       attachmentsLink: string,
        ///       associatedBoundaryId: string,
        ///       operationBoundaryId: string,
        ///       farmerId: string,
        ///       id: string,
        ///       eTag: string,
        ///       status: string,
        ///       createdDateTime: string (ISO 8601 Format),
        ///       modifiedDateTime: string (ISO 8601 Format),
        ///       name: string,
        ///       description: string,
        ///       properties: Dictionary&lt;string, AnyObject&gt;
        ///     }
        ///   ],
        ///   $skipToken: string,
        ///   nextLink: string
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [Error],
        ///     innererror: {
        ///       code: string,
        ///       innererror: InnerError
        ///     }
        ///   },
        ///   traceId: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Pageable<BinaryData> GetAllHarvestDataByFarmerId(string farmerId, double? minTotalYield = null, double? maxTotalYield = null, double? minAvgYield = null, double? maxAvgYield = null, double? minTotalWetMass = null, double? maxTotalWetMass = null, double? minAvgWetMass = null, double? maxAvgWetMass = null, double? minAvgMoisture = null, double? maxAvgMoisture = null, double? minAvgSpeed = null, double? maxAvgSpeed = null, IEnumerable<string> sources = null, IEnumerable<string> associatedBoundaryIds = null, IEnumerable<string> operationBoundaryIds = null, DateTimeOffset? minOperationStartDateTime = null, DateTimeOffset? maxOperationStartDateTime = null, DateTimeOffset? minOperationEndDateTime = null, DateTimeOffset? maxOperationEndDateTime = null, DateTimeOffset? minOperationModifiedDateTime = null, DateTimeOffset? maxOperationModifiedDateTime = null, double? minArea = null, double? maxArea = null, IEnumerable<string> ids = null, IEnumerable<string> names = null, IEnumerable<string> propertyFilters = null, IEnumerable<string> statuses = null, DateTimeOffset? minCreatedDateTime = null, DateTimeOffset? maxCreatedDateTime = null, DateTimeOffset? minLastModifiedDateTime = null, DateTimeOffset? maxLastModifiedDateTime = null, int? maxPageSize = null, string skipToken = null, RequestContext context = null)
#pragma warning restore AZC0002
        {
            Argument.AssertNotNull(farmerId, nameof(farmerId));

            return PageableHelpers.CreatePageable(CreateEnumerable, ClientDiagnostics, "HarvestDataClient.GetAllHarvestDataByFarmerId");
            IEnumerable<Page<BinaryData>> CreateEnumerable(string nextLink, int? pageSizeHint)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetAllHarvestDataByFarmerIdRequest(farmerId, minTotalYield, maxTotalYield, minAvgYield, maxAvgYield, minTotalWetMass, maxTotalWetMass, minAvgWetMass, maxAvgWetMass, minAvgMoisture, maxAvgMoisture, minAvgSpeed, maxAvgSpeed, sources, associatedBoundaryIds, operationBoundaryIds, minOperationStartDateTime, maxOperationStartDateTime, minOperationEndDateTime, maxOperationEndDateTime, minOperationModifiedDateTime, maxOperationModifiedDateTime, minArea, maxArea, ids, names, propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken, context)
                        : CreateGetAllHarvestDataByFarmerIdNextPageRequest(nextLink, farmerId, minTotalYield, maxTotalYield, minAvgYield, maxAvgYield, minTotalWetMass, maxTotalWetMass, minAvgWetMass, maxAvgWetMass, minAvgMoisture, maxAvgMoisture, minAvgSpeed, maxAvgSpeed, sources, associatedBoundaryIds, operationBoundaryIds, minOperationStartDateTime, maxOperationStartDateTime, minOperationEndDateTime, maxOperationEndDateTime, minOperationModifiedDateTime, maxOperationModifiedDateTime, minArea, maxArea, ids, names, propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken, context);
                    var page = LowLevelPageableHelpers.ProcessMessage(_pipeline, message, context, "value", "nextLink");
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Returns a paginated list of harvest data resources across all farmers. </summary>
        /// <param name="minTotalYield"> Minimum Yield value(inclusive). </param>
        /// <param name="maxTotalYield"> Maximum Yield value (inclusive). </param>
        /// <param name="minAvgYield"> Minimum AvgYield value(inclusive). </param>
        /// <param name="maxAvgYield"> Maximum AvgYield value (inclusive). </param>
        /// <param name="minTotalWetMass"> Minimum Total WetMass value(inclusive). </param>
        /// <param name="maxTotalWetMass"> Maximum Total WetMass value (inclusive). </param>
        /// <param name="minAvgWetMass"> Minimum AvgWetMass value(inclusive). </param>
        /// <param name="maxAvgWetMass"> Maximum AvgWetMass value (inclusive). </param>
        /// <param name="minAvgMoisture"> Minimum AvgMoisture value(inclusive). </param>
        /// <param name="maxAvgMoisture"> Maximum AvgMoisture value (inclusive). </param>
        /// <param name="minAvgSpeed"> Minimum AvgSpeed value(inclusive). </param>
        /// <param name="maxAvgSpeed"> Maximum AvgSpeed value (inclusive). </param>
        /// <param name="sources"> Sources of the operation data. </param>
        /// <param name="associatedBoundaryIds"> Boundary IDs associated with operation data. </param>
        /// <param name="operationBoundaryIds"> Operation boundary IDs associated with operation data. </param>
        /// <param name="minOperationStartDateTime"> Minimum start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="maxOperationStartDateTime"> Maximum start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="minOperationEndDateTime"> Minimum end date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="maxOperationEndDateTime"> Maximum end date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="minOperationModifiedDateTime"> Minimum modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="maxOperationModifiedDateTime"> Maximum modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="minArea"> Minimum area for which operation was applied (inclusive). </param>
        /// <param name="maxArea"> Maximum area for which operation was applied (inclusive). </param>
        /// <param name="ids"> Ids of the resource. </param>
        /// <param name="names"> Names of the resource. </param>
        /// <param name="propertyFilters">
        /// Filters on key-value pairs within the Properties object.
        /// eg. &quot;{testKey} eq {testValue}&quot;.
        /// </param>
        /// <param name="statuses"> Statuses of the resource. </param>
        /// <param name="minCreatedDateTime"> Minimum creation date of resource (inclusive). </param>
        /// <param name="maxCreatedDateTime"> Maximum creation date of resource (inclusive). </param>
        /// <param name="minLastModifiedDateTime"> Minimum last modified date of resource (inclusive). </param>
        /// <param name="maxLastModifiedDateTime"> Maximum last modified date of resource (inclusive). </param>
        /// <param name="maxPageSize">
        /// Maximum number of items needed (inclusive).
        /// Minimum = 10, Maximum = 1000, Default value = 50.
        /// </param>
        /// <param name="skipToken"> Skip token for getting next set of results. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       totalYield: {
        ///         unit: string,
        ///         value: number
        ///       },
        ///       avgYield: Measure,
        ///       totalWetMass: Measure,
        ///       avgWetMass: Measure,
        ///       avgMoisture: Measure,
        ///       avgSpeed: Measure,
        ///       harvestProductDetails: [
        ///         {
        ///           productName: string,
        ///           area: Measure,
        ///           totalYield: Measure,
        ///           avgYield: Measure,
        ///           avgMoisture: Measure,
        ///           totalWetMass: Measure,
        ///           avgWetMass: Measure
        ///         }
        ///       ],
        ///       area: Measure,
        ///       source: string,
        ///       operationModifiedDateTime: string (ISO 8601 Format),
        ///       operationStartDateTime: string (ISO 8601 Format),
        ///       operationEndDateTime: string (ISO 8601 Format),
        ///       attachmentsLink: string,
        ///       associatedBoundaryId: string,
        ///       operationBoundaryId: string,
        ///       farmerId: string,
        ///       id: string,
        ///       eTag: string,
        ///       status: string,
        ///       createdDateTime: string (ISO 8601 Format),
        ///       modifiedDateTime: string (ISO 8601 Format),
        ///       name: string,
        ///       description: string,
        ///       properties: Dictionary&lt;string, AnyObject&gt;
        ///     }
        ///   ],
        ///   $skipToken: string,
        ///   nextLink: string
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [Error],
        ///     innererror: {
        ///       code: string,
        ///       innererror: InnerError
        ///     }
        ///   },
        ///   traceId: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual AsyncPageable<BinaryData> GetAllHarvestDataAsync(double? minTotalYield = null, double? maxTotalYield = null, double? minAvgYield = null, double? maxAvgYield = null, double? minTotalWetMass = null, double? maxTotalWetMass = null, double? minAvgWetMass = null, double? maxAvgWetMass = null, double? minAvgMoisture = null, double? maxAvgMoisture = null, double? minAvgSpeed = null, double? maxAvgSpeed = null, IEnumerable<string> sources = null, IEnumerable<string> associatedBoundaryIds = null, IEnumerable<string> operationBoundaryIds = null, DateTimeOffset? minOperationStartDateTime = null, DateTimeOffset? maxOperationStartDateTime = null, DateTimeOffset? minOperationEndDateTime = null, DateTimeOffset? maxOperationEndDateTime = null, DateTimeOffset? minOperationModifiedDateTime = null, DateTimeOffset? maxOperationModifiedDateTime = null, double? minArea = null, double? maxArea = null, IEnumerable<string> ids = null, IEnumerable<string> names = null, IEnumerable<string> propertyFilters = null, IEnumerable<string> statuses = null, DateTimeOffset? minCreatedDateTime = null, DateTimeOffset? maxCreatedDateTime = null, DateTimeOffset? minLastModifiedDateTime = null, DateTimeOffset? maxLastModifiedDateTime = null, int? maxPageSize = null, string skipToken = null, RequestContext context = null)
#pragma warning restore AZC0002
        {
            return PageableHelpers.CreateAsyncPageable(CreateEnumerableAsync, ClientDiagnostics, "HarvestDataClient.GetAllHarvestData");
            async IAsyncEnumerable<Page<BinaryData>> CreateEnumerableAsync(string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken = default)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetAllHarvestDataRequest(minTotalYield, maxTotalYield, minAvgYield, maxAvgYield, minTotalWetMass, maxTotalWetMass, minAvgWetMass, maxAvgWetMass, minAvgMoisture, maxAvgMoisture, minAvgSpeed, maxAvgSpeed, sources, associatedBoundaryIds, operationBoundaryIds, minOperationStartDateTime, maxOperationStartDateTime, minOperationEndDateTime, maxOperationEndDateTime, minOperationModifiedDateTime, maxOperationModifiedDateTime, minArea, maxArea, ids, names, propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken, context)
                        : CreateGetAllHarvestDataNextPageRequest(nextLink, minTotalYield, maxTotalYield, minAvgYield, maxAvgYield, minTotalWetMass, maxTotalWetMass, minAvgWetMass, maxAvgWetMass, minAvgMoisture, maxAvgMoisture, minAvgSpeed, maxAvgSpeed, sources, associatedBoundaryIds, operationBoundaryIds, minOperationStartDateTime, maxOperationStartDateTime, minOperationEndDateTime, maxOperationEndDateTime, minOperationModifiedDateTime, maxOperationModifiedDateTime, minArea, maxArea, ids, names, propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken, context);
                    var page = await LowLevelPageableHelpers.ProcessMessageAsync(_pipeline, message, context, "value", "nextLink", cancellationToken).ConfigureAwait(false);
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Returns a paginated list of harvest data resources across all farmers. </summary>
        /// <param name="minTotalYield"> Minimum Yield value(inclusive). </param>
        /// <param name="maxTotalYield"> Maximum Yield value (inclusive). </param>
        /// <param name="minAvgYield"> Minimum AvgYield value(inclusive). </param>
        /// <param name="maxAvgYield"> Maximum AvgYield value (inclusive). </param>
        /// <param name="minTotalWetMass"> Minimum Total WetMass value(inclusive). </param>
        /// <param name="maxTotalWetMass"> Maximum Total WetMass value (inclusive). </param>
        /// <param name="minAvgWetMass"> Minimum AvgWetMass value(inclusive). </param>
        /// <param name="maxAvgWetMass"> Maximum AvgWetMass value (inclusive). </param>
        /// <param name="minAvgMoisture"> Minimum AvgMoisture value(inclusive). </param>
        /// <param name="maxAvgMoisture"> Maximum AvgMoisture value (inclusive). </param>
        /// <param name="minAvgSpeed"> Minimum AvgSpeed value(inclusive). </param>
        /// <param name="maxAvgSpeed"> Maximum AvgSpeed value (inclusive). </param>
        /// <param name="sources"> Sources of the operation data. </param>
        /// <param name="associatedBoundaryIds"> Boundary IDs associated with operation data. </param>
        /// <param name="operationBoundaryIds"> Operation boundary IDs associated with operation data. </param>
        /// <param name="minOperationStartDateTime"> Minimum start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="maxOperationStartDateTime"> Maximum start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="minOperationEndDateTime"> Minimum end date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="maxOperationEndDateTime"> Maximum end date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="minOperationModifiedDateTime"> Minimum modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="maxOperationModifiedDateTime"> Maximum modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="minArea"> Minimum area for which operation was applied (inclusive). </param>
        /// <param name="maxArea"> Maximum area for which operation was applied (inclusive). </param>
        /// <param name="ids"> Ids of the resource. </param>
        /// <param name="names"> Names of the resource. </param>
        /// <param name="propertyFilters">
        /// Filters on key-value pairs within the Properties object.
        /// eg. &quot;{testKey} eq {testValue}&quot;.
        /// </param>
        /// <param name="statuses"> Statuses of the resource. </param>
        /// <param name="minCreatedDateTime"> Minimum creation date of resource (inclusive). </param>
        /// <param name="maxCreatedDateTime"> Maximum creation date of resource (inclusive). </param>
        /// <param name="minLastModifiedDateTime"> Minimum last modified date of resource (inclusive). </param>
        /// <param name="maxLastModifiedDateTime"> Maximum last modified date of resource (inclusive). </param>
        /// <param name="maxPageSize">
        /// Maximum number of items needed (inclusive).
        /// Minimum = 10, Maximum = 1000, Default value = 50.
        /// </param>
        /// <param name="skipToken"> Skip token for getting next set of results. </param>
        /// <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       totalYield: {
        ///         unit: string,
        ///         value: number
        ///       },
        ///       avgYield: Measure,
        ///       totalWetMass: Measure,
        ///       avgWetMass: Measure,
        ///       avgMoisture: Measure,
        ///       avgSpeed: Measure,
        ///       harvestProductDetails: [
        ///         {
        ///           productName: string,
        ///           area: Measure,
        ///           totalYield: Measure,
        ///           avgYield: Measure,
        ///           avgMoisture: Measure,
        ///           totalWetMass: Measure,
        ///           avgWetMass: Measure
        ///         }
        ///       ],
        ///       area: Measure,
        ///       source: string,
        ///       operationModifiedDateTime: string (ISO 8601 Format),
        ///       operationStartDateTime: string (ISO 8601 Format),
        ///       operationEndDateTime: string (ISO 8601 Format),
        ///       attachmentsLink: string,
        ///       associatedBoundaryId: string,
        ///       operationBoundaryId: string,
        ///       farmerId: string,
        ///       id: string,
        ///       eTag: string,
        ///       status: string,
        ///       createdDateTime: string (ISO 8601 Format),
        ///       modifiedDateTime: string (ISO 8601 Format),
        ///       name: string,
        ///       description: string,
        ///       properties: Dictionary&lt;string, AnyObject&gt;
        ///     }
        ///   ],
        ///   $skipToken: string,
        ///   nextLink: string
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [Error],
        ///     innererror: {
        ///       code: string,
        ///       innererror: InnerError
        ///     }
        ///   },
        ///   traceId: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Pageable<BinaryData> GetAllHarvestData(double? minTotalYield = null, double? maxTotalYield = null, double? minAvgYield = null, double? maxAvgYield = null, double? minTotalWetMass = null, double? maxTotalWetMass = null, double? minAvgWetMass = null, double? maxAvgWetMass = null, double? minAvgMoisture = null, double? maxAvgMoisture = null, double? minAvgSpeed = null, double? maxAvgSpeed = null, IEnumerable<string> sources = null, IEnumerable<string> associatedBoundaryIds = null, IEnumerable<string> operationBoundaryIds = null, DateTimeOffset? minOperationStartDateTime = null, DateTimeOffset? maxOperationStartDateTime = null, DateTimeOffset? minOperationEndDateTime = null, DateTimeOffset? maxOperationEndDateTime = null, DateTimeOffset? minOperationModifiedDateTime = null, DateTimeOffset? maxOperationModifiedDateTime = null, double? minArea = null, double? maxArea = null, IEnumerable<string> ids = null, IEnumerable<string> names = null, IEnumerable<string> propertyFilters = null, IEnumerable<string> statuses = null, DateTimeOffset? minCreatedDateTime = null, DateTimeOffset? maxCreatedDateTime = null, DateTimeOffset? minLastModifiedDateTime = null, DateTimeOffset? maxLastModifiedDateTime = null, int? maxPageSize = null, string skipToken = null, RequestContext context = null)
#pragma warning restore AZC0002
        {
            return PageableHelpers.CreatePageable(CreateEnumerable, ClientDiagnostics, "HarvestDataClient.GetAllHarvestData");
            IEnumerable<Page<BinaryData>> CreateEnumerable(string nextLink, int? pageSizeHint)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetAllHarvestDataRequest(minTotalYield, maxTotalYield, minAvgYield, maxAvgYield, minTotalWetMass, maxTotalWetMass, minAvgWetMass, maxAvgWetMass, minAvgMoisture, maxAvgMoisture, minAvgSpeed, maxAvgSpeed, sources, associatedBoundaryIds, operationBoundaryIds, minOperationStartDateTime, maxOperationStartDateTime, minOperationEndDateTime, maxOperationEndDateTime, minOperationModifiedDateTime, maxOperationModifiedDateTime, minArea, maxArea, ids, names, propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken, context)
                        : CreateGetAllHarvestDataNextPageRequest(nextLink, minTotalYield, maxTotalYield, minAvgYield, maxAvgYield, minTotalWetMass, maxTotalWetMass, minAvgWetMass, maxAvgWetMass, minAvgMoisture, maxAvgMoisture, minAvgSpeed, maxAvgSpeed, sources, associatedBoundaryIds, operationBoundaryIds, minOperationStartDateTime, maxOperationStartDateTime, minOperationEndDateTime, maxOperationEndDateTime, minOperationModifiedDateTime, maxOperationModifiedDateTime, minArea, maxArea, ids, names, propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken, context);
                    var page = LowLevelPageableHelpers.ProcessMessage(_pipeline, message, context, "value", "nextLink");
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        internal HttpMessage CreateGetAllHarvestDataByFarmerIdRequest(string farmerId, double? minTotalYield, double? maxTotalYield, double? minAvgYield, double? maxAvgYield, double? minTotalWetMass, double? maxTotalWetMass, double? minAvgWetMass, double? maxAvgWetMass, double? minAvgMoisture, double? maxAvgMoisture, double? minAvgSpeed, double? maxAvgSpeed, IEnumerable<string> sources, IEnumerable<string> associatedBoundaryIds, IEnumerable<string> operationBoundaryIds, DateTimeOffset? minOperationStartDateTime, DateTimeOffset? maxOperationStartDateTime, DateTimeOffset? minOperationEndDateTime, DateTimeOffset? maxOperationEndDateTime, DateTimeOffset? minOperationModifiedDateTime, DateTimeOffset? maxOperationModifiedDateTime, double? minArea, double? maxArea, IEnumerable<string> ids, IEnumerable<string> names, IEnumerable<string> propertyFilters, IEnumerable<string> statuses, DateTimeOffset? minCreatedDateTime, DateTimeOffset? maxCreatedDateTime, DateTimeOffset? minLastModifiedDateTime, DateTimeOffset? maxLastModifiedDateTime, int? maxPageSize, string skipToken, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/farmers/", false);
            uri.AppendPath(farmerId, true);
            uri.AppendPath("/harvest-data", false);
            if (minTotalYield != null)
            {
                uri.AppendQuery("minTotalYield", minTotalYield.Value, true);
            }
            if (maxTotalYield != null)
            {
                uri.AppendQuery("maxTotalYield", maxTotalYield.Value, true);
            }
            if (minAvgYield != null)
            {
                uri.AppendQuery("minAvgYield", minAvgYield.Value, true);
            }
            if (maxAvgYield != null)
            {
                uri.AppendQuery("maxAvgYield", maxAvgYield.Value, true);
            }
            if (minTotalWetMass != null)
            {
                uri.AppendQuery("minTotalWetMass", minTotalWetMass.Value, true);
            }
            if (maxTotalWetMass != null)
            {
                uri.AppendQuery("maxTotalWetMass", maxTotalWetMass.Value, true);
            }
            if (minAvgWetMass != null)
            {
                uri.AppendQuery("minAvgWetMass", minAvgWetMass.Value, true);
            }
            if (maxAvgWetMass != null)
            {
                uri.AppendQuery("maxAvgWetMass", maxAvgWetMass.Value, true);
            }
            if (minAvgMoisture != null)
            {
                uri.AppendQuery("minAvgMoisture", minAvgMoisture.Value, true);
            }
            if (maxAvgMoisture != null)
            {
                uri.AppendQuery("maxAvgMoisture", maxAvgMoisture.Value, true);
            }
            if (minAvgSpeed != null)
            {
                uri.AppendQuery("minAvgSpeed", minAvgSpeed.Value, true);
            }
            if (maxAvgSpeed != null)
            {
                uri.AppendQuery("maxAvgSpeed", maxAvgSpeed.Value, true);
            }
            if (sources != null)
            {
                foreach (var param in sources)
                {
                    uri.AppendQuery("sources", param, true);
                }
            }
            if (associatedBoundaryIds != null)
            {
                foreach (var param in associatedBoundaryIds)
                {
                    uri.AppendQuery("associatedBoundaryIds", param, true);
                }
            }
            if (operationBoundaryIds != null)
            {
                foreach (var param in operationBoundaryIds)
                {
                    uri.AppendQuery("operationBoundaryIds", param, true);
                }
            }
            if (minOperationStartDateTime != null)
            {
                uri.AppendQuery("minOperationStartDateTime", minOperationStartDateTime.Value, "O", true);
            }
            if (maxOperationStartDateTime != null)
            {
                uri.AppendQuery("maxOperationStartDateTime", maxOperationStartDateTime.Value, "O", true);
            }
            if (minOperationEndDateTime != null)
            {
                uri.AppendQuery("minOperationEndDateTime", minOperationEndDateTime.Value, "O", true);
            }
            if (maxOperationEndDateTime != null)
            {
                uri.AppendQuery("maxOperationEndDateTime", maxOperationEndDateTime.Value, "O", true);
            }
            if (minOperationModifiedDateTime != null)
            {
                uri.AppendQuery("minOperationModifiedDateTime", minOperationModifiedDateTime.Value, "O", true);
            }
            if (maxOperationModifiedDateTime != null)
            {
                uri.AppendQuery("maxOperationModifiedDateTime", maxOperationModifiedDateTime.Value, "O", true);
            }
            if (minArea != null)
            {
                uri.AppendQuery("minArea", minArea.Value, true);
            }
            if (maxArea != null)
            {
                uri.AppendQuery("maxArea", maxArea.Value, true);
            }
            if (ids != null)
            {
                foreach (var param in ids)
                {
                    uri.AppendQuery("ids", param, true);
                }
            }
            if (names != null)
            {
                foreach (var param in names)
                {
                    uri.AppendQuery("names", param, true);
                }
            }
            if (propertyFilters != null)
            {
                foreach (var param in propertyFilters)
                {
                    uri.AppendQuery("propertyFilters", param, true);
                }
            }
            if (statuses != null)
            {
                foreach (var param in statuses)
                {
                    uri.AppendQuery("statuses", param, true);
                }
            }
            if (minCreatedDateTime != null)
            {
                uri.AppendQuery("minCreatedDateTime", minCreatedDateTime.Value, "O", true);
            }
            if (maxCreatedDateTime != null)
            {
                uri.AppendQuery("maxCreatedDateTime", maxCreatedDateTime.Value, "O", true);
            }
            if (minLastModifiedDateTime != null)
            {
                uri.AppendQuery("minLastModifiedDateTime", minLastModifiedDateTime.Value, "O", true);
            }
            if (maxLastModifiedDateTime != null)
            {
                uri.AppendQuery("maxLastModifiedDateTime", maxLastModifiedDateTime.Value, "O", true);
            }
            if (maxPageSize != null)
            {
                uri.AppendQuery("$maxPageSize", maxPageSize.Value, true);
            }
            if (skipToken != null)
            {
                uri.AppendQuery("$skipToken", skipToken, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.ResponseClassifier = ResponseClassifier200.Instance;
            return message;
        }

        internal HttpMessage CreateGetAllHarvestDataRequest(double? minTotalYield, double? maxTotalYield, double? minAvgYield, double? maxAvgYield, double? minTotalWetMass, double? maxTotalWetMass, double? minAvgWetMass, double? maxAvgWetMass, double? minAvgMoisture, double? maxAvgMoisture, double? minAvgSpeed, double? maxAvgSpeed, IEnumerable<string> sources, IEnumerable<string> associatedBoundaryIds, IEnumerable<string> operationBoundaryIds, DateTimeOffset? minOperationStartDateTime, DateTimeOffset? maxOperationStartDateTime, DateTimeOffset? minOperationEndDateTime, DateTimeOffset? maxOperationEndDateTime, DateTimeOffset? minOperationModifiedDateTime, DateTimeOffset? maxOperationModifiedDateTime, double? minArea, double? maxArea, IEnumerable<string> ids, IEnumerable<string> names, IEnumerable<string> propertyFilters, IEnumerable<string> statuses, DateTimeOffset? minCreatedDateTime, DateTimeOffset? maxCreatedDateTime, DateTimeOffset? minLastModifiedDateTime, DateTimeOffset? maxLastModifiedDateTime, int? maxPageSize, string skipToken, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/harvest-data", false);
            if (minTotalYield != null)
            {
                uri.AppendQuery("minTotalYield", minTotalYield.Value, true);
            }
            if (maxTotalYield != null)
            {
                uri.AppendQuery("maxTotalYield", maxTotalYield.Value, true);
            }
            if (minAvgYield != null)
            {
                uri.AppendQuery("minAvgYield", minAvgYield.Value, true);
            }
            if (maxAvgYield != null)
            {
                uri.AppendQuery("maxAvgYield", maxAvgYield.Value, true);
            }
            if (minTotalWetMass != null)
            {
                uri.AppendQuery("minTotalWetMass", minTotalWetMass.Value, true);
            }
            if (maxTotalWetMass != null)
            {
                uri.AppendQuery("maxTotalWetMass", maxTotalWetMass.Value, true);
            }
            if (minAvgWetMass != null)
            {
                uri.AppendQuery("minAvgWetMass", minAvgWetMass.Value, true);
            }
            if (maxAvgWetMass != null)
            {
                uri.AppendQuery("maxAvgWetMass", maxAvgWetMass.Value, true);
            }
            if (minAvgMoisture != null)
            {
                uri.AppendQuery("minAvgMoisture", minAvgMoisture.Value, true);
            }
            if (maxAvgMoisture != null)
            {
                uri.AppendQuery("maxAvgMoisture", maxAvgMoisture.Value, true);
            }
            if (minAvgSpeed != null)
            {
                uri.AppendQuery("minAvgSpeed", minAvgSpeed.Value, true);
            }
            if (maxAvgSpeed != null)
            {
                uri.AppendQuery("maxAvgSpeed", maxAvgSpeed.Value, true);
            }
            if (sources != null)
            {
                foreach (var param in sources)
                {
                    uri.AppendQuery("sources", param, true);
                }
            }
            if (associatedBoundaryIds != null)
            {
                foreach (var param in associatedBoundaryIds)
                {
                    uri.AppendQuery("associatedBoundaryIds", param, true);
                }
            }
            if (operationBoundaryIds != null)
            {
                foreach (var param in operationBoundaryIds)
                {
                    uri.AppendQuery("operationBoundaryIds", param, true);
                }
            }
            if (minOperationStartDateTime != null)
            {
                uri.AppendQuery("minOperationStartDateTime", minOperationStartDateTime.Value, "O", true);
            }
            if (maxOperationStartDateTime != null)
            {
                uri.AppendQuery("maxOperationStartDateTime", maxOperationStartDateTime.Value, "O", true);
            }
            if (minOperationEndDateTime != null)
            {
                uri.AppendQuery("minOperationEndDateTime", minOperationEndDateTime.Value, "O", true);
            }
            if (maxOperationEndDateTime != null)
            {
                uri.AppendQuery("maxOperationEndDateTime", maxOperationEndDateTime.Value, "O", true);
            }
            if (minOperationModifiedDateTime != null)
            {
                uri.AppendQuery("minOperationModifiedDateTime", minOperationModifiedDateTime.Value, "O", true);
            }
            if (maxOperationModifiedDateTime != null)
            {
                uri.AppendQuery("maxOperationModifiedDateTime", maxOperationModifiedDateTime.Value, "O", true);
            }
            if (minArea != null)
            {
                uri.AppendQuery("minArea", minArea.Value, true);
            }
            if (maxArea != null)
            {
                uri.AppendQuery("maxArea", maxArea.Value, true);
            }
            if (ids != null)
            {
                foreach (var param in ids)
                {
                    uri.AppendQuery("ids", param, true);
                }
            }
            if (names != null)
            {
                foreach (var param in names)
                {
                    uri.AppendQuery("names", param, true);
                }
            }
            if (propertyFilters != null)
            {
                foreach (var param in propertyFilters)
                {
                    uri.AppendQuery("propertyFilters", param, true);
                }
            }
            if (statuses != null)
            {
                foreach (var param in statuses)
                {
                    uri.AppendQuery("statuses", param, true);
                }
            }
            if (minCreatedDateTime != null)
            {
                uri.AppendQuery("minCreatedDateTime", minCreatedDateTime.Value, "O", true);
            }
            if (maxCreatedDateTime != null)
            {
                uri.AppendQuery("maxCreatedDateTime", maxCreatedDateTime.Value, "O", true);
            }
            if (minLastModifiedDateTime != null)
            {
                uri.AppendQuery("minLastModifiedDateTime", minLastModifiedDateTime.Value, "O", true);
            }
            if (maxLastModifiedDateTime != null)
            {
                uri.AppendQuery("maxLastModifiedDateTime", maxLastModifiedDateTime.Value, "O", true);
            }
            if (maxPageSize != null)
            {
                uri.AppendQuery("$maxPageSize", maxPageSize.Value, true);
            }
            if (skipToken != null)
            {
                uri.AppendQuery("$skipToken", skipToken, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.ResponseClassifier = ResponseClassifier200.Instance;
            return message;
        }

        internal HttpMessage CreateGetHarvestDataRequest(string farmerId, string harvestDataId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/farmers/", false);
            uri.AppendPath(farmerId, true);
            uri.AppendPath("/harvest-data/", false);
            uri.AppendPath(harvestDataId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.ResponseClassifier = ResponseClassifier200.Instance;
            return message;
        }

        internal HttpMessage CreateCreateOrUpdateRequest(string farmerId, string harvestDataId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context);
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/farmers/", false);
            uri.AppendPath(farmerId, true);
            uri.AppendPath("/harvest-data/", false);
            uri.AppendPath(harvestDataId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/merge-patch+json");
            request.Content = content;
            message.ResponseClassifier = ResponseClassifier200201.Instance;
            return message;
        }

        internal HttpMessage CreateDeleteRequest(string farmerId, string harvestDataId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/farmers/", false);
            uri.AppendPath(farmerId, true);
            uri.AppendPath("/harvest-data/", false);
            uri.AppendPath(harvestDataId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.ResponseClassifier = ResponseClassifier204.Instance;
            return message;
        }

        internal HttpMessage CreateGetAllHarvestDataByFarmerIdNextPageRequest(string nextLink, string farmerId, double? minTotalYield, double? maxTotalYield, double? minAvgYield, double? maxAvgYield, double? minTotalWetMass, double? maxTotalWetMass, double? minAvgWetMass, double? maxAvgWetMass, double? minAvgMoisture, double? maxAvgMoisture, double? minAvgSpeed, double? maxAvgSpeed, IEnumerable<string> sources, IEnumerable<string> associatedBoundaryIds, IEnumerable<string> operationBoundaryIds, DateTimeOffset? minOperationStartDateTime, DateTimeOffset? maxOperationStartDateTime, DateTimeOffset? minOperationEndDateTime, DateTimeOffset? maxOperationEndDateTime, DateTimeOffset? minOperationModifiedDateTime, DateTimeOffset? maxOperationModifiedDateTime, double? minArea, double? maxArea, IEnumerable<string> ids, IEnumerable<string> names, IEnumerable<string> propertyFilters, IEnumerable<string> statuses, DateTimeOffset? minCreatedDateTime, DateTimeOffset? maxCreatedDateTime, DateTimeOffset? minLastModifiedDateTime, DateTimeOffset? maxLastModifiedDateTime, int? maxPageSize, string skipToken, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.ResponseClassifier = ResponseClassifier200.Instance;
            return message;
        }

        internal HttpMessage CreateGetAllHarvestDataNextPageRequest(string nextLink, double? minTotalYield, double? maxTotalYield, double? minAvgYield, double? maxAvgYield, double? minTotalWetMass, double? maxTotalWetMass, double? minAvgWetMass, double? maxAvgWetMass, double? minAvgMoisture, double? maxAvgMoisture, double? minAvgSpeed, double? maxAvgSpeed, IEnumerable<string> sources, IEnumerable<string> associatedBoundaryIds, IEnumerable<string> operationBoundaryIds, DateTimeOffset? minOperationStartDateTime, DateTimeOffset? maxOperationStartDateTime, DateTimeOffset? minOperationEndDateTime, DateTimeOffset? maxOperationEndDateTime, DateTimeOffset? minOperationModifiedDateTime, DateTimeOffset? maxOperationModifiedDateTime, double? minArea, double? maxArea, IEnumerable<string> ids, IEnumerable<string> names, IEnumerable<string> propertyFilters, IEnumerable<string> statuses, DateTimeOffset? minCreatedDateTime, DateTimeOffset? maxCreatedDateTime, DateTimeOffset? minLastModifiedDateTime, DateTimeOffset? maxLastModifiedDateTime, int? maxPageSize, string skipToken, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            message.ResponseClassifier = ResponseClassifier200.Instance;
            return message;
        }

        private sealed class ResponseClassifier200 : ResponseClassifier
        {
            private static ResponseClassifier _instance;
            public static ResponseClassifier Instance => _instance ??= new ResponseClassifier200();
            public override bool IsErrorResponse(HttpMessage message)
            {
                return message.Response.Status switch
                {
                    200 => false,
                    _ => true
                };
            }
        }
        private sealed class ResponseClassifier200201 : ResponseClassifier
        {
            private static ResponseClassifier _instance;
            public static ResponseClassifier Instance => _instance ??= new ResponseClassifier200201();
            public override bool IsErrorResponse(HttpMessage message)
            {
                return message.Response.Status switch
                {
                    200 => false,
                    201 => false,
                    _ => true
                };
            }
        }
        private sealed class ResponseClassifier204 : ResponseClassifier
        {
            private static ResponseClassifier _instance;
            public static ResponseClassifier Instance => _instance ??= new ResponseClassifier204();
            public override bool IsErrorResponse(HttpMessage message)
            {
                return message.Response.Status switch
                {
                    204 => false,
                    _ => true
                };
            }
        }
    }
}
