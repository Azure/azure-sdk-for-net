// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Verticals.AgriFood.Farming
{
    /// <summary> The HarvestData service client. </summary>
    public partial class HarvestDataClient
    {
        private static readonly string[] AuthorizationScopes = new string[] { "https://farmbeats.azure.net/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of HarvestDataClient for mocking. </summary>
        protected HarvestDataClient()
        {
        }

        /// <summary> Initializes a new instance of HarvestDataClient. </summary>
        /// <param name="endpoint"> The endpoint of your FarmBeats resource (protocol and hostname, for example: https://{resourceName}.farmbeats.azure.net). </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public HarvestDataClient(Uri endpoint, TokenCredential credential) : this(endpoint, credential, new FarmBeatsClientOptions())
        {
        }

        /// <summary> Initializes a new instance of HarvestDataClient. </summary>
        /// <param name="endpoint"> The endpoint of your FarmBeats resource (protocol and hostname, for example: https://{resourceName}.farmbeats.azure.net). </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public HarvestDataClient(Uri endpoint, TokenCredential credential, FarmBeatsClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(credential, nameof(credential));
            options ??= new FarmBeatsClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) }, new ResponseClassifier());
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Get a specified harvest data resource under a particular farmer. </summary>
        /// <param name="farmerId"> ID of the associated farmer resource. </param>
        /// <param name="harvestDataId"> ID of the harvest data resource. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="farmerId"/> or <paramref name="harvestDataId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="farmerId"/> or <paramref name="harvestDataId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetHarvestDataAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new HarvestDataClient(endpoint, credential);
        /// 
        /// Response response = await client.GetHarvestDataAsync("<farmerId>", "<harvestDataId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("totalYield").GetProperty("unit").ToString());
        /// Console.WriteLine(result.GetProperty("totalYield").GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("avgYield").GetProperty("unit").ToString());
        /// Console.WriteLine(result.GetProperty("avgYield").GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("totalWetMass").GetProperty("unit").ToString());
        /// Console.WriteLine(result.GetProperty("totalWetMass").GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("avgWetMass").GetProperty("unit").ToString());
        /// Console.WriteLine(result.GetProperty("avgWetMass").GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("avgMoisture").GetProperty("unit").ToString());
        /// Console.WriteLine(result.GetProperty("avgMoisture").GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("avgSpeed").GetProperty("unit").ToString());
        /// Console.WriteLine(result.GetProperty("avgSpeed").GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("productName").ToString());
        /// Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("area").GetProperty("unit").ToString());
        /// Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("area").GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalYield").GetProperty("unit").ToString());
        /// Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalYield").GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgYield").GetProperty("unit").ToString());
        /// Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgYield").GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgMoisture").GetProperty("unit").ToString());
        /// Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgMoisture").GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalWetMass").GetProperty("unit").ToString());
        /// Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalWetMass").GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgWetMass").GetProperty("unit").ToString());
        /// Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgWetMass").GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("area").GetProperty("unit").ToString());
        /// Console.WriteLine(result.GetProperty("area").GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("operationModifiedDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("operationStartDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("operationEndDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("attachmentsLink").ToString());
        /// Console.WriteLine(result.GetProperty("associatedBoundaryId").ToString());
        /// Console.WriteLine(result.GetProperty("operationBoundaryId").ToString());
        /// Console.WriteLine(result.GetProperty("farmerId").ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("eTag").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>HarvestData</c>:
        /// <code>{
        ///   totalYield: {
        ///     unit: string, # Optional. Data unit.
        ///     value: number, # Optional. Data value.
        ///   }, # Optional. Schema for storing measurement reading and unit.
        ///   avgYield: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   totalWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   avgWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   avgMoisture: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   avgSpeed: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   harvestProductDetails: [
        ///     {
        ///       productName: string, # Optional. Name of the product.
        ///       area: Measure, # Optional. Schema for storing measurement reading and unit.
        ///       totalYield: Measure, # Optional. Schema for storing measurement reading and unit.
        ///       avgYield: Measure, # Optional. Schema for storing measurement reading and unit.
        ///       avgMoisture: Measure, # Optional. Schema for storing measurement reading and unit.
        ///       totalWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
        ///       avgWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
        ///     }
        ///   ], # Optional. Harvest product details.
        ///   area: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   source: string, # Optional. Source of the operation data.
        ///   operationModifiedDateTime: string (ISO 8601 Format), # Optional. Modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.
        /// Note: this will be specified by the source provider itself.
        ///   operationStartDateTime: string (ISO 8601 Format), # Optional. Start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   operationEndDateTime: string (ISO 8601 Format), # Optional. End date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   attachmentsLink: string, # Optional. Link for attachments.
        ///   associatedBoundaryId: string, # Optional. Optional boundary ID of the field for which operation was applied.
        ///   operationBoundaryId: string, # Optional. Optional boundary ID of the actual area for which operation was applied inside the specified field.
        ///   farmerId: string, # Optional. Farmer ID which belongs to the operation data.
        ///   id: string, # Optional. Unique resource ID.
        ///   eTag: string, # Optional. The ETag value to implement optimistic concurrency.
        ///   status: string, # Optional. Status of the resource.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetHarvestDataAsync(string farmerId, string harvestDataId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(farmerId, nameof(farmerId));
            Argument.AssertNotNullOrEmpty(harvestDataId, nameof(harvestDataId));

            using var scope = ClientDiagnostics.CreateScope("HarvestDataClient.GetHarvestData");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetHarvestDataRequest(farmerId, harvestDataId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a specified harvest data resource under a particular farmer. </summary>
        /// <param name="farmerId"> ID of the associated farmer resource. </param>
        /// <param name="harvestDataId"> ID of the harvest data resource. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="farmerId"/> or <paramref name="harvestDataId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="farmerId"/> or <paramref name="harvestDataId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetHarvestData with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new HarvestDataClient(endpoint, credential);
        /// 
        /// Response response = client.GetHarvestData("<farmerId>", "<harvestDataId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("totalYield").GetProperty("unit").ToString());
        /// Console.WriteLine(result.GetProperty("totalYield").GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("avgYield").GetProperty("unit").ToString());
        /// Console.WriteLine(result.GetProperty("avgYield").GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("totalWetMass").GetProperty("unit").ToString());
        /// Console.WriteLine(result.GetProperty("totalWetMass").GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("avgWetMass").GetProperty("unit").ToString());
        /// Console.WriteLine(result.GetProperty("avgWetMass").GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("avgMoisture").GetProperty("unit").ToString());
        /// Console.WriteLine(result.GetProperty("avgMoisture").GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("avgSpeed").GetProperty("unit").ToString());
        /// Console.WriteLine(result.GetProperty("avgSpeed").GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("productName").ToString());
        /// Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("area").GetProperty("unit").ToString());
        /// Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("area").GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalYield").GetProperty("unit").ToString());
        /// Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalYield").GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgYield").GetProperty("unit").ToString());
        /// Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgYield").GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgMoisture").GetProperty("unit").ToString());
        /// Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgMoisture").GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalWetMass").GetProperty("unit").ToString());
        /// Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalWetMass").GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgWetMass").GetProperty("unit").ToString());
        /// Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgWetMass").GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("area").GetProperty("unit").ToString());
        /// Console.WriteLine(result.GetProperty("area").GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("operationModifiedDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("operationStartDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("operationEndDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("attachmentsLink").ToString());
        /// Console.WriteLine(result.GetProperty("associatedBoundaryId").ToString());
        /// Console.WriteLine(result.GetProperty("operationBoundaryId").ToString());
        /// Console.WriteLine(result.GetProperty("farmerId").ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("eTag").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>HarvestData</c>:
        /// <code>{
        ///   totalYield: {
        ///     unit: string, # Optional. Data unit.
        ///     value: number, # Optional. Data value.
        ///   }, # Optional. Schema for storing measurement reading and unit.
        ///   avgYield: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   totalWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   avgWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   avgMoisture: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   avgSpeed: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   harvestProductDetails: [
        ///     {
        ///       productName: string, # Optional. Name of the product.
        ///       area: Measure, # Optional. Schema for storing measurement reading and unit.
        ///       totalYield: Measure, # Optional. Schema for storing measurement reading and unit.
        ///       avgYield: Measure, # Optional. Schema for storing measurement reading and unit.
        ///       avgMoisture: Measure, # Optional. Schema for storing measurement reading and unit.
        ///       totalWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
        ///       avgWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
        ///     }
        ///   ], # Optional. Harvest product details.
        ///   area: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   source: string, # Optional. Source of the operation data.
        ///   operationModifiedDateTime: string (ISO 8601 Format), # Optional. Modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.
        /// Note: this will be specified by the source provider itself.
        ///   operationStartDateTime: string (ISO 8601 Format), # Optional. Start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   operationEndDateTime: string (ISO 8601 Format), # Optional. End date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   attachmentsLink: string, # Optional. Link for attachments.
        ///   associatedBoundaryId: string, # Optional. Optional boundary ID of the field for which operation was applied.
        ///   operationBoundaryId: string, # Optional. Optional boundary ID of the actual area for which operation was applied inside the specified field.
        ///   farmerId: string, # Optional. Farmer ID which belongs to the operation data.
        ///   id: string, # Optional. Unique resource ID.
        ///   eTag: string, # Optional. The ETag value to implement optimistic concurrency.
        ///   status: string, # Optional. Status of the resource.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetHarvestData(string farmerId, string harvestDataId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(farmerId, nameof(farmerId));
            Argument.AssertNotNullOrEmpty(harvestDataId, nameof(harvestDataId));

            using var scope = ClientDiagnostics.CreateScope("HarvestDataClient.GetHarvestData");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetHarvestDataRequest(farmerId, harvestDataId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates or updates harvest data resource under a particular farmer. </summary>
        /// <param name="farmerId"> ID of the farmer. </param>
        /// <param name="harvestDataId"> ID of the harvest data resource. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="farmerId"/> or <paramref name="harvestDataId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="farmerId"/> or <paramref name="harvestDataId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateOrUpdateAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new HarvestDataClient(endpoint, credential);
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.CreateOrUpdateAsync("<farmerId>", "<harvestDataId>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call CreateOrUpdateAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new HarvestDataClient(endpoint, credential);
        /// 
        /// var data = new {
        ///     totalYield = new {
        ///         unit = "<MeasureUnit>",
        ///         value = 1234,
        ///     },
        ///     avgYield = new {
        ///         unit = "<MeasureUnit>",
        ///         value = 1234,
        ///     },
        ///     totalWetMass = new {
        ///         unit = "<MeasureUnit>",
        ///         value = 1234,
        ///     },
        ///     avgWetMass = new {
        ///         unit = "<MeasureUnit>",
        ///         value = 1234,
        ///     },
        ///     avgMoisture = new {
        ///         unit = "<MeasureUnit>",
        ///         value = 1234,
        ///     },
        ///     avgSpeed = new {
        ///         unit = "<MeasureUnit>",
        ///         value = 1234,
        ///     },
        ///     harvestProductDetails = new[] {
        ///         new {
        ///             productName = "<HarvestProductDetailProductName>",
        ///             area = new {
        ///                 unit = "<MeasureUnit>",
        ///                 value = 1234,
        ///             },
        ///             totalYield = new {
        ///                 unit = "<MeasureUnit>",
        ///                 value = 1234,
        ///             },
        ///             avgYield = new {
        ///                 unit = "<MeasureUnit>",
        ///                 value = 1234,
        ///             },
        ///             avgMoisture = new {
        ///                 unit = "<MeasureUnit>",
        ///                 value = 1234,
        ///             },
        ///             totalWetMass = new {
        ///                 unit = "<MeasureUnit>",
        ///                 value = 1234,
        ///             },
        ///             avgWetMass = new {
        ///                 unit = "<MeasureUnit>",
        ///                 value = 1234,
        ///             },
        ///         }
        ///     },
        ///     area = new {
        ///         unit = "<MeasureUnit>",
        ///         value = 1234,
        ///     },
        ///     source = "<HarvestDataSource>",
        ///     operationModifiedDateTime = "<2022-05-10T14:57:31.2311892-04:00>",
        ///     operationStartDateTime = "<2022-05-10T14:57:31.2311892-04:00>",
        ///     operationEndDateTime = "<2022-05-10T14:57:31.2311892-04:00>",
        ///     associatedBoundaryId = "<HarvestDataAssociatedBoundaryId>",
        ///     operationBoundaryId = "<HarvestDataOperationBoundaryId>",
        ///     status = "<HarvestDataStatus>",
        ///     name = "<HarvestDataName>",
        ///     description = "<HarvestDataDescription>",
        ///     properties = new {
        ///         key = new {},
        ///     },
        /// };
        /// 
        /// Response response = await client.CreateOrUpdateAsync("<farmerId>", "<harvestDataId>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("totalYield").GetProperty("unit").ToString());
        /// Console.WriteLine(result.GetProperty("totalYield").GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("avgYield").GetProperty("unit").ToString());
        /// Console.WriteLine(result.GetProperty("avgYield").GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("totalWetMass").GetProperty("unit").ToString());
        /// Console.WriteLine(result.GetProperty("totalWetMass").GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("avgWetMass").GetProperty("unit").ToString());
        /// Console.WriteLine(result.GetProperty("avgWetMass").GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("avgMoisture").GetProperty("unit").ToString());
        /// Console.WriteLine(result.GetProperty("avgMoisture").GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("avgSpeed").GetProperty("unit").ToString());
        /// Console.WriteLine(result.GetProperty("avgSpeed").GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("productName").ToString());
        /// Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("area").GetProperty("unit").ToString());
        /// Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("area").GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalYield").GetProperty("unit").ToString());
        /// Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalYield").GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgYield").GetProperty("unit").ToString());
        /// Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgYield").GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgMoisture").GetProperty("unit").ToString());
        /// Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgMoisture").GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalWetMass").GetProperty("unit").ToString());
        /// Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalWetMass").GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgWetMass").GetProperty("unit").ToString());
        /// Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgWetMass").GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("area").GetProperty("unit").ToString());
        /// Console.WriteLine(result.GetProperty("area").GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("operationModifiedDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("operationStartDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("operationEndDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("attachmentsLink").ToString());
        /// Console.WriteLine(result.GetProperty("associatedBoundaryId").ToString());
        /// Console.WriteLine(result.GetProperty("operationBoundaryId").ToString());
        /// Console.WriteLine(result.GetProperty("farmerId").ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("eTag").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>HarvestData</c>:
        /// <code>{
        ///   totalYield: {
        ///     unit: string, # Optional. Data unit.
        ///     value: number, # Optional. Data value.
        ///   }, # Optional. Schema for storing measurement reading and unit.
        ///   avgYield: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   totalWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   avgWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   avgMoisture: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   avgSpeed: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   harvestProductDetails: [
        ///     {
        ///       productName: string, # Optional. Name of the product.
        ///       area: Measure, # Optional. Schema for storing measurement reading and unit.
        ///       totalYield: Measure, # Optional. Schema for storing measurement reading and unit.
        ///       avgYield: Measure, # Optional. Schema for storing measurement reading and unit.
        ///       avgMoisture: Measure, # Optional. Schema for storing measurement reading and unit.
        ///       totalWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
        ///       avgWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
        ///     }
        ///   ], # Optional. Harvest product details.
        ///   area: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   source: string, # Optional. Source of the operation data.
        ///   operationModifiedDateTime: string (ISO 8601 Format), # Optional. Modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.
        /// Note: this will be specified by the source provider itself.
        ///   operationStartDateTime: string (ISO 8601 Format), # Optional. Start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   operationEndDateTime: string (ISO 8601 Format), # Optional. End date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   attachmentsLink: string, # Optional. Link for attachments.
        ///   associatedBoundaryId: string, # Optional. Optional boundary ID of the field for which operation was applied.
        ///   operationBoundaryId: string, # Optional. Optional boundary ID of the actual area for which operation was applied inside the specified field.
        ///   farmerId: string, # Optional. Farmer ID which belongs to the operation data.
        ///   id: string, # Optional. Unique resource ID.
        ///   eTag: string, # Optional. The ETag value to implement optimistic concurrency.
        ///   status: string, # Optional. Status of the resource.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>HarvestData</c>:
        /// <code>{
        ///   totalYield: {
        ///     unit: string, # Optional. Data unit.
        ///     value: number, # Optional. Data value.
        ///   }, # Optional. Schema for storing measurement reading and unit.
        ///   avgYield: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   totalWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   avgWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   avgMoisture: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   avgSpeed: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   harvestProductDetails: [
        ///     {
        ///       productName: string, # Optional. Name of the product.
        ///       area: Measure, # Optional. Schema for storing measurement reading and unit.
        ///       totalYield: Measure, # Optional. Schema for storing measurement reading and unit.
        ///       avgYield: Measure, # Optional. Schema for storing measurement reading and unit.
        ///       avgMoisture: Measure, # Optional. Schema for storing measurement reading and unit.
        ///       totalWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
        ///       avgWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
        ///     }
        ///   ], # Optional. Harvest product details.
        ///   area: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   source: string, # Optional. Source of the operation data.
        ///   operationModifiedDateTime: string (ISO 8601 Format), # Optional. Modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.
        /// Note: this will be specified by the source provider itself.
        ///   operationStartDateTime: string (ISO 8601 Format), # Optional. Start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   operationEndDateTime: string (ISO 8601 Format), # Optional. End date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   attachmentsLink: string, # Optional. Link for attachments.
        ///   associatedBoundaryId: string, # Optional. Optional boundary ID of the field for which operation was applied.
        ///   operationBoundaryId: string, # Optional. Optional boundary ID of the actual area for which operation was applied inside the specified field.
        ///   farmerId: string, # Optional. Farmer ID which belongs to the operation data.
        ///   id: string, # Optional. Unique resource ID.
        ///   eTag: string, # Optional. The ETag value to implement optimistic concurrency.
        ///   status: string, # Optional. Status of the resource.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> CreateOrUpdateAsync(string farmerId, string harvestDataId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(farmerId, nameof(farmerId));
            Argument.AssertNotNullOrEmpty(harvestDataId, nameof(harvestDataId));

            using var scope = ClientDiagnostics.CreateScope("HarvestDataClient.CreateOrUpdate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateRequest(farmerId, harvestDataId, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates or updates harvest data resource under a particular farmer. </summary>
        /// <param name="farmerId"> ID of the farmer. </param>
        /// <param name="harvestDataId"> ID of the harvest data resource. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="farmerId"/> or <paramref name="harvestDataId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="farmerId"/> or <paramref name="harvestDataId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateOrUpdate with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new HarvestDataClient(endpoint, credential);
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.CreateOrUpdate("<farmerId>", "<harvestDataId>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call CreateOrUpdate with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new HarvestDataClient(endpoint, credential);
        /// 
        /// var data = new {
        ///     totalYield = new {
        ///         unit = "<MeasureUnit>",
        ///         value = 1234,
        ///     },
        ///     avgYield = new {
        ///         unit = "<MeasureUnit>",
        ///         value = 1234,
        ///     },
        ///     totalWetMass = new {
        ///         unit = "<MeasureUnit>",
        ///         value = 1234,
        ///     },
        ///     avgWetMass = new {
        ///         unit = "<MeasureUnit>",
        ///         value = 1234,
        ///     },
        ///     avgMoisture = new {
        ///         unit = "<MeasureUnit>",
        ///         value = 1234,
        ///     },
        ///     avgSpeed = new {
        ///         unit = "<MeasureUnit>",
        ///         value = 1234,
        ///     },
        ///     harvestProductDetails = new[] {
        ///         new {
        ///             productName = "<HarvestProductDetailProductName>",
        ///             area = new {
        ///                 unit = "<MeasureUnit>",
        ///                 value = 1234,
        ///             },
        ///             totalYield = new {
        ///                 unit = "<MeasureUnit>",
        ///                 value = 1234,
        ///             },
        ///             avgYield = new {
        ///                 unit = "<MeasureUnit>",
        ///                 value = 1234,
        ///             },
        ///             avgMoisture = new {
        ///                 unit = "<MeasureUnit>",
        ///                 value = 1234,
        ///             },
        ///             totalWetMass = new {
        ///                 unit = "<MeasureUnit>",
        ///                 value = 1234,
        ///             },
        ///             avgWetMass = new {
        ///                 unit = "<MeasureUnit>",
        ///                 value = 1234,
        ///             },
        ///         }
        ///     },
        ///     area = new {
        ///         unit = "<MeasureUnit>",
        ///         value = 1234,
        ///     },
        ///     source = "<HarvestDataSource>",
        ///     operationModifiedDateTime = "<2022-05-10T14:57:31.2311892-04:00>",
        ///     operationStartDateTime = "<2022-05-10T14:57:31.2311892-04:00>",
        ///     operationEndDateTime = "<2022-05-10T14:57:31.2311892-04:00>",
        ///     associatedBoundaryId = "<HarvestDataAssociatedBoundaryId>",
        ///     operationBoundaryId = "<HarvestDataOperationBoundaryId>",
        ///     status = "<HarvestDataStatus>",
        ///     name = "<HarvestDataName>",
        ///     description = "<HarvestDataDescription>",
        ///     properties = new {
        ///         key = new {},
        ///     },
        /// };
        /// 
        /// Response response = client.CreateOrUpdate("<farmerId>", "<harvestDataId>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("totalYield").GetProperty("unit").ToString());
        /// Console.WriteLine(result.GetProperty("totalYield").GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("avgYield").GetProperty("unit").ToString());
        /// Console.WriteLine(result.GetProperty("avgYield").GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("totalWetMass").GetProperty("unit").ToString());
        /// Console.WriteLine(result.GetProperty("totalWetMass").GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("avgWetMass").GetProperty("unit").ToString());
        /// Console.WriteLine(result.GetProperty("avgWetMass").GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("avgMoisture").GetProperty("unit").ToString());
        /// Console.WriteLine(result.GetProperty("avgMoisture").GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("avgSpeed").GetProperty("unit").ToString());
        /// Console.WriteLine(result.GetProperty("avgSpeed").GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("productName").ToString());
        /// Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("area").GetProperty("unit").ToString());
        /// Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("area").GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalYield").GetProperty("unit").ToString());
        /// Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalYield").GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgYield").GetProperty("unit").ToString());
        /// Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgYield").GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgMoisture").GetProperty("unit").ToString());
        /// Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgMoisture").GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalWetMass").GetProperty("unit").ToString());
        /// Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalWetMass").GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgWetMass").GetProperty("unit").ToString());
        /// Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgWetMass").GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("area").GetProperty("unit").ToString());
        /// Console.WriteLine(result.GetProperty("area").GetProperty("value").ToString());
        /// Console.WriteLine(result.GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("operationModifiedDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("operationStartDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("operationEndDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("attachmentsLink").ToString());
        /// Console.WriteLine(result.GetProperty("associatedBoundaryId").ToString());
        /// Console.WriteLine(result.GetProperty("operationBoundaryId").ToString());
        /// Console.WriteLine(result.GetProperty("farmerId").ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("eTag").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>HarvestData</c>:
        /// <code>{
        ///   totalYield: {
        ///     unit: string, # Optional. Data unit.
        ///     value: number, # Optional. Data value.
        ///   }, # Optional. Schema for storing measurement reading and unit.
        ///   avgYield: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   totalWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   avgWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   avgMoisture: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   avgSpeed: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   harvestProductDetails: [
        ///     {
        ///       productName: string, # Optional. Name of the product.
        ///       area: Measure, # Optional. Schema for storing measurement reading and unit.
        ///       totalYield: Measure, # Optional. Schema for storing measurement reading and unit.
        ///       avgYield: Measure, # Optional. Schema for storing measurement reading and unit.
        ///       avgMoisture: Measure, # Optional. Schema for storing measurement reading and unit.
        ///       totalWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
        ///       avgWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
        ///     }
        ///   ], # Optional. Harvest product details.
        ///   area: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   source: string, # Optional. Source of the operation data.
        ///   operationModifiedDateTime: string (ISO 8601 Format), # Optional. Modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.
        /// Note: this will be specified by the source provider itself.
        ///   operationStartDateTime: string (ISO 8601 Format), # Optional. Start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   operationEndDateTime: string (ISO 8601 Format), # Optional. End date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   attachmentsLink: string, # Optional. Link for attachments.
        ///   associatedBoundaryId: string, # Optional. Optional boundary ID of the field for which operation was applied.
        ///   operationBoundaryId: string, # Optional. Optional boundary ID of the actual area for which operation was applied inside the specified field.
        ///   farmerId: string, # Optional. Farmer ID which belongs to the operation data.
        ///   id: string, # Optional. Unique resource ID.
        ///   eTag: string, # Optional. The ETag value to implement optimistic concurrency.
        ///   status: string, # Optional. Status of the resource.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>HarvestData</c>:
        /// <code>{
        ///   totalYield: {
        ///     unit: string, # Optional. Data unit.
        ///     value: number, # Optional. Data value.
        ///   }, # Optional. Schema for storing measurement reading and unit.
        ///   avgYield: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   totalWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   avgWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   avgMoisture: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   avgSpeed: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   harvestProductDetails: [
        ///     {
        ///       productName: string, # Optional. Name of the product.
        ///       area: Measure, # Optional. Schema for storing measurement reading and unit.
        ///       totalYield: Measure, # Optional. Schema for storing measurement reading and unit.
        ///       avgYield: Measure, # Optional. Schema for storing measurement reading and unit.
        ///       avgMoisture: Measure, # Optional. Schema for storing measurement reading and unit.
        ///       totalWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
        ///       avgWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
        ///     }
        ///   ], # Optional. Harvest product details.
        ///   area: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   source: string, # Optional. Source of the operation data.
        ///   operationModifiedDateTime: string (ISO 8601 Format), # Optional. Modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.
        /// Note: this will be specified by the source provider itself.
        ///   operationStartDateTime: string (ISO 8601 Format), # Optional. Start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   operationEndDateTime: string (ISO 8601 Format), # Optional. End date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   attachmentsLink: string, # Optional. Link for attachments.
        ///   associatedBoundaryId: string, # Optional. Optional boundary ID of the field for which operation was applied.
        ///   operationBoundaryId: string, # Optional. Optional boundary ID of the actual area for which operation was applied inside the specified field.
        ///   farmerId: string, # Optional. Farmer ID which belongs to the operation data.
        ///   id: string, # Optional. Unique resource ID.
        ///   eTag: string, # Optional. The ETag value to implement optimistic concurrency.
        ///   status: string, # Optional. Status of the resource.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response CreateOrUpdate(string farmerId, string harvestDataId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(farmerId, nameof(farmerId));
            Argument.AssertNotNullOrEmpty(harvestDataId, nameof(harvestDataId));

            using var scope = ClientDiagnostics.CreateScope("HarvestDataClient.CreateOrUpdate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateRequest(farmerId, harvestDataId, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a specified harvest data resource under a particular farmer. </summary>
        /// <param name="farmerId"> ID of the associated farmer resource. </param>
        /// <param name="harvestDataId"> ID of the harvest data. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="farmerId"/> or <paramref name="harvestDataId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="farmerId"/> or <paramref name="harvestDataId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteAsync with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new HarvestDataClient(endpoint, credential);
        /// 
        /// Response response = await client.DeleteAsync("<farmerId>", "<harvestDataId>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> DeleteAsync(string farmerId, string harvestDataId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(farmerId, nameof(farmerId));
            Argument.AssertNotNullOrEmpty(harvestDataId, nameof(harvestDataId));

            using var scope = ClientDiagnostics.CreateScope("HarvestDataClient.Delete");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteRequest(farmerId, harvestDataId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a specified harvest data resource under a particular farmer. </summary>
        /// <param name="farmerId"> ID of the associated farmer resource. </param>
        /// <param name="harvestDataId"> ID of the harvest data. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="farmerId"/> or <paramref name="harvestDataId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="farmerId"/> or <paramref name="harvestDataId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call Delete with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new HarvestDataClient(endpoint, credential);
        /// 
        /// Response response = client.Delete("<farmerId>", "<harvestDataId>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response Delete(string farmerId, string harvestDataId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(farmerId, nameof(farmerId));
            Argument.AssertNotNullOrEmpty(harvestDataId, nameof(harvestDataId));

            using var scope = ClientDiagnostics.CreateScope("HarvestDataClient.Delete");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteRequest(farmerId, harvestDataId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a paginated list of harvest data resources under a particular farm. </summary>
        /// <param name="farmerId"> ID of the associated farmer. </param>
        /// <param name="minTotalYield"> Minimum Yield value(inclusive). </param>
        /// <param name="maxTotalYield"> Maximum Yield value (inclusive). </param>
        /// <param name="minAvgYield"> Minimum AvgYield value(inclusive). </param>
        /// <param name="maxAvgYield"> Maximum AvgYield value (inclusive). </param>
        /// <param name="minTotalWetMass"> Minimum Total WetMass value(inclusive). </param>
        /// <param name="maxTotalWetMass"> Maximum Total WetMass value (inclusive). </param>
        /// <param name="minAvgWetMass"> Minimum AvgWetMass value(inclusive). </param>
        /// <param name="maxAvgWetMass"> Maximum AvgWetMass value (inclusive). </param>
        /// <param name="minAvgMoisture"> Minimum AvgMoisture value(inclusive). </param>
        /// <param name="maxAvgMoisture"> Maximum AvgMoisture value (inclusive). </param>
        /// <param name="minAvgSpeed"> Minimum AvgSpeed value(inclusive). </param>
        /// <param name="maxAvgSpeed"> Maximum AvgSpeed value (inclusive). </param>
        /// <param name="sources"> Sources of the operation data. </param>
        /// <param name="associatedBoundaryIds"> Boundary IDs associated with operation data. </param>
        /// <param name="operationBoundaryIds"> Operation boundary IDs associated with operation data. </param>
        /// <param name="minOperationStartDateTime"> Minimum start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="maxOperationStartDateTime"> Maximum start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="minOperationEndDateTime"> Minimum end date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="maxOperationEndDateTime"> Maximum end date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="minOperationModifiedDateTime"> Minimum modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="maxOperationModifiedDateTime"> Maximum modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="minArea"> Minimum area for which operation was applied (inclusive). </param>
        /// <param name="maxArea"> Maximum area for which operation was applied (inclusive). </param>
        /// <param name="ids"> Ids of the resource. </param>
        /// <param name="names"> Names of the resource. </param>
        /// <param name="propertyFilters">
        /// Filters on key-value pairs within the Properties object.
        /// eg. &quot;{testKey} eq {testValue}&quot;.
        /// </param>
        /// <param name="statuses"> Statuses of the resource. </param>
        /// <param name="minCreatedDateTime"> Minimum creation date of resource (inclusive). </param>
        /// <param name="maxCreatedDateTime"> Maximum creation date of resource (inclusive). </param>
        /// <param name="minLastModifiedDateTime"> Minimum last modified date of resource (inclusive). </param>
        /// <param name="maxLastModifiedDateTime"> Maximum last modified date of resource (inclusive). </param>
        /// <param name="maxPageSize">
        /// Maximum number of items needed (inclusive).
        /// Minimum = 10, Maximum = 1000, Default value = 50.
        /// </param>
        /// <param name="skipToken"> Skip token for getting next set of results. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="farmerId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="farmerId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetAllHarvestDataByFarmerIdAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new HarvestDataClient(endpoint, credential);
        /// 
        /// await foreach (var data in client.GetAllHarvestDataByFarmerIdAsync("<farmerId>"))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.ToString());
        /// }
        /// ]]></code>
        /// This sample shows how to call GetAllHarvestDataByFarmerIdAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new HarvestDataClient(endpoint, credential);
        /// 
        /// await foreach (var data in client.GetAllHarvestDataByFarmerIdAsync("<farmerId>", 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, new String[]{"<sources>"}, new String[]{"<associatedBoundaryIds>"}, new String[]{"<operationBoundaryIds>"}, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 1234, 1234, new String[]{"<ids>"}, new String[]{"<names>"}, new String[]{"<propertyFilters>"}, new String[]{"<statuses>"}, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 1234, "<skipToken>"))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.GetProperty("totalYield").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("totalYield").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("avgYield").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("avgYield").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("totalWetMass").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("totalWetMass").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("avgWetMass").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("avgWetMass").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("avgMoisture").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("avgMoisture").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("avgSpeed").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("avgSpeed").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("productName").ToString());
        ///     Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("area").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("area").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalYield").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalYield").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgYield").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgYield").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgMoisture").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgMoisture").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalWetMass").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalWetMass").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgWetMass").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgWetMass").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("area").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("area").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("source").ToString());
        ///     Console.WriteLine(result.GetProperty("operationModifiedDateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("operationStartDateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("operationEndDateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("attachmentsLink").ToString());
        ///     Console.WriteLine(result.GetProperty("associatedBoundaryId").ToString());
        ///     Console.WriteLine(result.GetProperty("operationBoundaryId").ToString());
        ///     Console.WriteLine(result.GetProperty("farmerId").ToString());
        ///     Console.WriteLine(result.GetProperty("id").ToString());
        ///     Console.WriteLine(result.GetProperty("eTag").ToString());
        ///     Console.WriteLine(result.GetProperty("status").ToString());
        ///     Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("name").ToString());
        ///     Console.WriteLine(result.GetProperty("description").ToString());
        ///     Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
        /// }
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for one item in the pageable response.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>HarvestDataListResponseValue</c>:
        /// <code>{
        ///   totalYield: {
        ///     unit: string, # Optional. Data unit.
        ///     value: number, # Optional. Data value.
        ///   }, # Optional. Schema for storing measurement reading and unit.
        ///   avgYield: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   totalWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   avgWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   avgMoisture: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   avgSpeed: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   harvestProductDetails: [
        ///     {
        ///       productName: string, # Optional. Name of the product.
        ///       area: Measure, # Optional. Schema for storing measurement reading and unit.
        ///       totalYield: Measure, # Optional. Schema for storing measurement reading and unit.
        ///       avgYield: Measure, # Optional. Schema for storing measurement reading and unit.
        ///       avgMoisture: Measure, # Optional. Schema for storing measurement reading and unit.
        ///       totalWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
        ///       avgWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
        ///     }
        ///   ], # Optional. Harvest product details.
        ///   area: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   source: string, # Optional. Source of the operation data.
        ///   operationModifiedDateTime: string (ISO 8601 Format), # Optional. Modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.
        /// Note: this will be specified by the source provider itself.
        ///   operationStartDateTime: string (ISO 8601 Format), # Optional. Start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   operationEndDateTime: string (ISO 8601 Format), # Optional. End date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   attachmentsLink: string, # Optional. Link for attachments.
        ///   associatedBoundaryId: string, # Optional. Optional boundary ID of the field for which operation was applied.
        ///   operationBoundaryId: string, # Optional. Optional boundary ID of the actual area for which operation was applied inside the specified field.
        ///   farmerId: string, # Optional. Farmer ID which belongs to the operation data.
        ///   id: string, # Optional. Unique resource ID.
        ///   eTag: string, # Optional. The ETag value to implement optimistic concurrency.
        ///   status: string, # Optional. Status of the resource.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual AsyncPageable<BinaryData> GetAllHarvestDataByFarmerIdAsync(string farmerId, double? minTotalYield = null, double? maxTotalYield = null, double? minAvgYield = null, double? maxAvgYield = null, double? minTotalWetMass = null, double? maxTotalWetMass = null, double? minAvgWetMass = null, double? maxAvgWetMass = null, double? minAvgMoisture = null, double? maxAvgMoisture = null, double? minAvgSpeed = null, double? maxAvgSpeed = null, IEnumerable<string> sources = null, IEnumerable<string> associatedBoundaryIds = null, IEnumerable<string> operationBoundaryIds = null, DateTimeOffset? minOperationStartDateTime = null, DateTimeOffset? maxOperationStartDateTime = null, DateTimeOffset? minOperationEndDateTime = null, DateTimeOffset? maxOperationEndDateTime = null, DateTimeOffset? minOperationModifiedDateTime = null, DateTimeOffset? maxOperationModifiedDateTime = null, double? minArea = null, double? maxArea = null, IEnumerable<string> ids = null, IEnumerable<string> names = null, IEnumerable<string> propertyFilters = null, IEnumerable<string> statuses = null, DateTimeOffset? minCreatedDateTime = null, DateTimeOffset? maxCreatedDateTime = null, DateTimeOffset? minLastModifiedDateTime = null, DateTimeOffset? maxLastModifiedDateTime = null, int? maxPageSize = null, string skipToken = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(farmerId, nameof(farmerId));

            return GetAllHarvestDataByFarmerIdImplementationAsync("HarvestDataClient.GetAllHarvestDataByFarmerId", farmerId, minTotalYield, maxTotalYield, minAvgYield, maxAvgYield, minTotalWetMass, maxTotalWetMass, minAvgWetMass, maxAvgWetMass, minAvgMoisture, maxAvgMoisture, minAvgSpeed, maxAvgSpeed, sources, associatedBoundaryIds, operationBoundaryIds, minOperationStartDateTime, maxOperationStartDateTime, minOperationEndDateTime, maxOperationEndDateTime, minOperationModifiedDateTime, maxOperationModifiedDateTime, minArea, maxArea, ids, names, propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken, context);
        }

        private AsyncPageable<BinaryData> GetAllHarvestDataByFarmerIdImplementationAsync(string diagnosticsScopeName, string farmerId, double? minTotalYield, double? maxTotalYield, double? minAvgYield, double? maxAvgYield, double? minTotalWetMass, double? maxTotalWetMass, double? minAvgWetMass, double? maxAvgWetMass, double? minAvgMoisture, double? maxAvgMoisture, double? minAvgSpeed, double? maxAvgSpeed, IEnumerable<string> sources, IEnumerable<string> associatedBoundaryIds, IEnumerable<string> operationBoundaryIds, DateTimeOffset? minOperationStartDateTime, DateTimeOffset? maxOperationStartDateTime, DateTimeOffset? minOperationEndDateTime, DateTimeOffset? maxOperationEndDateTime, DateTimeOffset? minOperationModifiedDateTime, DateTimeOffset? maxOperationModifiedDateTime, double? minArea, double? maxArea, IEnumerable<string> ids, IEnumerable<string> names, IEnumerable<string> propertyFilters, IEnumerable<string> statuses, DateTimeOffset? minCreatedDateTime, DateTimeOffset? maxCreatedDateTime, DateTimeOffset? minLastModifiedDateTime, DateTimeOffset? maxLastModifiedDateTime, int? maxPageSize, string skipToken, RequestContext context)
        {
            return PageableHelpers.CreateAsyncPageable(CreateEnumerableAsync, ClientDiagnostics, diagnosticsScopeName);
            async IAsyncEnumerable<Page<BinaryData>> CreateEnumerableAsync(string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken = default)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetAllHarvestDataByFarmerIdRequest(farmerId, minTotalYield, maxTotalYield, minAvgYield, maxAvgYield, minTotalWetMass, maxTotalWetMass, minAvgWetMass, maxAvgWetMass, minAvgMoisture, maxAvgMoisture, minAvgSpeed, maxAvgSpeed, sources, associatedBoundaryIds, operationBoundaryIds, minOperationStartDateTime, maxOperationStartDateTime, minOperationEndDateTime, maxOperationEndDateTime, minOperationModifiedDateTime, maxOperationModifiedDateTime, minArea, maxArea, ids, names, propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken, context)
                        : CreateGetAllHarvestDataByFarmerIdNextPageRequest(nextLink, farmerId, minTotalYield, maxTotalYield, minAvgYield, maxAvgYield, minTotalWetMass, maxTotalWetMass, minAvgWetMass, maxAvgWetMass, minAvgMoisture, maxAvgMoisture, minAvgSpeed, maxAvgSpeed, sources, associatedBoundaryIds, operationBoundaryIds, minOperationStartDateTime, maxOperationStartDateTime, minOperationEndDateTime, maxOperationEndDateTime, minOperationModifiedDateTime, maxOperationModifiedDateTime, minArea, maxArea, ids, names, propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken, context);
                    var page = await LowLevelPageableHelpers.ProcessMessageAsync(_pipeline, message, context, "value", "nextLink", cancellationToken).ConfigureAwait(false);
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Returns a paginated list of harvest data resources under a particular farm. </summary>
        /// <param name="farmerId"> ID of the associated farmer. </param>
        /// <param name="minTotalYield"> Minimum Yield value(inclusive). </param>
        /// <param name="maxTotalYield"> Maximum Yield value (inclusive). </param>
        /// <param name="minAvgYield"> Minimum AvgYield value(inclusive). </param>
        /// <param name="maxAvgYield"> Maximum AvgYield value (inclusive). </param>
        /// <param name="minTotalWetMass"> Minimum Total WetMass value(inclusive). </param>
        /// <param name="maxTotalWetMass"> Maximum Total WetMass value (inclusive). </param>
        /// <param name="minAvgWetMass"> Minimum AvgWetMass value(inclusive). </param>
        /// <param name="maxAvgWetMass"> Maximum AvgWetMass value (inclusive). </param>
        /// <param name="minAvgMoisture"> Minimum AvgMoisture value(inclusive). </param>
        /// <param name="maxAvgMoisture"> Maximum AvgMoisture value (inclusive). </param>
        /// <param name="minAvgSpeed"> Minimum AvgSpeed value(inclusive). </param>
        /// <param name="maxAvgSpeed"> Maximum AvgSpeed value (inclusive). </param>
        /// <param name="sources"> Sources of the operation data. </param>
        /// <param name="associatedBoundaryIds"> Boundary IDs associated with operation data. </param>
        /// <param name="operationBoundaryIds"> Operation boundary IDs associated with operation data. </param>
        /// <param name="minOperationStartDateTime"> Minimum start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="maxOperationStartDateTime"> Maximum start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="minOperationEndDateTime"> Minimum end date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="maxOperationEndDateTime"> Maximum end date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="minOperationModifiedDateTime"> Minimum modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="maxOperationModifiedDateTime"> Maximum modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="minArea"> Minimum area for which operation was applied (inclusive). </param>
        /// <param name="maxArea"> Maximum area for which operation was applied (inclusive). </param>
        /// <param name="ids"> Ids of the resource. </param>
        /// <param name="names"> Names of the resource. </param>
        /// <param name="propertyFilters">
        /// Filters on key-value pairs within the Properties object.
        /// eg. &quot;{testKey} eq {testValue}&quot;.
        /// </param>
        /// <param name="statuses"> Statuses of the resource. </param>
        /// <param name="minCreatedDateTime"> Minimum creation date of resource (inclusive). </param>
        /// <param name="maxCreatedDateTime"> Maximum creation date of resource (inclusive). </param>
        /// <param name="minLastModifiedDateTime"> Minimum last modified date of resource (inclusive). </param>
        /// <param name="maxLastModifiedDateTime"> Maximum last modified date of resource (inclusive). </param>
        /// <param name="maxPageSize">
        /// Maximum number of items needed (inclusive).
        /// Minimum = 10, Maximum = 1000, Default value = 50.
        /// </param>
        /// <param name="skipToken"> Skip token for getting next set of results. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="farmerId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="farmerId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetAllHarvestDataByFarmerId with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new HarvestDataClient(endpoint, credential);
        /// 
        /// foreach (var data in client.GetAllHarvestDataByFarmerId("<farmerId>"))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.ToString());
        /// }
        /// ]]></code>
        /// This sample shows how to call GetAllHarvestDataByFarmerId with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new HarvestDataClient(endpoint, credential);
        /// 
        /// foreach (var data in client.GetAllHarvestDataByFarmerId("<farmerId>", 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, new String[]{"<sources>"}, new String[]{"<associatedBoundaryIds>"}, new String[]{"<operationBoundaryIds>"}, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 1234, 1234, new String[]{"<ids>"}, new String[]{"<names>"}, new String[]{"<propertyFilters>"}, new String[]{"<statuses>"}, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 1234, "<skipToken>"))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.GetProperty("totalYield").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("totalYield").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("avgYield").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("avgYield").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("totalWetMass").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("totalWetMass").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("avgWetMass").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("avgWetMass").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("avgMoisture").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("avgMoisture").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("avgSpeed").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("avgSpeed").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("productName").ToString());
        ///     Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("area").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("area").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalYield").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalYield").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgYield").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgYield").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgMoisture").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgMoisture").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalWetMass").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalWetMass").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgWetMass").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgWetMass").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("area").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("area").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("source").ToString());
        ///     Console.WriteLine(result.GetProperty("operationModifiedDateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("operationStartDateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("operationEndDateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("attachmentsLink").ToString());
        ///     Console.WriteLine(result.GetProperty("associatedBoundaryId").ToString());
        ///     Console.WriteLine(result.GetProperty("operationBoundaryId").ToString());
        ///     Console.WriteLine(result.GetProperty("farmerId").ToString());
        ///     Console.WriteLine(result.GetProperty("id").ToString());
        ///     Console.WriteLine(result.GetProperty("eTag").ToString());
        ///     Console.WriteLine(result.GetProperty("status").ToString());
        ///     Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("name").ToString());
        ///     Console.WriteLine(result.GetProperty("description").ToString());
        ///     Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
        /// }
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for one item in the pageable response.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>HarvestDataListResponseValue</c>:
        /// <code>{
        ///   totalYield: {
        ///     unit: string, # Optional. Data unit.
        ///     value: number, # Optional. Data value.
        ///   }, # Optional. Schema for storing measurement reading and unit.
        ///   avgYield: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   totalWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   avgWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   avgMoisture: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   avgSpeed: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   harvestProductDetails: [
        ///     {
        ///       productName: string, # Optional. Name of the product.
        ///       area: Measure, # Optional. Schema for storing measurement reading and unit.
        ///       totalYield: Measure, # Optional. Schema for storing measurement reading and unit.
        ///       avgYield: Measure, # Optional. Schema for storing measurement reading and unit.
        ///       avgMoisture: Measure, # Optional. Schema for storing measurement reading and unit.
        ///       totalWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
        ///       avgWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
        ///     }
        ///   ], # Optional. Harvest product details.
        ///   area: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   source: string, # Optional. Source of the operation data.
        ///   operationModifiedDateTime: string (ISO 8601 Format), # Optional. Modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.
        /// Note: this will be specified by the source provider itself.
        ///   operationStartDateTime: string (ISO 8601 Format), # Optional. Start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   operationEndDateTime: string (ISO 8601 Format), # Optional. End date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   attachmentsLink: string, # Optional. Link for attachments.
        ///   associatedBoundaryId: string, # Optional. Optional boundary ID of the field for which operation was applied.
        ///   operationBoundaryId: string, # Optional. Optional boundary ID of the actual area for which operation was applied inside the specified field.
        ///   farmerId: string, # Optional. Farmer ID which belongs to the operation data.
        ///   id: string, # Optional. Unique resource ID.
        ///   eTag: string, # Optional. The ETag value to implement optimistic concurrency.
        ///   status: string, # Optional. Status of the resource.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Pageable<BinaryData> GetAllHarvestDataByFarmerId(string farmerId, double? minTotalYield = null, double? maxTotalYield = null, double? minAvgYield = null, double? maxAvgYield = null, double? minTotalWetMass = null, double? maxTotalWetMass = null, double? minAvgWetMass = null, double? maxAvgWetMass = null, double? minAvgMoisture = null, double? maxAvgMoisture = null, double? minAvgSpeed = null, double? maxAvgSpeed = null, IEnumerable<string> sources = null, IEnumerable<string> associatedBoundaryIds = null, IEnumerable<string> operationBoundaryIds = null, DateTimeOffset? minOperationStartDateTime = null, DateTimeOffset? maxOperationStartDateTime = null, DateTimeOffset? minOperationEndDateTime = null, DateTimeOffset? maxOperationEndDateTime = null, DateTimeOffset? minOperationModifiedDateTime = null, DateTimeOffset? maxOperationModifiedDateTime = null, double? minArea = null, double? maxArea = null, IEnumerable<string> ids = null, IEnumerable<string> names = null, IEnumerable<string> propertyFilters = null, IEnumerable<string> statuses = null, DateTimeOffset? minCreatedDateTime = null, DateTimeOffset? maxCreatedDateTime = null, DateTimeOffset? minLastModifiedDateTime = null, DateTimeOffset? maxLastModifiedDateTime = null, int? maxPageSize = null, string skipToken = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(farmerId, nameof(farmerId));

            return GetAllHarvestDataByFarmerIdImplementation("HarvestDataClient.GetAllHarvestDataByFarmerId", farmerId, minTotalYield, maxTotalYield, minAvgYield, maxAvgYield, minTotalWetMass, maxTotalWetMass, minAvgWetMass, maxAvgWetMass, minAvgMoisture, maxAvgMoisture, minAvgSpeed, maxAvgSpeed, sources, associatedBoundaryIds, operationBoundaryIds, minOperationStartDateTime, maxOperationStartDateTime, minOperationEndDateTime, maxOperationEndDateTime, minOperationModifiedDateTime, maxOperationModifiedDateTime, minArea, maxArea, ids, names, propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken, context);
        }

        private Pageable<BinaryData> GetAllHarvestDataByFarmerIdImplementation(string diagnosticsScopeName, string farmerId, double? minTotalYield, double? maxTotalYield, double? minAvgYield, double? maxAvgYield, double? minTotalWetMass, double? maxTotalWetMass, double? minAvgWetMass, double? maxAvgWetMass, double? minAvgMoisture, double? maxAvgMoisture, double? minAvgSpeed, double? maxAvgSpeed, IEnumerable<string> sources, IEnumerable<string> associatedBoundaryIds, IEnumerable<string> operationBoundaryIds, DateTimeOffset? minOperationStartDateTime, DateTimeOffset? maxOperationStartDateTime, DateTimeOffset? minOperationEndDateTime, DateTimeOffset? maxOperationEndDateTime, DateTimeOffset? minOperationModifiedDateTime, DateTimeOffset? maxOperationModifiedDateTime, double? minArea, double? maxArea, IEnumerable<string> ids, IEnumerable<string> names, IEnumerable<string> propertyFilters, IEnumerable<string> statuses, DateTimeOffset? minCreatedDateTime, DateTimeOffset? maxCreatedDateTime, DateTimeOffset? minLastModifiedDateTime, DateTimeOffset? maxLastModifiedDateTime, int? maxPageSize, string skipToken, RequestContext context)
        {
            return PageableHelpers.CreatePageable(CreateEnumerable, ClientDiagnostics, diagnosticsScopeName);
            IEnumerable<Page<BinaryData>> CreateEnumerable(string nextLink, int? pageSizeHint)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetAllHarvestDataByFarmerIdRequest(farmerId, minTotalYield, maxTotalYield, minAvgYield, maxAvgYield, minTotalWetMass, maxTotalWetMass, minAvgWetMass, maxAvgWetMass, minAvgMoisture, maxAvgMoisture, minAvgSpeed, maxAvgSpeed, sources, associatedBoundaryIds, operationBoundaryIds, minOperationStartDateTime, maxOperationStartDateTime, minOperationEndDateTime, maxOperationEndDateTime, minOperationModifiedDateTime, maxOperationModifiedDateTime, minArea, maxArea, ids, names, propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken, context)
                        : CreateGetAllHarvestDataByFarmerIdNextPageRequest(nextLink, farmerId, minTotalYield, maxTotalYield, minAvgYield, maxAvgYield, minTotalWetMass, maxTotalWetMass, minAvgWetMass, maxAvgWetMass, minAvgMoisture, maxAvgMoisture, minAvgSpeed, maxAvgSpeed, sources, associatedBoundaryIds, operationBoundaryIds, minOperationStartDateTime, maxOperationStartDateTime, minOperationEndDateTime, maxOperationEndDateTime, minOperationModifiedDateTime, maxOperationModifiedDateTime, minArea, maxArea, ids, names, propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken, context);
                    var page = LowLevelPageableHelpers.ProcessMessage(_pipeline, message, context, "value", "nextLink");
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Returns a paginated list of harvest data resources across all farmers. </summary>
        /// <param name="minTotalYield"> Minimum Yield value(inclusive). </param>
        /// <param name="maxTotalYield"> Maximum Yield value (inclusive). </param>
        /// <param name="minAvgYield"> Minimum AvgYield value(inclusive). </param>
        /// <param name="maxAvgYield"> Maximum AvgYield value (inclusive). </param>
        /// <param name="minTotalWetMass"> Minimum Total WetMass value(inclusive). </param>
        /// <param name="maxTotalWetMass"> Maximum Total WetMass value (inclusive). </param>
        /// <param name="minAvgWetMass"> Minimum AvgWetMass value(inclusive). </param>
        /// <param name="maxAvgWetMass"> Maximum AvgWetMass value (inclusive). </param>
        /// <param name="minAvgMoisture"> Minimum AvgMoisture value(inclusive). </param>
        /// <param name="maxAvgMoisture"> Maximum AvgMoisture value (inclusive). </param>
        /// <param name="minAvgSpeed"> Minimum AvgSpeed value(inclusive). </param>
        /// <param name="maxAvgSpeed"> Maximum AvgSpeed value (inclusive). </param>
        /// <param name="sources"> Sources of the operation data. </param>
        /// <param name="associatedBoundaryIds"> Boundary IDs associated with operation data. </param>
        /// <param name="operationBoundaryIds"> Operation boundary IDs associated with operation data. </param>
        /// <param name="minOperationStartDateTime"> Minimum start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="maxOperationStartDateTime"> Maximum start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="minOperationEndDateTime"> Minimum end date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="maxOperationEndDateTime"> Maximum end date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="minOperationModifiedDateTime"> Minimum modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="maxOperationModifiedDateTime"> Maximum modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="minArea"> Minimum area for which operation was applied (inclusive). </param>
        /// <param name="maxArea"> Maximum area for which operation was applied (inclusive). </param>
        /// <param name="ids"> Ids of the resource. </param>
        /// <param name="names"> Names of the resource. </param>
        /// <param name="propertyFilters">
        /// Filters on key-value pairs within the Properties object.
        /// eg. &quot;{testKey} eq {testValue}&quot;.
        /// </param>
        /// <param name="statuses"> Statuses of the resource. </param>
        /// <param name="minCreatedDateTime"> Minimum creation date of resource (inclusive). </param>
        /// <param name="maxCreatedDateTime"> Maximum creation date of resource (inclusive). </param>
        /// <param name="minLastModifiedDateTime"> Minimum last modified date of resource (inclusive). </param>
        /// <param name="maxLastModifiedDateTime"> Maximum last modified date of resource (inclusive). </param>
        /// <param name="maxPageSize">
        /// Maximum number of items needed (inclusive).
        /// Minimum = 10, Maximum = 1000, Default value = 50.
        /// </param>
        /// <param name="skipToken"> Skip token for getting next set of results. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetAllHarvestDataAsync and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new HarvestDataClient(endpoint, credential);
        /// 
        /// await foreach (var data in client.GetAllHarvestDataAsync())
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.ToString());
        /// }
        /// ]]></code>
        /// This sample shows how to call GetAllHarvestDataAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new HarvestDataClient(endpoint, credential);
        /// 
        /// await foreach (var data in client.GetAllHarvestDataAsync(1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, new String[]{"<sources>"}, new String[]{"<associatedBoundaryIds>"}, new String[]{"<operationBoundaryIds>"}, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 1234, 1234, new String[]{"<ids>"}, new String[]{"<names>"}, new String[]{"<propertyFilters>"}, new String[]{"<statuses>"}, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 1234, "<skipToken>"))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.GetProperty("totalYield").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("totalYield").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("avgYield").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("avgYield").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("totalWetMass").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("totalWetMass").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("avgWetMass").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("avgWetMass").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("avgMoisture").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("avgMoisture").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("avgSpeed").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("avgSpeed").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("productName").ToString());
        ///     Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("area").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("area").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalYield").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalYield").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgYield").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgYield").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgMoisture").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgMoisture").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalWetMass").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalWetMass").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgWetMass").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgWetMass").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("area").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("area").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("source").ToString());
        ///     Console.WriteLine(result.GetProperty("operationModifiedDateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("operationStartDateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("operationEndDateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("attachmentsLink").ToString());
        ///     Console.WriteLine(result.GetProperty("associatedBoundaryId").ToString());
        ///     Console.WriteLine(result.GetProperty("operationBoundaryId").ToString());
        ///     Console.WriteLine(result.GetProperty("farmerId").ToString());
        ///     Console.WriteLine(result.GetProperty("id").ToString());
        ///     Console.WriteLine(result.GetProperty("eTag").ToString());
        ///     Console.WriteLine(result.GetProperty("status").ToString());
        ///     Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("name").ToString());
        ///     Console.WriteLine(result.GetProperty("description").ToString());
        ///     Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
        /// }
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for one item in the pageable response.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>HarvestDataListResponseValue</c>:
        /// <code>{
        ///   totalYield: {
        ///     unit: string, # Optional. Data unit.
        ///     value: number, # Optional. Data value.
        ///   }, # Optional. Schema for storing measurement reading and unit.
        ///   avgYield: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   totalWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   avgWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   avgMoisture: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   avgSpeed: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   harvestProductDetails: [
        ///     {
        ///       productName: string, # Optional. Name of the product.
        ///       area: Measure, # Optional. Schema for storing measurement reading and unit.
        ///       totalYield: Measure, # Optional. Schema for storing measurement reading and unit.
        ///       avgYield: Measure, # Optional. Schema for storing measurement reading and unit.
        ///       avgMoisture: Measure, # Optional. Schema for storing measurement reading and unit.
        ///       totalWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
        ///       avgWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
        ///     }
        ///   ], # Optional. Harvest product details.
        ///   area: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   source: string, # Optional. Source of the operation data.
        ///   operationModifiedDateTime: string (ISO 8601 Format), # Optional. Modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.
        /// Note: this will be specified by the source provider itself.
        ///   operationStartDateTime: string (ISO 8601 Format), # Optional. Start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   operationEndDateTime: string (ISO 8601 Format), # Optional. End date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   attachmentsLink: string, # Optional. Link for attachments.
        ///   associatedBoundaryId: string, # Optional. Optional boundary ID of the field for which operation was applied.
        ///   operationBoundaryId: string, # Optional. Optional boundary ID of the actual area for which operation was applied inside the specified field.
        ///   farmerId: string, # Optional. Farmer ID which belongs to the operation data.
        ///   id: string, # Optional. Unique resource ID.
        ///   eTag: string, # Optional. The ETag value to implement optimistic concurrency.
        ///   status: string, # Optional. Status of the resource.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual AsyncPageable<BinaryData> GetAllHarvestDataAsync(double? minTotalYield = null, double? maxTotalYield = null, double? minAvgYield = null, double? maxAvgYield = null, double? minTotalWetMass = null, double? maxTotalWetMass = null, double? minAvgWetMass = null, double? maxAvgWetMass = null, double? minAvgMoisture = null, double? maxAvgMoisture = null, double? minAvgSpeed = null, double? maxAvgSpeed = null, IEnumerable<string> sources = null, IEnumerable<string> associatedBoundaryIds = null, IEnumerable<string> operationBoundaryIds = null, DateTimeOffset? minOperationStartDateTime = null, DateTimeOffset? maxOperationStartDateTime = null, DateTimeOffset? minOperationEndDateTime = null, DateTimeOffset? maxOperationEndDateTime = null, DateTimeOffset? minOperationModifiedDateTime = null, DateTimeOffset? maxOperationModifiedDateTime = null, double? minArea = null, double? maxArea = null, IEnumerable<string> ids = null, IEnumerable<string> names = null, IEnumerable<string> propertyFilters = null, IEnumerable<string> statuses = null, DateTimeOffset? minCreatedDateTime = null, DateTimeOffset? maxCreatedDateTime = null, DateTimeOffset? minLastModifiedDateTime = null, DateTimeOffset? maxLastModifiedDateTime = null, int? maxPageSize = null, string skipToken = null, RequestContext context = null)
        {
            return GetAllHarvestDataImplementationAsync("HarvestDataClient.GetAllHarvestData", minTotalYield, maxTotalYield, minAvgYield, maxAvgYield, minTotalWetMass, maxTotalWetMass, minAvgWetMass, maxAvgWetMass, minAvgMoisture, maxAvgMoisture, minAvgSpeed, maxAvgSpeed, sources, associatedBoundaryIds, operationBoundaryIds, minOperationStartDateTime, maxOperationStartDateTime, minOperationEndDateTime, maxOperationEndDateTime, minOperationModifiedDateTime, maxOperationModifiedDateTime, minArea, maxArea, ids, names, propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken, context);
        }

        private AsyncPageable<BinaryData> GetAllHarvestDataImplementationAsync(string diagnosticsScopeName, double? minTotalYield, double? maxTotalYield, double? minAvgYield, double? maxAvgYield, double? minTotalWetMass, double? maxTotalWetMass, double? minAvgWetMass, double? maxAvgWetMass, double? minAvgMoisture, double? maxAvgMoisture, double? minAvgSpeed, double? maxAvgSpeed, IEnumerable<string> sources, IEnumerable<string> associatedBoundaryIds, IEnumerable<string> operationBoundaryIds, DateTimeOffset? minOperationStartDateTime, DateTimeOffset? maxOperationStartDateTime, DateTimeOffset? minOperationEndDateTime, DateTimeOffset? maxOperationEndDateTime, DateTimeOffset? minOperationModifiedDateTime, DateTimeOffset? maxOperationModifiedDateTime, double? minArea, double? maxArea, IEnumerable<string> ids, IEnumerable<string> names, IEnumerable<string> propertyFilters, IEnumerable<string> statuses, DateTimeOffset? minCreatedDateTime, DateTimeOffset? maxCreatedDateTime, DateTimeOffset? minLastModifiedDateTime, DateTimeOffset? maxLastModifiedDateTime, int? maxPageSize, string skipToken, RequestContext context)
        {
            return PageableHelpers.CreateAsyncPageable(CreateEnumerableAsync, ClientDiagnostics, diagnosticsScopeName);
            async IAsyncEnumerable<Page<BinaryData>> CreateEnumerableAsync(string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken = default)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetAllHarvestDataRequest(minTotalYield, maxTotalYield, minAvgYield, maxAvgYield, minTotalWetMass, maxTotalWetMass, minAvgWetMass, maxAvgWetMass, minAvgMoisture, maxAvgMoisture, minAvgSpeed, maxAvgSpeed, sources, associatedBoundaryIds, operationBoundaryIds, minOperationStartDateTime, maxOperationStartDateTime, minOperationEndDateTime, maxOperationEndDateTime, minOperationModifiedDateTime, maxOperationModifiedDateTime, minArea, maxArea, ids, names, propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken, context)
                        : CreateGetAllHarvestDataNextPageRequest(nextLink, minTotalYield, maxTotalYield, minAvgYield, maxAvgYield, minTotalWetMass, maxTotalWetMass, minAvgWetMass, maxAvgWetMass, minAvgMoisture, maxAvgMoisture, minAvgSpeed, maxAvgSpeed, sources, associatedBoundaryIds, operationBoundaryIds, minOperationStartDateTime, maxOperationStartDateTime, minOperationEndDateTime, maxOperationEndDateTime, minOperationModifiedDateTime, maxOperationModifiedDateTime, minArea, maxArea, ids, names, propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken, context);
                    var page = await LowLevelPageableHelpers.ProcessMessageAsync(_pipeline, message, context, "value", "nextLink", cancellationToken).ConfigureAwait(false);
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Returns a paginated list of harvest data resources across all farmers. </summary>
        /// <param name="minTotalYield"> Minimum Yield value(inclusive). </param>
        /// <param name="maxTotalYield"> Maximum Yield value (inclusive). </param>
        /// <param name="minAvgYield"> Minimum AvgYield value(inclusive). </param>
        /// <param name="maxAvgYield"> Maximum AvgYield value (inclusive). </param>
        /// <param name="minTotalWetMass"> Minimum Total WetMass value(inclusive). </param>
        /// <param name="maxTotalWetMass"> Maximum Total WetMass value (inclusive). </param>
        /// <param name="minAvgWetMass"> Minimum AvgWetMass value(inclusive). </param>
        /// <param name="maxAvgWetMass"> Maximum AvgWetMass value (inclusive). </param>
        /// <param name="minAvgMoisture"> Minimum AvgMoisture value(inclusive). </param>
        /// <param name="maxAvgMoisture"> Maximum AvgMoisture value (inclusive). </param>
        /// <param name="minAvgSpeed"> Minimum AvgSpeed value(inclusive). </param>
        /// <param name="maxAvgSpeed"> Maximum AvgSpeed value (inclusive). </param>
        /// <param name="sources"> Sources of the operation data. </param>
        /// <param name="associatedBoundaryIds"> Boundary IDs associated with operation data. </param>
        /// <param name="operationBoundaryIds"> Operation boundary IDs associated with operation data. </param>
        /// <param name="minOperationStartDateTime"> Minimum start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="maxOperationStartDateTime"> Maximum start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="minOperationEndDateTime"> Minimum end date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="maxOperationEndDateTime"> Maximum end date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="minOperationModifiedDateTime"> Minimum modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="maxOperationModifiedDateTime"> Maximum modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ (inclusive). </param>
        /// <param name="minArea"> Minimum area for which operation was applied (inclusive). </param>
        /// <param name="maxArea"> Maximum area for which operation was applied (inclusive). </param>
        /// <param name="ids"> Ids of the resource. </param>
        /// <param name="names"> Names of the resource. </param>
        /// <param name="propertyFilters">
        /// Filters on key-value pairs within the Properties object.
        /// eg. &quot;{testKey} eq {testValue}&quot;.
        /// </param>
        /// <param name="statuses"> Statuses of the resource. </param>
        /// <param name="minCreatedDateTime"> Minimum creation date of resource (inclusive). </param>
        /// <param name="maxCreatedDateTime"> Maximum creation date of resource (inclusive). </param>
        /// <param name="minLastModifiedDateTime"> Minimum last modified date of resource (inclusive). </param>
        /// <param name="maxLastModifiedDateTime"> Maximum last modified date of resource (inclusive). </param>
        /// <param name="maxPageSize">
        /// Maximum number of items needed (inclusive).
        /// Minimum = 10, Maximum = 1000, Default value = 50.
        /// </param>
        /// <param name="skipToken"> Skip token for getting next set of results. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetAllHarvestData and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new HarvestDataClient(endpoint, credential);
        /// 
        /// foreach (var data in client.GetAllHarvestData())
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.ToString());
        /// }
        /// ]]></code>
        /// This sample shows how to call GetAllHarvestData with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new HarvestDataClient(endpoint, credential);
        /// 
        /// foreach (var data in client.GetAllHarvestData(1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, new String[]{"<sources>"}, new String[]{"<associatedBoundaryIds>"}, new String[]{"<operationBoundaryIds>"}, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 1234, 1234, new String[]{"<ids>"}, new String[]{"<names>"}, new String[]{"<propertyFilters>"}, new String[]{"<statuses>"}, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 1234, "<skipToken>"))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.GetProperty("totalYield").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("totalYield").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("avgYield").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("avgYield").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("totalWetMass").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("totalWetMass").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("avgWetMass").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("avgWetMass").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("avgMoisture").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("avgMoisture").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("avgSpeed").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("avgSpeed").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("productName").ToString());
        ///     Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("area").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("area").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalYield").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalYield").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgYield").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgYield").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgMoisture").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgMoisture").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalWetMass").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalWetMass").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgWetMass").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgWetMass").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("area").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("area").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("source").ToString());
        ///     Console.WriteLine(result.GetProperty("operationModifiedDateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("operationStartDateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("operationEndDateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("attachmentsLink").ToString());
        ///     Console.WriteLine(result.GetProperty("associatedBoundaryId").ToString());
        ///     Console.WriteLine(result.GetProperty("operationBoundaryId").ToString());
        ///     Console.WriteLine(result.GetProperty("farmerId").ToString());
        ///     Console.WriteLine(result.GetProperty("id").ToString());
        ///     Console.WriteLine(result.GetProperty("eTag").ToString());
        ///     Console.WriteLine(result.GetProperty("status").ToString());
        ///     Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("name").ToString());
        ///     Console.WriteLine(result.GetProperty("description").ToString());
        ///     Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
        /// }
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for one item in the pageable response.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>HarvestDataListResponseValue</c>:
        /// <code>{
        ///   totalYield: {
        ///     unit: string, # Optional. Data unit.
        ///     value: number, # Optional. Data value.
        ///   }, # Optional. Schema for storing measurement reading and unit.
        ///   avgYield: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   totalWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   avgWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   avgMoisture: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   avgSpeed: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   harvestProductDetails: [
        ///     {
        ///       productName: string, # Optional. Name of the product.
        ///       area: Measure, # Optional. Schema for storing measurement reading and unit.
        ///       totalYield: Measure, # Optional. Schema for storing measurement reading and unit.
        ///       avgYield: Measure, # Optional. Schema for storing measurement reading and unit.
        ///       avgMoisture: Measure, # Optional. Schema for storing measurement reading and unit.
        ///       totalWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
        ///       avgWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
        ///     }
        ///   ], # Optional. Harvest product details.
        ///   area: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   source: string, # Optional. Source of the operation data.
        ///   operationModifiedDateTime: string (ISO 8601 Format), # Optional. Modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.
        /// Note: this will be specified by the source provider itself.
        ///   operationStartDateTime: string (ISO 8601 Format), # Optional. Start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   operationEndDateTime: string (ISO 8601 Format), # Optional. End date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   attachmentsLink: string, # Optional. Link for attachments.
        ///   associatedBoundaryId: string, # Optional. Optional boundary ID of the field for which operation was applied.
        ///   operationBoundaryId: string, # Optional. Optional boundary ID of the actual area for which operation was applied inside the specified field.
        ///   farmerId: string, # Optional. Farmer ID which belongs to the operation data.
        ///   id: string, # Optional. Unique resource ID.
        ///   eTag: string, # Optional. The ETag value to implement optimistic concurrency.
        ///   status: string, # Optional. Status of the resource.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Pageable<BinaryData> GetAllHarvestData(double? minTotalYield = null, double? maxTotalYield = null, double? minAvgYield = null, double? maxAvgYield = null, double? minTotalWetMass = null, double? maxTotalWetMass = null, double? minAvgWetMass = null, double? maxAvgWetMass = null, double? minAvgMoisture = null, double? maxAvgMoisture = null, double? minAvgSpeed = null, double? maxAvgSpeed = null, IEnumerable<string> sources = null, IEnumerable<string> associatedBoundaryIds = null, IEnumerable<string> operationBoundaryIds = null, DateTimeOffset? minOperationStartDateTime = null, DateTimeOffset? maxOperationStartDateTime = null, DateTimeOffset? minOperationEndDateTime = null, DateTimeOffset? maxOperationEndDateTime = null, DateTimeOffset? minOperationModifiedDateTime = null, DateTimeOffset? maxOperationModifiedDateTime = null, double? minArea = null, double? maxArea = null, IEnumerable<string> ids = null, IEnumerable<string> names = null, IEnumerable<string> propertyFilters = null, IEnumerable<string> statuses = null, DateTimeOffset? minCreatedDateTime = null, DateTimeOffset? maxCreatedDateTime = null, DateTimeOffset? minLastModifiedDateTime = null, DateTimeOffset? maxLastModifiedDateTime = null, int? maxPageSize = null, string skipToken = null, RequestContext context = null)
        {
            return GetAllHarvestDataImplementation("HarvestDataClient.GetAllHarvestData", minTotalYield, maxTotalYield, minAvgYield, maxAvgYield, minTotalWetMass, maxTotalWetMass, minAvgWetMass, maxAvgWetMass, minAvgMoisture, maxAvgMoisture, minAvgSpeed, maxAvgSpeed, sources, associatedBoundaryIds, operationBoundaryIds, minOperationStartDateTime, maxOperationStartDateTime, minOperationEndDateTime, maxOperationEndDateTime, minOperationModifiedDateTime, maxOperationModifiedDateTime, minArea, maxArea, ids, names, propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken, context);
        }

        private Pageable<BinaryData> GetAllHarvestDataImplementation(string diagnosticsScopeName, double? minTotalYield, double? maxTotalYield, double? minAvgYield, double? maxAvgYield, double? minTotalWetMass, double? maxTotalWetMass, double? minAvgWetMass, double? maxAvgWetMass, double? minAvgMoisture, double? maxAvgMoisture, double? minAvgSpeed, double? maxAvgSpeed, IEnumerable<string> sources, IEnumerable<string> associatedBoundaryIds, IEnumerable<string> operationBoundaryIds, DateTimeOffset? minOperationStartDateTime, DateTimeOffset? maxOperationStartDateTime, DateTimeOffset? minOperationEndDateTime, DateTimeOffset? maxOperationEndDateTime, DateTimeOffset? minOperationModifiedDateTime, DateTimeOffset? maxOperationModifiedDateTime, double? minArea, double? maxArea, IEnumerable<string> ids, IEnumerable<string> names, IEnumerable<string> propertyFilters, IEnumerable<string> statuses, DateTimeOffset? minCreatedDateTime, DateTimeOffset? maxCreatedDateTime, DateTimeOffset? minLastModifiedDateTime, DateTimeOffset? maxLastModifiedDateTime, int? maxPageSize, string skipToken, RequestContext context)
        {
            return PageableHelpers.CreatePageable(CreateEnumerable, ClientDiagnostics, diagnosticsScopeName);
            IEnumerable<Page<BinaryData>> CreateEnumerable(string nextLink, int? pageSizeHint)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetAllHarvestDataRequest(minTotalYield, maxTotalYield, minAvgYield, maxAvgYield, minTotalWetMass, maxTotalWetMass, minAvgWetMass, maxAvgWetMass, minAvgMoisture, maxAvgMoisture, minAvgSpeed, maxAvgSpeed, sources, associatedBoundaryIds, operationBoundaryIds, minOperationStartDateTime, maxOperationStartDateTime, minOperationEndDateTime, maxOperationEndDateTime, minOperationModifiedDateTime, maxOperationModifiedDateTime, minArea, maxArea, ids, names, propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken, context)
                        : CreateGetAllHarvestDataNextPageRequest(nextLink, minTotalYield, maxTotalYield, minAvgYield, maxAvgYield, minTotalWetMass, maxTotalWetMass, minAvgWetMass, maxAvgWetMass, minAvgMoisture, maxAvgMoisture, minAvgSpeed, maxAvgSpeed, sources, associatedBoundaryIds, operationBoundaryIds, minOperationStartDateTime, maxOperationStartDateTime, minOperationEndDateTime, maxOperationEndDateTime, minOperationModifiedDateTime, maxOperationModifiedDateTime, minArea, maxArea, ids, names, propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken, context);
                    var page = LowLevelPageableHelpers.ProcessMessage(_pipeline, message, context, "value", "nextLink");
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        internal HttpMessage CreateGetAllHarvestDataByFarmerIdRequest(string farmerId, double? minTotalYield, double? maxTotalYield, double? minAvgYield, double? maxAvgYield, double? minTotalWetMass, double? maxTotalWetMass, double? minAvgWetMass, double? maxAvgWetMass, double? minAvgMoisture, double? maxAvgMoisture, double? minAvgSpeed, double? maxAvgSpeed, IEnumerable<string> sources, IEnumerable<string> associatedBoundaryIds, IEnumerable<string> operationBoundaryIds, DateTimeOffset? minOperationStartDateTime, DateTimeOffset? maxOperationStartDateTime, DateTimeOffset? minOperationEndDateTime, DateTimeOffset? maxOperationEndDateTime, DateTimeOffset? minOperationModifiedDateTime, DateTimeOffset? maxOperationModifiedDateTime, double? minArea, double? maxArea, IEnumerable<string> ids, IEnumerable<string> names, IEnumerable<string> propertyFilters, IEnumerable<string> statuses, DateTimeOffset? minCreatedDateTime, DateTimeOffset? maxCreatedDateTime, DateTimeOffset? minLastModifiedDateTime, DateTimeOffset? maxLastModifiedDateTime, int? maxPageSize, string skipToken, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/farmers/", false);
            uri.AppendPath(farmerId, true);
            uri.AppendPath("/harvest-data", false);
            if (minTotalYield != null)
            {
                uri.AppendQuery("minTotalYield", minTotalYield.Value, true);
            }
            if (maxTotalYield != null)
            {
                uri.AppendQuery("maxTotalYield", maxTotalYield.Value, true);
            }
            if (minAvgYield != null)
            {
                uri.AppendQuery("minAvgYield", minAvgYield.Value, true);
            }
            if (maxAvgYield != null)
            {
                uri.AppendQuery("maxAvgYield", maxAvgYield.Value, true);
            }
            if (minTotalWetMass != null)
            {
                uri.AppendQuery("minTotalWetMass", minTotalWetMass.Value, true);
            }
            if (maxTotalWetMass != null)
            {
                uri.AppendQuery("maxTotalWetMass", maxTotalWetMass.Value, true);
            }
            if (minAvgWetMass != null)
            {
                uri.AppendQuery("minAvgWetMass", minAvgWetMass.Value, true);
            }
            if (maxAvgWetMass != null)
            {
                uri.AppendQuery("maxAvgWetMass", maxAvgWetMass.Value, true);
            }
            if (minAvgMoisture != null)
            {
                uri.AppendQuery("minAvgMoisture", minAvgMoisture.Value, true);
            }
            if (maxAvgMoisture != null)
            {
                uri.AppendQuery("maxAvgMoisture", maxAvgMoisture.Value, true);
            }
            if (minAvgSpeed != null)
            {
                uri.AppendQuery("minAvgSpeed", minAvgSpeed.Value, true);
            }
            if (maxAvgSpeed != null)
            {
                uri.AppendQuery("maxAvgSpeed", maxAvgSpeed.Value, true);
            }
            if (sources != null)
            {
                foreach (var param in sources)
                {
                    uri.AppendQuery("sources", param, true);
                }
            }
            if (associatedBoundaryIds != null)
            {
                foreach (var param in associatedBoundaryIds)
                {
                    uri.AppendQuery("associatedBoundaryIds", param, true);
                }
            }
            if (operationBoundaryIds != null)
            {
                foreach (var param in operationBoundaryIds)
                {
                    uri.AppendQuery("operationBoundaryIds", param, true);
                }
            }
            if (minOperationStartDateTime != null)
            {
                uri.AppendQuery("minOperationStartDateTime", minOperationStartDateTime.Value, "O", true);
            }
            if (maxOperationStartDateTime != null)
            {
                uri.AppendQuery("maxOperationStartDateTime", maxOperationStartDateTime.Value, "O", true);
            }
            if (minOperationEndDateTime != null)
            {
                uri.AppendQuery("minOperationEndDateTime", minOperationEndDateTime.Value, "O", true);
            }
            if (maxOperationEndDateTime != null)
            {
                uri.AppendQuery("maxOperationEndDateTime", maxOperationEndDateTime.Value, "O", true);
            }
            if (minOperationModifiedDateTime != null)
            {
                uri.AppendQuery("minOperationModifiedDateTime", minOperationModifiedDateTime.Value, "O", true);
            }
            if (maxOperationModifiedDateTime != null)
            {
                uri.AppendQuery("maxOperationModifiedDateTime", maxOperationModifiedDateTime.Value, "O", true);
            }
            if (minArea != null)
            {
                uri.AppendQuery("minArea", minArea.Value, true);
            }
            if (maxArea != null)
            {
                uri.AppendQuery("maxArea", maxArea.Value, true);
            }
            if (ids != null)
            {
                foreach (var param in ids)
                {
                    uri.AppendQuery("ids", param, true);
                }
            }
            if (names != null)
            {
                foreach (var param in names)
                {
                    uri.AppendQuery("names", param, true);
                }
            }
            if (propertyFilters != null)
            {
                foreach (var param in propertyFilters)
                {
                    uri.AppendQuery("propertyFilters", param, true);
                }
            }
            if (statuses != null)
            {
                foreach (var param in statuses)
                {
                    uri.AppendQuery("statuses", param, true);
                }
            }
            if (minCreatedDateTime != null)
            {
                uri.AppendQuery("minCreatedDateTime", minCreatedDateTime.Value, "O", true);
            }
            if (maxCreatedDateTime != null)
            {
                uri.AppendQuery("maxCreatedDateTime", maxCreatedDateTime.Value, "O", true);
            }
            if (minLastModifiedDateTime != null)
            {
                uri.AppendQuery("minLastModifiedDateTime", minLastModifiedDateTime.Value, "O", true);
            }
            if (maxLastModifiedDateTime != null)
            {
                uri.AppendQuery("maxLastModifiedDateTime", maxLastModifiedDateTime.Value, "O", true);
            }
            if (maxPageSize != null)
            {
                uri.AppendQuery("$maxPageSize", maxPageSize.Value, true);
            }
            if (skipToken != null)
            {
                uri.AppendQuery("$skipToken", skipToken, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetAllHarvestDataRequest(double? minTotalYield, double? maxTotalYield, double? minAvgYield, double? maxAvgYield, double? minTotalWetMass, double? maxTotalWetMass, double? minAvgWetMass, double? maxAvgWetMass, double? minAvgMoisture, double? maxAvgMoisture, double? minAvgSpeed, double? maxAvgSpeed, IEnumerable<string> sources, IEnumerable<string> associatedBoundaryIds, IEnumerable<string> operationBoundaryIds, DateTimeOffset? minOperationStartDateTime, DateTimeOffset? maxOperationStartDateTime, DateTimeOffset? minOperationEndDateTime, DateTimeOffset? maxOperationEndDateTime, DateTimeOffset? minOperationModifiedDateTime, DateTimeOffset? maxOperationModifiedDateTime, double? minArea, double? maxArea, IEnumerable<string> ids, IEnumerable<string> names, IEnumerable<string> propertyFilters, IEnumerable<string> statuses, DateTimeOffset? minCreatedDateTime, DateTimeOffset? maxCreatedDateTime, DateTimeOffset? minLastModifiedDateTime, DateTimeOffset? maxLastModifiedDateTime, int? maxPageSize, string skipToken, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/harvest-data", false);
            if (minTotalYield != null)
            {
                uri.AppendQuery("minTotalYield", minTotalYield.Value, true);
            }
            if (maxTotalYield != null)
            {
                uri.AppendQuery("maxTotalYield", maxTotalYield.Value, true);
            }
            if (minAvgYield != null)
            {
                uri.AppendQuery("minAvgYield", minAvgYield.Value, true);
            }
            if (maxAvgYield != null)
            {
                uri.AppendQuery("maxAvgYield", maxAvgYield.Value, true);
            }
            if (minTotalWetMass != null)
            {
                uri.AppendQuery("minTotalWetMass", minTotalWetMass.Value, true);
            }
            if (maxTotalWetMass != null)
            {
                uri.AppendQuery("maxTotalWetMass", maxTotalWetMass.Value, true);
            }
            if (minAvgWetMass != null)
            {
                uri.AppendQuery("minAvgWetMass", minAvgWetMass.Value, true);
            }
            if (maxAvgWetMass != null)
            {
                uri.AppendQuery("maxAvgWetMass", maxAvgWetMass.Value, true);
            }
            if (minAvgMoisture != null)
            {
                uri.AppendQuery("minAvgMoisture", minAvgMoisture.Value, true);
            }
            if (maxAvgMoisture != null)
            {
                uri.AppendQuery("maxAvgMoisture", maxAvgMoisture.Value, true);
            }
            if (minAvgSpeed != null)
            {
                uri.AppendQuery("minAvgSpeed", minAvgSpeed.Value, true);
            }
            if (maxAvgSpeed != null)
            {
                uri.AppendQuery("maxAvgSpeed", maxAvgSpeed.Value, true);
            }
            if (sources != null)
            {
                foreach (var param in sources)
                {
                    uri.AppendQuery("sources", param, true);
                }
            }
            if (associatedBoundaryIds != null)
            {
                foreach (var param in associatedBoundaryIds)
                {
                    uri.AppendQuery("associatedBoundaryIds", param, true);
                }
            }
            if (operationBoundaryIds != null)
            {
                foreach (var param in operationBoundaryIds)
                {
                    uri.AppendQuery("operationBoundaryIds", param, true);
                }
            }
            if (minOperationStartDateTime != null)
            {
                uri.AppendQuery("minOperationStartDateTime", minOperationStartDateTime.Value, "O", true);
            }
            if (maxOperationStartDateTime != null)
            {
                uri.AppendQuery("maxOperationStartDateTime", maxOperationStartDateTime.Value, "O", true);
            }
            if (minOperationEndDateTime != null)
            {
                uri.AppendQuery("minOperationEndDateTime", minOperationEndDateTime.Value, "O", true);
            }
            if (maxOperationEndDateTime != null)
            {
                uri.AppendQuery("maxOperationEndDateTime", maxOperationEndDateTime.Value, "O", true);
            }
            if (minOperationModifiedDateTime != null)
            {
                uri.AppendQuery("minOperationModifiedDateTime", minOperationModifiedDateTime.Value, "O", true);
            }
            if (maxOperationModifiedDateTime != null)
            {
                uri.AppendQuery("maxOperationModifiedDateTime", maxOperationModifiedDateTime.Value, "O", true);
            }
            if (minArea != null)
            {
                uri.AppendQuery("minArea", minArea.Value, true);
            }
            if (maxArea != null)
            {
                uri.AppendQuery("maxArea", maxArea.Value, true);
            }
            if (ids != null)
            {
                foreach (var param in ids)
                {
                    uri.AppendQuery("ids", param, true);
                }
            }
            if (names != null)
            {
                foreach (var param in names)
                {
                    uri.AppendQuery("names", param, true);
                }
            }
            if (propertyFilters != null)
            {
                foreach (var param in propertyFilters)
                {
                    uri.AppendQuery("propertyFilters", param, true);
                }
            }
            if (statuses != null)
            {
                foreach (var param in statuses)
                {
                    uri.AppendQuery("statuses", param, true);
                }
            }
            if (minCreatedDateTime != null)
            {
                uri.AppendQuery("minCreatedDateTime", minCreatedDateTime.Value, "O", true);
            }
            if (maxCreatedDateTime != null)
            {
                uri.AppendQuery("maxCreatedDateTime", maxCreatedDateTime.Value, "O", true);
            }
            if (minLastModifiedDateTime != null)
            {
                uri.AppendQuery("minLastModifiedDateTime", minLastModifiedDateTime.Value, "O", true);
            }
            if (maxLastModifiedDateTime != null)
            {
                uri.AppendQuery("maxLastModifiedDateTime", maxLastModifiedDateTime.Value, "O", true);
            }
            if (maxPageSize != null)
            {
                uri.AppendQuery("$maxPageSize", maxPageSize.Value, true);
            }
            if (skipToken != null)
            {
                uri.AppendQuery("$skipToken", skipToken, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetHarvestDataRequest(string farmerId, string harvestDataId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/farmers/", false);
            uri.AppendPath(farmerId, true);
            uri.AppendPath("/harvest-data/", false);
            uri.AppendPath(harvestDataId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCreateOrUpdateRequest(string farmerId, string harvestDataId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200201);
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/farmers/", false);
            uri.AppendPath(farmerId, true);
            uri.AppendPath("/harvest-data/", false);
            uri.AppendPath(harvestDataId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/merge-patch+json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteRequest(string farmerId, string harvestDataId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/farmers/", false);
            uri.AppendPath(farmerId, true);
            uri.AppendPath("/harvest-data/", false);
            uri.AppendPath(harvestDataId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetAllHarvestDataByFarmerIdNextPageRequest(string nextLink, string farmerId, double? minTotalYield, double? maxTotalYield, double? minAvgYield, double? maxAvgYield, double? minTotalWetMass, double? maxTotalWetMass, double? minAvgWetMass, double? maxAvgWetMass, double? minAvgMoisture, double? maxAvgMoisture, double? minAvgSpeed, double? maxAvgSpeed, IEnumerable<string> sources, IEnumerable<string> associatedBoundaryIds, IEnumerable<string> operationBoundaryIds, DateTimeOffset? minOperationStartDateTime, DateTimeOffset? maxOperationStartDateTime, DateTimeOffset? minOperationEndDateTime, DateTimeOffset? maxOperationEndDateTime, DateTimeOffset? minOperationModifiedDateTime, DateTimeOffset? maxOperationModifiedDateTime, double? minArea, double? maxArea, IEnumerable<string> ids, IEnumerable<string> names, IEnumerable<string> propertyFilters, IEnumerable<string> statuses, DateTimeOffset? minCreatedDateTime, DateTimeOffset? maxCreatedDateTime, DateTimeOffset? minLastModifiedDateTime, DateTimeOffset? maxLastModifiedDateTime, int? maxPageSize, string skipToken, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetAllHarvestDataNextPageRequest(string nextLink, double? minTotalYield, double? maxTotalYield, double? minAvgYield, double? maxAvgYield, double? minTotalWetMass, double? maxTotalWetMass, double? minAvgWetMass, double? maxAvgWetMass, double? minAvgMoisture, double? maxAvgMoisture, double? minAvgSpeed, double? maxAvgSpeed, IEnumerable<string> sources, IEnumerable<string> associatedBoundaryIds, IEnumerable<string> operationBoundaryIds, DateTimeOffset? minOperationStartDateTime, DateTimeOffset? maxOperationStartDateTime, DateTimeOffset? minOperationEndDateTime, DateTimeOffset? maxOperationEndDateTime, DateTimeOffset? minOperationModifiedDateTime, DateTimeOffset? maxOperationModifiedDateTime, double? minArea, double? maxArea, IEnumerable<string> ids, IEnumerable<string> names, IEnumerable<string> propertyFilters, IEnumerable<string> statuses, DateTimeOffset? minCreatedDateTime, DateTimeOffset? maxCreatedDateTime, DateTimeOffset? minLastModifiedDateTime, DateTimeOffset? maxLastModifiedDateTime, int? maxPageSize, string skipToken, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier200201;
        private static ResponseClassifier ResponseClassifier200201 => _responseClassifier200201 ??= new StatusCodeClassifier(stackalloc ushort[] { 200, 201 });
        private static ResponseClassifier _responseClassifier204;
        private static ResponseClassifier ResponseClassifier204 => _responseClassifier204 ??= new StatusCodeClassifier(stackalloc ushort[] { 204 });
    }
}
