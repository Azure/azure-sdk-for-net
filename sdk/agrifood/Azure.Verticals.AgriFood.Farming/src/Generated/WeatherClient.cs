// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Verticals.AgriFood.Farming
{
    // Data plane generated client. The Weather service client.
    /// <summary> The Weather service client. </summary>
    public partial class WeatherClient
    {
        private static readonly string[] AuthorizationScopes = new string[] { "https://farmbeats.azure.net/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of WeatherClient for mocking. </summary>
        protected WeatherClient()
        {
        }

        /// <summary> Initializes a new instance of WeatherClient. </summary>
        /// <param name="endpoint"> The endpoint of your FarmBeats resource (protocol and hostname, for example: https://{resourceName}.farmbeats.azure.net). </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public WeatherClient(Uri endpoint, TokenCredential credential) : this(endpoint, credential, new FarmBeatsClientOptions())
        {
        }

        /// <summary> Initializes a new instance of WeatherClient. </summary>
        /// <param name="endpoint"> The endpoint of your FarmBeats resource (protocol and hostname, for example: https://{resourceName}.farmbeats.azure.net). </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public WeatherClient(Uri endpoint, TokenCredential credential, FarmBeatsClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(credential, nameof(credential));
            options ??= new FarmBeatsClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) }, new ResponseClassifier());
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Get weather ingestion job. </summary>
        /// <param name="jobId"> ID of the job. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetDataIngestionJobDetailsAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new WeatherClient(endpoint, credential);
        /// 
        /// Response response = await client.GetDataIngestionJobDetailsAsync("<jobId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("boundaryId").ToString());
        /// Console.WriteLine(result.GetProperty("farmerId").ToString());
        /// Console.WriteLine(result.GetProperty("extensionId").ToString());
        /// Console.WriteLine(result.GetProperty("extensionApiName").ToString());
        /// Console.WriteLine(result.GetProperty("extensionApiInput").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("extensionDataProviderAppId").ToString());
        /// Console.WriteLine(result.GetProperty("extensionDataProviderApiKey").ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
        /// Console.WriteLine(result.GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>WeatherDataIngestionJob</c>:
        /// <code>{
        ///   boundaryId: string, # Required. The id of the boundary object for which weather data is being fetched.
        ///   farmerId: string, # Required. The id of the farmer object for which weather data is being fetched.
        ///   extensionId: string, # Required. ID of the extension to be used for the providerInput. eg. DTN.ClearAg.
        ///   extensionApiName: string, # Required. Extension api name to which request is to be made.
        ///   extensionApiInput: Dictionary&lt;string, AnyObject&gt;, # Required. Extension api input dictionary which would be used to feed request query/body/parameter information.
        ///   extensionDataProviderAppId: string, # Optional. App id of the weather data provider.
        ///   extensionDataProviderApiKey: string, # Optional. Api key of the weather data provider.
        ///   id: string, # Optional. Unique job id.
        ///   status: string, # Optional. Status of the job.
        /// Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
        ///   durationInSeconds: number, # Optional. Duration of the job in seconds.
        ///   message: string, # Optional. Status message to capture more details of the job.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetDataIngestionJobDetailsAsync(string jobId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

            using var scope = ClientDiagnostics.CreateScope("WeatherClient.GetDataIngestionJobDetails");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetDataIngestionJobDetailsRequest(jobId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get weather ingestion job. </summary>
        /// <param name="jobId"> ID of the job. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetDataIngestionJobDetails with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new WeatherClient(endpoint, credential);
        /// 
        /// Response response = client.GetDataIngestionJobDetails("<jobId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("boundaryId").ToString());
        /// Console.WriteLine(result.GetProperty("farmerId").ToString());
        /// Console.WriteLine(result.GetProperty("extensionId").ToString());
        /// Console.WriteLine(result.GetProperty("extensionApiName").ToString());
        /// Console.WriteLine(result.GetProperty("extensionApiInput").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("extensionDataProviderAppId").ToString());
        /// Console.WriteLine(result.GetProperty("extensionDataProviderApiKey").ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
        /// Console.WriteLine(result.GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>WeatherDataIngestionJob</c>:
        /// <code>{
        ///   boundaryId: string, # Required. The id of the boundary object for which weather data is being fetched.
        ///   farmerId: string, # Required. The id of the farmer object for which weather data is being fetched.
        ///   extensionId: string, # Required. ID of the extension to be used for the providerInput. eg. DTN.ClearAg.
        ///   extensionApiName: string, # Required. Extension api name to which request is to be made.
        ///   extensionApiInput: Dictionary&lt;string, AnyObject&gt;, # Required. Extension api input dictionary which would be used to feed request query/body/parameter information.
        ///   extensionDataProviderAppId: string, # Optional. App id of the weather data provider.
        ///   extensionDataProviderApiKey: string, # Optional. Api key of the weather data provider.
        ///   id: string, # Optional. Unique job id.
        ///   status: string, # Optional. Status of the job.
        /// Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
        ///   durationInSeconds: number, # Optional. Duration of the job in seconds.
        ///   message: string, # Optional. Status message to capture more details of the job.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetDataIngestionJobDetails(string jobId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

            using var scope = ClientDiagnostics.CreateScope("WeatherClient.GetDataIngestionJobDetails");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetDataIngestionJobDetailsRequest(jobId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get weather data delete job. </summary>
        /// <param name="jobId"> ID of the job. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetDataDeleteJobDetailsAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new WeatherClient(endpoint, credential);
        /// 
        /// Response response = await client.GetDataDeleteJobDetailsAsync("<jobId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("extensionId").ToString());
        /// Console.WriteLine(result.GetProperty("farmerId").ToString());
        /// Console.WriteLine(result.GetProperty("boundaryId").ToString());
        /// Console.WriteLine(result.GetProperty("weatherDataType").ToString());
        /// Console.WriteLine(result.GetProperty("granularity").ToString());
        /// Console.WriteLine(result.GetProperty("startDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("endDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
        /// Console.WriteLine(result.GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>WeatherDataDeleteJob</c>:
        /// <code>{
        ///   extensionId: string, # Required. ID of the extension to be used for the providerInput. eg. DTN.ClearAg.
        ///   farmerId: string, # Required. The id of the farmer object for which weather data is being fetched.
        ///   boundaryId: string, # Required. The id of the boundary object for which weather data is being fetched.
        ///   weatherDataType: string, # Optional. Type of weather data. Possible values include: &apos;forecast&apos; , &apos;historical&apos;.
        ///   granularity: string, # Optional. Granularity of weather data. Possible values include: &apos;daily&apos; , &apos;hourly&apos;.
        ///   startDateTime: string (ISO 8601 Format), # Optional. Weather data start UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   endDateTime: string (ISO 8601 Format), # Optional. Weather data end UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   id: string, # Optional. Unique job id.
        ///   status: string, # Optional. Status of the job.
        /// Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
        ///   durationInSeconds: number, # Optional. Duration of the job in seconds.
        ///   message: string, # Optional. Status message to capture more details of the job.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetDataDeleteJobDetailsAsync(string jobId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

            using var scope = ClientDiagnostics.CreateScope("WeatherClient.GetDataDeleteJobDetails");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetDataDeleteJobDetailsRequest(jobId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get weather data delete job. </summary>
        /// <param name="jobId"> ID of the job. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetDataDeleteJobDetails with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new WeatherClient(endpoint, credential);
        /// 
        /// Response response = client.GetDataDeleteJobDetails("<jobId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("extensionId").ToString());
        /// Console.WriteLine(result.GetProperty("farmerId").ToString());
        /// Console.WriteLine(result.GetProperty("boundaryId").ToString());
        /// Console.WriteLine(result.GetProperty("weatherDataType").ToString());
        /// Console.WriteLine(result.GetProperty("granularity").ToString());
        /// Console.WriteLine(result.GetProperty("startDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("endDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
        /// Console.WriteLine(result.GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>WeatherDataDeleteJob</c>:
        /// <code>{
        ///   extensionId: string, # Required. ID of the extension to be used for the providerInput. eg. DTN.ClearAg.
        ///   farmerId: string, # Required. The id of the farmer object for which weather data is being fetched.
        ///   boundaryId: string, # Required. The id of the boundary object for which weather data is being fetched.
        ///   weatherDataType: string, # Optional. Type of weather data. Possible values include: &apos;forecast&apos; , &apos;historical&apos;.
        ///   granularity: string, # Optional. Granularity of weather data. Possible values include: &apos;daily&apos; , &apos;hourly&apos;.
        ///   startDateTime: string (ISO 8601 Format), # Optional. Weather data start UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   endDateTime: string (ISO 8601 Format), # Optional. Weather data end UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   id: string, # Optional. Unique job id.
        ///   status: string, # Optional. Status of the job.
        /// Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
        ///   durationInSeconds: number, # Optional. Duration of the job in seconds.
        ///   message: string, # Optional. Status message to capture more details of the job.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetDataDeleteJobDetails(string jobId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

            using var scope = ClientDiagnostics.CreateScope("WeatherClient.GetDataDeleteJobDetails");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetDataDeleteJobDetailsRequest(jobId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a paginated list of weather data. </summary>
        /// <param name="farmerId"> Farmer ID. </param>
        /// <param name="boundaryId"> Boundary ID. </param>
        /// <param name="extensionId"> ID of the weather extension. </param>
        /// <param name="weatherDataType"> Type of weather data (forecast/historical). </param>
        /// <param name="granularity"> Granularity of weather data (daily/hourly). </param>
        /// <param name="startDateTime"> Weather data start UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="endDateTime"> Weather data end UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="maxPageSize">
        /// Maximum number of items needed (inclusive).
        /// Minimum = 10, Maximum = 1000, Default value = 50.
        /// </param>
        /// <param name="skipToken"> Skip token for getting next set of results. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="farmerId"/>, <paramref name="boundaryId"/>, <paramref name="extensionId"/>, <paramref name="weatherDataType"/> or <paramref name="granularity"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetWeathersAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new WeatherClient(endpoint, credential);
        /// 
        /// await foreach (var data in client.GetWeathersAsync("<farmerId>", "<boundaryId>", "<extensionId>", "<weatherDataType>", "<granularity>"))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.GetProperty("farmerId").ToString());
        ///     Console.WriteLine(result.GetProperty("boundaryId").ToString());
        ///     Console.WriteLine(result.GetProperty("extensionId").ToString());
        ///     Console.WriteLine(result.GetProperty("location").GetProperty("latitude").ToString());
        ///     Console.WriteLine(result.GetProperty("location").GetProperty("longitude").ToString());
        ///     Console.WriteLine(result.GetProperty("dateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("extensionVersion").ToString());
        ///     Console.WriteLine(result.GetProperty("weatherDataType").ToString());
        ///     Console.WriteLine(result.GetProperty("granularity").ToString());
        /// }
        /// ]]></code>
        /// This sample shows how to call GetWeathersAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new WeatherClient(endpoint, credential);
        /// 
        /// await foreach (var data in client.GetWeathersAsync("<farmerId>", "<boundaryId>", "<extensionId>", "<weatherDataType>", "<granularity>", DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 1234, "<skipToken>"))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.GetProperty("farmerId").ToString());
        ///     Console.WriteLine(result.GetProperty("boundaryId").ToString());
        ///     Console.WriteLine(result.GetProperty("extensionId").ToString());
        ///     Console.WriteLine(result.GetProperty("location").GetProperty("latitude").ToString());
        ///     Console.WriteLine(result.GetProperty("location").GetProperty("longitude").ToString());
        ///     Console.WriteLine(result.GetProperty("dateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("unitSystemCode").ToString());
        ///     Console.WriteLine(result.GetProperty("extensionVersion").ToString());
        ///     Console.WriteLine(result.GetProperty("weatherDataType").ToString());
        ///     Console.WriteLine(result.GetProperty("granularity").ToString());
        ///     Console.WriteLine(result.GetProperty("cloudCover").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("cloudCover").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("dewPoint").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("dewPoint").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("growingDegreeDay").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("growingDegreeDay").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("precipitation").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("precipitation").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("pressure").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("pressure").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("relativeHumidity").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("relativeHumidity").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("soilMoisture").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("soilMoisture").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("soilTemperature").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("soilTemperature").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("temperature").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("temperature").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("visibility").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("visibility").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("wetBulbTemperature").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("wetBulbTemperature").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("windChill").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("windChill").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("windDirection").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("windDirection").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("windGust").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("windGust").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("windSpeed").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("windSpeed").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("id").ToString());
        ///     Console.WriteLine(result.GetProperty("eTag").ToString());
        ///     Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
        /// }
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for one item in the pageable response.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>WeatherDataListResponseValue</c>:
        /// <code>{
        ///   farmerId: string, # Required. Farmer ID.
        ///   boundaryId: string, # Required. Boundary ID.
        ///   extensionId: string, # Required. ID of the weather extension.
        ///   location: {
        ///     latitude: number, # Required. Latitude of the location.
        ///     longitude: number, # Required. Longitude of the location.
        ///   }, # Required. Location model class.
        ///   dateTime: string (ISO 8601 Format), # Required. Date-time of the weather data, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   unitSystemCode: string, # Optional. Unit System like US/SI etc.
        ///   extensionVersion: string, # Required. Version of the weather data extension.
        ///   weatherDataType: string, # Required. Type of weather data (forecast/historical).
        ///   granularity: string, # Required. Granularity of weather data (daily/hourly).
        ///   cloudCover: {
        ///     unit: string, # Optional. Data unit.
        ///     value: number, # Optional. Data value.
        ///   }, # Optional. Schema for storing measurement reading and unit.
        ///   dewPoint: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   growingDegreeDay: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   precipitation: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   pressure: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   relativeHumidity: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   soilMoisture: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   soilTemperature: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   temperature: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   visibility: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   wetBulbTemperature: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   windChill: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   windDirection: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   windGust: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   windSpeed: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   id: string, # Optional. Weather data ID.
        ///   eTag: string, # Optional. The ETag value to implement optimistic concurrency.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual AsyncPageable<BinaryData> GetWeathersAsync(string farmerId, string boundaryId, string extensionId, string weatherDataType, string granularity, DateTimeOffset? startDateTime = null, DateTimeOffset? endDateTime = null, int? maxPageSize = null, string skipToken = null, RequestContext context = null)
        {
            Argument.AssertNotNull(farmerId, nameof(farmerId));
            Argument.AssertNotNull(boundaryId, nameof(boundaryId));
            Argument.AssertNotNull(extensionId, nameof(extensionId));
            Argument.AssertNotNull(weatherDataType, nameof(weatherDataType));
            Argument.AssertNotNull(granularity, nameof(granularity));

            return GetWeathersImplementationAsync("WeatherClient.GetWeathers", farmerId, boundaryId, extensionId, weatherDataType, granularity, startDateTime, endDateTime, maxPageSize, skipToken, context);
        }

        private AsyncPageable<BinaryData> GetWeathersImplementationAsync(string diagnosticsScopeName, string farmerId, string boundaryId, string extensionId, string weatherDataType, string granularity, DateTimeOffset? startDateTime, DateTimeOffset? endDateTime, int? maxPageSize, string skipToken, RequestContext context)
        {
            return PageableHelpers.CreateAsyncPageable(CreateEnumerableAsync, ClientDiagnostics, diagnosticsScopeName);
            async IAsyncEnumerable<Page<BinaryData>> CreateEnumerableAsync(string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken = default)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetWeathersRequest(farmerId, boundaryId, extensionId, weatherDataType, granularity, startDateTime, endDateTime, maxPageSize, skipToken, context)
                        : CreateGetWeathersNextPageRequest(nextLink, farmerId, boundaryId, extensionId, weatherDataType, granularity, startDateTime, endDateTime, maxPageSize, skipToken, context);
                    var page = await LowLevelPageableHelpers.ProcessMessageAsync(_pipeline, message, context, "value", "nextLink", cancellationToken).ConfigureAwait(false);
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Returns a paginated list of weather data. </summary>
        /// <param name="farmerId"> Farmer ID. </param>
        /// <param name="boundaryId"> Boundary ID. </param>
        /// <param name="extensionId"> ID of the weather extension. </param>
        /// <param name="weatherDataType"> Type of weather data (forecast/historical). </param>
        /// <param name="granularity"> Granularity of weather data (daily/hourly). </param>
        /// <param name="startDateTime"> Weather data start UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="endDateTime"> Weather data end UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="maxPageSize">
        /// Maximum number of items needed (inclusive).
        /// Minimum = 10, Maximum = 1000, Default value = 50.
        /// </param>
        /// <param name="skipToken"> Skip token for getting next set of results. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="farmerId"/>, <paramref name="boundaryId"/>, <paramref name="extensionId"/>, <paramref name="weatherDataType"/> or <paramref name="granularity"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetWeathers with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new WeatherClient(endpoint, credential);
        /// 
        /// foreach (var data in client.GetWeathers("<farmerId>", "<boundaryId>", "<extensionId>", "<weatherDataType>", "<granularity>"))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.GetProperty("farmerId").ToString());
        ///     Console.WriteLine(result.GetProperty("boundaryId").ToString());
        ///     Console.WriteLine(result.GetProperty("extensionId").ToString());
        ///     Console.WriteLine(result.GetProperty("location").GetProperty("latitude").ToString());
        ///     Console.WriteLine(result.GetProperty("location").GetProperty("longitude").ToString());
        ///     Console.WriteLine(result.GetProperty("dateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("extensionVersion").ToString());
        ///     Console.WriteLine(result.GetProperty("weatherDataType").ToString());
        ///     Console.WriteLine(result.GetProperty("granularity").ToString());
        /// }
        /// ]]></code>
        /// This sample shows how to call GetWeathers with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new WeatherClient(endpoint, credential);
        /// 
        /// foreach (var data in client.GetWeathers("<farmerId>", "<boundaryId>", "<extensionId>", "<weatherDataType>", "<granularity>", DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 1234, "<skipToken>"))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.GetProperty("farmerId").ToString());
        ///     Console.WriteLine(result.GetProperty("boundaryId").ToString());
        ///     Console.WriteLine(result.GetProperty("extensionId").ToString());
        ///     Console.WriteLine(result.GetProperty("location").GetProperty("latitude").ToString());
        ///     Console.WriteLine(result.GetProperty("location").GetProperty("longitude").ToString());
        ///     Console.WriteLine(result.GetProperty("dateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("unitSystemCode").ToString());
        ///     Console.WriteLine(result.GetProperty("extensionVersion").ToString());
        ///     Console.WriteLine(result.GetProperty("weatherDataType").ToString());
        ///     Console.WriteLine(result.GetProperty("granularity").ToString());
        ///     Console.WriteLine(result.GetProperty("cloudCover").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("cloudCover").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("dewPoint").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("dewPoint").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("growingDegreeDay").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("growingDegreeDay").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("precipitation").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("precipitation").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("pressure").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("pressure").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("relativeHumidity").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("relativeHumidity").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("soilMoisture").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("soilMoisture").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("soilTemperature").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("soilTemperature").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("temperature").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("temperature").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("visibility").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("visibility").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("wetBulbTemperature").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("wetBulbTemperature").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("windChill").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("windChill").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("windDirection").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("windDirection").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("windGust").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("windGust").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("windSpeed").GetProperty("unit").ToString());
        ///     Console.WriteLine(result.GetProperty("windSpeed").GetProperty("value").ToString());
        ///     Console.WriteLine(result.GetProperty("id").ToString());
        ///     Console.WriteLine(result.GetProperty("eTag").ToString());
        ///     Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
        /// }
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for one item in the pageable response.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>WeatherDataListResponseValue</c>:
        /// <code>{
        ///   farmerId: string, # Required. Farmer ID.
        ///   boundaryId: string, # Required. Boundary ID.
        ///   extensionId: string, # Required. ID of the weather extension.
        ///   location: {
        ///     latitude: number, # Required. Latitude of the location.
        ///     longitude: number, # Required. Longitude of the location.
        ///   }, # Required. Location model class.
        ///   dateTime: string (ISO 8601 Format), # Required. Date-time of the weather data, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   unitSystemCode: string, # Optional. Unit System like US/SI etc.
        ///   extensionVersion: string, # Required. Version of the weather data extension.
        ///   weatherDataType: string, # Required. Type of weather data (forecast/historical).
        ///   granularity: string, # Required. Granularity of weather data (daily/hourly).
        ///   cloudCover: {
        ///     unit: string, # Optional. Data unit.
        ///     value: number, # Optional. Data value.
        ///   }, # Optional. Schema for storing measurement reading and unit.
        ///   dewPoint: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   growingDegreeDay: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   precipitation: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   pressure: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   relativeHumidity: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   soilMoisture: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   soilTemperature: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   temperature: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   visibility: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   wetBulbTemperature: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   windChill: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   windDirection: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   windGust: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   windSpeed: Measure, # Optional. Schema for storing measurement reading and unit.
        ///   id: string, # Optional. Weather data ID.
        ///   eTag: string, # Optional. The ETag value to implement optimistic concurrency.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Pageable<BinaryData> GetWeathers(string farmerId, string boundaryId, string extensionId, string weatherDataType, string granularity, DateTimeOffset? startDateTime = null, DateTimeOffset? endDateTime = null, int? maxPageSize = null, string skipToken = null, RequestContext context = null)
        {
            Argument.AssertNotNull(farmerId, nameof(farmerId));
            Argument.AssertNotNull(boundaryId, nameof(boundaryId));
            Argument.AssertNotNull(extensionId, nameof(extensionId));
            Argument.AssertNotNull(weatherDataType, nameof(weatherDataType));
            Argument.AssertNotNull(granularity, nameof(granularity));

            return GetWeathersImplementation("WeatherClient.GetWeathers", farmerId, boundaryId, extensionId, weatherDataType, granularity, startDateTime, endDateTime, maxPageSize, skipToken, context);
        }

        private Pageable<BinaryData> GetWeathersImplementation(string diagnosticsScopeName, string farmerId, string boundaryId, string extensionId, string weatherDataType, string granularity, DateTimeOffset? startDateTime, DateTimeOffset? endDateTime, int? maxPageSize, string skipToken, RequestContext context)
        {
            return PageableHelpers.CreatePageable(CreateEnumerable, ClientDiagnostics, diagnosticsScopeName);
            IEnumerable<Page<BinaryData>> CreateEnumerable(string nextLink, int? pageSizeHint)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetWeathersRequest(farmerId, boundaryId, extensionId, weatherDataType, granularity, startDateTime, endDateTime, maxPageSize, skipToken, context)
                        : CreateGetWeathersNextPageRequest(nextLink, farmerId, boundaryId, extensionId, weatherDataType, granularity, startDateTime, endDateTime, maxPageSize, skipToken, context);
                    var page = LowLevelPageableHelpers.ProcessMessage(_pipeline, message, context, "value", "nextLink");
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Create a weather data ingestion job. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="jobId"> Job id supplied by user. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation{T}"/> from the service that will contain a <see cref="BinaryData"/> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateDataIngestionJobAsync with required parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new WeatherClient(endpoint, credential);
        /// 
        /// var data = new {
        ///     boundaryId = "<boundaryId>",
        ///     farmerId = "<farmerId>",
        ///     extensionId = "<extensionId>",
        ///     extensionApiName = "<extensionApiName>",
        ///     extensionApiInput = new {
        ///         key = new {},
        ///     },
        /// };
        /// 
        /// var operation = await client.CreateDataIngestionJobAsync(WaitUntil.Completed, "<jobId>", RequestContent.Create(data));
        /// 
        /// BinaryData data = await operation.WaitForCompletionAsync();
        /// JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        /// Console.WriteLine(result.GetProperty("boundaryId").ToString());
        /// Console.WriteLine(result.GetProperty("farmerId").ToString());
        /// Console.WriteLine(result.GetProperty("extensionId").ToString());
        /// Console.WriteLine(result.GetProperty("extensionApiName").ToString());
        /// Console.WriteLine(result.GetProperty("extensionApiInput").GetProperty("<test>").ToString());
        /// ]]></code>
        /// This sample shows how to call CreateDataIngestionJobAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new WeatherClient(endpoint, credential);
        /// 
        /// var data = new {
        ///     boundaryId = "<boundaryId>",
        ///     farmerId = "<farmerId>",
        ///     extensionId = "<extensionId>",
        ///     extensionApiName = "<extensionApiName>",
        ///     extensionApiInput = new {
        ///         key = new {},
        ///     },
        ///     extensionDataProviderAppId = "<extensionDataProviderAppId>",
        ///     extensionDataProviderApiKey = "<extensionDataProviderApiKey>",
        ///     name = "<name>",
        ///     description = "<description>",
        ///     properties = new {
        ///         key = new {},
        ///     },
        /// };
        /// 
        /// var operation = await client.CreateDataIngestionJobAsync(WaitUntil.Completed, "<jobId>", RequestContent.Create(data));
        /// 
        /// BinaryData data = await operation.WaitForCompletionAsync();
        /// JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        /// Console.WriteLine(result.GetProperty("boundaryId").ToString());
        /// Console.WriteLine(result.GetProperty("farmerId").ToString());
        /// Console.WriteLine(result.GetProperty("extensionId").ToString());
        /// Console.WriteLine(result.GetProperty("extensionApiName").ToString());
        /// Console.WriteLine(result.GetProperty("extensionApiInput").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("extensionDataProviderAppId").ToString());
        /// Console.WriteLine(result.GetProperty("extensionDataProviderApiKey").ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
        /// Console.WriteLine(result.GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>WeatherDataIngestionJob</c>:
        /// <code>{
        ///   boundaryId: string, # Required. The id of the boundary object for which weather data is being fetched.
        ///   farmerId: string, # Required. The id of the farmer object for which weather data is being fetched.
        ///   extensionId: string, # Required. ID of the extension to be used for the providerInput. eg. DTN.ClearAg.
        ///   extensionApiName: string, # Required. Extension api name to which request is to be made.
        ///   extensionApiInput: Dictionary&lt;string, AnyObject&gt;, # Required. Extension api input dictionary which would be used to feed request query/body/parameter information.
        ///   extensionDataProviderAppId: string, # Optional. App id of the weather data provider.
        ///   extensionDataProviderApiKey: string, # Optional. Api key of the weather data provider.
        ///   id: string, # Optional. Unique job id.
        ///   status: string, # Optional. Status of the job.
        /// Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
        ///   durationInSeconds: number, # Optional. Duration of the job in seconds.
        ///   message: string, # Optional. Status message to capture more details of the job.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>WeatherDataIngestionJob</c>:
        /// <code>{
        ///   boundaryId: string, # Required. The id of the boundary object for which weather data is being fetched.
        ///   farmerId: string, # Required. The id of the farmer object for which weather data is being fetched.
        ///   extensionId: string, # Required. ID of the extension to be used for the providerInput. eg. DTN.ClearAg.
        ///   extensionApiName: string, # Required. Extension api name to which request is to be made.
        ///   extensionApiInput: Dictionary&lt;string, AnyObject&gt;, # Required. Extension api input dictionary which would be used to feed request query/body/parameter information.
        ///   extensionDataProviderAppId: string, # Optional. App id of the weather data provider.
        ///   extensionDataProviderApiKey: string, # Optional. Api key of the weather data provider.
        ///   id: string, # Optional. Unique job id.
        ///   status: string, # Optional. Status of the job.
        /// Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
        ///   durationInSeconds: number, # Optional. Duration of the job in seconds.
        ///   message: string, # Optional. Status message to capture more details of the job.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Operation<BinaryData>> CreateDataIngestionJobAsync(WaitUntil waitUntil, string jobId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

            using var scope = ClientDiagnostics.CreateScope("WeatherClient.CreateDataIngestionJob");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateDataIngestionJobRequest(jobId, content, context);
                return await ProtocolOperationHelpers.ProcessMessageAsync(_pipeline, message, ClientDiagnostics, "WeatherClient.CreateDataIngestionJob", OperationFinalStateVia.Location, context, waitUntil).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a weather data ingestion job. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="jobId"> Job id supplied by user. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation{T}"/> from the service that will contain a <see cref="BinaryData"/> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateDataIngestionJob with required parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new WeatherClient(endpoint, credential);
        /// 
        /// var data = new {
        ///     boundaryId = "<boundaryId>",
        ///     farmerId = "<farmerId>",
        ///     extensionId = "<extensionId>",
        ///     extensionApiName = "<extensionApiName>",
        ///     extensionApiInput = new {
        ///         key = new {},
        ///     },
        /// };
        /// 
        /// var operation = client.CreateDataIngestionJob(WaitUntil.Completed, "<jobId>", RequestContent.Create(data));
        /// 
        /// BinaryData data = operation.WaitForCompletion();
        /// JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        /// Console.WriteLine(result.GetProperty("boundaryId").ToString());
        /// Console.WriteLine(result.GetProperty("farmerId").ToString());
        /// Console.WriteLine(result.GetProperty("extensionId").ToString());
        /// Console.WriteLine(result.GetProperty("extensionApiName").ToString());
        /// Console.WriteLine(result.GetProperty("extensionApiInput").GetProperty("<test>").ToString());
        /// ]]></code>
        /// This sample shows how to call CreateDataIngestionJob with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new WeatherClient(endpoint, credential);
        /// 
        /// var data = new {
        ///     boundaryId = "<boundaryId>",
        ///     farmerId = "<farmerId>",
        ///     extensionId = "<extensionId>",
        ///     extensionApiName = "<extensionApiName>",
        ///     extensionApiInput = new {
        ///         key = new {},
        ///     },
        ///     extensionDataProviderAppId = "<extensionDataProviderAppId>",
        ///     extensionDataProviderApiKey = "<extensionDataProviderApiKey>",
        ///     name = "<name>",
        ///     description = "<description>",
        ///     properties = new {
        ///         key = new {},
        ///     },
        /// };
        /// 
        /// var operation = client.CreateDataIngestionJob(WaitUntil.Completed, "<jobId>", RequestContent.Create(data));
        /// 
        /// BinaryData data = operation.WaitForCompletion();
        /// JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        /// Console.WriteLine(result.GetProperty("boundaryId").ToString());
        /// Console.WriteLine(result.GetProperty("farmerId").ToString());
        /// Console.WriteLine(result.GetProperty("extensionId").ToString());
        /// Console.WriteLine(result.GetProperty("extensionApiName").ToString());
        /// Console.WriteLine(result.GetProperty("extensionApiInput").GetProperty("<test>").ToString());
        /// Console.WriteLine(result.GetProperty("extensionDataProviderAppId").ToString());
        /// Console.WriteLine(result.GetProperty("extensionDataProviderApiKey").ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
        /// Console.WriteLine(result.GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>WeatherDataIngestionJob</c>:
        /// <code>{
        ///   boundaryId: string, # Required. The id of the boundary object for which weather data is being fetched.
        ///   farmerId: string, # Required. The id of the farmer object for which weather data is being fetched.
        ///   extensionId: string, # Required. ID of the extension to be used for the providerInput. eg. DTN.ClearAg.
        ///   extensionApiName: string, # Required. Extension api name to which request is to be made.
        ///   extensionApiInput: Dictionary&lt;string, AnyObject&gt;, # Required. Extension api input dictionary which would be used to feed request query/body/parameter information.
        ///   extensionDataProviderAppId: string, # Optional. App id of the weather data provider.
        ///   extensionDataProviderApiKey: string, # Optional. Api key of the weather data provider.
        ///   id: string, # Optional. Unique job id.
        ///   status: string, # Optional. Status of the job.
        /// Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
        ///   durationInSeconds: number, # Optional. Duration of the job in seconds.
        ///   message: string, # Optional. Status message to capture more details of the job.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>WeatherDataIngestionJob</c>:
        /// <code>{
        ///   boundaryId: string, # Required. The id of the boundary object for which weather data is being fetched.
        ///   farmerId: string, # Required. The id of the farmer object for which weather data is being fetched.
        ///   extensionId: string, # Required. ID of the extension to be used for the providerInput. eg. DTN.ClearAg.
        ///   extensionApiName: string, # Required. Extension api name to which request is to be made.
        ///   extensionApiInput: Dictionary&lt;string, AnyObject&gt;, # Required. Extension api input dictionary which would be used to feed request query/body/parameter information.
        ///   extensionDataProviderAppId: string, # Optional. App id of the weather data provider.
        ///   extensionDataProviderApiKey: string, # Optional. Api key of the weather data provider.
        ///   id: string, # Optional. Unique job id.
        ///   status: string, # Optional. Status of the job.
        /// Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
        ///   durationInSeconds: number, # Optional. Duration of the job in seconds.
        ///   message: string, # Optional. Status message to capture more details of the job.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Operation<BinaryData> CreateDataIngestionJob(WaitUntil waitUntil, string jobId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

            using var scope = ClientDiagnostics.CreateScope("WeatherClient.CreateDataIngestionJob");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateDataIngestionJobRequest(jobId, content, context);
                return ProtocolOperationHelpers.ProcessMessage(_pipeline, message, ClientDiagnostics, "WeatherClient.CreateDataIngestionJob", OperationFinalStateVia.Location, context, waitUntil);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a weather data delete job. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="jobId"> Job ID supplied by end user. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation{T}"/> from the service that will contain a <see cref="BinaryData"/> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateDataDeleteJobAsync with required parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new WeatherClient(endpoint, credential);
        /// 
        /// var data = new {
        ///     extensionId = "<extensionId>",
        ///     farmerId = "<farmerId>",
        ///     boundaryId = "<boundaryId>",
        /// };
        /// 
        /// var operation = await client.CreateDataDeleteJobAsync(WaitUntil.Completed, "<jobId>", RequestContent.Create(data));
        /// 
        /// BinaryData data = await operation.WaitForCompletionAsync();
        /// JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        /// Console.WriteLine(result.GetProperty("extensionId").ToString());
        /// Console.WriteLine(result.GetProperty("farmerId").ToString());
        /// Console.WriteLine(result.GetProperty("boundaryId").ToString());
        /// ]]></code>
        /// This sample shows how to call CreateDataDeleteJobAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new WeatherClient(endpoint, credential);
        /// 
        /// var data = new {
        ///     extensionId = "<extensionId>",
        ///     farmerId = "<farmerId>",
        ///     boundaryId = "<boundaryId>",
        ///     weatherDataType = "<weatherDataType>",
        ///     granularity = "<granularity>",
        ///     startDateTime = "2022-05-10T18:57:31.2311892Z",
        ///     endDateTime = "2022-05-10T18:57:31.2311892Z",
        ///     name = "<name>",
        ///     description = "<description>",
        ///     properties = new {
        ///         key = new {},
        ///     },
        /// };
        /// 
        /// var operation = await client.CreateDataDeleteJobAsync(WaitUntil.Completed, "<jobId>", RequestContent.Create(data));
        /// 
        /// BinaryData data = await operation.WaitForCompletionAsync();
        /// JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        /// Console.WriteLine(result.GetProperty("extensionId").ToString());
        /// Console.WriteLine(result.GetProperty("farmerId").ToString());
        /// Console.WriteLine(result.GetProperty("boundaryId").ToString());
        /// Console.WriteLine(result.GetProperty("weatherDataType").ToString());
        /// Console.WriteLine(result.GetProperty("granularity").ToString());
        /// Console.WriteLine(result.GetProperty("startDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("endDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
        /// Console.WriteLine(result.GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>WeatherDataDeleteJob</c>:
        /// <code>{
        ///   extensionId: string, # Required. ID of the extension to be used for the providerInput. eg. DTN.ClearAg.
        ///   farmerId: string, # Required. The id of the farmer object for which weather data is being fetched.
        ///   boundaryId: string, # Required. The id of the boundary object for which weather data is being fetched.
        ///   weatherDataType: string, # Optional. Type of weather data. Possible values include: &apos;forecast&apos; , &apos;historical&apos;.
        ///   granularity: string, # Optional. Granularity of weather data. Possible values include: &apos;daily&apos; , &apos;hourly&apos;.
        ///   startDateTime: string (ISO 8601 Format), # Optional. Weather data start UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   endDateTime: string (ISO 8601 Format), # Optional. Weather data end UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   id: string, # Optional. Unique job id.
        ///   status: string, # Optional. Status of the job.
        /// Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
        ///   durationInSeconds: number, # Optional. Duration of the job in seconds.
        ///   message: string, # Optional. Status message to capture more details of the job.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>WeatherDataDeleteJob</c>:
        /// <code>{
        ///   extensionId: string, # Required. ID of the extension to be used for the providerInput. eg. DTN.ClearAg.
        ///   farmerId: string, # Required. The id of the farmer object for which weather data is being fetched.
        ///   boundaryId: string, # Required. The id of the boundary object for which weather data is being fetched.
        ///   weatherDataType: string, # Optional. Type of weather data. Possible values include: &apos;forecast&apos; , &apos;historical&apos;.
        ///   granularity: string, # Optional. Granularity of weather data. Possible values include: &apos;daily&apos; , &apos;hourly&apos;.
        ///   startDateTime: string (ISO 8601 Format), # Optional. Weather data start UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   endDateTime: string (ISO 8601 Format), # Optional. Weather data end UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   id: string, # Optional. Unique job id.
        ///   status: string, # Optional. Status of the job.
        /// Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
        ///   durationInSeconds: number, # Optional. Duration of the job in seconds.
        ///   message: string, # Optional. Status message to capture more details of the job.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Operation<BinaryData>> CreateDataDeleteJobAsync(WaitUntil waitUntil, string jobId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

            using var scope = ClientDiagnostics.CreateScope("WeatherClient.CreateDataDeleteJob");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateDataDeleteJobRequest(jobId, content, context);
                return await ProtocolOperationHelpers.ProcessMessageAsync(_pipeline, message, ClientDiagnostics, "WeatherClient.CreateDataDeleteJob", OperationFinalStateVia.Location, context, waitUntil).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a weather data delete job. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="jobId"> Job ID supplied by end user. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation{T}"/> from the service that will contain a <see cref="BinaryData"/> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateDataDeleteJob with required parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new WeatherClient(endpoint, credential);
        /// 
        /// var data = new {
        ///     extensionId = "<extensionId>",
        ///     farmerId = "<farmerId>",
        ///     boundaryId = "<boundaryId>",
        /// };
        /// 
        /// var operation = client.CreateDataDeleteJob(WaitUntil.Completed, "<jobId>", RequestContent.Create(data));
        /// 
        /// BinaryData data = operation.WaitForCompletion();
        /// JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        /// Console.WriteLine(result.GetProperty("extensionId").ToString());
        /// Console.WriteLine(result.GetProperty("farmerId").ToString());
        /// Console.WriteLine(result.GetProperty("boundaryId").ToString());
        /// ]]></code>
        /// This sample shows how to call CreateDataDeleteJob with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new WeatherClient(endpoint, credential);
        /// 
        /// var data = new {
        ///     extensionId = "<extensionId>",
        ///     farmerId = "<farmerId>",
        ///     boundaryId = "<boundaryId>",
        ///     weatherDataType = "<weatherDataType>",
        ///     granularity = "<granularity>",
        ///     startDateTime = "2022-05-10T18:57:31.2311892Z",
        ///     endDateTime = "2022-05-10T18:57:31.2311892Z",
        ///     name = "<name>",
        ///     description = "<description>",
        ///     properties = new {
        ///         key = new {},
        ///     },
        /// };
        /// 
        /// var operation = client.CreateDataDeleteJob(WaitUntil.Completed, "<jobId>", RequestContent.Create(data));
        /// 
        /// BinaryData data = operation.WaitForCompletion();
        /// JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        /// Console.WriteLine(result.GetProperty("extensionId").ToString());
        /// Console.WriteLine(result.GetProperty("farmerId").ToString());
        /// Console.WriteLine(result.GetProperty("boundaryId").ToString());
        /// Console.WriteLine(result.GetProperty("weatherDataType").ToString());
        /// Console.WriteLine(result.GetProperty("granularity").ToString());
        /// Console.WriteLine(result.GetProperty("startDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("endDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
        /// Console.WriteLine(result.GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>WeatherDataDeleteJob</c>:
        /// <code>{
        ///   extensionId: string, # Required. ID of the extension to be used for the providerInput. eg. DTN.ClearAg.
        ///   farmerId: string, # Required. The id of the farmer object for which weather data is being fetched.
        ///   boundaryId: string, # Required. The id of the boundary object for which weather data is being fetched.
        ///   weatherDataType: string, # Optional. Type of weather data. Possible values include: &apos;forecast&apos; , &apos;historical&apos;.
        ///   granularity: string, # Optional. Granularity of weather data. Possible values include: &apos;daily&apos; , &apos;hourly&apos;.
        ///   startDateTime: string (ISO 8601 Format), # Optional. Weather data start UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   endDateTime: string (ISO 8601 Format), # Optional. Weather data end UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   id: string, # Optional. Unique job id.
        ///   status: string, # Optional. Status of the job.
        /// Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
        ///   durationInSeconds: number, # Optional. Duration of the job in seconds.
        ///   message: string, # Optional. Status message to capture more details of the job.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>WeatherDataDeleteJob</c>:
        /// <code>{
        ///   extensionId: string, # Required. ID of the extension to be used for the providerInput. eg. DTN.ClearAg.
        ///   farmerId: string, # Required. The id of the farmer object for which weather data is being fetched.
        ///   boundaryId: string, # Required. The id of the boundary object for which weather data is being fetched.
        ///   weatherDataType: string, # Optional. Type of weather data. Possible values include: &apos;forecast&apos; , &apos;historical&apos;.
        ///   granularity: string, # Optional. Granularity of weather data. Possible values include: &apos;daily&apos; , &apos;hourly&apos;.
        ///   startDateTime: string (ISO 8601 Format), # Optional. Weather data start UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   endDateTime: string (ISO 8601 Format), # Optional. Weather data end UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   id: string, # Optional. Unique job id.
        ///   status: string, # Optional. Status of the job.
        /// Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
        ///   durationInSeconds: number, # Optional. Duration of the job in seconds.
        ///   message: string, # Optional. Status message to capture more details of the job.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Operation<BinaryData> CreateDataDeleteJob(WaitUntil waitUntil, string jobId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

            using var scope = ClientDiagnostics.CreateScope("WeatherClient.CreateDataDeleteJob");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateDataDeleteJobRequest(jobId, content, context);
                return ProtocolOperationHelpers.ProcessMessage(_pipeline, message, ClientDiagnostics, "WeatherClient.CreateDataDeleteJob", OperationFinalStateVia.Location, context, waitUntil);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateGetWeathersRequest(string farmerId, string boundaryId, string extensionId, string weatherDataType, string granularity, DateTimeOffset? startDateTime, DateTimeOffset? endDateTime, int? maxPageSize, string skipToken, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/weather", false);
            uri.AppendQuery("farmerId", farmerId, true);
            uri.AppendQuery("boundaryId", boundaryId, true);
            uri.AppendQuery("extensionId", extensionId, true);
            uri.AppendQuery("weatherDataType", weatherDataType, true);
            uri.AppendQuery("granularity", granularity, true);
            if (startDateTime != null)
            {
                uri.AppendQuery("startDateTime", startDateTime.Value, "O", true);
            }
            if (endDateTime != null)
            {
                uri.AppendQuery("endDateTime", endDateTime.Value, "O", true);
            }
            if (maxPageSize != null)
            {
                uri.AppendQuery("$maxPageSize", maxPageSize.Value, true);
            }
            if (skipToken != null)
            {
                uri.AppendQuery("$skipToken", skipToken, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetDataIngestionJobDetailsRequest(string jobId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/weather/ingest-data/", false);
            uri.AppendPath(jobId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCreateDataIngestionJobRequest(string jobId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier202);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/weather/ingest-data/", false);
            uri.AppendPath(jobId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetDataDeleteJobDetailsRequest(string jobId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/weather/delete-data/", false);
            uri.AppendPath(jobId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCreateDataDeleteJobRequest(string jobId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier202);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/weather/delete-data/", false);
            uri.AppendPath(jobId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetWeathersNextPageRequest(string nextLink, string farmerId, string boundaryId, string extensionId, string weatherDataType, string granularity, DateTimeOffset? startDateTime, DateTimeOffset? endDateTime, int? maxPageSize, string skipToken, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier202;
        private static ResponseClassifier ResponseClassifier202 => _responseClassifier202 ??= new StatusCodeClassifier(stackalloc ushort[] { 202 });
    }
}
