// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Verticals.AgriFood.Farming
{
    // Data plane generated client. The ModelInference service client.
    /// <summary> The ModelInference service client. </summary>
    public partial class ModelInferenceClient
    {
        private static readonly string[] AuthorizationScopes = new string[] { "https://farmbeats.azure.net/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of ModelInferenceClient for mocking. </summary>
        protected ModelInferenceClient()
        {
        }

        /// <summary> Initializes a new instance of ModelInferenceClient. </summary>
        /// <param name="endpoint"> The endpoint of your FarmBeats resource (protocol and hostname, for example: https://{resourceName}.farmbeats.azure.net). </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public ModelInferenceClient(TokenCredential credential, Uri endpoint) : this(credential, endpoint, new FarmBeatsClientOptions())
        {
        }

        /// <summary> Initializes a new instance of ModelInferenceClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="credential"/> or <paramref name="endpoint"/> is null. </exception>
        public ModelInferenceClient(TokenCredential credential, Uri endpoint, FarmBeatsClientOptions options)
        {
            Argument.AssertNotNull(credential, nameof(credential));
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new FarmBeatsClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) }, new ResponseClassifier());
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Get Biomass Model job&apos;s details. </summary>
        /// <param name="jobId"> Id of the job. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetBiomassModelJobAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ModelInferenceClient(credential);
        /// 
        /// Response response = await client.GetBiomassModelJobAsync("<jobId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("farmerId").ToString());
        /// Console.WriteLine(result.GetProperty("boundaryId").ToString());
        /// Console.WriteLine(result.GetProperty("modelVersion").ToString());
        /// Console.WriteLine(result.GetProperty("cropName").ToString());
        /// Console.WriteLine(result.GetProperty("plantingStartDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("inferenceEndDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("weatherExtensionId").ToString());
        /// Console.WriteLine(result.GetProperty("satelliteProvider").ToString());
        /// Console.WriteLine(result.GetProperty("satelliteSource").ToString());
        /// Console.WriteLine(result.GetProperty("imageResolution").ToString());
        /// Console.WriteLine(result.GetProperty("imageFormat").ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
        /// Console.WriteLine(result.GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>BiomassModelJob</c>:
        /// <code>{
        ///   farmerId: string, # Required. Farmer Id.
        ///   boundaryId: string, # Required. The id of the boundary object for which biomass is being calculated.
        ///   modelVersion: string, # Required. The version of the biomass model to be run. Available Value: 1.0 .
        ///   cropName: &quot;Corn&quot;, # Required. Crop name for biomass model. Available Value: Corn.
        ///   plantingStartDateTime: string (ISO 8601 Format), # Required. Planting datetime for biomass calculations. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   inferenceEndDateTime: string (ISO 8601 Format), # Required. End datetime till which biomass will be calculated. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   weatherExtensionId: string, # Required. ExtensionId of weather data. Available values: DTN.ClearAg, DTN.ContentServices.
        ///   satelliteProvider: &quot;Microsoft&quot;, # Required. Provider of satellite data. Available Value: Microsoft.
        ///   satelliteSource: &quot;Sentinel_2_L2A&quot;, # Required. Source of satellite data. Available Value: Sentinel_2_L2A.
        ///   imageResolution: number, # Required. ImageResolution in meters. Available values: 10, 20, 60.
        ///   imageFormat: &quot;TIF&quot;, # Required. ImageFormat. Available value: TIF.
        ///   id: string, # Optional. Unique job id.
        ///   status: string, # Optional. Status of the job.
        /// Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
        ///   durationInSeconds: number, # Optional. Duration of the job in seconds.
        ///   message: string, # Optional. Status message to capture more details of the job.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string,
        /// numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetBiomassModelJobAsync(string jobId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

            using var scope = ClientDiagnostics.CreateScope("ModelInferenceClient.GetBiomassModelJob");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetBiomassModelJobRequest(jobId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get Biomass Model job&apos;s details. </summary>
        /// <param name="jobId"> Id of the job. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetBiomassModelJob with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ModelInferenceClient(credential);
        /// 
        /// Response response = client.GetBiomassModelJob("<jobId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("farmerId").ToString());
        /// Console.WriteLine(result.GetProperty("boundaryId").ToString());
        /// Console.WriteLine(result.GetProperty("modelVersion").ToString());
        /// Console.WriteLine(result.GetProperty("cropName").ToString());
        /// Console.WriteLine(result.GetProperty("plantingStartDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("inferenceEndDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("weatherExtensionId").ToString());
        /// Console.WriteLine(result.GetProperty("satelliteProvider").ToString());
        /// Console.WriteLine(result.GetProperty("satelliteSource").ToString());
        /// Console.WriteLine(result.GetProperty("imageResolution").ToString());
        /// Console.WriteLine(result.GetProperty("imageFormat").ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
        /// Console.WriteLine(result.GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>BiomassModelJob</c>:
        /// <code>{
        ///   farmerId: string, # Required. Farmer Id.
        ///   boundaryId: string, # Required. The id of the boundary object for which biomass is being calculated.
        ///   modelVersion: string, # Required. The version of the biomass model to be run. Available Value: 1.0 .
        ///   cropName: &quot;Corn&quot;, # Required. Crop name for biomass model. Available Value: Corn.
        ///   plantingStartDateTime: string (ISO 8601 Format), # Required. Planting datetime for biomass calculations. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   inferenceEndDateTime: string (ISO 8601 Format), # Required. End datetime till which biomass will be calculated. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   weatherExtensionId: string, # Required. ExtensionId of weather data. Available values: DTN.ClearAg, DTN.ContentServices.
        ///   satelliteProvider: &quot;Microsoft&quot;, # Required. Provider of satellite data. Available Value: Microsoft.
        ///   satelliteSource: &quot;Sentinel_2_L2A&quot;, # Required. Source of satellite data. Available Value: Sentinel_2_L2A.
        ///   imageResolution: number, # Required. ImageResolution in meters. Available values: 10, 20, 60.
        ///   imageFormat: &quot;TIF&quot;, # Required. ImageFormat. Available value: TIF.
        ///   id: string, # Optional. Unique job id.
        ///   status: string, # Optional. Status of the job.
        /// Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
        ///   durationInSeconds: number, # Optional. Duration of the job in seconds.
        ///   message: string, # Optional. Status message to capture more details of the job.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string,
        /// numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetBiomassModelJob(string jobId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

            using var scope = ClientDiagnostics.CreateScope("ModelInferenceClient.GetBiomassModelJob");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetBiomassModelJobRequest(jobId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get SoilMoisture Model job&apos;s details. </summary>
        /// <param name="jobId"> Id of the job. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetSoilMoistureModelJobAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ModelInferenceClient(credential);
        /// 
        /// Response response = await client.GetSoilMoistureModelJobAsync("<jobId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("farmerId").ToString());
        /// Console.WriteLine(result.GetProperty("boundaryId").ToString());
        /// Console.WriteLine(result.GetProperty("sensorDataModelId").ToString());
        /// Console.WriteLine(result.GetProperty("sensorPartnerId").ToString());
        /// Console.WriteLine(result.GetProperty("inferenceStartDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("inferenceEndDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("satelliteProvider").ToString());
        /// Console.WriteLine(result.GetProperty("satelliteSource").ToString());
        /// Console.WriteLine(result.GetProperty("imageResolution").ToString());
        /// Console.WriteLine(result.GetProperty("imageFormat").ToString());
        /// Console.WriteLine(result.GetProperty("modelVersion").ToString());
        /// Console.WriteLine(result.GetProperty("sensorDefinition").GetProperty("sensorMeasurement").ToString());
        /// Console.WriteLine(result.GetProperty("sensorDefinition").GetProperty("minProperty").ToString());
        /// Console.WriteLine(result.GetProperty("sensorDefinition").GetProperty("maxProperty").ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
        /// Console.WriteLine(result.GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>SoilMoistureModelJob</c>:
        /// <code>{
        ///   farmerId: string, # Required. Farmer Id.
        ///   boundaryId: string, # Required. The id of the boundary object for which soil moisture is being calculated.
        ///   sensorDataModelId: string, # Required. Sensor data model Id.
        ///   sensorPartnerId: string, # Required. Sensor partner Id.
        ///   inferenceStartDateTime: string (ISO 8601 Format), # Required. Inference start date time for soil moisture calculations.
        ///   inferenceEndDateTime: string (ISO 8601 Format), # Required. Inference end date time for soil moisture calculations.
        ///   satelliteProvider: &quot;Microsoft&quot;, # Required. Provider of satellite data. Available Value: Microsoft.
        ///   satelliteSource: &quot;Sentinel_2_L2A&quot;, # Required. Source of satellite data. Available Value: Sentinel_2_L2A.
        ///   imageResolution: number, # Required. ImageResolution in meters. Available values: 10, 20, 60.
        ///   imageFormat: &quot;TIF&quot;, # Required. ImageFormat. Available value: TIF.
        ///   modelVersion: string, # Required. The version of the soil moisture model to be run.
        ///   sensorDefinition: {
        ///     sensorMeasurement: string, # Required. The measurement name for sensor measure in sensorDataModel.
        ///     minProperty: string, # Required. The measurement name for minimum measurement value.
        ///     maxProperty: string, # Required. The measurement name for maximum measurement value.
        ///   }, # Required. Schema for storing sensor definition keywords.
        ///   id: string, # Optional. Unique job id.
        ///   status: string, # Optional. Status of the job.
        /// Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
        ///   durationInSeconds: number, # Optional. Duration of the job in seconds.
        ///   message: string, # Optional. Status message to capture more details of the job.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string,
        /// numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetSoilMoistureModelJobAsync(string jobId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

            using var scope = ClientDiagnostics.CreateScope("ModelInferenceClient.GetSoilMoistureModelJob");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetSoilMoistureModelJobRequest(jobId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get SoilMoisture Model job&apos;s details. </summary>
        /// <param name="jobId"> Id of the job. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetSoilMoistureModelJob with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ModelInferenceClient(credential);
        /// 
        /// Response response = client.GetSoilMoistureModelJob("<jobId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("farmerId").ToString());
        /// Console.WriteLine(result.GetProperty("boundaryId").ToString());
        /// Console.WriteLine(result.GetProperty("sensorDataModelId").ToString());
        /// Console.WriteLine(result.GetProperty("sensorPartnerId").ToString());
        /// Console.WriteLine(result.GetProperty("inferenceStartDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("inferenceEndDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("satelliteProvider").ToString());
        /// Console.WriteLine(result.GetProperty("satelliteSource").ToString());
        /// Console.WriteLine(result.GetProperty("imageResolution").ToString());
        /// Console.WriteLine(result.GetProperty("imageFormat").ToString());
        /// Console.WriteLine(result.GetProperty("modelVersion").ToString());
        /// Console.WriteLine(result.GetProperty("sensorDefinition").GetProperty("sensorMeasurement").ToString());
        /// Console.WriteLine(result.GetProperty("sensorDefinition").GetProperty("minProperty").ToString());
        /// Console.WriteLine(result.GetProperty("sensorDefinition").GetProperty("maxProperty").ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
        /// Console.WriteLine(result.GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>SoilMoistureModelJob</c>:
        /// <code>{
        ///   farmerId: string, # Required. Farmer Id.
        ///   boundaryId: string, # Required. The id of the boundary object for which soil moisture is being calculated.
        ///   sensorDataModelId: string, # Required. Sensor data model Id.
        ///   sensorPartnerId: string, # Required. Sensor partner Id.
        ///   inferenceStartDateTime: string (ISO 8601 Format), # Required. Inference start date time for soil moisture calculations.
        ///   inferenceEndDateTime: string (ISO 8601 Format), # Required. Inference end date time for soil moisture calculations.
        ///   satelliteProvider: &quot;Microsoft&quot;, # Required. Provider of satellite data. Available Value: Microsoft.
        ///   satelliteSource: &quot;Sentinel_2_L2A&quot;, # Required. Source of satellite data. Available Value: Sentinel_2_L2A.
        ///   imageResolution: number, # Required. ImageResolution in meters. Available values: 10, 20, 60.
        ///   imageFormat: &quot;TIF&quot;, # Required. ImageFormat. Available value: TIF.
        ///   modelVersion: string, # Required. The version of the soil moisture model to be run.
        ///   sensorDefinition: {
        ///     sensorMeasurement: string, # Required. The measurement name for sensor measure in sensorDataModel.
        ///     minProperty: string, # Required. The measurement name for minimum measurement value.
        ///     maxProperty: string, # Required. The measurement name for maximum measurement value.
        ///   }, # Required. Schema for storing sensor definition keywords.
        ///   id: string, # Optional. Unique job id.
        ///   status: string, # Optional. Status of the job.
        /// Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
        ///   durationInSeconds: number, # Optional. Duration of the job in seconds.
        ///   message: string, # Optional. Status message to capture more details of the job.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string,
        /// numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetSoilMoistureModelJob(string jobId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

            using var scope = ClientDiagnostics.CreateScope("ModelInferenceClient.GetSoilMoistureModelJob");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetSoilMoistureModelJobRequest(jobId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a Biomass Model job. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="jobId"> JobId provided by user. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation{T}"/> from the service that will contain a <see cref="BinaryData"/> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateBiomassModelJobAsync with required parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ModelInferenceClient(credential);
        /// 
        /// var data = new {
        ///     farmerId = "<farmerId>",
        ///     boundaryId = "<boundaryId>",
        ///     modelVersion = "<modelVersion>",
        ///     cropName = "Corn",
        ///     plantingStartDateTime = "2022-05-10T18:57:31.2311892Z",
        ///     inferenceEndDateTime = "2022-05-10T18:57:31.2311892Z",
        ///     weatherExtensionId = "<weatherExtensionId>",
        ///     satelliteProvider = "Microsoft",
        ///     satelliteSource = "Sentinel_2_L2A",
        ///     imageResolution = 123.45d,
        ///     imageFormat = "TIF",
        /// };
        /// 
        /// var operation = await client.CreateBiomassModelJobAsync(WaitUntil.Completed, "<jobId>", RequestContent.Create(data));
        /// 
        /// BinaryData data = await operation.WaitForCompletionAsync();
        /// JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        /// Console.WriteLine(result.GetProperty("farmerId").ToString());
        /// Console.WriteLine(result.GetProperty("boundaryId").ToString());
        /// Console.WriteLine(result.GetProperty("modelVersion").ToString());
        /// Console.WriteLine(result.GetProperty("cropName").ToString());
        /// Console.WriteLine(result.GetProperty("plantingStartDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("inferenceEndDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("weatherExtensionId").ToString());
        /// Console.WriteLine(result.GetProperty("satelliteProvider").ToString());
        /// Console.WriteLine(result.GetProperty("satelliteSource").ToString());
        /// Console.WriteLine(result.GetProperty("imageResolution").ToString());
        /// Console.WriteLine(result.GetProperty("imageFormat").ToString());
        /// ]]></code>
        /// This sample shows how to call CreateBiomassModelJobAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ModelInferenceClient(credential);
        /// 
        /// var data = new {
        ///     farmerId = "<farmerId>",
        ///     boundaryId = "<boundaryId>",
        ///     modelVersion = "<modelVersion>",
        ///     cropName = "Corn",
        ///     plantingStartDateTime = "2022-05-10T18:57:31.2311892Z",
        ///     inferenceEndDateTime = "2022-05-10T18:57:31.2311892Z",
        ///     weatherExtensionId = "<weatherExtensionId>",
        ///     satelliteProvider = "Microsoft",
        ///     satelliteSource = "Sentinel_2_L2A",
        ///     imageResolution = 123.45d,
        ///     imageFormat = "TIF",
        ///     name = "<name>",
        ///     description = "<description>",
        ///     properties = new {
        ///         key = new {},
        ///     },
        /// };
        /// 
        /// var operation = await client.CreateBiomassModelJobAsync(WaitUntil.Completed, "<jobId>", RequestContent.Create(data));
        /// 
        /// BinaryData data = await operation.WaitForCompletionAsync();
        /// JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        /// Console.WriteLine(result.GetProperty("farmerId").ToString());
        /// Console.WriteLine(result.GetProperty("boundaryId").ToString());
        /// Console.WriteLine(result.GetProperty("modelVersion").ToString());
        /// Console.WriteLine(result.GetProperty("cropName").ToString());
        /// Console.WriteLine(result.GetProperty("plantingStartDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("inferenceEndDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("weatherExtensionId").ToString());
        /// Console.WriteLine(result.GetProperty("satelliteProvider").ToString());
        /// Console.WriteLine(result.GetProperty("satelliteSource").ToString());
        /// Console.WriteLine(result.GetProperty("imageResolution").ToString());
        /// Console.WriteLine(result.GetProperty("imageFormat").ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
        /// Console.WriteLine(result.GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>BiomassModelJob</c>:
        /// <code>{
        ///   farmerId: string, # Required. Farmer Id.
        ///   boundaryId: string, # Required. The id of the boundary object for which biomass is being calculated.
        ///   modelVersion: string, # Required. The version of the biomass model to be run. Available Value: 1.0 .
        ///   cropName: &quot;Corn&quot;, # Required. Crop name for biomass model. Available Value: Corn.
        ///   plantingStartDateTime: string (ISO 8601 Format), # Required. Planting datetime for biomass calculations. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   inferenceEndDateTime: string (ISO 8601 Format), # Required. End datetime till which biomass will be calculated. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   weatherExtensionId: string, # Required. ExtensionId of weather data. Available values: DTN.ClearAg, DTN.ContentServices.
        ///   satelliteProvider: &quot;Microsoft&quot;, # Required. Provider of satellite data. Available Value: Microsoft.
        ///   satelliteSource: &quot;Sentinel_2_L2A&quot;, # Required. Source of satellite data. Available Value: Sentinel_2_L2A.
        ///   imageResolution: number, # Required. ImageResolution in meters. Available values: 10, 20, 60.
        ///   imageFormat: &quot;TIF&quot;, # Required. ImageFormat. Available value: TIF.
        ///   id: string, # Optional. Unique job id.
        ///   status: string, # Optional. Status of the job.
        /// Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
        ///   durationInSeconds: number, # Optional. Duration of the job in seconds.
        ///   message: string, # Optional. Status message to capture more details of the job.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string,
        /// numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>BiomassModelJob</c>:
        /// <code>{
        ///   farmerId: string, # Required. Farmer Id.
        ///   boundaryId: string, # Required. The id of the boundary object for which biomass is being calculated.
        ///   modelVersion: string, # Required. The version of the biomass model to be run. Available Value: 1.0 .
        ///   cropName: &quot;Corn&quot;, # Required. Crop name for biomass model. Available Value: Corn.
        ///   plantingStartDateTime: string (ISO 8601 Format), # Required. Planting datetime for biomass calculations. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   inferenceEndDateTime: string (ISO 8601 Format), # Required. End datetime till which biomass will be calculated. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   weatherExtensionId: string, # Required. ExtensionId of weather data. Available values: DTN.ClearAg, DTN.ContentServices.
        ///   satelliteProvider: &quot;Microsoft&quot;, # Required. Provider of satellite data. Available Value: Microsoft.
        ///   satelliteSource: &quot;Sentinel_2_L2A&quot;, # Required. Source of satellite data. Available Value: Sentinel_2_L2A.
        ///   imageResolution: number, # Required. ImageResolution in meters. Available values: 10, 20, 60.
        ///   imageFormat: &quot;TIF&quot;, # Required. ImageFormat. Available value: TIF.
        ///   id: string, # Optional. Unique job id.
        ///   status: string, # Optional. Status of the job.
        /// Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
        ///   durationInSeconds: number, # Optional. Duration of the job in seconds.
        ///   message: string, # Optional. Status message to capture more details of the job.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string,
        /// numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Operation<BinaryData>> CreateBiomassModelJobAsync(WaitUntil waitUntil, string jobId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("ModelInferenceClient.CreateBiomassModelJob");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateBiomassModelJobRequest(jobId, content, context);
                return await ProtocolOperationHelpers.ProcessMessageAsync(_pipeline, message, ClientDiagnostics, "ModelInferenceClient.CreateBiomassModelJob", OperationFinalStateVia.Location, context, waitUntil).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a Biomass Model job. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="jobId"> JobId provided by user. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation{T}"/> from the service that will contain a <see cref="BinaryData"/> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateBiomassModelJob with required parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ModelInferenceClient(credential);
        /// 
        /// var data = new {
        ///     farmerId = "<farmerId>",
        ///     boundaryId = "<boundaryId>",
        ///     modelVersion = "<modelVersion>",
        ///     cropName = "Corn",
        ///     plantingStartDateTime = "2022-05-10T18:57:31.2311892Z",
        ///     inferenceEndDateTime = "2022-05-10T18:57:31.2311892Z",
        ///     weatherExtensionId = "<weatherExtensionId>",
        ///     satelliteProvider = "Microsoft",
        ///     satelliteSource = "Sentinel_2_L2A",
        ///     imageResolution = 123.45d,
        ///     imageFormat = "TIF",
        /// };
        /// 
        /// var operation = client.CreateBiomassModelJob(WaitUntil.Completed, "<jobId>", RequestContent.Create(data));
        /// 
        /// BinaryData data = operation.WaitForCompletion();
        /// JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        /// Console.WriteLine(result.GetProperty("farmerId").ToString());
        /// Console.WriteLine(result.GetProperty("boundaryId").ToString());
        /// Console.WriteLine(result.GetProperty("modelVersion").ToString());
        /// Console.WriteLine(result.GetProperty("cropName").ToString());
        /// Console.WriteLine(result.GetProperty("plantingStartDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("inferenceEndDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("weatherExtensionId").ToString());
        /// Console.WriteLine(result.GetProperty("satelliteProvider").ToString());
        /// Console.WriteLine(result.GetProperty("satelliteSource").ToString());
        /// Console.WriteLine(result.GetProperty("imageResolution").ToString());
        /// Console.WriteLine(result.GetProperty("imageFormat").ToString());
        /// ]]></code>
        /// This sample shows how to call CreateBiomassModelJob with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ModelInferenceClient(credential);
        /// 
        /// var data = new {
        ///     farmerId = "<farmerId>",
        ///     boundaryId = "<boundaryId>",
        ///     modelVersion = "<modelVersion>",
        ///     cropName = "Corn",
        ///     plantingStartDateTime = "2022-05-10T18:57:31.2311892Z",
        ///     inferenceEndDateTime = "2022-05-10T18:57:31.2311892Z",
        ///     weatherExtensionId = "<weatherExtensionId>",
        ///     satelliteProvider = "Microsoft",
        ///     satelliteSource = "Sentinel_2_L2A",
        ///     imageResolution = 123.45d,
        ///     imageFormat = "TIF",
        ///     name = "<name>",
        ///     description = "<description>",
        ///     properties = new {
        ///         key = new {},
        ///     },
        /// };
        /// 
        /// var operation = client.CreateBiomassModelJob(WaitUntil.Completed, "<jobId>", RequestContent.Create(data));
        /// 
        /// BinaryData data = operation.WaitForCompletion();
        /// JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        /// Console.WriteLine(result.GetProperty("farmerId").ToString());
        /// Console.WriteLine(result.GetProperty("boundaryId").ToString());
        /// Console.WriteLine(result.GetProperty("modelVersion").ToString());
        /// Console.WriteLine(result.GetProperty("cropName").ToString());
        /// Console.WriteLine(result.GetProperty("plantingStartDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("inferenceEndDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("weatherExtensionId").ToString());
        /// Console.WriteLine(result.GetProperty("satelliteProvider").ToString());
        /// Console.WriteLine(result.GetProperty("satelliteSource").ToString());
        /// Console.WriteLine(result.GetProperty("imageResolution").ToString());
        /// Console.WriteLine(result.GetProperty("imageFormat").ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
        /// Console.WriteLine(result.GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>BiomassModelJob</c>:
        /// <code>{
        ///   farmerId: string, # Required. Farmer Id.
        ///   boundaryId: string, # Required. The id of the boundary object for which biomass is being calculated.
        ///   modelVersion: string, # Required. The version of the biomass model to be run. Available Value: 1.0 .
        ///   cropName: &quot;Corn&quot;, # Required. Crop name for biomass model. Available Value: Corn.
        ///   plantingStartDateTime: string (ISO 8601 Format), # Required. Planting datetime for biomass calculations. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   inferenceEndDateTime: string (ISO 8601 Format), # Required. End datetime till which biomass will be calculated. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   weatherExtensionId: string, # Required. ExtensionId of weather data. Available values: DTN.ClearAg, DTN.ContentServices.
        ///   satelliteProvider: &quot;Microsoft&quot;, # Required. Provider of satellite data. Available Value: Microsoft.
        ///   satelliteSource: &quot;Sentinel_2_L2A&quot;, # Required. Source of satellite data. Available Value: Sentinel_2_L2A.
        ///   imageResolution: number, # Required. ImageResolution in meters. Available values: 10, 20, 60.
        ///   imageFormat: &quot;TIF&quot;, # Required. ImageFormat. Available value: TIF.
        ///   id: string, # Optional. Unique job id.
        ///   status: string, # Optional. Status of the job.
        /// Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
        ///   durationInSeconds: number, # Optional. Duration of the job in seconds.
        ///   message: string, # Optional. Status message to capture more details of the job.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string,
        /// numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>BiomassModelJob</c>:
        /// <code>{
        ///   farmerId: string, # Required. Farmer Id.
        ///   boundaryId: string, # Required. The id of the boundary object for which biomass is being calculated.
        ///   modelVersion: string, # Required. The version of the biomass model to be run. Available Value: 1.0 .
        ///   cropName: &quot;Corn&quot;, # Required. Crop name for biomass model. Available Value: Corn.
        ///   plantingStartDateTime: string (ISO 8601 Format), # Required. Planting datetime for biomass calculations. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   inferenceEndDateTime: string (ISO 8601 Format), # Required. End datetime till which biomass will be calculated. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   weatherExtensionId: string, # Required. ExtensionId of weather data. Available values: DTN.ClearAg, DTN.ContentServices.
        ///   satelliteProvider: &quot;Microsoft&quot;, # Required. Provider of satellite data. Available Value: Microsoft.
        ///   satelliteSource: &quot;Sentinel_2_L2A&quot;, # Required. Source of satellite data. Available Value: Sentinel_2_L2A.
        ///   imageResolution: number, # Required. ImageResolution in meters. Available values: 10, 20, 60.
        ///   imageFormat: &quot;TIF&quot;, # Required. ImageFormat. Available value: TIF.
        ///   id: string, # Optional. Unique job id.
        ///   status: string, # Optional. Status of the job.
        /// Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
        ///   durationInSeconds: number, # Optional. Duration of the job in seconds.
        ///   message: string, # Optional. Status message to capture more details of the job.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string,
        /// numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Operation<BinaryData> CreateBiomassModelJob(WaitUntil waitUntil, string jobId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("ModelInferenceClient.CreateBiomassModelJob");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateBiomassModelJobRequest(jobId, content, context);
                return ProtocolOperationHelpers.ProcessMessage(_pipeline, message, ClientDiagnostics, "ModelInferenceClient.CreateBiomassModelJob", OperationFinalStateVia.Location, context, waitUntil);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a SoilMoisture Model job. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="jobId"> JobId provided by user. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation{T}"/> from the service that will contain a <see cref="BinaryData"/> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateSoilMoistureModelJobAsync with required parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ModelInferenceClient(credential);
        /// 
        /// var data = new {
        ///     farmerId = "<farmerId>",
        ///     boundaryId = "<boundaryId>",
        ///     sensorDataModelId = "<sensorDataModelId>",
        ///     sensorPartnerId = "<sensorPartnerId>",
        ///     inferenceStartDateTime = "2022-05-10T18:57:31.2311892Z",
        ///     inferenceEndDateTime = "2022-05-10T18:57:31.2311892Z",
        ///     satelliteProvider = "Microsoft",
        ///     satelliteSource = "Sentinel_2_L2A",
        ///     imageResolution = 123.45d,
        ///     imageFormat = "TIF",
        ///     modelVersion = "<modelVersion>",
        ///     sensorDefinition = new {
        ///         sensorMeasurement = "<sensorMeasurement>",
        ///         minProperty = "<minProperty>",
        ///         maxProperty = "<maxProperty>",
        ///     },
        /// };
        /// 
        /// var operation = await client.CreateSoilMoistureModelJobAsync(WaitUntil.Completed, "<jobId>", RequestContent.Create(data));
        /// 
        /// BinaryData data = await operation.WaitForCompletionAsync();
        /// JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        /// Console.WriteLine(result.GetProperty("farmerId").ToString());
        /// Console.WriteLine(result.GetProperty("boundaryId").ToString());
        /// Console.WriteLine(result.GetProperty("sensorDataModelId").ToString());
        /// Console.WriteLine(result.GetProperty("sensorPartnerId").ToString());
        /// Console.WriteLine(result.GetProperty("inferenceStartDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("inferenceEndDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("satelliteProvider").ToString());
        /// Console.WriteLine(result.GetProperty("satelliteSource").ToString());
        /// Console.WriteLine(result.GetProperty("imageResolution").ToString());
        /// Console.WriteLine(result.GetProperty("imageFormat").ToString());
        /// Console.WriteLine(result.GetProperty("modelVersion").ToString());
        /// Console.WriteLine(result.GetProperty("sensorDefinition").GetProperty("sensorMeasurement").ToString());
        /// Console.WriteLine(result.GetProperty("sensorDefinition").GetProperty("minProperty").ToString());
        /// Console.WriteLine(result.GetProperty("sensorDefinition").GetProperty("maxProperty").ToString());
        /// ]]></code>
        /// This sample shows how to call CreateSoilMoistureModelJobAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ModelInferenceClient(credential);
        /// 
        /// var data = new {
        ///     farmerId = "<farmerId>",
        ///     boundaryId = "<boundaryId>",
        ///     sensorDataModelId = "<sensorDataModelId>",
        ///     sensorPartnerId = "<sensorPartnerId>",
        ///     inferenceStartDateTime = "2022-05-10T18:57:31.2311892Z",
        ///     inferenceEndDateTime = "2022-05-10T18:57:31.2311892Z",
        ///     satelliteProvider = "Microsoft",
        ///     satelliteSource = "Sentinel_2_L2A",
        ///     imageResolution = 123.45d,
        ///     imageFormat = "TIF",
        ///     modelVersion = "<modelVersion>",
        ///     sensorDefinition = new {
        ///         sensorMeasurement = "<sensorMeasurement>",
        ///         minProperty = "<minProperty>",
        ///         maxProperty = "<maxProperty>",
        ///     },
        ///     name = "<name>",
        ///     description = "<description>",
        ///     properties = new {
        ///         key = new {},
        ///     },
        /// };
        /// 
        /// var operation = await client.CreateSoilMoistureModelJobAsync(WaitUntil.Completed, "<jobId>", RequestContent.Create(data));
        /// 
        /// BinaryData data = await operation.WaitForCompletionAsync();
        /// JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        /// Console.WriteLine(result.GetProperty("farmerId").ToString());
        /// Console.WriteLine(result.GetProperty("boundaryId").ToString());
        /// Console.WriteLine(result.GetProperty("sensorDataModelId").ToString());
        /// Console.WriteLine(result.GetProperty("sensorPartnerId").ToString());
        /// Console.WriteLine(result.GetProperty("inferenceStartDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("inferenceEndDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("satelliteProvider").ToString());
        /// Console.WriteLine(result.GetProperty("satelliteSource").ToString());
        /// Console.WriteLine(result.GetProperty("imageResolution").ToString());
        /// Console.WriteLine(result.GetProperty("imageFormat").ToString());
        /// Console.WriteLine(result.GetProperty("modelVersion").ToString());
        /// Console.WriteLine(result.GetProperty("sensorDefinition").GetProperty("sensorMeasurement").ToString());
        /// Console.WriteLine(result.GetProperty("sensorDefinition").GetProperty("minProperty").ToString());
        /// Console.WriteLine(result.GetProperty("sensorDefinition").GetProperty("maxProperty").ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
        /// Console.WriteLine(result.GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>SoilMoistureModelJob</c>:
        /// <code>{
        ///   farmerId: string, # Required. Farmer Id.
        ///   boundaryId: string, # Required. The id of the boundary object for which soil moisture is being calculated.
        ///   sensorDataModelId: string, # Required. Sensor data model Id.
        ///   sensorPartnerId: string, # Required. Sensor partner Id.
        ///   inferenceStartDateTime: string (ISO 8601 Format), # Required. Inference start date time for soil moisture calculations.
        ///   inferenceEndDateTime: string (ISO 8601 Format), # Required. Inference end date time for soil moisture calculations.
        ///   satelliteProvider: &quot;Microsoft&quot;, # Required. Provider of satellite data. Available Value: Microsoft.
        ///   satelliteSource: &quot;Sentinel_2_L2A&quot;, # Required. Source of satellite data. Available Value: Sentinel_2_L2A.
        ///   imageResolution: number, # Required. ImageResolution in meters. Available values: 10, 20, 60.
        ///   imageFormat: &quot;TIF&quot;, # Required. ImageFormat. Available value: TIF.
        ///   modelVersion: string, # Required. The version of the soil moisture model to be run.
        ///   sensorDefinition: {
        ///     sensorMeasurement: string, # Required. The measurement name for sensor measure in sensorDataModel.
        ///     minProperty: string, # Required. The measurement name for minimum measurement value.
        ///     maxProperty: string, # Required. The measurement name for maximum measurement value.
        ///   }, # Required. Schema for storing sensor definition keywords.
        ///   id: string, # Optional. Unique job id.
        ///   status: string, # Optional. Status of the job.
        /// Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
        ///   durationInSeconds: number, # Optional. Duration of the job in seconds.
        ///   message: string, # Optional. Status message to capture more details of the job.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string,
        /// numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>SoilMoistureModelJob</c>:
        /// <code>{
        ///   farmerId: string, # Required. Farmer Id.
        ///   boundaryId: string, # Required. The id of the boundary object for which soil moisture is being calculated.
        ///   sensorDataModelId: string, # Required. Sensor data model Id.
        ///   sensorPartnerId: string, # Required. Sensor partner Id.
        ///   inferenceStartDateTime: string (ISO 8601 Format), # Required. Inference start date time for soil moisture calculations.
        ///   inferenceEndDateTime: string (ISO 8601 Format), # Required. Inference end date time for soil moisture calculations.
        ///   satelliteProvider: &quot;Microsoft&quot;, # Required. Provider of satellite data. Available Value: Microsoft.
        ///   satelliteSource: &quot;Sentinel_2_L2A&quot;, # Required. Source of satellite data. Available Value: Sentinel_2_L2A.
        ///   imageResolution: number, # Required. ImageResolution in meters. Available values: 10, 20, 60.
        ///   imageFormat: &quot;TIF&quot;, # Required. ImageFormat. Available value: TIF.
        ///   modelVersion: string, # Required. The version of the soil moisture model to be run.
        ///   sensorDefinition: {
        ///     sensorMeasurement: string, # Required. The measurement name for sensor measure in sensorDataModel.
        ///     minProperty: string, # Required. The measurement name for minimum measurement value.
        ///     maxProperty: string, # Required. The measurement name for maximum measurement value.
        ///   }, # Required. Schema for storing sensor definition keywords.
        ///   id: string, # Optional. Unique job id.
        ///   status: string, # Optional. Status of the job.
        /// Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
        ///   durationInSeconds: number, # Optional. Duration of the job in seconds.
        ///   message: string, # Optional. Status message to capture more details of the job.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string,
        /// numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Operation<BinaryData>> CreateSoilMoistureModelJobAsync(WaitUntil waitUntil, string jobId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("ModelInferenceClient.CreateSoilMoistureModelJob");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateSoilMoistureModelJobRequest(jobId, content, context);
                return await ProtocolOperationHelpers.ProcessMessageAsync(_pipeline, message, ClientDiagnostics, "ModelInferenceClient.CreateSoilMoistureModelJob", OperationFinalStateVia.Location, context, waitUntil).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a SoilMoisture Model job. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="jobId"> JobId provided by user. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation{T}"/> from the service that will contain a <see cref="BinaryData"/> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateSoilMoistureModelJob with required parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ModelInferenceClient(credential);
        /// 
        /// var data = new {
        ///     farmerId = "<farmerId>",
        ///     boundaryId = "<boundaryId>",
        ///     sensorDataModelId = "<sensorDataModelId>",
        ///     sensorPartnerId = "<sensorPartnerId>",
        ///     inferenceStartDateTime = "2022-05-10T18:57:31.2311892Z",
        ///     inferenceEndDateTime = "2022-05-10T18:57:31.2311892Z",
        ///     satelliteProvider = "Microsoft",
        ///     satelliteSource = "Sentinel_2_L2A",
        ///     imageResolution = 123.45d,
        ///     imageFormat = "TIF",
        ///     modelVersion = "<modelVersion>",
        ///     sensorDefinition = new {
        ///         sensorMeasurement = "<sensorMeasurement>",
        ///         minProperty = "<minProperty>",
        ///         maxProperty = "<maxProperty>",
        ///     },
        /// };
        /// 
        /// var operation = client.CreateSoilMoistureModelJob(WaitUntil.Completed, "<jobId>", RequestContent.Create(data));
        /// 
        /// BinaryData data = operation.WaitForCompletion();
        /// JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        /// Console.WriteLine(result.GetProperty("farmerId").ToString());
        /// Console.WriteLine(result.GetProperty("boundaryId").ToString());
        /// Console.WriteLine(result.GetProperty("sensorDataModelId").ToString());
        /// Console.WriteLine(result.GetProperty("sensorPartnerId").ToString());
        /// Console.WriteLine(result.GetProperty("inferenceStartDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("inferenceEndDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("satelliteProvider").ToString());
        /// Console.WriteLine(result.GetProperty("satelliteSource").ToString());
        /// Console.WriteLine(result.GetProperty("imageResolution").ToString());
        /// Console.WriteLine(result.GetProperty("imageFormat").ToString());
        /// Console.WriteLine(result.GetProperty("modelVersion").ToString());
        /// Console.WriteLine(result.GetProperty("sensorDefinition").GetProperty("sensorMeasurement").ToString());
        /// Console.WriteLine(result.GetProperty("sensorDefinition").GetProperty("minProperty").ToString());
        /// Console.WriteLine(result.GetProperty("sensorDefinition").GetProperty("maxProperty").ToString());
        /// ]]></code>
        /// This sample shows how to call CreateSoilMoistureModelJob with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new ModelInferenceClient(credential);
        /// 
        /// var data = new {
        ///     farmerId = "<farmerId>",
        ///     boundaryId = "<boundaryId>",
        ///     sensorDataModelId = "<sensorDataModelId>",
        ///     sensorPartnerId = "<sensorPartnerId>",
        ///     inferenceStartDateTime = "2022-05-10T18:57:31.2311892Z",
        ///     inferenceEndDateTime = "2022-05-10T18:57:31.2311892Z",
        ///     satelliteProvider = "Microsoft",
        ///     satelliteSource = "Sentinel_2_L2A",
        ///     imageResolution = 123.45d,
        ///     imageFormat = "TIF",
        ///     modelVersion = "<modelVersion>",
        ///     sensorDefinition = new {
        ///         sensorMeasurement = "<sensorMeasurement>",
        ///         minProperty = "<minProperty>",
        ///         maxProperty = "<maxProperty>",
        ///     },
        ///     name = "<name>",
        ///     description = "<description>",
        ///     properties = new {
        ///         key = new {},
        ///     },
        /// };
        /// 
        /// var operation = client.CreateSoilMoistureModelJob(WaitUntil.Completed, "<jobId>", RequestContent.Create(data));
        /// 
        /// BinaryData data = operation.WaitForCompletion();
        /// JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        /// Console.WriteLine(result.GetProperty("farmerId").ToString());
        /// Console.WriteLine(result.GetProperty("boundaryId").ToString());
        /// Console.WriteLine(result.GetProperty("sensorDataModelId").ToString());
        /// Console.WriteLine(result.GetProperty("sensorPartnerId").ToString());
        /// Console.WriteLine(result.GetProperty("inferenceStartDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("inferenceEndDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("satelliteProvider").ToString());
        /// Console.WriteLine(result.GetProperty("satelliteSource").ToString());
        /// Console.WriteLine(result.GetProperty("imageResolution").ToString());
        /// Console.WriteLine(result.GetProperty("imageFormat").ToString());
        /// Console.WriteLine(result.GetProperty("modelVersion").ToString());
        /// Console.WriteLine(result.GetProperty("sensorDefinition").GetProperty("sensorMeasurement").ToString());
        /// Console.WriteLine(result.GetProperty("sensorDefinition").GetProperty("minProperty").ToString());
        /// Console.WriteLine(result.GetProperty("sensorDefinition").GetProperty("maxProperty").ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
        /// Console.WriteLine(result.GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>SoilMoistureModelJob</c>:
        /// <code>{
        ///   farmerId: string, # Required. Farmer Id.
        ///   boundaryId: string, # Required. The id of the boundary object for which soil moisture is being calculated.
        ///   sensorDataModelId: string, # Required. Sensor data model Id.
        ///   sensorPartnerId: string, # Required. Sensor partner Id.
        ///   inferenceStartDateTime: string (ISO 8601 Format), # Required. Inference start date time for soil moisture calculations.
        ///   inferenceEndDateTime: string (ISO 8601 Format), # Required. Inference end date time for soil moisture calculations.
        ///   satelliteProvider: &quot;Microsoft&quot;, # Required. Provider of satellite data. Available Value: Microsoft.
        ///   satelliteSource: &quot;Sentinel_2_L2A&quot;, # Required. Source of satellite data. Available Value: Sentinel_2_L2A.
        ///   imageResolution: number, # Required. ImageResolution in meters. Available values: 10, 20, 60.
        ///   imageFormat: &quot;TIF&quot;, # Required. ImageFormat. Available value: TIF.
        ///   modelVersion: string, # Required. The version of the soil moisture model to be run.
        ///   sensorDefinition: {
        ///     sensorMeasurement: string, # Required. The measurement name for sensor measure in sensorDataModel.
        ///     minProperty: string, # Required. The measurement name for minimum measurement value.
        ///     maxProperty: string, # Required. The measurement name for maximum measurement value.
        ///   }, # Required. Schema for storing sensor definition keywords.
        ///   id: string, # Optional. Unique job id.
        ///   status: string, # Optional. Status of the job.
        /// Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
        ///   durationInSeconds: number, # Optional. Duration of the job in seconds.
        ///   message: string, # Optional. Status message to capture more details of the job.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string,
        /// numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>SoilMoistureModelJob</c>:
        /// <code>{
        ///   farmerId: string, # Required. Farmer Id.
        ///   boundaryId: string, # Required. The id of the boundary object for which soil moisture is being calculated.
        ///   sensorDataModelId: string, # Required. Sensor data model Id.
        ///   sensorPartnerId: string, # Required. Sensor partner Id.
        ///   inferenceStartDateTime: string (ISO 8601 Format), # Required. Inference start date time for soil moisture calculations.
        ///   inferenceEndDateTime: string (ISO 8601 Format), # Required. Inference end date time for soil moisture calculations.
        ///   satelliteProvider: &quot;Microsoft&quot;, # Required. Provider of satellite data. Available Value: Microsoft.
        ///   satelliteSource: &quot;Sentinel_2_L2A&quot;, # Required. Source of satellite data. Available Value: Sentinel_2_L2A.
        ///   imageResolution: number, # Required. ImageResolution in meters. Available values: 10, 20, 60.
        ///   imageFormat: &quot;TIF&quot;, # Required. ImageFormat. Available value: TIF.
        ///   modelVersion: string, # Required. The version of the soil moisture model to be run.
        ///   sensorDefinition: {
        ///     sensorMeasurement: string, # Required. The measurement name for sensor measure in sensorDataModel.
        ///     minProperty: string, # Required. The measurement name for minimum measurement value.
        ///     maxProperty: string, # Required. The measurement name for maximum measurement value.
        ///   }, # Required. Schema for storing sensor definition keywords.
        ///   id: string, # Optional. Unique job id.
        ///   status: string, # Optional. Status of the job.
        /// Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
        ///   durationInSeconds: number, # Optional. Duration of the job in seconds.
        ///   message: string, # Optional. Status message to capture more details of the job.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string,
        /// numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Operation<BinaryData> CreateSoilMoistureModelJob(WaitUntil waitUntil, string jobId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("ModelInferenceClient.CreateSoilMoistureModelJob");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateSoilMoistureModelJobRequest(jobId, content, context);
                return ProtocolOperationHelpers.ProcessMessage(_pipeline, message, ClientDiagnostics, "ModelInferenceClient.CreateSoilMoistureModelJob", OperationFinalStateVia.Location, context, waitUntil);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateCreateBiomassModelJobRequest(string jobId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier202);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/model-inference/models/microsoft-biomass/infer-data/", false);
            uri.AppendPath(jobId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetBiomassModelJobRequest(string jobId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/model-inference/models/microsoft-biomass/infer-data/", false);
            uri.AppendPath(jobId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCreateSoilMoistureModelJobRequest(string jobId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier202);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/model-inference/models/microsoft-soil-moisture/infer-data/", false);
            uri.AppendPath(jobId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetSoilMoistureModelJobRequest(string jobId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/model-inference/models/microsoft-soil-moisture/infer-data/", false);
            uri.AppendPath(jobId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static ResponseClassifier _responseClassifier202;
        private static ResponseClassifier ResponseClassifier202 => _responseClassifier202 ??= new StatusCodeClassifier(stackalloc ushort[] { 202 });
        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
    }
}
