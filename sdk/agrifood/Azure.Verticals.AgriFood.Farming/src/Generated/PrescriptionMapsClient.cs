// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Verticals.AgriFood.Farming
{
    // Data plane generated client. The PrescriptionMaps service client.
    /// <summary> The PrescriptionMaps service client. </summary>
    public partial class PrescriptionMapsClient
    {
        private static readonly string[] AuthorizationScopes = new string[] { "https://farmbeats.azure.net/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of PrescriptionMapsClient for mocking. </summary>
        protected PrescriptionMapsClient()
        {
        }

        /// <summary> Initializes a new instance of PrescriptionMapsClient. </summary>
        /// <param name="endpoint"> The endpoint of your FarmBeats resource (protocol and hostname, for example: https://{resourceName}.farmbeats.azure.net). </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public PrescriptionMapsClient(TokenCredential credential, Uri endpoint) : this(credential, endpoint, new FarmBeatsClientOptions())
        {
        }

        /// <summary> Initializes a new instance of PrescriptionMapsClient. </summary>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="credential"/> or <paramref name="endpoint"/> is null. </exception>
        public PrescriptionMapsClient(TokenCredential credential, Uri endpoint, FarmBeatsClientOptions options)
        {
            Argument.AssertNotNull(credential, nameof(credential));
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new FarmBeatsClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) }, new ResponseClassifier());
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Gets a specified prescription map resource under a particular farmer. </summary>
        /// <param name="farmerId"> Id of the associated farmer. </param>
        /// <param name="prescriptionMapId"> Id of the prescription map. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="farmerId"/> or <paramref name="prescriptionMapId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="farmerId"/> or <paramref name="prescriptionMapId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetPrescriptionMapAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PrescriptionMapsClient(credential);
        /// 
        /// Response response = await client.GetPrescriptionMapAsync("<farmerId>", "<prescriptionMapId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("farmerId").ToString());
        /// Console.WriteLine(result.GetProperty("type").ToString());
        /// Console.WriteLine(result.GetProperty("seasonId").ToString());
        /// Console.WriteLine(result.GetProperty("cropId").ToString());
        /// Console.WriteLine(result.GetProperty("fieldId").ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("eTag").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>PrescriptionMap</c>:
        /// <code>{
        ///   farmerId: string, # Optional. Farmer Id.
        ///   type: string, # Optional. Prescription map type.
        ///   seasonId: string, # Optional. Season Id.
        ///   cropId: string, # Optional. Crop Id.
        ///   fieldId: string, # Optional. Field Id.
        ///   id: string, # Optional. Unique resource ID.
        ///   eTag: string, # Optional. The ETag value to implement optimistic concurrency.
        ///   status: string, # Optional. Status of the resource.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   source: string, # Optional. Source of the resource.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string,
        /// numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetPrescriptionMapAsync(string farmerId, string prescriptionMapId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(farmerId, nameof(farmerId));
            Argument.AssertNotNullOrEmpty(prescriptionMapId, nameof(prescriptionMapId));

            using var scope = ClientDiagnostics.CreateScope("PrescriptionMapsClient.GetPrescriptionMap");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetPrescriptionMapRequest(farmerId, prescriptionMapId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a specified prescription map resource under a particular farmer. </summary>
        /// <param name="farmerId"> Id of the associated farmer. </param>
        /// <param name="prescriptionMapId"> Id of the prescription map. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="farmerId"/> or <paramref name="prescriptionMapId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="farmerId"/> or <paramref name="prescriptionMapId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetPrescriptionMap with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PrescriptionMapsClient(credential);
        /// 
        /// Response response = client.GetPrescriptionMap("<farmerId>", "<prescriptionMapId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("farmerId").ToString());
        /// Console.WriteLine(result.GetProperty("type").ToString());
        /// Console.WriteLine(result.GetProperty("seasonId").ToString());
        /// Console.WriteLine(result.GetProperty("cropId").ToString());
        /// Console.WriteLine(result.GetProperty("fieldId").ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("eTag").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>PrescriptionMap</c>:
        /// <code>{
        ///   farmerId: string, # Optional. Farmer Id.
        ///   type: string, # Optional. Prescription map type.
        ///   seasonId: string, # Optional. Season Id.
        ///   cropId: string, # Optional. Crop Id.
        ///   fieldId: string, # Optional. Field Id.
        ///   id: string, # Optional. Unique resource ID.
        ///   eTag: string, # Optional. The ETag value to implement optimistic concurrency.
        ///   status: string, # Optional. Status of the resource.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   source: string, # Optional. Source of the resource.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string,
        /// numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetPrescriptionMap(string farmerId, string prescriptionMapId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(farmerId, nameof(farmerId));
            Argument.AssertNotNullOrEmpty(prescriptionMapId, nameof(prescriptionMapId));

            using var scope = ClientDiagnostics.CreateScope("PrescriptionMapsClient.GetPrescriptionMap");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetPrescriptionMapRequest(farmerId, prescriptionMapId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates or Updates a prescription map resource under a particular farmer. </summary>
        /// <param name="farmerId"> Id of the associated farmer resource. </param>
        /// <param name="prescriptionMapId"> Id of the prescription map resource. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="farmerId"/>, <paramref name="prescriptionMapId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="farmerId"/> or <paramref name="prescriptionMapId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateOrUpdateAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PrescriptionMapsClient(credential);
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.CreateOrUpdateAsync("<farmerId>", "<prescriptionMapId>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call CreateOrUpdateAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PrescriptionMapsClient(credential);
        /// 
        /// var data = new {
        ///     type = "<type>",
        ///     seasonId = "<seasonId>",
        ///     cropId = "<cropId>",
        ///     fieldId = "<fieldId>",
        ///     status = "<status>",
        ///     source = "<source>",
        ///     name = "<name>",
        ///     description = "<description>",
        ///     properties = new {
        ///         key = new {},
        ///     },
        /// };
        /// 
        /// Response response = await client.CreateOrUpdateAsync("<farmerId>", "<prescriptionMapId>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("farmerId").ToString());
        /// Console.WriteLine(result.GetProperty("type").ToString());
        /// Console.WriteLine(result.GetProperty("seasonId").ToString());
        /// Console.WriteLine(result.GetProperty("cropId").ToString());
        /// Console.WriteLine(result.GetProperty("fieldId").ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("eTag").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>PrescriptionMap</c>:
        /// <code>{
        ///   farmerId: string, # Optional. Farmer Id.
        ///   type: string, # Optional. Prescription map type.
        ///   seasonId: string, # Optional. Season Id.
        ///   cropId: string, # Optional. Crop Id.
        ///   fieldId: string, # Optional. Field Id.
        ///   id: string, # Optional. Unique resource ID.
        ///   eTag: string, # Optional. The ETag value to implement optimistic concurrency.
        ///   status: string, # Optional. Status of the resource.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   source: string, # Optional. Source of the resource.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string,
        /// numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>PrescriptionMap</c>:
        /// <code>{
        ///   farmerId: string, # Optional. Farmer Id.
        ///   type: string, # Optional. Prescription map type.
        ///   seasonId: string, # Optional. Season Id.
        ///   cropId: string, # Optional. Crop Id.
        ///   fieldId: string, # Optional. Field Id.
        ///   id: string, # Optional. Unique resource ID.
        ///   eTag: string, # Optional. The ETag value to implement optimistic concurrency.
        ///   status: string, # Optional. Status of the resource.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   source: string, # Optional. Source of the resource.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string,
        /// numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> CreateOrUpdateAsync(string farmerId, string prescriptionMapId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(farmerId, nameof(farmerId));
            Argument.AssertNotNullOrEmpty(prescriptionMapId, nameof(prescriptionMapId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PrescriptionMapsClient.CreateOrUpdate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateRequest(farmerId, prescriptionMapId, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Creates or Updates a prescription map resource under a particular farmer. </summary>
        /// <param name="farmerId"> Id of the associated farmer resource. </param>
        /// <param name="prescriptionMapId"> Id of the prescription map resource. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="farmerId"/>, <paramref name="prescriptionMapId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="farmerId"/> or <paramref name="prescriptionMapId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateOrUpdate with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PrescriptionMapsClient(credential);
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.CreateOrUpdate("<farmerId>", "<prescriptionMapId>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call CreateOrUpdate with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PrescriptionMapsClient(credential);
        /// 
        /// var data = new {
        ///     type = "<type>",
        ///     seasonId = "<seasonId>",
        ///     cropId = "<cropId>",
        ///     fieldId = "<fieldId>",
        ///     status = "<status>",
        ///     source = "<source>",
        ///     name = "<name>",
        ///     description = "<description>",
        ///     properties = new {
        ///         key = new {},
        ///     },
        /// };
        /// 
        /// Response response = client.CreateOrUpdate("<farmerId>", "<prescriptionMapId>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("farmerId").ToString());
        /// Console.WriteLine(result.GetProperty("type").ToString());
        /// Console.WriteLine(result.GetProperty("seasonId").ToString());
        /// Console.WriteLine(result.GetProperty("cropId").ToString());
        /// Console.WriteLine(result.GetProperty("fieldId").ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("eTag").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>PrescriptionMap</c>:
        /// <code>{
        ///   farmerId: string, # Optional. Farmer Id.
        ///   type: string, # Optional. Prescription map type.
        ///   seasonId: string, # Optional. Season Id.
        ///   cropId: string, # Optional. Crop Id.
        ///   fieldId: string, # Optional. Field Id.
        ///   id: string, # Optional. Unique resource ID.
        ///   eTag: string, # Optional. The ETag value to implement optimistic concurrency.
        ///   status: string, # Optional. Status of the resource.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   source: string, # Optional. Source of the resource.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string,
        /// numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>PrescriptionMap</c>:
        /// <code>{
        ///   farmerId: string, # Optional. Farmer Id.
        ///   type: string, # Optional. Prescription map type.
        ///   seasonId: string, # Optional. Season Id.
        ///   cropId: string, # Optional. Crop Id.
        ///   fieldId: string, # Optional. Field Id.
        ///   id: string, # Optional. Unique resource ID.
        ///   eTag: string, # Optional. The ETag value to implement optimistic concurrency.
        ///   status: string, # Optional. Status of the resource.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   source: string, # Optional. Source of the resource.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string,
        /// numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response CreateOrUpdate(string farmerId, string prescriptionMapId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(farmerId, nameof(farmerId));
            Argument.AssertNotNullOrEmpty(prescriptionMapId, nameof(prescriptionMapId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("PrescriptionMapsClient.CreateOrUpdate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateRequest(farmerId, prescriptionMapId, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a specified prescription map resource under a particular farmer. </summary>
        /// <param name="farmerId"> Id of the farmer. </param>
        /// <param name="prescriptionMapId"> Id of the prescriptionMap. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="farmerId"/> or <paramref name="prescriptionMapId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="farmerId"/> or <paramref name="prescriptionMapId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteAsync with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PrescriptionMapsClient(credential);
        /// 
        /// Response response = await client.DeleteAsync("<farmerId>", "<prescriptionMapId>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> DeleteAsync(string farmerId, string prescriptionMapId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(farmerId, nameof(farmerId));
            Argument.AssertNotNullOrEmpty(prescriptionMapId, nameof(prescriptionMapId));

            using var scope = ClientDiagnostics.CreateScope("PrescriptionMapsClient.Delete");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteRequest(farmerId, prescriptionMapId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a specified prescription map resource under a particular farmer. </summary>
        /// <param name="farmerId"> Id of the farmer. </param>
        /// <param name="prescriptionMapId"> Id of the prescriptionMap. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="farmerId"/> or <paramref name="prescriptionMapId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="farmerId"/> or <paramref name="prescriptionMapId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call Delete with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PrescriptionMapsClient(credential);
        /// 
        /// Response response = client.Delete("<farmerId>", "<prescriptionMapId>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response Delete(string farmerId, string prescriptionMapId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(farmerId, nameof(farmerId));
            Argument.AssertNotNullOrEmpty(prescriptionMapId, nameof(prescriptionMapId));

            using var scope = ClientDiagnostics.CreateScope("PrescriptionMapsClient.Delete");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteRequest(farmerId, prescriptionMapId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a cascade delete job for specified prescription map. </summary>
        /// <param name="jobId"> Id of the job. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetCascadeDeleteJobDetailsAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PrescriptionMapsClient(credential);
        /// 
        /// Response response = await client.GetCascadeDeleteJobDetailsAsync("<jobId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("farmerId").ToString());
        /// Console.WriteLine(result.GetProperty("resourceId").ToString());
        /// Console.WriteLine(result.GetProperty("resourceType").ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
        /// Console.WriteLine(result.GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("endTime").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>CascadeDeleteJob</c>:
        /// <code>{
        ///   farmerId: string, # Required. Farmer Id.
        ///   resourceId: string, # Required. The id of the resource.
        ///   resourceType: string, # Required. The type of the resource.
        ///   id: string, # Optional. Unique job id.
        ///   status: &quot;Waiting&quot; | &quot;Running&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Cancelled&quot;, # Optional. Status of the job.
        /// Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
        ///   durationInSeconds: number, # Optional. Duration of the job in seconds.
        ///   message: string, # Optional. Status message to capture more details of the job.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetCascadeDeleteJobDetailsAsync(string jobId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

            using var scope = ClientDiagnostics.CreateScope("PrescriptionMapsClient.GetCascadeDeleteJobDetails");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetCascadeDeleteJobDetailsRequest(jobId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a cascade delete job for specified prescription map. </summary>
        /// <param name="jobId"> Id of the job. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetCascadeDeleteJobDetails with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PrescriptionMapsClient(credential);
        /// 
        /// Response response = client.GetCascadeDeleteJobDetails("<jobId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("farmerId").ToString());
        /// Console.WriteLine(result.GetProperty("resourceId").ToString());
        /// Console.WriteLine(result.GetProperty("resourceType").ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
        /// Console.WriteLine(result.GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("endTime").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>CascadeDeleteJob</c>:
        /// <code>{
        ///   farmerId: string, # Required. Farmer Id.
        ///   resourceId: string, # Required. The id of the resource.
        ///   resourceType: string, # Required. The type of the resource.
        ///   id: string, # Optional. Unique job id.
        ///   status: &quot;Waiting&quot; | &quot;Running&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Cancelled&quot;, # Optional. Status of the job.
        /// Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
        ///   durationInSeconds: number, # Optional. Duration of the job in seconds.
        ///   message: string, # Optional. Status message to capture more details of the job.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetCascadeDeleteJobDetails(string jobId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

            using var scope = ClientDiagnostics.CreateScope("PrescriptionMapsClient.GetCascadeDeleteJobDetails");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetCascadeDeleteJobDetailsRequest(jobId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a paginated list of prescription map resources under a particular farmer. </summary>
        /// <param name="farmerId"> Id of the associated farmer. </param>
        /// <param name="types"> Types of the resource. </param>
        /// <param name="cropIds"> Crop Ids of the resource. </param>
        /// <param name="seasonIds"> Season Ids of the resource. </param>
        /// <param name="fieldIds"> Field Ids of the resource. </param>
        /// <param name="sources"> Sources for the resource. </param>
        /// <param name="ids"> Ids of the resource. </param>
        /// <param name="names"> Names of the resource. </param>
        /// <param name="propertyFilters">
        /// Filters on key-value pairs within the Properties object.
        /// eg. &quot;{testKey} eq {testValue}&quot;.
        /// </param>
        /// <param name="statuses"> Statuses of the resource. </param>
        /// <param name="minCreatedDateTime"> Minimum creation date of resource (inclusive). </param>
        /// <param name="maxCreatedDateTime"> Maximum creation date of resource (inclusive). </param>
        /// <param name="minLastModifiedDateTime"> Minimum last modified date of resource (inclusive). </param>
        /// <param name="maxLastModifiedDateTime"> Maximum last modified date of resource (inclusive). </param>
        /// <param name="maxPageSize">
        /// Maximum number of items needed (inclusive).
        /// Minimum = 10, Maximum = 1000, Default value = 50.
        /// </param>
        /// <param name="skipToken"> Skip token for getting next set of results. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="farmerId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="farmerId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetPrescriptionMapsByFarmerIdAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PrescriptionMapsClient(credential);
        /// 
        /// await foreach (var data in client.GetPrescriptionMapsByFarmerIdAsync("<farmerId>"))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.ToString());
        /// }
        /// ]]></code>
        /// This sample shows how to call GetPrescriptionMapsByFarmerIdAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PrescriptionMapsClient(credential);
        /// 
        /// await foreach (var data in client.GetPrescriptionMapsByFarmerIdAsync("<farmerId>", new String[]{"<types>"}, new String[]{"<cropIds>"}, new String[]{"<seasonIds>"}, new String[]{"<fieldIds>"}, new String[]{"<sources>"}, new String[]{"<ids>"}, new String[]{"<names>"}, new String[]{"<propertyFilters>"}, new String[]{"<statuses>"}, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 1234, "<skipToken>"))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.GetProperty("farmerId").ToString());
        ///     Console.WriteLine(result.GetProperty("type").ToString());
        ///     Console.WriteLine(result.GetProperty("seasonId").ToString());
        ///     Console.WriteLine(result.GetProperty("cropId").ToString());
        ///     Console.WriteLine(result.GetProperty("fieldId").ToString());
        ///     Console.WriteLine(result.GetProperty("id").ToString());
        ///     Console.WriteLine(result.GetProperty("eTag").ToString());
        ///     Console.WriteLine(result.GetProperty("status").ToString());
        ///     Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("source").ToString());
        ///     Console.WriteLine(result.GetProperty("name").ToString());
        ///     Console.WriteLine(result.GetProperty("description").ToString());
        ///     Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
        /// }
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for one item in the pageable response.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>PrescriptionMapListResponseValue</c>:
        /// <code>{
        ///   farmerId: string, # Optional. Farmer Id.
        ///   type: string, # Optional. Prescription map type.
        ///   seasonId: string, # Optional. Season Id.
        ///   cropId: string, # Optional. Crop Id.
        ///   fieldId: string, # Optional. Field Id.
        ///   id: string, # Optional. Unique resource ID.
        ///   eTag: string, # Optional. The ETag value to implement optimistic concurrency.
        ///   status: string, # Optional. Status of the resource.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   source: string, # Optional. Source of the resource.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string,
        /// numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual AsyncPageable<BinaryData> GetPrescriptionMapsByFarmerIdAsync(string farmerId, IEnumerable<string> types = null, IEnumerable<string> cropIds = null, IEnumerable<string> seasonIds = null, IEnumerable<string> fieldIds = null, IEnumerable<string> sources = null, IEnumerable<string> ids = null, IEnumerable<string> names = null, IEnumerable<string> propertyFilters = null, IEnumerable<string> statuses = null, DateTimeOffset? minCreatedDateTime = null, DateTimeOffset? maxCreatedDateTime = null, DateTimeOffset? minLastModifiedDateTime = null, DateTimeOffset? maxLastModifiedDateTime = null, int? maxPageSize = null, string skipToken = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(farmerId, nameof(farmerId));

            return GetPrescriptionMapsByFarmerIdImplementationAsync("PrescriptionMapsClient.GetPrescriptionMapsByFarmerId", farmerId, types, cropIds, seasonIds, fieldIds, sources, ids, names, propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken, context);
        }

        private AsyncPageable<BinaryData> GetPrescriptionMapsByFarmerIdImplementationAsync(string diagnosticsScopeName, string farmerId, IEnumerable<string> types, IEnumerable<string> cropIds, IEnumerable<string> seasonIds, IEnumerable<string> fieldIds, IEnumerable<string> sources, IEnumerable<string> ids, IEnumerable<string> names, IEnumerable<string> propertyFilters, IEnumerable<string> statuses, DateTimeOffset? minCreatedDateTime, DateTimeOffset? maxCreatedDateTime, DateTimeOffset? minLastModifiedDateTime, DateTimeOffset? maxLastModifiedDateTime, int? maxPageSize, string skipToken, RequestContext context)
        {
            return PageableHelpers.CreateAsyncPageable(CreateEnumerableAsync, ClientDiagnostics, diagnosticsScopeName);
            async IAsyncEnumerable<Page<BinaryData>> CreateEnumerableAsync(string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken = default)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetPrescriptionMapsByFarmerIdRequest(farmerId, types, cropIds, seasonIds, fieldIds, sources, ids, names, propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken, context)
                        : CreateGetPrescriptionMapsByFarmerIdNextPageRequest(nextLink, farmerId, types, cropIds, seasonIds, fieldIds, sources, ids, names, propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken, context);
                    var page = await LowLevelPageableHelpers.ProcessMessageAsync(_pipeline, message, context, "value", "nextLink", cancellationToken).ConfigureAwait(false);
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Returns a paginated list of prescription map resources under a particular farmer. </summary>
        /// <param name="farmerId"> Id of the associated farmer. </param>
        /// <param name="types"> Types of the resource. </param>
        /// <param name="cropIds"> Crop Ids of the resource. </param>
        /// <param name="seasonIds"> Season Ids of the resource. </param>
        /// <param name="fieldIds"> Field Ids of the resource. </param>
        /// <param name="sources"> Sources for the resource. </param>
        /// <param name="ids"> Ids of the resource. </param>
        /// <param name="names"> Names of the resource. </param>
        /// <param name="propertyFilters">
        /// Filters on key-value pairs within the Properties object.
        /// eg. &quot;{testKey} eq {testValue}&quot;.
        /// </param>
        /// <param name="statuses"> Statuses of the resource. </param>
        /// <param name="minCreatedDateTime"> Minimum creation date of resource (inclusive). </param>
        /// <param name="maxCreatedDateTime"> Maximum creation date of resource (inclusive). </param>
        /// <param name="minLastModifiedDateTime"> Minimum last modified date of resource (inclusive). </param>
        /// <param name="maxLastModifiedDateTime"> Maximum last modified date of resource (inclusive). </param>
        /// <param name="maxPageSize">
        /// Maximum number of items needed (inclusive).
        /// Minimum = 10, Maximum = 1000, Default value = 50.
        /// </param>
        /// <param name="skipToken"> Skip token for getting next set of results. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="farmerId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="farmerId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetPrescriptionMapsByFarmerId with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PrescriptionMapsClient(credential);
        /// 
        /// foreach (var data in client.GetPrescriptionMapsByFarmerId("<farmerId>"))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.ToString());
        /// }
        /// ]]></code>
        /// This sample shows how to call GetPrescriptionMapsByFarmerId with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PrescriptionMapsClient(credential);
        /// 
        /// foreach (var data in client.GetPrescriptionMapsByFarmerId("<farmerId>", new String[]{"<types>"}, new String[]{"<cropIds>"}, new String[]{"<seasonIds>"}, new String[]{"<fieldIds>"}, new String[]{"<sources>"}, new String[]{"<ids>"}, new String[]{"<names>"}, new String[]{"<propertyFilters>"}, new String[]{"<statuses>"}, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 1234, "<skipToken>"))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.GetProperty("farmerId").ToString());
        ///     Console.WriteLine(result.GetProperty("type").ToString());
        ///     Console.WriteLine(result.GetProperty("seasonId").ToString());
        ///     Console.WriteLine(result.GetProperty("cropId").ToString());
        ///     Console.WriteLine(result.GetProperty("fieldId").ToString());
        ///     Console.WriteLine(result.GetProperty("id").ToString());
        ///     Console.WriteLine(result.GetProperty("eTag").ToString());
        ///     Console.WriteLine(result.GetProperty("status").ToString());
        ///     Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("source").ToString());
        ///     Console.WriteLine(result.GetProperty("name").ToString());
        ///     Console.WriteLine(result.GetProperty("description").ToString());
        ///     Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
        /// }
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for one item in the pageable response.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>PrescriptionMapListResponseValue</c>:
        /// <code>{
        ///   farmerId: string, # Optional. Farmer Id.
        ///   type: string, # Optional. Prescription map type.
        ///   seasonId: string, # Optional. Season Id.
        ///   cropId: string, # Optional. Crop Id.
        ///   fieldId: string, # Optional. Field Id.
        ///   id: string, # Optional. Unique resource ID.
        ///   eTag: string, # Optional. The ETag value to implement optimistic concurrency.
        ///   status: string, # Optional. Status of the resource.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   source: string, # Optional. Source of the resource.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string,
        /// numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Pageable<BinaryData> GetPrescriptionMapsByFarmerId(string farmerId, IEnumerable<string> types = null, IEnumerable<string> cropIds = null, IEnumerable<string> seasonIds = null, IEnumerable<string> fieldIds = null, IEnumerable<string> sources = null, IEnumerable<string> ids = null, IEnumerable<string> names = null, IEnumerable<string> propertyFilters = null, IEnumerable<string> statuses = null, DateTimeOffset? minCreatedDateTime = null, DateTimeOffset? maxCreatedDateTime = null, DateTimeOffset? minLastModifiedDateTime = null, DateTimeOffset? maxLastModifiedDateTime = null, int? maxPageSize = null, string skipToken = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(farmerId, nameof(farmerId));

            return GetPrescriptionMapsByFarmerIdImplementation("PrescriptionMapsClient.GetPrescriptionMapsByFarmerId", farmerId, types, cropIds, seasonIds, fieldIds, sources, ids, names, propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken, context);
        }

        private Pageable<BinaryData> GetPrescriptionMapsByFarmerIdImplementation(string diagnosticsScopeName, string farmerId, IEnumerable<string> types, IEnumerable<string> cropIds, IEnumerable<string> seasonIds, IEnumerable<string> fieldIds, IEnumerable<string> sources, IEnumerable<string> ids, IEnumerable<string> names, IEnumerable<string> propertyFilters, IEnumerable<string> statuses, DateTimeOffset? minCreatedDateTime, DateTimeOffset? maxCreatedDateTime, DateTimeOffset? minLastModifiedDateTime, DateTimeOffset? maxLastModifiedDateTime, int? maxPageSize, string skipToken, RequestContext context)
        {
            return PageableHelpers.CreatePageable(CreateEnumerable, ClientDiagnostics, diagnosticsScopeName);
            IEnumerable<Page<BinaryData>> CreateEnumerable(string nextLink, int? pageSizeHint)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetPrescriptionMapsByFarmerIdRequest(farmerId, types, cropIds, seasonIds, fieldIds, sources, ids, names, propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken, context)
                        : CreateGetPrescriptionMapsByFarmerIdNextPageRequest(nextLink, farmerId, types, cropIds, seasonIds, fieldIds, sources, ids, names, propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken, context);
                    var page = LowLevelPageableHelpers.ProcessMessage(_pipeline, message, context, "value", "nextLink");
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Returns a paginated list of prescription map resources across all farmers. </summary>
        /// <param name="types"> Types of the resource. </param>
        /// <param name="cropIds"> Crop Ids of the resource. </param>
        /// <param name="seasonIds"> Season Ids of the resource. </param>
        /// <param name="fieldIds"> Field Ids of the resource. </param>
        /// <param name="sources"> Sources for the resource. </param>
        /// <param name="ids"> Ids of the resource. </param>
        /// <param name="names"> Names of the resource. </param>
        /// <param name="propertyFilters">
        /// Filters on key-value pairs within the Properties object.
        /// eg. &quot;{testKey} eq {testValue}&quot;.
        /// </param>
        /// <param name="statuses"> Statuses of the resource. </param>
        /// <param name="minCreatedDateTime"> Minimum creation date of resource (inclusive). </param>
        /// <param name="maxCreatedDateTime"> Maximum creation date of resource (inclusive). </param>
        /// <param name="minLastModifiedDateTime"> Minimum last modified date of resource (inclusive). </param>
        /// <param name="maxLastModifiedDateTime"> Maximum last modified date of resource (inclusive). </param>
        /// <param name="maxPageSize">
        /// Maximum number of items needed (inclusive).
        /// Minimum = 10, Maximum = 1000, Default value = 50.
        /// </param>
        /// <param name="skipToken"> Skip token for getting next set of results. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetPrescriptionMapsAsync and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PrescriptionMapsClient(credential);
        /// 
        /// await foreach (var data in client.GetPrescriptionMapsAsync())
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.ToString());
        /// }
        /// ]]></code>
        /// This sample shows how to call GetPrescriptionMapsAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PrescriptionMapsClient(credential);
        /// 
        /// await foreach (var data in client.GetPrescriptionMapsAsync(new String[]{"<types>"}, new String[]{"<cropIds>"}, new String[]{"<seasonIds>"}, new String[]{"<fieldIds>"}, new String[]{"<sources>"}, new String[]{"<ids>"}, new String[]{"<names>"}, new String[]{"<propertyFilters>"}, new String[]{"<statuses>"}, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 1234, "<skipToken>"))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.GetProperty("farmerId").ToString());
        ///     Console.WriteLine(result.GetProperty("type").ToString());
        ///     Console.WriteLine(result.GetProperty("seasonId").ToString());
        ///     Console.WriteLine(result.GetProperty("cropId").ToString());
        ///     Console.WriteLine(result.GetProperty("fieldId").ToString());
        ///     Console.WriteLine(result.GetProperty("id").ToString());
        ///     Console.WriteLine(result.GetProperty("eTag").ToString());
        ///     Console.WriteLine(result.GetProperty("status").ToString());
        ///     Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("source").ToString());
        ///     Console.WriteLine(result.GetProperty("name").ToString());
        ///     Console.WriteLine(result.GetProperty("description").ToString());
        ///     Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
        /// }
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for one item in the pageable response.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>PrescriptionMapListResponseValue</c>:
        /// <code>{
        ///   farmerId: string, # Optional. Farmer Id.
        ///   type: string, # Optional. Prescription map type.
        ///   seasonId: string, # Optional. Season Id.
        ///   cropId: string, # Optional. Crop Id.
        ///   fieldId: string, # Optional. Field Id.
        ///   id: string, # Optional. Unique resource ID.
        ///   eTag: string, # Optional. The ETag value to implement optimistic concurrency.
        ///   status: string, # Optional. Status of the resource.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   source: string, # Optional. Source of the resource.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string,
        /// numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual AsyncPageable<BinaryData> GetPrescriptionMapsAsync(IEnumerable<string> types = null, IEnumerable<string> cropIds = null, IEnumerable<string> seasonIds = null, IEnumerable<string> fieldIds = null, IEnumerable<string> sources = null, IEnumerable<string> ids = null, IEnumerable<string> names = null, IEnumerable<string> propertyFilters = null, IEnumerable<string> statuses = null, DateTimeOffset? minCreatedDateTime = null, DateTimeOffset? maxCreatedDateTime = null, DateTimeOffset? minLastModifiedDateTime = null, DateTimeOffset? maxLastModifiedDateTime = null, int? maxPageSize = null, string skipToken = null, RequestContext context = null)
        {
            return GetPrescriptionMapsImplementationAsync("PrescriptionMapsClient.GetPrescriptionMaps", types, cropIds, seasonIds, fieldIds, sources, ids, names, propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken, context);
        }

        private AsyncPageable<BinaryData> GetPrescriptionMapsImplementationAsync(string diagnosticsScopeName, IEnumerable<string> types, IEnumerable<string> cropIds, IEnumerable<string> seasonIds, IEnumerable<string> fieldIds, IEnumerable<string> sources, IEnumerable<string> ids, IEnumerable<string> names, IEnumerable<string> propertyFilters, IEnumerable<string> statuses, DateTimeOffset? minCreatedDateTime, DateTimeOffset? maxCreatedDateTime, DateTimeOffset? minLastModifiedDateTime, DateTimeOffset? maxLastModifiedDateTime, int? maxPageSize, string skipToken, RequestContext context)
        {
            return PageableHelpers.CreateAsyncPageable(CreateEnumerableAsync, ClientDiagnostics, diagnosticsScopeName);
            async IAsyncEnumerable<Page<BinaryData>> CreateEnumerableAsync(string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken = default)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetPrescriptionMapsRequest(types, cropIds, seasonIds, fieldIds, sources, ids, names, propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken, context)
                        : CreateGetPrescriptionMapsNextPageRequest(nextLink, types, cropIds, seasonIds, fieldIds, sources, ids, names, propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken, context);
                    var page = await LowLevelPageableHelpers.ProcessMessageAsync(_pipeline, message, context, "value", "nextLink", cancellationToken).ConfigureAwait(false);
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Returns a paginated list of prescription map resources across all farmers. </summary>
        /// <param name="types"> Types of the resource. </param>
        /// <param name="cropIds"> Crop Ids of the resource. </param>
        /// <param name="seasonIds"> Season Ids of the resource. </param>
        /// <param name="fieldIds"> Field Ids of the resource. </param>
        /// <param name="sources"> Sources for the resource. </param>
        /// <param name="ids"> Ids of the resource. </param>
        /// <param name="names"> Names of the resource. </param>
        /// <param name="propertyFilters">
        /// Filters on key-value pairs within the Properties object.
        /// eg. &quot;{testKey} eq {testValue}&quot;.
        /// </param>
        /// <param name="statuses"> Statuses of the resource. </param>
        /// <param name="minCreatedDateTime"> Minimum creation date of resource (inclusive). </param>
        /// <param name="maxCreatedDateTime"> Maximum creation date of resource (inclusive). </param>
        /// <param name="minLastModifiedDateTime"> Minimum last modified date of resource (inclusive). </param>
        /// <param name="maxLastModifiedDateTime"> Maximum last modified date of resource (inclusive). </param>
        /// <param name="maxPageSize">
        /// Maximum number of items needed (inclusive).
        /// Minimum = 10, Maximum = 1000, Default value = 50.
        /// </param>
        /// <param name="skipToken"> Skip token for getting next set of results. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetPrescriptionMaps and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PrescriptionMapsClient(credential);
        /// 
        /// foreach (var data in client.GetPrescriptionMaps())
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.ToString());
        /// }
        /// ]]></code>
        /// This sample shows how to call GetPrescriptionMaps with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PrescriptionMapsClient(credential);
        /// 
        /// foreach (var data in client.GetPrescriptionMaps(new String[]{"<types>"}, new String[]{"<cropIds>"}, new String[]{"<seasonIds>"}, new String[]{"<fieldIds>"}, new String[]{"<sources>"}, new String[]{"<ids>"}, new String[]{"<names>"}, new String[]{"<propertyFilters>"}, new String[]{"<statuses>"}, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 1234, "<skipToken>"))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.GetProperty("farmerId").ToString());
        ///     Console.WriteLine(result.GetProperty("type").ToString());
        ///     Console.WriteLine(result.GetProperty("seasonId").ToString());
        ///     Console.WriteLine(result.GetProperty("cropId").ToString());
        ///     Console.WriteLine(result.GetProperty("fieldId").ToString());
        ///     Console.WriteLine(result.GetProperty("id").ToString());
        ///     Console.WriteLine(result.GetProperty("eTag").ToString());
        ///     Console.WriteLine(result.GetProperty("status").ToString());
        ///     Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("source").ToString());
        ///     Console.WriteLine(result.GetProperty("name").ToString());
        ///     Console.WriteLine(result.GetProperty("description").ToString());
        ///     Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
        /// }
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for one item in the pageable response.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>PrescriptionMapListResponseValue</c>:
        /// <code>{
        ///   farmerId: string, # Optional. Farmer Id.
        ///   type: string, # Optional. Prescription map type.
        ///   seasonId: string, # Optional. Season Id.
        ///   cropId: string, # Optional. Crop Id.
        ///   fieldId: string, # Optional. Field Id.
        ///   id: string, # Optional. Unique resource ID.
        ///   eTag: string, # Optional. The ETag value to implement optimistic concurrency.
        ///   status: string, # Optional. Status of the resource.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   source: string, # Optional. Source of the resource.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string,
        /// numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Pageable<BinaryData> GetPrescriptionMaps(IEnumerable<string> types = null, IEnumerable<string> cropIds = null, IEnumerable<string> seasonIds = null, IEnumerable<string> fieldIds = null, IEnumerable<string> sources = null, IEnumerable<string> ids = null, IEnumerable<string> names = null, IEnumerable<string> propertyFilters = null, IEnumerable<string> statuses = null, DateTimeOffset? minCreatedDateTime = null, DateTimeOffset? maxCreatedDateTime = null, DateTimeOffset? minLastModifiedDateTime = null, DateTimeOffset? maxLastModifiedDateTime = null, int? maxPageSize = null, string skipToken = null, RequestContext context = null)
        {
            return GetPrescriptionMapsImplementation("PrescriptionMapsClient.GetPrescriptionMaps", types, cropIds, seasonIds, fieldIds, sources, ids, names, propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken, context);
        }

        private Pageable<BinaryData> GetPrescriptionMapsImplementation(string diagnosticsScopeName, IEnumerable<string> types, IEnumerable<string> cropIds, IEnumerable<string> seasonIds, IEnumerable<string> fieldIds, IEnumerable<string> sources, IEnumerable<string> ids, IEnumerable<string> names, IEnumerable<string> propertyFilters, IEnumerable<string> statuses, DateTimeOffset? minCreatedDateTime, DateTimeOffset? maxCreatedDateTime, DateTimeOffset? minLastModifiedDateTime, DateTimeOffset? maxLastModifiedDateTime, int? maxPageSize, string skipToken, RequestContext context)
        {
            return PageableHelpers.CreatePageable(CreateEnumerable, ClientDiagnostics, diagnosticsScopeName);
            IEnumerable<Page<BinaryData>> CreateEnumerable(string nextLink, int? pageSizeHint)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetPrescriptionMapsRequest(types, cropIds, seasonIds, fieldIds, sources, ids, names, propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken, context)
                        : CreateGetPrescriptionMapsNextPageRequest(nextLink, types, cropIds, seasonIds, fieldIds, sources, ids, names, propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken, context);
                    var page = LowLevelPageableHelpers.ProcessMessage(_pipeline, message, context, "value", "nextLink");
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Create a cascade delete job for specified prescription map. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="jobId"> Job ID supplied by end user. </param>
        /// <param name="farmerId"> ID of the associated farmer. </param>
        /// <param name="prescriptionMapId"> ID of the prescription map to be deleted. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/>, <paramref name="farmerId"/> or <paramref name="prescriptionMapId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation{T}"/> from the service that will contain a <see cref="BinaryData"/> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateCascadeDeleteJobAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PrescriptionMapsClient(credential);
        /// 
        /// var operation = await client.CreateCascadeDeleteJobAsync(WaitUntil.Completed, "<jobId>", "<farmerId>", "<prescriptionMapId>");
        /// 
        /// BinaryData data = await operation.WaitForCompletionAsync();
        /// JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        /// Console.WriteLine(result.GetProperty("farmerId").ToString());
        /// Console.WriteLine(result.GetProperty("resourceId").ToString());
        /// Console.WriteLine(result.GetProperty("resourceType").ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
        /// Console.WriteLine(result.GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("endTime").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>CascadeDeleteJob</c>:
        /// <code>{
        ///   farmerId: string, # Required. Farmer Id.
        ///   resourceId: string, # Required. The id of the resource.
        ///   resourceType: string, # Required. The type of the resource.
        ///   id: string, # Optional. Unique job id.
        ///   status: &quot;Waiting&quot; | &quot;Running&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Cancelled&quot;, # Optional. Status of the job.
        /// Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
        ///   durationInSeconds: number, # Optional. Duration of the job in seconds.
        ///   message: string, # Optional. Status message to capture more details of the job.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Operation<BinaryData>> CreateCascadeDeleteJobAsync(WaitUntil waitUntil, string jobId, string farmerId, string prescriptionMapId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
            Argument.AssertNotNull(farmerId, nameof(farmerId));
            Argument.AssertNotNull(prescriptionMapId, nameof(prescriptionMapId));

            using var scope = ClientDiagnostics.CreateScope("PrescriptionMapsClient.CreateCascadeDeleteJob");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateCascadeDeleteJobRequest(jobId, farmerId, prescriptionMapId, context);
                return await ProtocolOperationHelpers.ProcessMessageAsync(_pipeline, message, ClientDiagnostics, "PrescriptionMapsClient.CreateCascadeDeleteJob", OperationFinalStateVia.Location, context, waitUntil).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a cascade delete job for specified prescription map. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="jobId"> Job ID supplied by end user. </param>
        /// <param name="farmerId"> ID of the associated farmer. </param>
        /// <param name="prescriptionMapId"> ID of the prescription map to be deleted. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/>, <paramref name="farmerId"/> or <paramref name="prescriptionMapId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation{T}"/> from the service that will contain a <see cref="BinaryData"/> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateCascadeDeleteJob with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new PrescriptionMapsClient(credential);
        /// 
        /// var operation = client.CreateCascadeDeleteJob(WaitUntil.Completed, "<jobId>", "<farmerId>", "<prescriptionMapId>");
        /// 
        /// BinaryData data = operation.WaitForCompletion();
        /// JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        /// Console.WriteLine(result.GetProperty("farmerId").ToString());
        /// Console.WriteLine(result.GetProperty("resourceId").ToString());
        /// Console.WriteLine(result.GetProperty("resourceType").ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
        /// Console.WriteLine(result.GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("endTime").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>CascadeDeleteJob</c>:
        /// <code>{
        ///   farmerId: string, # Required. Farmer Id.
        ///   resourceId: string, # Required. The id of the resource.
        ///   resourceType: string, # Required. The type of the resource.
        ///   id: string, # Optional. Unique job id.
        ///   status: &quot;Waiting&quot; | &quot;Running&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Cancelled&quot;, # Optional. Status of the job.
        /// Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
        ///   durationInSeconds: number, # Optional. Duration of the job in seconds.
        ///   message: string, # Optional. Status message to capture more details of the job.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Operation<BinaryData> CreateCascadeDeleteJob(WaitUntil waitUntil, string jobId, string farmerId, string prescriptionMapId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));
            Argument.AssertNotNull(farmerId, nameof(farmerId));
            Argument.AssertNotNull(prescriptionMapId, nameof(prescriptionMapId));

            using var scope = ClientDiagnostics.CreateScope("PrescriptionMapsClient.CreateCascadeDeleteJob");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateCascadeDeleteJobRequest(jobId, farmerId, prescriptionMapId, context);
                return ProtocolOperationHelpers.ProcessMessage(_pipeline, message, ClientDiagnostics, "PrescriptionMapsClient.CreateCascadeDeleteJob", OperationFinalStateVia.Location, context, waitUntil);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateGetPrescriptionMapsByFarmerIdRequest(string farmerId, IEnumerable<string> types, IEnumerable<string> cropIds, IEnumerable<string> seasonIds, IEnumerable<string> fieldIds, IEnumerable<string> sources, IEnumerable<string> ids, IEnumerable<string> names, IEnumerable<string> propertyFilters, IEnumerable<string> statuses, DateTimeOffset? minCreatedDateTime, DateTimeOffset? maxCreatedDateTime, DateTimeOffset? minLastModifiedDateTime, DateTimeOffset? maxLastModifiedDateTime, int? maxPageSize, string skipToken, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/farmers/", false);
            uri.AppendPath(farmerId, true);
            uri.AppendPath("/prescription-maps", false);
            if (types != null)
            {
                foreach (var param in types)
                {
                    uri.AppendQuery("types", param, true);
                }
            }
            if (cropIds != null)
            {
                foreach (var param in cropIds)
                {
                    uri.AppendQuery("cropIds", param, true);
                }
            }
            if (seasonIds != null)
            {
                foreach (var param in seasonIds)
                {
                    uri.AppendQuery("seasonIds", param, true);
                }
            }
            if (fieldIds != null)
            {
                foreach (var param in fieldIds)
                {
                    uri.AppendQuery("fieldIds", param, true);
                }
            }
            if (sources != null)
            {
                foreach (var param in sources)
                {
                    uri.AppendQuery("sources", param, true);
                }
            }
            if (ids != null)
            {
                foreach (var param in ids)
                {
                    uri.AppendQuery("ids", param, true);
                }
            }
            if (names != null)
            {
                foreach (var param in names)
                {
                    uri.AppendQuery("names", param, true);
                }
            }
            if (propertyFilters != null)
            {
                foreach (var param in propertyFilters)
                {
                    uri.AppendQuery("propertyFilters", param, true);
                }
            }
            if (statuses != null)
            {
                foreach (var param in statuses)
                {
                    uri.AppendQuery("statuses", param, true);
                }
            }
            if (minCreatedDateTime != null)
            {
                uri.AppendQuery("minCreatedDateTime", minCreatedDateTime.Value, "O", true);
            }
            if (maxCreatedDateTime != null)
            {
                uri.AppendQuery("maxCreatedDateTime", maxCreatedDateTime.Value, "O", true);
            }
            if (minLastModifiedDateTime != null)
            {
                uri.AppendQuery("minLastModifiedDateTime", minLastModifiedDateTime.Value, "O", true);
            }
            if (maxLastModifiedDateTime != null)
            {
                uri.AppendQuery("maxLastModifiedDateTime", maxLastModifiedDateTime.Value, "O", true);
            }
            if (maxPageSize != null)
            {
                uri.AppendQuery("$maxPageSize", maxPageSize.Value, true);
            }
            if (skipToken != null)
            {
                uri.AppendQuery("$skipToken", skipToken, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetPrescriptionMapRequest(string farmerId, string prescriptionMapId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/farmers/", false);
            uri.AppendPath(farmerId, true);
            uri.AppendPath("/prescription-maps/", false);
            uri.AppendPath(prescriptionMapId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCreateOrUpdateRequest(string farmerId, string prescriptionMapId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200201);
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/farmers/", false);
            uri.AppendPath(farmerId, true);
            uri.AppendPath("/prescription-maps/", false);
            uri.AppendPath(prescriptionMapId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/merge-patch+json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteRequest(string farmerId, string prescriptionMapId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/farmers/", false);
            uri.AppendPath(farmerId, true);
            uri.AppendPath("/prescription-maps/", false);
            uri.AppendPath(prescriptionMapId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetPrescriptionMapsRequest(IEnumerable<string> types, IEnumerable<string> cropIds, IEnumerable<string> seasonIds, IEnumerable<string> fieldIds, IEnumerable<string> sources, IEnumerable<string> ids, IEnumerable<string> names, IEnumerable<string> propertyFilters, IEnumerable<string> statuses, DateTimeOffset? minCreatedDateTime, DateTimeOffset? maxCreatedDateTime, DateTimeOffset? minLastModifiedDateTime, DateTimeOffset? maxLastModifiedDateTime, int? maxPageSize, string skipToken, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/prescription-maps", false);
            if (types != null)
            {
                foreach (var param in types)
                {
                    uri.AppendQuery("types", param, true);
                }
            }
            if (cropIds != null)
            {
                foreach (var param in cropIds)
                {
                    uri.AppendQuery("cropIds", param, true);
                }
            }
            if (seasonIds != null)
            {
                foreach (var param in seasonIds)
                {
                    uri.AppendQuery("seasonIds", param, true);
                }
            }
            if (fieldIds != null)
            {
                foreach (var param in fieldIds)
                {
                    uri.AppendQuery("fieldIds", param, true);
                }
            }
            if (sources != null)
            {
                foreach (var param in sources)
                {
                    uri.AppendQuery("sources", param, true);
                }
            }
            if (ids != null)
            {
                foreach (var param in ids)
                {
                    uri.AppendQuery("ids", param, true);
                }
            }
            if (names != null)
            {
                foreach (var param in names)
                {
                    uri.AppendQuery("names", param, true);
                }
            }
            if (propertyFilters != null)
            {
                foreach (var param in propertyFilters)
                {
                    uri.AppendQuery("propertyFilters", param, true);
                }
            }
            if (statuses != null)
            {
                foreach (var param in statuses)
                {
                    uri.AppendQuery("statuses", param, true);
                }
            }
            if (minCreatedDateTime != null)
            {
                uri.AppendQuery("minCreatedDateTime", minCreatedDateTime.Value, "O", true);
            }
            if (maxCreatedDateTime != null)
            {
                uri.AppendQuery("maxCreatedDateTime", maxCreatedDateTime.Value, "O", true);
            }
            if (minLastModifiedDateTime != null)
            {
                uri.AppendQuery("minLastModifiedDateTime", minLastModifiedDateTime.Value, "O", true);
            }
            if (maxLastModifiedDateTime != null)
            {
                uri.AppendQuery("maxLastModifiedDateTime", maxLastModifiedDateTime.Value, "O", true);
            }
            if (maxPageSize != null)
            {
                uri.AppendQuery("$maxPageSize", maxPageSize.Value, true);
            }
            if (skipToken != null)
            {
                uri.AppendQuery("$skipToken", skipToken, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetCascadeDeleteJobDetailsRequest(string jobId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/prescription-maps/cascade-delete/", false);
            uri.AppendPath(jobId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCreateCascadeDeleteJobRequest(string jobId, string farmerId, string prescriptionMapId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier202);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/prescription-maps/cascade-delete/", false);
            uri.AppendPath(jobId, true);
            uri.AppendQuery("farmerId", farmerId, true);
            uri.AppendQuery("prescriptionMapId", prescriptionMapId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetPrescriptionMapsByFarmerIdNextPageRequest(string nextLink, string farmerId, IEnumerable<string> types, IEnumerable<string> cropIds, IEnumerable<string> seasonIds, IEnumerable<string> fieldIds, IEnumerable<string> sources, IEnumerable<string> ids, IEnumerable<string> names, IEnumerable<string> propertyFilters, IEnumerable<string> statuses, DateTimeOffset? minCreatedDateTime, DateTimeOffset? maxCreatedDateTime, DateTimeOffset? minLastModifiedDateTime, DateTimeOffset? maxLastModifiedDateTime, int? maxPageSize, string skipToken, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetPrescriptionMapsNextPageRequest(string nextLink, IEnumerable<string> types, IEnumerable<string> cropIds, IEnumerable<string> seasonIds, IEnumerable<string> fieldIds, IEnumerable<string> sources, IEnumerable<string> ids, IEnumerable<string> names, IEnumerable<string> propertyFilters, IEnumerable<string> statuses, DateTimeOffset? minCreatedDateTime, DateTimeOffset? maxCreatedDateTime, DateTimeOffset? minLastModifiedDateTime, DateTimeOffset? maxLastModifiedDateTime, int? maxPageSize, string skipToken, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier200201;
        private static ResponseClassifier ResponseClassifier200201 => _responseClassifier200201 ??= new StatusCodeClassifier(stackalloc ushort[] { 200, 201 });
        private static ResponseClassifier _responseClassifier204;
        private static ResponseClassifier ResponseClassifier204 => _responseClassifier204 ??= new StatusCodeClassifier(stackalloc ushort[] { 204 });
        private static ResponseClassifier _responseClassifier202;
        private static ResponseClassifier ResponseClassifier202 => _responseClassifier202 ??= new StatusCodeClassifier(stackalloc ushort[] { 202 });
    }
}
