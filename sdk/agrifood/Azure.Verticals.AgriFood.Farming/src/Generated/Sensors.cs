// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Verticals.AgriFood.Farming
{
    // Data plane generated sub-client. The Sensors sub-client.
    /// <summary> The Sensors sub-client. </summary>
    public partial class Sensors
    {
        private static readonly string[] AuthorizationScopes = new string[] { "https://farmbeats.azure.net/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of Sensors for mocking. </summary>
        protected Sensors()
        {
        }

        /// <summary> Initializes a new instance of Sensors. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="tokenCredential"> The token credential to copy. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="apiVersion"> Api Version. </param>
        internal Sensors(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, TokenCredential tokenCredential, Uri endpoint, string apiVersion)
        {
            ClientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
            _tokenCredential = tokenCredential;
            _endpoint = endpoint;
            _apiVersion = apiVersion;
        }

        /// <summary> Create a sensor entity. </summary>
        /// <param name="sensorPartnerId"> Id of the sensor partner. </param>
        /// <param name="sensorId"> Id of the sensor resource. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sensorPartnerId"/>, <paramref name="sensorId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="sensorPartnerId"/> or <paramref name="sensorId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateOrUpdateAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new FarmBeatsClient(credential).GetSensorsClient(<2021-07-31-preview>);
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.CreateOrUpdateAsync("<sensorPartnerId>", "<sensorId>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call CreateOrUpdateAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new FarmBeatsClient(credential).GetSensorsClient(<2021-07-31-preview>);
        /// 
        /// var data = new {
        ///     sensorDataModelId = "<sensorDataModelId>",
        ///     integrationId = "<integrationId>",
        ///     hardwareId = "<hardwareId>",
        ///     deviceId = "<deviceId>",
        ///     type = "<type>",
        ///     location = new {
        ///         latitude = 123.45d,
        ///         longitude = 123.45d,
        ///     },
        ///     port = new {
        ///         name = "<name>",
        ///         type = "<type>",
        ///     },
        ///     depthInMeters = new[] {
        ///         123.45d
        ///     },
        ///     status = "<status>",
        ///     name = "<name>",
        ///     description = "<description>",
        ///     properties = new {
        ///         key = new {},
        ///     },
        /// };
        /// 
        /// Response response = await client.CreateOrUpdateAsync("<sensorPartnerId>", "<sensorId>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("sensorDataModelId").ToString());
        /// Console.WriteLine(result.GetProperty("integrationId").ToString());
        /// Console.WriteLine(result.GetProperty("hardwareId").ToString());
        /// Console.WriteLine(result.GetProperty("deviceId").ToString());
        /// Console.WriteLine(result.GetProperty("type").ToString());
        /// Console.WriteLine(result.GetProperty("location").GetProperty("latitude").ToString());
        /// Console.WriteLine(result.GetProperty("location").GetProperty("longitude").ToString());
        /// Console.WriteLine(result.GetProperty("port").GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("port").GetProperty("type").ToString());
        /// Console.WriteLine(result.GetProperty("depthInMeters")[0].ToString());
        /// Console.WriteLine(result.GetProperty("sensorPartnerId").ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("eTag").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>Sensor</c>:
        /// <code>{
        ///   sensorDataModelId: string, # Optional. Id of the associated sensor data model.
        ///   integrationId: string, # Optional. Integration id for the device.
        ///   hardwareId: string, # Optional. Id of the associated hardware.
        ///   deviceId: string, # Optional. Id of the associated device.
        ///   type: string, # Optional. Type of sensor.
        ///   location: {
        ///     latitude: number, # Required. Latitude of the location.
        ///     longitude: number, # Required. Longitude of the location.
        ///   }, # Optional. Location model class.
        ///   port: {
        ///     name: string, # Optional. Name of the port.
        ///     type: string, # Optional. Type of port digital/analog.
        ///   }, # Optional. Schema for storing port values.
        ///   depthInMeters: [number], # Optional. Depth of each sensor measure in meters.
        /// Like sensor moisture at 2m, 4m, 6m.
        ///   sensorPartnerId: string, # Optional. Id of the associated sensor partner.
        ///   id: string, # Optional. Id of the resource.
        ///   status: string, # Optional. Status of the resource.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   eTag: string, # Optional. The ETag value to implement optimistic concurrency.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and
        /// only string, numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Sensor</c>:
        /// <code>{
        ///   sensorDataModelId: string, # Optional. Id of the associated sensor data model.
        ///   integrationId: string, # Optional. Integration id for the device.
        ///   hardwareId: string, # Optional. Id of the associated hardware.
        ///   deviceId: string, # Optional. Id of the associated device.
        ///   type: string, # Optional. Type of sensor.
        ///   location: {
        ///     latitude: number, # Required. Latitude of the location.
        ///     longitude: number, # Required. Longitude of the location.
        ///   }, # Optional. Location model class.
        ///   port: {
        ///     name: string, # Optional. Name of the port.
        ///     type: string, # Optional. Type of port digital/analog.
        ///   }, # Optional. Schema for storing port values.
        ///   depthInMeters: [number], # Optional. Depth of each sensor measure in meters.
        /// Like sensor moisture at 2m, 4m, 6m.
        ///   sensorPartnerId: string, # Optional. Id of the associated sensor partner.
        ///   id: string, # Optional. Id of the resource.
        ///   status: string, # Optional. Status of the resource.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   eTag: string, # Optional. The ETag value to implement optimistic concurrency.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and
        /// only string, numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> CreateOrUpdateAsync(string sensorPartnerId, string sensorId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(sensorPartnerId, nameof(sensorPartnerId));
            Argument.AssertNotNullOrEmpty(sensorId, nameof(sensorId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("Sensors.CreateOrUpdate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateRequest(sensorPartnerId, sensorId, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a sensor entity. </summary>
        /// <param name="sensorPartnerId"> Id of the sensor partner. </param>
        /// <param name="sensorId"> Id of the sensor resource. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sensorPartnerId"/>, <paramref name="sensorId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="sensorPartnerId"/> or <paramref name="sensorId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateOrUpdate with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new FarmBeatsClient(credential).GetSensorsClient(<2021-07-31-preview>);
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.CreateOrUpdate("<sensorPartnerId>", "<sensorId>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.ToString());
        /// ]]></code>
        /// This sample shows how to call CreateOrUpdate with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new FarmBeatsClient(credential).GetSensorsClient(<2021-07-31-preview>);
        /// 
        /// var data = new {
        ///     sensorDataModelId = "<sensorDataModelId>",
        ///     integrationId = "<integrationId>",
        ///     hardwareId = "<hardwareId>",
        ///     deviceId = "<deviceId>",
        ///     type = "<type>",
        ///     location = new {
        ///         latitude = 123.45d,
        ///         longitude = 123.45d,
        ///     },
        ///     port = new {
        ///         name = "<name>",
        ///         type = "<type>",
        ///     },
        ///     depthInMeters = new[] {
        ///         123.45d
        ///     },
        ///     status = "<status>",
        ///     name = "<name>",
        ///     description = "<description>",
        ///     properties = new {
        ///         key = new {},
        ///     },
        /// };
        /// 
        /// Response response = client.CreateOrUpdate("<sensorPartnerId>", "<sensorId>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("sensorDataModelId").ToString());
        /// Console.WriteLine(result.GetProperty("integrationId").ToString());
        /// Console.WriteLine(result.GetProperty("hardwareId").ToString());
        /// Console.WriteLine(result.GetProperty("deviceId").ToString());
        /// Console.WriteLine(result.GetProperty("type").ToString());
        /// Console.WriteLine(result.GetProperty("location").GetProperty("latitude").ToString());
        /// Console.WriteLine(result.GetProperty("location").GetProperty("longitude").ToString());
        /// Console.WriteLine(result.GetProperty("port").GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("port").GetProperty("type").ToString());
        /// Console.WriteLine(result.GetProperty("depthInMeters")[0].ToString());
        /// Console.WriteLine(result.GetProperty("sensorPartnerId").ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("eTag").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>Sensor</c>:
        /// <code>{
        ///   sensorDataModelId: string, # Optional. Id of the associated sensor data model.
        ///   integrationId: string, # Optional. Integration id for the device.
        ///   hardwareId: string, # Optional. Id of the associated hardware.
        ///   deviceId: string, # Optional. Id of the associated device.
        ///   type: string, # Optional. Type of sensor.
        ///   location: {
        ///     latitude: number, # Required. Latitude of the location.
        ///     longitude: number, # Required. Longitude of the location.
        ///   }, # Optional. Location model class.
        ///   port: {
        ///     name: string, # Optional. Name of the port.
        ///     type: string, # Optional. Type of port digital/analog.
        ///   }, # Optional. Schema for storing port values.
        ///   depthInMeters: [number], # Optional. Depth of each sensor measure in meters.
        /// Like sensor moisture at 2m, 4m, 6m.
        ///   sensorPartnerId: string, # Optional. Id of the associated sensor partner.
        ///   id: string, # Optional. Id of the resource.
        ///   status: string, # Optional. Status of the resource.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   eTag: string, # Optional. The ETag value to implement optimistic concurrency.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and
        /// only string, numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Sensor</c>:
        /// <code>{
        ///   sensorDataModelId: string, # Optional. Id of the associated sensor data model.
        ///   integrationId: string, # Optional. Integration id for the device.
        ///   hardwareId: string, # Optional. Id of the associated hardware.
        ///   deviceId: string, # Optional. Id of the associated device.
        ///   type: string, # Optional. Type of sensor.
        ///   location: {
        ///     latitude: number, # Required. Latitude of the location.
        ///     longitude: number, # Required. Longitude of the location.
        ///   }, # Optional. Location model class.
        ///   port: {
        ///     name: string, # Optional. Name of the port.
        ///     type: string, # Optional. Type of port digital/analog.
        ///   }, # Optional. Schema for storing port values.
        ///   depthInMeters: [number], # Optional. Depth of each sensor measure in meters.
        /// Like sensor moisture at 2m, 4m, 6m.
        ///   sensorPartnerId: string, # Optional. Id of the associated sensor partner.
        ///   id: string, # Optional. Id of the resource.
        ///   status: string, # Optional. Status of the resource.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   eTag: string, # Optional. The ETag value to implement optimistic concurrency.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and
        /// only string, numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response CreateOrUpdate(string sensorPartnerId, string sensorId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(sensorPartnerId, nameof(sensorPartnerId));
            Argument.AssertNotNullOrEmpty(sensorId, nameof(sensorId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("Sensors.CreateOrUpdate");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateOrUpdateRequest(sensorPartnerId, sensorId, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a sensor entity. </summary>
        /// <param name="sensorPartnerId"> Id of the sensor partner. </param>
        /// <param name="sensorId"> Id of the sensor resource. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sensorPartnerId"/> or <paramref name="sensorId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="sensorPartnerId"/> or <paramref name="sensorId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetSensorAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new FarmBeatsClient(credential).GetSensorsClient(<2021-07-31-preview>);
        /// 
        /// Response response = await client.GetSensorAsync("<sensorPartnerId>", "<sensorId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("sensorDataModelId").ToString());
        /// Console.WriteLine(result.GetProperty("integrationId").ToString());
        /// Console.WriteLine(result.GetProperty("hardwareId").ToString());
        /// Console.WriteLine(result.GetProperty("deviceId").ToString());
        /// Console.WriteLine(result.GetProperty("type").ToString());
        /// Console.WriteLine(result.GetProperty("location").GetProperty("latitude").ToString());
        /// Console.WriteLine(result.GetProperty("location").GetProperty("longitude").ToString());
        /// Console.WriteLine(result.GetProperty("port").GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("port").GetProperty("type").ToString());
        /// Console.WriteLine(result.GetProperty("depthInMeters")[0].ToString());
        /// Console.WriteLine(result.GetProperty("sensorPartnerId").ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("eTag").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Sensor</c>:
        /// <code>{
        ///   sensorDataModelId: string, # Optional. Id of the associated sensor data model.
        ///   integrationId: string, # Optional. Integration id for the device.
        ///   hardwareId: string, # Optional. Id of the associated hardware.
        ///   deviceId: string, # Optional. Id of the associated device.
        ///   type: string, # Optional. Type of sensor.
        ///   location: {
        ///     latitude: number, # Required. Latitude of the location.
        ///     longitude: number, # Required. Longitude of the location.
        ///   }, # Optional. Location model class.
        ///   port: {
        ///     name: string, # Optional. Name of the port.
        ///     type: string, # Optional. Type of port digital/analog.
        ///   }, # Optional. Schema for storing port values.
        ///   depthInMeters: [number], # Optional. Depth of each sensor measure in meters.
        /// Like sensor moisture at 2m, 4m, 6m.
        ///   sensorPartnerId: string, # Optional. Id of the associated sensor partner.
        ///   id: string, # Optional. Id of the resource.
        ///   status: string, # Optional. Status of the resource.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   eTag: string, # Optional. The ETag value to implement optimistic concurrency.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and
        /// only string, numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetSensorAsync(string sensorPartnerId, string sensorId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(sensorPartnerId, nameof(sensorPartnerId));
            Argument.AssertNotNullOrEmpty(sensorId, nameof(sensorId));

            using var scope = ClientDiagnostics.CreateScope("Sensors.GetSensor");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetSensorRequest(sensorPartnerId, sensorId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a sensor entity. </summary>
        /// <param name="sensorPartnerId"> Id of the sensor partner. </param>
        /// <param name="sensorId"> Id of the sensor resource. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sensorPartnerId"/> or <paramref name="sensorId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="sensorPartnerId"/> or <paramref name="sensorId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetSensor with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new FarmBeatsClient(credential).GetSensorsClient(<2021-07-31-preview>);
        /// 
        /// Response response = client.GetSensor("<sensorPartnerId>", "<sensorId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("sensorDataModelId").ToString());
        /// Console.WriteLine(result.GetProperty("integrationId").ToString());
        /// Console.WriteLine(result.GetProperty("hardwareId").ToString());
        /// Console.WriteLine(result.GetProperty("deviceId").ToString());
        /// Console.WriteLine(result.GetProperty("type").ToString());
        /// Console.WriteLine(result.GetProperty("location").GetProperty("latitude").ToString());
        /// Console.WriteLine(result.GetProperty("location").GetProperty("longitude").ToString());
        /// Console.WriteLine(result.GetProperty("port").GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("port").GetProperty("type").ToString());
        /// Console.WriteLine(result.GetProperty("depthInMeters")[0].ToString());
        /// Console.WriteLine(result.GetProperty("sensorPartnerId").ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("eTag").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>Sensor</c>:
        /// <code>{
        ///   sensorDataModelId: string, # Optional. Id of the associated sensor data model.
        ///   integrationId: string, # Optional. Integration id for the device.
        ///   hardwareId: string, # Optional. Id of the associated hardware.
        ///   deviceId: string, # Optional. Id of the associated device.
        ///   type: string, # Optional. Type of sensor.
        ///   location: {
        ///     latitude: number, # Required. Latitude of the location.
        ///     longitude: number, # Required. Longitude of the location.
        ///   }, # Optional. Location model class.
        ///   port: {
        ///     name: string, # Optional. Name of the port.
        ///     type: string, # Optional. Type of port digital/analog.
        ///   }, # Optional. Schema for storing port values.
        ///   depthInMeters: [number], # Optional. Depth of each sensor measure in meters.
        /// Like sensor moisture at 2m, 4m, 6m.
        ///   sensorPartnerId: string, # Optional. Id of the associated sensor partner.
        ///   id: string, # Optional. Id of the resource.
        ///   status: string, # Optional. Status of the resource.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   eTag: string, # Optional. The ETag value to implement optimistic concurrency.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and
        /// only string, numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetSensor(string sensorPartnerId, string sensorId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(sensorPartnerId, nameof(sensorPartnerId));
            Argument.AssertNotNullOrEmpty(sensorId, nameof(sensorId));

            using var scope = ClientDiagnostics.CreateScope("Sensors.GetSensor");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetSensorRequest(sensorPartnerId, sensorId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a sensor entity. </summary>
        /// <param name="sensorPartnerId"> Id of the sensor partner. </param>
        /// <param name="sensorId"> Id of the sensor resource. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sensorPartnerId"/> or <paramref name="sensorId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="sensorPartnerId"/> or <paramref name="sensorId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteAsync with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new FarmBeatsClient(credential).GetSensorsClient(<2021-07-31-preview>);
        /// 
        /// Response response = await client.DeleteAsync("<sensorPartnerId>", "<sensorId>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> DeleteAsync(string sensorPartnerId, string sensorId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(sensorPartnerId, nameof(sensorPartnerId));
            Argument.AssertNotNullOrEmpty(sensorId, nameof(sensorId));

            using var scope = ClientDiagnostics.CreateScope("Sensors.Delete");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteRequest(sensorPartnerId, sensorId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Deletes a sensor entity. </summary>
        /// <param name="sensorPartnerId"> Id of the sensor partner. </param>
        /// <param name="sensorId"> Id of the sensor resource. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sensorPartnerId"/> or <paramref name="sensorId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="sensorPartnerId"/> or <paramref name="sensorId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call Delete with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new FarmBeatsClient(credential).GetSensorsClient(<2021-07-31-preview>);
        /// 
        /// Response response = client.Delete("<sensorPartnerId>", "<sensorId>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response Delete(string sensorPartnerId, string sensorId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(sensorPartnerId, nameof(sensorPartnerId));
            Argument.AssertNotNullOrEmpty(sensorId, nameof(sensorId));

            using var scope = ClientDiagnostics.CreateScope("Sensors.Delete");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteRequest(sensorPartnerId, sensorId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a sensor connection string. </summary>
        /// <param name="sensorPartnerId"> Id of the sensor partner. </param>
        /// <param name="sensorId"> Id of the sensor resource. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sensorPartnerId"/> or <paramref name="sensorId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="sensorPartnerId"/> or <paramref name="sensorId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetConnectionStringAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new FarmBeatsClient(credential).GetSensorsClient(<2021-07-31-preview>);
        /// 
        /// Response response = await client.GetConnectionStringAsync("<sensorPartnerId>", "<sensorId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("primaryDeviceConnectionString").ToString());
        /// Console.WriteLine(result.GetProperty("secondaryDeviceConnectionString").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>IoTHubDeviceAuthentication</c>:
        /// <code>{
        ///   primaryDeviceConnectionString: string, # Optional. Primary connection string of the ioTHub device.
        ///   secondaryDeviceConnectionString: string, # Optional. Secondary connection string of the ioTHub device.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetConnectionStringAsync(string sensorPartnerId, string sensorId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(sensorPartnerId, nameof(sensorPartnerId));
            Argument.AssertNotNullOrEmpty(sensorId, nameof(sensorId));

            using var scope = ClientDiagnostics.CreateScope("Sensors.GetConnectionString");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetConnectionStringRequest(sensorPartnerId, sensorId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Gets a sensor connection string. </summary>
        /// <param name="sensorPartnerId"> Id of the sensor partner. </param>
        /// <param name="sensorId"> Id of the sensor resource. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sensorPartnerId"/> or <paramref name="sensorId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="sensorPartnerId"/> or <paramref name="sensorId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetConnectionString with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new FarmBeatsClient(credential).GetSensorsClient(<2021-07-31-preview>);
        /// 
        /// Response response = client.GetConnectionString("<sensorPartnerId>", "<sensorId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("primaryDeviceConnectionString").ToString());
        /// Console.WriteLine(result.GetProperty("secondaryDeviceConnectionString").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>IoTHubDeviceAuthentication</c>:
        /// <code>{
        ///   primaryDeviceConnectionString: string, # Optional. Primary connection string of the ioTHub device.
        ///   secondaryDeviceConnectionString: string, # Optional. Secondary connection string of the ioTHub device.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetConnectionString(string sensorPartnerId, string sensorId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(sensorPartnerId, nameof(sensorPartnerId));
            Argument.AssertNotNullOrEmpty(sensorId, nameof(sensorId));

            using var scope = ClientDiagnostics.CreateScope("Sensors.GetConnectionString");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetConnectionStringRequest(sensorPartnerId, sensorId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Renews a sensor connection string. </summary>
        /// <param name="sensorPartnerId"> Id of the sensor partner. </param>
        /// <param name="sensorId"> Id of the sensor resource. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sensorPartnerId"/>, <paramref name="sensorId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="sensorPartnerId"/> or <paramref name="sensorId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call RenewConnectionStringAsync with required parameters and request content and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new FarmBeatsClient(credential).GetSensorsClient(<2021-07-31-preview>);
        /// 
        /// var data = new {
        ///     connectionStringType = "Primary",
        /// };
        /// 
        /// Response response = await client.RenewConnectionStringAsync("<sensorPartnerId>", "<sensorId>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("primaryDeviceConnectionString").ToString());
        /// Console.WriteLine(result.GetProperty("secondaryDeviceConnectionString").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>SensorRenewConnectionStringModel</c>:
        /// <code>{
        ///   connectionStringType: &quot;Primary&quot; | &quot;Secondary&quot; | &quot;Both&quot;, # Required. Specifies the type of connection string key to be renewed valid values - Primary/Secondary/Both.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>IoTHubDeviceAuthentication</c>:
        /// <code>{
        ///   primaryDeviceConnectionString: string, # Optional. Primary connection string of the ioTHub device.
        ///   secondaryDeviceConnectionString: string, # Optional. Secondary connection string of the ioTHub device.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> RenewConnectionStringAsync(string sensorPartnerId, string sensorId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(sensorPartnerId, nameof(sensorPartnerId));
            Argument.AssertNotNullOrEmpty(sensorId, nameof(sensorId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("Sensors.RenewConnectionString");
            scope.Start();
            try
            {
                using HttpMessage message = CreateRenewConnectionStringRequest(sensorPartnerId, sensorId, content, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Renews a sensor connection string. </summary>
        /// <param name="sensorPartnerId"> Id of the sensor partner. </param>
        /// <param name="sensorId"> Id of the sensor resource. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sensorPartnerId"/>, <paramref name="sensorId"/> or <paramref name="content"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="sensorPartnerId"/> or <paramref name="sensorId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call RenewConnectionString with required parameters and request content and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new FarmBeatsClient(credential).GetSensorsClient(<2021-07-31-preview>);
        /// 
        /// var data = new {
        ///     connectionStringType = "Primary",
        /// };
        /// 
        /// Response response = client.RenewConnectionString("<sensorPartnerId>", "<sensorId>", RequestContent.Create(data));
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("primaryDeviceConnectionString").ToString());
        /// Console.WriteLine(result.GetProperty("secondaryDeviceConnectionString").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>SensorRenewConnectionStringModel</c>:
        /// <code>{
        ///   connectionStringType: &quot;Primary&quot; | &quot;Secondary&quot; | &quot;Both&quot;, # Required. Specifies the type of connection string key to be renewed valid values - Primary/Secondary/Both.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>IoTHubDeviceAuthentication</c>:
        /// <code>{
        ///   primaryDeviceConnectionString: string, # Optional. Primary connection string of the ioTHub device.
        ///   secondaryDeviceConnectionString: string, # Optional. Secondary connection string of the ioTHub device.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response RenewConnectionString(string sensorPartnerId, string sensorId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(sensorPartnerId, nameof(sensorPartnerId));
            Argument.AssertNotNullOrEmpty(sensorId, nameof(sensorId));
            Argument.AssertNotNull(content, nameof(content));

            using var scope = ClientDiagnostics.CreateScope("Sensors.RenewConnectionString");
            scope.Start();
            try
            {
                using HttpMessage message = CreateRenewConnectionStringRequest(sensorPartnerId, sensorId, content, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a paginated list of sensor resources. </summary>
        /// <param name="sensorPartnerId"> Id of the associated sensor partner. </param>
        /// <param name="sensorDataModelIds"> Id&apos;s of the sensor data models. </param>
        /// <param name="sensorMappingIds"> Ids of the sensor mappings. </param>
        /// <param name="deviceIds"> Id&apos;s of the devices. </param>
        /// <param name="ids"> Ids of the resource. </param>
        /// <param name="names"> Names of the resource. </param>
        /// <param name="propertyFilters">
        /// Filters on key-value pairs within the Properties object.
        /// eg. &quot;{testKey} eq {testValue}&quot;.
        /// </param>
        /// <param name="statuses"> Statuses of the resource. </param>
        /// <param name="minCreatedDateTime"> Minimum creation date of resource (inclusive). </param>
        /// <param name="maxCreatedDateTime"> Maximum creation date of resource (inclusive). </param>
        /// <param name="minLastModifiedDateTime"> Minimum last modified date of resource (inclusive). </param>
        /// <param name="maxLastModifiedDateTime"> Maximum last modified date of resource (inclusive). </param>
        /// <param name="maxPageSize">
        /// Maximum number of items needed (inclusive).
        /// Minimum = 10, Maximum = 1000, Default value = 50.
        /// </param>
        /// <param name="skipToken"> Skip token for getting next set of results. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sensorPartnerId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="sensorPartnerId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetSensorsAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new FarmBeatsClient(credential).GetSensorsClient(<2021-07-31-preview>);
        /// 
        /// await foreach (var data in client.GetSensorsAsync("<sensorPartnerId>"))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.ToString());
        /// }
        /// ]]></code>
        /// This sample shows how to call GetSensorsAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new FarmBeatsClient(credential).GetSensorsClient(<2021-07-31-preview>);
        /// 
        /// await foreach (var data in client.GetSensorsAsync("<sensorPartnerId>", new String[]{"<sensorDataModelIds>"}, new String[]{"<sensorMappingIds>"}, new String[]{"<deviceIds>"}, new String[]{"<ids>"}, new String[]{"<names>"}, new String[]{"<propertyFilters>"}, new String[]{"<statuses>"}, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 1234, "<skipToken>"))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.GetProperty("sensorDataModelId").ToString());
        ///     Console.WriteLine(result.GetProperty("integrationId").ToString());
        ///     Console.WriteLine(result.GetProperty("hardwareId").ToString());
        ///     Console.WriteLine(result.GetProperty("deviceId").ToString());
        ///     Console.WriteLine(result.GetProperty("type").ToString());
        ///     Console.WriteLine(result.GetProperty("location").GetProperty("latitude").ToString());
        ///     Console.WriteLine(result.GetProperty("location").GetProperty("longitude").ToString());
        ///     Console.WriteLine(result.GetProperty("port").GetProperty("name").ToString());
        ///     Console.WriteLine(result.GetProperty("port").GetProperty("type").ToString());
        ///     Console.WriteLine(result.GetProperty("depthInMeters")[0].ToString());
        ///     Console.WriteLine(result.GetProperty("sensorPartnerId").ToString());
        ///     Console.WriteLine(result.GetProperty("id").ToString());
        ///     Console.WriteLine(result.GetProperty("status").ToString());
        ///     Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("eTag").ToString());
        ///     Console.WriteLine(result.GetProperty("name").ToString());
        ///     Console.WriteLine(result.GetProperty("description").ToString());
        ///     Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
        /// }
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for one item in the pageable response.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>SensorListResponseValue</c>:
        /// <code>{
        ///   sensorDataModelId: string, # Optional. Id of the associated sensor data model.
        ///   integrationId: string, # Optional. Integration id for the device.
        ///   hardwareId: string, # Optional. Id of the associated hardware.
        ///   deviceId: string, # Optional. Id of the associated device.
        ///   type: string, # Optional. Type of sensor.
        ///   location: {
        ///     latitude: number, # Required. Latitude of the location.
        ///     longitude: number, # Required. Longitude of the location.
        ///   }, # Optional. Location model class.
        ///   port: {
        ///     name: string, # Optional. Name of the port.
        ///     type: string, # Optional. Type of port digital/analog.
        ///   }, # Optional. Schema for storing port values.
        ///   depthInMeters: [number], # Optional. Depth of each sensor measure in meters.
        /// Like sensor moisture at 2m, 4m, 6m.
        ///   sensorPartnerId: string, # Optional. Id of the associated sensor partner.
        ///   id: string, # Optional. Id of the resource.
        ///   status: string, # Optional. Status of the resource.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   eTag: string, # Optional. The ETag value to implement optimistic concurrency.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and
        /// only string, numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual AsyncPageable<BinaryData> GetSensorsAsync(string sensorPartnerId, IEnumerable<string> sensorDataModelIds = null, IEnumerable<string> sensorMappingIds = null, IEnumerable<string> deviceIds = null, IEnumerable<string> ids = null, IEnumerable<string> names = null, IEnumerable<string> propertyFilters = null, IEnumerable<string> statuses = null, DateTimeOffset? minCreatedDateTime = null, DateTimeOffset? maxCreatedDateTime = null, DateTimeOffset? minLastModifiedDateTime = null, DateTimeOffset? maxLastModifiedDateTime = null, int? maxPageSize = null, string skipToken = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(sensorPartnerId, nameof(sensorPartnerId));

            return GetSensorsImplementationAsync("Sensors.GetSensors", sensorPartnerId, sensorDataModelIds, sensorMappingIds, deviceIds, ids, names, propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken, context);
        }

        private AsyncPageable<BinaryData> GetSensorsImplementationAsync(string diagnosticsScopeName, string sensorPartnerId, IEnumerable<string> sensorDataModelIds, IEnumerable<string> sensorMappingIds, IEnumerable<string> deviceIds, IEnumerable<string> ids, IEnumerable<string> names, IEnumerable<string> propertyFilters, IEnumerable<string> statuses, DateTimeOffset? minCreatedDateTime, DateTimeOffset? maxCreatedDateTime, DateTimeOffset? minLastModifiedDateTime, DateTimeOffset? maxLastModifiedDateTime, int? maxPageSize, string skipToken, RequestContext context)
        {
            return PageableHelpers.CreateAsyncPageable(CreateEnumerableAsync, ClientDiagnostics, diagnosticsScopeName);
            async IAsyncEnumerable<Page<BinaryData>> CreateEnumerableAsync(string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken = default)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetSensorsRequest(sensorPartnerId, sensorDataModelIds, sensorMappingIds, deviceIds, ids, names, propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken, context)
                        : CreateGetSensorsNextPageRequest(nextLink, sensorPartnerId, sensorDataModelIds, sensorMappingIds, deviceIds, ids, names, propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken, context);
                    var page = await LowLevelPageableHelpers.ProcessMessageAsync(_pipeline, message, context, "value", "nextLink", cancellationToken).ConfigureAwait(false);
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Returns a paginated list of sensor resources. </summary>
        /// <param name="sensorPartnerId"> Id of the associated sensor partner. </param>
        /// <param name="sensorDataModelIds"> Id&apos;s of the sensor data models. </param>
        /// <param name="sensorMappingIds"> Ids of the sensor mappings. </param>
        /// <param name="deviceIds"> Id&apos;s of the devices. </param>
        /// <param name="ids"> Ids of the resource. </param>
        /// <param name="names"> Names of the resource. </param>
        /// <param name="propertyFilters">
        /// Filters on key-value pairs within the Properties object.
        /// eg. &quot;{testKey} eq {testValue}&quot;.
        /// </param>
        /// <param name="statuses"> Statuses of the resource. </param>
        /// <param name="minCreatedDateTime"> Minimum creation date of resource (inclusive). </param>
        /// <param name="maxCreatedDateTime"> Maximum creation date of resource (inclusive). </param>
        /// <param name="minLastModifiedDateTime"> Minimum last modified date of resource (inclusive). </param>
        /// <param name="maxLastModifiedDateTime"> Maximum last modified date of resource (inclusive). </param>
        /// <param name="maxPageSize">
        /// Maximum number of items needed (inclusive).
        /// Minimum = 10, Maximum = 1000, Default value = 50.
        /// </param>
        /// <param name="skipToken"> Skip token for getting next set of results. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="sensorPartnerId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="sensorPartnerId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetSensors with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new FarmBeatsClient(credential).GetSensorsClient(<2021-07-31-preview>);
        /// 
        /// foreach (var data in client.GetSensors("<sensorPartnerId>"))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.ToString());
        /// }
        /// ]]></code>
        /// This sample shows how to call GetSensors with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var client = new FarmBeatsClient(credential).GetSensorsClient(<2021-07-31-preview>);
        /// 
        /// foreach (var data in client.GetSensors("<sensorPartnerId>", new String[]{"<sensorDataModelIds>"}, new String[]{"<sensorMappingIds>"}, new String[]{"<deviceIds>"}, new String[]{"<ids>"}, new String[]{"<names>"}, new String[]{"<propertyFilters>"}, new String[]{"<statuses>"}, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 1234, "<skipToken>"))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.GetProperty("sensorDataModelId").ToString());
        ///     Console.WriteLine(result.GetProperty("integrationId").ToString());
        ///     Console.WriteLine(result.GetProperty("hardwareId").ToString());
        ///     Console.WriteLine(result.GetProperty("deviceId").ToString());
        ///     Console.WriteLine(result.GetProperty("type").ToString());
        ///     Console.WriteLine(result.GetProperty("location").GetProperty("latitude").ToString());
        ///     Console.WriteLine(result.GetProperty("location").GetProperty("longitude").ToString());
        ///     Console.WriteLine(result.GetProperty("port").GetProperty("name").ToString());
        ///     Console.WriteLine(result.GetProperty("port").GetProperty("type").ToString());
        ///     Console.WriteLine(result.GetProperty("depthInMeters")[0].ToString());
        ///     Console.WriteLine(result.GetProperty("sensorPartnerId").ToString());
        ///     Console.WriteLine(result.GetProperty("id").ToString());
        ///     Console.WriteLine(result.GetProperty("status").ToString());
        ///     Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("eTag").ToString());
        ///     Console.WriteLine(result.GetProperty("name").ToString());
        ///     Console.WriteLine(result.GetProperty("description").ToString());
        ///     Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
        /// }
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for one item in the pageable response.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>SensorListResponseValue</c>:
        /// <code>{
        ///   sensorDataModelId: string, # Optional. Id of the associated sensor data model.
        ///   integrationId: string, # Optional. Integration id for the device.
        ///   hardwareId: string, # Optional. Id of the associated hardware.
        ///   deviceId: string, # Optional. Id of the associated device.
        ///   type: string, # Optional. Type of sensor.
        ///   location: {
        ///     latitude: number, # Required. Latitude of the location.
        ///     longitude: number, # Required. Longitude of the location.
        ///   }, # Optional. Location model class.
        ///   port: {
        ///     name: string, # Optional. Name of the port.
        ///     type: string, # Optional. Type of port digital/analog.
        ///   }, # Optional. Schema for storing port values.
        ///   depthInMeters: [number], # Optional. Depth of each sensor measure in meters.
        /// Like sensor moisture at 2m, 4m, 6m.
        ///   sensorPartnerId: string, # Optional. Id of the associated sensor partner.
        ///   id: string, # Optional. Id of the resource.
        ///   status: string, # Optional. Status of the resource.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   eTag: string, # Optional. The ETag value to implement optimistic concurrency.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and
        /// only string, numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Pageable<BinaryData> GetSensors(string sensorPartnerId, IEnumerable<string> sensorDataModelIds = null, IEnumerable<string> sensorMappingIds = null, IEnumerable<string> deviceIds = null, IEnumerable<string> ids = null, IEnumerable<string> names = null, IEnumerable<string> propertyFilters = null, IEnumerable<string> statuses = null, DateTimeOffset? minCreatedDateTime = null, DateTimeOffset? maxCreatedDateTime = null, DateTimeOffset? minLastModifiedDateTime = null, DateTimeOffset? maxLastModifiedDateTime = null, int? maxPageSize = null, string skipToken = null, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(sensorPartnerId, nameof(sensorPartnerId));

            return GetSensorsImplementation("Sensors.GetSensors", sensorPartnerId, sensorDataModelIds, sensorMappingIds, deviceIds, ids, names, propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken, context);
        }

        private Pageable<BinaryData> GetSensorsImplementation(string diagnosticsScopeName, string sensorPartnerId, IEnumerable<string> sensorDataModelIds, IEnumerable<string> sensorMappingIds, IEnumerable<string> deviceIds, IEnumerable<string> ids, IEnumerable<string> names, IEnumerable<string> propertyFilters, IEnumerable<string> statuses, DateTimeOffset? minCreatedDateTime, DateTimeOffset? maxCreatedDateTime, DateTimeOffset? minLastModifiedDateTime, DateTimeOffset? maxLastModifiedDateTime, int? maxPageSize, string skipToken, RequestContext context)
        {
            return PageableHelpers.CreatePageable(CreateEnumerable, ClientDiagnostics, diagnosticsScopeName);
            IEnumerable<Page<BinaryData>> CreateEnumerable(string nextLink, int? pageSizeHint)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetSensorsRequest(sensorPartnerId, sensorDataModelIds, sensorMappingIds, deviceIds, ids, names, propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken, context)
                        : CreateGetSensorsNextPageRequest(nextLink, sensorPartnerId, sensorDataModelIds, sensorMappingIds, deviceIds, ids, names, propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken, context);
                    var page = LowLevelPageableHelpers.ProcessMessage(_pipeline, message, context, "value", "nextLink");
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        internal HttpMessage CreateGetSensorsRequest(string sensorPartnerId, IEnumerable<string> sensorDataModelIds, IEnumerable<string> sensorMappingIds, IEnumerable<string> deviceIds, IEnumerable<string> ids, IEnumerable<string> names, IEnumerable<string> propertyFilters, IEnumerable<string> statuses, DateTimeOffset? minCreatedDateTime, DateTimeOffset? maxCreatedDateTime, DateTimeOffset? minLastModifiedDateTime, DateTimeOffset? maxLastModifiedDateTime, int? maxPageSize, string skipToken, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/sensor-partners/", false);
            uri.AppendPath(sensorPartnerId, true);
            uri.AppendPath("/sensors", false);
            if (sensorDataModelIds != null)
            {
                foreach (var param in sensorDataModelIds)
                {
                    uri.AppendQuery("sensorDataModelIds", param, true);
                }
            }
            if (sensorMappingIds != null)
            {
                foreach (var param in sensorMappingIds)
                {
                    uri.AppendQuery("sensorMappingIds", param, true);
                }
            }
            if (deviceIds != null)
            {
                foreach (var param in deviceIds)
                {
                    uri.AppendQuery("deviceIds", param, true);
                }
            }
            if (ids != null)
            {
                foreach (var param in ids)
                {
                    uri.AppendQuery("ids", param, true);
                }
            }
            if (names != null)
            {
                foreach (var param in names)
                {
                    uri.AppendQuery("names", param, true);
                }
            }
            if (propertyFilters != null)
            {
                foreach (var param in propertyFilters)
                {
                    uri.AppendQuery("propertyFilters", param, true);
                }
            }
            if (statuses != null)
            {
                foreach (var param in statuses)
                {
                    uri.AppendQuery("statuses", param, true);
                }
            }
            if (minCreatedDateTime != null)
            {
                uri.AppendQuery("minCreatedDateTime", minCreatedDateTime.Value, "O", true);
            }
            if (maxCreatedDateTime != null)
            {
                uri.AppendQuery("maxCreatedDateTime", maxCreatedDateTime.Value, "O", true);
            }
            if (minLastModifiedDateTime != null)
            {
                uri.AppendQuery("minLastModifiedDateTime", minLastModifiedDateTime.Value, "O", true);
            }
            if (maxLastModifiedDateTime != null)
            {
                uri.AppendQuery("maxLastModifiedDateTime", maxLastModifiedDateTime.Value, "O", true);
            }
            if (maxPageSize != null)
            {
                uri.AppendQuery("$maxPageSize", maxPageSize.Value, true);
            }
            if (skipToken != null)
            {
                uri.AppendQuery("$skipToken", skipToken, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCreateOrUpdateRequest(string sensorPartnerId, string sensorId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200201);
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/sensor-partners/", false);
            uri.AppendPath(sensorPartnerId, true);
            uri.AppendPath("/sensors/", false);
            uri.AppendPath(sensorId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/merge-patch+json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetSensorRequest(string sensorPartnerId, string sensorId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/sensor-partners/", false);
            uri.AppendPath(sensorPartnerId, true);
            uri.AppendPath("/sensors/", false);
            uri.AppendPath(sensorId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateDeleteRequest(string sensorPartnerId, string sensorId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier204);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/sensor-partners/", false);
            uri.AppendPath(sensorPartnerId, true);
            uri.AppendPath("/sensors/", false);
            uri.AppendPath(sensorId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateGetConnectionStringRequest(string sensorPartnerId, string sensorId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/sensor-partners/", false);
            uri.AppendPath(sensorPartnerId, true);
            uri.AppendPath("/sensors/", false);
            uri.AppendPath(sensorId, true);
            uri.AppendPath("/connection-strings", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateRenewConnectionStringRequest(string sensorPartnerId, string sensorId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/sensor-partners/", false);
            uri.AppendPath(sensorPartnerId, true);
            uri.AppendPath("/sensors/", false);
            uri.AppendPath(sensorId, true);
            uri.AppendPath("/connection-strings/:renew", false);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetSensorsNextPageRequest(string nextLink, string sensorPartnerId, IEnumerable<string> sensorDataModelIds, IEnumerable<string> sensorMappingIds, IEnumerable<string> deviceIds, IEnumerable<string> ids, IEnumerable<string> names, IEnumerable<string> propertyFilters, IEnumerable<string> statuses, DateTimeOffset? minCreatedDateTime, DateTimeOffset? maxCreatedDateTime, DateTimeOffset? minLastModifiedDateTime, DateTimeOffset? maxLastModifiedDateTime, int? maxPageSize, string skipToken, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier200201;
        private static ResponseClassifier ResponseClassifier200201 => _responseClassifier200201 ??= new StatusCodeClassifier(stackalloc ushort[] { 200, 201 });
        private static ResponseClassifier _responseClassifier204;
        private static ResponseClassifier ResponseClassifier204 => _responseClassifier204 ??= new StatusCodeClassifier(stackalloc ushort[] { 204 });
    }
}
