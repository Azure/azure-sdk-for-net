<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetNutrientAnalysisAsync(String,String,RequestContext)">
<example>
This sample shows how to call GetNutrientAnalysisAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new FarmBeatsClient(credential).GetNutrientAnalysesClient(<2021-07-31-preview>);

Response response = await client.GetNutrientAnalysisAsync("<farmerId>", "<nutrientAnalysisId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("farmerId").ToString());
Console.WriteLine(result.GetProperty("parentId").ToString());
Console.WriteLine(result.GetProperty("parentType").ToString());
Console.WriteLine(result.GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("referenceValueLow").ToString());
Console.WriteLine(result.GetProperty("referenceValueHigh").ToString());
Console.WriteLine(result.GetProperty("classification").ToString());
Console.WriteLine(result.GetProperty("recommendation").ToString());
Console.WriteLine(result.GetProperty("products")[0].GetProperty("rate").ToString());
Console.WriteLine(result.GetProperty("products")[0].GetProperty("instruction").ToString());
Console.WriteLine(result.GetProperty("products")[0].GetProperty("product").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("eTag").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>NutrientAnalysis</c>:
<code>{
  farmerId: string, # Optional. Farmer id for this nutrient analysis.
  parentId: string, # Optional. Parent id for this nutrient analysis.
  parentType: &quot;PlantTissueAnalysis&quot;, # Optional. Parent type for this nutrient analysis.
i.e. PlantTissueAnalysis.
  unit: string, # Optional. Unit for this nutrient analysis.
  value: number, # Optional. Value for this nutrient analysis.
  referenceValueLow: number, # Optional. Reference value low for this nutrient analysis.
  referenceValueHigh: number, # Optional. Reference value high for this nutrient analysis.
  classification: string, # Optional. Classification for this nutrient analysis.
  recommendation: string, # Optional. Recommendation for this nutrient analysis.
  products: [
    {
      rate: string, # Optional. Rate of the product.
      instruction: string, # Optional. Instruction of the resource.
      product: string, # Optional. Product of the resource.
    }
  ], # Optional. Products for this nutrient analysis.
  id: string, # Optional. Unique resource ID.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
  source: string, # Optional. Source of the resource.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string,
numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
}
</code>

</remarks>
    </member>
    <member name="GetNutrientAnalysis(String,String,RequestContext)">
<example>
This sample shows how to call GetNutrientAnalysis with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new FarmBeatsClient(credential).GetNutrientAnalysesClient(<2021-07-31-preview>);

Response response = client.GetNutrientAnalysis("<farmerId>", "<nutrientAnalysisId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("farmerId").ToString());
Console.WriteLine(result.GetProperty("parentId").ToString());
Console.WriteLine(result.GetProperty("parentType").ToString());
Console.WriteLine(result.GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("referenceValueLow").ToString());
Console.WriteLine(result.GetProperty("referenceValueHigh").ToString());
Console.WriteLine(result.GetProperty("classification").ToString());
Console.WriteLine(result.GetProperty("recommendation").ToString());
Console.WriteLine(result.GetProperty("products")[0].GetProperty("rate").ToString());
Console.WriteLine(result.GetProperty("products")[0].GetProperty("instruction").ToString());
Console.WriteLine(result.GetProperty("products")[0].GetProperty("product").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("eTag").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>NutrientAnalysis</c>:
<code>{
  farmerId: string, # Optional. Farmer id for this nutrient analysis.
  parentId: string, # Optional. Parent id for this nutrient analysis.
  parentType: &quot;PlantTissueAnalysis&quot;, # Optional. Parent type for this nutrient analysis.
i.e. PlantTissueAnalysis.
  unit: string, # Optional. Unit for this nutrient analysis.
  value: number, # Optional. Value for this nutrient analysis.
  referenceValueLow: number, # Optional. Reference value low for this nutrient analysis.
  referenceValueHigh: number, # Optional. Reference value high for this nutrient analysis.
  classification: string, # Optional. Classification for this nutrient analysis.
  recommendation: string, # Optional. Recommendation for this nutrient analysis.
  products: [
    {
      rate: string, # Optional. Rate of the product.
      instruction: string, # Optional. Instruction of the resource.
      product: string, # Optional. Product of the resource.
    }
  ], # Optional. Products for this nutrient analysis.
  id: string, # Optional. Unique resource ID.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
  source: string, # Optional. Source of the resource.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string,
numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
}
</code>

</remarks>
    </member>
    <member name="CreateOrUpdateAsync(String,String,RequestContent,RequestContext)">
<example>
This sample shows how to call CreateOrUpdateAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new FarmBeatsClient(credential).GetNutrientAnalysesClient(<2021-07-31-preview>);

var data = new {};

Response response = await client.CreateOrUpdateAsync("<farmerId>", "<nutrientAnalysisId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateOrUpdateAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new FarmBeatsClient(credential).GetNutrientAnalysesClient(<2021-07-31-preview>);

var data = new {
    parentId = "<parentId>",
    parentType = "PlantTissueAnalysis",
    unit = "<unit>",
    value = 123.45d,
    referenceValueLow = 123.45d,
    referenceValueHigh = 123.45d,
    classification = "<classification>",
    recommendation = "<recommendation>",
    products = new[] {
        new {
            rate = "<rate>",
            instruction = "<instruction>",
            product = "<product>",
        }
    },
    status = "<status>",
    source = "<source>",
    name = "<name>",
    description = "<description>",
    properties = new {
        key = new {},
    },
};

Response response = await client.CreateOrUpdateAsync("<farmerId>", "<nutrientAnalysisId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("farmerId").ToString());
Console.WriteLine(result.GetProperty("parentId").ToString());
Console.WriteLine(result.GetProperty("parentType").ToString());
Console.WriteLine(result.GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("referenceValueLow").ToString());
Console.WriteLine(result.GetProperty("referenceValueHigh").ToString());
Console.WriteLine(result.GetProperty("classification").ToString());
Console.WriteLine(result.GetProperty("recommendation").ToString());
Console.WriteLine(result.GetProperty("products")[0].GetProperty("rate").ToString());
Console.WriteLine(result.GetProperty("products")[0].GetProperty("instruction").ToString());
Console.WriteLine(result.GetProperty("products")[0].GetProperty("product").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("eTag").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>NutrientAnalysis</c>:
<code>{
  farmerId: string, # Optional. Farmer id for this nutrient analysis.
  parentId: string, # Optional. Parent id for this nutrient analysis.
  parentType: &quot;PlantTissueAnalysis&quot;, # Optional. Parent type for this nutrient analysis.
i.e. PlantTissueAnalysis.
  unit: string, # Optional. Unit for this nutrient analysis.
  value: number, # Optional. Value for this nutrient analysis.
  referenceValueLow: number, # Optional. Reference value low for this nutrient analysis.
  referenceValueHigh: number, # Optional. Reference value high for this nutrient analysis.
  classification: string, # Optional. Classification for this nutrient analysis.
  recommendation: string, # Optional. Recommendation for this nutrient analysis.
  products: [
    {
      rate: string, # Optional. Rate of the product.
      instruction: string, # Optional. Instruction of the resource.
      product: string, # Optional. Product of the resource.
    }
  ], # Optional. Products for this nutrient analysis.
  id: string, # Optional. Unique resource ID.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
  source: string, # Optional. Source of the resource.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string,
numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
}
</code>

Response Body:

Schema for <c>NutrientAnalysis</c>:
<code>{
  farmerId: string, # Optional. Farmer id for this nutrient analysis.
  parentId: string, # Optional. Parent id for this nutrient analysis.
  parentType: &quot;PlantTissueAnalysis&quot;, # Optional. Parent type for this nutrient analysis.
i.e. PlantTissueAnalysis.
  unit: string, # Optional. Unit for this nutrient analysis.
  value: number, # Optional. Value for this nutrient analysis.
  referenceValueLow: number, # Optional. Reference value low for this nutrient analysis.
  referenceValueHigh: number, # Optional. Reference value high for this nutrient analysis.
  classification: string, # Optional. Classification for this nutrient analysis.
  recommendation: string, # Optional. Recommendation for this nutrient analysis.
  products: [
    {
      rate: string, # Optional. Rate of the product.
      instruction: string, # Optional. Instruction of the resource.
      product: string, # Optional. Product of the resource.
    }
  ], # Optional. Products for this nutrient analysis.
  id: string, # Optional. Unique resource ID.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
  source: string, # Optional. Source of the resource.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string,
numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
}
</code>

</remarks>
    </member>
    <member name="CreateOrUpdate(String,String,RequestContent,RequestContext)">
<example>
This sample shows how to call CreateOrUpdate with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new FarmBeatsClient(credential).GetNutrientAnalysesClient(<2021-07-31-preview>);

var data = new {};

Response response = client.CreateOrUpdate("<farmerId>", "<nutrientAnalysisId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateOrUpdate with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new FarmBeatsClient(credential).GetNutrientAnalysesClient(<2021-07-31-preview>);

var data = new {
    parentId = "<parentId>",
    parentType = "PlantTissueAnalysis",
    unit = "<unit>",
    value = 123.45d,
    referenceValueLow = 123.45d,
    referenceValueHigh = 123.45d,
    classification = "<classification>",
    recommendation = "<recommendation>",
    products = new[] {
        new {
            rate = "<rate>",
            instruction = "<instruction>",
            product = "<product>",
        }
    },
    status = "<status>",
    source = "<source>",
    name = "<name>",
    description = "<description>",
    properties = new {
        key = new {},
    },
};

Response response = client.CreateOrUpdate("<farmerId>", "<nutrientAnalysisId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("farmerId").ToString());
Console.WriteLine(result.GetProperty("parentId").ToString());
Console.WriteLine(result.GetProperty("parentType").ToString());
Console.WriteLine(result.GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("referenceValueLow").ToString());
Console.WriteLine(result.GetProperty("referenceValueHigh").ToString());
Console.WriteLine(result.GetProperty("classification").ToString());
Console.WriteLine(result.GetProperty("recommendation").ToString());
Console.WriteLine(result.GetProperty("products")[0].GetProperty("rate").ToString());
Console.WriteLine(result.GetProperty("products")[0].GetProperty("instruction").ToString());
Console.WriteLine(result.GetProperty("products")[0].GetProperty("product").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("eTag").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>NutrientAnalysis</c>:
<code>{
  farmerId: string, # Optional. Farmer id for this nutrient analysis.
  parentId: string, # Optional. Parent id for this nutrient analysis.
  parentType: &quot;PlantTissueAnalysis&quot;, # Optional. Parent type for this nutrient analysis.
i.e. PlantTissueAnalysis.
  unit: string, # Optional. Unit for this nutrient analysis.
  value: number, # Optional. Value for this nutrient analysis.
  referenceValueLow: number, # Optional. Reference value low for this nutrient analysis.
  referenceValueHigh: number, # Optional. Reference value high for this nutrient analysis.
  classification: string, # Optional. Classification for this nutrient analysis.
  recommendation: string, # Optional. Recommendation for this nutrient analysis.
  products: [
    {
      rate: string, # Optional. Rate of the product.
      instruction: string, # Optional. Instruction of the resource.
      product: string, # Optional. Product of the resource.
    }
  ], # Optional. Products for this nutrient analysis.
  id: string, # Optional. Unique resource ID.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
  source: string, # Optional. Source of the resource.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string,
numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
}
</code>

Response Body:

Schema for <c>NutrientAnalysis</c>:
<code>{
  farmerId: string, # Optional. Farmer id for this nutrient analysis.
  parentId: string, # Optional. Parent id for this nutrient analysis.
  parentType: &quot;PlantTissueAnalysis&quot;, # Optional. Parent type for this nutrient analysis.
i.e. PlantTissueAnalysis.
  unit: string, # Optional. Unit for this nutrient analysis.
  value: number, # Optional. Value for this nutrient analysis.
  referenceValueLow: number, # Optional. Reference value low for this nutrient analysis.
  referenceValueHigh: number, # Optional. Reference value high for this nutrient analysis.
  classification: string, # Optional. Classification for this nutrient analysis.
  recommendation: string, # Optional. Recommendation for this nutrient analysis.
  products: [
    {
      rate: string, # Optional. Rate of the product.
      instruction: string, # Optional. Instruction of the resource.
      product: string, # Optional. Product of the resource.
    }
  ], # Optional. Products for this nutrient analysis.
  id: string, # Optional. Unique resource ID.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
  source: string, # Optional. Source of the resource.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string,
numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
}
</code>

</remarks>
    </member>
    <member name="DeleteAsync(String,String,RequestContext)">
<example>
This sample shows how to call DeleteAsync with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new FarmBeatsClient(credential).GetNutrientAnalysesClient(<2021-07-31-preview>);

Response response = await client.DeleteAsync("<farmerId>", "<nutrientAnalysisId>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="Delete(String,String,RequestContext)">
<example>
This sample shows how to call Delete with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new FarmBeatsClient(credential).GetNutrientAnalysesClient(<2021-07-31-preview>);

Response response = client.Delete("<farmerId>", "<nutrientAnalysisId>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="GetNutrientAnalysesByFarmerIdAsync(String,String,IEnumerable,IEnumerable,IEnumerable,IEnumerable,IEnumerable,IEnumerable,DateTimeOffset,DateTimeOffset,DateTimeOffset,DateTimeOffset,Int32,String,RequestContext)">
<example>
This sample shows how to call GetNutrientAnalysesByFarmerIdAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new FarmBeatsClient(credential).GetNutrientAnalysesClient(<2021-07-31-preview>);

await foreach (var data in client.GetNutrientAnalysesByFarmerIdAsync("<farmerId>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetNutrientAnalysesByFarmerIdAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new FarmBeatsClient(credential).GetNutrientAnalysesClient(<2021-07-31-preview>);

await foreach (var data in client.GetNutrientAnalysesByFarmerIdAsync("<farmerId>", "<parentType>", new String[]{"<parentIds>"}, new String[]{"<classifications>"}, new String[]{"<ids>"}, new String[]{"<names>"}, new String[]{"<propertyFilters>"}, new String[]{"<statuses>"}, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 1234, "<skipToken>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("farmerId").ToString());
    Console.WriteLine(result.GetProperty("parentId").ToString());
    Console.WriteLine(result.GetProperty("parentType").ToString());
    Console.WriteLine(result.GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("referenceValueLow").ToString());
    Console.WriteLine(result.GetProperty("referenceValueHigh").ToString());
    Console.WriteLine(result.GetProperty("classification").ToString());
    Console.WriteLine(result.GetProperty("recommendation").ToString());
    Console.WriteLine(result.GetProperty("products")[0].GetProperty("rate").ToString());
    Console.WriteLine(result.GetProperty("products")[0].GetProperty("instruction").ToString());
    Console.WriteLine(result.GetProperty("products")[0].GetProperty("product").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("eTag").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
    Console.WriteLine(result.GetProperty("source").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>NutrientAnalysisListResponseValue</c>:
<code>{
  farmerId: string, # Optional. Farmer id for this nutrient analysis.
  parentId: string, # Optional. Parent id for this nutrient analysis.
  parentType: &quot;PlantTissueAnalysis&quot;, # Optional. Parent type for this nutrient analysis.
i.e. PlantTissueAnalysis.
  unit: string, # Optional. Unit for this nutrient analysis.
  value: number, # Optional. Value for this nutrient analysis.
  referenceValueLow: number, # Optional. Reference value low for this nutrient analysis.
  referenceValueHigh: number, # Optional. Reference value high for this nutrient analysis.
  classification: string, # Optional. Classification for this nutrient analysis.
  recommendation: string, # Optional. Recommendation for this nutrient analysis.
  products: [
    {
      rate: string, # Optional. Rate of the product.
      instruction: string, # Optional. Instruction of the resource.
      product: string, # Optional. Product of the resource.
    }
  ], # Optional. Products for this nutrient analysis.
  id: string, # Optional. Unique resource ID.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
  source: string, # Optional. Source of the resource.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string,
numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
}
</code>

</remarks>
    </member>
    <member name="GetNutrientAnalysesByFarmerId(String,String,IEnumerable,IEnumerable,IEnumerable,IEnumerable,IEnumerable,IEnumerable,DateTimeOffset,DateTimeOffset,DateTimeOffset,DateTimeOffset,Int32,String,RequestContext)">
<example>
This sample shows how to call GetNutrientAnalysesByFarmerId with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new FarmBeatsClient(credential).GetNutrientAnalysesClient(<2021-07-31-preview>);

foreach (var data in client.GetNutrientAnalysesByFarmerId("<farmerId>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetNutrientAnalysesByFarmerId with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new FarmBeatsClient(credential).GetNutrientAnalysesClient(<2021-07-31-preview>);

foreach (var data in client.GetNutrientAnalysesByFarmerId("<farmerId>", "<parentType>", new String[]{"<parentIds>"}, new String[]{"<classifications>"}, new String[]{"<ids>"}, new String[]{"<names>"}, new String[]{"<propertyFilters>"}, new String[]{"<statuses>"}, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 1234, "<skipToken>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("farmerId").ToString());
    Console.WriteLine(result.GetProperty("parentId").ToString());
    Console.WriteLine(result.GetProperty("parentType").ToString());
    Console.WriteLine(result.GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("referenceValueLow").ToString());
    Console.WriteLine(result.GetProperty("referenceValueHigh").ToString());
    Console.WriteLine(result.GetProperty("classification").ToString());
    Console.WriteLine(result.GetProperty("recommendation").ToString());
    Console.WriteLine(result.GetProperty("products")[0].GetProperty("rate").ToString());
    Console.WriteLine(result.GetProperty("products")[0].GetProperty("instruction").ToString());
    Console.WriteLine(result.GetProperty("products")[0].GetProperty("product").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("eTag").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
    Console.WriteLine(result.GetProperty("source").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>NutrientAnalysisListResponseValue</c>:
<code>{
  farmerId: string, # Optional. Farmer id for this nutrient analysis.
  parentId: string, # Optional. Parent id for this nutrient analysis.
  parentType: &quot;PlantTissueAnalysis&quot;, # Optional. Parent type for this nutrient analysis.
i.e. PlantTissueAnalysis.
  unit: string, # Optional. Unit for this nutrient analysis.
  value: number, # Optional. Value for this nutrient analysis.
  referenceValueLow: number, # Optional. Reference value low for this nutrient analysis.
  referenceValueHigh: number, # Optional. Reference value high for this nutrient analysis.
  classification: string, # Optional. Classification for this nutrient analysis.
  recommendation: string, # Optional. Recommendation for this nutrient analysis.
  products: [
    {
      rate: string, # Optional. Rate of the product.
      instruction: string, # Optional. Instruction of the resource.
      product: string, # Optional. Product of the resource.
    }
  ], # Optional. Products for this nutrient analysis.
  id: string, # Optional. Unique resource ID.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
  source: string, # Optional. Source of the resource.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string,
numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
}
</code>

</remarks>
    </member>
    <member name="GetNutrientAnalysesAsync(String,IEnumerable,IEnumerable,IEnumerable,IEnumerable,IEnumerable,IEnumerable,DateTimeOffset,DateTimeOffset,DateTimeOffset,DateTimeOffset,Int32,String,RequestContext)">
<example>
This sample shows how to call GetNutrientAnalysesAsync and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new FarmBeatsClient(credential).GetNutrientAnalysesClient(<2021-07-31-preview>);

await foreach (var data in client.GetNutrientAnalysesAsync())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetNutrientAnalysesAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new FarmBeatsClient(credential).GetNutrientAnalysesClient(<2021-07-31-preview>);

await foreach (var data in client.GetNutrientAnalysesAsync("<parentType>", new String[]{"<parentIds>"}, new String[]{"<classifications>"}, new String[]{"<ids>"}, new String[]{"<names>"}, new String[]{"<propertyFilters>"}, new String[]{"<statuses>"}, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 1234, "<skipToken>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("farmerId").ToString());
    Console.WriteLine(result.GetProperty("parentId").ToString());
    Console.WriteLine(result.GetProperty("parentType").ToString());
    Console.WriteLine(result.GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("referenceValueLow").ToString());
    Console.WriteLine(result.GetProperty("referenceValueHigh").ToString());
    Console.WriteLine(result.GetProperty("classification").ToString());
    Console.WriteLine(result.GetProperty("recommendation").ToString());
    Console.WriteLine(result.GetProperty("products")[0].GetProperty("rate").ToString());
    Console.WriteLine(result.GetProperty("products")[0].GetProperty("instruction").ToString());
    Console.WriteLine(result.GetProperty("products")[0].GetProperty("product").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("eTag").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
    Console.WriteLine(result.GetProperty("source").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>NutrientAnalysisListResponseValue</c>:
<code>{
  farmerId: string, # Optional. Farmer id for this nutrient analysis.
  parentId: string, # Optional. Parent id for this nutrient analysis.
  parentType: &quot;PlantTissueAnalysis&quot;, # Optional. Parent type for this nutrient analysis.
i.e. PlantTissueAnalysis.
  unit: string, # Optional. Unit for this nutrient analysis.
  value: number, # Optional. Value for this nutrient analysis.
  referenceValueLow: number, # Optional. Reference value low for this nutrient analysis.
  referenceValueHigh: number, # Optional. Reference value high for this nutrient analysis.
  classification: string, # Optional. Classification for this nutrient analysis.
  recommendation: string, # Optional. Recommendation for this nutrient analysis.
  products: [
    {
      rate: string, # Optional. Rate of the product.
      instruction: string, # Optional. Instruction of the resource.
      product: string, # Optional. Product of the resource.
    }
  ], # Optional. Products for this nutrient analysis.
  id: string, # Optional. Unique resource ID.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
  source: string, # Optional. Source of the resource.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string,
numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
}
</code>

</remarks>
    </member>
    <member name="GetNutrientAnalyses(String,IEnumerable,IEnumerable,IEnumerable,IEnumerable,IEnumerable,IEnumerable,DateTimeOffset,DateTimeOffset,DateTimeOffset,DateTimeOffset,Int32,String,RequestContext)">
<example>
This sample shows how to call GetNutrientAnalyses and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new FarmBeatsClient(credential).GetNutrientAnalysesClient(<2021-07-31-preview>);

foreach (var data in client.GetNutrientAnalyses())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetNutrientAnalyses with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new FarmBeatsClient(credential).GetNutrientAnalysesClient(<2021-07-31-preview>);

foreach (var data in client.GetNutrientAnalyses("<parentType>", new String[]{"<parentIds>"}, new String[]{"<classifications>"}, new String[]{"<ids>"}, new String[]{"<names>"}, new String[]{"<propertyFilters>"}, new String[]{"<statuses>"}, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 1234, "<skipToken>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("farmerId").ToString());
    Console.WriteLine(result.GetProperty("parentId").ToString());
    Console.WriteLine(result.GetProperty("parentType").ToString());
    Console.WriteLine(result.GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("referenceValueLow").ToString());
    Console.WriteLine(result.GetProperty("referenceValueHigh").ToString());
    Console.WriteLine(result.GetProperty("classification").ToString());
    Console.WriteLine(result.GetProperty("recommendation").ToString());
    Console.WriteLine(result.GetProperty("products")[0].GetProperty("rate").ToString());
    Console.WriteLine(result.GetProperty("products")[0].GetProperty("instruction").ToString());
    Console.WriteLine(result.GetProperty("products")[0].GetProperty("product").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("eTag").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
    Console.WriteLine(result.GetProperty("source").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>NutrientAnalysisListResponseValue</c>:
<code>{
  farmerId: string, # Optional. Farmer id for this nutrient analysis.
  parentId: string, # Optional. Parent id for this nutrient analysis.
  parentType: &quot;PlantTissueAnalysis&quot;, # Optional. Parent type for this nutrient analysis.
i.e. PlantTissueAnalysis.
  unit: string, # Optional. Unit for this nutrient analysis.
  value: number, # Optional. Value for this nutrient analysis.
  referenceValueLow: number, # Optional. Reference value low for this nutrient analysis.
  referenceValueHigh: number, # Optional. Reference value high for this nutrient analysis.
  classification: string, # Optional. Classification for this nutrient analysis.
  recommendation: string, # Optional. Recommendation for this nutrient analysis.
  products: [
    {
      rate: string, # Optional. Rate of the product.
      instruction: string, # Optional. Instruction of the resource.
      product: string, # Optional. Product of the resource.
    }
  ], # Optional. Products for this nutrient analysis.
  id: string, # Optional. Unique resource ID.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
  source: string, # Optional. Source of the resource.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string,
numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
}
</code>

</remarks>
    </member>
  </members>
</doc>