<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetCascadeDeleteJobDetailsAsync(String,RequestContext)">
<example>
This sample shows how to call GetCascadeDeleteJobDetailsAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new BoundariesClient(endpoint, credential);

Response response = await client.GetCascadeDeleteJobDetailsAsync("<jobId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("farmerId").ToString());
Console.WriteLine(result.GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("resourceType").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
Console.WriteLine(result.GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>CascadeDeleteJob</c>:
<code>{
  farmerId: string, # Required. Farmer ID.
  resourceId: string, # Required. The id of the resource.
  resourceType: string, # Required. The type of the resource.
  id: string, # Optional. Unique job id.
  status: string, # Optional. Status of the job.
Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
  durationInSeconds: number, # Optional. Duration of the job in seconds.
  message: string, # Optional. Status message to capture more details of the job.
  createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
}
</code>

</remarks>
    </member>
    <member name="GetCascadeDeleteJobDetails(String,RequestContext)">
<example>
This sample shows how to call GetCascadeDeleteJobDetails with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new BoundariesClient(endpoint, credential);

Response response = client.GetCascadeDeleteJobDetails("<jobId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("farmerId").ToString());
Console.WriteLine(result.GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("resourceType").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
Console.WriteLine(result.GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>CascadeDeleteJob</c>:
<code>{
  farmerId: string, # Required. Farmer ID.
  resourceId: string, # Required. The id of the resource.
  resourceType: string, # Required. The type of the resource.
  id: string, # Optional. Unique job id.
  status: string, # Optional. Status of the job.
Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
  durationInSeconds: number, # Optional. Duration of the job in seconds.
  message: string, # Optional. Status message to capture more details of the job.
  createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
}
</code>

</remarks>
    </member>
    <member name="GetBoundaryAsync(String,String,RequestContext)">
<example>
This sample shows how to call GetBoundaryAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new BoundariesClient(endpoint, credential);

Response response = await client.GetBoundaryAsync("<farmerId>", "<boundaryId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("farmerId").ToString());
Console.WriteLine(result.GetProperty("parentId").ToString());
Console.WriteLine(result.GetProperty("geometry").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("isPrimary").ToString());
Console.WriteLine(result.GetProperty("acreage").ToString());
Console.WriteLine(result.GetProperty("parentType").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("eTag").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Boundary</c>:
<code>{
  farmerId: string, # Optional. Farmer ID.
  parentId: string, # Optional. ID of the parent(field or seasonalField) it belongs to.
  geometry: {
    type: &quot;Point&quot; | &quot;Polygon&quot; | &quot;MultiPolygon&quot;, # Required. GeoJSON object type.
  }, # Optional. GeoJSON abstract class.
  isPrimary: boolean, # Optional. Is the boundary primary.
  acreage: number, # Optional. Boundary area in acres.
  parentType: string, # Optional. Type of the parent it belongs to.
  id: string, # Optional. Unique resource ID.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
}
</code>

</remarks>
    </member>
    <member name="GetBoundary(String,String,RequestContext)">
<example>
This sample shows how to call GetBoundary with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new BoundariesClient(endpoint, credential);

Response response = client.GetBoundary("<farmerId>", "<boundaryId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("farmerId").ToString());
Console.WriteLine(result.GetProperty("parentId").ToString());
Console.WriteLine(result.GetProperty("geometry").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("isPrimary").ToString());
Console.WriteLine(result.GetProperty("acreage").ToString());
Console.WriteLine(result.GetProperty("parentType").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("eTag").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Boundary</c>:
<code>{
  farmerId: string, # Optional. Farmer ID.
  parentId: string, # Optional. ID of the parent(field or seasonalField) it belongs to.
  geometry: {
    type: &quot;Point&quot; | &quot;Polygon&quot; | &quot;MultiPolygon&quot;, # Required. GeoJSON object type.
  }, # Optional. GeoJSON abstract class.
  isPrimary: boolean, # Optional. Is the boundary primary.
  acreage: number, # Optional. Boundary area in acres.
  parentType: string, # Optional. Type of the parent it belongs to.
  id: string, # Optional. Unique resource ID.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
}
</code>

</remarks>
    </member>
    <member name="CreateOrUpdateAsync(String,String,RequestContent,RequestContext)">
<example>
This sample shows how to call CreateOrUpdateAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new BoundariesClient(endpoint, credential);

var data = new {};

Response response = await client.CreateOrUpdateAsync("<farmerId>", "<boundaryId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateOrUpdateAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new BoundariesClient(endpoint, credential);

var data = new {
    parentId = "<parentId>",
    geometry = new {
        type = "MultiPolygon",
    },
    isPrimary = true,
    status = "<status>",
    name = "<name>",
    description = "<description>",
    properties = new {
        key = new {},
    },
};

Response response = await client.CreateOrUpdateAsync("<farmerId>", "<boundaryId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("farmerId").ToString());
Console.WriteLine(result.GetProperty("parentId").ToString());
Console.WriteLine(result.GetProperty("geometry").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("isPrimary").ToString());
Console.WriteLine(result.GetProperty("acreage").ToString());
Console.WriteLine(result.GetProperty("parentType").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("eTag").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>Boundary</c>:
<code>{
  farmerId: string, # Optional. Farmer ID.
  parentId: string, # Optional. ID of the parent(field or seasonalField) it belongs to.
  geometry: {
    type: &quot;Point&quot; | &quot;Polygon&quot; | &quot;MultiPolygon&quot;, # Required. GeoJSON object type.
  }, # Optional. GeoJSON abstract class.
  isPrimary: boolean, # Optional. Is the boundary primary.
  acreage: number, # Optional. Boundary area in acres.
  parentType: string, # Optional. Type of the parent it belongs to.
  id: string, # Optional. Unique resource ID.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
}
</code>

Response Body:

Schema for <c>Boundary</c>:
<code>{
  farmerId: string, # Optional. Farmer ID.
  parentId: string, # Optional. ID of the parent(field or seasonalField) it belongs to.
  geometry: {
    type: &quot;Point&quot; | &quot;Polygon&quot; | &quot;MultiPolygon&quot;, # Required. GeoJSON object type.
  }, # Optional. GeoJSON abstract class.
  isPrimary: boolean, # Optional. Is the boundary primary.
  acreage: number, # Optional. Boundary area in acres.
  parentType: string, # Optional. Type of the parent it belongs to.
  id: string, # Optional. Unique resource ID.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
}
</code>

</remarks>
    </member>
    <member name="CreateOrUpdate(String,String,RequestContent,RequestContext)">
<example>
This sample shows how to call CreateOrUpdate with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new BoundariesClient(endpoint, credential);

var data = new {};

Response response = client.CreateOrUpdate("<farmerId>", "<boundaryId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateOrUpdate with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new BoundariesClient(endpoint, credential);

var data = new {
    parentId = "<parentId>",
    geometry = new {
        type = "MultiPolygon",
    },
    isPrimary = true,
    status = "<status>",
    name = "<name>",
    description = "<description>",
    properties = new {
        key = new {},
    },
};

Response response = client.CreateOrUpdate("<farmerId>", "<boundaryId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("farmerId").ToString());
Console.WriteLine(result.GetProperty("parentId").ToString());
Console.WriteLine(result.GetProperty("geometry").GetProperty("type").ToString());
Console.WriteLine(result.GetProperty("isPrimary").ToString());
Console.WriteLine(result.GetProperty("acreage").ToString());
Console.WriteLine(result.GetProperty("parentType").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("eTag").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>Boundary</c>:
<code>{
  farmerId: string, # Optional. Farmer ID.
  parentId: string, # Optional. ID of the parent(field or seasonalField) it belongs to.
  geometry: {
    type: &quot;Point&quot; | &quot;Polygon&quot; | &quot;MultiPolygon&quot;, # Required. GeoJSON object type.
  }, # Optional. GeoJSON abstract class.
  isPrimary: boolean, # Optional. Is the boundary primary.
  acreage: number, # Optional. Boundary area in acres.
  parentType: string, # Optional. Type of the parent it belongs to.
  id: string, # Optional. Unique resource ID.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
}
</code>

Response Body:

Schema for <c>Boundary</c>:
<code>{
  farmerId: string, # Optional. Farmer ID.
  parentId: string, # Optional. ID of the parent(field or seasonalField) it belongs to.
  geometry: {
    type: &quot;Point&quot; | &quot;Polygon&quot; | &quot;MultiPolygon&quot;, # Required. GeoJSON object type.
  }, # Optional. GeoJSON abstract class.
  isPrimary: boolean, # Optional. Is the boundary primary.
  acreage: number, # Optional. Boundary area in acres.
  parentType: string, # Optional. Type of the parent it belongs to.
  id: string, # Optional. Unique resource ID.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
}
</code>

</remarks>
    </member>
    <member name="DeleteAsync(String,String,RequestContext)">
<example>
This sample shows how to call DeleteAsync with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new BoundariesClient(endpoint, credential);

Response response = await client.DeleteAsync("<farmerId>", "<boundaryId>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="Delete(String,String,RequestContext)">
<example>
This sample shows how to call Delete with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new BoundariesClient(endpoint, credential);

Response response = client.Delete("<farmerId>", "<boundaryId>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="GetOverlapAsync(String,String,String,String,RequestContext)">
<example>
This sample shows how to call GetOverlapAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new BoundariesClient(endpoint, credential);

Response response = await client.GetOverlapAsync("<farmerId>", "<boundaryId>", "<otherFarmerId>", "<otherBoundaryId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("boundaryAcreage").ToString());
Console.WriteLine(result.GetProperty("otherBoundaryAcreage").ToString());
Console.WriteLine(result.GetProperty("intersectingAcreage").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>BoundaryOverlapResponse</c>:
<code>{
  boundaryAcreage: number, # Optional. Acreage of Main boundary.
  otherBoundaryAcreage: number, # Optional. Acreage of other boundary.
  intersectingAcreage: number, # Optional. Acreage of intersecting boundary.
}
</code>

</remarks>
    </member>
    <member name="GetOverlap(String,String,String,String,RequestContext)">
<example>
This sample shows how to call GetOverlap with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new BoundariesClient(endpoint, credential);

Response response = client.GetOverlap("<farmerId>", "<boundaryId>", "<otherFarmerId>", "<otherBoundaryId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("boundaryAcreage").ToString());
Console.WriteLine(result.GetProperty("otherBoundaryAcreage").ToString());
Console.WriteLine(result.GetProperty("intersectingAcreage").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>BoundaryOverlapResponse</c>:
<code>{
  boundaryAcreage: number, # Optional. Acreage of Main boundary.
  otherBoundaryAcreage: number, # Optional. Acreage of other boundary.
  intersectingAcreage: number, # Optional. Acreage of intersecting boundary.
}
</code>

</remarks>
    </member>
    <member name="GetBoundariesByFarmerIdAsync(String,Boolean,String,IEnumerable,Double,Double,IEnumerable,IEnumerable,IEnumerable,IEnumerable,DateTimeOffset,DateTimeOffset,DateTimeOffset,DateTimeOffset,Int32,String,RequestContext)">
<example>
This sample shows how to call GetBoundariesByFarmerIdAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new BoundariesClient(endpoint, credential);

await foreach (var data in client.GetBoundariesByFarmerIdAsync("<farmerId>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetBoundariesByFarmerIdAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new BoundariesClient(endpoint, credential);

await foreach (var data in client.GetBoundariesByFarmerIdAsync("<farmerId>", true, "<parentType>", new String[]{"<parentIds>"}, 1234, 1234, new String[]{"<ids>"}, new String[]{"<names>"}, new String[]{"<propertyFilters>"}, new String[]{"<statuses>"}, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 1234, "<skipToken>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("farmerId").ToString());
    Console.WriteLine(result.GetProperty("parentId").ToString());
    Console.WriteLine(result.GetProperty("geometry").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("isPrimary").ToString());
    Console.WriteLine(result.GetProperty("acreage").ToString());
    Console.WriteLine(result.GetProperty("parentType").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("eTag").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>BoundaryListResponseValue</c>:
<code>{
  farmerId: string, # Optional. Farmer ID.
  parentId: string, # Optional. ID of the parent(field or seasonalField) it belongs to.
  geometry: {
    type: &quot;Point&quot; | &quot;Polygon&quot; | &quot;MultiPolygon&quot;, # Required. GeoJSON object type.
  }, # Optional. GeoJSON abstract class.
  isPrimary: boolean, # Optional. Is the boundary primary.
  acreage: number, # Optional. Boundary area in acres.
  parentType: string, # Optional. Type of the parent it belongs to.
  id: string, # Optional. Unique resource ID.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
}
</code>

</remarks>
    </member>
    <member name="GetBoundariesByFarmerId(String,Boolean,String,IEnumerable,Double,Double,IEnumerable,IEnumerable,IEnumerable,IEnumerable,DateTimeOffset,DateTimeOffset,DateTimeOffset,DateTimeOffset,Int32,String,RequestContext)">
<example>
This sample shows how to call GetBoundariesByFarmerId with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new BoundariesClient(endpoint, credential);

foreach (var data in client.GetBoundariesByFarmerId("<farmerId>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetBoundariesByFarmerId with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new BoundariesClient(endpoint, credential);

foreach (var data in client.GetBoundariesByFarmerId("<farmerId>", true, "<parentType>", new String[]{"<parentIds>"}, 1234, 1234, new String[]{"<ids>"}, new String[]{"<names>"}, new String[]{"<propertyFilters>"}, new String[]{"<statuses>"}, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 1234, "<skipToken>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("farmerId").ToString());
    Console.WriteLine(result.GetProperty("parentId").ToString());
    Console.WriteLine(result.GetProperty("geometry").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("isPrimary").ToString());
    Console.WriteLine(result.GetProperty("acreage").ToString());
    Console.WriteLine(result.GetProperty("parentType").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("eTag").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>BoundaryListResponseValue</c>:
<code>{
  farmerId: string, # Optional. Farmer ID.
  parentId: string, # Optional. ID of the parent(field or seasonalField) it belongs to.
  geometry: {
    type: &quot;Point&quot; | &quot;Polygon&quot; | &quot;MultiPolygon&quot;, # Required. GeoJSON object type.
  }, # Optional. GeoJSON abstract class.
  isPrimary: boolean, # Optional. Is the boundary primary.
  acreage: number, # Optional. Boundary area in acres.
  parentType: string, # Optional. Type of the parent it belongs to.
  id: string, # Optional. Unique resource ID.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
}
</code>

</remarks>
    </member>
    <member name="SearchByFarmerIdAsync(String,RequestContent,RequestContext)">
<example>
This sample shows how to call SearchByFarmerIdAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new BoundariesClient(endpoint, credential);

var data = new {};

await foreach (var data in client.SearchByFarmerIdAsync("<farmerId>", RequestContent.Create(data)))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call SearchByFarmerIdAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new BoundariesClient(endpoint, credential);

var data = new {
    ids = new[] {
        "<String>"
    },
    names = new[] {
        "<String>"
    },
    propertyFilters = new[] {
        "<String>"
    },
    statuses = new[] {
        "<String>"
    },
    minCreatedDateTime = "2022-05-10T18:57:31.2311892Z",
    maxCreatedDateTime = "2022-05-10T18:57:31.2311892Z",
    minLastModifiedDateTime = "2022-05-10T18:57:31.2311892Z",
    maxLastModifiedDateTime = "2022-05-10T18:57:31.2311892Z",
    $maxPageSize = 1234,
    $skipToken = "<$skipToken>",
    isPrimary = true,
    parentType = "<parentType>",
    parentIds = new[] {
        "<String>"
    },
    minAcreage = 123.45d,
    maxAcreage = 123.45d,
    intersectsWithGeometry = new {
        type = "MultiPolygon",
    },
};

await foreach (var data in client.SearchByFarmerIdAsync("<farmerId>", RequestContent.Create(data)))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("farmerId").ToString());
    Console.WriteLine(result.GetProperty("parentId").ToString());
    Console.WriteLine(result.GetProperty("geometry").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("isPrimary").ToString());
    Console.WriteLine(result.GetProperty("acreage").ToString());
    Console.WriteLine(result.GetProperty("parentType").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("eTag").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload and one item in the pageable response.

Request Body:

Schema for <c>SearchBoundaryQuery</c>:
<code>{
  ids: [string], # Optional. Ids of the resource.
  names: [string], # Optional. Names of the resource.
  propertyFilters: [string], # Optional. Filters on key-value pairs within the Properties object.
eg. &quot;{testKey} eq {testValue}&quot;.
  statuses: [string], # Optional. Statuses of the resource.
  minCreatedDateTime: string (ISO 8601 Format), # Optional. Minimum creation date of resource (inclusive).
  maxCreatedDateTime: string (ISO 8601 Format), # Optional. Maximum creation date of resource (inclusive).
  minLastModifiedDateTime: string (ISO 8601 Format), # Optional. Minimum last modified date of resource (inclusive).
  maxLastModifiedDateTime: string (ISO 8601 Format), # Optional. Maximum last modified date of resource (inclusive).
  $maxPageSize: number, # Optional. Maximum number of items needed (inclusive).
Minimum = 10, Maximum = 1000, Default value = 50.
  $skipToken: string, # Optional. Skip token for getting next set of results.
  isPrimary: boolean, # Optional. Is the boundary primary.
  parentType: string, # Optional. Type of the parent it belongs to.
  parentIds: [string], # Optional. Parent Ids of the resource.
  minAcreage: number, # Optional. Minimum acreage of the boundary (inclusive).
  maxAcreage: number, # Optional. Maximum acreage of the boundary (inclusive).
  intersectsWithGeometry: {
    type: &quot;Point&quot; | &quot;Polygon&quot; | &quot;MultiPolygon&quot;, # Required. GeoJSON object type.
  }, # Optional. GeoJSON abstract class.
}
</code>

Response Body:

Schema for <c>BoundaryListResponseValue</c>:
<code>{
  farmerId: string, # Optional. Farmer ID.
  parentId: string, # Optional. ID of the parent(field or seasonalField) it belongs to.
  geometry: {
    type: &quot;Point&quot; | &quot;Polygon&quot; | &quot;MultiPolygon&quot;, # Required. GeoJSON object type.
  }, # Optional. GeoJSON abstract class.
  isPrimary: boolean, # Optional. Is the boundary primary.
  acreage: number, # Optional. Boundary area in acres.
  parentType: string, # Optional. Type of the parent it belongs to.
  id: string, # Optional. Unique resource ID.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
}
</code>

</remarks>
    </member>
    <member name="SearchByFarmerId(String,RequestContent,RequestContext)">
<example>
This sample shows how to call SearchByFarmerId with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new BoundariesClient(endpoint, credential);

var data = new {};

foreach (var data in client.SearchByFarmerId("<farmerId>", RequestContent.Create(data)))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call SearchByFarmerId with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new BoundariesClient(endpoint, credential);

var data = new {
    ids = new[] {
        "<String>"
    },
    names = new[] {
        "<String>"
    },
    propertyFilters = new[] {
        "<String>"
    },
    statuses = new[] {
        "<String>"
    },
    minCreatedDateTime = "2022-05-10T18:57:31.2311892Z",
    maxCreatedDateTime = "2022-05-10T18:57:31.2311892Z",
    minLastModifiedDateTime = "2022-05-10T18:57:31.2311892Z",
    maxLastModifiedDateTime = "2022-05-10T18:57:31.2311892Z",
    $maxPageSize = 1234,
    $skipToken = "<$skipToken>",
    isPrimary = true,
    parentType = "<parentType>",
    parentIds = new[] {
        "<String>"
    },
    minAcreage = 123.45d,
    maxAcreage = 123.45d,
    intersectsWithGeometry = new {
        type = "MultiPolygon",
    },
};

foreach (var data in client.SearchByFarmerId("<farmerId>", RequestContent.Create(data)))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("farmerId").ToString());
    Console.WriteLine(result.GetProperty("parentId").ToString());
    Console.WriteLine(result.GetProperty("geometry").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("isPrimary").ToString());
    Console.WriteLine(result.GetProperty("acreage").ToString());
    Console.WriteLine(result.GetProperty("parentType").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("eTag").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload and one item in the pageable response.

Request Body:

Schema for <c>SearchBoundaryQuery</c>:
<code>{
  ids: [string], # Optional. Ids of the resource.
  names: [string], # Optional. Names of the resource.
  propertyFilters: [string], # Optional. Filters on key-value pairs within the Properties object.
eg. &quot;{testKey} eq {testValue}&quot;.
  statuses: [string], # Optional. Statuses of the resource.
  minCreatedDateTime: string (ISO 8601 Format), # Optional. Minimum creation date of resource (inclusive).
  maxCreatedDateTime: string (ISO 8601 Format), # Optional. Maximum creation date of resource (inclusive).
  minLastModifiedDateTime: string (ISO 8601 Format), # Optional. Minimum last modified date of resource (inclusive).
  maxLastModifiedDateTime: string (ISO 8601 Format), # Optional. Maximum last modified date of resource (inclusive).
  $maxPageSize: number, # Optional. Maximum number of items needed (inclusive).
Minimum = 10, Maximum = 1000, Default value = 50.
  $skipToken: string, # Optional. Skip token for getting next set of results.
  isPrimary: boolean, # Optional. Is the boundary primary.
  parentType: string, # Optional. Type of the parent it belongs to.
  parentIds: [string], # Optional. Parent Ids of the resource.
  minAcreage: number, # Optional. Minimum acreage of the boundary (inclusive).
  maxAcreage: number, # Optional. Maximum acreage of the boundary (inclusive).
  intersectsWithGeometry: {
    type: &quot;Point&quot; | &quot;Polygon&quot; | &quot;MultiPolygon&quot;, # Required. GeoJSON object type.
  }, # Optional. GeoJSON abstract class.
}
</code>

Response Body:

Schema for <c>BoundaryListResponseValue</c>:
<code>{
  farmerId: string, # Optional. Farmer ID.
  parentId: string, # Optional. ID of the parent(field or seasonalField) it belongs to.
  geometry: {
    type: &quot;Point&quot; | &quot;Polygon&quot; | &quot;MultiPolygon&quot;, # Required. GeoJSON object type.
  }, # Optional. GeoJSON abstract class.
  isPrimary: boolean, # Optional. Is the boundary primary.
  acreage: number, # Optional. Boundary area in acres.
  parentType: string, # Optional. Type of the parent it belongs to.
  id: string, # Optional. Unique resource ID.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
}
</code>

</remarks>
    </member>
    <member name="GetBoundariesAsync(Boolean,String,IEnumerable,Double,Double,IEnumerable,IEnumerable,IEnumerable,IEnumerable,DateTimeOffset,DateTimeOffset,DateTimeOffset,DateTimeOffset,Int32,String,RequestContext)">
<example>
This sample shows how to call GetBoundariesAsync and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new BoundariesClient(endpoint, credential);

await foreach (var data in client.GetBoundariesAsync())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetBoundariesAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new BoundariesClient(endpoint, credential);

await foreach (var data in client.GetBoundariesAsync(true, "<parentType>", new String[]{"<parentIds>"}, 1234, 1234, new String[]{"<ids>"}, new String[]{"<names>"}, new String[]{"<propertyFilters>"}, new String[]{"<statuses>"}, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 1234, "<skipToken>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("farmerId").ToString());
    Console.WriteLine(result.GetProperty("parentId").ToString());
    Console.WriteLine(result.GetProperty("geometry").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("isPrimary").ToString());
    Console.WriteLine(result.GetProperty("acreage").ToString());
    Console.WriteLine(result.GetProperty("parentType").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("eTag").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>BoundaryListResponseValue</c>:
<code>{
  farmerId: string, # Optional. Farmer ID.
  parentId: string, # Optional. ID of the parent(field or seasonalField) it belongs to.
  geometry: {
    type: &quot;Point&quot; | &quot;Polygon&quot; | &quot;MultiPolygon&quot;, # Required. GeoJSON object type.
  }, # Optional. GeoJSON abstract class.
  isPrimary: boolean, # Optional. Is the boundary primary.
  acreage: number, # Optional. Boundary area in acres.
  parentType: string, # Optional. Type of the parent it belongs to.
  id: string, # Optional. Unique resource ID.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
}
</code>

</remarks>
    </member>
    <member name="GetBoundaries(Boolean,String,IEnumerable,Double,Double,IEnumerable,IEnumerable,IEnumerable,IEnumerable,DateTimeOffset,DateTimeOffset,DateTimeOffset,DateTimeOffset,Int32,String,RequestContext)">
<example>
This sample shows how to call GetBoundaries and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new BoundariesClient(endpoint, credential);

foreach (var data in client.GetBoundaries())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetBoundaries with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new BoundariesClient(endpoint, credential);

foreach (var data in client.GetBoundaries(true, "<parentType>", new String[]{"<parentIds>"}, 1234, 1234, new String[]{"<ids>"}, new String[]{"<names>"}, new String[]{"<propertyFilters>"}, new String[]{"<statuses>"}, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 1234, "<skipToken>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("farmerId").ToString());
    Console.WriteLine(result.GetProperty("parentId").ToString());
    Console.WriteLine(result.GetProperty("geometry").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("isPrimary").ToString());
    Console.WriteLine(result.GetProperty("acreage").ToString());
    Console.WriteLine(result.GetProperty("parentType").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("eTag").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>BoundaryListResponseValue</c>:
<code>{
  farmerId: string, # Optional. Farmer ID.
  parentId: string, # Optional. ID of the parent(field or seasonalField) it belongs to.
  geometry: {
    type: &quot;Point&quot; | &quot;Polygon&quot; | &quot;MultiPolygon&quot;, # Required. GeoJSON object type.
  }, # Optional. GeoJSON abstract class.
  isPrimary: boolean, # Optional. Is the boundary primary.
  acreage: number, # Optional. Boundary area in acres.
  parentType: string, # Optional. Type of the parent it belongs to.
  id: string, # Optional. Unique resource ID.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
}
</code>

</remarks>
    </member>
    <member name="SearchAsync(RequestContent,RequestContext)">
<example>
This sample shows how to call SearchAsync and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new BoundariesClient(endpoint, credential);

var data = new {};

await foreach (var data in client.SearchAsync(RequestContent.Create(data)))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call SearchAsync with all request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new BoundariesClient(endpoint, credential);

var data = new {
    ids = new[] {
        "<String>"
    },
    names = new[] {
        "<String>"
    },
    propertyFilters = new[] {
        "<String>"
    },
    statuses = new[] {
        "<String>"
    },
    minCreatedDateTime = "2022-05-10T18:57:31.2311892Z",
    maxCreatedDateTime = "2022-05-10T18:57:31.2311892Z",
    minLastModifiedDateTime = "2022-05-10T18:57:31.2311892Z",
    maxLastModifiedDateTime = "2022-05-10T18:57:31.2311892Z",
    $maxPageSize = 1234,
    $skipToken = "<$skipToken>",
    isPrimary = true,
    parentType = "<parentType>",
    parentIds = new[] {
        "<String>"
    },
    minAcreage = 123.45d,
    maxAcreage = 123.45d,
    intersectsWithGeometry = new {
        type = "MultiPolygon",
    },
};

await foreach (var data in client.SearchAsync(RequestContent.Create(data)))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("farmerId").ToString());
    Console.WriteLine(result.GetProperty("parentId").ToString());
    Console.WriteLine(result.GetProperty("geometry").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("isPrimary").ToString());
    Console.WriteLine(result.GetProperty("acreage").ToString());
    Console.WriteLine(result.GetProperty("parentType").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("eTag").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload and one item in the pageable response.

Request Body:

Schema for <c>SearchBoundaryQuery</c>:
<code>{
  ids: [string], # Optional. Ids of the resource.
  names: [string], # Optional. Names of the resource.
  propertyFilters: [string], # Optional. Filters on key-value pairs within the Properties object.
eg. &quot;{testKey} eq {testValue}&quot;.
  statuses: [string], # Optional. Statuses of the resource.
  minCreatedDateTime: string (ISO 8601 Format), # Optional. Minimum creation date of resource (inclusive).
  maxCreatedDateTime: string (ISO 8601 Format), # Optional. Maximum creation date of resource (inclusive).
  minLastModifiedDateTime: string (ISO 8601 Format), # Optional. Minimum last modified date of resource (inclusive).
  maxLastModifiedDateTime: string (ISO 8601 Format), # Optional. Maximum last modified date of resource (inclusive).
  $maxPageSize: number, # Optional. Maximum number of items needed (inclusive).
Minimum = 10, Maximum = 1000, Default value = 50.
  $skipToken: string, # Optional. Skip token for getting next set of results.
  isPrimary: boolean, # Optional. Is the boundary primary.
  parentType: string, # Optional. Type of the parent it belongs to.
  parentIds: [string], # Optional. Parent Ids of the resource.
  minAcreage: number, # Optional. Minimum acreage of the boundary (inclusive).
  maxAcreage: number, # Optional. Maximum acreage of the boundary (inclusive).
  intersectsWithGeometry: {
    type: &quot;Point&quot; | &quot;Polygon&quot; | &quot;MultiPolygon&quot;, # Required. GeoJSON object type.
  }, # Optional. GeoJSON abstract class.
}
</code>

Response Body:

Schema for <c>BoundaryListResponseValue</c>:
<code>{
  farmerId: string, # Optional. Farmer ID.
  parentId: string, # Optional. ID of the parent(field or seasonalField) it belongs to.
  geometry: {
    type: &quot;Point&quot; | &quot;Polygon&quot; | &quot;MultiPolygon&quot;, # Required. GeoJSON object type.
  }, # Optional. GeoJSON abstract class.
  isPrimary: boolean, # Optional. Is the boundary primary.
  acreage: number, # Optional. Boundary area in acres.
  parentType: string, # Optional. Type of the parent it belongs to.
  id: string, # Optional. Unique resource ID.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
}
</code>

</remarks>
    </member>
    <member name="Search(RequestContent,RequestContext)">
<example>
This sample shows how to call Search and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new BoundariesClient(endpoint, credential);

var data = new {};

foreach (var data in client.Search(RequestContent.Create(data)))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call Search with all request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new BoundariesClient(endpoint, credential);

var data = new {
    ids = new[] {
        "<String>"
    },
    names = new[] {
        "<String>"
    },
    propertyFilters = new[] {
        "<String>"
    },
    statuses = new[] {
        "<String>"
    },
    minCreatedDateTime = "2022-05-10T18:57:31.2311892Z",
    maxCreatedDateTime = "2022-05-10T18:57:31.2311892Z",
    minLastModifiedDateTime = "2022-05-10T18:57:31.2311892Z",
    maxLastModifiedDateTime = "2022-05-10T18:57:31.2311892Z",
    $maxPageSize = 1234,
    $skipToken = "<$skipToken>",
    isPrimary = true,
    parentType = "<parentType>",
    parentIds = new[] {
        "<String>"
    },
    minAcreage = 123.45d,
    maxAcreage = 123.45d,
    intersectsWithGeometry = new {
        type = "MultiPolygon",
    },
};

foreach (var data in client.Search(RequestContent.Create(data)))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("farmerId").ToString());
    Console.WriteLine(result.GetProperty("parentId").ToString());
    Console.WriteLine(result.GetProperty("geometry").GetProperty("type").ToString());
    Console.WriteLine(result.GetProperty("isPrimary").ToString());
    Console.WriteLine(result.GetProperty("acreage").ToString());
    Console.WriteLine(result.GetProperty("parentType").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("eTag").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for the request payload and one item in the pageable response.

Request Body:

Schema for <c>SearchBoundaryQuery</c>:
<code>{
  ids: [string], # Optional. Ids of the resource.
  names: [string], # Optional. Names of the resource.
  propertyFilters: [string], # Optional. Filters on key-value pairs within the Properties object.
eg. &quot;{testKey} eq {testValue}&quot;.
  statuses: [string], # Optional. Statuses of the resource.
  minCreatedDateTime: string (ISO 8601 Format), # Optional. Minimum creation date of resource (inclusive).
  maxCreatedDateTime: string (ISO 8601 Format), # Optional. Maximum creation date of resource (inclusive).
  minLastModifiedDateTime: string (ISO 8601 Format), # Optional. Minimum last modified date of resource (inclusive).
  maxLastModifiedDateTime: string (ISO 8601 Format), # Optional. Maximum last modified date of resource (inclusive).
  $maxPageSize: number, # Optional. Maximum number of items needed (inclusive).
Minimum = 10, Maximum = 1000, Default value = 50.
  $skipToken: string, # Optional. Skip token for getting next set of results.
  isPrimary: boolean, # Optional. Is the boundary primary.
  parentType: string, # Optional. Type of the parent it belongs to.
  parentIds: [string], # Optional. Parent Ids of the resource.
  minAcreage: number, # Optional. Minimum acreage of the boundary (inclusive).
  maxAcreage: number, # Optional. Maximum acreage of the boundary (inclusive).
  intersectsWithGeometry: {
    type: &quot;Point&quot; | &quot;Polygon&quot; | &quot;MultiPolygon&quot;, # Required. GeoJSON object type.
  }, # Optional. GeoJSON abstract class.
}
</code>

Response Body:

Schema for <c>BoundaryListResponseValue</c>:
<code>{
  farmerId: string, # Optional. Farmer ID.
  parentId: string, # Optional. ID of the parent(field or seasonalField) it belongs to.
  geometry: {
    type: &quot;Point&quot; | &quot;Polygon&quot; | &quot;MultiPolygon&quot;, # Required. GeoJSON object type.
  }, # Optional. GeoJSON abstract class.
  isPrimary: boolean, # Optional. Is the boundary primary.
  acreage: number, # Optional. Boundary area in acres.
  parentType: string, # Optional. Type of the parent it belongs to.
  id: string, # Optional. Unique resource ID.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
}
</code>

</remarks>
    </member>
    <member name="CreateCascadeDeleteJobAsync(WaitUntil,String,String,String,RequestContext)">
<example>
This sample shows how to call CreateCascadeDeleteJobAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new BoundariesClient(endpoint, credential);

var operation = await client.CreateCascadeDeleteJobAsync(WaitUntil.Started, "<jobId>", "<farmerId>", "<boundaryId>");

BinaryData data = await operation.WaitForCompletionAsync();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("farmerId").ToString());
Console.WriteLine(result.GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("resourceType").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
Console.WriteLine(result.GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>CascadeDeleteJob</c>:
<code>{
  farmerId: string, # Required. Farmer ID.
  resourceId: string, # Required. The id of the resource.
  resourceType: string, # Required. The type of the resource.
  id: string, # Optional. Unique job id.
  status: string, # Optional. Status of the job.
Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
  durationInSeconds: number, # Optional. Duration of the job in seconds.
  message: string, # Optional. Status message to capture more details of the job.
  createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
}
</code>

</remarks>
    </member>
    <member name="CreateCascadeDeleteJob(WaitUntil,String,String,String,RequestContext)">
<example>
This sample shows how to call CreateCascadeDeleteJob with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new BoundariesClient(endpoint, credential);

var operation = client.CreateCascadeDeleteJob(WaitUntil.Started, "<jobId>", "<farmerId>", "<boundaryId>");

BinaryData data = operation.WaitForCompletion();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("farmerId").ToString());
Console.WriteLine(result.GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("resourceType").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
Console.WriteLine(result.GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>CascadeDeleteJob</c>:
<code>{
  farmerId: string, # Required. Farmer ID.
  resourceId: string, # Required. The id of the resource.
  resourceType: string, # Required. The type of the resource.
  id: string, # Optional. Unique job id.
  status: string, # Optional. Status of the job.
Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
  durationInSeconds: number, # Optional. Duration of the job in seconds.
  message: string, # Optional. Status message to capture more details of the job.
  createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
}
</code>

</remarks>
    </member>
  </members>
</doc>