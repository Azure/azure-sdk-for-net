<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetSeasonalFieldAsync(String,String,RequestContext)">
<example>
This sample shows how to call GetSeasonalFieldAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new SeasonalFieldsClient(endpoint, credential);

Response response = await client.GetSeasonalFieldAsync("<farmerId>", "<seasonalFieldId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("farmerId").ToString());
Console.WriteLine(result.GetProperty("primaryBoundaryId").ToString());
Console.WriteLine(result.GetProperty("boundaryIds")[0].ToString());
Console.WriteLine(result.GetProperty("farmId").ToString());
Console.WriteLine(result.GetProperty("fieldId").ToString());
Console.WriteLine(result.GetProperty("seasonId").ToString());
Console.WriteLine(result.GetProperty("cropVarietyIds")[0].ToString());
Console.WriteLine(result.GetProperty("cropId").ToString());
Console.WriteLine(result.GetProperty("avgYieldValue").ToString());
Console.WriteLine(result.GetProperty("avgYieldUnit").ToString());
Console.WriteLine(result.GetProperty("avgSeedPopulationValue").ToString());
Console.WriteLine(result.GetProperty("avgSeedPopulationUnit").ToString());
Console.WriteLine(result.GetProperty("plantingDateTime").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("eTag").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>SeasonalField</c>:
<code>{
  farmerId: string, # Optional. Farmer ID.
  primaryBoundaryId: string, # Optional. Primary boundary id.
  boundaryIds: [string], # Optional. Boundary Ids.
  farmId: string, # Optional. ID of the associated Farm.
  fieldId: string, # Optional. ID of the associated Field.
  seasonId: string, # Optional. ID of the season it belongs to.
  cropVarietyIds: [string], # Optional. CropVariety ids.
  cropId: string, # Optional. ID of the crop it belongs to.
  avgYieldValue: number, # Optional. Average yield value of the seasonal field.
  avgYieldUnit: string, # Optional. Unit of the average yield value attribute.
  avgSeedPopulationValue: number, # Optional. Average seed population value of the seasonal field.
  avgSeedPopulationUnit: string, # Optional. Unit of average seed population value attribute.
  plantingDateTime: string (ISO 8601 Format), # Optional. Planting datetime, sample format: yyyy-MM-ddTHH:mm:ssZ.
  id: string, # Optional. Unique resource ID.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
}
</code>

</remarks>
    </member>
    <member name="GetSeasonalField(String,String,RequestContext)">
<example>
This sample shows how to call GetSeasonalField with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new SeasonalFieldsClient(endpoint, credential);

Response response = client.GetSeasonalField("<farmerId>", "<seasonalFieldId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("farmerId").ToString());
Console.WriteLine(result.GetProperty("primaryBoundaryId").ToString());
Console.WriteLine(result.GetProperty("boundaryIds")[0].ToString());
Console.WriteLine(result.GetProperty("farmId").ToString());
Console.WriteLine(result.GetProperty("fieldId").ToString());
Console.WriteLine(result.GetProperty("seasonId").ToString());
Console.WriteLine(result.GetProperty("cropVarietyIds")[0].ToString());
Console.WriteLine(result.GetProperty("cropId").ToString());
Console.WriteLine(result.GetProperty("avgYieldValue").ToString());
Console.WriteLine(result.GetProperty("avgYieldUnit").ToString());
Console.WriteLine(result.GetProperty("avgSeedPopulationValue").ToString());
Console.WriteLine(result.GetProperty("avgSeedPopulationUnit").ToString());
Console.WriteLine(result.GetProperty("plantingDateTime").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("eTag").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>SeasonalField</c>:
<code>{
  farmerId: string, # Optional. Farmer ID.
  primaryBoundaryId: string, # Optional. Primary boundary id.
  boundaryIds: [string], # Optional. Boundary Ids.
  farmId: string, # Optional. ID of the associated Farm.
  fieldId: string, # Optional. ID of the associated Field.
  seasonId: string, # Optional. ID of the season it belongs to.
  cropVarietyIds: [string], # Optional. CropVariety ids.
  cropId: string, # Optional. ID of the crop it belongs to.
  avgYieldValue: number, # Optional. Average yield value of the seasonal field.
  avgYieldUnit: string, # Optional. Unit of the average yield value attribute.
  avgSeedPopulationValue: number, # Optional. Average seed population value of the seasonal field.
  avgSeedPopulationUnit: string, # Optional. Unit of average seed population value attribute.
  plantingDateTime: string (ISO 8601 Format), # Optional. Planting datetime, sample format: yyyy-MM-ddTHH:mm:ssZ.
  id: string, # Optional. Unique resource ID.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
}
</code>

</remarks>
    </member>
    <member name="CreateOrUpdateAsync(String,String,RequestContent,RequestContext)">
<example>
This sample shows how to call CreateOrUpdateAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new SeasonalFieldsClient(endpoint, credential);

var data = new {};

Response response = await client.CreateOrUpdateAsync("<farmerId>", "<seasonalFieldId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateOrUpdateAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new SeasonalFieldsClient(endpoint, credential);

var data = new {
    farmId = "<farmId>",
    fieldId = "<fieldId>",
    seasonId = "<seasonId>",
    cropVarietyIds = new[] {
        "<String>"
    },
    cropId = "<cropId>",
    avgYieldValue = 123.45d,
    avgYieldUnit = "<avgYieldUnit>",
    avgSeedPopulationValue = 123.45d,
    avgSeedPopulationUnit = "<avgSeedPopulationUnit>",
    plantingDateTime = "2022-05-10T18:57:31.2311892Z",
    status = "<status>",
    name = "<name>",
    description = "<description>",
    properties = new {
        key = new {},
    },
};

Response response = await client.CreateOrUpdateAsync("<farmerId>", "<seasonalFieldId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("farmerId").ToString());
Console.WriteLine(result.GetProperty("primaryBoundaryId").ToString());
Console.WriteLine(result.GetProperty("boundaryIds")[0].ToString());
Console.WriteLine(result.GetProperty("farmId").ToString());
Console.WriteLine(result.GetProperty("fieldId").ToString());
Console.WriteLine(result.GetProperty("seasonId").ToString());
Console.WriteLine(result.GetProperty("cropVarietyIds")[0].ToString());
Console.WriteLine(result.GetProperty("cropId").ToString());
Console.WriteLine(result.GetProperty("avgYieldValue").ToString());
Console.WriteLine(result.GetProperty("avgYieldUnit").ToString());
Console.WriteLine(result.GetProperty("avgSeedPopulationValue").ToString());
Console.WriteLine(result.GetProperty("avgSeedPopulationUnit").ToString());
Console.WriteLine(result.GetProperty("plantingDateTime").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("eTag").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>SeasonalField</c>:
<code>{
  farmerId: string, # Optional. Farmer ID.
  primaryBoundaryId: string, # Optional. Primary boundary id.
  boundaryIds: [string], # Optional. Boundary Ids.
  farmId: string, # Optional. ID of the associated Farm.
  fieldId: string, # Optional. ID of the associated Field.
  seasonId: string, # Optional. ID of the season it belongs to.
  cropVarietyIds: [string], # Optional. CropVariety ids.
  cropId: string, # Optional. ID of the crop it belongs to.
  avgYieldValue: number, # Optional. Average yield value of the seasonal field.
  avgYieldUnit: string, # Optional. Unit of the average yield value attribute.
  avgSeedPopulationValue: number, # Optional. Average seed population value of the seasonal field.
  avgSeedPopulationUnit: string, # Optional. Unit of average seed population value attribute.
  plantingDateTime: string (ISO 8601 Format), # Optional. Planting datetime, sample format: yyyy-MM-ddTHH:mm:ssZ.
  id: string, # Optional. Unique resource ID.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
}
</code>

Response Body:

Schema for <c>SeasonalField</c>:
<code>{
  farmerId: string, # Optional. Farmer ID.
  primaryBoundaryId: string, # Optional. Primary boundary id.
  boundaryIds: [string], # Optional. Boundary Ids.
  farmId: string, # Optional. ID of the associated Farm.
  fieldId: string, # Optional. ID of the associated Field.
  seasonId: string, # Optional. ID of the season it belongs to.
  cropVarietyIds: [string], # Optional. CropVariety ids.
  cropId: string, # Optional. ID of the crop it belongs to.
  avgYieldValue: number, # Optional. Average yield value of the seasonal field.
  avgYieldUnit: string, # Optional. Unit of the average yield value attribute.
  avgSeedPopulationValue: number, # Optional. Average seed population value of the seasonal field.
  avgSeedPopulationUnit: string, # Optional. Unit of average seed population value attribute.
  plantingDateTime: string (ISO 8601 Format), # Optional. Planting datetime, sample format: yyyy-MM-ddTHH:mm:ssZ.
  id: string, # Optional. Unique resource ID.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
}
</code>

</remarks>
    </member>
    <member name="CreateOrUpdate(String,String,RequestContent,RequestContext)">
<example>
This sample shows how to call CreateOrUpdate with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new SeasonalFieldsClient(endpoint, credential);

var data = new {};

Response response = client.CreateOrUpdate("<farmerId>", "<seasonalFieldId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateOrUpdate with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new SeasonalFieldsClient(endpoint, credential);

var data = new {
    farmId = "<farmId>",
    fieldId = "<fieldId>",
    seasonId = "<seasonId>",
    cropVarietyIds = new[] {
        "<String>"
    },
    cropId = "<cropId>",
    avgYieldValue = 123.45d,
    avgYieldUnit = "<avgYieldUnit>",
    avgSeedPopulationValue = 123.45d,
    avgSeedPopulationUnit = "<avgSeedPopulationUnit>",
    plantingDateTime = "2022-05-10T18:57:31.2311892Z",
    status = "<status>",
    name = "<name>",
    description = "<description>",
    properties = new {
        key = new {},
    },
};

Response response = client.CreateOrUpdate("<farmerId>", "<seasonalFieldId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("farmerId").ToString());
Console.WriteLine(result.GetProperty("primaryBoundaryId").ToString());
Console.WriteLine(result.GetProperty("boundaryIds")[0].ToString());
Console.WriteLine(result.GetProperty("farmId").ToString());
Console.WriteLine(result.GetProperty("fieldId").ToString());
Console.WriteLine(result.GetProperty("seasonId").ToString());
Console.WriteLine(result.GetProperty("cropVarietyIds")[0].ToString());
Console.WriteLine(result.GetProperty("cropId").ToString());
Console.WriteLine(result.GetProperty("avgYieldValue").ToString());
Console.WriteLine(result.GetProperty("avgYieldUnit").ToString());
Console.WriteLine(result.GetProperty("avgSeedPopulationValue").ToString());
Console.WriteLine(result.GetProperty("avgSeedPopulationUnit").ToString());
Console.WriteLine(result.GetProperty("plantingDateTime").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("eTag").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>SeasonalField</c>:
<code>{
  farmerId: string, # Optional. Farmer ID.
  primaryBoundaryId: string, # Optional. Primary boundary id.
  boundaryIds: [string], # Optional. Boundary Ids.
  farmId: string, # Optional. ID of the associated Farm.
  fieldId: string, # Optional. ID of the associated Field.
  seasonId: string, # Optional. ID of the season it belongs to.
  cropVarietyIds: [string], # Optional. CropVariety ids.
  cropId: string, # Optional. ID of the crop it belongs to.
  avgYieldValue: number, # Optional. Average yield value of the seasonal field.
  avgYieldUnit: string, # Optional. Unit of the average yield value attribute.
  avgSeedPopulationValue: number, # Optional. Average seed population value of the seasonal field.
  avgSeedPopulationUnit: string, # Optional. Unit of average seed population value attribute.
  plantingDateTime: string (ISO 8601 Format), # Optional. Planting datetime, sample format: yyyy-MM-ddTHH:mm:ssZ.
  id: string, # Optional. Unique resource ID.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
}
</code>

Response Body:

Schema for <c>SeasonalField</c>:
<code>{
  farmerId: string, # Optional. Farmer ID.
  primaryBoundaryId: string, # Optional. Primary boundary id.
  boundaryIds: [string], # Optional. Boundary Ids.
  farmId: string, # Optional. ID of the associated Farm.
  fieldId: string, # Optional. ID of the associated Field.
  seasonId: string, # Optional. ID of the season it belongs to.
  cropVarietyIds: [string], # Optional. CropVariety ids.
  cropId: string, # Optional. ID of the crop it belongs to.
  avgYieldValue: number, # Optional. Average yield value of the seasonal field.
  avgYieldUnit: string, # Optional. Unit of the average yield value attribute.
  avgSeedPopulationValue: number, # Optional. Average seed population value of the seasonal field.
  avgSeedPopulationUnit: string, # Optional. Unit of average seed population value attribute.
  plantingDateTime: string (ISO 8601 Format), # Optional. Planting datetime, sample format: yyyy-MM-ddTHH:mm:ssZ.
  id: string, # Optional. Unique resource ID.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
}
</code>

</remarks>
    </member>
    <member name="DeleteAsync(String,String,RequestContext)">
<example>
This sample shows how to call DeleteAsync with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new SeasonalFieldsClient(endpoint, credential);

Response response = await client.DeleteAsync("<farmerId>", "<seasonalFieldId>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="Delete(String,String,RequestContext)">
<example>
This sample shows how to call Delete with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new SeasonalFieldsClient(endpoint, credential);

Response response = client.Delete("<farmerId>", "<seasonalFieldId>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="GetCascadeDeleteJobDetailsAsync(String,RequestContext)">
<example>
This sample shows how to call GetCascadeDeleteJobDetailsAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new SeasonalFieldsClient(endpoint, credential);

Response response = await client.GetCascadeDeleteJobDetailsAsync("<jobId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("farmerId").ToString());
Console.WriteLine(result.GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("resourceType").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
Console.WriteLine(result.GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>CascadeDeleteJob</c>:
<code>{
  farmerId: string, # Required. Farmer ID.
  resourceId: string, # Required. The id of the resource.
  resourceType: string, # Required. The type of the resource.
  id: string, # Optional. Unique job id.
  status: string, # Optional. Status of the job.
Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
  durationInSeconds: number, # Optional. Duration of the job in seconds.
  message: string, # Optional. Status message to capture more details of the job.
  createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
}
</code>

</remarks>
    </member>
    <member name="GetCascadeDeleteJobDetails(String,RequestContext)">
<example>
This sample shows how to call GetCascadeDeleteJobDetails with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new SeasonalFieldsClient(endpoint, credential);

Response response = client.GetCascadeDeleteJobDetails("<jobId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("farmerId").ToString());
Console.WriteLine(result.GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("resourceType").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
Console.WriteLine(result.GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>CascadeDeleteJob</c>:
<code>{
  farmerId: string, # Required. Farmer ID.
  resourceId: string, # Required. The id of the resource.
  resourceType: string, # Required. The type of the resource.
  id: string, # Optional. Unique job id.
  status: string, # Optional. Status of the job.
Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
  durationInSeconds: number, # Optional. Duration of the job in seconds.
  message: string, # Optional. Status message to capture more details of the job.
  createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
}
</code>

</remarks>
    </member>
    <member name="GetSeasonalFieldsByFarmerIdAsync(String,IEnumerable,IEnumerable,IEnumerable,IEnumerable,IEnumerable,Double,Double,String,Double,Double,String,DateTimeOffset,DateTimeOffset,IEnumerable,IEnumerable,IEnumerable,IEnumerable,DateTimeOffset,DateTimeOffset,DateTimeOffset,DateTimeOffset,Int32,String,RequestContext)">
<example>
This sample shows how to call GetSeasonalFieldsByFarmerIdAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new SeasonalFieldsClient(endpoint, credential);

await foreach (var data in client.GetSeasonalFieldsByFarmerIdAsync("<farmerId>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetSeasonalFieldsByFarmerIdAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new SeasonalFieldsClient(endpoint, credential);

await foreach (var data in client.GetSeasonalFieldsByFarmerIdAsync("<farmerId>", new String[]{"<farmIds>"}, new String[]{"<fieldIds>"}, new String[]{"<seasonIds>"}, new String[]{"<cropVarietyIds>"}, new String[]{"<cropIds>"}, 1234, 1234, "<avgYieldUnit>", 1234, 1234, "<avgSeedPopulationUnit>", DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, new String[]{"<ids>"}, new String[]{"<names>"}, new String[]{"<propertyFilters>"}, new String[]{"<statuses>"}, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 1234, "<skipToken>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("farmerId").ToString());
    Console.WriteLine(result.GetProperty("primaryBoundaryId").ToString());
    Console.WriteLine(result.GetProperty("boundaryIds")[0].ToString());
    Console.WriteLine(result.GetProperty("farmId").ToString());
    Console.WriteLine(result.GetProperty("fieldId").ToString());
    Console.WriteLine(result.GetProperty("seasonId").ToString());
    Console.WriteLine(result.GetProperty("cropVarietyIds")[0].ToString());
    Console.WriteLine(result.GetProperty("cropId").ToString());
    Console.WriteLine(result.GetProperty("avgYieldValue").ToString());
    Console.WriteLine(result.GetProperty("avgYieldUnit").ToString());
    Console.WriteLine(result.GetProperty("avgSeedPopulationValue").ToString());
    Console.WriteLine(result.GetProperty("avgSeedPopulationUnit").ToString());
    Console.WriteLine(result.GetProperty("plantingDateTime").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("eTag").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>SeasonalFieldListResponseValue</c>:
<code>{
  farmerId: string, # Optional. Farmer ID.
  primaryBoundaryId: string, # Optional. Primary boundary id.
  boundaryIds: [string], # Optional. Boundary Ids.
  farmId: string, # Optional. ID of the associated Farm.
  fieldId: string, # Optional. ID of the associated Field.
  seasonId: string, # Optional. ID of the season it belongs to.
  cropVarietyIds: [string], # Optional. CropVariety ids.
  cropId: string, # Optional. ID of the crop it belongs to.
  avgYieldValue: number, # Optional. Average yield value of the seasonal field.
  avgYieldUnit: string, # Optional. Unit of the average yield value attribute.
  avgSeedPopulationValue: number, # Optional. Average seed population value of the seasonal field.
  avgSeedPopulationUnit: string, # Optional. Unit of average seed population value attribute.
  plantingDateTime: string (ISO 8601 Format), # Optional. Planting datetime, sample format: yyyy-MM-ddTHH:mm:ssZ.
  id: string, # Optional. Unique resource ID.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
}
</code>

</remarks>
    </member>
    <member name="GetSeasonalFieldsByFarmerId(String,IEnumerable,IEnumerable,IEnumerable,IEnumerable,IEnumerable,Double,Double,String,Double,Double,String,DateTimeOffset,DateTimeOffset,IEnumerable,IEnumerable,IEnumerable,IEnumerable,DateTimeOffset,DateTimeOffset,DateTimeOffset,DateTimeOffset,Int32,String,RequestContext)">
<example>
This sample shows how to call GetSeasonalFieldsByFarmerId with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new SeasonalFieldsClient(endpoint, credential);

foreach (var data in client.GetSeasonalFieldsByFarmerId("<farmerId>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetSeasonalFieldsByFarmerId with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new SeasonalFieldsClient(endpoint, credential);

foreach (var data in client.GetSeasonalFieldsByFarmerId("<farmerId>", new String[]{"<farmIds>"}, new String[]{"<fieldIds>"}, new String[]{"<seasonIds>"}, new String[]{"<cropVarietyIds>"}, new String[]{"<cropIds>"}, 1234, 1234, "<avgYieldUnit>", 1234, 1234, "<avgSeedPopulationUnit>", DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, new String[]{"<ids>"}, new String[]{"<names>"}, new String[]{"<propertyFilters>"}, new String[]{"<statuses>"}, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 1234, "<skipToken>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("farmerId").ToString());
    Console.WriteLine(result.GetProperty("primaryBoundaryId").ToString());
    Console.WriteLine(result.GetProperty("boundaryIds")[0].ToString());
    Console.WriteLine(result.GetProperty("farmId").ToString());
    Console.WriteLine(result.GetProperty("fieldId").ToString());
    Console.WriteLine(result.GetProperty("seasonId").ToString());
    Console.WriteLine(result.GetProperty("cropVarietyIds")[0].ToString());
    Console.WriteLine(result.GetProperty("cropId").ToString());
    Console.WriteLine(result.GetProperty("avgYieldValue").ToString());
    Console.WriteLine(result.GetProperty("avgYieldUnit").ToString());
    Console.WriteLine(result.GetProperty("avgSeedPopulationValue").ToString());
    Console.WriteLine(result.GetProperty("avgSeedPopulationUnit").ToString());
    Console.WriteLine(result.GetProperty("plantingDateTime").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("eTag").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>SeasonalFieldListResponseValue</c>:
<code>{
  farmerId: string, # Optional. Farmer ID.
  primaryBoundaryId: string, # Optional. Primary boundary id.
  boundaryIds: [string], # Optional. Boundary Ids.
  farmId: string, # Optional. ID of the associated Farm.
  fieldId: string, # Optional. ID of the associated Field.
  seasonId: string, # Optional. ID of the season it belongs to.
  cropVarietyIds: [string], # Optional. CropVariety ids.
  cropId: string, # Optional. ID of the crop it belongs to.
  avgYieldValue: number, # Optional. Average yield value of the seasonal field.
  avgYieldUnit: string, # Optional. Unit of the average yield value attribute.
  avgSeedPopulationValue: number, # Optional. Average seed population value of the seasonal field.
  avgSeedPopulationUnit: string, # Optional. Unit of average seed population value attribute.
  plantingDateTime: string (ISO 8601 Format), # Optional. Planting datetime, sample format: yyyy-MM-ddTHH:mm:ssZ.
  id: string, # Optional. Unique resource ID.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
}
</code>

</remarks>
    </member>
    <member name="GetSeasonalFieldsAsync(IEnumerable,IEnumerable,IEnumerable,IEnumerable,IEnumerable,Double,Double,String,Double,Double,String,DateTimeOffset,DateTimeOffset,IEnumerable,IEnumerable,IEnumerable,IEnumerable,DateTimeOffset,DateTimeOffset,DateTimeOffset,DateTimeOffset,Int32,String,RequestContext)">
<example>
This sample shows how to call GetSeasonalFieldsAsync and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new SeasonalFieldsClient(endpoint, credential);

await foreach (var data in client.GetSeasonalFieldsAsync())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetSeasonalFieldsAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new SeasonalFieldsClient(endpoint, credential);

await foreach (var data in client.GetSeasonalFieldsAsync(new String[]{"<farmIds>"}, new String[]{"<fieldIds>"}, new String[]{"<seasonIds>"}, new String[]{"<cropVarietyIds>"}, new String[]{"<cropIds>"}, 1234, 1234, "<avgYieldUnit>", 1234, 1234, "<avgSeedPopulationUnit>", DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, new String[]{"<ids>"}, new String[]{"<names>"}, new String[]{"<propertyFilters>"}, new String[]{"<statuses>"}, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 1234, "<skipToken>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("farmerId").ToString());
    Console.WriteLine(result.GetProperty("primaryBoundaryId").ToString());
    Console.WriteLine(result.GetProperty("boundaryIds")[0].ToString());
    Console.WriteLine(result.GetProperty("farmId").ToString());
    Console.WriteLine(result.GetProperty("fieldId").ToString());
    Console.WriteLine(result.GetProperty("seasonId").ToString());
    Console.WriteLine(result.GetProperty("cropVarietyIds")[0].ToString());
    Console.WriteLine(result.GetProperty("cropId").ToString());
    Console.WriteLine(result.GetProperty("avgYieldValue").ToString());
    Console.WriteLine(result.GetProperty("avgYieldUnit").ToString());
    Console.WriteLine(result.GetProperty("avgSeedPopulationValue").ToString());
    Console.WriteLine(result.GetProperty("avgSeedPopulationUnit").ToString());
    Console.WriteLine(result.GetProperty("plantingDateTime").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("eTag").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>SeasonalFieldListResponseValue</c>:
<code>{
  farmerId: string, # Optional. Farmer ID.
  primaryBoundaryId: string, # Optional. Primary boundary id.
  boundaryIds: [string], # Optional. Boundary Ids.
  farmId: string, # Optional. ID of the associated Farm.
  fieldId: string, # Optional. ID of the associated Field.
  seasonId: string, # Optional. ID of the season it belongs to.
  cropVarietyIds: [string], # Optional. CropVariety ids.
  cropId: string, # Optional. ID of the crop it belongs to.
  avgYieldValue: number, # Optional. Average yield value of the seasonal field.
  avgYieldUnit: string, # Optional. Unit of the average yield value attribute.
  avgSeedPopulationValue: number, # Optional. Average seed population value of the seasonal field.
  avgSeedPopulationUnit: string, # Optional. Unit of average seed population value attribute.
  plantingDateTime: string (ISO 8601 Format), # Optional. Planting datetime, sample format: yyyy-MM-ddTHH:mm:ssZ.
  id: string, # Optional. Unique resource ID.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
}
</code>

</remarks>
    </member>
    <member name="GetSeasonalFields(IEnumerable,IEnumerable,IEnumerable,IEnumerable,IEnumerable,Double,Double,String,Double,Double,String,DateTimeOffset,DateTimeOffset,IEnumerable,IEnumerable,IEnumerable,IEnumerable,DateTimeOffset,DateTimeOffset,DateTimeOffset,DateTimeOffset,Int32,String,RequestContext)">
<example>
This sample shows how to call GetSeasonalFields and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new SeasonalFieldsClient(endpoint, credential);

foreach (var data in client.GetSeasonalFields())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetSeasonalFields with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new SeasonalFieldsClient(endpoint, credential);

foreach (var data in client.GetSeasonalFields(new String[]{"<farmIds>"}, new String[]{"<fieldIds>"}, new String[]{"<seasonIds>"}, new String[]{"<cropVarietyIds>"}, new String[]{"<cropIds>"}, 1234, 1234, "<avgYieldUnit>", 1234, 1234, "<avgSeedPopulationUnit>", DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, new String[]{"<ids>"}, new String[]{"<names>"}, new String[]{"<propertyFilters>"}, new String[]{"<statuses>"}, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 1234, "<skipToken>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("farmerId").ToString());
    Console.WriteLine(result.GetProperty("primaryBoundaryId").ToString());
    Console.WriteLine(result.GetProperty("boundaryIds")[0].ToString());
    Console.WriteLine(result.GetProperty("farmId").ToString());
    Console.WriteLine(result.GetProperty("fieldId").ToString());
    Console.WriteLine(result.GetProperty("seasonId").ToString());
    Console.WriteLine(result.GetProperty("cropVarietyIds")[0].ToString());
    Console.WriteLine(result.GetProperty("cropId").ToString());
    Console.WriteLine(result.GetProperty("avgYieldValue").ToString());
    Console.WriteLine(result.GetProperty("avgYieldUnit").ToString());
    Console.WriteLine(result.GetProperty("avgSeedPopulationValue").ToString());
    Console.WriteLine(result.GetProperty("avgSeedPopulationUnit").ToString());
    Console.WriteLine(result.GetProperty("plantingDateTime").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("eTag").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>SeasonalFieldListResponseValue</c>:
<code>{
  farmerId: string, # Optional. Farmer ID.
  primaryBoundaryId: string, # Optional. Primary boundary id.
  boundaryIds: [string], # Optional. Boundary Ids.
  farmId: string, # Optional. ID of the associated Farm.
  fieldId: string, # Optional. ID of the associated Field.
  seasonId: string, # Optional. ID of the season it belongs to.
  cropVarietyIds: [string], # Optional. CropVariety ids.
  cropId: string, # Optional. ID of the crop it belongs to.
  avgYieldValue: number, # Optional. Average yield value of the seasonal field.
  avgYieldUnit: string, # Optional. Unit of the average yield value attribute.
  avgSeedPopulationValue: number, # Optional. Average seed population value of the seasonal field.
  avgSeedPopulationUnit: string, # Optional. Unit of average seed population value attribute.
  plantingDateTime: string (ISO 8601 Format), # Optional. Planting datetime, sample format: yyyy-MM-ddTHH:mm:ssZ.
  id: string, # Optional. Unique resource ID.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
}
</code>

</remarks>
    </member>
    <member name="CreateCascadeDeleteJobAsync(WaitUntil,String,String,String,RequestContext)">
<example>
This sample shows how to call CreateCascadeDeleteJobAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new SeasonalFieldsClient(endpoint, credential);

var operation = await client.CreateCascadeDeleteJobAsync(WaitUntil.Started, "<jobId>", "<farmerId>", "<seasonalFieldId>");

BinaryData data = await operation.WaitForCompletionAsync();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("farmerId").ToString());
Console.WriteLine(result.GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("resourceType").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
Console.WriteLine(result.GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>CascadeDeleteJob</c>:
<code>{
  farmerId: string, # Required. Farmer ID.
  resourceId: string, # Required. The id of the resource.
  resourceType: string, # Required. The type of the resource.
  id: string, # Optional. Unique job id.
  status: string, # Optional. Status of the job.
Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
  durationInSeconds: number, # Optional. Duration of the job in seconds.
  message: string, # Optional. Status message to capture more details of the job.
  createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
}
</code>

</remarks>
    </member>
    <member name="CreateCascadeDeleteJob(WaitUntil,String,String,String,RequestContext)">
<example>
This sample shows how to call CreateCascadeDeleteJob with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new SeasonalFieldsClient(endpoint, credential);

var operation = client.CreateCascadeDeleteJob(WaitUntil.Started, "<jobId>", "<farmerId>", "<seasonalFieldId>");

BinaryData data = operation.WaitForCompletion();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("farmerId").ToString());
Console.WriteLine(result.GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("resourceType").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
Console.WriteLine(result.GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>CascadeDeleteJob</c>:
<code>{
  farmerId: string, # Required. Farmer ID.
  resourceId: string, # Required. The id of the resource.
  resourceType: string, # Required. The type of the resource.
  id: string, # Optional. Unique job id.
  status: string, # Optional. Status of the job.
Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
  durationInSeconds: number, # Optional. Duration of the job in seconds.
  message: string, # Optional. Status message to capture more details of the job.
  createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
}
</code>

</remarks>
    </member>
  </members>
</doc>