<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetPlantTissueAnalysisAsync(String,String,RequestContext)">
<example>
This sample shows how to call GetPlantTissueAnalysisAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new FarmBeatsClient(credential).GetPlantTissueAnalysesClient(<2022-11-01-preview>);

Response response = await client.GetPlantTissueAnalysisAsync("<partyId>", "<plantTissueAnalysisId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("partyId").ToString());
Console.WriteLine(result.GetProperty("fieldId").ToString());
Console.WriteLine(result.GetProperty("cropId").ToString());
Console.WriteLine(result.GetProperty("cropProductId").ToString());
Console.WriteLine(result.GetProperty("seasonId").ToString());
Console.WriteLine(result.GetProperty("plantingDateTime").ToString());
Console.WriteLine(result.GetProperty("growthStage").ToString());
Console.WriteLine(result.GetProperty("plantPart").ToString());
Console.WriteLine(result.GetProperty("plantPosition").ToString());
Console.WriteLine(result.GetProperty("plantAppearance").ToString());
Console.WriteLine(result.GetProperty("sampleCollectionCondition").ToString());
Console.WriteLine(result.GetProperty("sampleCollectionDateTime").ToString());
Console.WriteLine(result.GetProperty("sampleReceivedDateTime").ToString());
Console.WriteLine(result.GetProperty("sampleTestResultDateTime").ToString());
Console.WriteLine(result.GetProperty("labDetails").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("labDetails").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("labDetails").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("labDetails").GetProperty("address").ToString());
Console.WriteLine(result.GetProperty("attachmentsLink").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("eTag").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("modifiedBy").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>PlantTissueAnalysis</c>:
<code>{
  partyId: string, # Optional. Id of the associated Party.
  fieldId: string, # Optional. Id of the associated Field.
  cropId: string, # Optional. Id of the associated Crop.
  cropProductId: string, # Optional. Id of the associated Crop product.
  seasonId: string, # Optional. Id of the associated Season.
  plantingDateTime: string (ISO 8601 Format), # Optional. Planting datetime for this plant tissue analysis.
  growthStage: string, # Optional. Growth stage for this plant tissue analysis.
  plantPart: string, # Optional. Plant part for this plant tissue analysis.
  plantPosition: string, # Optional. Plant position for this plant tissue analysis.
  plantAppearance: string, # Optional. Plant appearance for this plant tissue analysis.
  sampleCollectionCondition: string, # Optional. Sample collection condition for this plant tissue analysis.
  sampleCollectionDateTime: string (ISO 8601 Format), # Optional. Sample collection dateTime for this plant tissue analysis.
  sampleReceivedDateTime: string (ISO 8601 Format), # Optional. Sample received dateTime.
  sampleTestResultDateTime: string (ISO 8601 Format), # Optional. Sample test result dateTime for this plant tissue analysis.
  labDetails: {
    code: string, # Optional. Code of the resource.
    name: string, # Optional. Name of the resource.
    description: string, # Optional. Description of the resource.
    address: string, # Optional. Address of the resource.
  }, # Optional. Model for representing LabDetails object.
  attachmentsLink: string, # Optional. Link for attachments.
  id: string, # Optional. Unique resource ID.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
  source: string, # Optional. Source of the resource.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  createdBy: string, # Optional. Created by user/tenant id.
  modifiedBy: string, # Optional. Modified by user/tenant id.
  properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string,
numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
}
</code>

</remarks>
    </member>
    <member name="GetPlantTissueAnalysis(String,String,RequestContext)">
<example>
This sample shows how to call GetPlantTissueAnalysis with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new FarmBeatsClient(credential).GetPlantTissueAnalysesClient(<2022-11-01-preview>);

Response response = client.GetPlantTissueAnalysis("<partyId>", "<plantTissueAnalysisId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("partyId").ToString());
Console.WriteLine(result.GetProperty("fieldId").ToString());
Console.WriteLine(result.GetProperty("cropId").ToString());
Console.WriteLine(result.GetProperty("cropProductId").ToString());
Console.WriteLine(result.GetProperty("seasonId").ToString());
Console.WriteLine(result.GetProperty("plantingDateTime").ToString());
Console.WriteLine(result.GetProperty("growthStage").ToString());
Console.WriteLine(result.GetProperty("plantPart").ToString());
Console.WriteLine(result.GetProperty("plantPosition").ToString());
Console.WriteLine(result.GetProperty("plantAppearance").ToString());
Console.WriteLine(result.GetProperty("sampleCollectionCondition").ToString());
Console.WriteLine(result.GetProperty("sampleCollectionDateTime").ToString());
Console.WriteLine(result.GetProperty("sampleReceivedDateTime").ToString());
Console.WriteLine(result.GetProperty("sampleTestResultDateTime").ToString());
Console.WriteLine(result.GetProperty("labDetails").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("labDetails").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("labDetails").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("labDetails").GetProperty("address").ToString());
Console.WriteLine(result.GetProperty("attachmentsLink").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("eTag").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("modifiedBy").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>PlantTissueAnalysis</c>:
<code>{
  partyId: string, # Optional. Id of the associated Party.
  fieldId: string, # Optional. Id of the associated Field.
  cropId: string, # Optional. Id of the associated Crop.
  cropProductId: string, # Optional. Id of the associated Crop product.
  seasonId: string, # Optional. Id of the associated Season.
  plantingDateTime: string (ISO 8601 Format), # Optional. Planting datetime for this plant tissue analysis.
  growthStage: string, # Optional. Growth stage for this plant tissue analysis.
  plantPart: string, # Optional. Plant part for this plant tissue analysis.
  plantPosition: string, # Optional. Plant position for this plant tissue analysis.
  plantAppearance: string, # Optional. Plant appearance for this plant tissue analysis.
  sampleCollectionCondition: string, # Optional. Sample collection condition for this plant tissue analysis.
  sampleCollectionDateTime: string (ISO 8601 Format), # Optional. Sample collection dateTime for this plant tissue analysis.
  sampleReceivedDateTime: string (ISO 8601 Format), # Optional. Sample received dateTime.
  sampleTestResultDateTime: string (ISO 8601 Format), # Optional. Sample test result dateTime for this plant tissue analysis.
  labDetails: {
    code: string, # Optional. Code of the resource.
    name: string, # Optional. Name of the resource.
    description: string, # Optional. Description of the resource.
    address: string, # Optional. Address of the resource.
  }, # Optional. Model for representing LabDetails object.
  attachmentsLink: string, # Optional. Link for attachments.
  id: string, # Optional. Unique resource ID.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
  source: string, # Optional. Source of the resource.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  createdBy: string, # Optional. Created by user/tenant id.
  modifiedBy: string, # Optional. Modified by user/tenant id.
  properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string,
numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
}
</code>

</remarks>
    </member>
    <member name="CreateOrUpdateAsync(String,String,RequestContent,RequestContext)">
<example>
This sample shows how to call CreateOrUpdateAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new FarmBeatsClient(credential).GetPlantTissueAnalysesClient(<2022-11-01-preview>);

var data = new {};

Response response = await client.CreateOrUpdateAsync("<partyId>", "<plantTissueAnalysisId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateOrUpdateAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new FarmBeatsClient(credential).GetPlantTissueAnalysesClient(<2022-11-01-preview>);

var data = new {
    fieldId = "<fieldId>",
    cropId = "<cropId>",
    cropProductId = "<cropProductId>",
    seasonId = "<seasonId>",
    plantingDateTime = "2022-05-10T18:57:31.2311892Z",
    growthStage = "<growthStage>",
    plantPart = "<plantPart>",
    plantPosition = "<plantPosition>",
    plantAppearance = "<plantAppearance>",
    sampleCollectionCondition = "<sampleCollectionCondition>",
    sampleCollectionDateTime = "2022-05-10T18:57:31.2311892Z",
    sampleReceivedDateTime = "2022-05-10T18:57:31.2311892Z",
    sampleTestResultDateTime = "2022-05-10T18:57:31.2311892Z",
    labDetails = new {
        code = "<code>",
        name = "<name>",
        description = "<description>",
        address = "<address>",
    },
    status = "<status>",
    source = "<source>",
    name = "<name>",
    description = "<description>",
    properties = new {
        key = new {},
    },
};

Response response = await client.CreateOrUpdateAsync("<partyId>", "<plantTissueAnalysisId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("partyId").ToString());
Console.WriteLine(result.GetProperty("fieldId").ToString());
Console.WriteLine(result.GetProperty("cropId").ToString());
Console.WriteLine(result.GetProperty("cropProductId").ToString());
Console.WriteLine(result.GetProperty("seasonId").ToString());
Console.WriteLine(result.GetProperty("plantingDateTime").ToString());
Console.WriteLine(result.GetProperty("growthStage").ToString());
Console.WriteLine(result.GetProperty("plantPart").ToString());
Console.WriteLine(result.GetProperty("plantPosition").ToString());
Console.WriteLine(result.GetProperty("plantAppearance").ToString());
Console.WriteLine(result.GetProperty("sampleCollectionCondition").ToString());
Console.WriteLine(result.GetProperty("sampleCollectionDateTime").ToString());
Console.WriteLine(result.GetProperty("sampleReceivedDateTime").ToString());
Console.WriteLine(result.GetProperty("sampleTestResultDateTime").ToString());
Console.WriteLine(result.GetProperty("labDetails").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("labDetails").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("labDetails").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("labDetails").GetProperty("address").ToString());
Console.WriteLine(result.GetProperty("attachmentsLink").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("eTag").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("modifiedBy").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>PlantTissueAnalysis</c>:
<code>{
  partyId: string, # Optional. Id of the associated Party.
  fieldId: string, # Optional. Id of the associated Field.
  cropId: string, # Optional. Id of the associated Crop.
  cropProductId: string, # Optional. Id of the associated Crop product.
  seasonId: string, # Optional. Id of the associated Season.
  plantingDateTime: string (ISO 8601 Format), # Optional. Planting datetime for this plant tissue analysis.
  growthStage: string, # Optional. Growth stage for this plant tissue analysis.
  plantPart: string, # Optional. Plant part for this plant tissue analysis.
  plantPosition: string, # Optional. Plant position for this plant tissue analysis.
  plantAppearance: string, # Optional. Plant appearance for this plant tissue analysis.
  sampleCollectionCondition: string, # Optional. Sample collection condition for this plant tissue analysis.
  sampleCollectionDateTime: string (ISO 8601 Format), # Optional. Sample collection dateTime for this plant tissue analysis.
  sampleReceivedDateTime: string (ISO 8601 Format), # Optional. Sample received dateTime.
  sampleTestResultDateTime: string (ISO 8601 Format), # Optional. Sample test result dateTime for this plant tissue analysis.
  labDetails: {
    code: string, # Optional. Code of the resource.
    name: string, # Optional. Name of the resource.
    description: string, # Optional. Description of the resource.
    address: string, # Optional. Address of the resource.
  }, # Optional. Model for representing LabDetails object.
  attachmentsLink: string, # Optional. Link for attachments.
  id: string, # Optional. Unique resource ID.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
  source: string, # Optional. Source of the resource.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  createdBy: string, # Optional. Created by user/tenant id.
  modifiedBy: string, # Optional. Modified by user/tenant id.
  properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string,
numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
}
</code>

Response Body:

Schema for <c>PlantTissueAnalysis</c>:
<code>{
  partyId: string, # Optional. Id of the associated Party.
  fieldId: string, # Optional. Id of the associated Field.
  cropId: string, # Optional. Id of the associated Crop.
  cropProductId: string, # Optional. Id of the associated Crop product.
  seasonId: string, # Optional. Id of the associated Season.
  plantingDateTime: string (ISO 8601 Format), # Optional. Planting datetime for this plant tissue analysis.
  growthStage: string, # Optional. Growth stage for this plant tissue analysis.
  plantPart: string, # Optional. Plant part for this plant tissue analysis.
  plantPosition: string, # Optional. Plant position for this plant tissue analysis.
  plantAppearance: string, # Optional. Plant appearance for this plant tissue analysis.
  sampleCollectionCondition: string, # Optional. Sample collection condition for this plant tissue analysis.
  sampleCollectionDateTime: string (ISO 8601 Format), # Optional. Sample collection dateTime for this plant tissue analysis.
  sampleReceivedDateTime: string (ISO 8601 Format), # Optional. Sample received dateTime.
  sampleTestResultDateTime: string (ISO 8601 Format), # Optional. Sample test result dateTime for this plant tissue analysis.
  labDetails: {
    code: string, # Optional. Code of the resource.
    name: string, # Optional. Name of the resource.
    description: string, # Optional. Description of the resource.
    address: string, # Optional. Address of the resource.
  }, # Optional. Model for representing LabDetails object.
  attachmentsLink: string, # Optional. Link for attachments.
  id: string, # Optional. Unique resource ID.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
  source: string, # Optional. Source of the resource.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  createdBy: string, # Optional. Created by user/tenant id.
  modifiedBy: string, # Optional. Modified by user/tenant id.
  properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string,
numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
}
</code>

</remarks>
    </member>
    <member name="CreateOrUpdate(String,String,RequestContent,RequestContext)">
<example>
This sample shows how to call CreateOrUpdate with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new FarmBeatsClient(credential).GetPlantTissueAnalysesClient(<2022-11-01-preview>);

var data = new {};

Response response = client.CreateOrUpdate("<partyId>", "<plantTissueAnalysisId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateOrUpdate with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new FarmBeatsClient(credential).GetPlantTissueAnalysesClient(<2022-11-01-preview>);

var data = new {
    fieldId = "<fieldId>",
    cropId = "<cropId>",
    cropProductId = "<cropProductId>",
    seasonId = "<seasonId>",
    plantingDateTime = "2022-05-10T18:57:31.2311892Z",
    growthStage = "<growthStage>",
    plantPart = "<plantPart>",
    plantPosition = "<plantPosition>",
    plantAppearance = "<plantAppearance>",
    sampleCollectionCondition = "<sampleCollectionCondition>",
    sampleCollectionDateTime = "2022-05-10T18:57:31.2311892Z",
    sampleReceivedDateTime = "2022-05-10T18:57:31.2311892Z",
    sampleTestResultDateTime = "2022-05-10T18:57:31.2311892Z",
    labDetails = new {
        code = "<code>",
        name = "<name>",
        description = "<description>",
        address = "<address>",
    },
    status = "<status>",
    source = "<source>",
    name = "<name>",
    description = "<description>",
    properties = new {
        key = new {},
    },
};

Response response = client.CreateOrUpdate("<partyId>", "<plantTissueAnalysisId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("partyId").ToString());
Console.WriteLine(result.GetProperty("fieldId").ToString());
Console.WriteLine(result.GetProperty("cropId").ToString());
Console.WriteLine(result.GetProperty("cropProductId").ToString());
Console.WriteLine(result.GetProperty("seasonId").ToString());
Console.WriteLine(result.GetProperty("plantingDateTime").ToString());
Console.WriteLine(result.GetProperty("growthStage").ToString());
Console.WriteLine(result.GetProperty("plantPart").ToString());
Console.WriteLine(result.GetProperty("plantPosition").ToString());
Console.WriteLine(result.GetProperty("plantAppearance").ToString());
Console.WriteLine(result.GetProperty("sampleCollectionCondition").ToString());
Console.WriteLine(result.GetProperty("sampleCollectionDateTime").ToString());
Console.WriteLine(result.GetProperty("sampleReceivedDateTime").ToString());
Console.WriteLine(result.GetProperty("sampleTestResultDateTime").ToString());
Console.WriteLine(result.GetProperty("labDetails").GetProperty("code").ToString());
Console.WriteLine(result.GetProperty("labDetails").GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("labDetails").GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("labDetails").GetProperty("address").ToString());
Console.WriteLine(result.GetProperty("attachmentsLink").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("eTag").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("modifiedBy").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>PlantTissueAnalysis</c>:
<code>{
  partyId: string, # Optional. Id of the associated Party.
  fieldId: string, # Optional. Id of the associated Field.
  cropId: string, # Optional. Id of the associated Crop.
  cropProductId: string, # Optional. Id of the associated Crop product.
  seasonId: string, # Optional. Id of the associated Season.
  plantingDateTime: string (ISO 8601 Format), # Optional. Planting datetime for this plant tissue analysis.
  growthStage: string, # Optional. Growth stage for this plant tissue analysis.
  plantPart: string, # Optional. Plant part for this plant tissue analysis.
  plantPosition: string, # Optional. Plant position for this plant tissue analysis.
  plantAppearance: string, # Optional. Plant appearance for this plant tissue analysis.
  sampleCollectionCondition: string, # Optional. Sample collection condition for this plant tissue analysis.
  sampleCollectionDateTime: string (ISO 8601 Format), # Optional. Sample collection dateTime for this plant tissue analysis.
  sampleReceivedDateTime: string (ISO 8601 Format), # Optional. Sample received dateTime.
  sampleTestResultDateTime: string (ISO 8601 Format), # Optional. Sample test result dateTime for this plant tissue analysis.
  labDetails: {
    code: string, # Optional. Code of the resource.
    name: string, # Optional. Name of the resource.
    description: string, # Optional. Description of the resource.
    address: string, # Optional. Address of the resource.
  }, # Optional. Model for representing LabDetails object.
  attachmentsLink: string, # Optional. Link for attachments.
  id: string, # Optional. Unique resource ID.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
  source: string, # Optional. Source of the resource.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  createdBy: string, # Optional. Created by user/tenant id.
  modifiedBy: string, # Optional. Modified by user/tenant id.
  properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string,
numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
}
</code>

Response Body:

Schema for <c>PlantTissueAnalysis</c>:
<code>{
  partyId: string, # Optional. Id of the associated Party.
  fieldId: string, # Optional. Id of the associated Field.
  cropId: string, # Optional. Id of the associated Crop.
  cropProductId: string, # Optional. Id of the associated Crop product.
  seasonId: string, # Optional. Id of the associated Season.
  plantingDateTime: string (ISO 8601 Format), # Optional. Planting datetime for this plant tissue analysis.
  growthStage: string, # Optional. Growth stage for this plant tissue analysis.
  plantPart: string, # Optional. Plant part for this plant tissue analysis.
  plantPosition: string, # Optional. Plant position for this plant tissue analysis.
  plantAppearance: string, # Optional. Plant appearance for this plant tissue analysis.
  sampleCollectionCondition: string, # Optional. Sample collection condition for this plant tissue analysis.
  sampleCollectionDateTime: string (ISO 8601 Format), # Optional. Sample collection dateTime for this plant tissue analysis.
  sampleReceivedDateTime: string (ISO 8601 Format), # Optional. Sample received dateTime.
  sampleTestResultDateTime: string (ISO 8601 Format), # Optional. Sample test result dateTime for this plant tissue analysis.
  labDetails: {
    code: string, # Optional. Code of the resource.
    name: string, # Optional. Name of the resource.
    description: string, # Optional. Description of the resource.
    address: string, # Optional. Address of the resource.
  }, # Optional. Model for representing LabDetails object.
  attachmentsLink: string, # Optional. Link for attachments.
  id: string, # Optional. Unique resource ID.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
  source: string, # Optional. Source of the resource.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  createdBy: string, # Optional. Created by user/tenant id.
  modifiedBy: string, # Optional. Modified by user/tenant id.
  properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string,
numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
}
</code>

</remarks>
    </member>
    <member name="DeleteAsync(String,String,RequestContext)">
<example>
This sample shows how to call DeleteAsync with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new FarmBeatsClient(credential).GetPlantTissueAnalysesClient(<2022-11-01-preview>);

Response response = await client.DeleteAsync("<partyId>", "<plantTissueAnalysisId>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="Delete(String,String,RequestContext)">
<example>
This sample shows how to call Delete with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new FarmBeatsClient(credential).GetPlantTissueAnalysesClient(<2022-11-01-preview>);

Response response = client.Delete("<partyId>", "<plantTissueAnalysisId>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="GetCascadeDeleteJobDetailsAsync(String,RequestContext)">
<example>
This sample shows how to call GetCascadeDeleteJobDetailsAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new FarmBeatsClient(credential).GetPlantTissueAnalysesClient(<2022-11-01-preview>);

Response response = await client.GetCascadeDeleteJobDetailsAsync("<jobId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("partyId").ToString());
Console.WriteLine(result.GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("resourceType").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
Console.WriteLine(result.GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errorCode").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("endTime").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>CascadeDeleteJob</c>:
<code>{
  partyId: string, # Required. Party Id.
  resourceId: string, # Required. The id of the resource.
  resourceType: string, # Required. The type of the resource.
  id: string, # Optional. Unique job id.
  status: &quot;Waiting&quot; | &quot;Running&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Cancelled&quot;, # Optional. Status of the job.
Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
  durationInSeconds: number, # Optional. Duration of the job in seconds.
  message: string, # Optional. Status message to capture more details of the job.
  errorCode: string, # Optional. Error Code when job failed.
  createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
}
</code>

</remarks>
    </member>
    <member name="GetCascadeDeleteJobDetails(String,RequestContext)">
<example>
This sample shows how to call GetCascadeDeleteJobDetails with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new FarmBeatsClient(credential).GetPlantTissueAnalysesClient(<2022-11-01-preview>);

Response response = client.GetCascadeDeleteJobDetails("<jobId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("partyId").ToString());
Console.WriteLine(result.GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("resourceType").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
Console.WriteLine(result.GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errorCode").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("endTime").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>CascadeDeleteJob</c>:
<code>{
  partyId: string, # Required. Party Id.
  resourceId: string, # Required. The id of the resource.
  resourceType: string, # Required. The type of the resource.
  id: string, # Optional. Unique job id.
  status: &quot;Waiting&quot; | &quot;Running&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Cancelled&quot;, # Optional. Status of the job.
Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
  durationInSeconds: number, # Optional. Duration of the job in seconds.
  message: string, # Optional. Status message to capture more details of the job.
  errorCode: string, # Optional. Error Code when job failed.
  createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
}
</code>

</remarks>
    </member>
    <member name="GetPlantTissueAnalysesByPartyIdAsync(String,IEnumerable,IEnumerable,IEnumerable,IEnumerable,IEnumerable,IEnumerable,IEnumerable,IEnumerable,DateTimeOffset,DateTimeOffset,DateTimeOffset,DateTimeOffset,Int32,String,RequestContext)">
<example>
This sample shows how to call GetPlantTissueAnalysesByPartyIdAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new FarmBeatsClient(credential).GetPlantTissueAnalysesClient(<2022-11-01-preview>);

await foreach (var data in client.GetPlantTissueAnalysesByPartyIdAsync("<partyId>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetPlantTissueAnalysesByPartyIdAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new FarmBeatsClient(credential).GetPlantTissueAnalysesClient(<2022-11-01-preview>);

await foreach (var data in client.GetPlantTissueAnalysesByPartyIdAsync("<partyId>", new String[]{"<seasonIds>"}, new String[]{"<cropIds>"}, new String[]{"<cropProductsIds>"}, new String[]{"<fieldIds>"}, new String[]{"<ids>"}, new String[]{"<names>"}, new String[]{"<propertyFilters>"}, new String[]{"<statuses>"}, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 1234, "<skipToken>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("partyId").ToString());
    Console.WriteLine(result.GetProperty("fieldId").ToString());
    Console.WriteLine(result.GetProperty("cropId").ToString());
    Console.WriteLine(result.GetProperty("cropProductId").ToString());
    Console.WriteLine(result.GetProperty("seasonId").ToString());
    Console.WriteLine(result.GetProperty("plantingDateTime").ToString());
    Console.WriteLine(result.GetProperty("growthStage").ToString());
    Console.WriteLine(result.GetProperty("plantPart").ToString());
    Console.WriteLine(result.GetProperty("plantPosition").ToString());
    Console.WriteLine(result.GetProperty("plantAppearance").ToString());
    Console.WriteLine(result.GetProperty("sampleCollectionCondition").ToString());
    Console.WriteLine(result.GetProperty("sampleCollectionDateTime").ToString());
    Console.WriteLine(result.GetProperty("sampleReceivedDateTime").ToString());
    Console.WriteLine(result.GetProperty("sampleTestResultDateTime").ToString());
    Console.WriteLine(result.GetProperty("labDetails").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("labDetails").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("labDetails").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("labDetails").GetProperty("address").ToString());
    Console.WriteLine(result.GetProperty("attachmentsLink").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("eTag").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
    Console.WriteLine(result.GetProperty("source").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("createdBy").ToString());
    Console.WriteLine(result.GetProperty("modifiedBy").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>PlantTissueAnalysisListResponseValue</c>:
<code>{
  partyId: string, # Optional. Id of the associated Party.
  fieldId: string, # Optional. Id of the associated Field.
  cropId: string, # Optional. Id of the associated Crop.
  cropProductId: string, # Optional. Id of the associated Crop product.
  seasonId: string, # Optional. Id of the associated Season.
  plantingDateTime: string (ISO 8601 Format), # Optional. Planting datetime for this plant tissue analysis.
  growthStage: string, # Optional. Growth stage for this plant tissue analysis.
  plantPart: string, # Optional. Plant part for this plant tissue analysis.
  plantPosition: string, # Optional. Plant position for this plant tissue analysis.
  plantAppearance: string, # Optional. Plant appearance for this plant tissue analysis.
  sampleCollectionCondition: string, # Optional. Sample collection condition for this plant tissue analysis.
  sampleCollectionDateTime: string (ISO 8601 Format), # Optional. Sample collection dateTime for this plant tissue analysis.
  sampleReceivedDateTime: string (ISO 8601 Format), # Optional. Sample received dateTime.
  sampleTestResultDateTime: string (ISO 8601 Format), # Optional. Sample test result dateTime for this plant tissue analysis.
  labDetails: {
    code: string, # Optional. Code of the resource.
    name: string, # Optional. Name of the resource.
    description: string, # Optional. Description of the resource.
    address: string, # Optional. Address of the resource.
  }, # Optional. Model for representing LabDetails object.
  attachmentsLink: string, # Optional. Link for attachments.
  id: string, # Optional. Unique resource ID.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
  source: string, # Optional. Source of the resource.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  createdBy: string, # Optional. Created by user/tenant id.
  modifiedBy: string, # Optional. Modified by user/tenant id.
  properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string,
numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
}
</code>

</remarks>
    </member>
    <member name="GetPlantTissueAnalysesByPartyId(String,IEnumerable,IEnumerable,IEnumerable,IEnumerable,IEnumerable,IEnumerable,IEnumerable,IEnumerable,DateTimeOffset,DateTimeOffset,DateTimeOffset,DateTimeOffset,Int32,String,RequestContext)">
<example>
This sample shows how to call GetPlantTissueAnalysesByPartyId with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new FarmBeatsClient(credential).GetPlantTissueAnalysesClient(<2022-11-01-preview>);

foreach (var data in client.GetPlantTissueAnalysesByPartyId("<partyId>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetPlantTissueAnalysesByPartyId with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new FarmBeatsClient(credential).GetPlantTissueAnalysesClient(<2022-11-01-preview>);

foreach (var data in client.GetPlantTissueAnalysesByPartyId("<partyId>", new String[]{"<seasonIds>"}, new String[]{"<cropIds>"}, new String[]{"<cropProductsIds>"}, new String[]{"<fieldIds>"}, new String[]{"<ids>"}, new String[]{"<names>"}, new String[]{"<propertyFilters>"}, new String[]{"<statuses>"}, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 1234, "<skipToken>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("partyId").ToString());
    Console.WriteLine(result.GetProperty("fieldId").ToString());
    Console.WriteLine(result.GetProperty("cropId").ToString());
    Console.WriteLine(result.GetProperty("cropProductId").ToString());
    Console.WriteLine(result.GetProperty("seasonId").ToString());
    Console.WriteLine(result.GetProperty("plantingDateTime").ToString());
    Console.WriteLine(result.GetProperty("growthStage").ToString());
    Console.WriteLine(result.GetProperty("plantPart").ToString());
    Console.WriteLine(result.GetProperty("plantPosition").ToString());
    Console.WriteLine(result.GetProperty("plantAppearance").ToString());
    Console.WriteLine(result.GetProperty("sampleCollectionCondition").ToString());
    Console.WriteLine(result.GetProperty("sampleCollectionDateTime").ToString());
    Console.WriteLine(result.GetProperty("sampleReceivedDateTime").ToString());
    Console.WriteLine(result.GetProperty("sampleTestResultDateTime").ToString());
    Console.WriteLine(result.GetProperty("labDetails").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("labDetails").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("labDetails").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("labDetails").GetProperty("address").ToString());
    Console.WriteLine(result.GetProperty("attachmentsLink").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("eTag").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
    Console.WriteLine(result.GetProperty("source").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("createdBy").ToString());
    Console.WriteLine(result.GetProperty("modifiedBy").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>PlantTissueAnalysisListResponseValue</c>:
<code>{
  partyId: string, # Optional. Id of the associated Party.
  fieldId: string, # Optional. Id of the associated Field.
  cropId: string, # Optional. Id of the associated Crop.
  cropProductId: string, # Optional. Id of the associated Crop product.
  seasonId: string, # Optional. Id of the associated Season.
  plantingDateTime: string (ISO 8601 Format), # Optional. Planting datetime for this plant tissue analysis.
  growthStage: string, # Optional. Growth stage for this plant tissue analysis.
  plantPart: string, # Optional. Plant part for this plant tissue analysis.
  plantPosition: string, # Optional. Plant position for this plant tissue analysis.
  plantAppearance: string, # Optional. Plant appearance for this plant tissue analysis.
  sampleCollectionCondition: string, # Optional. Sample collection condition for this plant tissue analysis.
  sampleCollectionDateTime: string (ISO 8601 Format), # Optional. Sample collection dateTime for this plant tissue analysis.
  sampleReceivedDateTime: string (ISO 8601 Format), # Optional. Sample received dateTime.
  sampleTestResultDateTime: string (ISO 8601 Format), # Optional. Sample test result dateTime for this plant tissue analysis.
  labDetails: {
    code: string, # Optional. Code of the resource.
    name: string, # Optional. Name of the resource.
    description: string, # Optional. Description of the resource.
    address: string, # Optional. Address of the resource.
  }, # Optional. Model for representing LabDetails object.
  attachmentsLink: string, # Optional. Link for attachments.
  id: string, # Optional. Unique resource ID.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
  source: string, # Optional. Source of the resource.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  createdBy: string, # Optional. Created by user/tenant id.
  modifiedBy: string, # Optional. Modified by user/tenant id.
  properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string,
numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
}
</code>

</remarks>
    </member>
    <member name="GetPlantTissueAnalysesAsync(IEnumerable,IEnumerable,IEnumerable,IEnumerable,IEnumerable,IEnumerable,IEnumerable,IEnumerable,DateTimeOffset,DateTimeOffset,DateTimeOffset,DateTimeOffset,Int32,String,RequestContext)">
<example>
This sample shows how to call GetPlantTissueAnalysesAsync and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new FarmBeatsClient(credential).GetPlantTissueAnalysesClient(<2022-11-01-preview>);

await foreach (var data in client.GetPlantTissueAnalysesAsync())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetPlantTissueAnalysesAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new FarmBeatsClient(credential).GetPlantTissueAnalysesClient(<2022-11-01-preview>);

await foreach (var data in client.GetPlantTissueAnalysesAsync(new String[]{"<seasonIds>"}, new String[]{"<cropIds>"}, new String[]{"<cropProductsIds>"}, new String[]{"<fieldIds>"}, new String[]{"<ids>"}, new String[]{"<names>"}, new String[]{"<propertyFilters>"}, new String[]{"<statuses>"}, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 1234, "<skipToken>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("partyId").ToString());
    Console.WriteLine(result.GetProperty("fieldId").ToString());
    Console.WriteLine(result.GetProperty("cropId").ToString());
    Console.WriteLine(result.GetProperty("cropProductId").ToString());
    Console.WriteLine(result.GetProperty("seasonId").ToString());
    Console.WriteLine(result.GetProperty("plantingDateTime").ToString());
    Console.WriteLine(result.GetProperty("growthStage").ToString());
    Console.WriteLine(result.GetProperty("plantPart").ToString());
    Console.WriteLine(result.GetProperty("plantPosition").ToString());
    Console.WriteLine(result.GetProperty("plantAppearance").ToString());
    Console.WriteLine(result.GetProperty("sampleCollectionCondition").ToString());
    Console.WriteLine(result.GetProperty("sampleCollectionDateTime").ToString());
    Console.WriteLine(result.GetProperty("sampleReceivedDateTime").ToString());
    Console.WriteLine(result.GetProperty("sampleTestResultDateTime").ToString());
    Console.WriteLine(result.GetProperty("labDetails").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("labDetails").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("labDetails").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("labDetails").GetProperty("address").ToString());
    Console.WriteLine(result.GetProperty("attachmentsLink").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("eTag").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
    Console.WriteLine(result.GetProperty("source").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("createdBy").ToString());
    Console.WriteLine(result.GetProperty("modifiedBy").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>PlantTissueAnalysisListResponseValue</c>:
<code>{
  partyId: string, # Optional. Id of the associated Party.
  fieldId: string, # Optional. Id of the associated Field.
  cropId: string, # Optional. Id of the associated Crop.
  cropProductId: string, # Optional. Id of the associated Crop product.
  seasonId: string, # Optional. Id of the associated Season.
  plantingDateTime: string (ISO 8601 Format), # Optional. Planting datetime for this plant tissue analysis.
  growthStage: string, # Optional. Growth stage for this plant tissue analysis.
  plantPart: string, # Optional. Plant part for this plant tissue analysis.
  plantPosition: string, # Optional. Plant position for this plant tissue analysis.
  plantAppearance: string, # Optional. Plant appearance for this plant tissue analysis.
  sampleCollectionCondition: string, # Optional. Sample collection condition for this plant tissue analysis.
  sampleCollectionDateTime: string (ISO 8601 Format), # Optional. Sample collection dateTime for this plant tissue analysis.
  sampleReceivedDateTime: string (ISO 8601 Format), # Optional. Sample received dateTime.
  sampleTestResultDateTime: string (ISO 8601 Format), # Optional. Sample test result dateTime for this plant tissue analysis.
  labDetails: {
    code: string, # Optional. Code of the resource.
    name: string, # Optional. Name of the resource.
    description: string, # Optional. Description of the resource.
    address: string, # Optional. Address of the resource.
  }, # Optional. Model for representing LabDetails object.
  attachmentsLink: string, # Optional. Link for attachments.
  id: string, # Optional. Unique resource ID.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
  source: string, # Optional. Source of the resource.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  createdBy: string, # Optional. Created by user/tenant id.
  modifiedBy: string, # Optional. Modified by user/tenant id.
  properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string,
numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
}
</code>

</remarks>
    </member>
    <member name="GetPlantTissueAnalyses(IEnumerable,IEnumerable,IEnumerable,IEnumerable,IEnumerable,IEnumerable,IEnumerable,IEnumerable,DateTimeOffset,DateTimeOffset,DateTimeOffset,DateTimeOffset,Int32,String,RequestContext)">
<example>
This sample shows how to call GetPlantTissueAnalyses and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new FarmBeatsClient(credential).GetPlantTissueAnalysesClient(<2022-11-01-preview>);

foreach (var data in client.GetPlantTissueAnalyses())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetPlantTissueAnalyses with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new FarmBeatsClient(credential).GetPlantTissueAnalysesClient(<2022-11-01-preview>);

foreach (var data in client.GetPlantTissueAnalyses(new String[]{"<seasonIds>"}, new String[]{"<cropIds>"}, new String[]{"<cropProductsIds>"}, new String[]{"<fieldIds>"}, new String[]{"<ids>"}, new String[]{"<names>"}, new String[]{"<propertyFilters>"}, new String[]{"<statuses>"}, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 1234, "<skipToken>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("partyId").ToString());
    Console.WriteLine(result.GetProperty("fieldId").ToString());
    Console.WriteLine(result.GetProperty("cropId").ToString());
    Console.WriteLine(result.GetProperty("cropProductId").ToString());
    Console.WriteLine(result.GetProperty("seasonId").ToString());
    Console.WriteLine(result.GetProperty("plantingDateTime").ToString());
    Console.WriteLine(result.GetProperty("growthStage").ToString());
    Console.WriteLine(result.GetProperty("plantPart").ToString());
    Console.WriteLine(result.GetProperty("plantPosition").ToString());
    Console.WriteLine(result.GetProperty("plantAppearance").ToString());
    Console.WriteLine(result.GetProperty("sampleCollectionCondition").ToString());
    Console.WriteLine(result.GetProperty("sampleCollectionDateTime").ToString());
    Console.WriteLine(result.GetProperty("sampleReceivedDateTime").ToString());
    Console.WriteLine(result.GetProperty("sampleTestResultDateTime").ToString());
    Console.WriteLine(result.GetProperty("labDetails").GetProperty("code").ToString());
    Console.WriteLine(result.GetProperty("labDetails").GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("labDetails").GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("labDetails").GetProperty("address").ToString());
    Console.WriteLine(result.GetProperty("attachmentsLink").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("eTag").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
    Console.WriteLine(result.GetProperty("source").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("createdBy").ToString());
    Console.WriteLine(result.GetProperty("modifiedBy").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>PlantTissueAnalysisListResponseValue</c>:
<code>{
  partyId: string, # Optional. Id of the associated Party.
  fieldId: string, # Optional. Id of the associated Field.
  cropId: string, # Optional. Id of the associated Crop.
  cropProductId: string, # Optional. Id of the associated Crop product.
  seasonId: string, # Optional. Id of the associated Season.
  plantingDateTime: string (ISO 8601 Format), # Optional. Planting datetime for this plant tissue analysis.
  growthStage: string, # Optional. Growth stage for this plant tissue analysis.
  plantPart: string, # Optional. Plant part for this plant tissue analysis.
  plantPosition: string, # Optional. Plant position for this plant tissue analysis.
  plantAppearance: string, # Optional. Plant appearance for this plant tissue analysis.
  sampleCollectionCondition: string, # Optional. Sample collection condition for this plant tissue analysis.
  sampleCollectionDateTime: string (ISO 8601 Format), # Optional. Sample collection dateTime for this plant tissue analysis.
  sampleReceivedDateTime: string (ISO 8601 Format), # Optional. Sample received dateTime.
  sampleTestResultDateTime: string (ISO 8601 Format), # Optional. Sample test result dateTime for this plant tissue analysis.
  labDetails: {
    code: string, # Optional. Code of the resource.
    name: string, # Optional. Name of the resource.
    description: string, # Optional. Description of the resource.
    address: string, # Optional. Address of the resource.
  }, # Optional. Model for representing LabDetails object.
  attachmentsLink: string, # Optional. Link for attachments.
  id: string, # Optional. Unique resource ID.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
  source: string, # Optional. Source of the resource.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  createdBy: string, # Optional. Created by user/tenant id.
  modifiedBy: string, # Optional. Modified by user/tenant id.
  properties: Dictionary&lt;string, any&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string,
numeral and datetime (yyyy-MM-ddTHH:mm:ssZ) values are supported.
}
</code>

</remarks>
    </member>
    <member name="CreateCascadeDeleteJobAsync(WaitUntil,String,String,String,RequestContext)">
<example>
This sample shows how to call CreateCascadeDeleteJobAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new FarmBeatsClient(credential).GetPlantTissueAnalysesClient(<2022-11-01-preview>);

var operation = await client.CreateCascadeDeleteJobAsync(WaitUntil.Completed, "<jobId>", "<partyId>", "<plantTissueAnalysisId>");

BinaryData data = operation.Value;
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("partyId").ToString());
Console.WriteLine(result.GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("resourceType").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
Console.WriteLine(result.GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errorCode").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("endTime").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>CascadeDeleteJob</c>:
<code>{
  partyId: string, # Required. Party Id.
  resourceId: string, # Required. The id of the resource.
  resourceType: string, # Required. The type of the resource.
  id: string, # Optional. Unique job id.
  status: &quot;Waiting&quot; | &quot;Running&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Cancelled&quot;, # Optional. Status of the job.
Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
  durationInSeconds: number, # Optional. Duration of the job in seconds.
  message: string, # Optional. Status message to capture more details of the job.
  errorCode: string, # Optional. Error Code when job failed.
  createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
}
</code>

</remarks>
    </member>
    <member name="CreateCascadeDeleteJob(WaitUntil,String,String,String,RequestContext)">
<example>
This sample shows how to call CreateCascadeDeleteJob with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var client = new FarmBeatsClient(credential).GetPlantTissueAnalysesClient(<2022-11-01-preview>);

var operation = client.CreateCascadeDeleteJob(WaitUntil.Completed, "<jobId>", "<partyId>", "<plantTissueAnalysisId>");

BinaryData data = operation.Value;
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("partyId").ToString());
Console.WriteLine(result.GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("resourceType").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
Console.WriteLine(result.GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errorCode").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("endTime").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>CascadeDeleteJob</c>:
<code>{
  partyId: string, # Required. Party Id.
  resourceId: string, # Required. The id of the resource.
  resourceType: string, # Required. The type of the resource.
  id: string, # Optional. Unique job id.
  status: &quot;Waiting&quot; | &quot;Running&quot; | &quot;Succeeded&quot; | &quot;Failed&quot; | &quot;Cancelled&quot;, # Optional. Status of the job.
Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
  durationInSeconds: number, # Optional. Duration of the job in seconds.
  message: string, # Optional. Status message to capture more details of the job.
  errorCode: string, # Optional. Error Code when job failed.
  createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
}
</code>

</remarks>
    </member>
  </members>
</doc>