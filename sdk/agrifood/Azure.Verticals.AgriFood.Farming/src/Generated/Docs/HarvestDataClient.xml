<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetHarvestDataAsync(String,String,RequestContext)">
<example>
This sample shows how to call GetHarvestDataAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new HarvestDataClient(endpoint, credential);

Response response = await client.GetHarvestDataAsync("<farmerId>", "<harvestDataId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("totalYield").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("totalYield").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("avgYield").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("avgYield").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("totalWetMass").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("totalWetMass").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("avgWetMass").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("avgWetMass").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("avgMoisture").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("avgMoisture").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("avgSpeed").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("avgSpeed").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("productName").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("area").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("area").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalYield").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalYield").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgYield").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgYield").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgMoisture").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgMoisture").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalWetMass").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalWetMass").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgWetMass").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgWetMass").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("area").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("area").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("operationModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("operationStartDateTime").ToString());
Console.WriteLine(result.GetProperty("operationEndDateTime").ToString());
Console.WriteLine(result.GetProperty("attachmentsLink").ToString());
Console.WriteLine(result.GetProperty("associatedBoundaryId").ToString());
Console.WriteLine(result.GetProperty("operationBoundaryId").ToString());
Console.WriteLine(result.GetProperty("farmerId").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("eTag").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>HarvestData</c>:
<code>{
  totalYield: {
    unit: string, # Optional. Data unit.
    value: number, # Optional. Data value.
  }, # Optional. Schema for storing measurement reading and unit.
  avgYield: Measure, # Optional. Schema for storing measurement reading and unit.
  totalWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
  avgWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
  avgMoisture: Measure, # Optional. Schema for storing measurement reading and unit.
  avgSpeed: Measure, # Optional. Schema for storing measurement reading and unit.
  harvestProductDetails: [
    {
      productName: string, # Optional. Name of the product.
      area: Measure, # Optional. Schema for storing measurement reading and unit.
      totalYield: Measure, # Optional. Schema for storing measurement reading and unit.
      avgYield: Measure, # Optional. Schema for storing measurement reading and unit.
      avgMoisture: Measure, # Optional. Schema for storing measurement reading and unit.
      totalWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
      avgWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
    }
  ], # Optional. Harvest product details.
  area: Measure, # Optional. Schema for storing measurement reading and unit.
  source: string, # Optional. Source of the operation data.
  operationModifiedDateTime: string (ISO 8601 Format), # Optional. Modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.
Note: this will be specified by the source provider itself.
  operationStartDateTime: string (ISO 8601 Format), # Optional. Start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.
  operationEndDateTime: string (ISO 8601 Format), # Optional. End date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.
  attachmentsLink: string, # Optional. Link for attachments.
  associatedBoundaryId: string, # Optional. Optional boundary ID of the field for which operation was applied.
  operationBoundaryId: string, # Optional. Optional boundary ID of the actual area for which operation was applied inside the specified field.
  farmerId: string, # Optional. Farmer ID which belongs to the operation data.
  id: string, # Optional. Unique resource ID.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
}
</code>

</remarks>
    </member>
    <member name="GetHarvestData(String,String,RequestContext)">
<example>
This sample shows how to call GetHarvestData with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new HarvestDataClient(endpoint, credential);

Response response = client.GetHarvestData("<farmerId>", "<harvestDataId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("totalYield").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("totalYield").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("avgYield").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("avgYield").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("totalWetMass").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("totalWetMass").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("avgWetMass").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("avgWetMass").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("avgMoisture").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("avgMoisture").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("avgSpeed").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("avgSpeed").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("productName").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("area").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("area").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalYield").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalYield").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgYield").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgYield").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgMoisture").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgMoisture").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalWetMass").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalWetMass").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgWetMass").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgWetMass").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("area").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("area").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("operationModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("operationStartDateTime").ToString());
Console.WriteLine(result.GetProperty("operationEndDateTime").ToString());
Console.WriteLine(result.GetProperty("attachmentsLink").ToString());
Console.WriteLine(result.GetProperty("associatedBoundaryId").ToString());
Console.WriteLine(result.GetProperty("operationBoundaryId").ToString());
Console.WriteLine(result.GetProperty("farmerId").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("eTag").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>HarvestData</c>:
<code>{
  totalYield: {
    unit: string, # Optional. Data unit.
    value: number, # Optional. Data value.
  }, # Optional. Schema for storing measurement reading and unit.
  avgYield: Measure, # Optional. Schema for storing measurement reading and unit.
  totalWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
  avgWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
  avgMoisture: Measure, # Optional. Schema for storing measurement reading and unit.
  avgSpeed: Measure, # Optional. Schema for storing measurement reading and unit.
  harvestProductDetails: [
    {
      productName: string, # Optional. Name of the product.
      area: Measure, # Optional. Schema for storing measurement reading and unit.
      totalYield: Measure, # Optional. Schema for storing measurement reading and unit.
      avgYield: Measure, # Optional. Schema for storing measurement reading and unit.
      avgMoisture: Measure, # Optional. Schema for storing measurement reading and unit.
      totalWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
      avgWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
    }
  ], # Optional. Harvest product details.
  area: Measure, # Optional. Schema for storing measurement reading and unit.
  source: string, # Optional. Source of the operation data.
  operationModifiedDateTime: string (ISO 8601 Format), # Optional. Modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.
Note: this will be specified by the source provider itself.
  operationStartDateTime: string (ISO 8601 Format), # Optional. Start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.
  operationEndDateTime: string (ISO 8601 Format), # Optional. End date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.
  attachmentsLink: string, # Optional. Link for attachments.
  associatedBoundaryId: string, # Optional. Optional boundary ID of the field for which operation was applied.
  operationBoundaryId: string, # Optional. Optional boundary ID of the actual area for which operation was applied inside the specified field.
  farmerId: string, # Optional. Farmer ID which belongs to the operation data.
  id: string, # Optional. Unique resource ID.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
}
</code>

</remarks>
    </member>
    <member name="CreateOrUpdateAsync(String,String,RequestContent,RequestContext)">
<example>
This sample shows how to call CreateOrUpdateAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new HarvestDataClient(endpoint, credential);

var data = new {};

Response response = await client.CreateOrUpdateAsync("<farmerId>", "<harvestDataId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateOrUpdateAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new HarvestDataClient(endpoint, credential);

var data = new {
    totalYield = new {
        unit = "<unit>",
        value = 123.45d,
    },
    avgYield = new {
        unit = "<unit>",
        value = 123.45d,
    },
    totalWetMass = new {
        unit = "<unit>",
        value = 123.45d,
    },
    avgWetMass = new {
        unit = "<unit>",
        value = 123.45d,
    },
    avgMoisture = new {
        unit = "<unit>",
        value = 123.45d,
    },
    avgSpeed = new {
        unit = "<unit>",
        value = 123.45d,
    },
    harvestProductDetails = new[] {
        new {
            productName = "<productName>",
            area = new {
                unit = "<unit>",
                value = 123.45d,
            },
            totalYield = new {
                unit = "<unit>",
                value = 123.45d,
            },
            avgYield = new {
                unit = "<unit>",
                value = 123.45d,
            },
            avgMoisture = new {
                unit = "<unit>",
                value = 123.45d,
            },
            totalWetMass = new {
                unit = "<unit>",
                value = 123.45d,
            },
            avgWetMass = new {
                unit = "<unit>",
                value = 123.45d,
            },
        }
    },
    area = new {
        unit = "<unit>",
        value = 123.45d,
    },
    source = "<source>",
    operationModifiedDateTime = "2022-05-10T18:57:31.2311892Z",
    operationStartDateTime = "2022-05-10T18:57:31.2311892Z",
    operationEndDateTime = "2022-05-10T18:57:31.2311892Z",
    associatedBoundaryId = "<associatedBoundaryId>",
    operationBoundaryId = "<operationBoundaryId>",
    status = "<status>",
    name = "<name>",
    description = "<description>",
    properties = new {
        key = new {},
    },
};

Response response = await client.CreateOrUpdateAsync("<farmerId>", "<harvestDataId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("totalYield").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("totalYield").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("avgYield").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("avgYield").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("totalWetMass").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("totalWetMass").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("avgWetMass").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("avgWetMass").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("avgMoisture").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("avgMoisture").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("avgSpeed").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("avgSpeed").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("productName").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("area").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("area").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalYield").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalYield").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgYield").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgYield").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgMoisture").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgMoisture").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalWetMass").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalWetMass").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgWetMass").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgWetMass").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("area").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("area").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("operationModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("operationStartDateTime").ToString());
Console.WriteLine(result.GetProperty("operationEndDateTime").ToString());
Console.WriteLine(result.GetProperty("attachmentsLink").ToString());
Console.WriteLine(result.GetProperty("associatedBoundaryId").ToString());
Console.WriteLine(result.GetProperty("operationBoundaryId").ToString());
Console.WriteLine(result.GetProperty("farmerId").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("eTag").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>HarvestData</c>:
<code>{
  totalYield: {
    unit: string, # Optional. Data unit.
    value: number, # Optional. Data value.
  }, # Optional. Schema for storing measurement reading and unit.
  avgYield: Measure, # Optional. Schema for storing measurement reading and unit.
  totalWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
  avgWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
  avgMoisture: Measure, # Optional. Schema for storing measurement reading and unit.
  avgSpeed: Measure, # Optional. Schema for storing measurement reading and unit.
  harvestProductDetails: [
    {
      productName: string, # Optional. Name of the product.
      area: Measure, # Optional. Schema for storing measurement reading and unit.
      totalYield: Measure, # Optional. Schema for storing measurement reading and unit.
      avgYield: Measure, # Optional. Schema for storing measurement reading and unit.
      avgMoisture: Measure, # Optional. Schema for storing measurement reading and unit.
      totalWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
      avgWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
    }
  ], # Optional. Harvest product details.
  area: Measure, # Optional. Schema for storing measurement reading and unit.
  source: string, # Optional. Source of the operation data.
  operationModifiedDateTime: string (ISO 8601 Format), # Optional. Modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.
Note: this will be specified by the source provider itself.
  operationStartDateTime: string (ISO 8601 Format), # Optional. Start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.
  operationEndDateTime: string (ISO 8601 Format), # Optional. End date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.
  attachmentsLink: string, # Optional. Link for attachments.
  associatedBoundaryId: string, # Optional. Optional boundary ID of the field for which operation was applied.
  operationBoundaryId: string, # Optional. Optional boundary ID of the actual area for which operation was applied inside the specified field.
  farmerId: string, # Optional. Farmer ID which belongs to the operation data.
  id: string, # Optional. Unique resource ID.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
}
</code>

Response Body:

Schema for <c>HarvestData</c>:
<code>{
  totalYield: {
    unit: string, # Optional. Data unit.
    value: number, # Optional. Data value.
  }, # Optional. Schema for storing measurement reading and unit.
  avgYield: Measure, # Optional. Schema for storing measurement reading and unit.
  totalWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
  avgWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
  avgMoisture: Measure, # Optional. Schema for storing measurement reading and unit.
  avgSpeed: Measure, # Optional. Schema for storing measurement reading and unit.
  harvestProductDetails: [
    {
      productName: string, # Optional. Name of the product.
      area: Measure, # Optional. Schema for storing measurement reading and unit.
      totalYield: Measure, # Optional. Schema for storing measurement reading and unit.
      avgYield: Measure, # Optional. Schema for storing measurement reading and unit.
      avgMoisture: Measure, # Optional. Schema for storing measurement reading and unit.
      totalWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
      avgWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
    }
  ], # Optional. Harvest product details.
  area: Measure, # Optional. Schema for storing measurement reading and unit.
  source: string, # Optional. Source of the operation data.
  operationModifiedDateTime: string (ISO 8601 Format), # Optional. Modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.
Note: this will be specified by the source provider itself.
  operationStartDateTime: string (ISO 8601 Format), # Optional. Start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.
  operationEndDateTime: string (ISO 8601 Format), # Optional. End date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.
  attachmentsLink: string, # Optional. Link for attachments.
  associatedBoundaryId: string, # Optional. Optional boundary ID of the field for which operation was applied.
  operationBoundaryId: string, # Optional. Optional boundary ID of the actual area for which operation was applied inside the specified field.
  farmerId: string, # Optional. Farmer ID which belongs to the operation data.
  id: string, # Optional. Unique resource ID.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
}
</code>

</remarks>
    </member>
    <member name="CreateOrUpdate(String,String,RequestContent,RequestContext)">
<example>
This sample shows how to call CreateOrUpdate with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new HarvestDataClient(endpoint, credential);

var data = new {};

Response response = client.CreateOrUpdate("<farmerId>", "<harvestDataId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateOrUpdate with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new HarvestDataClient(endpoint, credential);

var data = new {
    totalYield = new {
        unit = "<unit>",
        value = 123.45d,
    },
    avgYield = new {
        unit = "<unit>",
        value = 123.45d,
    },
    totalWetMass = new {
        unit = "<unit>",
        value = 123.45d,
    },
    avgWetMass = new {
        unit = "<unit>",
        value = 123.45d,
    },
    avgMoisture = new {
        unit = "<unit>",
        value = 123.45d,
    },
    avgSpeed = new {
        unit = "<unit>",
        value = 123.45d,
    },
    harvestProductDetails = new[] {
        new {
            productName = "<productName>",
            area = new {
                unit = "<unit>",
                value = 123.45d,
            },
            totalYield = new {
                unit = "<unit>",
                value = 123.45d,
            },
            avgYield = new {
                unit = "<unit>",
                value = 123.45d,
            },
            avgMoisture = new {
                unit = "<unit>",
                value = 123.45d,
            },
            totalWetMass = new {
                unit = "<unit>",
                value = 123.45d,
            },
            avgWetMass = new {
                unit = "<unit>",
                value = 123.45d,
            },
        }
    },
    area = new {
        unit = "<unit>",
        value = 123.45d,
    },
    source = "<source>",
    operationModifiedDateTime = "2022-05-10T18:57:31.2311892Z",
    operationStartDateTime = "2022-05-10T18:57:31.2311892Z",
    operationEndDateTime = "2022-05-10T18:57:31.2311892Z",
    associatedBoundaryId = "<associatedBoundaryId>",
    operationBoundaryId = "<operationBoundaryId>",
    status = "<status>",
    name = "<name>",
    description = "<description>",
    properties = new {
        key = new {},
    },
};

Response response = client.CreateOrUpdate("<farmerId>", "<harvestDataId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("totalYield").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("totalYield").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("avgYield").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("avgYield").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("totalWetMass").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("totalWetMass").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("avgWetMass").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("avgWetMass").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("avgMoisture").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("avgMoisture").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("avgSpeed").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("avgSpeed").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("productName").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("area").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("area").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalYield").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalYield").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgYield").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgYield").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgMoisture").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgMoisture").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalWetMass").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalWetMass").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgWetMass").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgWetMass").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("area").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("area").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("operationModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("operationStartDateTime").ToString());
Console.WriteLine(result.GetProperty("operationEndDateTime").ToString());
Console.WriteLine(result.GetProperty("attachmentsLink").ToString());
Console.WriteLine(result.GetProperty("associatedBoundaryId").ToString());
Console.WriteLine(result.GetProperty("operationBoundaryId").ToString());
Console.WriteLine(result.GetProperty("farmerId").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("eTag").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>HarvestData</c>:
<code>{
  totalYield: {
    unit: string, # Optional. Data unit.
    value: number, # Optional. Data value.
  }, # Optional. Schema for storing measurement reading and unit.
  avgYield: Measure, # Optional. Schema for storing measurement reading and unit.
  totalWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
  avgWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
  avgMoisture: Measure, # Optional. Schema for storing measurement reading and unit.
  avgSpeed: Measure, # Optional. Schema for storing measurement reading and unit.
  harvestProductDetails: [
    {
      productName: string, # Optional. Name of the product.
      area: Measure, # Optional. Schema for storing measurement reading and unit.
      totalYield: Measure, # Optional. Schema for storing measurement reading and unit.
      avgYield: Measure, # Optional. Schema for storing measurement reading and unit.
      avgMoisture: Measure, # Optional. Schema for storing measurement reading and unit.
      totalWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
      avgWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
    }
  ], # Optional. Harvest product details.
  area: Measure, # Optional. Schema for storing measurement reading and unit.
  source: string, # Optional. Source of the operation data.
  operationModifiedDateTime: string (ISO 8601 Format), # Optional. Modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.
Note: this will be specified by the source provider itself.
  operationStartDateTime: string (ISO 8601 Format), # Optional. Start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.
  operationEndDateTime: string (ISO 8601 Format), # Optional. End date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.
  attachmentsLink: string, # Optional. Link for attachments.
  associatedBoundaryId: string, # Optional. Optional boundary ID of the field for which operation was applied.
  operationBoundaryId: string, # Optional. Optional boundary ID of the actual area for which operation was applied inside the specified field.
  farmerId: string, # Optional. Farmer ID which belongs to the operation data.
  id: string, # Optional. Unique resource ID.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
}
</code>

Response Body:

Schema for <c>HarvestData</c>:
<code>{
  totalYield: {
    unit: string, # Optional. Data unit.
    value: number, # Optional. Data value.
  }, # Optional. Schema for storing measurement reading and unit.
  avgYield: Measure, # Optional. Schema for storing measurement reading and unit.
  totalWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
  avgWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
  avgMoisture: Measure, # Optional. Schema for storing measurement reading and unit.
  avgSpeed: Measure, # Optional. Schema for storing measurement reading and unit.
  harvestProductDetails: [
    {
      productName: string, # Optional. Name of the product.
      area: Measure, # Optional. Schema for storing measurement reading and unit.
      totalYield: Measure, # Optional. Schema for storing measurement reading and unit.
      avgYield: Measure, # Optional. Schema for storing measurement reading and unit.
      avgMoisture: Measure, # Optional. Schema for storing measurement reading and unit.
      totalWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
      avgWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
    }
  ], # Optional. Harvest product details.
  area: Measure, # Optional. Schema for storing measurement reading and unit.
  source: string, # Optional. Source of the operation data.
  operationModifiedDateTime: string (ISO 8601 Format), # Optional. Modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.
Note: this will be specified by the source provider itself.
  operationStartDateTime: string (ISO 8601 Format), # Optional. Start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.
  operationEndDateTime: string (ISO 8601 Format), # Optional. End date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.
  attachmentsLink: string, # Optional. Link for attachments.
  associatedBoundaryId: string, # Optional. Optional boundary ID of the field for which operation was applied.
  operationBoundaryId: string, # Optional. Optional boundary ID of the actual area for which operation was applied inside the specified field.
  farmerId: string, # Optional. Farmer ID which belongs to the operation data.
  id: string, # Optional. Unique resource ID.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
}
</code>

</remarks>
    </member>
    <member name="DeleteAsync(String,String,RequestContext)">
<example>
This sample shows how to call DeleteAsync with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new HarvestDataClient(endpoint, credential);

Response response = await client.DeleteAsync("<farmerId>", "<harvestDataId>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="Delete(String,String,RequestContext)">
<example>
This sample shows how to call Delete with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new HarvestDataClient(endpoint, credential);

Response response = client.Delete("<farmerId>", "<harvestDataId>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="GetAllHarvestDataByFarmerIdAsync(String,Double,Double,Double,Double,Double,Double,Double,Double,Double,Double,Double,Double,IEnumerable,IEnumerable,IEnumerable,DateTimeOffset,DateTimeOffset,DateTimeOffset,DateTimeOffset,DateTimeOffset,DateTimeOffset,Double,Double,IEnumerable,IEnumerable,IEnumerable,IEnumerable,DateTimeOffset,DateTimeOffset,DateTimeOffset,DateTimeOffset,Int32,String,RequestContext)">
<example>
This sample shows how to call GetAllHarvestDataByFarmerIdAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new HarvestDataClient(endpoint, credential);

await foreach (var data in client.GetAllHarvestDataByFarmerIdAsync("<farmerId>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetAllHarvestDataByFarmerIdAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new HarvestDataClient(endpoint, credential);

await foreach (var data in client.GetAllHarvestDataByFarmerIdAsync("<farmerId>", 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, new String[]{"<sources>"}, new String[]{"<associatedBoundaryIds>"}, new String[]{"<operationBoundaryIds>"}, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 1234, 1234, new String[]{"<ids>"}, new String[]{"<names>"}, new String[]{"<propertyFilters>"}, new String[]{"<statuses>"}, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 1234, "<skipToken>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("totalYield").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("totalYield").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("avgYield").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("avgYield").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("totalWetMass").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("totalWetMass").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("avgWetMass").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("avgWetMass").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("avgMoisture").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("avgMoisture").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("avgSpeed").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("avgSpeed").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("productName").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("area").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("area").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalYield").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalYield").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgYield").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgYield").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgMoisture").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgMoisture").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalWetMass").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalWetMass").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgWetMass").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgWetMass").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("area").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("area").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("source").ToString());
    Console.WriteLine(result.GetProperty("operationModifiedDateTime").ToString());
    Console.WriteLine(result.GetProperty("operationStartDateTime").ToString());
    Console.WriteLine(result.GetProperty("operationEndDateTime").ToString());
    Console.WriteLine(result.GetProperty("attachmentsLink").ToString());
    Console.WriteLine(result.GetProperty("associatedBoundaryId").ToString());
    Console.WriteLine(result.GetProperty("operationBoundaryId").ToString());
    Console.WriteLine(result.GetProperty("farmerId").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("eTag").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>HarvestDataListResponseValue</c>:
<code>{
  totalYield: {
    unit: string, # Optional. Data unit.
    value: number, # Optional. Data value.
  }, # Optional. Schema for storing measurement reading and unit.
  avgYield: Measure, # Optional. Schema for storing measurement reading and unit.
  totalWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
  avgWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
  avgMoisture: Measure, # Optional. Schema for storing measurement reading and unit.
  avgSpeed: Measure, # Optional. Schema for storing measurement reading and unit.
  harvestProductDetails: [
    {
      productName: string, # Optional. Name of the product.
      area: Measure, # Optional. Schema for storing measurement reading and unit.
      totalYield: Measure, # Optional. Schema for storing measurement reading and unit.
      avgYield: Measure, # Optional. Schema for storing measurement reading and unit.
      avgMoisture: Measure, # Optional. Schema for storing measurement reading and unit.
      totalWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
      avgWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
    }
  ], # Optional. Harvest product details.
  area: Measure, # Optional. Schema for storing measurement reading and unit.
  source: string, # Optional. Source of the operation data.
  operationModifiedDateTime: string (ISO 8601 Format), # Optional. Modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.
Note: this will be specified by the source provider itself.
  operationStartDateTime: string (ISO 8601 Format), # Optional. Start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.
  operationEndDateTime: string (ISO 8601 Format), # Optional. End date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.
  attachmentsLink: string, # Optional. Link for attachments.
  associatedBoundaryId: string, # Optional. Optional boundary ID of the field for which operation was applied.
  operationBoundaryId: string, # Optional. Optional boundary ID of the actual area for which operation was applied inside the specified field.
  farmerId: string, # Optional. Farmer ID which belongs to the operation data.
  id: string, # Optional. Unique resource ID.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
}
</code>

</remarks>
    </member>
    <member name="GetAllHarvestDataByFarmerId(String,Double,Double,Double,Double,Double,Double,Double,Double,Double,Double,Double,Double,IEnumerable,IEnumerable,IEnumerable,DateTimeOffset,DateTimeOffset,DateTimeOffset,DateTimeOffset,DateTimeOffset,DateTimeOffset,Double,Double,IEnumerable,IEnumerable,IEnumerable,IEnumerable,DateTimeOffset,DateTimeOffset,DateTimeOffset,DateTimeOffset,Int32,String,RequestContext)">
<example>
This sample shows how to call GetAllHarvestDataByFarmerId with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new HarvestDataClient(endpoint, credential);

foreach (var data in client.GetAllHarvestDataByFarmerId("<farmerId>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetAllHarvestDataByFarmerId with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new HarvestDataClient(endpoint, credential);

foreach (var data in client.GetAllHarvestDataByFarmerId("<farmerId>", 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, new String[]{"<sources>"}, new String[]{"<associatedBoundaryIds>"}, new String[]{"<operationBoundaryIds>"}, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 1234, 1234, new String[]{"<ids>"}, new String[]{"<names>"}, new String[]{"<propertyFilters>"}, new String[]{"<statuses>"}, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 1234, "<skipToken>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("totalYield").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("totalYield").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("avgYield").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("avgYield").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("totalWetMass").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("totalWetMass").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("avgWetMass").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("avgWetMass").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("avgMoisture").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("avgMoisture").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("avgSpeed").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("avgSpeed").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("productName").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("area").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("area").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalYield").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalYield").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgYield").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgYield").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgMoisture").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgMoisture").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalWetMass").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalWetMass").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgWetMass").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgWetMass").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("area").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("area").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("source").ToString());
    Console.WriteLine(result.GetProperty("operationModifiedDateTime").ToString());
    Console.WriteLine(result.GetProperty("operationStartDateTime").ToString());
    Console.WriteLine(result.GetProperty("operationEndDateTime").ToString());
    Console.WriteLine(result.GetProperty("attachmentsLink").ToString());
    Console.WriteLine(result.GetProperty("associatedBoundaryId").ToString());
    Console.WriteLine(result.GetProperty("operationBoundaryId").ToString());
    Console.WriteLine(result.GetProperty("farmerId").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("eTag").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>HarvestDataListResponseValue</c>:
<code>{
  totalYield: {
    unit: string, # Optional. Data unit.
    value: number, # Optional. Data value.
  }, # Optional. Schema for storing measurement reading and unit.
  avgYield: Measure, # Optional. Schema for storing measurement reading and unit.
  totalWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
  avgWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
  avgMoisture: Measure, # Optional. Schema for storing measurement reading and unit.
  avgSpeed: Measure, # Optional. Schema for storing measurement reading and unit.
  harvestProductDetails: [
    {
      productName: string, # Optional. Name of the product.
      area: Measure, # Optional. Schema for storing measurement reading and unit.
      totalYield: Measure, # Optional. Schema for storing measurement reading and unit.
      avgYield: Measure, # Optional. Schema for storing measurement reading and unit.
      avgMoisture: Measure, # Optional. Schema for storing measurement reading and unit.
      totalWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
      avgWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
    }
  ], # Optional. Harvest product details.
  area: Measure, # Optional. Schema for storing measurement reading and unit.
  source: string, # Optional. Source of the operation data.
  operationModifiedDateTime: string (ISO 8601 Format), # Optional. Modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.
Note: this will be specified by the source provider itself.
  operationStartDateTime: string (ISO 8601 Format), # Optional. Start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.
  operationEndDateTime: string (ISO 8601 Format), # Optional. End date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.
  attachmentsLink: string, # Optional. Link for attachments.
  associatedBoundaryId: string, # Optional. Optional boundary ID of the field for which operation was applied.
  operationBoundaryId: string, # Optional. Optional boundary ID of the actual area for which operation was applied inside the specified field.
  farmerId: string, # Optional. Farmer ID which belongs to the operation data.
  id: string, # Optional. Unique resource ID.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
}
</code>

</remarks>
    </member>
    <member name="GetAllHarvestDataAsync(Double,Double,Double,Double,Double,Double,Double,Double,Double,Double,Double,Double,IEnumerable,IEnumerable,IEnumerable,DateTimeOffset,DateTimeOffset,DateTimeOffset,DateTimeOffset,DateTimeOffset,DateTimeOffset,Double,Double,IEnumerable,IEnumerable,IEnumerable,IEnumerable,DateTimeOffset,DateTimeOffset,DateTimeOffset,DateTimeOffset,Int32,String,RequestContext)">
<example>
This sample shows how to call GetAllHarvestDataAsync and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new HarvestDataClient(endpoint, credential);

await foreach (var data in client.GetAllHarvestDataAsync())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetAllHarvestDataAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new HarvestDataClient(endpoint, credential);

await foreach (var data in client.GetAllHarvestDataAsync(1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, new String[]{"<sources>"}, new String[]{"<associatedBoundaryIds>"}, new String[]{"<operationBoundaryIds>"}, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 1234, 1234, new String[]{"<ids>"}, new String[]{"<names>"}, new String[]{"<propertyFilters>"}, new String[]{"<statuses>"}, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 1234, "<skipToken>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("totalYield").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("totalYield").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("avgYield").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("avgYield").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("totalWetMass").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("totalWetMass").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("avgWetMass").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("avgWetMass").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("avgMoisture").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("avgMoisture").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("avgSpeed").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("avgSpeed").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("productName").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("area").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("area").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalYield").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalYield").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgYield").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgYield").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgMoisture").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgMoisture").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalWetMass").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalWetMass").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgWetMass").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgWetMass").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("area").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("area").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("source").ToString());
    Console.WriteLine(result.GetProperty("operationModifiedDateTime").ToString());
    Console.WriteLine(result.GetProperty("operationStartDateTime").ToString());
    Console.WriteLine(result.GetProperty("operationEndDateTime").ToString());
    Console.WriteLine(result.GetProperty("attachmentsLink").ToString());
    Console.WriteLine(result.GetProperty("associatedBoundaryId").ToString());
    Console.WriteLine(result.GetProperty("operationBoundaryId").ToString());
    Console.WriteLine(result.GetProperty("farmerId").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("eTag").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>HarvestDataListResponseValue</c>:
<code>{
  totalYield: {
    unit: string, # Optional. Data unit.
    value: number, # Optional. Data value.
  }, # Optional. Schema for storing measurement reading and unit.
  avgYield: Measure, # Optional. Schema for storing measurement reading and unit.
  totalWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
  avgWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
  avgMoisture: Measure, # Optional. Schema for storing measurement reading and unit.
  avgSpeed: Measure, # Optional. Schema for storing measurement reading and unit.
  harvestProductDetails: [
    {
      productName: string, # Optional. Name of the product.
      area: Measure, # Optional. Schema for storing measurement reading and unit.
      totalYield: Measure, # Optional. Schema for storing measurement reading and unit.
      avgYield: Measure, # Optional. Schema for storing measurement reading and unit.
      avgMoisture: Measure, # Optional. Schema for storing measurement reading and unit.
      totalWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
      avgWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
    }
  ], # Optional. Harvest product details.
  area: Measure, # Optional. Schema for storing measurement reading and unit.
  source: string, # Optional. Source of the operation data.
  operationModifiedDateTime: string (ISO 8601 Format), # Optional. Modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.
Note: this will be specified by the source provider itself.
  operationStartDateTime: string (ISO 8601 Format), # Optional. Start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.
  operationEndDateTime: string (ISO 8601 Format), # Optional. End date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.
  attachmentsLink: string, # Optional. Link for attachments.
  associatedBoundaryId: string, # Optional. Optional boundary ID of the field for which operation was applied.
  operationBoundaryId: string, # Optional. Optional boundary ID of the actual area for which operation was applied inside the specified field.
  farmerId: string, # Optional. Farmer ID which belongs to the operation data.
  id: string, # Optional. Unique resource ID.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
}
</code>

</remarks>
    </member>
    <member name="GetAllHarvestData(Double,Double,Double,Double,Double,Double,Double,Double,Double,Double,Double,Double,IEnumerable,IEnumerable,IEnumerable,DateTimeOffset,DateTimeOffset,DateTimeOffset,DateTimeOffset,DateTimeOffset,DateTimeOffset,Double,Double,IEnumerable,IEnumerable,IEnumerable,IEnumerable,DateTimeOffset,DateTimeOffset,DateTimeOffset,DateTimeOffset,Int32,String,RequestContext)">
<example>
This sample shows how to call GetAllHarvestData and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new HarvestDataClient(endpoint, credential);

foreach (var data in client.GetAllHarvestData())
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetAllHarvestData with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new HarvestDataClient(endpoint, credential);

foreach (var data in client.GetAllHarvestData(1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, new String[]{"<sources>"}, new String[]{"<associatedBoundaryIds>"}, new String[]{"<operationBoundaryIds>"}, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 1234, 1234, new String[]{"<ids>"}, new String[]{"<names>"}, new String[]{"<propertyFilters>"}, new String[]{"<statuses>"}, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 1234, "<skipToken>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("totalYield").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("totalYield").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("avgYield").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("avgYield").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("totalWetMass").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("totalWetMass").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("avgWetMass").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("avgWetMass").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("avgMoisture").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("avgMoisture").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("avgSpeed").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("avgSpeed").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("productName").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("area").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("area").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalYield").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalYield").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgYield").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgYield").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgMoisture").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgMoisture").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalWetMass").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalWetMass").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgWetMass").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgWetMass").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("area").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("area").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("source").ToString());
    Console.WriteLine(result.GetProperty("operationModifiedDateTime").ToString());
    Console.WriteLine(result.GetProperty("operationStartDateTime").ToString());
    Console.WriteLine(result.GetProperty("operationEndDateTime").ToString());
    Console.WriteLine(result.GetProperty("attachmentsLink").ToString());
    Console.WriteLine(result.GetProperty("associatedBoundaryId").ToString());
    Console.WriteLine(result.GetProperty("operationBoundaryId").ToString());
    Console.WriteLine(result.GetProperty("farmerId").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("eTag").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>HarvestDataListResponseValue</c>:
<code>{
  totalYield: {
    unit: string, # Optional. Data unit.
    value: number, # Optional. Data value.
  }, # Optional. Schema for storing measurement reading and unit.
  avgYield: Measure, # Optional. Schema for storing measurement reading and unit.
  totalWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
  avgWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
  avgMoisture: Measure, # Optional. Schema for storing measurement reading and unit.
  avgSpeed: Measure, # Optional. Schema for storing measurement reading and unit.
  harvestProductDetails: [
    {
      productName: string, # Optional. Name of the product.
      area: Measure, # Optional. Schema for storing measurement reading and unit.
      totalYield: Measure, # Optional. Schema for storing measurement reading and unit.
      avgYield: Measure, # Optional. Schema for storing measurement reading and unit.
      avgMoisture: Measure, # Optional. Schema for storing measurement reading and unit.
      totalWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
      avgWetMass: Measure, # Optional. Schema for storing measurement reading and unit.
    }
  ], # Optional. Harvest product details.
  area: Measure, # Optional. Schema for storing measurement reading and unit.
  source: string, # Optional. Source of the operation data.
  operationModifiedDateTime: string (ISO 8601 Format), # Optional. Modified date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.
Note: this will be specified by the source provider itself.
  operationStartDateTime: string (ISO 8601 Format), # Optional. Start date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.
  operationEndDateTime: string (ISO 8601 Format), # Optional. End date-time of the operation data, sample format: yyyy-MM-ddTHH:mm:ssZ.
  attachmentsLink: string, # Optional. Link for attachments.
  associatedBoundaryId: string, # Optional. Optional boundary ID of the field for which operation was applied.
  operationBoundaryId: string, # Optional. Optional boundary ID of the actual area for which operation was applied inside the specified field.
  farmerId: string, # Optional. Farmer ID which belongs to the operation data.
  id: string, # Optional. Unique resource ID.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
}
</code>

</remarks>
    </member>
  </members>
</doc>