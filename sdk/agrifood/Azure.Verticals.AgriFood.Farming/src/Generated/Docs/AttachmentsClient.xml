<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetAttachmentAsync(String,String,RequestContext)">
<example>
This sample shows how to call GetAttachmentAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new AttachmentsClient(endpoint, credential);

Response response = await client.GetAttachmentAsync("<farmerId>", "<attachmentId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("farmerId").ToString());
Console.WriteLine(result.GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("resourceType").ToString());
Console.WriteLine(result.GetProperty("originalFileName").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("eTag").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Attachment</c>:
<code>{
  farmerId: string, # Optional. Farmer id for this attachment.
  resourceId: string, # Optional. Associated Resource id for this attachment.
  resourceType: string, # Optional. Associated Resource type for this attachment
i.e. Farmer, Farm, Field, SeasonalField, Boundary, FarmOperationApplicationData, HarvestData, TillageData, PlantingData.
  originalFileName: string, # Optional. Original File Name for this attachment.
  id: string, # Optional. Unique id.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date when resource was created.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date when resource was last modified.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of resource.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
}
</code>

</remarks>
    </member>
    <member name="GetAttachment(String,String,RequestContext)">
<example>
This sample shows how to call GetAttachment with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new AttachmentsClient(endpoint, credential);

Response response = client.GetAttachment("<farmerId>", "<attachmentId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("farmerId").ToString());
Console.WriteLine(result.GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("resourceType").ToString());
Console.WriteLine(result.GetProperty("originalFileName").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("eTag").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Attachment</c>:
<code>{
  farmerId: string, # Optional. Farmer id for this attachment.
  resourceId: string, # Optional. Associated Resource id for this attachment.
  resourceType: string, # Optional. Associated Resource type for this attachment
i.e. Farmer, Farm, Field, SeasonalField, Boundary, FarmOperationApplicationData, HarvestData, TillageData, PlantingData.
  originalFileName: string, # Optional. Original File Name for this attachment.
  id: string, # Optional. Unique id.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date when resource was created.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date when resource was last modified.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of resource.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
}
</code>

</remarks>
    </member>
    <member name="CreateOrUpdateAsync(String,String,RequestContent,RequestContext)">
<example>
This sample shows how to call CreateOrUpdateAsync with required parameters and request content and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new AttachmentsClient(endpoint, credential);

var data = File.OpenRead("<filePath>");

Response response = await client.CreateOrUpdateAsync("<farmerId>", "<attachmentId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("farmerId").ToString());
Console.WriteLine(result.GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("resourceType").ToString());
Console.WriteLine(result.GetProperty("originalFileName").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("eTag").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Attachment</c>:
<code>{
  farmerId: string, # Optional. Farmer id for this attachment.
  resourceId: string, # Optional. Associated Resource id for this attachment.
  resourceType: string, # Optional. Associated Resource type for this attachment
i.e. Farmer, Farm, Field, SeasonalField, Boundary, FarmOperationApplicationData, HarvestData, TillageData, PlantingData.
  originalFileName: string, # Optional. Original File Name for this attachment.
  id: string, # Optional. Unique id.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date when resource was created.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date when resource was last modified.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of resource.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
}
</code>

</remarks>
    </member>
    <member name="CreateOrUpdate(String,String,RequestContent,RequestContext)">
<example>
This sample shows how to call CreateOrUpdate with required parameters and request content and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new AttachmentsClient(endpoint, credential);

var data = File.OpenRead("<filePath>");

Response response = client.CreateOrUpdate("<farmerId>", "<attachmentId>", RequestContent.Create(data));

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("farmerId").ToString());
Console.WriteLine(result.GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("resourceType").ToString());
Console.WriteLine(result.GetProperty("originalFileName").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("eTag").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>Attachment</c>:
<code>{
  farmerId: string, # Optional. Farmer id for this attachment.
  resourceId: string, # Optional. Associated Resource id for this attachment.
  resourceType: string, # Optional. Associated Resource type for this attachment
i.e. Farmer, Farm, Field, SeasonalField, Boundary, FarmOperationApplicationData, HarvestData, TillageData, PlantingData.
  originalFileName: string, # Optional. Original File Name for this attachment.
  id: string, # Optional. Unique id.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date when resource was created.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date when resource was last modified.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of resource.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
}
</code>

</remarks>
    </member>
    <member name="DeleteAsync(String,String,RequestContext)">
<example>
This sample shows how to call DeleteAsync with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new AttachmentsClient(endpoint, credential);

Response response = await client.DeleteAsync("<farmerId>", "<attachmentId>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="Delete(String,String,RequestContext)">
<example>
This sample shows how to call Delete with required parameters.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new AttachmentsClient(endpoint, credential);

Response response = client.Delete("<farmerId>", "<attachmentId>");
Console.WriteLine(response.Status);
]]></code>
</example>
    </member>
    <member name="DownloadAsync(String,String,RequestContext)">
<example>
This sample shows how to call DownloadAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new AttachmentsClient(endpoint, credential);

Response response = await client.DownloadAsync("<farmerId>", "<attachmentId>");
if (response.ContentStream != null)
{
    using(Stream outFileStream = File.OpenWrite("<filePath>")
    {
        response.ContentStream.CopyTo(outFileStream);
    }
}
]]></code>
</example>
    </member>
    <member name="Download(String,String,RequestContext)">
<example>
This sample shows how to call Download with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new AttachmentsClient(endpoint, credential);

Response response = client.Download("<farmerId>", "<attachmentId>");
if (response.ContentStream != null)
{
    using(Stream outFileStream = File.OpenWrite("<filePath>")
    {
        response.ContentStream.CopyTo(outFileStream);
    }
}
]]></code>
</example>
    </member>
    <member name="GetAttachmentsByFarmerIdAsync(String,IEnumerable,IEnumerable,IEnumerable,IEnumerable,IEnumerable,IEnumerable,DateTimeOffset,DateTimeOffset,DateTimeOffset,DateTimeOffset,Int32,String,RequestContext)">
<example>
This sample shows how to call GetAttachmentsByFarmerIdAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new AttachmentsClient(endpoint, credential);

await foreach (var data in client.GetAttachmentsByFarmerIdAsync("<farmerId>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetAttachmentsByFarmerIdAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new AttachmentsClient(endpoint, credential);

await foreach (var data in client.GetAttachmentsByFarmerIdAsync("<farmerId>", new String[]{"<resourceIds>"}, new String[]{"<resourceTypes>"}, new String[]{"<ids>"}, new String[]{"<names>"}, new String[]{"<propertyFilters>"}, new String[]{"<statuses>"}, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 1234, "<skipToken>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("farmerId").ToString());
    Console.WriteLine(result.GetProperty("resourceId").ToString());
    Console.WriteLine(result.GetProperty("resourceType").ToString());
    Console.WriteLine(result.GetProperty("originalFileName").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("eTag").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>AttachmentListResponseValue</c>:
<code>{
  farmerId: string, # Optional. Farmer id for this attachment.
  resourceId: string, # Optional. Associated Resource id for this attachment.
  resourceType: string, # Optional. Associated Resource type for this attachment
i.e. Farmer, Farm, Field, SeasonalField, Boundary, FarmOperationApplicationData, HarvestData, TillageData, PlantingData.
  originalFileName: string, # Optional. Original File Name for this attachment.
  id: string, # Optional. Unique id.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date when resource was created.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date when resource was last modified.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of resource.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
}
</code>

</remarks>
    </member>
    <member name="GetAttachmentsByFarmerId(String,IEnumerable,IEnumerable,IEnumerable,IEnumerable,IEnumerable,IEnumerable,DateTimeOffset,DateTimeOffset,DateTimeOffset,DateTimeOffset,Int32,String,RequestContext)">
<example>
This sample shows how to call GetAttachmentsByFarmerId with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new AttachmentsClient(endpoint, credential);

foreach (var data in client.GetAttachmentsByFarmerId("<farmerId>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetAttachmentsByFarmerId with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new AttachmentsClient(endpoint, credential);

foreach (var data in client.GetAttachmentsByFarmerId("<farmerId>", new String[]{"<resourceIds>"}, new String[]{"<resourceTypes>"}, new String[]{"<ids>"}, new String[]{"<names>"}, new String[]{"<propertyFilters>"}, new String[]{"<statuses>"}, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 1234, "<skipToken>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("farmerId").ToString());
    Console.WriteLine(result.GetProperty("resourceId").ToString());
    Console.WriteLine(result.GetProperty("resourceType").ToString());
    Console.WriteLine(result.GetProperty("originalFileName").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("eTag").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>AttachmentListResponseValue</c>:
<code>{
  farmerId: string, # Optional. Farmer id for this attachment.
  resourceId: string, # Optional. Associated Resource id for this attachment.
  resourceType: string, # Optional. Associated Resource type for this attachment
i.e. Farmer, Farm, Field, SeasonalField, Boundary, FarmOperationApplicationData, HarvestData, TillageData, PlantingData.
  originalFileName: string, # Optional. Original File Name for this attachment.
  id: string, # Optional. Unique id.
  status: string, # Optional. Status of the resource.
  createdDateTime: string (ISO 8601 Format), # Optional. Date when resource was created.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date when resource was last modified.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of resource.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
}
</code>

</remarks>
    </member>
  </members>
</doc>