<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetCascadeDeleteJobDetailsAsync(string,RequestContext)">
      <example>
This sample shows how to call GetCascadeDeleteJobDetailsAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
HarvestData client = new FarmBeatsClient(endpoint, credential).GetHarvestDataClient(apiVersion: "2022-11-01-preview");

Response response = await client.GetCascadeDeleteJobDetailsAsync("<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("partyId").ToString());
Console.WriteLine(result.GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("resourceType").ToString());
]]></code>
This sample shows how to call GetCascadeDeleteJobDetailsAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
HarvestData client = new FarmBeatsClient(endpoint, credential).GetHarvestDataClient(apiVersion: "2022-11-01-preview");

Response response = await client.GetCascadeDeleteJobDetailsAsync("<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("partyId").ToString());
Console.WriteLine(result.GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("resourceType").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
Console.WriteLine(result.GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errorCode").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("endTime").ToString());
]]></code></example>
    </member>
    <member name="GetCascadeDeleteJobDetails(string,RequestContext)">
      <example>
This sample shows how to call GetCascadeDeleteJobDetails and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
HarvestData client = new FarmBeatsClient(endpoint, credential).GetHarvestDataClient(apiVersion: "2022-11-01-preview");

Response response = client.GetCascadeDeleteJobDetails("<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("partyId").ToString());
Console.WriteLine(result.GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("resourceType").ToString());
]]></code>
This sample shows how to call GetCascadeDeleteJobDetails with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
HarvestData client = new FarmBeatsClient(endpoint, credential).GetHarvestDataClient(apiVersion: "2022-11-01-preview");

Response response = client.GetCascadeDeleteJobDetails("<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("partyId").ToString());
Console.WriteLine(result.GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("resourceType").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
Console.WriteLine(result.GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errorCode").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("endTime").ToString());
]]></code></example>
    </member>
    <member name="GetHarvestDataAsync(string,string,RequestContext)">
      <example>
This sample shows how to call GetHarvestDataAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
HarvestData client = new FarmBeatsClient(endpoint, credential).GetHarvestDataClient(apiVersion: "2022-11-01-preview");

Response response = await client.GetHarvestDataAsync("<partyId>", "<harvestDataId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetHarvestDataAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
HarvestData client = new FarmBeatsClient(endpoint, credential).GetHarvestDataClient(apiVersion: "2022-11-01-preview");

Response response = await client.GetHarvestDataAsync("<partyId>", "<harvestDataId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("totalYield").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("totalYield").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("avgYield").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("avgYield").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("totalWetMass").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("totalWetMass").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("avgWetMass").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("avgWetMass").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("avgMoisture").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("avgMoisture").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("avgSpeed").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("avgSpeed").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("productName").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("area").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("area").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalYield").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalYield").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgYield").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgYield").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgMoisture").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgMoisture").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalWetMass").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalWetMass").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgWetMass").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgWetMass").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("area").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("area").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("operationModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("operationStartDateTime").ToString());
Console.WriteLine(result.GetProperty("operationEndDateTime").ToString());
Console.WriteLine(result.GetProperty("attachmentsLink").ToString());
Console.WriteLine(result.GetProperty("associatedBoundaryId").ToString());
Console.WriteLine(result.GetProperty("partyId").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("eTag").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("modifiedBy").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="GetHarvestData(string,string,RequestContext)">
      <example>
This sample shows how to call GetHarvestData and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
HarvestData client = new FarmBeatsClient(endpoint, credential).GetHarvestDataClient(apiVersion: "2022-11-01-preview");

Response response = client.GetHarvestData("<partyId>", "<harvestDataId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call GetHarvestData with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
HarvestData client = new FarmBeatsClient(endpoint, credential).GetHarvestDataClient(apiVersion: "2022-11-01-preview");

Response response = client.GetHarvestData("<partyId>", "<harvestDataId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("totalYield").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("totalYield").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("avgYield").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("avgYield").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("totalWetMass").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("totalWetMass").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("avgWetMass").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("avgWetMass").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("avgMoisture").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("avgMoisture").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("avgSpeed").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("avgSpeed").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("productName").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("area").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("area").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalYield").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalYield").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgYield").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgYield").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgMoisture").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgMoisture").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalWetMass").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalWetMass").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgWetMass").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgWetMass").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("area").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("area").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("operationModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("operationStartDateTime").ToString());
Console.WriteLine(result.GetProperty("operationEndDateTime").ToString());
Console.WriteLine(result.GetProperty("attachmentsLink").ToString());
Console.WriteLine(result.GetProperty("associatedBoundaryId").ToString());
Console.WriteLine(result.GetProperty("partyId").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("eTag").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("modifiedBy").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="CreateOrUpdateAsync(string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateOrUpdateAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
HarvestData client = new FarmBeatsClient(endpoint, credential).GetHarvestDataClient(apiVersion: "2022-11-01-preview");

using RequestContent content = RequestContent.Create(new object());
Response response = await client.CreateOrUpdateAsync("<partyId>", "<harvestDataId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateOrUpdateAsync with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
HarvestData client = new FarmBeatsClient(endpoint, credential).GetHarvestDataClient(apiVersion: "2022-11-01-preview");

using RequestContent content = RequestContent.Create(new
{
    totalYield = new
    {
        unit = "<unit>",
        value = 123.45,
    },
    harvestProductDetails = new object[]
    {
        new
        {
            productName = "<productName>",
        }
    },
    operationModifiedDateTime = "2022-05-10T18:57:31.2311892Z",
    operationStartDateTime = "2022-05-10T18:57:31.2311892Z",
    operationEndDateTime = "2022-05-10T18:57:31.2311892Z",
    associatedBoundaryId = "<associatedBoundaryId>",
    status = "<status>",
    source = "<source>",
    name = "<name>",
    description = "<description>",
    properties = new
    {
        key = new object(),
    },
});
Response response = await client.CreateOrUpdateAsync("<partyId>", "<harvestDataId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("totalYield").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("totalYield").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("avgYield").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("avgYield").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("totalWetMass").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("totalWetMass").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("avgWetMass").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("avgWetMass").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("avgMoisture").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("avgMoisture").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("avgSpeed").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("avgSpeed").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("productName").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("area").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("area").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalYield").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalYield").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgYield").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgYield").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgMoisture").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgMoisture").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalWetMass").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalWetMass").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgWetMass").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgWetMass").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("area").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("area").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("operationModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("operationStartDateTime").ToString());
Console.WriteLine(result.GetProperty("operationEndDateTime").ToString());
Console.WriteLine(result.GetProperty("attachmentsLink").ToString());
Console.WriteLine(result.GetProperty("associatedBoundaryId").ToString());
Console.WriteLine(result.GetProperty("partyId").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("eTag").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("modifiedBy").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="CreateOrUpdate(string,string,RequestContent,RequestContext)">
      <example>
This sample shows how to call CreateOrUpdate and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
HarvestData client = new FarmBeatsClient(endpoint, credential).GetHarvestDataClient(apiVersion: "2022-11-01-preview");

using RequestContent content = RequestContent.Create(new object());
Response response = client.CreateOrUpdate("<partyId>", "<harvestDataId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.ToString());
]]></code>
This sample shows how to call CreateOrUpdate with all parameters and request content and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
HarvestData client = new FarmBeatsClient(endpoint, credential).GetHarvestDataClient(apiVersion: "2022-11-01-preview");

using RequestContent content = RequestContent.Create(new
{
    totalYield = new
    {
        unit = "<unit>",
        value = 123.45,
    },
    harvestProductDetails = new object[]
    {
        new
        {
            productName = "<productName>",
        }
    },
    operationModifiedDateTime = "2022-05-10T18:57:31.2311892Z",
    operationStartDateTime = "2022-05-10T18:57:31.2311892Z",
    operationEndDateTime = "2022-05-10T18:57:31.2311892Z",
    associatedBoundaryId = "<associatedBoundaryId>",
    status = "<status>",
    source = "<source>",
    name = "<name>",
    description = "<description>",
    properties = new
    {
        key = new object(),
    },
});
Response response = client.CreateOrUpdate("<partyId>", "<harvestDataId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("totalYield").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("totalYield").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("avgYield").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("avgYield").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("totalWetMass").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("totalWetMass").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("avgWetMass").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("avgWetMass").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("avgMoisture").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("avgMoisture").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("avgSpeed").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("avgSpeed").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("productName").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("area").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("area").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalYield").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalYield").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgYield").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgYield").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgMoisture").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgMoisture").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalWetMass").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalWetMass").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgWetMass").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgWetMass").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("area").GetProperty("unit").ToString());
Console.WriteLine(result.GetProperty("area").GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("operationModifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("operationStartDateTime").ToString());
Console.WriteLine(result.GetProperty("operationEndDateTime").ToString());
Console.WriteLine(result.GetProperty("attachmentsLink").ToString());
Console.WriteLine(result.GetProperty("associatedBoundaryId").ToString());
Console.WriteLine(result.GetProperty("partyId").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("eTag").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
Console.WriteLine(result.GetProperty("source").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("createdBy").ToString());
Console.WriteLine(result.GetProperty("modifiedBy").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
]]></code></example>
    </member>
    <member name="DeleteAsync(string,string,RequestContext)">
      <example>
This sample shows how to call DeleteAsync.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
HarvestData client = new FarmBeatsClient(endpoint, credential).GetHarvestDataClient(apiVersion: "2022-11-01-preview");

Response response = await client.DeleteAsync("<partyId>", "<harvestDataId>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteAsync with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
HarvestData client = new FarmBeatsClient(endpoint, credential).GetHarvestDataClient(apiVersion: "2022-11-01-preview");

Response response = await client.DeleteAsync("<partyId>", "<harvestDataId>");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="Delete(string,string,RequestContext)">
      <example>
This sample shows how to call Delete.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
HarvestData client = new FarmBeatsClient(endpoint, credential).GetHarvestDataClient(apiVersion: "2022-11-01-preview");

Response response = client.Delete("<partyId>", "<harvestDataId>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call Delete with all parameters.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
HarvestData client = new FarmBeatsClient(endpoint, credential).GetHarvestDataClient(apiVersion: "2022-11-01-preview");

Response response = client.Delete("<partyId>", "<harvestDataId>");

Console.WriteLine(response.Status);
]]></code></example>
    </member>
    <member name="GetAllHarvestDataAsync(double?,double?,double?,double?,double?,double?,double?,double?,double?,double?,double?,double?,IEnumerable{string},IEnumerable{string},DateTimeOffset?,DateTimeOffset?,DateTimeOffset?,DateTimeOffset?,DateTimeOffset?,DateTimeOffset?,double?,double?,IEnumerable{string},IEnumerable{string},IEnumerable{string},IEnumerable{string},DateTimeOffset?,DateTimeOffset?,DateTimeOffset?,DateTimeOffset?,int?,string,RequestContext)">
      <example>
This sample shows how to call GetAllHarvestDataAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
HarvestData client = new FarmBeatsClient(endpoint, credential).GetHarvestDataClient(apiVersion: "2022-11-01-preview");

await foreach (BinaryData item in client.GetAllHarvestDataAsync(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetAllHarvestDataAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
HarvestData client = new FarmBeatsClient(endpoint, credential).GetHarvestDataClient(apiVersion: "2022-11-01-preview");

await foreach (BinaryData item in client.GetAllHarvestDataAsync(123.45, 123.45, 123.45, 123.45, 123.45, 123.45, 123.45, 123.45, 123.45, 123.45, 123.45, 123.45, new string[] { "<sources>" }, new string[] { "<associatedBoundaryIds>" }, DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), 123.45, 123.45, new string[] { "<harvestDataIds>" }, new string[] { "<names>" }, new string[] { "<propertyFilters>" }, new string[] { "<statuses>" }, DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), 1234, "<skipToken>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("totalYield").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("totalYield").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("avgYield").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("avgYield").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("totalWetMass").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("totalWetMass").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("avgWetMass").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("avgWetMass").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("avgMoisture").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("avgMoisture").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("avgSpeed").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("avgSpeed").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("productName").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("area").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("area").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalYield").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalYield").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgYield").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgYield").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgMoisture").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgMoisture").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalWetMass").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalWetMass").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgWetMass").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgWetMass").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("area").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("area").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("operationModifiedDateTime").ToString());
    Console.WriteLine(result.GetProperty("operationStartDateTime").ToString());
    Console.WriteLine(result.GetProperty("operationEndDateTime").ToString());
    Console.WriteLine(result.GetProperty("attachmentsLink").ToString());
    Console.WriteLine(result.GetProperty("associatedBoundaryId").ToString());
    Console.WriteLine(result.GetProperty("partyId").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("eTag").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
    Console.WriteLine(result.GetProperty("source").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("createdBy").ToString());
    Console.WriteLine(result.GetProperty("modifiedBy").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
}
]]></code></example>
    </member>
    <member name="GetAllHarvestData(double?,double?,double?,double?,double?,double?,double?,double?,double?,double?,double?,double?,IEnumerable{string},IEnumerable{string},DateTimeOffset?,DateTimeOffset?,DateTimeOffset?,DateTimeOffset?,DateTimeOffset?,DateTimeOffset?,double?,double?,IEnumerable{string},IEnumerable{string},IEnumerable{string},IEnumerable{string},DateTimeOffset?,DateTimeOffset?,DateTimeOffset?,DateTimeOffset?,int?,string,RequestContext)">
      <example>
This sample shows how to call GetAllHarvestData and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
HarvestData client = new FarmBeatsClient(endpoint, credential).GetHarvestDataClient(apiVersion: "2022-11-01-preview");

foreach (BinaryData item in client.GetAllHarvestData(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetAllHarvestData with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
HarvestData client = new FarmBeatsClient(endpoint, credential).GetHarvestDataClient(apiVersion: "2022-11-01-preview");

foreach (BinaryData item in client.GetAllHarvestData(123.45, 123.45, 123.45, 123.45, 123.45, 123.45, 123.45, 123.45, 123.45, 123.45, 123.45, 123.45, new string[] { "<sources>" }, new string[] { "<associatedBoundaryIds>" }, DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), 123.45, 123.45, new string[] { "<harvestDataIds>" }, new string[] { "<names>" }, new string[] { "<propertyFilters>" }, new string[] { "<statuses>" }, DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), 1234, "<skipToken>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("totalYield").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("totalYield").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("avgYield").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("avgYield").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("totalWetMass").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("totalWetMass").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("avgWetMass").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("avgWetMass").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("avgMoisture").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("avgMoisture").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("avgSpeed").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("avgSpeed").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("productName").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("area").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("area").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalYield").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalYield").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgYield").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgYield").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgMoisture").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgMoisture").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalWetMass").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalWetMass").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgWetMass").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgWetMass").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("area").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("area").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("operationModifiedDateTime").ToString());
    Console.WriteLine(result.GetProperty("operationStartDateTime").ToString());
    Console.WriteLine(result.GetProperty("operationEndDateTime").ToString());
    Console.WriteLine(result.GetProperty("attachmentsLink").ToString());
    Console.WriteLine(result.GetProperty("associatedBoundaryId").ToString());
    Console.WriteLine(result.GetProperty("partyId").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("eTag").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
    Console.WriteLine(result.GetProperty("source").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("createdBy").ToString());
    Console.WriteLine(result.GetProperty("modifiedBy").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
}
]]></code></example>
    </member>
    <member name="GetAllHarvestDataByPartyIdAsync(string,double?,double?,double?,double?,double?,double?,double?,double?,double?,double?,double?,double?,IEnumerable{string},IEnumerable{string},DateTimeOffset?,DateTimeOffset?,DateTimeOffset?,DateTimeOffset?,DateTimeOffset?,DateTimeOffset?,double?,double?,IEnumerable{string},IEnumerable{string},IEnumerable{string},IEnumerable{string},DateTimeOffset?,DateTimeOffset?,DateTimeOffset?,DateTimeOffset?,int?,string,RequestContext)">
      <example>
This sample shows how to call GetAllHarvestDataByPartyIdAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
HarvestData client = new FarmBeatsClient(endpoint, credential).GetHarvestDataClient(apiVersion: "2022-11-01-preview");

await foreach (BinaryData item in client.GetAllHarvestDataByPartyIdAsync("<partyId>", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetAllHarvestDataByPartyIdAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
HarvestData client = new FarmBeatsClient(endpoint, credential).GetHarvestDataClient(apiVersion: "2022-11-01-preview");

await foreach (BinaryData item in client.GetAllHarvestDataByPartyIdAsync("<partyId>", 123.45, 123.45, 123.45, 123.45, 123.45, 123.45, 123.45, 123.45, 123.45, 123.45, 123.45, 123.45, new string[] { "<sources>" }, new string[] { "<associatedBoundaryIds>" }, DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), 123.45, 123.45, new string[] { "<ids>" }, new string[] { "<names>" }, new string[] { "<propertyFilters>" }, new string[] { "<statuses>" }, DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), 1234, "<skipToken>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("totalYield").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("totalYield").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("avgYield").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("avgYield").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("totalWetMass").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("totalWetMass").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("avgWetMass").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("avgWetMass").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("avgMoisture").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("avgMoisture").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("avgSpeed").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("avgSpeed").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("productName").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("area").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("area").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalYield").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalYield").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgYield").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgYield").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgMoisture").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgMoisture").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalWetMass").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalWetMass").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgWetMass").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgWetMass").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("area").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("area").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("operationModifiedDateTime").ToString());
    Console.WriteLine(result.GetProperty("operationStartDateTime").ToString());
    Console.WriteLine(result.GetProperty("operationEndDateTime").ToString());
    Console.WriteLine(result.GetProperty("attachmentsLink").ToString());
    Console.WriteLine(result.GetProperty("associatedBoundaryId").ToString());
    Console.WriteLine(result.GetProperty("partyId").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("eTag").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
    Console.WriteLine(result.GetProperty("source").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("createdBy").ToString());
    Console.WriteLine(result.GetProperty("modifiedBy").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
}
]]></code></example>
    </member>
    <member name="GetAllHarvestDataByPartyId(string,double?,double?,double?,double?,double?,double?,double?,double?,double?,double?,double?,double?,IEnumerable{string},IEnumerable{string},DateTimeOffset?,DateTimeOffset?,DateTimeOffset?,DateTimeOffset?,DateTimeOffset?,DateTimeOffset?,double?,double?,IEnumerable{string},IEnumerable{string},IEnumerable{string},IEnumerable{string},DateTimeOffset?,DateTimeOffset?,DateTimeOffset?,DateTimeOffset?,int?,string,RequestContext)">
      <example>
This sample shows how to call GetAllHarvestDataByPartyId and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
HarvestData client = new FarmBeatsClient(endpoint, credential).GetHarvestDataClient(apiVersion: "2022-11-01-preview");

foreach (BinaryData item in client.GetAllHarvestDataByPartyId("<partyId>", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.ToString());
}
]]></code>
This sample shows how to call GetAllHarvestDataByPartyId with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
HarvestData client = new FarmBeatsClient(endpoint, credential).GetHarvestDataClient(apiVersion: "2022-11-01-preview");

foreach (BinaryData item in client.GetAllHarvestDataByPartyId("<partyId>", 123.45, 123.45, 123.45, 123.45, 123.45, 123.45, 123.45, 123.45, 123.45, 123.45, 123.45, 123.45, new string[] { "<sources>" }, new string[] { "<associatedBoundaryIds>" }, DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), 123.45, 123.45, new string[] { "<ids>" }, new string[] { "<names>" }, new string[] { "<propertyFilters>" }, new string[] { "<statuses>" }, DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), 1234, "<skipToken>", null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("totalYield").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("totalYield").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("avgYield").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("avgYield").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("totalWetMass").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("totalWetMass").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("avgWetMass").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("avgWetMass").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("avgMoisture").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("avgMoisture").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("avgSpeed").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("avgSpeed").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("productName").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("area").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("area").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalYield").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalYield").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgYield").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgYield").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgMoisture").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgMoisture").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalWetMass").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("totalWetMass").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgWetMass").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("harvestProductDetails")[0].GetProperty("avgWetMass").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("area").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("area").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("operationModifiedDateTime").ToString());
    Console.WriteLine(result.GetProperty("operationStartDateTime").ToString());
    Console.WriteLine(result.GetProperty("operationEndDateTime").ToString());
    Console.WriteLine(result.GetProperty("attachmentsLink").ToString());
    Console.WriteLine(result.GetProperty("associatedBoundaryId").ToString());
    Console.WriteLine(result.GetProperty("partyId").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("eTag").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
    Console.WriteLine(result.GetProperty("source").ToString());
    Console.WriteLine(result.GetProperty("name").ToString());
    Console.WriteLine(result.GetProperty("description").ToString());
    Console.WriteLine(result.GetProperty("createdBy").ToString());
    Console.WriteLine(result.GetProperty("modifiedBy").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("<key>").ToString());
}
]]></code></example>
    </member>
    <member name="CreateCascadeDeleteJobAsync(WaitUntil,string,string,string,RequestContext)">
      <example>
This sample shows how to call CreateCascadeDeleteJobAsync and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
HarvestData client = new FarmBeatsClient(endpoint, credential).GetHarvestDataClient(apiVersion: "2022-11-01-preview");

Operation<BinaryData> operation = await client.CreateCascadeDeleteJobAsync(WaitUntil.Completed, "<jobId>", "<partyId>", "<harvestDataId>", null);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("partyId").ToString());
Console.WriteLine(result.GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("resourceType").ToString());
]]></code>
This sample shows how to call CreateCascadeDeleteJobAsync with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
HarvestData client = new FarmBeatsClient(endpoint, credential).GetHarvestDataClient(apiVersion: "2022-11-01-preview");

Operation<BinaryData> operation = await client.CreateCascadeDeleteJobAsync(WaitUntil.Completed, "<jobId>", "<partyId>", "<harvestDataId>", null);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("partyId").ToString());
Console.WriteLine(result.GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("resourceType").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
Console.WriteLine(result.GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errorCode").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("endTime").ToString());
]]></code></example>
    </member>
    <member name="CreateCascadeDeleteJob(WaitUntil,string,string,string,RequestContext)">
      <example>
This sample shows how to call CreateCascadeDeleteJob and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
HarvestData client = new FarmBeatsClient(endpoint, credential).GetHarvestDataClient(apiVersion: "2022-11-01-preview");

Operation<BinaryData> operation = client.CreateCascadeDeleteJob(WaitUntil.Completed, "<jobId>", "<partyId>", "<harvestDataId>", null);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("partyId").ToString());
Console.WriteLine(result.GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("resourceType").ToString());
]]></code>
This sample shows how to call CreateCascadeDeleteJob with all parameters and parse the result.
<code><![CDATA[
Uri endpoint = new Uri("<https://my-service.azure.com>");
TokenCredential credential = new DefaultAzureCredential();
HarvestData client = new FarmBeatsClient(endpoint, credential).GetHarvestDataClient(apiVersion: "2022-11-01-preview");

Operation<BinaryData> operation = client.CreateCascadeDeleteJob(WaitUntil.Completed, "<jobId>", "<partyId>", "<harvestDataId>", null);
BinaryData responseData = operation.Value;

JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("partyId").ToString());
Console.WriteLine(result.GetProperty("resourceId").ToString());
Console.WriteLine(result.GetProperty("resourceType").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
Console.WriteLine(result.GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("errorCode").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("endTime").ToString());
]]></code></example>
    </member>
  </members>
</doc>