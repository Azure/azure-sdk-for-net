<?xml version="1.0" encoding="utf-8"?>
<doc>
  <members>
    <member name="GetDataIngestionJobDetailsAsync(String,RequestContext)">
<example>
This sample shows how to call GetDataIngestionJobDetailsAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new WeatherClient(endpoint, credential);

Response response = await client.GetDataIngestionJobDetailsAsync("<jobId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("boundaryId").ToString());
Console.WriteLine(result.GetProperty("farmerId").ToString());
Console.WriteLine(result.GetProperty("extensionId").ToString());
Console.WriteLine(result.GetProperty("extensionApiName").ToString());
Console.WriteLine(result.GetProperty("extensionApiInput").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("extensionDataProviderAppId").ToString());
Console.WriteLine(result.GetProperty("extensionDataProviderApiKey").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
Console.WriteLine(result.GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>WeatherDataIngestionJob</c>:
<code>{
  boundaryId: string, # Required. The id of the boundary object for which weather data is being fetched.
  farmerId: string, # Required. The id of the farmer object for which weather data is being fetched.
  extensionId: string, # Required. ID of the extension to be used for the providerInput. eg. DTN.ClearAg.
  extensionApiName: string, # Required. Extension api name to which request is to be made.
  extensionApiInput: Dictionary&lt;string, AnyObject&gt;, # Required. Extension api input dictionary which would be used to feed request query/body/parameter information.
  extensionDataProviderAppId: string, # Optional. App id of the weather data provider.
  extensionDataProviderApiKey: string, # Optional. Api key of the weather data provider.
  id: string, # Optional. Unique job id.
  status: string, # Optional. Status of the job.
Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
  durationInSeconds: number, # Optional. Duration of the job in seconds.
  message: string, # Optional. Status message to capture more details of the job.
  createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
}
</code>

</remarks>
    </member>
    <member name="GetDataIngestionJobDetails(String,RequestContext)">
<example>
This sample shows how to call GetDataIngestionJobDetails with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new WeatherClient(endpoint, credential);

Response response = client.GetDataIngestionJobDetails("<jobId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("boundaryId").ToString());
Console.WriteLine(result.GetProperty("farmerId").ToString());
Console.WriteLine(result.GetProperty("extensionId").ToString());
Console.WriteLine(result.GetProperty("extensionApiName").ToString());
Console.WriteLine(result.GetProperty("extensionApiInput").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("extensionDataProviderAppId").ToString());
Console.WriteLine(result.GetProperty("extensionDataProviderApiKey").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
Console.WriteLine(result.GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>WeatherDataIngestionJob</c>:
<code>{
  boundaryId: string, # Required. The id of the boundary object for which weather data is being fetched.
  farmerId: string, # Required. The id of the farmer object for which weather data is being fetched.
  extensionId: string, # Required. ID of the extension to be used for the providerInput. eg. DTN.ClearAg.
  extensionApiName: string, # Required. Extension api name to which request is to be made.
  extensionApiInput: Dictionary&lt;string, AnyObject&gt;, # Required. Extension api input dictionary which would be used to feed request query/body/parameter information.
  extensionDataProviderAppId: string, # Optional. App id of the weather data provider.
  extensionDataProviderApiKey: string, # Optional. Api key of the weather data provider.
  id: string, # Optional. Unique job id.
  status: string, # Optional. Status of the job.
Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
  durationInSeconds: number, # Optional. Duration of the job in seconds.
  message: string, # Optional. Status message to capture more details of the job.
  createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
}
</code>

</remarks>
    </member>
    <member name="GetDataDeleteJobDetailsAsync(String,RequestContext)">
<example>
This sample shows how to call GetDataDeleteJobDetailsAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new WeatherClient(endpoint, credential);

Response response = await client.GetDataDeleteJobDetailsAsync("<jobId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("extensionId").ToString());
Console.WriteLine(result.GetProperty("farmerId").ToString());
Console.WriteLine(result.GetProperty("boundaryId").ToString());
Console.WriteLine(result.GetProperty("weatherDataType").ToString());
Console.WriteLine(result.GetProperty("granularity").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("endDateTime").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
Console.WriteLine(result.GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>WeatherDataDeleteJob</c>:
<code>{
  extensionId: string, # Required. ID of the extension to be used for the providerInput. eg. DTN.ClearAg.
  farmerId: string, # Required. The id of the farmer object for which weather data is being fetched.
  boundaryId: string, # Required. The id of the boundary object for which weather data is being fetched.
  weatherDataType: string, # Optional. Type of weather data. Possible values include: &apos;forecast&apos; , &apos;historical&apos;.
  granularity: string, # Optional. Granularity of weather data. Possible values include: &apos;daily&apos; , &apos;hourly&apos;.
  startDateTime: string (ISO 8601 Format), # Optional. Weather data start UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ.
  endDateTime: string (ISO 8601 Format), # Optional. Weather data end UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ.
  id: string, # Optional. Unique job id.
  status: string, # Optional. Status of the job.
Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
  durationInSeconds: number, # Optional. Duration of the job in seconds.
  message: string, # Optional. Status message to capture more details of the job.
  createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
}
</code>

</remarks>
    </member>
    <member name="GetDataDeleteJobDetails(String,RequestContext)">
<example>
This sample shows how to call GetDataDeleteJobDetails with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new WeatherClient(endpoint, credential);

Response response = client.GetDataDeleteJobDetails("<jobId>");

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("extensionId").ToString());
Console.WriteLine(result.GetProperty("farmerId").ToString());
Console.WriteLine(result.GetProperty("boundaryId").ToString());
Console.WriteLine(result.GetProperty("weatherDataType").ToString());
Console.WriteLine(result.GetProperty("granularity").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("endDateTime").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
Console.WriteLine(result.GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the response payload.

Response Body:

Schema for <c>WeatherDataDeleteJob</c>:
<code>{
  extensionId: string, # Required. ID of the extension to be used for the providerInput. eg. DTN.ClearAg.
  farmerId: string, # Required. The id of the farmer object for which weather data is being fetched.
  boundaryId: string, # Required. The id of the boundary object for which weather data is being fetched.
  weatherDataType: string, # Optional. Type of weather data. Possible values include: &apos;forecast&apos; , &apos;historical&apos;.
  granularity: string, # Optional. Granularity of weather data. Possible values include: &apos;daily&apos; , &apos;hourly&apos;.
  startDateTime: string (ISO 8601 Format), # Optional. Weather data start UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ.
  endDateTime: string (ISO 8601 Format), # Optional. Weather data end UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ.
  id: string, # Optional. Unique job id.
  status: string, # Optional. Status of the job.
Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
  durationInSeconds: number, # Optional. Duration of the job in seconds.
  message: string, # Optional. Status message to capture more details of the job.
  createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
}
</code>

</remarks>
    </member>
    <member name="GetWeathersAsync(String,String,String,String,String,DateTimeOffset,DateTimeOffset,Int32,String,RequestContext)">
<example>
This sample shows how to call GetWeathersAsync with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new WeatherClient(endpoint, credential);

await foreach (var data in client.GetWeathersAsync("<farmerId>", "<boundaryId>", "<extensionId>", "<weatherDataType>", "<granularity>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("farmerId").ToString());
    Console.WriteLine(result.GetProperty("boundaryId").ToString());
    Console.WriteLine(result.GetProperty("extensionId").ToString());
    Console.WriteLine(result.GetProperty("location").GetProperty("latitude").ToString());
    Console.WriteLine(result.GetProperty("location").GetProperty("longitude").ToString());
    Console.WriteLine(result.GetProperty("dateTime").ToString());
    Console.WriteLine(result.GetProperty("extensionVersion").ToString());
    Console.WriteLine(result.GetProperty("weatherDataType").ToString());
    Console.WriteLine(result.GetProperty("granularity").ToString());
}
]]></code>
This sample shows how to call GetWeathersAsync with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new WeatherClient(endpoint, credential);

await foreach (var data in client.GetWeathersAsync("<farmerId>", "<boundaryId>", "<extensionId>", "<weatherDataType>", "<granularity>", DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 1234, "<skipToken>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("farmerId").ToString());
    Console.WriteLine(result.GetProperty("boundaryId").ToString());
    Console.WriteLine(result.GetProperty("extensionId").ToString());
    Console.WriteLine(result.GetProperty("location").GetProperty("latitude").ToString());
    Console.WriteLine(result.GetProperty("location").GetProperty("longitude").ToString());
    Console.WriteLine(result.GetProperty("dateTime").ToString());
    Console.WriteLine(result.GetProperty("unitSystemCode").ToString());
    Console.WriteLine(result.GetProperty("extensionVersion").ToString());
    Console.WriteLine(result.GetProperty("weatherDataType").ToString());
    Console.WriteLine(result.GetProperty("granularity").ToString());
    Console.WriteLine(result.GetProperty("cloudCover").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("cloudCover").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("dewPoint").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("dewPoint").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("growingDegreeDay").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("growingDegreeDay").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("precipitation").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("precipitation").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("pressure").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("pressure").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("relativeHumidity").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("relativeHumidity").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("soilMoisture").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("soilMoisture").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("soilTemperature").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("soilTemperature").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("temperature").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("temperature").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("visibility").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("visibility").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("wetBulbTemperature").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("wetBulbTemperature").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("windChill").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("windChill").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("windDirection").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("windDirection").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("windGust").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("windGust").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("windSpeed").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("windSpeed").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("eTag").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>WeatherDataListResponseValue</c>:
<code>{
  farmerId: string, # Required. Farmer ID.
  boundaryId: string, # Required. Boundary ID.
  extensionId: string, # Required. ID of the weather extension.
  location: {
    latitude: number, # Required. Latitude of the location.
    longitude: number, # Required. Longitude of the location.
  }, # Required. Location model class.
  dateTime: string (ISO 8601 Format), # Required. Date-time of the weather data, sample format: yyyy-MM-ddTHH:mm:ssZ.
  unitSystemCode: string, # Optional. Unit System like US/SI etc.
  extensionVersion: string, # Required. Version of the weather data extension.
  weatherDataType: string, # Required. Type of weather data (forecast/historical).
  granularity: string, # Required. Granularity of weather data (daily/hourly).
  cloudCover: {
    unit: string, # Optional. Data unit.
    value: number, # Optional. Data value.
  }, # Optional. Schema for storing measurement reading and unit.
  dewPoint: Measure, # Optional. Schema for storing measurement reading and unit.
  growingDegreeDay: Measure, # Optional. Schema for storing measurement reading and unit.
  precipitation: Measure, # Optional. Schema for storing measurement reading and unit.
  pressure: Measure, # Optional. Schema for storing measurement reading and unit.
  relativeHumidity: Measure, # Optional. Schema for storing measurement reading and unit.
  soilMoisture: Measure, # Optional. Schema for storing measurement reading and unit.
  soilTemperature: Measure, # Optional. Schema for storing measurement reading and unit.
  temperature: Measure, # Optional. Schema for storing measurement reading and unit.
  visibility: Measure, # Optional. Schema for storing measurement reading and unit.
  wetBulbTemperature: Measure, # Optional. Schema for storing measurement reading and unit.
  windChill: Measure, # Optional. Schema for storing measurement reading and unit.
  windDirection: Measure, # Optional. Schema for storing measurement reading and unit.
  windGust: Measure, # Optional. Schema for storing measurement reading and unit.
  windSpeed: Measure, # Optional. Schema for storing measurement reading and unit.
  id: string, # Optional. Weather data ID.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
  createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
  properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
}
</code>

</remarks>
    </member>
    <member name="GetWeathers(String,String,String,String,String,DateTimeOffset,DateTimeOffset,Int32,String,RequestContext)">
<example>
This sample shows how to call GetWeathers with required parameters and parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new WeatherClient(endpoint, credential);

foreach (var data in client.GetWeathers("<farmerId>", "<boundaryId>", "<extensionId>", "<weatherDataType>", "<granularity>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("farmerId").ToString());
    Console.WriteLine(result.GetProperty("boundaryId").ToString());
    Console.WriteLine(result.GetProperty("extensionId").ToString());
    Console.WriteLine(result.GetProperty("location").GetProperty("latitude").ToString());
    Console.WriteLine(result.GetProperty("location").GetProperty("longitude").ToString());
    Console.WriteLine(result.GetProperty("dateTime").ToString());
    Console.WriteLine(result.GetProperty("extensionVersion").ToString());
    Console.WriteLine(result.GetProperty("weatherDataType").ToString());
    Console.WriteLine(result.GetProperty("granularity").ToString());
}
]]></code>
This sample shows how to call GetWeathers with all parameters, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new WeatherClient(endpoint, credential);

foreach (var data in client.GetWeathers("<farmerId>", "<boundaryId>", "<extensionId>", "<weatherDataType>", "<granularity>", DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 1234, "<skipToken>"))
{
    JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("farmerId").ToString());
    Console.WriteLine(result.GetProperty("boundaryId").ToString());
    Console.WriteLine(result.GetProperty("extensionId").ToString());
    Console.WriteLine(result.GetProperty("location").GetProperty("latitude").ToString());
    Console.WriteLine(result.GetProperty("location").GetProperty("longitude").ToString());
    Console.WriteLine(result.GetProperty("dateTime").ToString());
    Console.WriteLine(result.GetProperty("unitSystemCode").ToString());
    Console.WriteLine(result.GetProperty("extensionVersion").ToString());
    Console.WriteLine(result.GetProperty("weatherDataType").ToString());
    Console.WriteLine(result.GetProperty("granularity").ToString());
    Console.WriteLine(result.GetProperty("cloudCover").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("cloudCover").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("dewPoint").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("dewPoint").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("growingDegreeDay").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("growingDegreeDay").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("precipitation").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("precipitation").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("pressure").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("pressure").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("relativeHumidity").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("relativeHumidity").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("soilMoisture").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("soilMoisture").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("soilTemperature").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("soilTemperature").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("temperature").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("temperature").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("visibility").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("visibility").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("wetBulbTemperature").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("wetBulbTemperature").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("windChill").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("windChill").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("windDirection").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("windDirection").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("windGust").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("windGust").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("windSpeed").GetProperty("unit").ToString());
    Console.WriteLine(result.GetProperty("windSpeed").GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("eTag").ToString());
    Console.WriteLine(result.GetProperty("createdDateTime").ToString());
    Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
    Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
}
]]></code>
</example>
<remarks>
Below is the JSON schema for one item in the pageable response.

Response Body:

Schema for <c>WeatherDataListResponseValue</c>:
<code>{
  farmerId: string, # Required. Farmer ID.
  boundaryId: string, # Required. Boundary ID.
  extensionId: string, # Required. ID of the weather extension.
  location: {
    latitude: number, # Required. Latitude of the location.
    longitude: number, # Required. Longitude of the location.
  }, # Required. Location model class.
  dateTime: string (ISO 8601 Format), # Required. Date-time of the weather data, sample format: yyyy-MM-ddTHH:mm:ssZ.
  unitSystemCode: string, # Optional. Unit System like US/SI etc.
  extensionVersion: string, # Required. Version of the weather data extension.
  weatherDataType: string, # Required. Type of weather data (forecast/historical).
  granularity: string, # Required. Granularity of weather data (daily/hourly).
  cloudCover: {
    unit: string, # Optional. Data unit.
    value: number, # Optional. Data value.
  }, # Optional. Schema for storing measurement reading and unit.
  dewPoint: Measure, # Optional. Schema for storing measurement reading and unit.
  growingDegreeDay: Measure, # Optional. Schema for storing measurement reading and unit.
  precipitation: Measure, # Optional. Schema for storing measurement reading and unit.
  pressure: Measure, # Optional. Schema for storing measurement reading and unit.
  relativeHumidity: Measure, # Optional. Schema for storing measurement reading and unit.
  soilMoisture: Measure, # Optional. Schema for storing measurement reading and unit.
  soilTemperature: Measure, # Optional. Schema for storing measurement reading and unit.
  temperature: Measure, # Optional. Schema for storing measurement reading and unit.
  visibility: Measure, # Optional. Schema for storing measurement reading and unit.
  wetBulbTemperature: Measure, # Optional. Schema for storing measurement reading and unit.
  windChill: Measure, # Optional. Schema for storing measurement reading and unit.
  windDirection: Measure, # Optional. Schema for storing measurement reading and unit.
  windGust: Measure, # Optional. Schema for storing measurement reading and unit.
  windSpeed: Measure, # Optional. Schema for storing measurement reading and unit.
  id: string, # Optional. Weather data ID.
  eTag: string, # Optional. The ETag value to implement optimistic concurrency.
  createdDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ.
  modifiedDateTime: string (ISO 8601 Format), # Optional. Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ.
  properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
}
</code>

</remarks>
    </member>
    <member name="CreateDataIngestionJobAsync(WaitUntil,String,RequestContent,RequestContext)">
<example>
This sample shows how to call CreateDataIngestionJobAsync with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new WeatherClient(endpoint, credential);

var data = new {
    boundaryId = "<boundaryId>",
    farmerId = "<farmerId>",
    extensionId = "<extensionId>",
    extensionApiName = "<extensionApiName>",
    extensionApiInput = new {
        key = new {},
    },
};

var operation = await client.CreateDataIngestionJobAsync(WaitUntil.Started, "<jobId>", RequestContent.Create(data));

BinaryData data = await operation.WaitForCompletionAsync();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("boundaryId").ToString());
Console.WriteLine(result.GetProperty("farmerId").ToString());
Console.WriteLine(result.GetProperty("extensionId").ToString());
Console.WriteLine(result.GetProperty("extensionApiName").ToString());
Console.WriteLine(result.GetProperty("extensionApiInput").GetProperty("<test>").ToString());
]]></code>
This sample shows how to call CreateDataIngestionJobAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new WeatherClient(endpoint, credential);

var data = new {
    boundaryId = "<boundaryId>",
    farmerId = "<farmerId>",
    extensionId = "<extensionId>",
    extensionApiName = "<extensionApiName>",
    extensionApiInput = new {
        key = new {},
    },
    extensionDataProviderAppId = "<extensionDataProviderAppId>",
    extensionDataProviderApiKey = "<extensionDataProviderApiKey>",
    name = "<name>",
    description = "<description>",
    properties = new {
        key = new {},
    },
};

var operation = await client.CreateDataIngestionJobAsync(WaitUntil.Started, "<jobId>", RequestContent.Create(data));

BinaryData data = await operation.WaitForCompletionAsync();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("boundaryId").ToString());
Console.WriteLine(result.GetProperty("farmerId").ToString());
Console.WriteLine(result.GetProperty("extensionId").ToString());
Console.WriteLine(result.GetProperty("extensionApiName").ToString());
Console.WriteLine(result.GetProperty("extensionApiInput").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("extensionDataProviderAppId").ToString());
Console.WriteLine(result.GetProperty("extensionDataProviderApiKey").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
Console.WriteLine(result.GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>WeatherDataIngestionJob</c>:
<code>{
  boundaryId: string, # Required. The id of the boundary object for which weather data is being fetched.
  farmerId: string, # Required. The id of the farmer object for which weather data is being fetched.
  extensionId: string, # Required. ID of the extension to be used for the providerInput. eg. DTN.ClearAg.
  extensionApiName: string, # Required. Extension api name to which request is to be made.
  extensionApiInput: Dictionary&lt;string, AnyObject&gt;, # Required. Extension api input dictionary which would be used to feed request query/body/parameter information.
  extensionDataProviderAppId: string, # Optional. App id of the weather data provider.
  extensionDataProviderApiKey: string, # Optional. Api key of the weather data provider.
  id: string, # Optional. Unique job id.
  status: string, # Optional. Status of the job.
Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
  durationInSeconds: number, # Optional. Duration of the job in seconds.
  message: string, # Optional. Status message to capture more details of the job.
  createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
}
</code>

Response Body:

Schema for <c>WeatherDataIngestionJob</c>:
<code>{
  boundaryId: string, # Required. The id of the boundary object for which weather data is being fetched.
  farmerId: string, # Required. The id of the farmer object for which weather data is being fetched.
  extensionId: string, # Required. ID of the extension to be used for the providerInput. eg. DTN.ClearAg.
  extensionApiName: string, # Required. Extension api name to which request is to be made.
  extensionApiInput: Dictionary&lt;string, AnyObject&gt;, # Required. Extension api input dictionary which would be used to feed request query/body/parameter information.
  extensionDataProviderAppId: string, # Optional. App id of the weather data provider.
  extensionDataProviderApiKey: string, # Optional. Api key of the weather data provider.
  id: string, # Optional. Unique job id.
  status: string, # Optional. Status of the job.
Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
  durationInSeconds: number, # Optional. Duration of the job in seconds.
  message: string, # Optional. Status message to capture more details of the job.
  createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
}
</code>

</remarks>
    </member>
    <member name="CreateDataIngestionJob(WaitUntil,String,RequestContent,RequestContext)">
<example>
This sample shows how to call CreateDataIngestionJob with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new WeatherClient(endpoint, credential);

var data = new {
    boundaryId = "<boundaryId>",
    farmerId = "<farmerId>",
    extensionId = "<extensionId>",
    extensionApiName = "<extensionApiName>",
    extensionApiInput = new {
        key = new {},
    },
};

var operation = client.CreateDataIngestionJob(WaitUntil.Started, "<jobId>", RequestContent.Create(data));

BinaryData data = operation.WaitForCompletion();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("boundaryId").ToString());
Console.WriteLine(result.GetProperty("farmerId").ToString());
Console.WriteLine(result.GetProperty("extensionId").ToString());
Console.WriteLine(result.GetProperty("extensionApiName").ToString());
Console.WriteLine(result.GetProperty("extensionApiInput").GetProperty("<test>").ToString());
]]></code>
This sample shows how to call CreateDataIngestionJob with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new WeatherClient(endpoint, credential);

var data = new {
    boundaryId = "<boundaryId>",
    farmerId = "<farmerId>",
    extensionId = "<extensionId>",
    extensionApiName = "<extensionApiName>",
    extensionApiInput = new {
        key = new {},
    },
    extensionDataProviderAppId = "<extensionDataProviderAppId>",
    extensionDataProviderApiKey = "<extensionDataProviderApiKey>",
    name = "<name>",
    description = "<description>",
    properties = new {
        key = new {},
    },
};

var operation = client.CreateDataIngestionJob(WaitUntil.Started, "<jobId>", RequestContent.Create(data));

BinaryData data = operation.WaitForCompletion();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("boundaryId").ToString());
Console.WriteLine(result.GetProperty("farmerId").ToString());
Console.WriteLine(result.GetProperty("extensionId").ToString());
Console.WriteLine(result.GetProperty("extensionApiName").ToString());
Console.WriteLine(result.GetProperty("extensionApiInput").GetProperty("<test>").ToString());
Console.WriteLine(result.GetProperty("extensionDataProviderAppId").ToString());
Console.WriteLine(result.GetProperty("extensionDataProviderApiKey").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
Console.WriteLine(result.GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>WeatherDataIngestionJob</c>:
<code>{
  boundaryId: string, # Required. The id of the boundary object for which weather data is being fetched.
  farmerId: string, # Required. The id of the farmer object for which weather data is being fetched.
  extensionId: string, # Required. ID of the extension to be used for the providerInput. eg. DTN.ClearAg.
  extensionApiName: string, # Required. Extension api name to which request is to be made.
  extensionApiInput: Dictionary&lt;string, AnyObject&gt;, # Required. Extension api input dictionary which would be used to feed request query/body/parameter information.
  extensionDataProviderAppId: string, # Optional. App id of the weather data provider.
  extensionDataProviderApiKey: string, # Optional. Api key of the weather data provider.
  id: string, # Optional. Unique job id.
  status: string, # Optional. Status of the job.
Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
  durationInSeconds: number, # Optional. Duration of the job in seconds.
  message: string, # Optional. Status message to capture more details of the job.
  createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
}
</code>

Response Body:

Schema for <c>WeatherDataIngestionJob</c>:
<code>{
  boundaryId: string, # Required. The id of the boundary object for which weather data is being fetched.
  farmerId: string, # Required. The id of the farmer object for which weather data is being fetched.
  extensionId: string, # Required. ID of the extension to be used for the providerInput. eg. DTN.ClearAg.
  extensionApiName: string, # Required. Extension api name to which request is to be made.
  extensionApiInput: Dictionary&lt;string, AnyObject&gt;, # Required. Extension api input dictionary which would be used to feed request query/body/parameter information.
  extensionDataProviderAppId: string, # Optional. App id of the weather data provider.
  extensionDataProviderApiKey: string, # Optional. Api key of the weather data provider.
  id: string, # Optional. Unique job id.
  status: string, # Optional. Status of the job.
Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
  durationInSeconds: number, # Optional. Duration of the job in seconds.
  message: string, # Optional. Status message to capture more details of the job.
  createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
}
</code>

</remarks>
    </member>
    <member name="CreateDataDeleteJobAsync(WaitUntil,String,RequestContent,RequestContext)">
<example>
This sample shows how to call CreateDataDeleteJobAsync with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new WeatherClient(endpoint, credential);

var data = new {
    extensionId = "<extensionId>",
    farmerId = "<farmerId>",
    boundaryId = "<boundaryId>",
};

var operation = await client.CreateDataDeleteJobAsync(WaitUntil.Started, "<jobId>", RequestContent.Create(data));

BinaryData data = await operation.WaitForCompletionAsync();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("extensionId").ToString());
Console.WriteLine(result.GetProperty("farmerId").ToString());
Console.WriteLine(result.GetProperty("boundaryId").ToString());
]]></code>
This sample shows how to call CreateDataDeleteJobAsync with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new WeatherClient(endpoint, credential);

var data = new {
    extensionId = "<extensionId>",
    farmerId = "<farmerId>",
    boundaryId = "<boundaryId>",
    weatherDataType = "<weatherDataType>",
    granularity = "<granularity>",
    startDateTime = "2022-05-10T18:57:31.2311892Z",
    endDateTime = "2022-05-10T18:57:31.2311892Z",
    name = "<name>",
    description = "<description>",
    properties = new {
        key = new {},
    },
};

var operation = await client.CreateDataDeleteJobAsync(WaitUntil.Started, "<jobId>", RequestContent.Create(data));

BinaryData data = await operation.WaitForCompletionAsync();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("extensionId").ToString());
Console.WriteLine(result.GetProperty("farmerId").ToString());
Console.WriteLine(result.GetProperty("boundaryId").ToString());
Console.WriteLine(result.GetProperty("weatherDataType").ToString());
Console.WriteLine(result.GetProperty("granularity").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("endDateTime").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
Console.WriteLine(result.GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>WeatherDataDeleteJob</c>:
<code>{
  extensionId: string, # Required. ID of the extension to be used for the providerInput. eg. DTN.ClearAg.
  farmerId: string, # Required. The id of the farmer object for which weather data is being fetched.
  boundaryId: string, # Required. The id of the boundary object for which weather data is being fetched.
  weatherDataType: string, # Optional. Type of weather data. Possible values include: &apos;forecast&apos; , &apos;historical&apos;.
  granularity: string, # Optional. Granularity of weather data. Possible values include: &apos;daily&apos; , &apos;hourly&apos;.
  startDateTime: string (ISO 8601 Format), # Optional. Weather data start UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ.
  endDateTime: string (ISO 8601 Format), # Optional. Weather data end UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ.
  id: string, # Optional. Unique job id.
  status: string, # Optional. Status of the job.
Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
  durationInSeconds: number, # Optional. Duration of the job in seconds.
  message: string, # Optional. Status message to capture more details of the job.
  createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
}
</code>

Response Body:

Schema for <c>WeatherDataDeleteJob</c>:
<code>{
  extensionId: string, # Required. ID of the extension to be used for the providerInput. eg. DTN.ClearAg.
  farmerId: string, # Required. The id of the farmer object for which weather data is being fetched.
  boundaryId: string, # Required. The id of the boundary object for which weather data is being fetched.
  weatherDataType: string, # Optional. Type of weather data. Possible values include: &apos;forecast&apos; , &apos;historical&apos;.
  granularity: string, # Optional. Granularity of weather data. Possible values include: &apos;daily&apos; , &apos;hourly&apos;.
  startDateTime: string (ISO 8601 Format), # Optional. Weather data start UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ.
  endDateTime: string (ISO 8601 Format), # Optional. Weather data end UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ.
  id: string, # Optional. Unique job id.
  status: string, # Optional. Status of the job.
Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
  durationInSeconds: number, # Optional. Duration of the job in seconds.
  message: string, # Optional. Status message to capture more details of the job.
  createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
}
</code>

</remarks>
    </member>
    <member name="CreateDataDeleteJob(WaitUntil,String,RequestContent,RequestContext)">
<example>
This sample shows how to call CreateDataDeleteJob with required parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new WeatherClient(endpoint, credential);

var data = new {
    extensionId = "<extensionId>",
    farmerId = "<farmerId>",
    boundaryId = "<boundaryId>",
};

var operation = client.CreateDataDeleteJob(WaitUntil.Started, "<jobId>", RequestContent.Create(data));

BinaryData data = operation.WaitForCompletion();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("extensionId").ToString());
Console.WriteLine(result.GetProperty("farmerId").ToString());
Console.WriteLine(result.GetProperty("boundaryId").ToString());
]]></code>
This sample shows how to call CreateDataDeleteJob with all parameters and request content, and how to parse the result.
<code><![CDATA[
var credential = new DefaultAzureCredential();
var endpoint = new Uri("<https://my-service.azure.com>");
var client = new WeatherClient(endpoint, credential);

var data = new {
    extensionId = "<extensionId>",
    farmerId = "<farmerId>",
    boundaryId = "<boundaryId>",
    weatherDataType = "<weatherDataType>",
    granularity = "<granularity>",
    startDateTime = "2022-05-10T18:57:31.2311892Z",
    endDateTime = "2022-05-10T18:57:31.2311892Z",
    name = "<name>",
    description = "<description>",
    properties = new {
        key = new {},
    },
};

var operation = client.CreateDataDeleteJob(WaitUntil.Started, "<jobId>", RequestContent.Create(data));

BinaryData data = operation.WaitForCompletion();
JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
Console.WriteLine(result.GetProperty("extensionId").ToString());
Console.WriteLine(result.GetProperty("farmerId").ToString());
Console.WriteLine(result.GetProperty("boundaryId").ToString());
Console.WriteLine(result.GetProperty("weatherDataType").ToString());
Console.WriteLine(result.GetProperty("granularity").ToString());
Console.WriteLine(result.GetProperty("startDateTime").ToString());
Console.WriteLine(result.GetProperty("endDateTime").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
Console.WriteLine(result.GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("createdDateTime").ToString());
Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
Console.WriteLine(result.GetProperty("startTime").ToString());
Console.WriteLine(result.GetProperty("endTime").ToString());
Console.WriteLine(result.GetProperty("name").ToString());
Console.WriteLine(result.GetProperty("description").ToString());
Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
]]></code>
</example>
<remarks>
Below is the JSON schema for the request and response payloads.

Request Body:

Schema for <c>WeatherDataDeleteJob</c>:
<code>{
  extensionId: string, # Required. ID of the extension to be used for the providerInput. eg. DTN.ClearAg.
  farmerId: string, # Required. The id of the farmer object for which weather data is being fetched.
  boundaryId: string, # Required. The id of the boundary object for which weather data is being fetched.
  weatherDataType: string, # Optional. Type of weather data. Possible values include: &apos;forecast&apos; , &apos;historical&apos;.
  granularity: string, # Optional. Granularity of weather data. Possible values include: &apos;daily&apos; , &apos;hourly&apos;.
  startDateTime: string (ISO 8601 Format), # Optional. Weather data start UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ.
  endDateTime: string (ISO 8601 Format), # Optional. Weather data end UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ.
  id: string, # Optional. Unique job id.
  status: string, # Optional. Status of the job.
Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
  durationInSeconds: number, # Optional. Duration of the job in seconds.
  message: string, # Optional. Status message to capture more details of the job.
  createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
}
</code>

Response Body:

Schema for <c>WeatherDataDeleteJob</c>:
<code>{
  extensionId: string, # Required. ID of the extension to be used for the providerInput. eg. DTN.ClearAg.
  farmerId: string, # Required. The id of the farmer object for which weather data is being fetched.
  boundaryId: string, # Required. The id of the boundary object for which weather data is being fetched.
  weatherDataType: string, # Optional. Type of weather data. Possible values include: &apos;forecast&apos; , &apos;historical&apos;.
  granularity: string, # Optional. Granularity of weather data. Possible values include: &apos;daily&apos; , &apos;hourly&apos;.
  startDateTime: string (ISO 8601 Format), # Optional. Weather data start UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ.
  endDateTime: string (ISO 8601 Format), # Optional. Weather data end UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ.
  id: string, # Optional. Unique job id.
  status: string, # Optional. Status of the job.
Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
  durationInSeconds: number, # Optional. Duration of the job in seconds.
  message: string, # Optional. Status message to capture more details of the job.
  createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
  name: string, # Optional. Name to identify resource.
  description: string, # Optional. Textual description of the resource.
  properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
Each pair must not have a key greater than 50 characters
and must not have a value greater than 150 characters.
Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
}
</code>

</remarks>
    </member>
  </members>
</doc>