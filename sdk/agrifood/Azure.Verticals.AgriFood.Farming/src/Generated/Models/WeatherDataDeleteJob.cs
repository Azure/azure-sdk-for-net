// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.Verticals.AgriFood.Farming.Models
{
    /// <summary> Schema of weather data delete job. </summary>
    public partial class WeatherDataDeleteJob
    {
        /// <summary> Initializes a new instance of WeatherDataDeleteJob. </summary>
        /// <param name="extensionId"> ID of the extension to be used for the providerInput. eg. DTN.ClearAg. </param>
        /// <param name="farmerId"> The id of the farmer object for which weather data is being fetched. </param>
        /// <param name="boundaryId"> The id of the boundary object for which weather data is being fetched. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="extensionId"/>, <paramref name="farmerId"/>, or <paramref name="boundaryId"/> is null. </exception>
        public WeatherDataDeleteJob(string extensionId, string farmerId, string boundaryId)
        {
            if (extensionId == null)
            {
                throw new ArgumentNullException(nameof(extensionId));
            }
            if (farmerId == null)
            {
                throw new ArgumentNullException(nameof(farmerId));
            }
            if (boundaryId == null)
            {
                throw new ArgumentNullException(nameof(boundaryId));
            }

            ExtensionId = extensionId;
            FarmerId = farmerId;
            BoundaryId = boundaryId;
            Properties = new ChangeTrackingDictionary<string, object>();
        }

        /// <summary> Initializes a new instance of WeatherDataDeleteJob. </summary>
        /// <param name="extensionId"> ID of the extension to be used for the providerInput. eg. DTN.ClearAg. </param>
        /// <param name="farmerId"> The id of the farmer object for which weather data is being fetched. </param>
        /// <param name="boundaryId"> The id of the boundary object for which weather data is being fetched. </param>
        /// <param name="weatherDataType"> Type of weather data. Possible values include: &apos;forecast&apos; , &apos;historical&apos;. </param>
        /// <param name="granularity"> Granularity of weather data. Possible values include: &apos;daily&apos; , &apos;hourly&apos;. </param>
        /// <param name="startDateTime"> Weather data start UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="endDateTime"> Weather data end UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="id"> Unique job id. </param>
        /// <param name="status">
        /// Status of the job.
        /// Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
        /// </param>
        /// <param name="durationInSeconds"> Duration of the job in seconds. </param>
        /// <param name="message"> Status message to capture more details of the job. </param>
        /// <param name="createdDateTime"> Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="lastActionDateTime"> Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="startTime"> Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="endTime"> Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="name"> Name to identify resource. </param>
        /// <param name="description"> Textual description of the resource. </param>
        /// <param name="properties">
        /// A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
        /// </param>
        internal WeatherDataDeleteJob(string extensionId, string farmerId, string boundaryId, string weatherDataType, string granularity, DateTimeOffset? startDateTime, DateTimeOffset? endDateTime, string id, string status, double? durationInSeconds, string message, DateTimeOffset? createdDateTime, DateTimeOffset? lastActionDateTime, DateTimeOffset? startTime, DateTimeOffset? endTime, string name, string description, IDictionary<string, object> properties)
        {
            ExtensionId = extensionId;
            FarmerId = farmerId;
            BoundaryId = boundaryId;
            WeatherDataType = weatherDataType;
            Granularity = granularity;
            StartDateTime = startDateTime;
            EndDateTime = endDateTime;
            Id = id;
            Status = status;
            DurationInSeconds = durationInSeconds;
            Message = message;
            CreatedDateTime = createdDateTime;
            LastActionDateTime = lastActionDateTime;
            StartTime = startTime;
            EndTime = endTime;
            Name = name;
            Description = description;
            Properties = properties;
        }

        /// <summary> ID of the extension to be used for the providerInput. eg. DTN.ClearAg. </summary>
        public string ExtensionId { get; set; }
        /// <summary> The id of the farmer object for which weather data is being fetched. </summary>
        public string FarmerId { get; set; }
        /// <summary> The id of the boundary object for which weather data is being fetched. </summary>
        public string BoundaryId { get; set; }
        /// <summary> Type of weather data. Possible values include: &apos;forecast&apos; , &apos;historical&apos;. </summary>
        public string WeatherDataType { get; set; }
        /// <summary> Granularity of weather data. Possible values include: &apos;daily&apos; , &apos;hourly&apos;. </summary>
        public string Granularity { get; set; }
        /// <summary> Weather data start UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ. </summary>
        public DateTimeOffset? StartDateTime { get; set; }
        /// <summary> Weather data end UTC date-time (inclusive), sample format: yyyy-MM-ddTHH:mm:ssZ. </summary>
        public DateTimeOffset? EndDateTime { get; set; }
        /// <summary> Unique job id. </summary>
        public string Id { get; }
        /// <summary>
        /// Status of the job.
        /// Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
        /// </summary>
        public string Status { get; }
        /// <summary> Duration of the job in seconds. </summary>
        public double? DurationInSeconds { get; }
        /// <summary> Status message to capture more details of the job. </summary>
        public string Message { get; }
        /// <summary> Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ. </summary>
        public DateTimeOffset? CreatedDateTime { get; }
        /// <summary> Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ. </summary>
        public DateTimeOffset? LastActionDateTime { get; }
        /// <summary> Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ. </summary>
        public DateTimeOffset? StartTime { get; }
        /// <summary> Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ. </summary>
        public DateTimeOffset? EndTime { get; }
        /// <summary> Name to identify resource. </summary>
        public string Name { get; set; }
        /// <summary> Textual description of the resource. </summary>
        public string Description { get; set; }
        /// <summary>
        /// A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
        /// </summary>
        public IDictionary<string, object> Properties { get; }
    }
}
