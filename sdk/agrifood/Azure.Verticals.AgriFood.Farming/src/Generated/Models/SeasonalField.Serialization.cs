// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Verticals.AgriFood.Farming.Models
{
    public partial class SeasonalField : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(FarmId))
            {
                writer.WritePropertyName("farmId");
                writer.WriteStringValue(FarmId);
            }
            if (Optional.IsDefined(FieldId))
            {
                writer.WritePropertyName("fieldId");
                writer.WriteStringValue(FieldId);
            }
            if (Optional.IsDefined(SeasonId))
            {
                writer.WritePropertyName("seasonId");
                writer.WriteStringValue(SeasonId);
            }
            if (Optional.IsCollectionDefined(CropVarietyIds))
            {
                writer.WritePropertyName("cropVarietyIds");
                writer.WriteStartArray();
                foreach (var item in CropVarietyIds)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(CropId))
            {
                writer.WritePropertyName("cropId");
                writer.WriteStringValue(CropId);
            }
            if (Optional.IsDefined(AvgYieldValue))
            {
                writer.WritePropertyName("avgYieldValue");
                writer.WriteNumberValue(AvgYieldValue.Value);
            }
            if (Optional.IsDefined(AvgYieldUnit))
            {
                writer.WritePropertyName("avgYieldUnit");
                writer.WriteStringValue(AvgYieldUnit);
            }
            if (Optional.IsDefined(AvgSeedPopulationValue))
            {
                writer.WritePropertyName("avgSeedPopulationValue");
                writer.WriteNumberValue(AvgSeedPopulationValue.Value);
            }
            if (Optional.IsDefined(AvgSeedPopulationUnit))
            {
                writer.WritePropertyName("avgSeedPopulationUnit");
                writer.WriteStringValue(AvgSeedPopulationUnit);
            }
            if (Optional.IsDefined(PlantingDateTime))
            {
                writer.WritePropertyName("plantingDateTime");
                writer.WriteStringValue(PlantingDateTime.Value, "O");
            }
            if (Optional.IsDefined(Status))
            {
                writer.WritePropertyName("status");
                writer.WriteStringValue(Status);
            }
            if (Optional.IsDefined(Name))
            {
                writer.WritePropertyName("name");
                writer.WriteStringValue(Name);
            }
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description");
                writer.WriteStringValue(Description);
            }
            if (Optional.IsCollectionDefined(Properties))
            {
                writer.WritePropertyName("properties");
                writer.WriteStartObject();
                foreach (var item in Properties)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteObjectValue(item.Value);
                }
                writer.WriteEndObject();
            }
            writer.WriteEndObject();
        }

        internal static SeasonalField DeserializeSeasonalField(JsonElement element)
        {
            Optional<string> farmerId = default;
            Optional<string> primaryBoundaryId = default;
            Optional<IReadOnlyList<string>> boundaryIds = default;
            Optional<string> farmId = default;
            Optional<string> fieldId = default;
            Optional<string> seasonId = default;
            Optional<IList<string>> cropVarietyIds = default;
            Optional<string> cropId = default;
            Optional<double> avgYieldValue = default;
            Optional<string> avgYieldUnit = default;
            Optional<double> avgSeedPopulationValue = default;
            Optional<string> avgSeedPopulationUnit = default;
            Optional<DateTimeOffset> plantingDateTime = default;
            Optional<string> id = default;
            Optional<string> eTag = default;
            Optional<string> status = default;
            Optional<DateTimeOffset> createdDateTime = default;
            Optional<DateTimeOffset> modifiedDateTime = default;
            Optional<string> name = default;
            Optional<string> description = default;
            Optional<IDictionary<string, object>> properties = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("farmerId"))
                {
                    farmerId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("primaryBoundaryId"))
                {
                    primaryBoundaryId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("boundaryIds"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    boundaryIds = array;
                    continue;
                }
                if (property.NameEquals("farmId"))
                {
                    farmId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("fieldId"))
                {
                    fieldId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("seasonId"))
                {
                    seasonId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("cropVarietyIds"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<string> array = new List<string>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetString());
                    }
                    cropVarietyIds = array;
                    continue;
                }
                if (property.NameEquals("cropId"))
                {
                    cropId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("avgYieldValue"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    avgYieldValue = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("avgYieldUnit"))
                {
                    avgYieldUnit = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("avgSeedPopulationValue"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    avgSeedPopulationValue = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("avgSeedPopulationUnit"))
                {
                    avgSeedPopulationUnit = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("plantingDateTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    plantingDateTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("eTag"))
                {
                    eTag = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("status"))
                {
                    status = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("createdDateTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    createdDateTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("modifiedDateTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    modifiedDateTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("description"))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, object> dictionary = new Dictionary<string, object>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetObject());
                    }
                    properties = dictionary;
                    continue;
                }
            }
            return new SeasonalField(farmerId.Value, primaryBoundaryId.Value, Optional.ToList(boundaryIds), farmId.Value, fieldId.Value, seasonId.Value, Optional.ToList(cropVarietyIds), cropId.Value, Optional.ToNullable(avgYieldValue), avgYieldUnit.Value, Optional.ToNullable(avgSeedPopulationValue), avgSeedPopulationUnit.Value, Optional.ToNullable(plantingDateTime), id.Value, eTag.Value, status.Value, Optional.ToNullable(createdDateTime), Optional.ToNullable(modifiedDateTime), name.Value, description.Value, Optional.ToDictionary(properties));
        }
    }
}
