// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.Verticals.AgriFood.Farming.Models
{
    /// <summary> Schema of scene resource. </summary>
    public partial class Scene
    {
        /// <summary> Initializes a new instance of Scene. </summary>
        internal Scene()
        {
            ImageFiles = new ChangeTrackingList<ImageFile>();
        }

        /// <summary> Initializes a new instance of Scene. </summary>
        /// <param name="sceneDateTime"> Date-time of the scene, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="provider"> Data provider of the scene. </param>
        /// <param name="source"> Data source of the scene. </param>
        /// <param name="imageFiles"> Collection of image files. </param>
        /// <param name="imageFormat"> Supported image formats for scene resource. </param>
        /// <param name="cloudCoverPercentage"> Cloud cover percentage of the scene. </param>
        /// <param name="darkPixelPercentage"> Dark pixel percentage of the scene. </param>
        /// <param name="ndviMedianValue"> Median of NDVI of the scene. </param>
        /// <param name="boundaryId"> Boundary ID which belongs to the scene. </param>
        /// <param name="farmerId"> Farmer ID which belongs to the scene. </param>
        /// <param name="id"> Unique scene resource ID. </param>
        /// <param name="eTag"> The ETag value to implement optimistic concurrency. </param>
        internal Scene(DateTimeOffset? sceneDateTime, string provider, string source, IReadOnlyList<ImageFile> imageFiles, ImageFormat? imageFormat, double? cloudCoverPercentage, double? darkPixelPercentage, double? ndviMedianValue, string boundaryId, string farmerId, string id, string eTag)
        {
            SceneDateTime = sceneDateTime;
            Provider = provider;
            Source = source;
            ImageFiles = imageFiles;
            ImageFormat = imageFormat;
            CloudCoverPercentage = cloudCoverPercentage;
            DarkPixelPercentage = darkPixelPercentage;
            NdviMedianValue = ndviMedianValue;
            BoundaryId = boundaryId;
            FarmerId = farmerId;
            Id = id;
            ETag = eTag;
        }

        /// <summary> Date-time of the scene, sample format: yyyy-MM-ddTHH:mm:ssZ. </summary>
        public DateTimeOffset? SceneDateTime { get; }
        /// <summary> Data provider of the scene. </summary>
        public string Provider { get; }
        /// <summary> Data source of the scene. </summary>
        public string Source { get; }
        /// <summary> Collection of image files. </summary>
        public IReadOnlyList<ImageFile> ImageFiles { get; }
        /// <summary> Supported image formats for scene resource. </summary>
        public ImageFormat? ImageFormat { get; }
        /// <summary> Cloud cover percentage of the scene. </summary>
        public double? CloudCoverPercentage { get; }
        /// <summary> Dark pixel percentage of the scene. </summary>
        public double? DarkPixelPercentage { get; }
        /// <summary> Median of NDVI of the scene. </summary>
        public double? NdviMedianValue { get; }
        /// <summary> Boundary ID which belongs to the scene. </summary>
        public string BoundaryId { get; }
        /// <summary> Farmer ID which belongs to the scene. </summary>
        public string FarmerId { get; }
        /// <summary> Unique scene resource ID. </summary>
        public string Id { get; }
        /// <summary> The ETag value to implement optimistic concurrency. </summary>
        public string ETag { get; }
    }
}
