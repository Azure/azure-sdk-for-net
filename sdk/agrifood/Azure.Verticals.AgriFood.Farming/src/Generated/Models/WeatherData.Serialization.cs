// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Verticals.AgriFood.Farming.Models
{
    public partial class WeatherData
    {
        internal static WeatherData DeserializeWeatherData(JsonElement element)
        {
            string farmerId = default;
            string boundaryId = default;
            string extensionId = default;
            Location location = default;
            DateTimeOffset dateTime = default;
            Optional<string> unitSystemCode = default;
            string extensionVersion = default;
            string weatherDataType = default;
            string granularity = default;
            Optional<Measure> cloudCover = default;
            Optional<Measure> dewPoint = default;
            Optional<Measure> growingDegreeDay = default;
            Optional<Measure> precipitation = default;
            Optional<Measure> pressure = default;
            Optional<Measure> relativeHumidity = default;
            Optional<Measure> soilMoisture = default;
            Optional<Measure> soilTemperature = default;
            Optional<Measure> temperature = default;
            Optional<Measure> visibility = default;
            Optional<Measure> wetBulbTemperature = default;
            Optional<Measure> windChill = default;
            Optional<Measure> windDirection = default;
            Optional<Measure> windGust = default;
            Optional<Measure> windSpeed = default;
            Optional<string> id = default;
            Optional<string> eTag = default;
            Optional<DateTimeOffset> createdDateTime = default;
            Optional<DateTimeOffset> modifiedDateTime = default;
            Optional<IReadOnlyDictionary<string, object>> properties = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("farmerId"))
                {
                    farmerId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("boundaryId"))
                {
                    boundaryId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("extensionId"))
                {
                    extensionId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("location"))
                {
                    location = Location.DeserializeLocation(property.Value);
                    continue;
                }
                if (property.NameEquals("dateTime"))
                {
                    dateTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("unitSystemCode"))
                {
                    unitSystemCode = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("extensionVersion"))
                {
                    extensionVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("weatherDataType"))
                {
                    weatherDataType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("granularity"))
                {
                    granularity = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("cloudCover"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    cloudCover = Measure.DeserializeMeasure(property.Value);
                    continue;
                }
                if (property.NameEquals("dewPoint"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    dewPoint = Measure.DeserializeMeasure(property.Value);
                    continue;
                }
                if (property.NameEquals("growingDegreeDay"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    growingDegreeDay = Measure.DeserializeMeasure(property.Value);
                    continue;
                }
                if (property.NameEquals("precipitation"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    precipitation = Measure.DeserializeMeasure(property.Value);
                    continue;
                }
                if (property.NameEquals("pressure"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    pressure = Measure.DeserializeMeasure(property.Value);
                    continue;
                }
                if (property.NameEquals("relativeHumidity"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    relativeHumidity = Measure.DeserializeMeasure(property.Value);
                    continue;
                }
                if (property.NameEquals("soilMoisture"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    soilMoisture = Measure.DeserializeMeasure(property.Value);
                    continue;
                }
                if (property.NameEquals("soilTemperature"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    soilTemperature = Measure.DeserializeMeasure(property.Value);
                    continue;
                }
                if (property.NameEquals("temperature"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    temperature = Measure.DeserializeMeasure(property.Value);
                    continue;
                }
                if (property.NameEquals("visibility"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    visibility = Measure.DeserializeMeasure(property.Value);
                    continue;
                }
                if (property.NameEquals("wetBulbTemperature"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    wetBulbTemperature = Measure.DeserializeMeasure(property.Value);
                    continue;
                }
                if (property.NameEquals("windChill"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    windChill = Measure.DeserializeMeasure(property.Value);
                    continue;
                }
                if (property.NameEquals("windDirection"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    windDirection = Measure.DeserializeMeasure(property.Value);
                    continue;
                }
                if (property.NameEquals("windGust"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    windGust = Measure.DeserializeMeasure(property.Value);
                    continue;
                }
                if (property.NameEquals("windSpeed"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    windSpeed = Measure.DeserializeMeasure(property.Value);
                    continue;
                }
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("eTag"))
                {
                    eTag = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("createdDateTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    createdDateTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("modifiedDateTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    modifiedDateTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, object> dictionary = new Dictionary<string, object>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetObject());
                    }
                    properties = dictionary;
                    continue;
                }
            }
            return new WeatherData(farmerId, boundaryId, extensionId, location, dateTime, unitSystemCode.Value, extensionVersion, weatherDataType, granularity, cloudCover.Value, dewPoint.Value, growingDegreeDay.Value, precipitation.Value, pressure.Value, relativeHumidity.Value, soilMoisture.Value, soilTemperature.Value, temperature.Value, visibility.Value, wetBulbTemperature.Value, windChill.Value, windDirection.Value, windGust.Value, windSpeed.Value, id.Value, eTag.Value, Optional.ToNullable(createdDateTime), Optional.ToNullable(modifiedDateTime), Optional.ToDictionary(properties));
        }
    }
}
