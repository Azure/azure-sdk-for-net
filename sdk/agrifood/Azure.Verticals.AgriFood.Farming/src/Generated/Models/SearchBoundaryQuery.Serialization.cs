// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.Verticals.AgriFood.Farming.Models
{
    public partial class SearchBoundaryQuery : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsCollectionDefined(Ids))
            {
                writer.WritePropertyName("ids");
                writer.WriteStartArray();
                foreach (var item in Ids)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Names))
            {
                writer.WritePropertyName("names");
                writer.WriteStartArray();
                foreach (var item in Names)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(PropertyFilters))
            {
                writer.WritePropertyName("propertyFilters");
                writer.WriteStartArray();
                foreach (var item in PropertyFilters)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(Statuses))
            {
                writer.WritePropertyName("statuses");
                writer.WriteStartArray();
                foreach (var item in Statuses)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(MinCreatedDateTime))
            {
                writer.WritePropertyName("minCreatedDateTime");
                writer.WriteStringValue(MinCreatedDateTime.Value, "O");
            }
            if (Optional.IsDefined(MaxCreatedDateTime))
            {
                writer.WritePropertyName("maxCreatedDateTime");
                writer.WriteStringValue(MaxCreatedDateTime.Value, "O");
            }
            if (Optional.IsDefined(MinLastModifiedDateTime))
            {
                writer.WritePropertyName("minLastModifiedDateTime");
                writer.WriteStringValue(MinLastModifiedDateTime.Value, "O");
            }
            if (Optional.IsDefined(MaxLastModifiedDateTime))
            {
                writer.WritePropertyName("maxLastModifiedDateTime");
                writer.WriteStringValue(MaxLastModifiedDateTime.Value, "O");
            }
            if (Optional.IsDefined(MaxPageSize))
            {
                writer.WritePropertyName("$maxPageSize");
                writer.WriteNumberValue(MaxPageSize.Value);
            }
            if (Optional.IsDefined(SkipToken))
            {
                writer.WritePropertyName("$skipToken");
                writer.WriteStringValue(SkipToken);
            }
            if (Optional.IsDefined(IsPrimary))
            {
                writer.WritePropertyName("isPrimary");
                writer.WriteBooleanValue(IsPrimary.Value);
            }
            if (Optional.IsDefined(ParentType))
            {
                writer.WritePropertyName("parentType");
                writer.WriteStringValue(ParentType);
            }
            if (Optional.IsCollectionDefined(ParentIds))
            {
                writer.WritePropertyName("parentIds");
                writer.WriteStartArray();
                foreach (var item in ParentIds)
                {
                    writer.WriteStringValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(MinAcreage))
            {
                writer.WritePropertyName("minAcreage");
                writer.WriteNumberValue(MinAcreage.Value);
            }
            if (Optional.IsDefined(MaxAcreage))
            {
                writer.WritePropertyName("maxAcreage");
                writer.WriteNumberValue(MaxAcreage.Value);
            }
            if (Optional.IsDefined(IntersectsWithGeometry))
            {
                writer.WritePropertyName("intersectsWithGeometry");
                writer.WriteObjectValue(IntersectsWithGeometry);
            }
            writer.WriteEndObject();
        }
    }
}
