// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.Verticals.AgriFood.Farming.Models
{
    /// <summary> Schema of weather data. </summary>
    public partial class WeatherData
    {
        /// <summary> Initializes a new instance of WeatherData. </summary>
        /// <param name="farmerId"> Farmer ID. </param>
        /// <param name="boundaryId"> Boundary ID. </param>
        /// <param name="extensionId"> ID of the weather extension. </param>
        /// <param name="location"> Location model class. </param>
        /// <param name="dateTime"> Date-time of the weather data, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="extensionVersion"> Version of the weather data extension. </param>
        /// <param name="weatherDataType"> Type of weather data (forecast/historical). </param>
        /// <param name="granularity"> Granularity of weather data (daily/hourly). </param>
        /// <exception cref="ArgumentNullException"> <paramref name="farmerId"/>, <paramref name="boundaryId"/>, <paramref name="extensionId"/>, <paramref name="location"/>, <paramref name="extensionVersion"/>, <paramref name="weatherDataType"/>, or <paramref name="granularity"/> is null. </exception>
        internal WeatherData(string farmerId, string boundaryId, string extensionId, Location location, DateTimeOffset dateTime, string extensionVersion, string weatherDataType, string granularity)
        {
            if (farmerId == null)
            {
                throw new ArgumentNullException(nameof(farmerId));
            }
            if (boundaryId == null)
            {
                throw new ArgumentNullException(nameof(boundaryId));
            }
            if (extensionId == null)
            {
                throw new ArgumentNullException(nameof(extensionId));
            }
            if (location == null)
            {
                throw new ArgumentNullException(nameof(location));
            }
            if (extensionVersion == null)
            {
                throw new ArgumentNullException(nameof(extensionVersion));
            }
            if (weatherDataType == null)
            {
                throw new ArgumentNullException(nameof(weatherDataType));
            }
            if (granularity == null)
            {
                throw new ArgumentNullException(nameof(granularity));
            }

            FarmerId = farmerId;
            BoundaryId = boundaryId;
            ExtensionId = extensionId;
            Location = location;
            DateTime = dateTime;
            ExtensionVersion = extensionVersion;
            WeatherDataType = weatherDataType;
            Granularity = granularity;
            Properties = new ChangeTrackingDictionary<string, object>();
        }

        /// <summary> Initializes a new instance of WeatherData. </summary>
        /// <param name="farmerId"> Farmer ID. </param>
        /// <param name="boundaryId"> Boundary ID. </param>
        /// <param name="extensionId"> ID of the weather extension. </param>
        /// <param name="location"> Location model class. </param>
        /// <param name="dateTime"> Date-time of the weather data, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="unitSystemCode"> Unit System like US/SI etc. </param>
        /// <param name="extensionVersion"> Version of the weather data extension. </param>
        /// <param name="weatherDataType"> Type of weather data (forecast/historical). </param>
        /// <param name="granularity"> Granularity of weather data (daily/hourly). </param>
        /// <param name="cloudCover"> Schema for storing measurement reading and unit. </param>
        /// <param name="dewPoint"> Schema for storing measurement reading and unit. </param>
        /// <param name="growingDegreeDay"> Schema for storing measurement reading and unit. </param>
        /// <param name="precipitation"> Schema for storing measurement reading and unit. </param>
        /// <param name="pressure"> Schema for storing measurement reading and unit. </param>
        /// <param name="relativeHumidity"> Schema for storing measurement reading and unit. </param>
        /// <param name="soilMoisture"> Schema for storing measurement reading and unit. </param>
        /// <param name="soilTemperature"> Schema for storing measurement reading and unit. </param>
        /// <param name="temperature"> Schema for storing measurement reading and unit. </param>
        /// <param name="visibility"> Schema for storing measurement reading and unit. </param>
        /// <param name="wetBulbTemperature"> Schema for storing measurement reading and unit. </param>
        /// <param name="windChill"> Schema for storing measurement reading and unit. </param>
        /// <param name="windDirection"> Schema for storing measurement reading and unit. </param>
        /// <param name="windGust"> Schema for storing measurement reading and unit. </param>
        /// <param name="windSpeed"> Schema for storing measurement reading and unit. </param>
        /// <param name="id"> Weather data ID. </param>
        /// <param name="eTag"> The ETag value to implement optimistic concurrency. </param>
        /// <param name="createdDateTime"> Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="modifiedDateTime"> Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="properties">
        /// A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
        /// </param>
        internal WeatherData(string farmerId, string boundaryId, string extensionId, Location location, DateTimeOffset dateTime, string unitSystemCode, string extensionVersion, string weatherDataType, string granularity, Measure cloudCover, Measure dewPoint, Measure growingDegreeDay, Measure precipitation, Measure pressure, Measure relativeHumidity, Measure soilMoisture, Measure soilTemperature, Measure temperature, Measure visibility, Measure wetBulbTemperature, Measure windChill, Measure windDirection, Measure windGust, Measure windSpeed, string id, string eTag, DateTimeOffset? createdDateTime, DateTimeOffset? modifiedDateTime, IReadOnlyDictionary<string, object> properties)
        {
            FarmerId = farmerId;
            BoundaryId = boundaryId;
            ExtensionId = extensionId;
            Location = location;
            DateTime = dateTime;
            UnitSystemCode = unitSystemCode;
            ExtensionVersion = extensionVersion;
            WeatherDataType = weatherDataType;
            Granularity = granularity;
            CloudCover = cloudCover;
            DewPoint = dewPoint;
            GrowingDegreeDay = growingDegreeDay;
            Precipitation = precipitation;
            Pressure = pressure;
            RelativeHumidity = relativeHumidity;
            SoilMoisture = soilMoisture;
            SoilTemperature = soilTemperature;
            Temperature = temperature;
            Visibility = visibility;
            WetBulbTemperature = wetBulbTemperature;
            WindChill = windChill;
            WindDirection = windDirection;
            WindGust = windGust;
            WindSpeed = windSpeed;
            Id = id;
            ETag = eTag;
            CreatedDateTime = createdDateTime;
            ModifiedDateTime = modifiedDateTime;
            Properties = properties;
        }

        /// <summary> Farmer ID. </summary>
        public string FarmerId { get; }
        /// <summary> Boundary ID. </summary>
        public string BoundaryId { get; }
        /// <summary> ID of the weather extension. </summary>
        public string ExtensionId { get; }
        /// <summary> Location model class. </summary>
        public Location Location { get; }
        /// <summary> Date-time of the weather data, sample format: yyyy-MM-ddTHH:mm:ssZ. </summary>
        public DateTimeOffset DateTime { get; }
        /// <summary> Unit System like US/SI etc. </summary>
        public string UnitSystemCode { get; }
        /// <summary> Version of the weather data extension. </summary>
        public string ExtensionVersion { get; }
        /// <summary> Type of weather data (forecast/historical). </summary>
        public string WeatherDataType { get; }
        /// <summary> Granularity of weather data (daily/hourly). </summary>
        public string Granularity { get; }
        /// <summary> Schema for storing measurement reading and unit. </summary>
        public Measure CloudCover { get; }
        /// <summary> Schema for storing measurement reading and unit. </summary>
        public Measure DewPoint { get; }
        /// <summary> Schema for storing measurement reading and unit. </summary>
        public Measure GrowingDegreeDay { get; }
        /// <summary> Schema for storing measurement reading and unit. </summary>
        public Measure Precipitation { get; }
        /// <summary> Schema for storing measurement reading and unit. </summary>
        public Measure Pressure { get; }
        /// <summary> Schema for storing measurement reading and unit. </summary>
        public Measure RelativeHumidity { get; }
        /// <summary> Schema for storing measurement reading and unit. </summary>
        public Measure SoilMoisture { get; }
        /// <summary> Schema for storing measurement reading and unit. </summary>
        public Measure SoilTemperature { get; }
        /// <summary> Schema for storing measurement reading and unit. </summary>
        public Measure Temperature { get; }
        /// <summary> Schema for storing measurement reading and unit. </summary>
        public Measure Visibility { get; }
        /// <summary> Schema for storing measurement reading and unit. </summary>
        public Measure WetBulbTemperature { get; }
        /// <summary> Schema for storing measurement reading and unit. </summary>
        public Measure WindChill { get; }
        /// <summary> Schema for storing measurement reading and unit. </summary>
        public Measure WindDirection { get; }
        /// <summary> Schema for storing measurement reading and unit. </summary>
        public Measure WindGust { get; }
        /// <summary> Schema for storing measurement reading and unit. </summary>
        public Measure WindSpeed { get; }
        /// <summary> Weather data ID. </summary>
        public string Id { get; }
        /// <summary> The ETag value to implement optimistic concurrency. </summary>
        public string ETag { get; }
        /// <summary> Date-time when resource was created, sample format: yyyy-MM-ddTHH:mm:ssZ. </summary>
        public DateTimeOffset? CreatedDateTime { get; }
        /// <summary> Date-time when resource was last modified, sample format: yyyy-MM-ddTHH:mm:ssZ. </summary>
        public DateTimeOffset? ModifiedDateTime { get; }
        /// <summary>
        /// A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
        /// </summary>
        public IReadOnlyDictionary<string, object> Properties { get; }
    }
}
