// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;

namespace Azure.Verticals.AgriFood.Farming.Models
{
    /// <summary> ImageProcessingRasterizeJob. </summary>
    public partial class ImageProcessingRasterizeJob
    {
        /// <summary> Initializes a new instance of ImageProcessingRasterizeJob. </summary>
        /// <param name="farmerId"> Farmer ID. </param>
        /// <param name="shapefileAttachmentId"> Shapefile attachment ID. </param>
        /// <param name="shapefileColumnNames"> List of shapefile column names to create raster attachments. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="farmerId"/>, <paramref name="shapefileAttachmentId"/>, or <paramref name="shapefileColumnNames"/> is null. </exception>
        public ImageProcessingRasterizeJob(string farmerId, string shapefileAttachmentId, IEnumerable<string> shapefileColumnNames)
        {
            if (farmerId == null)
            {
                throw new ArgumentNullException(nameof(farmerId));
            }
            if (shapefileAttachmentId == null)
            {
                throw new ArgumentNullException(nameof(shapefileAttachmentId));
            }
            if (shapefileColumnNames == null)
            {
                throw new ArgumentNullException(nameof(shapefileColumnNames));
            }

            FarmerId = farmerId;
            ShapefileAttachmentId = shapefileAttachmentId;
            ShapefileColumnNames = shapefileColumnNames.ToList();
            Properties = new ChangeTrackingDictionary<string, object>();
        }

        /// <summary> Initializes a new instance of ImageProcessingRasterizeJob. </summary>
        /// <param name="farmerId"> Farmer ID. </param>
        /// <param name="shapefileAttachmentId"> Shapefile attachment ID. </param>
        /// <param name="shapefileColumnNames"> List of shapefile column names to create raster attachments. </param>
        /// <param name="id"> Unique job id. </param>
        /// <param name="status">
        /// Status of the job.
        /// Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
        /// </param>
        /// <param name="durationInSeconds"> Duration of the job in seconds. </param>
        /// <param name="message"> Status message to capture more details of the job. </param>
        /// <param name="createdDateTime"> Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="lastActionDateTime"> Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="startTime"> Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="endTime"> Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ. </param>
        /// <param name="name"> Name to identify resource. </param>
        /// <param name="description"> Textual description of the resource. </param>
        /// <param name="properties">
        /// A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
        /// </param>
        internal ImageProcessingRasterizeJob(string farmerId, string shapefileAttachmentId, IList<string> shapefileColumnNames, string id, string status, double? durationInSeconds, string message, DateTimeOffset? createdDateTime, DateTimeOffset? lastActionDateTime, DateTimeOffset? startTime, DateTimeOffset? endTime, string name, string description, IDictionary<string, object> properties)
        {
            FarmerId = farmerId;
            ShapefileAttachmentId = shapefileAttachmentId;
            ShapefileColumnNames = shapefileColumnNames;
            Id = id;
            Status = status;
            DurationInSeconds = durationInSeconds;
            Message = message;
            CreatedDateTime = createdDateTime;
            LastActionDateTime = lastActionDateTime;
            StartTime = startTime;
            EndTime = endTime;
            Name = name;
            Description = description;
            Properties = properties;
        }

        /// <summary> Farmer ID. </summary>
        public string FarmerId { get; set; }
        /// <summary> Shapefile attachment ID. </summary>
        public string ShapefileAttachmentId { get; set; }
        /// <summary> List of shapefile column names to create raster attachments. </summary>
        public IList<string> ShapefileColumnNames { get; }
        /// <summary> Unique job id. </summary>
        public string Id { get; }
        /// <summary>
        /// Status of the job.
        /// Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
        /// </summary>
        public string Status { get; }
        /// <summary> Duration of the job in seconds. </summary>
        public double? DurationInSeconds { get; }
        /// <summary> Status message to capture more details of the job. </summary>
        public string Message { get; }
        /// <summary> Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ. </summary>
        public DateTimeOffset? CreatedDateTime { get; }
        /// <summary> Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ. </summary>
        public DateTimeOffset? LastActionDateTime { get; }
        /// <summary> Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ. </summary>
        public DateTimeOffset? StartTime { get; }
        /// <summary> Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ. </summary>
        public DateTimeOffset? EndTime { get; }
        /// <summary> Name to identify resource. </summary>
        public string Name { get; set; }
        /// <summary> Textual description of the resource. </summary>
        public string Description { get; set; }
        /// <summary>
        /// A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
        /// </summary>
        public IDictionary<string, object> Properties { get; }
    }
}
