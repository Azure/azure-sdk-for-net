// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Verticals.AgriFood.Farming.Models
{
    public partial class TillageData : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(TillageDepth))
            {
                writer.WritePropertyName("tillageDepth");
                writer.WriteObjectValue(TillageDepth);
            }
            if (Optional.IsDefined(TillagePressure))
            {
                writer.WritePropertyName("tillagePressure");
                writer.WriteObjectValue(TillagePressure);
            }
            if (Optional.IsDefined(Area))
            {
                writer.WritePropertyName("area");
                writer.WriteObjectValue(Area);
            }
            if (Optional.IsDefined(Source))
            {
                writer.WritePropertyName("source");
                writer.WriteStringValue(Source);
            }
            if (Optional.IsDefined(OperationModifiedDateTime))
            {
                writer.WritePropertyName("operationModifiedDateTime");
                writer.WriteStringValue(OperationModifiedDateTime.Value, "O");
            }
            if (Optional.IsDefined(OperationStartDateTime))
            {
                writer.WritePropertyName("operationStartDateTime");
                writer.WriteStringValue(OperationStartDateTime.Value, "O");
            }
            if (Optional.IsDefined(OperationEndDateTime))
            {
                writer.WritePropertyName("operationEndDateTime");
                writer.WriteStringValue(OperationEndDateTime.Value, "O");
            }
            if (Optional.IsDefined(AssociatedBoundaryId))
            {
                writer.WritePropertyName("associatedBoundaryId");
                writer.WriteStringValue(AssociatedBoundaryId);
            }
            if (Optional.IsDefined(OperationBoundaryId))
            {
                writer.WritePropertyName("operationBoundaryId");
                writer.WriteStringValue(OperationBoundaryId);
            }
            if (Optional.IsDefined(Status))
            {
                writer.WritePropertyName("status");
                writer.WriteStringValue(Status);
            }
            if (Optional.IsDefined(Name))
            {
                writer.WritePropertyName("name");
                writer.WriteStringValue(Name);
            }
            if (Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description");
                writer.WriteStringValue(Description);
            }
            if (Optional.IsCollectionDefined(Properties))
            {
                writer.WritePropertyName("properties");
                writer.WriteStartObject();
                foreach (var item in Properties)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteObjectValue(item.Value);
                }
                writer.WriteEndObject();
            }
            writer.WriteEndObject();
        }

        internal static TillageData DeserializeTillageData(JsonElement element)
        {
            Optional<Measure> tillageDepth = default;
            Optional<Measure> tillagePressure = default;
            Optional<Measure> area = default;
            Optional<string> source = default;
            Optional<DateTimeOffset> operationModifiedDateTime = default;
            Optional<DateTimeOffset> operationStartDateTime = default;
            Optional<DateTimeOffset> operationEndDateTime = default;
            Optional<string> attachmentsLink = default;
            Optional<string> associatedBoundaryId = default;
            Optional<string> operationBoundaryId = default;
            Optional<string> farmerId = default;
            Optional<string> id = default;
            Optional<string> eTag = default;
            Optional<string> status = default;
            Optional<DateTimeOffset> createdDateTime = default;
            Optional<DateTimeOffset> modifiedDateTime = default;
            Optional<string> name = default;
            Optional<string> description = default;
            Optional<IDictionary<string, object>> properties = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("tillageDepth"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    tillageDepth = Measure.DeserializeMeasure(property.Value);
                    continue;
                }
                if (property.NameEquals("tillagePressure"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    tillagePressure = Measure.DeserializeMeasure(property.Value);
                    continue;
                }
                if (property.NameEquals("area"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    area = Measure.DeserializeMeasure(property.Value);
                    continue;
                }
                if (property.NameEquals("source"))
                {
                    source = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("operationModifiedDateTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    operationModifiedDateTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("operationStartDateTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    operationStartDateTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("operationEndDateTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    operationEndDateTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("attachmentsLink"))
                {
                    attachmentsLink = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("associatedBoundaryId"))
                {
                    associatedBoundaryId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("operationBoundaryId"))
                {
                    operationBoundaryId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("farmerId"))
                {
                    farmerId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("id"))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("eTag"))
                {
                    eTag = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("status"))
                {
                    status = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("createdDateTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    createdDateTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("modifiedDateTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    modifiedDateTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("description"))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    Dictionary<string, object> dictionary = new Dictionary<string, object>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetObject());
                    }
                    properties = dictionary;
                    continue;
                }
            }
            return new TillageData(tillageDepth.Value, tillagePressure.Value, area.Value, source.Value, Optional.ToNullable(operationModifiedDateTime), Optional.ToNullable(operationStartDateTime), Optional.ToNullable(operationEndDateTime), attachmentsLink.Value, associatedBoundaryId.Value, operationBoundaryId.Value, farmerId.Value, id.Value, eTag.Value, status.Value, Optional.ToNullable(createdDateTime), Optional.ToNullable(modifiedDateTime), name.Value, description.Value, Optional.ToDictionary(properties));
        }
    }
}
