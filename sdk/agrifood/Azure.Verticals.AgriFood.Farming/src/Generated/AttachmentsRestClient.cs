// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.Verticals.AgriFood.Farming.Models;

namespace Azure.Verticals.AgriFood.Farming
{
    internal partial class AttachmentsRestClient
    {
        private Uri endpoint;
        private string apiVersion;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of AttachmentsRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> The endpoint of your FarmBeats resource (protocol and hostname, for example: https://{resourceName}.farmbeats.azure.net). </param>
        /// <param name="apiVersion"> Api Version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="apiVersion"/> is null. </exception>
        public AttachmentsRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint, string apiVersion = "2021-03-31-preview")
        {
            this.endpoint = endpoint ?? throw new ArgumentNullException(nameof(endpoint));
            this.apiVersion = apiVersion ?? throw new ArgumentNullException(nameof(apiVersion));
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        internal HttpMessage CreateListByFarmerIdRequest(string farmerId, IEnumerable<string> resourceIds, IEnumerable<string> resourceTypes, IEnumerable<string> ids, IEnumerable<string> names, IEnumerable<string> propertyFilters, IEnumerable<string> statuses, DateTimeOffset? minCreatedDateTime, DateTimeOffset? maxCreatedDateTime, DateTimeOffset? minLastModifiedDateTime, DateTimeOffset? maxLastModifiedDateTime, int? maxPageSize, string skipToken)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/farmers/", false);
            uri.AppendPath(farmerId, true);
            uri.AppendPath("/attachments", false);
            if (resourceIds != null)
            {
                foreach (var param in resourceIds)
                {
                    uri.AppendQuery("resourceIds", param, true);
                }
            }
            if (resourceTypes != null)
            {
                foreach (var param in resourceTypes)
                {
                    uri.AppendQuery("resourceTypes", param, true);
                }
            }
            if (ids != null)
            {
                foreach (var param in ids)
                {
                    uri.AppendQuery("ids", param, true);
                }
            }
            if (names != null)
            {
                foreach (var param in names)
                {
                    uri.AppendQuery("names", param, true);
                }
            }
            if (propertyFilters != null)
            {
                foreach (var param in propertyFilters)
                {
                    uri.AppendQuery("propertyFilters", param, true);
                }
            }
            if (statuses != null)
            {
                foreach (var param in statuses)
                {
                    uri.AppendQuery("statuses", param, true);
                }
            }
            if (minCreatedDateTime != null)
            {
                uri.AppendQuery("minCreatedDateTime", minCreatedDateTime.Value, "O", true);
            }
            if (maxCreatedDateTime != null)
            {
                uri.AppendQuery("maxCreatedDateTime", maxCreatedDateTime.Value, "O", true);
            }
            if (minLastModifiedDateTime != null)
            {
                uri.AppendQuery("minLastModifiedDateTime", minLastModifiedDateTime.Value, "O", true);
            }
            if (maxLastModifiedDateTime != null)
            {
                uri.AppendQuery("maxLastModifiedDateTime", maxLastModifiedDateTime.Value, "O", true);
            }
            if (maxPageSize != null)
            {
                uri.AppendQuery("$maxPageSize", maxPageSize.Value, true);
            }
            if (skipToken != null)
            {
                uri.AppendQuery("$skipToken", skipToken, true);
            }
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a paginated list of attachment resources under a particular farmer. </summary>
        /// <param name="farmerId"> ID of the associated farmer. </param>
        /// <param name="resourceIds"> Resource Ids of the resource. </param>
        /// <param name="resourceTypes"> Resource Types of the resource. </param>
        /// <param name="ids"> Ids of the resource. </param>
        /// <param name="names"> Names of the resource. </param>
        /// <param name="propertyFilters">
        /// Filters on key-value pairs within the Properties object.
        /// eg. &quot;{testKey} eq {testValue}&quot;.
        /// </param>
        /// <param name="statuses"> Statuses of the resource. </param>
        /// <param name="minCreatedDateTime"> Minimum creation date of resource (inclusive). </param>
        /// <param name="maxCreatedDateTime"> Maximum creation date of resource (inclusive). </param>
        /// <param name="minLastModifiedDateTime"> Minimum last modified date of resource (inclusive). </param>
        /// <param name="maxLastModifiedDateTime"> Maximum last modified date of resource (inclusive). </param>
        /// <param name="maxPageSize">
        /// Maximum number of items needed (inclusive).
        /// Minimum = 10, Maximum = 1000, Default value = 50.
        /// </param>
        /// <param name="skipToken"> Skip token for getting next set of results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="farmerId"/> is null. </exception>
        public async Task<Response<AttachmentListResponse>> ListByFarmerIdAsync(string farmerId, IEnumerable<string> resourceIds = null, IEnumerable<string> resourceTypes = null, IEnumerable<string> ids = null, IEnumerable<string> names = null, IEnumerable<string> propertyFilters = null, IEnumerable<string> statuses = null, DateTimeOffset? minCreatedDateTime = null, DateTimeOffset? maxCreatedDateTime = null, DateTimeOffset? minLastModifiedDateTime = null, DateTimeOffset? maxLastModifiedDateTime = null, int? maxPageSize = null, string skipToken = null, CancellationToken cancellationToken = default)
        {
            if (farmerId == null)
            {
                throw new ArgumentNullException(nameof(farmerId));
            }

            using var message = CreateListByFarmerIdRequest(farmerId, resourceIds, resourceTypes, ids, names, propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AttachmentListResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AttachmentListResponse.DeserializeAttachmentListResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Returns a paginated list of attachment resources under a particular farmer. </summary>
        /// <param name="farmerId"> ID of the associated farmer. </param>
        /// <param name="resourceIds"> Resource Ids of the resource. </param>
        /// <param name="resourceTypes"> Resource Types of the resource. </param>
        /// <param name="ids"> Ids of the resource. </param>
        /// <param name="names"> Names of the resource. </param>
        /// <param name="propertyFilters">
        /// Filters on key-value pairs within the Properties object.
        /// eg. &quot;{testKey} eq {testValue}&quot;.
        /// </param>
        /// <param name="statuses"> Statuses of the resource. </param>
        /// <param name="minCreatedDateTime"> Minimum creation date of resource (inclusive). </param>
        /// <param name="maxCreatedDateTime"> Maximum creation date of resource (inclusive). </param>
        /// <param name="minLastModifiedDateTime"> Minimum last modified date of resource (inclusive). </param>
        /// <param name="maxLastModifiedDateTime"> Maximum last modified date of resource (inclusive). </param>
        /// <param name="maxPageSize">
        /// Maximum number of items needed (inclusive).
        /// Minimum = 10, Maximum = 1000, Default value = 50.
        /// </param>
        /// <param name="skipToken"> Skip token for getting next set of results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="farmerId"/> is null. </exception>
        public Response<AttachmentListResponse> ListByFarmerId(string farmerId, IEnumerable<string> resourceIds = null, IEnumerable<string> resourceTypes = null, IEnumerable<string> ids = null, IEnumerable<string> names = null, IEnumerable<string> propertyFilters = null, IEnumerable<string> statuses = null, DateTimeOffset? minCreatedDateTime = null, DateTimeOffset? maxCreatedDateTime = null, DateTimeOffset? minLastModifiedDateTime = null, DateTimeOffset? maxLastModifiedDateTime = null, int? maxPageSize = null, string skipToken = null, CancellationToken cancellationToken = default)
        {
            if (farmerId == null)
            {
                throw new ArgumentNullException(nameof(farmerId));
            }

            using var message = CreateListByFarmerIdRequest(farmerId, resourceIds, resourceTypes, ids, names, propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AttachmentListResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AttachmentListResponse.DeserializeAttachmentListResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetRequest(string farmerId, string attachmentId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/farmers/", false);
            uri.AppendPath(farmerId, true);
            uri.AppendPath("/attachments/", false);
            uri.AppendPath(attachmentId, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Gets a specified attachment resource under a particular farmer. </summary>
        /// <param name="farmerId"> ID of the associated farmer. </param>
        /// <param name="attachmentId"> ID of the attachment. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="farmerId"/> or <paramref name="attachmentId"/> is null. </exception>
        public async Task<Response<Attachment>> GetAsync(string farmerId, string attachmentId, CancellationToken cancellationToken = default)
        {
            if (farmerId == null)
            {
                throw new ArgumentNullException(nameof(farmerId));
            }
            if (attachmentId == null)
            {
                throw new ArgumentNullException(nameof(attachmentId));
            }

            using var message = CreateGetRequest(farmerId, attachmentId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Attachment value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Attachment.DeserializeAttachment(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets a specified attachment resource under a particular farmer. </summary>
        /// <param name="farmerId"> ID of the associated farmer. </param>
        /// <param name="attachmentId"> ID of the attachment. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="farmerId"/> or <paramref name="attachmentId"/> is null. </exception>
        public Response<Attachment> Get(string farmerId, string attachmentId, CancellationToken cancellationToken = default)
        {
            if (farmerId == null)
            {
                throw new ArgumentNullException(nameof(farmerId));
            }
            if (attachmentId == null)
            {
                throw new ArgumentNullException(nameof(attachmentId));
            }

            using var message = CreateGetRequest(farmerId, attachmentId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Attachment value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Attachment.DeserializeAttachment(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateOrUpdateRequest(string farmerId, string attachmentId, Stream file, string farmerId1, string resourceId, string resourceType, string originalFileName, string id, string status, string createdDateTime, string modifiedDateTime, string name, string description, string eTag)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/farmers/", false);
            uri.AppendPath(farmerId, true);
            uri.AppendPath("/attachments/", false);
            uri.AppendPath(attachmentId, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "multipart/form-data");
            var content = new MultipartFormDataContent();
            if (file != null)
            {
                content.Add(RequestContent.Create(file), "file", null);
            }
            if (farmerId1 != null)
            {
                content.Add(new StringRequestContent(farmerId1), "farmerId1", null);
            }
            if (resourceId != null)
            {
                content.Add(new StringRequestContent(resourceId), "resourceId", null);
            }
            if (resourceType != null)
            {
                content.Add(new StringRequestContent(resourceType), "resourceType", null);
            }
            if (originalFileName != null)
            {
                content.Add(new StringRequestContent(originalFileName), "originalFileName", null);
            }
            if (id != null)
            {
                content.Add(new StringRequestContent(id), "id", null);
            }
            if (status != null)
            {
                content.Add(new StringRequestContent(status), "status", null);
            }
            if (createdDateTime != null)
            {
                content.Add(new StringRequestContent(createdDateTime), "createdDateTime", null);
            }
            if (modifiedDateTime != null)
            {
                content.Add(new StringRequestContent(modifiedDateTime), "modifiedDateTime", null);
            }
            if (name != null)
            {
                content.Add(new StringRequestContent(name), "name", null);
            }
            if (description != null)
            {
                content.Add(new StringRequestContent(description), "description", null);
            }
            if (eTag != null)
            {
                content.Add(new StringRequestContent(eTag), "eTag", null);
            }
            content.ApplyToRequest(request);
            return message;
        }

        /// <summary> Creates or updates an attachment resource under a particular farmer. </summary>
        /// <param name="farmerId"> ID of the associated farmer resource. </param>
        /// <param name="attachmentId"> ID of the attachment resource. </param>
        /// <param name="file"> File to be uploaded. </param>
        /// <param name="farmerId1"> Farmer id for this attachment. </param>
        /// <param name="resourceId"> Associated Resource id for this attachment. </param>
        /// <param name="resourceType">
        /// Associated Resource type for this attachment
        /// i.e. Farmer, Farm, Field, SeasonalField, Boundary, FarmOperationApplicationData, HarvestData, TillageData, PlantingData.
        /// </param>
        /// <param name="originalFileName"> Original File Name for this attachment. </param>
        /// <param name="id"> Unique id. </param>
        /// <param name="status"> Status of the resource. </param>
        /// <param name="createdDateTime"> Date when resource was created. </param>
        /// <param name="modifiedDateTime"> Date when resource was last modified. </param>
        /// <param name="name"> Name to identify resource. </param>
        /// <param name="description"> Textual description of resource. </param>
        /// <param name="eTag"> The ETag value to implement optimistic concurrency. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="farmerId"/> or <paramref name="attachmentId"/> is null. </exception>
        public async Task<Response<Attachment>> CreateOrUpdateAsync(string farmerId, string attachmentId, Stream file = null, string farmerId1 = null, string resourceId = null, string resourceType = null, string originalFileName = null, string id = null, string status = null, string createdDateTime = null, string modifiedDateTime = null, string name = null, string description = null, string eTag = null, CancellationToken cancellationToken = default)
        {
            if (farmerId == null)
            {
                throw new ArgumentNullException(nameof(farmerId));
            }
            if (attachmentId == null)
            {
                throw new ArgumentNullException(nameof(attachmentId));
            }

            using var message = CreateCreateOrUpdateRequest(farmerId, attachmentId, file, farmerId1, resourceId, resourceType, originalFileName, id, status, createdDateTime, modifiedDateTime, name, description, eTag);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    {
                        Attachment value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Attachment.DeserializeAttachment(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Creates or updates an attachment resource under a particular farmer. </summary>
        /// <param name="farmerId"> ID of the associated farmer resource. </param>
        /// <param name="attachmentId"> ID of the attachment resource. </param>
        /// <param name="file"> File to be uploaded. </param>
        /// <param name="farmerId1"> Farmer id for this attachment. </param>
        /// <param name="resourceId"> Associated Resource id for this attachment. </param>
        /// <param name="resourceType">
        /// Associated Resource type for this attachment
        /// i.e. Farmer, Farm, Field, SeasonalField, Boundary, FarmOperationApplicationData, HarvestData, TillageData, PlantingData.
        /// </param>
        /// <param name="originalFileName"> Original File Name for this attachment. </param>
        /// <param name="id"> Unique id. </param>
        /// <param name="status"> Status of the resource. </param>
        /// <param name="createdDateTime"> Date when resource was created. </param>
        /// <param name="modifiedDateTime"> Date when resource was last modified. </param>
        /// <param name="name"> Name to identify resource. </param>
        /// <param name="description"> Textual description of resource. </param>
        /// <param name="eTag"> The ETag value to implement optimistic concurrency. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="farmerId"/> or <paramref name="attachmentId"/> is null. </exception>
        public Response<Attachment> CreateOrUpdate(string farmerId, string attachmentId, Stream file = null, string farmerId1 = null, string resourceId = null, string resourceType = null, string originalFileName = null, string id = null, string status = null, string createdDateTime = null, string modifiedDateTime = null, string name = null, string description = null, string eTag = null, CancellationToken cancellationToken = default)
        {
            if (farmerId == null)
            {
                throw new ArgumentNullException(nameof(farmerId));
            }
            if (attachmentId == null)
            {
                throw new ArgumentNullException(nameof(attachmentId));
            }

            using var message = CreateCreateOrUpdateRequest(farmerId, attachmentId, file, farmerId1, resourceId, resourceType, originalFileName, id, status, createdDateTime, modifiedDateTime, name, description, eTag);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    {
                        Attachment value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Attachment.DeserializeAttachment(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteRequest(string farmerId, string attachmentId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/farmers/", false);
            uri.AppendPath(farmerId, true);
            uri.AppendPath("/attachments/", false);
            uri.AppendPath(attachmentId, true);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Deletes a specified attachment resource under a particular farmer. </summary>
        /// <param name="farmerId"> ID of the farmer. </param>
        /// <param name="attachmentId"> ID of the attachment. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="farmerId"/> or <paramref name="attachmentId"/> is null. </exception>
        public async Task<Response> DeleteAsync(string farmerId, string attachmentId, CancellationToken cancellationToken = default)
        {
            if (farmerId == null)
            {
                throw new ArgumentNullException(nameof(farmerId));
            }
            if (attachmentId == null)
            {
                throw new ArgumentNullException(nameof(attachmentId));
            }

            using var message = CreateDeleteRequest(farmerId, attachmentId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Deletes a specified attachment resource under a particular farmer. </summary>
        /// <param name="farmerId"> ID of the farmer. </param>
        /// <param name="attachmentId"> ID of the attachment. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="farmerId"/> or <paramref name="attachmentId"/> is null. </exception>
        public Response Delete(string farmerId, string attachmentId, CancellationToken cancellationToken = default)
        {
            if (farmerId == null)
            {
                throw new ArgumentNullException(nameof(farmerId));
            }
            if (attachmentId == null)
            {
                throw new ArgumentNullException(nameof(attachmentId));
            }

            using var message = CreateDeleteRequest(farmerId, attachmentId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 204:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDownloadRequest(string farmerId, string attachmentId)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/farmers/", false);
            uri.AppendPath(farmerId, true);
            uri.AppendPath("/attachments/", false);
            uri.AppendPath(attachmentId, true);
            uri.AppendPath("/file", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/octet-stream, application/json");
            return message;
        }

        /// <summary> Downloads and returns attachment as response for the given input filePath. </summary>
        /// <param name="farmerId"> ID of the associated farmer. </param>
        /// <param name="attachmentId"> ID of attachment to be downloaded. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="farmerId"/> or <paramref name="attachmentId"/> is null. </exception>
        public async Task<Response<Stream>> DownloadAsync(string farmerId, string attachmentId, CancellationToken cancellationToken = default)
        {
            if (farmerId == null)
            {
                throw new ArgumentNullException(nameof(farmerId));
            }
            if (attachmentId == null)
            {
                throw new ArgumentNullException(nameof(attachmentId));
            }

            using var message = CreateDownloadRequest(farmerId, attachmentId);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        var value = message.ExtractResponseContent();
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Downloads and returns attachment as response for the given input filePath. </summary>
        /// <param name="farmerId"> ID of the associated farmer. </param>
        /// <param name="attachmentId"> ID of attachment to be downloaded. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="farmerId"/> or <paramref name="attachmentId"/> is null. </exception>
        public Response<Stream> Download(string farmerId, string attachmentId, CancellationToken cancellationToken = default)
        {
            if (farmerId == null)
            {
                throw new ArgumentNullException(nameof(farmerId));
            }
            if (attachmentId == null)
            {
                throw new ArgumentNullException(nameof(attachmentId));
            }

            using var message = CreateDownloadRequest(farmerId, attachmentId);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        var value = message.ExtractResponseContent();
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListByFarmerIdNextPageRequest(string nextLink, string farmerId, IEnumerable<string> resourceIds, IEnumerable<string> resourceTypes, IEnumerable<string> ids, IEnumerable<string> names, IEnumerable<string> propertyFilters, IEnumerable<string> statuses, DateTimeOffset? minCreatedDateTime, DateTimeOffset? maxCreatedDateTime, DateTimeOffset? minLastModifiedDateTime, DateTimeOffset? maxLastModifiedDateTime, int? maxPageSize, string skipToken)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Returns a paginated list of attachment resources under a particular farmer. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="farmerId"> ID of the associated farmer. </param>
        /// <param name="resourceIds"> Resource Ids of the resource. </param>
        /// <param name="resourceTypes"> Resource Types of the resource. </param>
        /// <param name="ids"> Ids of the resource. </param>
        /// <param name="names"> Names of the resource. </param>
        /// <param name="propertyFilters">
        /// Filters on key-value pairs within the Properties object.
        /// eg. &quot;{testKey} eq {testValue}&quot;.
        /// </param>
        /// <param name="statuses"> Statuses of the resource. </param>
        /// <param name="minCreatedDateTime"> Minimum creation date of resource (inclusive). </param>
        /// <param name="maxCreatedDateTime"> Maximum creation date of resource (inclusive). </param>
        /// <param name="minLastModifiedDateTime"> Minimum last modified date of resource (inclusive). </param>
        /// <param name="maxLastModifiedDateTime"> Maximum last modified date of resource (inclusive). </param>
        /// <param name="maxPageSize">
        /// Maximum number of items needed (inclusive).
        /// Minimum = 10, Maximum = 1000, Default value = 50.
        /// </param>
        /// <param name="skipToken"> Skip token for getting next set of results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> or <paramref name="farmerId"/> is null. </exception>
        public async Task<Response<AttachmentListResponse>> ListByFarmerIdNextPageAsync(string nextLink, string farmerId, IEnumerable<string> resourceIds = null, IEnumerable<string> resourceTypes = null, IEnumerable<string> ids = null, IEnumerable<string> names = null, IEnumerable<string> propertyFilters = null, IEnumerable<string> statuses = null, DateTimeOffset? minCreatedDateTime = null, DateTimeOffset? maxCreatedDateTime = null, DateTimeOffset? minLastModifiedDateTime = null, DateTimeOffset? maxLastModifiedDateTime = null, int? maxPageSize = null, string skipToken = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (farmerId == null)
            {
                throw new ArgumentNullException(nameof(farmerId));
            }

            using var message = CreateListByFarmerIdNextPageRequest(nextLink, farmerId, resourceIds, resourceTypes, ids, names, propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AttachmentListResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AttachmentListResponse.DeserializeAttachmentListResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Returns a paginated list of attachment resources under a particular farmer. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="farmerId"> ID of the associated farmer. </param>
        /// <param name="resourceIds"> Resource Ids of the resource. </param>
        /// <param name="resourceTypes"> Resource Types of the resource. </param>
        /// <param name="ids"> Ids of the resource. </param>
        /// <param name="names"> Names of the resource. </param>
        /// <param name="propertyFilters">
        /// Filters on key-value pairs within the Properties object.
        /// eg. &quot;{testKey} eq {testValue}&quot;.
        /// </param>
        /// <param name="statuses"> Statuses of the resource. </param>
        /// <param name="minCreatedDateTime"> Minimum creation date of resource (inclusive). </param>
        /// <param name="maxCreatedDateTime"> Maximum creation date of resource (inclusive). </param>
        /// <param name="minLastModifiedDateTime"> Minimum last modified date of resource (inclusive). </param>
        /// <param name="maxLastModifiedDateTime"> Maximum last modified date of resource (inclusive). </param>
        /// <param name="maxPageSize">
        /// Maximum number of items needed (inclusive).
        /// Minimum = 10, Maximum = 1000, Default value = 50.
        /// </param>
        /// <param name="skipToken"> Skip token for getting next set of results. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nextLink"/> or <paramref name="farmerId"/> is null. </exception>
        public Response<AttachmentListResponse> ListByFarmerIdNextPage(string nextLink, string farmerId, IEnumerable<string> resourceIds = null, IEnumerable<string> resourceTypes = null, IEnumerable<string> ids = null, IEnumerable<string> names = null, IEnumerable<string> propertyFilters = null, IEnumerable<string> statuses = null, DateTimeOffset? minCreatedDateTime = null, DateTimeOffset? maxCreatedDateTime = null, DateTimeOffset? minLastModifiedDateTime = null, DateTimeOffset? maxLastModifiedDateTime = null, int? maxPageSize = null, string skipToken = null, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (farmerId == null)
            {
                throw new ArgumentNullException(nameof(farmerId));
            }

            using var message = CreateListByFarmerIdNextPageRequest(nextLink, farmerId, resourceIds, resourceTypes, ids, names, propertyFilters, statuses, minCreatedDateTime, maxCreatedDateTime, minLastModifiedDateTime, maxLastModifiedDateTime, maxPageSize, skipToken);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AttachmentListResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AttachmentListResponse.DeserializeAttachmentListResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
