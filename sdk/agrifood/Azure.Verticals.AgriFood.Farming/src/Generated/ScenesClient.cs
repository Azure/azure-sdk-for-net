// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Verticals.AgriFood.Farming
{
    /// <summary> The Scenes service client. </summary>
    public partial class ScenesClient
    {
        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline { get => _pipeline; }
        private HttpPipeline _pipeline;
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly ScenesRestClient _restClient;
        private readonly string[] AuthorizationScopes = { "https://farmbeats.azure.net/.default" };
        private readonly TokenCredential _tokenCredential;

        /// <summary> Initializes a new instance of ScenesClient for mocking. </summary>
        protected ScenesClient()
        {
        }

        /// <summary> Initializes a new instance of ScenesClient. </summary>
        /// <param name="endpoint"> The endpoint of your FarmBeats resource (protocol and hostname, for example: https://{resourceName}.farmbeats.azure.net). </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public ScenesClient(Uri endpoint, TokenCredential credential, FarmBeatsClientOptions options = null)
        {
            if (endpoint == null)
            {
                throw new ArgumentNullException(nameof(endpoint));
            }
            if (credential == null)
            {
                throw new ArgumentNullException(nameof(credential));
            }

            options ??= new FarmBeatsClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            _tokenCredential = credential;
            var authPolicy = new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes);
            _pipeline = HttpPipelineBuilder.Build(options, new HttpPipelinePolicy[] { new LowLevelCallbackPolicy() }, new HttpPipelinePolicy[] { authPolicy }, new ResponseClassifier());
            _restClient = new ScenesRestClient(_clientDiagnostics, _pipeline, endpoint, options.Version);
        }

        /// <summary> Get a satellite data ingestion job. </summary>
        /// <param name="jobId"> ID of the job. </param>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   farmerId: string,
        ///   boundaryId: string,
        ///   startDateTime: string (ISO 8601 Format),
        ///   endDateTime: string (ISO 8601 Format),
        ///   provider: &quot;Microsoft&quot;,
        ///   source: &quot;Sentinel_2_L2A&quot;,
        ///   data: {
        ///     imageNames: [string],
        ///     imageFormats: [string],
        ///     imageResolutions: [number]
        ///   },
        ///   id: string,
        ///   status: string,
        ///   durationInSeconds: number,
        ///   message: string,
        ///   createdDateTime: string (ISO 8601 Format),
        ///   lastActionDateTime: string (ISO 8601 Format),
        ///   startTime: string (ISO 8601 Format),
        ///   endTime: string (ISO 8601 Format),
        ///   name: string,
        ///   description: string,
        ///   properties: Dictionary&lt;string, AnyObject&gt;
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [Error],
        ///     innererror: {
        ///       code: string,
        ///       innererror: InnerError
        ///     }
        ///   },
        ///   traceId: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual async Task<Response> GetSatelliteDataIngestionJobDetailsAsync(string jobId, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("ScenesClient.GetSatelliteDataIngestionJobDetails");
            scope.Start();
            try
            {
                return await _restClient.GetSatelliteDataIngestionJobDetailsAsync(jobId, options).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a satellite data ingestion job. </summary>
        /// <param name="jobId"> ID of the job. </param>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   farmerId: string,
        ///   boundaryId: string,
        ///   startDateTime: string (ISO 8601 Format),
        ///   endDateTime: string (ISO 8601 Format),
        ///   provider: &quot;Microsoft&quot;,
        ///   source: &quot;Sentinel_2_L2A&quot;,
        ///   data: {
        ///     imageNames: [string],
        ///     imageFormats: [string],
        ///     imageResolutions: [number]
        ///   },
        ///   id: string,
        ///   status: string,
        ///   durationInSeconds: number,
        ///   message: string,
        ///   createdDateTime: string (ISO 8601 Format),
        ///   lastActionDateTime: string (ISO 8601 Format),
        ///   startTime: string (ISO 8601 Format),
        ///   endTime: string (ISO 8601 Format),
        ///   name: string,
        ///   description: string,
        ///   properties: Dictionary&lt;string, AnyObject&gt;
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [Error],
        ///     innererror: {
        ///       code: string,
        ///       innererror: InnerError
        ///     }
        ///   },
        ///   traceId: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Response GetSatelliteDataIngestionJobDetails(string jobId, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("ScenesClient.GetSatelliteDataIngestionJobDetails");
            scope.Start();
            try
            {
                return _restClient.GetSatelliteDataIngestionJobDetails(jobId, options);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Downloads and returns file stream as response for the given input filePath. </summary>
        /// <param name="filePath"> cloud storage path of scene file. </param>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [Error],
        ///     innererror: {
        ///       code: string,
        ///       innererror: InnerError
        ///     }
        ///   },
        ///   traceId: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual async Task<Response> DownloadAsync(string filePath, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("ScenesClient.Download");
            scope.Start();
            try
            {
                return await _restClient.DownloadAsync(filePath, options).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Downloads and returns file stream as response for the given input filePath. </summary>
        /// <param name="filePath"> cloud storage path of scene file. </param>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [Error],
        ///     innererror: {
        ///       code: string,
        ///       innererror: InnerError
        ///     }
        ///   },
        ///   traceId: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Response Download(string filePath, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("ScenesClient.Download");
            scope.Start();
            try
            {
                return _restClient.Download(filePath, options);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a paginated list of scene resources. </summary>
        /// <param name="provider"> Provider name of scene data. </param>
        /// <param name="farmerId"> FarmerId. </param>
        /// <param name="boundaryId"> BoundaryId. </param>
        /// <param name="source"> Source name of scene data, default value Sentinel_2_L2A (Sentinel 2 L2A). </param>
        /// <param name="startDateTime"> Scene start UTC datetime (inclusive), sample format: yyyy-MM-ddThh:mm:ssZ. </param>
        /// <param name="endDateTime"> Scene end UTC datetime (inclusive), sample format: yyyy-MM-dThh:mm:ssZ. </param>
        /// <param name="maxCloudCoveragePercentage"> Filter scenes with cloud coverage percentage less than max value. Range [0 to 100.0]. </param>
        /// <param name="maxDarkPixelCoveragePercentage"> Filter scenes with dark pixel coverage percentage less than max value. Range [0 to 100.0]. </param>
        /// <param name="imageNames"> List of image names to be filtered. </param>
        /// <param name="imageResolutions"> List of image resolutions in meters to be filtered. </param>
        /// <param name="imageFormats"> List of image formats to be filtered. </param>
        /// <param name="maxPageSize">
        /// Maximum number of items needed (inclusive).
        /// Minimum = 10, Maximum = 1000, Default value = 50.
        /// </param>
        /// <param name="skipToken"> Skip token for getting next set of results. </param>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       sceneDateTime: string (ISO 8601 Format),
        ///       provider: string,
        ///       source: string,
        ///       imageFiles: [
        ///         {
        ///           fileLink: string,
        ///           name: string,
        ///           imageFormat: &quot;TIF&quot;,
        ///           resolution: number
        ///         }
        ///       ],
        ///       imageFormat: &quot;TIF&quot;,
        ///       cloudCoverPercentage: number,
        ///       darkPixelPercentage: number,
        ///       ndviMedianValue: number,
        ///       boundaryId: string,
        ///       farmerId: string,
        ///       id: string,
        ///       eTag: string
        ///     }
        ///   ],
        ///   $skipToken: string,
        ///   nextLink: string
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [Error],
        ///     innererror: {
        ///       code: string,
        ///       innererror: InnerError
        ///     }
        ///   },
        ///   traceId: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual AsyncPageable<BinaryData> ListAsync(string provider, string farmerId, string boundaryId, string source = null, DateTimeOffset? startDateTime = null, DateTimeOffset? endDateTime = null, double? maxCloudCoveragePercentage = null, double? maxDarkPixelCoveragePercentage = null, IEnumerable<string> imageNames = null, IEnumerable<double> imageResolutions = null, IEnumerable<string> imageFormats = null, int? maxPageSize = null, string skipToken = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            var imageNamesValues = imageNames.ToArray();
            var imageResolutionsValues = imageResolutions.ToArray();
            var imageFormatsValues = imageFormats.ToArray();
            async Task<Page<BinaryData>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ScenesClient.List");
                scope.Start();
                try
                {
                    Response response = await _restClient.ListAsync(provider, farmerId, boundaryId, source, startDateTime, endDateTime, maxCloudCoveragePercentage, maxDarkPixelCoveragePercentage, imageNamesValues, imageResolutionsValues, imageFormatsValues, maxPageSize, skipToken, options).ConfigureAwait(false);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "value", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            async Task<Page<BinaryData>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ScenesClient.List");
                scope.Start();
                try
                {
                    Response response = await _restClient.ListNextPageAsync(nextLink, provider, farmerId, boundaryId, source, startDateTime, endDateTime, maxCloudCoveragePercentage, maxDarkPixelCoveragePercentage, imageNamesValues, imageResolutionsValues, imageFormatsValues, maxPageSize, skipToken, options).ConfigureAwait(false);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "value", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Returns a paginated list of scene resources. </summary>
        /// <param name="provider"> Provider name of scene data. </param>
        /// <param name="farmerId"> FarmerId. </param>
        /// <param name="boundaryId"> BoundaryId. </param>
        /// <param name="source"> Source name of scene data, default value Sentinel_2_L2A (Sentinel 2 L2A). </param>
        /// <param name="startDateTime"> Scene start UTC datetime (inclusive), sample format: yyyy-MM-ddThh:mm:ssZ. </param>
        /// <param name="endDateTime"> Scene end UTC datetime (inclusive), sample format: yyyy-MM-dThh:mm:ssZ. </param>
        /// <param name="maxCloudCoveragePercentage"> Filter scenes with cloud coverage percentage less than max value. Range [0 to 100.0]. </param>
        /// <param name="maxDarkPixelCoveragePercentage"> Filter scenes with dark pixel coverage percentage less than max value. Range [0 to 100.0]. </param>
        /// <param name="imageNames"> List of image names to be filtered. </param>
        /// <param name="imageResolutions"> List of image resolutions in meters to be filtered. </param>
        /// <param name="imageFormats"> List of image formats to be filtered. </param>
        /// <param name="maxPageSize">
        /// Maximum number of items needed (inclusive).
        /// Minimum = 10, Maximum = 1000, Default value = 50.
        /// </param>
        /// <param name="skipToken"> Skip token for getting next set of results. </param>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   value: [
        ///     {
        ///       sceneDateTime: string (ISO 8601 Format),
        ///       provider: string,
        ///       source: string,
        ///       imageFiles: [
        ///         {
        ///           fileLink: string,
        ///           name: string,
        ///           imageFormat: &quot;TIF&quot;,
        ///           resolution: number
        ///         }
        ///       ],
        ///       imageFormat: &quot;TIF&quot;,
        ///       cloudCoverPercentage: number,
        ///       darkPixelPercentage: number,
        ///       ndviMedianValue: number,
        ///       boundaryId: string,
        ///       farmerId: string,
        ///       id: string,
        ///       eTag: string
        ///     }
        ///   ],
        ///   $skipToken: string,
        ///   nextLink: string
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [Error],
        ///     innererror: {
        ///       code: string,
        ///       innererror: InnerError
        ///     }
        ///   },
        ///   traceId: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Pageable<BinaryData> List(string provider, string farmerId, string boundaryId, string source = null, DateTimeOffset? startDateTime = null, DateTimeOffset? endDateTime = null, double? maxCloudCoveragePercentage = null, double? maxDarkPixelCoveragePercentage = null, IEnumerable<string> imageNames = null, IEnumerable<double> imageResolutions = null, IEnumerable<string> imageFormats = null, int? maxPageSize = null, string skipToken = null, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            options ??= new RequestOptions();
            var imageNamesValues = imageNames.ToArray();
            var imageResolutionsValues = imageResolutions.ToArray();
            var imageFormatsValues = imageFormats.ToArray();
            Page<BinaryData> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ScenesClient.List");
                scope.Start();
                try
                {
                    Response response = _restClient.List(provider, farmerId, boundaryId, source, startDateTime, endDateTime, maxCloudCoveragePercentage, maxDarkPixelCoveragePercentage, imageNamesValues, imageResolutionsValues, imageFormatsValues, maxPageSize, skipToken, options);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "value", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            Page<BinaryData> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _clientDiagnostics.CreateScope("ScenesClient.List");
                scope.Start();
                try
                {
                    Response response = _restClient.ListNextPage(nextLink, provider, farmerId, boundaryId, source, startDateTime, endDateTime, maxCloudCoveragePercentage, maxDarkPixelCoveragePercentage, imageNamesValues, imageResolutionsValues, imageFormatsValues, maxPageSize, skipToken, options);
                    return LowLevelPagableHelpers.BuildPageForResponse(response, "value", "nextLink");
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }

            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary> Create a satellite data ingestion job. </summary>
        /// <param name="jobId"> JobId provided by user. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   farmerId: string (required),
        ///   boundaryId: string (required),
        ///   startDateTime: string (ISO 8601 Format) (required),
        ///   endDateTime: string (ISO 8601 Format) (required),
        ///   provider: &quot;Microsoft&quot;,
        ///   source: &quot;Sentinel_2_L2A&quot;,
        ///   data: {
        ///     imageNames: [string],
        ///     imageFormats: [string],
        ///     imageResolutions: [number]
        ///   },
        ///   id: string,
        ///   status: string,
        ///   durationInSeconds: number,
        ///   message: string,
        ///   createdDateTime: string (ISO 8601 Format),
        ///   lastActionDateTime: string (ISO 8601 Format),
        ///   startTime: string (ISO 8601 Format),
        ///   endTime: string (ISO 8601 Format),
        ///   name: string,
        ///   description: string,
        ///   properties: Dictionary&lt;string, AnyObject&gt;
        /// }
        /// </code>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   farmerId: string,
        ///   boundaryId: string,
        ///   startDateTime: string (ISO 8601 Format),
        ///   endDateTime: string (ISO 8601 Format),
        ///   provider: &quot;Microsoft&quot;,
        ///   source: &quot;Sentinel_2_L2A&quot;,
        ///   data: {
        ///     imageNames: [string],
        ///     imageFormats: [string],
        ///     imageResolutions: [number]
        ///   },
        ///   id: string,
        ///   status: string,
        ///   durationInSeconds: number,
        ///   message: string,
        ///   createdDateTime: string (ISO 8601 Format),
        ///   lastActionDateTime: string (ISO 8601 Format),
        ///   startTime: string (ISO 8601 Format),
        ///   endTime: string (ISO 8601 Format),
        ///   name: string,
        ///   description: string,
        ///   properties: Dictionary&lt;string, AnyObject&gt;
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [Error],
        ///     innererror: {
        ///       code: string,
        ///       innererror: InnerError
        ///     }
        ///   },
        ///   traceId: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual async Task<Operation<BinaryData>> CreateSatelliteDataIngestionJobAsync(string jobId, RequestContent content, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("ScenesClient.CreateSatelliteDataIngestionJob");
            scope.Start();
            try
            {
                using HttpMessage message = _restClient.CreateCreateSatelliteDataIngestionJobRequest(jobId, content);
                Response response = await _restClient.CreateSatelliteDataIngestionJobAsync(jobId, content, options).ConfigureAwait(false);
                return new LowLevelFuncOperation<BinaryData>(_clientDiagnostics, _pipeline, message.Request, response, OperationFinalStateVia.Location, "ScenesClient.CreateSatelliteDataIngestionJob", LowLevelOperationHelpers.ResponseContentSelector);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a satellite data ingestion job. </summary>
        /// <param name="jobId"> JobId provided by user. </param>
        /// <param name="content"> The content to send as the body of the request. </param>
        /// <param name="options"> The request options. </param>
        /// <remarks>
        /// Schema for <c>Request Body</c>:
        /// <code>{
        ///   farmerId: string (required),
        ///   boundaryId: string (required),
        ///   startDateTime: string (ISO 8601 Format) (required),
        ///   endDateTime: string (ISO 8601 Format) (required),
        ///   provider: &quot;Microsoft&quot;,
        ///   source: &quot;Sentinel_2_L2A&quot;,
        ///   data: {
        ///     imageNames: [string],
        ///     imageFormats: [string],
        ///     imageResolutions: [number]
        ///   },
        ///   id: string,
        ///   status: string,
        ///   durationInSeconds: number,
        ///   message: string,
        ///   createdDateTime: string (ISO 8601 Format),
        ///   lastActionDateTime: string (ISO 8601 Format),
        ///   startTime: string (ISO 8601 Format),
        ///   endTime: string (ISO 8601 Format),
        ///   name: string,
        ///   description: string,
        ///   properties: Dictionary&lt;string, AnyObject&gt;
        /// }
        /// </code>
        /// Schema for <c>Response Body</c>:
        /// <code>{
        ///   farmerId: string,
        ///   boundaryId: string,
        ///   startDateTime: string (ISO 8601 Format),
        ///   endDateTime: string (ISO 8601 Format),
        ///   provider: &quot;Microsoft&quot;,
        ///   source: &quot;Sentinel_2_L2A&quot;,
        ///   data: {
        ///     imageNames: [string],
        ///     imageFormats: [string],
        ///     imageResolutions: [number]
        ///   },
        ///   id: string,
        ///   status: string,
        ///   durationInSeconds: number,
        ///   message: string,
        ///   createdDateTime: string (ISO 8601 Format),
        ///   lastActionDateTime: string (ISO 8601 Format),
        ///   startTime: string (ISO 8601 Format),
        ///   endTime: string (ISO 8601 Format),
        ///   name: string,
        ///   description: string,
        ///   properties: Dictionary&lt;string, AnyObject&gt;
        /// }
        /// </code>
        /// Schema for <c>Response Error</c>:
        /// <code>{
        ///   error: {
        ///     code: string,
        ///     message: string,
        ///     target: string,
        ///     details: [Error],
        ///     innererror: {
        ///       code: string,
        ///       innererror: InnerError
        ///     }
        ///   },
        ///   traceId: string
        /// }
        /// </code>
        /// 
        /// </remarks>
#pragma warning disable AZC0002
        public virtual Operation<BinaryData> CreateSatelliteDataIngestionJob(string jobId, RequestContent content, RequestOptions options = null)
#pragma warning restore AZC0002
        {
            using var scope = _clientDiagnostics.CreateScope("ScenesClient.CreateSatelliteDataIngestionJob");
            scope.Start();
            try
            {
                using HttpMessage message = _restClient.CreateCreateSatelliteDataIngestionJobRequest(jobId, content);
                Response response = _restClient.CreateSatelliteDataIngestionJob(jobId, content, options);
                return new LowLevelFuncOperation<BinaryData>(_clientDiagnostics, _pipeline, message.Request, response, OperationFinalStateVia.Location, "ScenesClient.CreateSatelliteDataIngestionJob", LowLevelOperationHelpers.ResponseContentSelector);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
