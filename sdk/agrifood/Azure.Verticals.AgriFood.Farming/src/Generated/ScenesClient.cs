// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace Azure.Verticals.AgriFood.Farming
{
    /// <summary> The Scenes service client. </summary>
    public partial class ScenesClient
    {
        private static readonly string[] AuthorizationScopes = new string[] { "https://farmbeats.azure.net/.default" };
        private readonly TokenCredential _tokenCredential;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of ScenesClient for mocking. </summary>
        protected ScenesClient()
        {
        }

        /// <summary> Initializes a new instance of ScenesClient. </summary>
        /// <param name="endpoint"> The endpoint of your FarmBeats resource (protocol and hostname, for example: https://{resourceName}.farmbeats.azure.net). </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public ScenesClient(Uri endpoint, TokenCredential credential) : this(endpoint, credential, new FarmBeatsClientOptions())
        {
        }

        /// <summary> Initializes a new instance of ScenesClient. </summary>
        /// <param name="endpoint"> The endpoint of your FarmBeats resource (protocol and hostname, for example: https://{resourceName}.farmbeats.azure.net). </param>
        /// <param name="credential"> A credential used to authenticate to an Azure Service. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> or <paramref name="credential"/> is null. </exception>
        public ScenesClient(Uri endpoint, TokenCredential credential, FarmBeatsClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            Argument.AssertNotNull(credential, nameof(credential));
            options ??= new FarmBeatsClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _tokenCredential = credential;
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), new HttpPipelinePolicy[] { new BearerTokenAuthenticationPolicy(_tokenCredential, AuthorizationScopes) }, new ResponseClassifier());
            _endpoint = endpoint;
            _apiVersion = options.Version;
        }

        /// <summary> Get a satellite data ingestion job. </summary>
        /// <param name="jobId"> ID of the job. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetSatelliteDataIngestionJobDetailsAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ScenesClient(endpoint, credential);
        /// 
        /// Response response = await client.GetSatelliteDataIngestionJobDetailsAsync("<jobId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("farmerId").ToString());
        /// Console.WriteLine(result.GetProperty("boundaryId").ToString());
        /// Console.WriteLine(result.GetProperty("startDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("endDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("provider").ToString());
        /// Console.WriteLine(result.GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("data").GetProperty("imageNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("data").GetProperty("imageFormats")[0].ToString());
        /// Console.WriteLine(result.GetProperty("data").GetProperty("imageResolutions")[0].ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
        /// Console.WriteLine(result.GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>SatelliteDataIngestionJob</c>:
        /// <code>{
        ///   farmerId: string, # Required. Farmer ID.
        ///   boundaryId: string, # Required. The id of the boundary object for which satellite data is being fetched.
        ///   startDateTime: string (ISO 8601 Format), # Required. Start Date.
        ///   endDateTime: string (ISO 8601 Format), # Required. End Date.
        ///   provider: &quot;Microsoft&quot;, # Optional. Provider of satellite data.
        ///   source: &quot;Sentinel_2_L2A&quot;, # Optional. Source of satellite data.
        ///   data: {
        ///     imageNames: [string], # Optional. List of ImageNames.
        ///     imageFormats: [string], # Optional. List of ImageFormats. Available value: TIF.
        ///     imageResolutions: [number], # Optional. List of ImageResolutions in meters. Available values: 10, 20, 60.
        ///   }, # Optional. Data Model for SatelliteIngestionJobRequest.
        ///   id: string, # Optional. Unique job id.
        ///   status: string, # Optional. Status of the job.
        /// Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
        ///   durationInSeconds: number, # Optional. Duration of the job in seconds.
        ///   message: string, # Optional. Status message to capture more details of the job.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetSatelliteDataIngestionJobDetailsAsync(string jobId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

            using var scope = ClientDiagnostics.CreateScope("ScenesClient.GetSatelliteDataIngestionJobDetails");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetSatelliteDataIngestionJobDetailsRequest(jobId, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Get a satellite data ingestion job. </summary>
        /// <param name="jobId"> ID of the job. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetSatelliteDataIngestionJobDetails with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ScenesClient(endpoint, credential);
        /// 
        /// Response response = client.GetSatelliteDataIngestionJobDetails("<jobId>");
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("farmerId").ToString());
        /// Console.WriteLine(result.GetProperty("boundaryId").ToString());
        /// Console.WriteLine(result.GetProperty("startDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("endDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("provider").ToString());
        /// Console.WriteLine(result.GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("data").GetProperty("imageNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("data").GetProperty("imageFormats")[0].ToString());
        /// Console.WriteLine(result.GetProperty("data").GetProperty("imageResolutions")[0].ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
        /// Console.WriteLine(result.GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>SatelliteDataIngestionJob</c>:
        /// <code>{
        ///   farmerId: string, # Required. Farmer ID.
        ///   boundaryId: string, # Required. The id of the boundary object for which satellite data is being fetched.
        ///   startDateTime: string (ISO 8601 Format), # Required. Start Date.
        ///   endDateTime: string (ISO 8601 Format), # Required. End Date.
        ///   provider: &quot;Microsoft&quot;, # Optional. Provider of satellite data.
        ///   source: &quot;Sentinel_2_L2A&quot;, # Optional. Source of satellite data.
        ///   data: {
        ///     imageNames: [string], # Optional. List of ImageNames.
        ///     imageFormats: [string], # Optional. List of ImageFormats. Available value: TIF.
        ///     imageResolutions: [number], # Optional. List of ImageResolutions in meters. Available values: 10, 20, 60.
        ///   }, # Optional. Data Model for SatelliteIngestionJobRequest.
        ///   id: string, # Optional. Unique job id.
        ///   status: string, # Optional. Status of the job.
        /// Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
        ///   durationInSeconds: number, # Optional. Duration of the job in seconds.
        ///   message: string, # Optional. Status message to capture more details of the job.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetSatelliteDataIngestionJobDetails(string jobId, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

            using var scope = ClientDiagnostics.CreateScope("ScenesClient.GetSatelliteDataIngestionJobDetails");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetSatelliteDataIngestionJobDetailsRequest(jobId, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Downloads and returns file stream as response for the given input filePath. </summary>
        /// <param name="filePath"> cloud storage path of scene file. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="filePath"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DownloadAsync with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ScenesClient(endpoint, credential);
        /// 
        /// Response response = await client.DownloadAsync("<filePath>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> DownloadAsync(string filePath, RequestContext context = null)
        {
            Argument.AssertNotNull(filePath, nameof(filePath));

            using var scope = ClientDiagnostics.CreateScope("ScenesClient.Download");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDownloadRequest(filePath, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Downloads and returns file stream as response for the given input filePath. </summary>
        /// <param name="filePath"> cloud storage path of scene file. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="filePath"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call Download with required parameters.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ScenesClient(endpoint, credential);
        /// 
        /// Response response = client.Download("<filePath>");
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response Download(string filePath, RequestContext context = null)
        {
            Argument.AssertNotNull(filePath, nameof(filePath));

            using var scope = ClientDiagnostics.CreateScope("ScenesClient.Download");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDownloadRequest(filePath, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Returns a paginated list of scene resources. </summary>
        /// <param name="provider"> Provider name of scene data. </param>
        /// <param name="farmerId"> FarmerId. </param>
        /// <param name="boundaryId"> BoundaryId. </param>
        /// <param name="source"> Source name of scene data, default value Sentinel_2_L2A (Sentinel 2 L2A). </param>
        /// <param name="startDateTime"> Scene start UTC datetime (inclusive), sample format: yyyy-MM-ddThh:mm:ssZ. </param>
        /// <param name="endDateTime"> Scene end UTC datetime (inclusive), sample format: yyyy-MM-dThh:mm:ssZ. </param>
        /// <param name="maxCloudCoveragePercentage"> Filter scenes with cloud coverage percentage less than max value. Range [0 to 100.0]. </param>
        /// <param name="maxDarkPixelCoveragePercentage"> Filter scenes with dark pixel coverage percentage less than max value. Range [0 to 100.0]. </param>
        /// <param name="imageNames"> List of image names to be filtered. </param>
        /// <param name="imageResolutions"> List of image resolutions in meters to be filtered. </param>
        /// <param name="imageFormats"> List of image formats to be filtered. </param>
        /// <param name="maxPageSize">
        /// Maximum number of items needed (inclusive).
        /// Minimum = 10, Maximum = 1000, Default value = 50.
        /// </param>
        /// <param name="skipToken"> Skip token for getting next set of results. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="provider"/>, <paramref name="farmerId"/> or <paramref name="boundaryId"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="AsyncPageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetScenesAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ScenesClient(endpoint, credential);
        /// 
        /// await foreach (var data in client.GetScenesAsync("<provider>", "<farmerId>", "<boundaryId>"))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.ToString());
        /// }
        /// ]]></code>
        /// This sample shows how to call GetScenesAsync with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ScenesClient(endpoint, credential);
        /// 
        /// await foreach (var data in client.GetScenesAsync("<provider>", "<farmerId>", "<boundaryId>", "<source>", DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 1234, 1234, new String[]{"<imageNames>"}, new Double[]{1234}, new String[]{"<imageFormats>"}, 1234, "<skipToken>"))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.GetProperty("sceneDateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("provider").ToString());
        ///     Console.WriteLine(result.GetProperty("source").ToString());
        ///     Console.WriteLine(result.GetProperty("imageFiles")[0].GetProperty("fileLink").ToString());
        ///     Console.WriteLine(result.GetProperty("imageFiles")[0].GetProperty("name").ToString());
        ///     Console.WriteLine(result.GetProperty("imageFiles")[0].GetProperty("imageFormat").ToString());
        ///     Console.WriteLine(result.GetProperty("imageFiles")[0].GetProperty("resolution").ToString());
        ///     Console.WriteLine(result.GetProperty("imageFormat").ToString());
        ///     Console.WriteLine(result.GetProperty("cloudCoverPercentage").ToString());
        ///     Console.WriteLine(result.GetProperty("darkPixelPercentage").ToString());
        ///     Console.WriteLine(result.GetProperty("ndviMedianValue").ToString());
        ///     Console.WriteLine(result.GetProperty("boundaryId").ToString());
        ///     Console.WriteLine(result.GetProperty("farmerId").ToString());
        ///     Console.WriteLine(result.GetProperty("id").ToString());
        ///     Console.WriteLine(result.GetProperty("eTag").ToString());
        /// }
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for one item in the pageable response.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>SceneListResponseValue</c>:
        /// <code>{
        ///   sceneDateTime: string (ISO 8601 Format), # Optional. Date-time of the scene, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   provider: string, # Optional. Data provider of the scene.
        ///   source: string, # Optional. Data source of the scene.
        ///   imageFiles: [
        ///     {
        ///       fileLink: string, # Optional. Link of the image file.
        ///       name: string, # Required. Name of the image file.
        ///       imageFormat: &quot;TIF&quot;, # Optional. Supported image formats for scene resource.
        ///       resolution: number, # Optional. Resolution of image file in meters.
        ///     }
        ///   ], # Optional. Collection of image files.
        ///   imageFormat: &quot;TIF&quot;, # Optional. Supported image formats for scene resource.
        ///   cloudCoverPercentage: number, # Optional. Cloud cover percentage of the scene.
        ///   darkPixelPercentage: number, # Optional. Dark pixel percentage of the scene.
        ///   ndviMedianValue: number, # Optional. Median of NDVI of the scene.
        ///   boundaryId: string, # Optional. Boundary ID which belongs to the scene.
        ///   farmerId: string, # Optional. Farmer ID which belongs to the scene.
        ///   id: string, # Optional. Unique scene resource ID.
        ///   eTag: string, # Optional. The ETag value to implement optimistic concurrency.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual AsyncPageable<BinaryData> GetScenesAsync(string provider, string farmerId, string boundaryId, string source = null, DateTimeOffset? startDateTime = null, DateTimeOffset? endDateTime = null, double? maxCloudCoveragePercentage = null, double? maxDarkPixelCoveragePercentage = null, IEnumerable<string> imageNames = null, IEnumerable<double> imageResolutions = null, IEnumerable<string> imageFormats = null, int? maxPageSize = null, string skipToken = null, RequestContext context = null)
        {
            Argument.AssertNotNull(provider, nameof(provider));
            Argument.AssertNotNull(farmerId, nameof(farmerId));
            Argument.AssertNotNull(boundaryId, nameof(boundaryId));

            return GetScenesImplementationAsync("ScenesClient.GetScenes", provider, farmerId, boundaryId, source, startDateTime, endDateTime, maxCloudCoveragePercentage, maxDarkPixelCoveragePercentage, imageNames, imageResolutions, imageFormats, maxPageSize, skipToken, context);
        }

        private AsyncPageable<BinaryData> GetScenesImplementationAsync(string diagnosticsScopeName, string provider, string farmerId, string boundaryId, string source, DateTimeOffset? startDateTime, DateTimeOffset? endDateTime, double? maxCloudCoveragePercentage, double? maxDarkPixelCoveragePercentage, IEnumerable<string> imageNames, IEnumerable<double> imageResolutions, IEnumerable<string> imageFormats, int? maxPageSize, string skipToken, RequestContext context)
        {
            return PageableHelpers.CreateAsyncPageable(CreateEnumerableAsync, ClientDiagnostics, diagnosticsScopeName);
            async IAsyncEnumerable<Page<BinaryData>> CreateEnumerableAsync(string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken = default)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetScenesRequest(provider, farmerId, boundaryId, source, startDateTime, endDateTime, maxCloudCoveragePercentage, maxDarkPixelCoveragePercentage, imageNames, imageResolutions, imageFormats, maxPageSize, skipToken, context)
                        : CreateGetScenesNextPageRequest(nextLink, provider, farmerId, boundaryId, source, startDateTime, endDateTime, maxCloudCoveragePercentage, maxDarkPixelCoveragePercentage, imageNames, imageResolutions, imageFormats, maxPageSize, skipToken, context);
                    var page = await LowLevelPageableHelpers.ProcessMessageAsync(_pipeline, message, context, "value", "nextLink", cancellationToken).ConfigureAwait(false);
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Returns a paginated list of scene resources. </summary>
        /// <param name="provider"> Provider name of scene data. </param>
        /// <param name="farmerId"> FarmerId. </param>
        /// <param name="boundaryId"> BoundaryId. </param>
        /// <param name="source"> Source name of scene data, default value Sentinel_2_L2A (Sentinel 2 L2A). </param>
        /// <param name="startDateTime"> Scene start UTC datetime (inclusive), sample format: yyyy-MM-ddThh:mm:ssZ. </param>
        /// <param name="endDateTime"> Scene end UTC datetime (inclusive), sample format: yyyy-MM-dThh:mm:ssZ. </param>
        /// <param name="maxCloudCoveragePercentage"> Filter scenes with cloud coverage percentage less than max value. Range [0 to 100.0]. </param>
        /// <param name="maxDarkPixelCoveragePercentage"> Filter scenes with dark pixel coverage percentage less than max value. Range [0 to 100.0]. </param>
        /// <param name="imageNames"> List of image names to be filtered. </param>
        /// <param name="imageResolutions"> List of image resolutions in meters to be filtered. </param>
        /// <param name="imageFormats"> List of image formats to be filtered. </param>
        /// <param name="maxPageSize">
        /// Maximum number of items needed (inclusive).
        /// Minimum = 10, Maximum = 1000, Default value = 50.
        /// </param>
        /// <param name="skipToken"> Skip token for getting next set of results. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="provider"/>, <paramref name="farmerId"/> or <paramref name="boundaryId"/> is null. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Pageable{T}"/> from the service containing a list of <see cref="BinaryData"/> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetScenes with required parameters and parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ScenesClient(endpoint, credential);
        /// 
        /// foreach (var data in client.GetScenes("<provider>", "<farmerId>", "<boundaryId>"))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.ToString());
        /// }
        /// ]]></code>
        /// This sample shows how to call GetScenes with all parameters, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ScenesClient(endpoint, credential);
        /// 
        /// foreach (var data in client.GetScenes("<provider>", "<farmerId>", "<boundaryId>", "<source>", DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 1234, 1234, new String[]{"<imageNames>"}, new Double[]{1234}, new String[]{"<imageFormats>"}, 1234, "<skipToken>"))
        /// {
        ///     JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        ///     Console.WriteLine(result.GetProperty("sceneDateTime").ToString());
        ///     Console.WriteLine(result.GetProperty("provider").ToString());
        ///     Console.WriteLine(result.GetProperty("source").ToString());
        ///     Console.WriteLine(result.GetProperty("imageFiles")[0].GetProperty("fileLink").ToString());
        ///     Console.WriteLine(result.GetProperty("imageFiles")[0].GetProperty("name").ToString());
        ///     Console.WriteLine(result.GetProperty("imageFiles")[0].GetProperty("imageFormat").ToString());
        ///     Console.WriteLine(result.GetProperty("imageFiles")[0].GetProperty("resolution").ToString());
        ///     Console.WriteLine(result.GetProperty("imageFormat").ToString());
        ///     Console.WriteLine(result.GetProperty("cloudCoverPercentage").ToString());
        ///     Console.WriteLine(result.GetProperty("darkPixelPercentage").ToString());
        ///     Console.WriteLine(result.GetProperty("ndviMedianValue").ToString());
        ///     Console.WriteLine(result.GetProperty("boundaryId").ToString());
        ///     Console.WriteLine(result.GetProperty("farmerId").ToString());
        ///     Console.WriteLine(result.GetProperty("id").ToString());
        ///     Console.WriteLine(result.GetProperty("eTag").ToString());
        /// }
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for one item in the pageable response.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>SceneListResponseValue</c>:
        /// <code>{
        ///   sceneDateTime: string (ISO 8601 Format), # Optional. Date-time of the scene, sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   provider: string, # Optional. Data provider of the scene.
        ///   source: string, # Optional. Data source of the scene.
        ///   imageFiles: [
        ///     {
        ///       fileLink: string, # Optional. Link of the image file.
        ///       name: string, # Required. Name of the image file.
        ///       imageFormat: &quot;TIF&quot;, # Optional. Supported image formats for scene resource.
        ///       resolution: number, # Optional. Resolution of image file in meters.
        ///     }
        ///   ], # Optional. Collection of image files.
        ///   imageFormat: &quot;TIF&quot;, # Optional. Supported image formats for scene resource.
        ///   cloudCoverPercentage: number, # Optional. Cloud cover percentage of the scene.
        ///   darkPixelPercentage: number, # Optional. Dark pixel percentage of the scene.
        ///   ndviMedianValue: number, # Optional. Median of NDVI of the scene.
        ///   boundaryId: string, # Optional. Boundary ID which belongs to the scene.
        ///   farmerId: string, # Optional. Farmer ID which belongs to the scene.
        ///   id: string, # Optional. Unique scene resource ID.
        ///   eTag: string, # Optional. The ETag value to implement optimistic concurrency.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Pageable<BinaryData> GetScenes(string provider, string farmerId, string boundaryId, string source = null, DateTimeOffset? startDateTime = null, DateTimeOffset? endDateTime = null, double? maxCloudCoveragePercentage = null, double? maxDarkPixelCoveragePercentage = null, IEnumerable<string> imageNames = null, IEnumerable<double> imageResolutions = null, IEnumerable<string> imageFormats = null, int? maxPageSize = null, string skipToken = null, RequestContext context = null)
        {
            Argument.AssertNotNull(provider, nameof(provider));
            Argument.AssertNotNull(farmerId, nameof(farmerId));
            Argument.AssertNotNull(boundaryId, nameof(boundaryId));

            return GetScenesImplementation("ScenesClient.GetScenes", provider, farmerId, boundaryId, source, startDateTime, endDateTime, maxCloudCoveragePercentage, maxDarkPixelCoveragePercentage, imageNames, imageResolutions, imageFormats, maxPageSize, skipToken, context);
        }

        private Pageable<BinaryData> GetScenesImplementation(string diagnosticsScopeName, string provider, string farmerId, string boundaryId, string source, DateTimeOffset? startDateTime, DateTimeOffset? endDateTime, double? maxCloudCoveragePercentage, double? maxDarkPixelCoveragePercentage, IEnumerable<string> imageNames, IEnumerable<double> imageResolutions, IEnumerable<string> imageFormats, int? maxPageSize, string skipToken, RequestContext context)
        {
            return PageableHelpers.CreatePageable(CreateEnumerable, ClientDiagnostics, diagnosticsScopeName);
            IEnumerable<Page<BinaryData>> CreateEnumerable(string nextLink, int? pageSizeHint)
            {
                do
                {
                    var message = string.IsNullOrEmpty(nextLink)
                        ? CreateGetScenesRequest(provider, farmerId, boundaryId, source, startDateTime, endDateTime, maxCloudCoveragePercentage, maxDarkPixelCoveragePercentage, imageNames, imageResolutions, imageFormats, maxPageSize, skipToken, context)
                        : CreateGetScenesNextPageRequest(nextLink, provider, farmerId, boundaryId, source, startDateTime, endDateTime, maxCloudCoveragePercentage, maxDarkPixelCoveragePercentage, imageNames, imageResolutions, imageFormats, maxPageSize, skipToken, context);
                    var page = LowLevelPageableHelpers.ProcessMessage(_pipeline, message, context, "value", "nextLink");
                    nextLink = page.ContinuationToken;
                    yield return page;
                } while (!string.IsNullOrEmpty(nextLink));
            }
        }

        /// <summary> Create a satellite data ingestion job. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="jobId"> JobId provided by user. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation{T}"/> from the service that will contain a <see cref="BinaryData"/> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateSatelliteDataIngestionJobAsync with required parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ScenesClient(endpoint, credential);
        /// 
        /// var data = new {
        ///     farmerId = "<SatelliteDataIngestionJobFarmerId>",
        ///     boundaryId = "<SatelliteDataIngestionJobBoundaryId>",
        ///     startDateTime = "<2022-05-10T14:57:31.2311892-04:00>",
        ///     endDateTime = "<2022-05-10T14:57:31.2311892-04:00>",
        /// };
        /// 
        /// var operation = await client.CreateSatelliteDataIngestionJobAsync(WaitUntil.Completed, "<jobId>", RequestContent.Create(data));
        /// 
        /// BinaryData data = await operation.WaitForCompletionAsync();
        /// JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        /// Console.WriteLine(result.GetProperty("farmerId").ToString());
        /// Console.WriteLine(result.GetProperty("boundaryId").ToString());
        /// Console.WriteLine(result.GetProperty("startDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("endDateTime").ToString());
        /// ]]></code>
        /// This sample shows how to call CreateSatelliteDataIngestionJobAsync with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ScenesClient(endpoint, credential);
        /// 
        /// var data = new {
        ///     farmerId = "<SatelliteDataIngestionJobFarmerId>",
        ///     boundaryId = "<SatelliteDataIngestionJobBoundaryId>",
        ///     startDateTime = "<2022-05-10T14:57:31.2311892-04:00>",
        ///     endDateTime = "<2022-05-10T14:57:31.2311892-04:00>",
        ///     provider = "<Microsoft>",
        ///     source = "<Sentinel_2_L2A>",
        ///     data = new {
        ///         imageNames = new[] {
        ///             "<SatelliteDataImageNamesItem>"
        ///         },
        ///         imageFormats = new[] {
        ///             "<SatelliteDataImageFormatsItem>"
        ///         },
        ///         imageResolutions = new[] {
        ///             1234
        ///         },
        ///     },
        ///     name = "<SatelliteDataIngestionJobName>",
        ///     description = "<SatelliteDataIngestionJobDescription>",
        ///     properties = new {
        ///         key = new {},
        ///     },
        /// };
        /// 
        /// var operation = await client.CreateSatelliteDataIngestionJobAsync(WaitUntil.Completed, "<jobId>", RequestContent.Create(data));
        /// 
        /// BinaryData data = await operation.WaitForCompletionAsync();
        /// JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        /// Console.WriteLine(result.GetProperty("farmerId").ToString());
        /// Console.WriteLine(result.GetProperty("boundaryId").ToString());
        /// Console.WriteLine(result.GetProperty("startDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("endDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("provider").ToString());
        /// Console.WriteLine(result.GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("data").GetProperty("imageNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("data").GetProperty("imageFormats")[0].ToString());
        /// Console.WriteLine(result.GetProperty("data").GetProperty("imageResolutions")[0].ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
        /// Console.WriteLine(result.GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>SatelliteDataIngestionJob</c>:
        /// <code>{
        ///   farmerId: string, # Required. Farmer ID.
        ///   boundaryId: string, # Required. The id of the boundary object for which satellite data is being fetched.
        ///   startDateTime: string (ISO 8601 Format), # Required. Start Date.
        ///   endDateTime: string (ISO 8601 Format), # Required. End Date.
        ///   provider: &quot;Microsoft&quot;, # Optional. Provider of satellite data.
        ///   source: &quot;Sentinel_2_L2A&quot;, # Optional. Source of satellite data.
        ///   data: {
        ///     imageNames: [string], # Optional. List of ImageNames.
        ///     imageFormats: [string], # Optional. List of ImageFormats. Available value: TIF.
        ///     imageResolutions: [number], # Optional. List of ImageResolutions in meters. Available values: 10, 20, 60.
        ///   }, # Optional. Data Model for SatelliteIngestionJobRequest.
        ///   id: string, # Optional. Unique job id.
        ///   status: string, # Optional. Status of the job.
        /// Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
        ///   durationInSeconds: number, # Optional. Duration of the job in seconds.
        ///   message: string, # Optional. Status message to capture more details of the job.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>SatelliteDataIngestionJob</c>:
        /// <code>{
        ///   farmerId: string, # Required. Farmer ID.
        ///   boundaryId: string, # Required. The id of the boundary object for which satellite data is being fetched.
        ///   startDateTime: string (ISO 8601 Format), # Required. Start Date.
        ///   endDateTime: string (ISO 8601 Format), # Required. End Date.
        ///   provider: &quot;Microsoft&quot;, # Optional. Provider of satellite data.
        ///   source: &quot;Sentinel_2_L2A&quot;, # Optional. Source of satellite data.
        ///   data: {
        ///     imageNames: [string], # Optional. List of ImageNames.
        ///     imageFormats: [string], # Optional. List of ImageFormats. Available value: TIF.
        ///     imageResolutions: [number], # Optional. List of ImageResolutions in meters. Available values: 10, 20, 60.
        ///   }, # Optional. Data Model for SatelliteIngestionJobRequest.
        ///   id: string, # Optional. Unique job id.
        ///   status: string, # Optional. Status of the job.
        /// Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
        ///   durationInSeconds: number, # Optional. Duration of the job in seconds.
        ///   message: string, # Optional. Status message to capture more details of the job.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Operation<BinaryData>> CreateSatelliteDataIngestionJobAsync(WaitUntil waitUntil, string jobId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

            using var scope = ClientDiagnostics.CreateScope("ScenesClient.CreateSatelliteDataIngestionJob");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateSatelliteDataIngestionJobRequest(jobId, content, context);
                return await ProtocolOperationHelpers.ProcessMessageAsync(_pipeline, message, ClientDiagnostics, "ScenesClient.CreateSatelliteDataIngestionJob", OperationFinalStateVia.Location, context, waitUntil).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary> Create a satellite data ingestion job. </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="jobId"> JobId provided by user. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="jobId"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="jobId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The <see cref="Operation{T}"/> from the service that will contain a <see cref="BinaryData"/> object once the asynchronous operation on the service has completed. Details of the body schema for the operation's final value are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call CreateSatelliteDataIngestionJob with required parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ScenesClient(endpoint, credential);
        /// 
        /// var data = new {
        ///     farmerId = "<SatelliteDataIngestionJobFarmerId>",
        ///     boundaryId = "<SatelliteDataIngestionJobBoundaryId>",
        ///     startDateTime = "<2022-05-10T14:57:31.2311892-04:00>",
        ///     endDateTime = "<2022-05-10T14:57:31.2311892-04:00>",
        /// };
        /// 
        /// var operation = client.CreateSatelliteDataIngestionJob(WaitUntil.Completed, "<jobId>", RequestContent.Create(data));
        /// 
        /// BinaryData data = operation.WaitForCompletion();
        /// JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        /// Console.WriteLine(result.GetProperty("farmerId").ToString());
        /// Console.WriteLine(result.GetProperty("boundaryId").ToString());
        /// Console.WriteLine(result.GetProperty("startDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("endDateTime").ToString());
        /// ]]></code>
        /// This sample shows how to call CreateSatelliteDataIngestionJob with all parameters and request content, and how to parse the result.
        /// <code><![CDATA[
        /// var credential = new DefaultAzureCredential();
        /// var endpoint = new Uri("<https://my-service.azure.com>");
        /// var client = new ScenesClient(endpoint, credential);
        /// 
        /// var data = new {
        ///     farmerId = "<SatelliteDataIngestionJobFarmerId>",
        ///     boundaryId = "<SatelliteDataIngestionJobBoundaryId>",
        ///     startDateTime = "<2022-05-10T14:57:31.2311892-04:00>",
        ///     endDateTime = "<2022-05-10T14:57:31.2311892-04:00>",
        ///     provider = "<Microsoft>",
        ///     source = "<Sentinel_2_L2A>",
        ///     data = new {
        ///         imageNames = new[] {
        ///             "<SatelliteDataImageNamesItem>"
        ///         },
        ///         imageFormats = new[] {
        ///             "<SatelliteDataImageFormatsItem>"
        ///         },
        ///         imageResolutions = new[] {
        ///             1234
        ///         },
        ///     },
        ///     name = "<SatelliteDataIngestionJobName>",
        ///     description = "<SatelliteDataIngestionJobDescription>",
        ///     properties = new {
        ///         key = new {},
        ///     },
        /// };
        /// 
        /// var operation = client.CreateSatelliteDataIngestionJob(WaitUntil.Completed, "<jobId>", RequestContent.Create(data));
        /// 
        /// BinaryData data = operation.WaitForCompletion();
        /// JsonElement result = JsonDocument.Parse(data.ToStream()).RootElement;
        /// Console.WriteLine(result.GetProperty("farmerId").ToString());
        /// Console.WriteLine(result.GetProperty("boundaryId").ToString());
        /// Console.WriteLine(result.GetProperty("startDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("endDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("provider").ToString());
        /// Console.WriteLine(result.GetProperty("source").ToString());
        /// Console.WriteLine(result.GetProperty("data").GetProperty("imageNames")[0].ToString());
        /// Console.WriteLine(result.GetProperty("data").GetProperty("imageFormats")[0].ToString());
        /// Console.WriteLine(result.GetProperty("data").GetProperty("imageResolutions")[0].ToString());
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("status").ToString());
        /// Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
        /// Console.WriteLine(result.GetProperty("message").ToString());
        /// Console.WriteLine(result.GetProperty("createdDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
        /// Console.WriteLine(result.GetProperty("startTime").ToString());
        /// Console.WriteLine(result.GetProperty("endTime").ToString());
        /// Console.WriteLine(result.GetProperty("name").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request and response payloads.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>SatelliteDataIngestionJob</c>:
        /// <code>{
        ///   farmerId: string, # Required. Farmer ID.
        ///   boundaryId: string, # Required. The id of the boundary object for which satellite data is being fetched.
        ///   startDateTime: string (ISO 8601 Format), # Required. Start Date.
        ///   endDateTime: string (ISO 8601 Format), # Required. End Date.
        ///   provider: &quot;Microsoft&quot;, # Optional. Provider of satellite data.
        ///   source: &quot;Sentinel_2_L2A&quot;, # Optional. Source of satellite data.
        ///   data: {
        ///     imageNames: [string], # Optional. List of ImageNames.
        ///     imageFormats: [string], # Optional. List of ImageFormats. Available value: TIF.
        ///     imageResolutions: [number], # Optional. List of ImageResolutions in meters. Available values: 10, 20, 60.
        ///   }, # Optional. Data Model for SatelliteIngestionJobRequest.
        ///   id: string, # Optional. Unique job id.
        ///   status: string, # Optional. Status of the job.
        /// Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
        ///   durationInSeconds: number, # Optional. Duration of the job in seconds.
        ///   message: string, # Optional. Status message to capture more details of the job.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
        /// }
        /// </code>
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>SatelliteDataIngestionJob</c>:
        /// <code>{
        ///   farmerId: string, # Required. Farmer ID.
        ///   boundaryId: string, # Required. The id of the boundary object for which satellite data is being fetched.
        ///   startDateTime: string (ISO 8601 Format), # Required. Start Date.
        ///   endDateTime: string (ISO 8601 Format), # Required. End Date.
        ///   provider: &quot;Microsoft&quot;, # Optional. Provider of satellite data.
        ///   source: &quot;Sentinel_2_L2A&quot;, # Optional. Source of satellite data.
        ///   data: {
        ///     imageNames: [string], # Optional. List of ImageNames.
        ///     imageFormats: [string], # Optional. List of ImageFormats. Available value: TIF.
        ///     imageResolutions: [number], # Optional. List of ImageResolutions in meters. Available values: 10, 20, 60.
        ///   }, # Optional. Data Model for SatelliteIngestionJobRequest.
        ///   id: string, # Optional. Unique job id.
        ///   status: string, # Optional. Status of the job.
        /// Possible values: &apos;Waiting&apos;, &apos;Running&apos;, &apos;Succeeded&apos;, &apos;Failed&apos;, &apos;Cancelled&apos;.
        ///   durationInSeconds: number, # Optional. Duration of the job in seconds.
        ///   message: string, # Optional. Status message to capture more details of the job.
        ///   createdDateTime: string (ISO 8601 Format), # Optional. Job created at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   lastActionDateTime: string (ISO 8601 Format), # Optional. Job was last acted upon at dateTime. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   startTime: string (ISO 8601 Format), # Optional. Job start time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   endTime: string (ISO 8601 Format), # Optional. Job end time when available. Sample format: yyyy-MM-ddTHH:mm:ssZ.
        ///   name: string, # Optional. Name to identify resource.
        ///   description: string, # Optional. Textual description of the resource.
        ///   properties: Dictionary&lt;string, AnyObject&gt;, # Optional. A collection of key value pairs that belongs to the resource.
        /// Each pair must not have a key greater than 50 characters
        /// and must not have a value greater than 150 characters.
        /// Note: A maximum of 25 key value pairs can be provided for a resource and only string and numeral values are supported.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Operation<BinaryData> CreateSatelliteDataIngestionJob(WaitUntil waitUntil, string jobId, RequestContent content, RequestContext context = null)
        {
            Argument.AssertNotNullOrEmpty(jobId, nameof(jobId));

            using var scope = ClientDiagnostics.CreateScope("ScenesClient.CreateSatelliteDataIngestionJob");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateSatelliteDataIngestionJobRequest(jobId, content, context);
                return ProtocolOperationHelpers.ProcessMessage(_pipeline, message, ClientDiagnostics, "ScenesClient.CreateSatelliteDataIngestionJob", OperationFinalStateVia.Location, context, waitUntil);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateGetScenesRequest(string provider, string farmerId, string boundaryId, string source, DateTimeOffset? startDateTime, DateTimeOffset? endDateTime, double? maxCloudCoveragePercentage, double? maxDarkPixelCoveragePercentage, IEnumerable<string> imageNames, IEnumerable<double> imageResolutions, IEnumerable<string> imageFormats, int? maxPageSize, string skipToken, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/scenes", false);
            uri.AppendQuery("provider", provider, true);
            uri.AppendQuery("farmerId", farmerId, true);
            uri.AppendQuery("boundaryId", boundaryId, true);
            if (source != null)
            {
                uri.AppendQuery("source", source, true);
            }
            if (startDateTime != null)
            {
                uri.AppendQuery("startDateTime", startDateTime.Value, "O", true);
            }
            if (endDateTime != null)
            {
                uri.AppendQuery("endDateTime", endDateTime.Value, "O", true);
            }
            if (maxCloudCoveragePercentage != null)
            {
                uri.AppendQuery("maxCloudCoveragePercentage", maxCloudCoveragePercentage.Value, true);
            }
            if (maxDarkPixelCoveragePercentage != null)
            {
                uri.AppendQuery("maxDarkPixelCoveragePercentage", maxDarkPixelCoveragePercentage.Value, true);
            }
            if (imageNames != null)
            {
                foreach (var param in imageNames)
                {
                    uri.AppendQuery("imageNames", param, true);
                }
            }
            if (imageResolutions != null)
            {
                foreach (var param in imageResolutions)
                {
                    uri.AppendQuery("imageResolutions", param, true);
                }
            }
            if (imageFormats != null)
            {
                foreach (var param in imageFormats)
                {
                    uri.AppendQuery("imageFormats", param, true);
                }
            }
            if (maxPageSize != null)
            {
                uri.AppendQuery("$maxPageSize", maxPageSize.Value, true);
            }
            if (skipToken != null)
            {
                uri.AppendQuery("$skipToken", skipToken, true);
            }
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateCreateSatelliteDataIngestionJobRequest(string jobId, RequestContent content, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier202);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/scenes/satellite/ingest-data/", false);
            uri.AppendPath(jobId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateGetSatelliteDataIngestionJobDetailsRequest(string jobId, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/scenes/satellite/ingest-data/", false);
            uri.AppendPath(jobId, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        internal HttpMessage CreateDownloadRequest(string filePath, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/scenes/downloadFiles", false);
            uri.AppendQuery("filePath", filePath, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/octet-stream, application/json");
            return message;
        }

        internal HttpMessage CreateGetScenesNextPageRequest(string nextLink, string provider, string farmerId, string boundaryId, string source, DateTimeOffset? startDateTime, DateTimeOffset? endDateTime, double? maxCloudCoveragePercentage, double? maxDarkPixelCoveragePercentage, IEnumerable<string> imageNames, IEnumerable<double> imageResolutions, IEnumerable<string> imageFormats, int? maxPageSize, string skipToken, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
        private static ResponseClassifier _responseClassifier202;
        private static ResponseClassifier ResponseClassifier202 => _responseClassifier202 ??= new StatusCodeClassifier(stackalloc ushort[] { 202 });
    }
}
