// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Verticals.AgriFood.Farming.Samples
{
    internal class Samples_Scenes
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Download()
        {
            var credential = new DefaultAzureCredential();
            var client = new FarmBeatsClient(credential).GetScenesClient("2022-11-01-preview");

            Response response = client.Download("<filePath>");
            if (response.ContentStream != null)
            {
                using (Stream outFileStream = File.OpenWrite("<filePath>"))
                {
                    response.ContentStream.CopyTo(outFileStream);
                }
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Download_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new FarmBeatsClient(credential).GetScenesClient("2022-11-01-preview");

            Response response = client.Download("<filePath>");
            if (response.ContentStream != null)
            {
                using (Stream outFileStream = File.OpenWrite("<filePath>"))
                {
                    response.ContentStream.CopyTo(outFileStream);
                }
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Download_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new FarmBeatsClient(credential).GetScenesClient("2022-11-01-preview");

            Response response = await client.DownloadAsync("<filePath>");
            if (response.ContentStream != null)
            {
                using (Stream outFileStream = File.OpenWrite("<filePath>"))
                {
                    response.ContentStream.CopyTo(outFileStream);
                }
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Download_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new FarmBeatsClient(credential).GetScenesClient("2022-11-01-preview");

            Response response = await client.DownloadAsync("<filePath>");
            if (response.ContentStream != null)
            {
                using (Stream outFileStream = File.OpenWrite("<filePath>"))
                {
                    response.ContentStream.CopyTo(outFileStream);
                }
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSatelliteDataIngestionJobDetails()
        {
            var credential = new DefaultAzureCredential();
            var client = new FarmBeatsClient(credential).GetScenesClient("2022-11-01-preview");

            Response response = client.GetSatelliteDataIngestionJobDetails("<jobId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("partyId").ToString());
            Console.WriteLine(result.GetProperty("boundaryId").ToString());
            Console.WriteLine(result.GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("endDateTime").ToString());
            Console.WriteLine(result.GetProperty("source").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSatelliteDataIngestionJobDetails_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new FarmBeatsClient(credential).GetScenesClient("2022-11-01-preview");

            Response response = client.GetSatelliteDataIngestionJobDetails("<jobId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("partyId").ToString());
            Console.WriteLine(result.GetProperty("boundaryId").ToString());
            Console.WriteLine(result.GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("endDateTime").ToString());
            Console.WriteLine(result.GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("imageNames")[0].ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("imageFormats")[0].ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("imageResolutions")[0].ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
            Console.WriteLine(result.GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errorCode").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("modifiedBy").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSatelliteDataIngestionJobDetails_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new FarmBeatsClient(credential).GetScenesClient("2022-11-01-preview");

            Response response = await client.GetSatelliteDataIngestionJobDetailsAsync("<jobId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("partyId").ToString());
            Console.WriteLine(result.GetProperty("boundaryId").ToString());
            Console.WriteLine(result.GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("endDateTime").ToString());
            Console.WriteLine(result.GetProperty("source").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSatelliteDataIngestionJobDetails_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new FarmBeatsClient(credential).GetScenesClient("2022-11-01-preview");

            Response response = await client.GetSatelliteDataIngestionJobDetailsAsync("<jobId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("partyId").ToString());
            Console.WriteLine(result.GetProperty("boundaryId").ToString());
            Console.WriteLine(result.GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("endDateTime").ToString());
            Console.WriteLine(result.GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("imageNames")[0].ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("imageFormats")[0].ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("imageResolutions")[0].ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
            Console.WriteLine(result.GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errorCode").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("modifiedBy").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SearchFeatures()
        {
            var credential = new DefaultAzureCredential();
            var client = new FarmBeatsClient(credential).GetScenesClient("2022-11-01-preview");

            var data = new
            {
                startDateTime = "2022-05-10T18:57:31.2311892Z",
                endDateTime = "2022-05-10T18:57:31.2311892Z",
            };

            Response response = client.SearchFeatures("<collectionId>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("stacVersion").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("properties").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("links")[0].GetProperty("href").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("links")[0].GetProperty("rel").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("assets").GetProperty("<test>").GetProperty("href").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_SearchFeatures_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new FarmBeatsClient(credential).GetScenesClient("2022-11-01-preview");

            var data = new
            {
                startDateTime = "2022-05-10T18:57:31.2311892Z",
                endDateTime = "2022-05-10T18:57:31.2311892Z",
                intersects = new
                {
                    coordinates = new[] {
            new[] {
                new[] {
                    new[] {
                        123.45d
                    }
                }
            }
        },
                    type = "MultiPolygon",
                },
                bbox = new[] {
        123.45d
    },
                featureIds = new[] {
        "<String>"
    },
            };

            Response response = client.SearchFeatures("<collectionId>", RequestContent.Create(data), 1234, 1234);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("stacVersion").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("stacExtensions")[0].ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("geometry").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("bbox")[0].ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("properties").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("links")[0].GetProperty("href").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("links")[0].GetProperty("rel").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("links")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("links")[0].GetProperty("title").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("assets").GetProperty("<test>").GetProperty("href").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("assets").GetProperty("<test>").GetProperty("title").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("assets").GetProperty("<test>").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("assets").GetProperty("<test>").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("assets").GetProperty("<test>").GetProperty("roles")[0].ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("collection").ToString());
            Console.WriteLine(result.GetProperty("nextLink").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SearchFeatures_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new FarmBeatsClient(credential).GetScenesClient("2022-11-01-preview");

            var data = new
            {
                startDateTime = "2022-05-10T18:57:31.2311892Z",
                endDateTime = "2022-05-10T18:57:31.2311892Z",
            };

            Response response = await client.SearchFeaturesAsync("<collectionId>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("stacVersion").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("properties").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("links")[0].GetProperty("href").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("links")[0].GetProperty("rel").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("assets").GetProperty("<test>").GetProperty("href").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_SearchFeatures_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new FarmBeatsClient(credential).GetScenesClient("2022-11-01-preview");

            var data = new
            {
                startDateTime = "2022-05-10T18:57:31.2311892Z",
                endDateTime = "2022-05-10T18:57:31.2311892Z",
                intersects = new
                {
                    coordinates = new[] {
            new[] {
                new[] {
                    new[] {
                        123.45d
                    }
                }
            }
        },
                    type = "MultiPolygon",
                },
                bbox = new[] {
        123.45d
    },
                featureIds = new[] {
        "<String>"
    },
            };

            Response response = await client.SearchFeaturesAsync("<collectionId>", RequestContent.Create(data), 1234, 1234);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("stacVersion").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("stacExtensions")[0].ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("geometry").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("bbox")[0].ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("properties").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("links")[0].GetProperty("href").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("links")[0].GetProperty("rel").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("links")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("links")[0].GetProperty("title").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("assets").GetProperty("<test>").GetProperty("href").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("assets").GetProperty("<test>").GetProperty("title").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("assets").GetProperty("<test>").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("assets").GetProperty("<test>").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("assets").GetProperty("<test>").GetProperty("roles")[0].ToString());
            Console.WriteLine(result.GetProperty("features")[0].GetProperty("collection").ToString());
            Console.WriteLine(result.GetProperty("nextLink").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetStacFeature()
        {
            var credential = new DefaultAzureCredential();
            var client = new FarmBeatsClient(credential).GetScenesClient("2022-11-01-preview");

            Response response = client.GetStacFeature("<collectionId>", "<featureId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("stacVersion").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").ToString());
            Console.WriteLine(result.GetProperty("links")[0].GetProperty("href").ToString());
            Console.WriteLine(result.GetProperty("links")[0].GetProperty("rel").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("<test>").GetProperty("href").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetStacFeature_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new FarmBeatsClient(credential).GetScenesClient("2022-11-01-preview");

            Response response = client.GetStacFeature("<collectionId>", "<featureId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("stacVersion").ToString());
            Console.WriteLine(result.GetProperty("stacExtensions")[0].ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("geometry").ToString());
            Console.WriteLine(result.GetProperty("bbox")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").ToString());
            Console.WriteLine(result.GetProperty("links")[0].GetProperty("href").ToString());
            Console.WriteLine(result.GetProperty("links")[0].GetProperty("rel").ToString());
            Console.WriteLine(result.GetProperty("links")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("links")[0].GetProperty("title").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("<test>").GetProperty("href").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("<test>").GetProperty("title").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("<test>").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("<test>").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("<test>").GetProperty("roles")[0].ToString());
            Console.WriteLine(result.GetProperty("collection").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetStacFeature_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new FarmBeatsClient(credential).GetScenesClient("2022-11-01-preview");

            Response response = await client.GetStacFeatureAsync("<collectionId>", "<featureId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("stacVersion").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("properties").ToString());
            Console.WriteLine(result.GetProperty("links")[0].GetProperty("href").ToString());
            Console.WriteLine(result.GetProperty("links")[0].GetProperty("rel").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("<test>").GetProperty("href").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetStacFeature_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new FarmBeatsClient(credential).GetScenesClient("2022-11-01-preview");

            Response response = await client.GetStacFeatureAsync("<collectionId>", "<featureId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("stacVersion").ToString());
            Console.WriteLine(result.GetProperty("stacExtensions")[0].ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("geometry").ToString());
            Console.WriteLine(result.GetProperty("bbox")[0].ToString());
            Console.WriteLine(result.GetProperty("properties").ToString());
            Console.WriteLine(result.GetProperty("links")[0].GetProperty("href").ToString());
            Console.WriteLine(result.GetProperty("links")[0].GetProperty("rel").ToString());
            Console.WriteLine(result.GetProperty("links")[0].GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("links")[0].GetProperty("title").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("<test>").GetProperty("href").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("<test>").GetProperty("title").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("<test>").GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("<test>").GetProperty("type").ToString());
            Console.WriteLine(result.GetProperty("assets").GetProperty("<test>").GetProperty("roles")[0].ToString());
            Console.WriteLine(result.GetProperty("collection").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetScenes()
        {
            var credential = new DefaultAzureCredential();
            var client = new FarmBeatsClient(credential).GetScenesClient("2022-11-01-preview");

            foreach (var item in client.GetScenes("<provider>", "<partyId>", "<boundaryId>", "<source>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetScenes_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new FarmBeatsClient(credential).GetScenesClient("2022-11-01-preview");

            foreach (var item in client.GetScenes("<provider>", "<partyId>", "<boundaryId>", "<source>", DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 3.14, 3.14, new string[] { "<imageNames>" }, new double[] { 3.14 }, new string[] { "<imageFormats>" }, 1234, "<skipToken>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("sceneDateTime").ToString());
                Console.WriteLine(result.GetProperty("provider").ToString());
                Console.WriteLine(result.GetProperty("source").ToString());
                Console.WriteLine(result.GetProperty("imageFiles")[0].GetProperty("fileLink").ToString());
                Console.WriteLine(result.GetProperty("imageFiles")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("imageFiles")[0].GetProperty("imageFormat").ToString());
                Console.WriteLine(result.GetProperty("imageFiles")[0].GetProperty("resolution").ToString());
                Console.WriteLine(result.GetProperty("imageFormat").ToString());
                Console.WriteLine(result.GetProperty("cloudCoverPercentage").ToString());
                Console.WriteLine(result.GetProperty("darkPixelPercentage").ToString());
                Console.WriteLine(result.GetProperty("ndviMedianValue").ToString());
                Console.WriteLine(result.GetProperty("boundaryId").ToString());
                Console.WriteLine(result.GetProperty("partyId").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("eTag").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetScenes_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new FarmBeatsClient(credential).GetScenesClient("2022-11-01-preview");

            await foreach (var item in client.GetScenesAsync("<provider>", "<partyId>", "<boundaryId>", "<source>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetScenes_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new FarmBeatsClient(credential).GetScenesClient("2022-11-01-preview");

            await foreach (var item in client.GetScenesAsync("<provider>", "<partyId>", "<boundaryId>", "<source>", DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 3.14, 3.14, new string[] { "<imageNames>" }, new double[] { 3.14 }, new string[] { "<imageFormats>" }, 1234, "<skipToken>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("sceneDateTime").ToString());
                Console.WriteLine(result.GetProperty("provider").ToString());
                Console.WriteLine(result.GetProperty("source").ToString());
                Console.WriteLine(result.GetProperty("imageFiles")[0].GetProperty("fileLink").ToString());
                Console.WriteLine(result.GetProperty("imageFiles")[0].GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("imageFiles")[0].GetProperty("imageFormat").ToString());
                Console.WriteLine(result.GetProperty("imageFiles")[0].GetProperty("resolution").ToString());
                Console.WriteLine(result.GetProperty("imageFormat").ToString());
                Console.WriteLine(result.GetProperty("cloudCoverPercentage").ToString());
                Console.WriteLine(result.GetProperty("darkPixelPercentage").ToString());
                Console.WriteLine(result.GetProperty("ndviMedianValue").ToString());
                Console.WriteLine(result.GetProperty("boundaryId").ToString());
                Console.WriteLine(result.GetProperty("partyId").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("eTag").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateSatelliteDataIngestionJob()
        {
            var credential = new DefaultAzureCredential();
            var client = new FarmBeatsClient(credential).GetScenesClient("2022-11-01-preview");

            var data = new
            {
                partyId = "<partyId>",
                boundaryId = "<boundaryId>",
                startDateTime = "2022-05-10T18:57:31.2311892Z",
                endDateTime = "2022-05-10T18:57:31.2311892Z",
                source = "Sentinel_2_L2A",
            };

            var operation = client.CreateSatelliteDataIngestionJob(WaitUntil.Completed, "<jobId>", RequestContent.Create(data));

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("partyId").ToString());
            Console.WriteLine(result.GetProperty("boundaryId").ToString());
            Console.WriteLine(result.GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("endDateTime").ToString());
            Console.WriteLine(result.GetProperty("source").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateSatelliteDataIngestionJob_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new FarmBeatsClient(credential).GetScenesClient("2022-11-01-preview");

            var data = new
            {
                partyId = "<partyId>",
                boundaryId = "<boundaryId>",
                startDateTime = "2022-05-10T18:57:31.2311892Z",
                endDateTime = "2022-05-10T18:57:31.2311892Z",
                provider = "Microsoft",
                source = "Sentinel_2_L2A",
                data = new
                {
                    imageNames = new[] {
            "<String>"
        },
                    imageFormats = new[] {
            "<String>"
        },
                    imageResolutions = new[] {
            123.45d
        },
                },
                name = "<name>",
                description = "<description>",
                properties = new
                {
                    key = new { },
                },
            };

            var operation = client.CreateSatelliteDataIngestionJob(WaitUntil.Completed, "<jobId>", RequestContent.Create(data));

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("partyId").ToString());
            Console.WriteLine(result.GetProperty("boundaryId").ToString());
            Console.WriteLine(result.GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("endDateTime").ToString());
            Console.WriteLine(result.GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("imageNames")[0].ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("imageFormats")[0].ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("imageResolutions")[0].ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
            Console.WriteLine(result.GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errorCode").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("modifiedBy").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateSatelliteDataIngestionJob_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new FarmBeatsClient(credential).GetScenesClient("2022-11-01-preview");

            var data = new
            {
                partyId = "<partyId>",
                boundaryId = "<boundaryId>",
                startDateTime = "2022-05-10T18:57:31.2311892Z",
                endDateTime = "2022-05-10T18:57:31.2311892Z",
                source = "Sentinel_2_L2A",
            };

            var operation = await client.CreateSatelliteDataIngestionJobAsync(WaitUntil.Completed, "<jobId>", RequestContent.Create(data));

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("partyId").ToString());
            Console.WriteLine(result.GetProperty("boundaryId").ToString());
            Console.WriteLine(result.GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("endDateTime").ToString());
            Console.WriteLine(result.GetProperty("source").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateSatelliteDataIngestionJob_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new FarmBeatsClient(credential).GetScenesClient("2022-11-01-preview");

            var data = new
            {
                partyId = "<partyId>",
                boundaryId = "<boundaryId>",
                startDateTime = "2022-05-10T18:57:31.2311892Z",
                endDateTime = "2022-05-10T18:57:31.2311892Z",
                provider = "Microsoft",
                source = "Sentinel_2_L2A",
                data = new
                {
                    imageNames = new[] {
            "<String>"
        },
                    imageFormats = new[] {
            "<String>"
        },
                    imageResolutions = new[] {
            123.45d
        },
                },
                name = "<name>",
                description = "<description>",
                properties = new
                {
                    key = new { },
                },
            };

            var operation = await client.CreateSatelliteDataIngestionJobAsync(WaitUntil.Completed, "<jobId>", RequestContent.Create(data));

            BinaryData responseData = operation.Value;
            JsonElement result = JsonDocument.Parse(responseData.ToStream()).RootElement;
            Console.WriteLine(result.GetProperty("partyId").ToString());
            Console.WriteLine(result.GetProperty("boundaryId").ToString());
            Console.WriteLine(result.GetProperty("startDateTime").ToString());
            Console.WriteLine(result.GetProperty("endDateTime").ToString());
            Console.WriteLine(result.GetProperty("provider").ToString());
            Console.WriteLine(result.GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("imageNames")[0].ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("imageFormats")[0].ToString());
            Console.WriteLine(result.GetProperty("data").GetProperty("imageResolutions")[0].ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("durationInSeconds").ToString());
            Console.WriteLine(result.GetProperty("message").ToString());
            Console.WriteLine(result.GetProperty("errorCode").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("startTime").ToString());
            Console.WriteLine(result.GetProperty("endTime").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("modifiedBy").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
        }
    }
}
