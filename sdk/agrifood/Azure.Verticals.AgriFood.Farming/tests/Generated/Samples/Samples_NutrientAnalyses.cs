// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Verticals.AgriFood.Farming.Samples
{
    internal class Samples_NutrientAnalyses
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetNutrientAnalysis()
        {
            var credential = new DefaultAzureCredential();
            var client = new FarmBeatsClient(credential).GetNutrientAnalysesClient("2022-11-01-preview");

            Response response = client.GetNutrientAnalysis("<partyId>", "<nutrientAnalysisId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetNutrientAnalysis_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new FarmBeatsClient(credential).GetNutrientAnalysesClient("2022-11-01-preview");

            Response response = client.GetNutrientAnalysis("<partyId>", "<nutrientAnalysisId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("partyId").ToString());
            Console.WriteLine(result.GetProperty("parentId").ToString());
            Console.WriteLine(result.GetProperty("parentType").ToString());
            Console.WriteLine(result.GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("referenceValueLow").ToString());
            Console.WriteLine(result.GetProperty("referenceValueHigh").ToString());
            Console.WriteLine(result.GetProperty("classification").ToString());
            Console.WriteLine(result.GetProperty("recommendation").ToString());
            Console.WriteLine(result.GetProperty("products")[0].GetProperty("rate").ToString());
            Console.WriteLine(result.GetProperty("products")[0].GetProperty("instruction").ToString());
            Console.WriteLine(result.GetProperty("products")[0].GetProperty("product").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("eTag").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
            Console.WriteLine(result.GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("modifiedBy").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetNutrientAnalysis_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new FarmBeatsClient(credential).GetNutrientAnalysesClient("2022-11-01-preview");

            Response response = await client.GetNutrientAnalysisAsync("<partyId>", "<nutrientAnalysisId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetNutrientAnalysis_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new FarmBeatsClient(credential).GetNutrientAnalysesClient("2022-11-01-preview");

            Response response = await client.GetNutrientAnalysisAsync("<partyId>", "<nutrientAnalysisId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("partyId").ToString());
            Console.WriteLine(result.GetProperty("parentId").ToString());
            Console.WriteLine(result.GetProperty("parentType").ToString());
            Console.WriteLine(result.GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("referenceValueLow").ToString());
            Console.WriteLine(result.GetProperty("referenceValueHigh").ToString());
            Console.WriteLine(result.GetProperty("classification").ToString());
            Console.WriteLine(result.GetProperty("recommendation").ToString());
            Console.WriteLine(result.GetProperty("products")[0].GetProperty("rate").ToString());
            Console.WriteLine(result.GetProperty("products")[0].GetProperty("instruction").ToString());
            Console.WriteLine(result.GetProperty("products")[0].GetProperty("product").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("eTag").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
            Console.WriteLine(result.GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("modifiedBy").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrUpdate()
        {
            var credential = new DefaultAzureCredential();
            var client = new FarmBeatsClient(credential).GetNutrientAnalysesClient("2022-11-01-preview");

            var data = new { };

            Response response = client.CreateOrUpdate("<partyId>", "<nutrientAnalysisId>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_CreateOrUpdate_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new FarmBeatsClient(credential).GetNutrientAnalysesClient("2022-11-01-preview");

            var data = new
            {
                parentId = "<parentId>",
                parentType = "PlantTissueAnalysis",
                unit = "<unit>",
                value = 123.45d,
                referenceValueLow = 123.45d,
                referenceValueHigh = 123.45d,
                classification = "<classification>",
                recommendation = "<recommendation>",
                products = new[] {
        new {
            rate = "<rate>",
            instruction = "<instruction>",
            product = "<product>",
        }
    },
                status = "<status>",
                source = "<source>",
                name = "<name>",
                description = "<description>",
                properties = new
                {
                    key = new { },
                },
            };

            Response response = client.CreateOrUpdate("<partyId>", "<nutrientAnalysisId>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("partyId").ToString());
            Console.WriteLine(result.GetProperty("parentId").ToString());
            Console.WriteLine(result.GetProperty("parentType").ToString());
            Console.WriteLine(result.GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("referenceValueLow").ToString());
            Console.WriteLine(result.GetProperty("referenceValueHigh").ToString());
            Console.WriteLine(result.GetProperty("classification").ToString());
            Console.WriteLine(result.GetProperty("recommendation").ToString());
            Console.WriteLine(result.GetProperty("products")[0].GetProperty("rate").ToString());
            Console.WriteLine(result.GetProperty("products")[0].GetProperty("instruction").ToString());
            Console.WriteLine(result.GetProperty("products")[0].GetProperty("product").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("eTag").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
            Console.WriteLine(result.GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("modifiedBy").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrUpdate_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new FarmBeatsClient(credential).GetNutrientAnalysesClient("2022-11-01-preview");

            var data = new { };

            Response response = await client.CreateOrUpdateAsync("<partyId>", "<nutrientAnalysisId>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_CreateOrUpdate_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new FarmBeatsClient(credential).GetNutrientAnalysesClient("2022-11-01-preview");

            var data = new
            {
                parentId = "<parentId>",
                parentType = "PlantTissueAnalysis",
                unit = "<unit>",
                value = 123.45d,
                referenceValueLow = 123.45d,
                referenceValueHigh = 123.45d,
                classification = "<classification>",
                recommendation = "<recommendation>",
                products = new[] {
        new {
            rate = "<rate>",
            instruction = "<instruction>",
            product = "<product>",
        }
    },
                status = "<status>",
                source = "<source>",
                name = "<name>",
                description = "<description>",
                properties = new
                {
                    key = new { },
                },
            };

            Response response = await client.CreateOrUpdateAsync("<partyId>", "<nutrientAnalysisId>", RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("partyId").ToString());
            Console.WriteLine(result.GetProperty("parentId").ToString());
            Console.WriteLine(result.GetProperty("parentType").ToString());
            Console.WriteLine(result.GetProperty("unit").ToString());
            Console.WriteLine(result.GetProperty("value").ToString());
            Console.WriteLine(result.GetProperty("referenceValueLow").ToString());
            Console.WriteLine(result.GetProperty("referenceValueHigh").ToString());
            Console.WriteLine(result.GetProperty("classification").ToString());
            Console.WriteLine(result.GetProperty("recommendation").ToString());
            Console.WriteLine(result.GetProperty("products")[0].GetProperty("rate").ToString());
            Console.WriteLine(result.GetProperty("products")[0].GetProperty("instruction").ToString());
            Console.WriteLine(result.GetProperty("products")[0].GetProperty("product").ToString());
            Console.WriteLine(result.GetProperty("id").ToString());
            Console.WriteLine(result.GetProperty("eTag").ToString());
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
            Console.WriteLine(result.GetProperty("source").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("description").ToString());
            Console.WriteLine(result.GetProperty("createdBy").ToString());
            Console.WriteLine(result.GetProperty("modifiedBy").ToString());
            Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Delete()
        {
            var credential = new DefaultAzureCredential();
            var client = new FarmBeatsClient(credential).GetNutrientAnalysesClient("2022-11-01-preview");

            Response response = client.Delete("<partyId>", "<nutrientAnalysisId>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Delete_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new FarmBeatsClient(credential).GetNutrientAnalysesClient("2022-11-01-preview");

            Response response = client.Delete("<partyId>", "<nutrientAnalysisId>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Delete_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new FarmBeatsClient(credential).GetNutrientAnalysesClient("2022-11-01-preview");

            Response response = await client.DeleteAsync("<partyId>", "<nutrientAnalysisId>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Delete_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new FarmBeatsClient(credential).GetNutrientAnalysesClient("2022-11-01-preview");

            Response response = await client.DeleteAsync("<partyId>", "<nutrientAnalysisId>");
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetNutrientAnalyses()
        {
            var credential = new DefaultAzureCredential();
            var client = new FarmBeatsClient(credential).GetNutrientAnalysesClient("2022-11-01-preview");

            foreach (var item in client.GetNutrientAnalyses())
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetNutrientAnalyses_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new FarmBeatsClient(credential).GetNutrientAnalysesClient("2022-11-01-preview");

            foreach (var item in client.GetNutrientAnalyses("<parentType>", new string[] { "<parentIds>" }, new string[] { "<classifications>" }, new string[] { "<ids>" }, new string[] { "<names>" }, new string[] { "<propertyFilters>" }, new string[] { "<statuses>" }, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 1234, "<skipToken>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("partyId").ToString());
                Console.WriteLine(result.GetProperty("parentId").ToString());
                Console.WriteLine(result.GetProperty("parentType").ToString());
                Console.WriteLine(result.GetProperty("unit").ToString());
                Console.WriteLine(result.GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("referenceValueLow").ToString());
                Console.WriteLine(result.GetProperty("referenceValueHigh").ToString());
                Console.WriteLine(result.GetProperty("classification").ToString());
                Console.WriteLine(result.GetProperty("recommendation").ToString());
                Console.WriteLine(result.GetProperty("products")[0].GetProperty("rate").ToString());
                Console.WriteLine(result.GetProperty("products")[0].GetProperty("instruction").ToString());
                Console.WriteLine(result.GetProperty("products")[0].GetProperty("product").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("eTag").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("createdDateTime").ToString());
                Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
                Console.WriteLine(result.GetProperty("source").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("createdBy").ToString());
                Console.WriteLine(result.GetProperty("modifiedBy").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetNutrientAnalyses_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new FarmBeatsClient(credential).GetNutrientAnalysesClient("2022-11-01-preview");

            await foreach (var item in client.GetNutrientAnalysesAsync())
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetNutrientAnalyses_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new FarmBeatsClient(credential).GetNutrientAnalysesClient("2022-11-01-preview");

            await foreach (var item in client.GetNutrientAnalysesAsync("<parentType>", new string[] { "<parentIds>" }, new string[] { "<classifications>" }, new string[] { "<ids>" }, new string[] { "<names>" }, new string[] { "<propertyFilters>" }, new string[] { "<statuses>" }, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 1234, "<skipToken>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("partyId").ToString());
                Console.WriteLine(result.GetProperty("parentId").ToString());
                Console.WriteLine(result.GetProperty("parentType").ToString());
                Console.WriteLine(result.GetProperty("unit").ToString());
                Console.WriteLine(result.GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("referenceValueLow").ToString());
                Console.WriteLine(result.GetProperty("referenceValueHigh").ToString());
                Console.WriteLine(result.GetProperty("classification").ToString());
                Console.WriteLine(result.GetProperty("recommendation").ToString());
                Console.WriteLine(result.GetProperty("products")[0].GetProperty("rate").ToString());
                Console.WriteLine(result.GetProperty("products")[0].GetProperty("instruction").ToString());
                Console.WriteLine(result.GetProperty("products")[0].GetProperty("product").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("eTag").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("createdDateTime").ToString());
                Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
                Console.WriteLine(result.GetProperty("source").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("createdBy").ToString());
                Console.WriteLine(result.GetProperty("modifiedBy").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetNutrientAnalysesByPartyId()
        {
            var credential = new DefaultAzureCredential();
            var client = new FarmBeatsClient(credential).GetNutrientAnalysesClient("2022-11-01-preview");

            foreach (var item in client.GetNutrientAnalysesByPartyId("<partyId>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetNutrientAnalysesByPartyId_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new FarmBeatsClient(credential).GetNutrientAnalysesClient("2022-11-01-preview");

            foreach (var item in client.GetNutrientAnalysesByPartyId("<partyId>", "<parentType>", new string[] { "<parentIds>" }, new string[] { "<classifications>" }, new string[] { "<ids>" }, new string[] { "<names>" }, new string[] { "<propertyFilters>" }, new string[] { "<statuses>" }, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 1234, "<skipToken>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("partyId").ToString());
                Console.WriteLine(result.GetProperty("parentId").ToString());
                Console.WriteLine(result.GetProperty("parentType").ToString());
                Console.WriteLine(result.GetProperty("unit").ToString());
                Console.WriteLine(result.GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("referenceValueLow").ToString());
                Console.WriteLine(result.GetProperty("referenceValueHigh").ToString());
                Console.WriteLine(result.GetProperty("classification").ToString());
                Console.WriteLine(result.GetProperty("recommendation").ToString());
                Console.WriteLine(result.GetProperty("products")[0].GetProperty("rate").ToString());
                Console.WriteLine(result.GetProperty("products")[0].GetProperty("instruction").ToString());
                Console.WriteLine(result.GetProperty("products")[0].GetProperty("product").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("eTag").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("createdDateTime").ToString());
                Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
                Console.WriteLine(result.GetProperty("source").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("createdBy").ToString());
                Console.WriteLine(result.GetProperty("modifiedBy").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetNutrientAnalysesByPartyId_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new FarmBeatsClient(credential).GetNutrientAnalysesClient("2022-11-01-preview");

            await foreach (var item in client.GetNutrientAnalysesByPartyIdAsync("<partyId>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.ToString());
            }
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetNutrientAnalysesByPartyId_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new FarmBeatsClient(credential).GetNutrientAnalysesClient("2022-11-01-preview");

            await foreach (var item in client.GetNutrientAnalysesByPartyIdAsync("<partyId>", "<parentType>", new string[] { "<parentIds>" }, new string[] { "<classifications>" }, new string[] { "<ids>" }, new string[] { "<names>" }, new string[] { "<propertyFilters>" }, new string[] { "<statuses>" }, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, 1234, "<skipToken>"))
            {
                JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
                Console.WriteLine(result.GetProperty("partyId").ToString());
                Console.WriteLine(result.GetProperty("parentId").ToString());
                Console.WriteLine(result.GetProperty("parentType").ToString());
                Console.WriteLine(result.GetProperty("unit").ToString());
                Console.WriteLine(result.GetProperty("value").ToString());
                Console.WriteLine(result.GetProperty("referenceValueLow").ToString());
                Console.WriteLine(result.GetProperty("referenceValueHigh").ToString());
                Console.WriteLine(result.GetProperty("classification").ToString());
                Console.WriteLine(result.GetProperty("recommendation").ToString());
                Console.WriteLine(result.GetProperty("products")[0].GetProperty("rate").ToString());
                Console.WriteLine(result.GetProperty("products")[0].GetProperty("instruction").ToString());
                Console.WriteLine(result.GetProperty("products")[0].GetProperty("product").ToString());
                Console.WriteLine(result.GetProperty("id").ToString());
                Console.WriteLine(result.GetProperty("eTag").ToString());
                Console.WriteLine(result.GetProperty("status").ToString());
                Console.WriteLine(result.GetProperty("createdDateTime").ToString());
                Console.WriteLine(result.GetProperty("modifiedDateTime").ToString());
                Console.WriteLine(result.GetProperty("source").ToString());
                Console.WriteLine(result.GetProperty("name").ToString());
                Console.WriteLine(result.GetProperty("description").ToString());
                Console.WriteLine(result.GetProperty("createdBy").ToString());
                Console.WriteLine(result.GetProperty("modifiedBy").ToString());
                Console.WriteLine(result.GetProperty("properties").GetProperty("<test>").ToString());
            }
        }
    }
}
