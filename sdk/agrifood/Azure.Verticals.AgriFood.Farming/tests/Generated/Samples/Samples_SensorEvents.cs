// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Verticals.AgriFood.Farming.Samples
{
    internal class Samples_SensorEvents
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSensorEvents()
        {
            var credential = new DefaultAzureCredential();
            var client = new FarmBeatsClient(credential).GetSensorEventsClient("2022-11-01-preview");

            Response response = client.GetSensorEvents("<sensorId>", "<sensorPartnerId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_GetSensorEvents_AllParameters()
        {
            var credential = new DefaultAzureCredential();
            var client = new FarmBeatsClient(credential).GetSensorEventsClient("2022-11-01-preview");

            Response response = client.GetSensorEvents("<sensorId>", "<sensorPartnerId>", DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, true, new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("sensorId").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("sensorPartnerId").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("partyId").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("boundaryId").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("eventDateTime").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("ingestionDateTime").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("measures").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("skipToken").ToString());
            Console.WriteLine(result.GetProperty("nextLink").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSensorEvents_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new FarmBeatsClient(credential).GetSensorEventsClient("2022-11-01-preview");

            Response response = await client.GetSensorEventsAsync("<sensorId>", "<sensorPartnerId>");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_GetSensorEvents_AllParameters_Async()
        {
            var credential = new DefaultAzureCredential();
            var client = new FarmBeatsClient(credential).GetSensorEventsClient("2022-11-01-preview");

            Response response = await client.GetSensorEventsAsync("<sensorId>", "<sensorPartnerId>", DateTimeOffset.UtcNow, DateTimeOffset.UtcNow, true, new RequestContext());

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("sensorId").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("sensorPartnerId").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("partyId").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("boundaryId").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("eventDateTime").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("ingestionDateTime").ToString());
            Console.WriteLine(result.GetProperty("value")[0].GetProperty("measures").GetProperty("<test>").ToString());
            Console.WriteLine(result.GetProperty("skipToken").ToString());
            Console.WriteLine(result.GetProperty("nextLink").ToString());
        }
    }
}
