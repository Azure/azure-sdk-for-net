// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Verticals.AgriFood.Farming.Tests
{
    public partial class WeatherTests : VerticalsAgriFoodFarmingTestBase
    {
        public WeatherTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetDataDeleteJobDetails_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Weather client = CreateFarmBeatsClient(endpoint, credential).GetWeatherClient();

            Response response = await client.GetDataDeleteJobDetailsAsync("<jobId>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetDataDeleteJobDetails_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Weather client = CreateFarmBeatsClient(endpoint, credential).GetWeatherClient();

            Response response = await client.GetDataDeleteJobDetailsAsync("<jobId>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetDataIngestionJobDetails_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Weather client = CreateFarmBeatsClient(endpoint, credential).GetWeatherClient();

            Response response = await client.GetDataIngestionJobDetailsAsync("<jobId>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetDataIngestionJobDetails_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Weather client = CreateFarmBeatsClient(endpoint, credential).GetWeatherClient();

            Response response = await client.GetDataIngestionJobDetailsAsync("<jobId>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetWeathers_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Weather client = CreateFarmBeatsClient(endpoint, credential).GetWeatherClient();

            await foreach (BinaryData item in client.GetWeathersAsync("<partyId>", "<boundaryId>", "<extensionId>", "<weatherDataType>", "<granularity>", null, null, null, null, null))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetWeathers_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Weather client = CreateFarmBeatsClient(endpoint, credential).GetWeatherClient();

            await foreach (BinaryData item in client.GetWeathersAsync("<partyId>", "<boundaryId>", "<extensionId>", "<weatherDataType>", "<granularity>", DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), 1234, "<skipToken>", null))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CreateDataDeleteJob_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Weather client = CreateFarmBeatsClient(endpoint, credential).GetWeatherClient();

            using RequestContent content = RequestContent.Create(new
            {
                extensionId = "<extensionId>",
                partyId = "<partyId>",
                boundaryId = "<boundaryId>",
            });
            Operation<BinaryData> operation = await client.CreateDataDeleteJobAsync(WaitUntil.Completed, "<jobId>", content);
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CreateDataDeleteJob_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Weather client = CreateFarmBeatsClient(endpoint, credential).GetWeatherClient();

            using RequestContent content = RequestContent.Create(new
            {
                extensionId = "<extensionId>",
                partyId = "<partyId>",
                boundaryId = "<boundaryId>",
                weatherDataType = "<weatherDataType>",
                granularity = "<granularity>",
                startDateTime = "2022-05-10T18:57:31.2311892Z",
                endDateTime = "2022-05-10T18:57:31.2311892Z",
                name = "<name>",
                description = "<description>",
                properties = new
                {
                    key = new object(),
                },
            });
            Operation<BinaryData> operation = await client.CreateDataDeleteJobAsync(WaitUntil.Completed, "<jobId>", content);
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CreateDataIngestionJob_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Weather client = CreateFarmBeatsClient(endpoint, credential).GetWeatherClient();

            using RequestContent content = RequestContent.Create(new
            {
                boundaryId = "<boundaryId>",
                partyId = "<partyId>",
                extensionId = "<extensionId>",
                extensionApiName = "<extensionApiName>",
                extensionApiInput = new
                {
                    key = new object(),
                },
            });
            Operation<BinaryData> operation = await client.CreateDataIngestionJobAsync(WaitUntil.Completed, "<jobId>", content);
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CreateDataIngestionJob_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Weather client = CreateFarmBeatsClient(endpoint, credential).GetWeatherClient();

            using RequestContent content = RequestContent.Create(new
            {
                boundaryId = "<boundaryId>",
                partyId = "<partyId>",
                extensionId = "<extensionId>",
                extensionApiName = "<extensionApiName>",
                extensionApiInput = new
                {
                    key = new object(),
                },
                extensionDataProviderAppId = "<extensionDataProviderAppId>",
                extensionDataProviderApiKey = "<extensionDataProviderApiKey>",
                name = "<name>",
                description = "<description>",
                properties = new
                {
                    key = new object(),
                },
            });
            Operation<BinaryData> operation = await client.CreateDataIngestionJobAsync(WaitUntil.Completed, "<jobId>", content);
            BinaryData responseData = operation.Value;
        }
    }
}
