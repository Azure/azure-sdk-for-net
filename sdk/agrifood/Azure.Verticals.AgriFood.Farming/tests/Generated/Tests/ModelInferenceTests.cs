// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Verticals.AgriFood.Farming.Tests
{
    public partial class ModelInferenceTests : VerticalsAgriFoodFarmingTestBase
    {
        public ModelInferenceTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetBiomassModelJob_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            ModelInference client = CreateFarmBeatsClient(endpoint, credential).GetModelInferenceClient();

            Response response = await client.GetBiomassModelJobAsync("<jobId>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetBiomassModelJob_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            ModelInference client = CreateFarmBeatsClient(endpoint, credential).GetModelInferenceClient();

            Response response = await client.GetBiomassModelJobAsync("<jobId>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetSensorPlacementModelJob_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            ModelInference client = CreateFarmBeatsClient(endpoint, credential).GetModelInferenceClient();

            Response response = await client.GetSensorPlacementModelJobAsync("<jobId>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetSensorPlacementModelJob_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            ModelInference client = CreateFarmBeatsClient(endpoint, credential).GetModelInferenceClient();

            Response response = await client.GetSensorPlacementModelJobAsync("<jobId>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetSoilMoistureModelJob_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            ModelInference client = CreateFarmBeatsClient(endpoint, credential).GetModelInferenceClient();

            Response response = await client.GetSoilMoistureModelJobAsync("<jobId>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetSoilMoistureModelJob_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            ModelInference client = CreateFarmBeatsClient(endpoint, credential).GetModelInferenceClient();

            Response response = await client.GetSoilMoistureModelJobAsync("<jobId>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CreateBiomassModelJob_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            ModelInference client = CreateFarmBeatsClient(endpoint, credential).GetModelInferenceClient();

            using RequestContent content = RequestContent.Create(new
            {
                partyId = "<partyId>",
                boundaryId = "<boundaryId>",
                modelVersion = "<modelVersion>",
                cropName = "Corn",
                plantingStartDateTime = "2022-05-10T18:57:31.2311892Z",
                inferenceEndDateTime = "2022-05-10T18:57:31.2311892Z",
                weatherExtensionId = "<weatherExtensionId>",
                satelliteProvider = "Microsoft",
                satelliteSource = "Sentinel_2_L2A",
                imageResolution = 123.45,
                imageFormat = "TIF",
            });
            Operation<BinaryData> operation = await client.CreateBiomassModelJobAsync(WaitUntil.Completed, "<jobId>", content);
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CreateBiomassModelJob_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            ModelInference client = CreateFarmBeatsClient(endpoint, credential).GetModelInferenceClient();

            using RequestContent content = RequestContent.Create(new
            {
                partyId = "<partyId>",
                boundaryId = "<boundaryId>",
                modelVersion = "<modelVersion>",
                cropName = "Corn",
                plantingStartDateTime = "2022-05-10T18:57:31.2311892Z",
                inferenceEndDateTime = "2022-05-10T18:57:31.2311892Z",
                weatherExtensionId = "<weatherExtensionId>",
                satelliteProvider = "Microsoft",
                satelliteSource = "Sentinel_2_L2A",
                imageResolution = 123.45,
                imageFormat = "TIF",
                name = "<name>",
                description = "<description>",
                properties = new
                {
                    key = new object(),
                },
            });
            Operation<BinaryData> operation = await client.CreateBiomassModelJobAsync(WaitUntil.Completed, "<jobId>", content);
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CreateSensorPlacementModelJob_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            ModelInference client = CreateFarmBeatsClient(endpoint, credential).GetModelInferenceClient();

            using RequestContent content = RequestContent.Create(new
            {
                partyId = "<partyId>",
                boundaryId = "<boundaryId>",
                modelVersion = "<modelVersion>",
                inferenceStartDateTime = "2022-05-10T18:57:31.2311892Z",
                inferenceEndDateTime = "2022-05-10T18:57:31.2311892Z",
                satelliteProvider = "Microsoft",
                satelliteSource = "Sentinel_2_L2A",
                sensorType = "<sensorType>",
                isRanked = true,
            });
            Operation<BinaryData> operation = await client.CreateSensorPlacementModelJobAsync(WaitUntil.Completed, "<jobId>", content);
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CreateSensorPlacementModelJob_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            ModelInference client = CreateFarmBeatsClient(endpoint, credential).GetModelInferenceClient();

            using RequestContent content = RequestContent.Create(new
            {
                partyId = "<partyId>",
                boundaryId = "<boundaryId>",
                modelVersion = "<modelVersion>",
                inferenceStartDateTime = "2022-05-10T18:57:31.2311892Z",
                inferenceEndDateTime = "2022-05-10T18:57:31.2311892Z",
                satelliteProvider = "Microsoft",
                satelliteSource = "Sentinel_2_L2A",
                sensorType = "<sensorType>",
                isRanked = true,
                name = "<name>",
                description = "<description>",
                properties = new
                {
                    key = new object(),
                },
            });
            Operation<BinaryData> operation = await client.CreateSensorPlacementModelJobAsync(WaitUntil.Completed, "<jobId>", content);
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CreateSoilMoistureModelJob_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            ModelInference client = CreateFarmBeatsClient(endpoint, credential).GetModelInferenceClient();

            using RequestContent content = RequestContent.Create(new
            {
                partyId = "<partyId>",
                boundaryId = "<boundaryId>",
                sensorDataModelId = "<sensorDataModelId>",
                sensorPartnerId = "<sensorPartnerId>",
                inferenceStartDateTime = "2022-05-10T18:57:31.2311892Z",
                inferenceEndDateTime = "2022-05-10T18:57:31.2311892Z",
                satelliteProvider = "Microsoft",
                satelliteSource = "Sentinel_2_L2A",
                imageResolution = 123.45,
                imageFormat = "TIF",
                modelVersion = "<modelVersion>",
                sensorDefinition = new
                {
                    sensorMeasurement = "<sensorMeasurement>",
                    minProperty = "<minProperty>",
                    maxProperty = "<maxProperty>",
                },
            });
            Operation<BinaryData> operation = await client.CreateSoilMoistureModelJobAsync(WaitUntil.Completed, "<jobId>", content);
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CreateSoilMoistureModelJob_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            ModelInference client = CreateFarmBeatsClient(endpoint, credential).GetModelInferenceClient();

            using RequestContent content = RequestContent.Create(new
            {
                partyId = "<partyId>",
                boundaryId = "<boundaryId>",
                sensorDataModelId = "<sensorDataModelId>",
                sensorPartnerId = "<sensorPartnerId>",
                inferenceStartDateTime = "2022-05-10T18:57:31.2311892Z",
                inferenceEndDateTime = "2022-05-10T18:57:31.2311892Z",
                satelliteProvider = "Microsoft",
                satelliteSource = "Sentinel_2_L2A",
                imageResolution = 123.45,
                imageFormat = "TIF",
                modelVersion = "<modelVersion>",
                sensorDefinition = new
                {
                    sensorMeasurement = "<sensorMeasurement>",
                    minProperty = "<minProperty>",
                    maxProperty = "<maxProperty>",
                },
                name = "<name>",
                description = "<description>",
                properties = new
                {
                    key = new object(),
                },
            });
            Operation<BinaryData> operation = await client.CreateSoilMoistureModelJobAsync(WaitUntil.Completed, "<jobId>", content);
            BinaryData responseData = operation.Value;
        }
    }
}
