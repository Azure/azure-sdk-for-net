// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Verticals.AgriFood.Farming.Tests
{
    public partial class SensorPartnerIntegrationsTests : VerticalsAgriFoodFarmingTestBase
    {
        public SensorPartnerIntegrationsTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CreateOrUpdate_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SensorPartnerIntegrations client = CreateFarmBeatsClient(endpoint, credential).GetSensorPartnerIntegrationsClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.CreateOrUpdateAsync("<sensorPartnerId>", "<integrationId>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CreateOrUpdate_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SensorPartnerIntegrations client = CreateFarmBeatsClient(endpoint, credential).GetSensorPartnerIntegrationsClient();

            using RequestContent content = RequestContent.Create(new
            {
                partyId = "<partyId>",
                status = "<status>",
                name = "<name>",
                description = "<description>",
                properties = new
                {
                    key = new object(),
                },
            });
            Response response = await client.CreateOrUpdateAsync("<sensorPartnerId>", "<integrationId>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetSensorPartnerIntegration_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SensorPartnerIntegrations client = CreateFarmBeatsClient(endpoint, credential).GetSensorPartnerIntegrationsClient();

            Response response = await client.GetSensorPartnerIntegrationAsync("<sensorPartnerId>", "<integrationId>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetSensorPartnerIntegration_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SensorPartnerIntegrations client = CreateFarmBeatsClient(endpoint, credential).GetSensorPartnerIntegrationsClient();

            Response response = await client.GetSensorPartnerIntegrationAsync("<sensorPartnerId>", "<integrationId>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Delete_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SensorPartnerIntegrations client = CreateFarmBeatsClient(endpoint, credential).GetSensorPartnerIntegrationsClient();

            Response response = await client.DeleteAsync("<sensorPartnerId>", "<integrationId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Delete_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SensorPartnerIntegrations client = CreateFarmBeatsClient(endpoint, credential).GetSensorPartnerIntegrationsClient();

            Response response = await client.DeleteAsync("<sensorPartnerId>", "<integrationId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CheckConsent_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SensorPartnerIntegrations client = CreateFarmBeatsClient(endpoint, credential).GetSensorPartnerIntegrationsClient();

            Response response = await client.CheckConsentAsync("<sensorPartnerId>", "<integrationId>", "<key>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CheckConsent_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SensorPartnerIntegrations client = CreateFarmBeatsClient(endpoint, credential).GetSensorPartnerIntegrationsClient();

            Response response = await client.CheckConsentAsync("<sensorPartnerId>", "<integrationId>", "<key>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GenerateConsentLink_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SensorPartnerIntegrations client = CreateFarmBeatsClient(endpoint, credential).GetSensorPartnerIntegrationsClient();

            Response response = await client.GenerateConsentLinkAsync("<sensorPartnerId>", "<integrationId>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GenerateConsentLink_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SensorPartnerIntegrations client = CreateFarmBeatsClient(endpoint, credential).GetSensorPartnerIntegrationsClient();

            Response response = await client.GenerateConsentLinkAsync("<sensorPartnerId>", "<integrationId>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetSensorPartnerIntegrations_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SensorPartnerIntegrations client = CreateFarmBeatsClient(endpoint, credential).GetSensorPartnerIntegrationsClient();

            await foreach (BinaryData item in client.GetSensorPartnerIntegrationsAsync("<sensorPartnerId>", null, null, null, null, null, null, null, null, null, null, null, null, null))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetSensorPartnerIntegrations_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            SensorPartnerIntegrations client = CreateFarmBeatsClient(endpoint, credential).GetSensorPartnerIntegrationsClient();

            await foreach (BinaryData item in client.GetSensorPartnerIntegrationsAsync("<sensorPartnerId>", new string[] { "<integrationIds>" }, new string[] { "<partyIds>" }, new string[] { "<ids>" }, new string[] { "<names>" }, new string[] { "<propertyFilters>" }, new string[] { "<statuses>" }, DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), 1234, "<skipToken>", null))
            {
            }
        }
    }
}
