// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Verticals.AgriFood.Farming.Tests
{
    public partial class BoundariesTests : VerticalsAgriFoodFarmingTestBase
    {
        public BoundariesTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetCascadeDeleteJobDetails_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Boundaries client = CreateFarmBeatsClient(endpoint, credential).GetBoundariesClient();

            Response response = await client.GetCascadeDeleteJobDetailsAsync("<jobId>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetCascadeDeleteJobDetails_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Boundaries client = CreateFarmBeatsClient(endpoint, credential).GetBoundariesClient();

            Response response = await client.GetCascadeDeleteJobDetailsAsync("<jobId>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CreateOrUpdate_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Boundaries client = CreateFarmBeatsClient(endpoint, credential).GetBoundariesClient();

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.CreateOrUpdateAsync("<partyId>", "<boundaryId>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CreateOrUpdate_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Boundaries client = CreateFarmBeatsClient(endpoint, credential).GetBoundariesClient();

            using RequestContent content = RequestContent.Create(new
            {
                geometry = new
                {
                    coordinates = new object[]
            {
new object[]
{
new object[]
{
new object[]
{
123.45
}
}
}
            },
                    type = "MultiPolygon",
                },
                type = "<type>",
                parentId = "<parentId>",
                area = new
                {
                    unit = "<unit>",
                    value = 123.45,
                },
                parentType = "Field",
                status = "<status>",
                source = "<source>",
                name = "<name>",
                description = "<description>",
                properties = new
                {
                    key = new object(),
                },
            });
            Response response = await client.CreateOrUpdateAsync("<partyId>", "<boundaryId>", content);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetBoundary_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Boundaries client = CreateFarmBeatsClient(endpoint, credential).GetBoundariesClient();

            Response response = await client.GetBoundaryAsync("<partyId>", "<boundaryId>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetBoundary_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Boundaries client = CreateFarmBeatsClient(endpoint, credential).GetBoundariesClient();

            Response response = await client.GetBoundaryAsync("<partyId>", "<boundaryId>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Delete_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Boundaries client = CreateFarmBeatsClient(endpoint, credential).GetBoundariesClient();

            Response response = await client.DeleteAsync("<partyId>", "<boundaryId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Delete_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Boundaries client = CreateFarmBeatsClient(endpoint, credential).GetBoundariesClient();

            Response response = await client.DeleteAsync("<partyId>", "<boundaryId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetOverlap_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Boundaries client = CreateFarmBeatsClient(endpoint, credential).GetBoundariesClient();

            Response response = await client.GetOverlapAsync("<partyId>", "<boundaryId>", "<otherPartyId>", "<otherBoundaryId>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetOverlap_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Boundaries client = CreateFarmBeatsClient(endpoint, credential).GetBoundariesClient();

            Response response = await client.GetOverlapAsync("<partyId>", "<boundaryId>", "<otherPartyId>", "<otherBoundaryId>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetBoundaries_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Boundaries client = CreateFarmBeatsClient(endpoint, credential).GetBoundariesClient();

            await foreach (BinaryData item in client.GetBoundariesAsync(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetBoundaries_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Boundaries client = CreateFarmBeatsClient(endpoint, credential).GetBoundariesClient();

            await foreach (BinaryData item in client.GetBoundariesAsync("<parentType>", "<type>", new string[] { "<parentIds>" }, 123.45, 123.45, new string[] { "<boundaryIds>" }, new string[] { "<names>" }, new string[] { "<propertyFilters>" }, new string[] { "<statuses>" }, DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), 1234, "<skipToken>", null))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Search_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Boundaries client = CreateFarmBeatsClient(endpoint, credential).GetBoundariesClient();

            using RequestContent content = RequestContent.Create(new object());
            await foreach (BinaryData item in client.SearchAsync(content))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Search_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Boundaries client = CreateFarmBeatsClient(endpoint, credential).GetBoundariesClient();

            using RequestContent content = RequestContent.Create(new
            {
                ids = new object[]
            {
"<ids>"
            },
                names = new object[]
            {
"<names>"
            },
                propertyFilters = new object[]
            {
"<propertyFilters>"
            },
                statuses = new object[]
            {
"<statuses>"
            },
                minCreatedDateTime = "2022-05-10T18:57:31.2311892Z",
                maxCreatedDateTime = "2022-05-10T18:57:31.2311892Z",
                minLastModifiedDateTime = "2022-05-10T18:57:31.2311892Z",
                maxLastModifiedDateTime = "2022-05-10T18:57:31.2311892Z",
                maxPageSize = 1234,
                skipToken = "<skipToken>",
                parentType = "Field",
                type = "<type>",
                parentIds = new object[]
            {
"<parentIds>"
            },
                minArea = 123.45,
                maxArea = 123.45,
                intersectsWithGeometry = new
                {
                    coordinates = new object[]
            {
new object[]
{
new object[]
{
new object[]
{
123.45
}
}
}
            },
                    type = "MultiPolygon",
                },
            });
            await foreach (BinaryData item in client.SearchAsync(content))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetBoundariesByPartyId_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Boundaries client = CreateFarmBeatsClient(endpoint, credential).GetBoundariesClient();

            await foreach (BinaryData item in client.GetBoundariesByPartyIdAsync("<partyId>", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetBoundariesByPartyId_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Boundaries client = CreateFarmBeatsClient(endpoint, credential).GetBoundariesClient();

            await foreach (BinaryData item in client.GetBoundariesByPartyIdAsync("<partyId>", "<parentType>", "<type>", new string[] { "<parentIds>" }, 123.45, 123.45, new string[] { "<ids>" }, new string[] { "<names>" }, new string[] { "<propertyFilters>" }, new string[] { "<statuses>" }, DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), 1234, "<skipToken>", null))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task SearchByPartyId_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Boundaries client = CreateFarmBeatsClient(endpoint, credential).GetBoundariesClient();

            using RequestContent content = RequestContent.Create(new object());
            await foreach (BinaryData item in client.SearchByPartyIdAsync("<partyId>", content))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task SearchByPartyId_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Boundaries client = CreateFarmBeatsClient(endpoint, credential).GetBoundariesClient();

            using RequestContent content = RequestContent.Create(new
            {
                ids = new object[]
            {
"<ids>"
            },
                names = new object[]
            {
"<names>"
            },
                propertyFilters = new object[]
            {
"<propertyFilters>"
            },
                statuses = new object[]
            {
"<statuses>"
            },
                minCreatedDateTime = "2022-05-10T18:57:31.2311892Z",
                maxCreatedDateTime = "2022-05-10T18:57:31.2311892Z",
                minLastModifiedDateTime = "2022-05-10T18:57:31.2311892Z",
                maxLastModifiedDateTime = "2022-05-10T18:57:31.2311892Z",
                maxPageSize = 1234,
                skipToken = "<skipToken>",
                parentType = "Field",
                type = "<type>",
                parentIds = new object[]
            {
"<parentIds>"
            },
                minArea = 123.45,
                maxArea = 123.45,
                intersectsWithGeometry = new
                {
                    coordinates = new object[]
            {
new object[]
{
new object[]
{
new object[]
{
123.45
}
}
}
            },
                    type = "MultiPolygon",
                },
            });
            await foreach (BinaryData item in client.SearchByPartyIdAsync("<partyId>", content))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CreateCascadeDeleteJob_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Boundaries client = CreateFarmBeatsClient(endpoint, credential).GetBoundariesClient();

            Operation<BinaryData> operation = await client.CreateCascadeDeleteJobAsync(WaitUntil.Completed, "<jobId>", "<partyId>", "<boundaryId>", null);
            BinaryData responseData = operation.Value;
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CreateCascadeDeleteJob_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Boundaries client = CreateFarmBeatsClient(endpoint, credential).GetBoundariesClient();

            Operation<BinaryData> operation = await client.CreateCascadeDeleteJobAsync(WaitUntil.Completed, "<jobId>", "<partyId>", "<boundaryId>", null);
            BinaryData responseData = operation.Value;
        }
    }
}
