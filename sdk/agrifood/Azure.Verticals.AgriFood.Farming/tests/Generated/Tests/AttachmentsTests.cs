// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Verticals.AgriFood.Farming.Tests
{
    public partial class AttachmentsTests : VerticalsAgriFoodFarmingTestBase
    {
        public AttachmentsTests(bool isAsync) : base(isAsync)
        {
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetAttachment_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Attachments client = CreateFarmBeatsClient(endpoint, credential).GetAttachmentsClient();

            Response response = await client.GetAttachmentAsync("<partyId>", "<attachmentId>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetAttachment_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Attachments client = CreateFarmBeatsClient(endpoint, credential).GetAttachmentsClient();

            Response response = await client.GetAttachmentAsync("<partyId>", "<attachmentId>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CreateOrUpdate_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Attachments client = CreateFarmBeatsClient(endpoint, credential).GetAttachmentsClient();

            using RequestContent content = null;
            Response response = await client.CreateOrUpdateAsync("<partyId>", "<attachmentId>", content, "multipart/form-data");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task CreateOrUpdate_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Attachments client = CreateFarmBeatsClient(endpoint, credential).GetAttachmentsClient();

            using RequestContent content = RequestContent.Create(File.OpenRead("<filePath>"));
            Response response = await client.CreateOrUpdateAsync("<partyId>", "<attachmentId>", content, "multipart/form-data");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Delete_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Attachments client = CreateFarmBeatsClient(endpoint, credential).GetAttachmentsClient();

            Response response = await client.DeleteAsync("<partyId>", "<attachmentId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Delete_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Attachments client = CreateFarmBeatsClient(endpoint, credential).GetAttachmentsClient();

            Response response = await client.DeleteAsync("<partyId>", "<attachmentId>");
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Download_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Attachments client = CreateFarmBeatsClient(endpoint, credential).GetAttachmentsClient();

            Response response = await client.DownloadAsync("<partyId>", "<attachmentId>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task Download_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Attachments client = CreateFarmBeatsClient(endpoint, credential).GetAttachmentsClient();

            Response response = await client.DownloadAsync("<partyId>", "<attachmentId>", null);
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetAttachmentsByPartyId_ShortVersion()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Attachments client = CreateFarmBeatsClient(endpoint, credential).GetAttachmentsClient();

            await foreach (BinaryData item in client.GetAttachmentsByPartyIdAsync("<partyId>", null, null, null, null, null, null, null, null, null, null, null, null, null))
            {
            }
        }

        [Test]
        [Ignore("Please remove the Ignore attribute to let the test method run")]
        public async Task GetAttachmentsByPartyId_AllParameters()
        {
            Uri endpoint = new Uri("<https://my-service.azure.com>");
            TokenCredential credential = new DefaultAzureCredential();
            Attachments client = CreateFarmBeatsClient(endpoint, credential).GetAttachmentsClient();

            await foreach (BinaryData item in client.GetAttachmentsByPartyIdAsync("<partyId>", new string[] { "<resourceIds>" }, new string[] { "<resourceTypes>" }, new string[] { "<ids>" }, new string[] { "<names>" }, new string[] { "<propertyFilters>" }, new string[] { "<statuses>" }, DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), DateTimeOffset.Parse("2022-05-10T18:57:31.2311892Z"), 1234, "<skipToken>", null))
            {
            }
        }
    }
}
