namespace Azure.Verticals.AgriFood.Farming
{
    public partial class ApplicationDataClient
    {
        protected ApplicationDataClient() { }
        public ApplicationDataClient(System.Uri endpoint, Azure.Core.TokenCredential credential, Azure.Verticals.AgriFood.Farming.FarmBeatsClientOptions options = null) { }
        public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get { throw null; } }
        public virtual Azure.Response CreateOrUpdate(string farmerId, string applicationDataId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> CreateOrUpdateAsync(string farmerId, string applicationDataId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response Delete(string farmerId, string applicationDataId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> DeleteAsync(string farmerId, string applicationDataId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetAllApplicationData(double? minAvgMaterial = default(double?), double? maxAvgMaterial = default(double?), double? minTotalMaterial = default(double?), double? maxTotalMaterial = default(double?), System.Collections.Generic.IEnumerable<string> sources = null, System.Collections.Generic.IEnumerable<string> associatedBoundaryIds = null, System.Collections.Generic.IEnumerable<string> operationBoundaryIds = null, System.DateTimeOffset? minOperationStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minOperationEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minOperationModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationModifiedDateTime = default(System.DateTimeOffset?), double? minArea = default(double?), double? maxArea = default(double?), System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetAllApplicationDataAsync(double? minAvgMaterial = default(double?), double? maxAvgMaterial = default(double?), double? minTotalMaterial = default(double?), double? maxTotalMaterial = default(double?), System.Collections.Generic.IEnumerable<string> sources = null, System.Collections.Generic.IEnumerable<string> associatedBoundaryIds = null, System.Collections.Generic.IEnumerable<string> operationBoundaryIds = null, System.DateTimeOffset? minOperationStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minOperationEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minOperationModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationModifiedDateTime = default(System.DateTimeOffset?), double? minArea = default(double?), double? maxArea = default(double?), System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetAllApplicationDataByFarmerId(string farmerId, double? minAvgMaterial = default(double?), double? maxAvgMaterial = default(double?), double? minTotalMaterial = default(double?), double? maxTotalMaterial = default(double?), System.Collections.Generic.IEnumerable<string> sources = null, System.Collections.Generic.IEnumerable<string> associatedBoundaryIds = null, System.Collections.Generic.IEnumerable<string> operationBoundaryIds = null, System.DateTimeOffset? minOperationStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minOperationEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minOperationModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationModifiedDateTime = default(System.DateTimeOffset?), double? minArea = default(double?), double? maxArea = default(double?), System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetAllApplicationDataByFarmerIdAsync(string farmerId, double? minAvgMaterial = default(double?), double? maxAvgMaterial = default(double?), double? minTotalMaterial = default(double?), double? maxTotalMaterial = default(double?), System.Collections.Generic.IEnumerable<string> sources = null, System.Collections.Generic.IEnumerable<string> associatedBoundaryIds = null, System.Collections.Generic.IEnumerable<string> operationBoundaryIds = null, System.DateTimeOffset? minOperationStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minOperationEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minOperationModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationModifiedDateTime = default(System.DateTimeOffset?), double? minArea = default(double?), double? maxArea = default(double?), System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetApplicationData(string farmerId, string applicationDataId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetApplicationDataAsync(string farmerId, string applicationDataId, Azure.RequestContext context = null) { throw null; }
    }
    public partial class AttachmentsClient
    {
        protected AttachmentsClient() { }
        public AttachmentsClient(System.Uri endpoint, Azure.Core.TokenCredential credential, Azure.Verticals.AgriFood.Farming.FarmBeatsClientOptions options = null) { }
        public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get { throw null; } }
        public virtual Azure.Response CreateOrUpdate(string farmerId, string attachmentId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> CreateOrUpdateAsync(string farmerId, string attachmentId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response Delete(string farmerId, string attachmentId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> DeleteAsync(string farmerId, string attachmentId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response Download(string farmerId, string attachmentId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> DownloadAsync(string farmerId, string attachmentId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetAttachment(string farmerId, string attachmentId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetAttachmentAsync(string farmerId, string attachmentId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetAttachmentsByFarmerId(string farmerId, System.Collections.Generic.IEnumerable<string> resourceIds = null, System.Collections.Generic.IEnumerable<string> resourceTypes = null, System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetAttachmentsByFarmerIdAsync(string farmerId, System.Collections.Generic.IEnumerable<string> resourceIds = null, System.Collections.Generic.IEnumerable<string> resourceTypes = null, System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
    }
    public partial class BoundariesClient
    {
        protected BoundariesClient() { }
        public BoundariesClient(System.Uri endpoint, Azure.Core.TokenCredential credential, Azure.Verticals.AgriFood.Farming.FarmBeatsClientOptions options = null) { }
        public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get { throw null; } }
        public virtual Azure.Operation<System.BinaryData> CreateCascadeDeleteJob(bool waitForCompletion, string jobId, string farmerId, string boundaryId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Operation<System.BinaryData>> CreateCascadeDeleteJobAsync(bool waitForCompletion, string jobId, string farmerId, string boundaryId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response CreateOrUpdate(string farmerId, string boundaryId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> CreateOrUpdateAsync(string farmerId, string boundaryId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response Delete(string farmerId, string boundaryId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> DeleteAsync(string farmerId, string boundaryId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetBoundaries(bool? isPrimary = default(bool?), string parentType = null, System.Collections.Generic.IEnumerable<string> parentIds = null, double? minAcreage = default(double?), double? maxAcreage = default(double?), System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetBoundariesAsync(bool? isPrimary = default(bool?), string parentType = null, System.Collections.Generic.IEnumerable<string> parentIds = null, double? minAcreage = default(double?), double? maxAcreage = default(double?), System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetBoundariesByFarmerId(string farmerId, bool? isPrimary = default(bool?), string parentType = null, System.Collections.Generic.IEnumerable<string> parentIds = null, double? minAcreage = default(double?), double? maxAcreage = default(double?), System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetBoundariesByFarmerIdAsync(string farmerId, bool? isPrimary = default(bool?), string parentType = null, System.Collections.Generic.IEnumerable<string> parentIds = null, double? minAcreage = default(double?), double? maxAcreage = default(double?), System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetBoundary(string farmerId, string boundaryId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetBoundaryAsync(string farmerId, string boundaryId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetCascadeDeleteJobDetails(string jobId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetCascadeDeleteJobDetailsAsync(string jobId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetOverlap(string farmerId, string boundaryId, string otherFarmerId, string otherBoundaryId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetOverlapAsync(string farmerId, string boundaryId, string otherFarmerId, string otherBoundaryId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> Search(Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> SearchAsync(Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> SearchByFarmerId(string farmerId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> SearchByFarmerIdAsync(string farmerId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
    }
    public partial class CropsClient
    {
        protected CropsClient() { }
        public CropsClient(System.Uri endpoint, Azure.Core.TokenCredential credential, Azure.Verticals.AgriFood.Farming.FarmBeatsClientOptions options = null) { }
        public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get { throw null; } }
        public virtual Azure.Response CreateOrUpdate(string cropId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> CreateOrUpdateAsync(string cropId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response Delete(string cropId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> DeleteAsync(string cropId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetCrop(string cropId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetCropAsync(string cropId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetCrops(System.Collections.Generic.IEnumerable<string> phenotypes = null, System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetCropsAsync(System.Collections.Generic.IEnumerable<string> phenotypes = null, System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
    }
    public partial class CropVarietiesClient
    {
        protected CropVarietiesClient() { }
        public CropVarietiesClient(System.Uri endpoint, Azure.Core.TokenCredential credential, Azure.Verticals.AgriFood.Farming.FarmBeatsClientOptions options = null) { }
        public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get { throw null; } }
        public virtual Azure.Response CreateOrUpdate(string cropId, string cropVarietyId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> CreateOrUpdateAsync(string cropId, string cropVarietyId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response Delete(string cropId, string cropVarietyId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> DeleteAsync(string cropId, string cropVarietyId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetCropVarieties(System.Collections.Generic.IEnumerable<string> cropIds = null, System.Collections.Generic.IEnumerable<string> brands = null, System.Collections.Generic.IEnumerable<string> products = null, System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetCropVarietiesAsync(System.Collections.Generic.IEnumerable<string> cropIds = null, System.Collections.Generic.IEnumerable<string> brands = null, System.Collections.Generic.IEnumerable<string> products = null, System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetCropVarietiesByCropId(string cropId, System.Collections.Generic.IEnumerable<string> cropIds = null, System.Collections.Generic.IEnumerable<string> brands = null, System.Collections.Generic.IEnumerable<string> products = null, System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetCropVarietiesByCropIdAsync(string cropId, System.Collections.Generic.IEnumerable<string> cropIds = null, System.Collections.Generic.IEnumerable<string> brands = null, System.Collections.Generic.IEnumerable<string> products = null, System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetCropVariety(string cropId, string cropVarietyId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetCropVarietyAsync(string cropId, string cropVarietyId, Azure.RequestContext context = null) { throw null; }
    }
    public partial class FarmBeatsClientOptions : Azure.Core.ClientOptions
    {
        public FarmBeatsClientOptions(Azure.Verticals.AgriFood.Farming.FarmBeatsClientOptions.ServiceVersion version = Azure.Verticals.AgriFood.Farming.FarmBeatsClientOptions.ServiceVersion.V2021_03_31_preview) { }
        public enum ServiceVersion
        {
            V2021_03_31_preview = 1,
        }
    }
    public partial class FarmClient
    {
        protected FarmClient() { }
        public FarmClient(System.Uri endpoint, Azure.Core.TokenCredential credential, Azure.Verticals.AgriFood.Farming.FarmBeatsClientOptions options = null) { }
        public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get { throw null; } }
        public virtual Azure.Operation<System.BinaryData> CreateDataIngestionJob(bool waitForCompletion, string jobId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Operation<System.BinaryData>> CreateDataIngestionJobAsync(bool waitForCompletion, string jobId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetDataIngestionJobDetails(string jobId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetDataIngestionJobDetailsAsync(string jobId, Azure.RequestContext context = null) { throw null; }
    }
    public partial class FarmersClient
    {
        protected FarmersClient() { }
        public FarmersClient(System.Uri endpoint, Azure.Core.TokenCredential credential, Azure.Verticals.AgriFood.Farming.FarmBeatsClientOptions options = null) { }
        public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get { throw null; } }
        public virtual Azure.Operation<System.BinaryData> CreateCascadeDeleteJob(bool waitForCompletion, string jobId, string farmerId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Operation<System.BinaryData>> CreateCascadeDeleteJobAsync(bool waitForCompletion, string jobId, string farmerId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response CreateOrUpdate(string farmerId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> CreateOrUpdateAsync(string farmerId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response Delete(string farmerId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> DeleteAsync(string farmerId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetCascadeDeleteJobDetails(string jobId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetCascadeDeleteJobDetailsAsync(string jobId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetFarmer(string farmerId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetFarmerAsync(string farmerId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetFarmers(System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetFarmersAsync(System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
    }
    public partial class FarmsClient
    {
        protected FarmsClient() { }
        public FarmsClient(System.Uri endpoint, Azure.Core.TokenCredential credential, Azure.Verticals.AgriFood.Farming.FarmBeatsClientOptions options = null) { }
        public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get { throw null; } }
        public virtual Azure.Operation<System.BinaryData> CreateCascadeDeleteJob(bool waitForCompletion, string jobId, string farmerId, string farmId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Operation<System.BinaryData>> CreateCascadeDeleteJobAsync(bool waitForCompletion, string jobId, string farmerId, string farmId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response CreateOrUpdate(string farmerId, string farmId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> CreateOrUpdateAsync(string farmerId, string farmId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response Delete(string farmerId, string farmId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> DeleteAsync(string farmerId, string farmId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetCascadeDeleteJobDetails(string jobId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetCascadeDeleteJobDetailsAsync(string jobId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetFarm(string farmerId, string farmId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetFarmAsync(string farmerId, string farmId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetFarms(System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetFarmsAsync(System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetFarmsByFarmerId(string farmerId, System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetFarmsByFarmerIdAsync(string farmerId, System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
    }
    public partial class FieldsClient
    {
        protected FieldsClient() { }
        public FieldsClient(System.Uri endpoint, Azure.Core.TokenCredential credential, Azure.Verticals.AgriFood.Farming.FarmBeatsClientOptions options = null) { }
        public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get { throw null; } }
        public virtual Azure.Operation<System.BinaryData> CreateCascadeDeleteJob(bool waitForCompletion, string jobId, string farmerId, string fieldId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Operation<System.BinaryData>> CreateCascadeDeleteJobAsync(bool waitForCompletion, string jobId, string farmerId, string fieldId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response CreateOrUpdate(string farmerId, string fieldId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> CreateOrUpdateAsync(string farmerId, string fieldId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response Delete(string farmerId, string fieldId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> DeleteAsync(string farmerId, string fieldId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetCascadeDeleteJobDetails(string jobId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetCascadeDeleteJobDetailsAsync(string jobId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetField(string farmerId, string fieldId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetFieldAsync(string farmerId, string fieldId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetFields(System.Collections.Generic.IEnumerable<string> farmIds = null, System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetFieldsAsync(System.Collections.Generic.IEnumerable<string> farmIds = null, System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetFieldsByFarmerId(string farmerId, System.Collections.Generic.IEnumerable<string> farmIds = null, System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetFieldsByFarmerIdAsync(string farmerId, System.Collections.Generic.IEnumerable<string> farmIds = null, System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
    }
    public partial class HarvestDataClient
    {
        protected HarvestDataClient() { }
        public HarvestDataClient(System.Uri endpoint, Azure.Core.TokenCredential credential, Azure.Verticals.AgriFood.Farming.FarmBeatsClientOptions options = null) { }
        public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get { throw null; } }
        public virtual Azure.Response CreateOrUpdate(string farmerId, string harvestDataId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> CreateOrUpdateAsync(string farmerId, string harvestDataId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response Delete(string farmerId, string harvestDataId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> DeleteAsync(string farmerId, string harvestDataId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetAllHarvestData(double? minTotalYield = default(double?), double? maxTotalYield = default(double?), double? minAvgYield = default(double?), double? maxAvgYield = default(double?), double? minTotalWetMass = default(double?), double? maxTotalWetMass = default(double?), double? minAvgWetMass = default(double?), double? maxAvgWetMass = default(double?), double? minAvgMoisture = default(double?), double? maxAvgMoisture = default(double?), double? minAvgSpeed = default(double?), double? maxAvgSpeed = default(double?), System.Collections.Generic.IEnumerable<string> sources = null, System.Collections.Generic.IEnumerable<string> associatedBoundaryIds = null, System.Collections.Generic.IEnumerable<string> operationBoundaryIds = null, System.DateTimeOffset? minOperationStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minOperationEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minOperationModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationModifiedDateTime = default(System.DateTimeOffset?), double? minArea = default(double?), double? maxArea = default(double?), System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetAllHarvestDataAsync(double? minTotalYield = default(double?), double? maxTotalYield = default(double?), double? minAvgYield = default(double?), double? maxAvgYield = default(double?), double? minTotalWetMass = default(double?), double? maxTotalWetMass = default(double?), double? minAvgWetMass = default(double?), double? maxAvgWetMass = default(double?), double? minAvgMoisture = default(double?), double? maxAvgMoisture = default(double?), double? minAvgSpeed = default(double?), double? maxAvgSpeed = default(double?), System.Collections.Generic.IEnumerable<string> sources = null, System.Collections.Generic.IEnumerable<string> associatedBoundaryIds = null, System.Collections.Generic.IEnumerable<string> operationBoundaryIds = null, System.DateTimeOffset? minOperationStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minOperationEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minOperationModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationModifiedDateTime = default(System.DateTimeOffset?), double? minArea = default(double?), double? maxArea = default(double?), System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetAllHarvestDataByFarmerId(string farmerId, double? minTotalYield = default(double?), double? maxTotalYield = default(double?), double? minAvgYield = default(double?), double? maxAvgYield = default(double?), double? minTotalWetMass = default(double?), double? maxTotalWetMass = default(double?), double? minAvgWetMass = default(double?), double? maxAvgWetMass = default(double?), double? minAvgMoisture = default(double?), double? maxAvgMoisture = default(double?), double? minAvgSpeed = default(double?), double? maxAvgSpeed = default(double?), System.Collections.Generic.IEnumerable<string> sources = null, System.Collections.Generic.IEnumerable<string> associatedBoundaryIds = null, System.Collections.Generic.IEnumerable<string> operationBoundaryIds = null, System.DateTimeOffset? minOperationStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minOperationEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minOperationModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationModifiedDateTime = default(System.DateTimeOffset?), double? minArea = default(double?), double? maxArea = default(double?), System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetAllHarvestDataByFarmerIdAsync(string farmerId, double? minTotalYield = default(double?), double? maxTotalYield = default(double?), double? minAvgYield = default(double?), double? maxAvgYield = default(double?), double? minTotalWetMass = default(double?), double? maxTotalWetMass = default(double?), double? minAvgWetMass = default(double?), double? maxAvgWetMass = default(double?), double? minAvgMoisture = default(double?), double? maxAvgMoisture = default(double?), double? minAvgSpeed = default(double?), double? maxAvgSpeed = default(double?), System.Collections.Generic.IEnumerable<string> sources = null, System.Collections.Generic.IEnumerable<string> associatedBoundaryIds = null, System.Collections.Generic.IEnumerable<string> operationBoundaryIds = null, System.DateTimeOffset? minOperationStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minOperationEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minOperationModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationModifiedDateTime = default(System.DateTimeOffset?), double? minArea = default(double?), double? maxArea = default(double?), System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetHarvestData(string farmerId, string harvestDataId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetHarvestDataAsync(string farmerId, string harvestDataId, Azure.RequestContext context = null) { throw null; }
    }
    public partial class ImageProcessingClient
    {
        protected ImageProcessingClient() { }
        public ImageProcessingClient(System.Uri endpoint, Azure.Core.TokenCredential credential, Azure.Verticals.AgriFood.Farming.FarmBeatsClientOptions options = null) { }
        public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get { throw null; } }
        public virtual Azure.Operation<System.BinaryData> CreateRasterizeJob(bool waitForCompletion, string jobId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Operation<System.BinaryData>> CreateRasterizeJobAsync(bool waitForCompletion, string jobId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetRasterizeJob(string jobId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetRasterizeJobAsync(string jobId, Azure.RequestContext context = null) { throw null; }
    }
    public partial class OAuthProvidersClient
    {
        protected OAuthProvidersClient() { }
        public OAuthProvidersClient(System.Uri endpoint, Azure.Core.TokenCredential credential, Azure.Verticals.AgriFood.Farming.FarmBeatsClientOptions options = null) { }
        public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get { throw null; } }
        public virtual Azure.Response CreateOrUpdate(string oauthProviderId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> CreateOrUpdateAsync(string oauthProviderId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response Delete(string oauthProviderId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> DeleteAsync(string oauthProviderId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetOAuthProvider(string oauthProviderId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetOAuthProviderAsync(string oauthProviderId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetOAuthProviders(System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetOAuthProvidersAsync(System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
    }
    public partial class OAuthTokensClient
    {
        protected OAuthTokensClient() { }
        public OAuthTokensClient(System.Uri endpoint, Azure.Core.TokenCredential credential, Azure.Verticals.AgriFood.Farming.FarmBeatsClientOptions options = null) { }
        public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get { throw null; } }
        public virtual Azure.Operation<System.BinaryData> CreateCascadeDeleteJob(bool waitForCompletion, string jobId, string farmerId, string oauthProviderId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Operation<System.BinaryData>> CreateCascadeDeleteJobAsync(bool waitForCompletion, string jobId, string farmerId, string oauthProviderId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetCascadeDeleteJobDetails(string jobId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetCascadeDeleteJobDetailsAsync(string jobId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetOAuthConnectionLink(Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetOAuthConnectionLinkAsync(Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetOAuthTokens(System.Collections.Generic.IEnumerable<string> authProviderIds = null, System.Collections.Generic.IEnumerable<string> farmerIds = null, bool? isValid = default(bool?), System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetOAuthTokensAsync(System.Collections.Generic.IEnumerable<string> authProviderIds = null, System.Collections.Generic.IEnumerable<string> farmerIds = null, bool? isValid = default(bool?), System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
    }
    public partial class PlantingDataClient
    {
        protected PlantingDataClient() { }
        public PlantingDataClient(System.Uri endpoint, Azure.Core.TokenCredential credential, Azure.Verticals.AgriFood.Farming.FarmBeatsClientOptions options = null) { }
        public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get { throw null; } }
        public virtual Azure.Response CreateOrUpdate(string farmerId, string plantingDataId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> CreateOrUpdateAsync(string farmerId, string plantingDataId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response Delete(string farmerId, string plantingDataId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> DeleteAsync(string farmerId, string plantingDataId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetAllPlantingData(double? minAvgPlantingRate = default(double?), double? maxAvgPlantingRate = default(double?), double? minTotalMaterial = default(double?), double? maxTotalMaterial = default(double?), double? minAvgMaterial = default(double?), double? maxAvgMaterial = default(double?), System.Collections.Generic.IEnumerable<string> sources = null, System.Collections.Generic.IEnumerable<string> associatedBoundaryIds = null, System.Collections.Generic.IEnumerable<string> operationBoundaryIds = null, System.DateTimeOffset? minOperationStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minOperationEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minOperationModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationModifiedDateTime = default(System.DateTimeOffset?), double? minArea = default(double?), double? maxArea = default(double?), System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetAllPlantingDataAsync(double? minAvgPlantingRate = default(double?), double? maxAvgPlantingRate = default(double?), double? minTotalMaterial = default(double?), double? maxTotalMaterial = default(double?), double? minAvgMaterial = default(double?), double? maxAvgMaterial = default(double?), System.Collections.Generic.IEnumerable<string> sources = null, System.Collections.Generic.IEnumerable<string> associatedBoundaryIds = null, System.Collections.Generic.IEnumerable<string> operationBoundaryIds = null, System.DateTimeOffset? minOperationStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minOperationEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minOperationModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationModifiedDateTime = default(System.DateTimeOffset?), double? minArea = default(double?), double? maxArea = default(double?), System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetAllPlantingDataByFarmerId(string farmerId, double? minAvgPlantingRate = default(double?), double? maxAvgPlantingRate = default(double?), double? minTotalMaterial = default(double?), double? maxTotalMaterial = default(double?), double? minAvgMaterial = default(double?), double? maxAvgMaterial = default(double?), System.Collections.Generic.IEnumerable<string> sources = null, System.Collections.Generic.IEnumerable<string> associatedBoundaryIds = null, System.Collections.Generic.IEnumerable<string> operationBoundaryIds = null, System.DateTimeOffset? minOperationStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minOperationEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minOperationModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationModifiedDateTime = default(System.DateTimeOffset?), double? minArea = default(double?), double? maxArea = default(double?), System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetAllPlantingDataByFarmerIdAsync(string farmerId, double? minAvgPlantingRate = default(double?), double? maxAvgPlantingRate = default(double?), double? minTotalMaterial = default(double?), double? maxTotalMaterial = default(double?), double? minAvgMaterial = default(double?), double? maxAvgMaterial = default(double?), System.Collections.Generic.IEnumerable<string> sources = null, System.Collections.Generic.IEnumerable<string> associatedBoundaryIds = null, System.Collections.Generic.IEnumerable<string> operationBoundaryIds = null, System.DateTimeOffset? minOperationStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minOperationEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minOperationModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationModifiedDateTime = default(System.DateTimeOffset?), double? minArea = default(double?), double? maxArea = default(double?), System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetPlantingData(string farmerId, string plantingDataId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetPlantingDataAsync(string farmerId, string plantingDataId, Azure.RequestContext context = null) { throw null; }
    }
    public partial class ScenesClient
    {
        protected ScenesClient() { }
        public ScenesClient(System.Uri endpoint, Azure.Core.TokenCredential credential, Azure.Verticals.AgriFood.Farming.FarmBeatsClientOptions options = null) { }
        public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get { throw null; } }
        public virtual Azure.Operation<System.BinaryData> CreateSatelliteDataIngestionJob(bool waitForCompletion, string jobId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Operation<System.BinaryData>> CreateSatelliteDataIngestionJobAsync(bool waitForCompletion, string jobId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response Download(string filePath, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> DownloadAsync(string filePath, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetSatelliteDataIngestionJobDetails(string jobId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetSatelliteDataIngestionJobDetailsAsync(string jobId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetScenes(string provider, string farmerId, string boundaryId, string source = null, System.DateTimeOffset? startDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? endDateTime = default(System.DateTimeOffset?), double? maxCloudCoveragePercentage = default(double?), double? maxDarkPixelCoveragePercentage = default(double?), System.Collections.Generic.IEnumerable<string> imageNames = null, System.Collections.Generic.IEnumerable<double> imageResolutions = null, System.Collections.Generic.IEnumerable<string> imageFormats = null, int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetScenesAsync(string provider, string farmerId, string boundaryId, string source = null, System.DateTimeOffset? startDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? endDateTime = default(System.DateTimeOffset?), double? maxCloudCoveragePercentage = default(double?), double? maxDarkPixelCoveragePercentage = default(double?), System.Collections.Generic.IEnumerable<string> imageNames = null, System.Collections.Generic.IEnumerable<double> imageResolutions = null, System.Collections.Generic.IEnumerable<string> imageFormats = null, int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
    }
    public partial class SeasonalFieldsClient
    {
        protected SeasonalFieldsClient() { }
        public SeasonalFieldsClient(System.Uri endpoint, Azure.Core.TokenCredential credential, Azure.Verticals.AgriFood.Farming.FarmBeatsClientOptions options = null) { }
        public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get { throw null; } }
        public virtual Azure.Operation<System.BinaryData> CreateCascadeDeleteJob(bool waitForCompletion, string jobId, string farmerId, string seasonalFieldId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Operation<System.BinaryData>> CreateCascadeDeleteJobAsync(bool waitForCompletion, string jobId, string farmerId, string seasonalFieldId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response CreateOrUpdate(string farmerId, string seasonalFieldId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> CreateOrUpdateAsync(string farmerId, string seasonalFieldId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response Delete(string farmerId, string seasonalFieldId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> DeleteAsync(string farmerId, string seasonalFieldId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetCascadeDeleteJobDetails(string jobId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetCascadeDeleteJobDetailsAsync(string jobId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetSeasonalField(string farmerId, string seasonalFieldId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetSeasonalFieldAsync(string farmerId, string seasonalFieldId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetSeasonalFields(System.Collections.Generic.IEnumerable<string> farmIds = null, System.Collections.Generic.IEnumerable<string> fieldIds = null, System.Collections.Generic.IEnumerable<string> seasonIds = null, System.Collections.Generic.IEnumerable<string> cropVarietyIds = null, System.Collections.Generic.IEnumerable<string> cropIds = null, double? minAvgYieldValue = default(double?), double? maxAvgYieldValue = default(double?), string avgYieldUnit = null, double? minAvgSeedPopulationValue = default(double?), double? maxAvgSeedPopulationValue = default(double?), string avgSeedPopulationUnit = null, System.DateTimeOffset? minPlantingDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxPlantingDateTime = default(System.DateTimeOffset?), System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetSeasonalFieldsAsync(System.Collections.Generic.IEnumerable<string> farmIds = null, System.Collections.Generic.IEnumerable<string> fieldIds = null, System.Collections.Generic.IEnumerable<string> seasonIds = null, System.Collections.Generic.IEnumerable<string> cropVarietyIds = null, System.Collections.Generic.IEnumerable<string> cropIds = null, double? minAvgYieldValue = default(double?), double? maxAvgYieldValue = default(double?), string avgYieldUnit = null, double? minAvgSeedPopulationValue = default(double?), double? maxAvgSeedPopulationValue = default(double?), string avgSeedPopulationUnit = null, System.DateTimeOffset? minPlantingDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxPlantingDateTime = default(System.DateTimeOffset?), System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetSeasonalFieldsByFarmerId(string farmerId, System.Collections.Generic.IEnumerable<string> farmIds = null, System.Collections.Generic.IEnumerable<string> fieldIds = null, System.Collections.Generic.IEnumerable<string> seasonIds = null, System.Collections.Generic.IEnumerable<string> cropVarietyIds = null, System.Collections.Generic.IEnumerable<string> cropIds = null, double? minAvgYieldValue = default(double?), double? maxAvgYieldValue = default(double?), string avgYieldUnit = null, double? minAvgSeedPopulationValue = default(double?), double? maxAvgSeedPopulationValue = default(double?), string avgSeedPopulationUnit = null, System.DateTimeOffset? minPlantingDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxPlantingDateTime = default(System.DateTimeOffset?), System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetSeasonalFieldsByFarmerIdAsync(string farmerId, System.Collections.Generic.IEnumerable<string> farmIds = null, System.Collections.Generic.IEnumerable<string> fieldIds = null, System.Collections.Generic.IEnumerable<string> seasonIds = null, System.Collections.Generic.IEnumerable<string> cropVarietyIds = null, System.Collections.Generic.IEnumerable<string> cropIds = null, double? minAvgYieldValue = default(double?), double? maxAvgYieldValue = default(double?), string avgYieldUnit = null, double? minAvgSeedPopulationValue = default(double?), double? maxAvgSeedPopulationValue = default(double?), string avgSeedPopulationUnit = null, System.DateTimeOffset? minPlantingDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxPlantingDateTime = default(System.DateTimeOffset?), System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
    }
    public partial class SeasonsClient
    {
        protected SeasonsClient() { }
        public SeasonsClient(System.Uri endpoint, Azure.Core.TokenCredential credential, Azure.Verticals.AgriFood.Farming.FarmBeatsClientOptions options = null) { }
        public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get { throw null; } }
        public virtual Azure.Response CreateOrUpdate(string seasonId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> CreateOrUpdateAsync(string seasonId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response Delete(string seasonId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> DeleteAsync(string seasonId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetSeason(string seasonId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetSeasonAsync(string seasonId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetSeasons(System.DateTimeOffset? minStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxEndDateTime = default(System.DateTimeOffset?), System.Collections.Generic.IEnumerable<int> years = null, System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetSeasonsAsync(System.DateTimeOffset? minStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxEndDateTime = default(System.DateTimeOffset?), System.Collections.Generic.IEnumerable<int> years = null, System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
    }
    public partial class TillageDataClient
    {
        protected TillageDataClient() { }
        public TillageDataClient(System.Uri endpoint, Azure.Core.TokenCredential credential, Azure.Verticals.AgriFood.Farming.FarmBeatsClientOptions options = null) { }
        public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get { throw null; } }
        public virtual Azure.Response CreateOrUpdate(string farmerId, string tillageDataId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> CreateOrUpdateAsync(string farmerId, string tillageDataId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response Delete(string farmerId, string tillageDataId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> DeleteAsync(string farmerId, string tillageDataId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetAllTillageData(double? minTillageDepth = default(double?), double? maxTillageDepth = default(double?), double? minTillagePressure = default(double?), double? maxTillagePressure = default(double?), System.Collections.Generic.IEnumerable<string> sources = null, System.Collections.Generic.IEnumerable<string> associatedBoundaryIds = null, System.Collections.Generic.IEnumerable<string> operationBoundaryIds = null, System.DateTimeOffset? minOperationStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minOperationEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minOperationModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationModifiedDateTime = default(System.DateTimeOffset?), double? minArea = default(double?), double? maxArea = default(double?), System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetAllTillageDataAsync(double? minTillageDepth = default(double?), double? maxTillageDepth = default(double?), double? minTillagePressure = default(double?), double? maxTillagePressure = default(double?), System.Collections.Generic.IEnumerable<string> sources = null, System.Collections.Generic.IEnumerable<string> associatedBoundaryIds = null, System.Collections.Generic.IEnumerable<string> operationBoundaryIds = null, System.DateTimeOffset? minOperationStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minOperationEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minOperationModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationModifiedDateTime = default(System.DateTimeOffset?), double? minArea = default(double?), double? maxArea = default(double?), System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetAllTillageDataByFarmerId(string farmerId, double? minTillageDepth = default(double?), double? maxTillageDepth = default(double?), double? minTillagePressure = default(double?), double? maxTillagePressure = default(double?), System.Collections.Generic.IEnumerable<string> sources = null, System.Collections.Generic.IEnumerable<string> associatedBoundaryIds = null, System.Collections.Generic.IEnumerable<string> operationBoundaryIds = null, System.DateTimeOffset? minOperationStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minOperationEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minOperationModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationModifiedDateTime = default(System.DateTimeOffset?), double? minArea = default(double?), double? maxArea = default(double?), System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetAllTillageDataByFarmerIdAsync(string farmerId, double? minTillageDepth = default(double?), double? maxTillageDepth = default(double?), double? minTillagePressure = default(double?), double? maxTillagePressure = default(double?), System.Collections.Generic.IEnumerable<string> sources = null, System.Collections.Generic.IEnumerable<string> associatedBoundaryIds = null, System.Collections.Generic.IEnumerable<string> operationBoundaryIds = null, System.DateTimeOffset? minOperationStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minOperationEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minOperationModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationModifiedDateTime = default(System.DateTimeOffset?), double? minArea = default(double?), double? maxArea = default(double?), System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetTillageData(string farmerId, string tillageDataId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetTillageDataAsync(string farmerId, string tillageDataId, Azure.RequestContext context = null) { throw null; }
    }
    public partial class WeatherClient
    {
        protected WeatherClient() { }
        public WeatherClient(System.Uri endpoint, Azure.Core.TokenCredential credential, Azure.Verticals.AgriFood.Farming.FarmBeatsClientOptions options = null) { }
        public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get { throw null; } }
        public virtual Azure.Operation<System.BinaryData> CreateDataDeleteJob(bool waitForCompletion, string jobId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Operation<System.BinaryData>> CreateDataDeleteJobAsync(bool waitForCompletion, string jobId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Operation<System.BinaryData> CreateDataIngestionJob(bool waitForCompletion, string jobId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Operation<System.BinaryData>> CreateDataIngestionJobAsync(bool waitForCompletion, string jobId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetDataDeleteJobDetails(string jobId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetDataDeleteJobDetailsAsync(string jobId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetDataIngestionJobDetails(string jobId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetDataIngestionJobDetailsAsync(string jobId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetWeathers(string farmerId, string boundaryId, string extensionId, string weatherDataType, string granularity, System.DateTimeOffset? startDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? endDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetWeathersAsync(string farmerId, string boundaryId, string extensionId, string weatherDataType, string granularity, System.DateTimeOffset? startDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? endDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
    }
}
