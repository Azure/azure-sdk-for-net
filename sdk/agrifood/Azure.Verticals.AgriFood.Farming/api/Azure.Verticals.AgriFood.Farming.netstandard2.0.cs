namespace Azure.Verticals.AgriFood.Farming
{
    public partial class ApplicationData
    {
        protected ApplicationData() { }
        public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get { throw null; } }
        public virtual Azure.Operation<System.BinaryData> CreateCascadeDeleteJob(Azure.WaitUntil waitUntil, string jobId, string farmerId, string applicationDataId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Operation<System.BinaryData>> CreateCascadeDeleteJobAsync(Azure.WaitUntil waitUntil, string jobId, string farmerId, string applicationDataId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response CreateOrUpdate(string farmerId, string applicationDataId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> CreateOrUpdateAsync(string farmerId, string applicationDataId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response Delete(string farmerId, string applicationDataId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> DeleteAsync(string farmerId, string applicationDataId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetAllApplicationData(double? minAvgMaterial = default(double?), double? maxAvgMaterial = default(double?), double? minTotalMaterial = default(double?), double? maxTotalMaterial = default(double?), System.Collections.Generic.IEnumerable<string> sources = null, System.Collections.Generic.IEnumerable<string> associatedBoundaryIds = null, System.DateTimeOffset? minOperationStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minOperationEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minOperationModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationModifiedDateTime = default(System.DateTimeOffset?), double? minArea = default(double?), double? maxArea = default(double?), System.Collections.Generic.IEnumerable<string> applicationIds = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetAllApplicationDataAsync(double? minAvgMaterial = default(double?), double? maxAvgMaterial = default(double?), double? minTotalMaterial = default(double?), double? maxTotalMaterial = default(double?), System.Collections.Generic.IEnumerable<string> sources = null, System.Collections.Generic.IEnumerable<string> associatedBoundaryIds = null, System.DateTimeOffset? minOperationStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minOperationEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minOperationModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationModifiedDateTime = default(System.DateTimeOffset?), double? minArea = default(double?), double? maxArea = default(double?), System.Collections.Generic.IEnumerable<string> applicationIds = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetAllApplicationDataByFarmerId(string farmerId, double? minAvgMaterial = default(double?), double? maxAvgMaterial = default(double?), double? minTotalMaterial = default(double?), double? maxTotalMaterial = default(double?), System.Collections.Generic.IEnumerable<string> sources = null, System.Collections.Generic.IEnumerable<string> associatedBoundaryIds = null, System.DateTimeOffset? minOperationStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minOperationEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minOperationModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationModifiedDateTime = default(System.DateTimeOffset?), double? minArea = default(double?), double? maxArea = default(double?), System.Collections.Generic.IEnumerable<string> applicationIds = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetAllApplicationDataByFarmerIdAsync(string farmerId, double? minAvgMaterial = default(double?), double? maxAvgMaterial = default(double?), double? minTotalMaterial = default(double?), double? maxTotalMaterial = default(double?), System.Collections.Generic.IEnumerable<string> sources = null, System.Collections.Generic.IEnumerable<string> associatedBoundaryIds = null, System.DateTimeOffset? minOperationStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minOperationEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minOperationModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationModifiedDateTime = default(System.DateTimeOffset?), double? minArea = default(double?), double? maxArea = default(double?), System.Collections.Generic.IEnumerable<string> applicationIds = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetApplicationData(string farmerId, string applicationDataId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetApplicationDataAsync(string farmerId, string applicationDataId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetCascadeDeleteJobDetails(string jobId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetCascadeDeleteJobDetailsAsync(string jobId, Azure.RequestContext context = null) { throw null; }
    }
    public partial class Attachments
    {
        protected Attachments() { }
        public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get { throw null; } }
        public virtual Azure.Response CreateOrUpdate(string farmerId, string attachmentId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> CreateOrUpdateAsync(string farmerId, string attachmentId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response Delete(string farmerId, string attachmentId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> DeleteAsync(string farmerId, string attachmentId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response Download(string farmerId, string attachmentId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> DownloadAsync(string farmerId, string attachmentId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetAttachment(string farmerId, string attachmentId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetAttachmentAsync(string farmerId, string attachmentId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetAttachmentsByFarmerId(string farmerId, System.Collections.Generic.IEnumerable<string> resourceIds = null, System.Collections.Generic.IEnumerable<string> resourceTypes = null, System.Collections.Generic.IEnumerable<string> attachmentIds = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetAttachmentsByFarmerIdAsync(string farmerId, System.Collections.Generic.IEnumerable<string> resourceIds = null, System.Collections.Generic.IEnumerable<string> resourceTypes = null, System.Collections.Generic.IEnumerable<string> attachmentIds = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
    }
    public partial class Boundaries
    {
        protected Boundaries() { }
        public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get { throw null; } }
        public virtual Azure.Operation<System.BinaryData> CreateCascadeDeleteJob(Azure.WaitUntil waitUntil, string jobId, string farmerId, string boundaryId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Operation<System.BinaryData>> CreateCascadeDeleteJobAsync(Azure.WaitUntil waitUntil, string jobId, string farmerId, string boundaryId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response CreateOrUpdate(string farmerId, string boundaryId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> CreateOrUpdateAsync(string farmerId, string boundaryId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response Delete(string farmerId, string boundaryId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> DeleteAsync(string farmerId, string boundaryId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetBoundaries(bool? isPrimary = default(bool?), string parentType = null, System.Collections.Generic.IEnumerable<string> parentIds = null, double? minAcreage = default(double?), double? maxAcreage = default(double?), System.Collections.Generic.IEnumerable<string> boundaryIds = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetBoundariesAsync(bool? isPrimary = default(bool?), string parentType = null, System.Collections.Generic.IEnumerable<string> parentIds = null, double? minAcreage = default(double?), double? maxAcreage = default(double?), System.Collections.Generic.IEnumerable<string> boundaryIds = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetBoundariesByFarmerId(string farmerId, bool? isPrimary = default(bool?), string parentType = null, System.Collections.Generic.IEnumerable<string> parentIds = null, double? minAcreage = default(double?), double? maxAcreage = default(double?), System.Collections.Generic.IEnumerable<string> boundaryIds = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetBoundariesByFarmerIdAsync(string farmerId, bool? isPrimary = default(bool?), string parentType = null, System.Collections.Generic.IEnumerable<string> parentIds = null, double? minAcreage = default(double?), double? maxAcreage = default(double?), System.Collections.Generic.IEnumerable<string> boundaryIds = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetBoundary(string farmerId, string boundaryId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetBoundaryAsync(string farmerId, string boundaryId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetCascadeDeleteJobDetails(string jobId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetCascadeDeleteJobDetailsAsync(string jobId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetOverlap(string farmerId, string boundaryId, string otherFarmerId, string otherBoundaryId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetOverlapAsync(string farmerId, string boundaryId, string otherFarmerId, string otherBoundaryId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> Search(Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> SearchAsync(Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> SearchByFarmerId(string farmerId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> SearchByFarmerIdAsync(string farmerId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
    }
    public partial class Crops
    {
        protected Crops() { }
        public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get { throw null; } }
        public virtual Azure.Response CreateOrUpdate(string cropId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> CreateOrUpdateAsync(string cropId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response Delete(string cropId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> DeleteAsync(string cropId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetCrop(string cropId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetCropAsync(string cropId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetCrops(System.Collections.Generic.IEnumerable<string> phenotypes = null, System.Collections.Generic.IEnumerable<string> cropIds = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetCropsAsync(System.Collections.Generic.IEnumerable<string> phenotypes = null, System.Collections.Generic.IEnumerable<string> cropIds = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
    }
    public partial class CropVarieties
    {
        protected CropVarieties() { }
        public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get { throw null; } }
        public virtual Azure.Response CreateOrUpdate(string cropVarietyId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> CreateOrUpdateAsync(string cropVarietyId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response Delete(string cropVarietyId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> DeleteAsync(string cropVarietyId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetCropVarieties(System.Collections.Generic.IEnumerable<string> cropIds = null, System.Collections.Generic.IEnumerable<string> brands = null, System.Collections.Generic.IEnumerable<string> products = null, System.Collections.Generic.IEnumerable<string> cropVarietyIds = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetCropVarietiesAsync(System.Collections.Generic.IEnumerable<string> cropIds = null, System.Collections.Generic.IEnumerable<string> brands = null, System.Collections.Generic.IEnumerable<string> products = null, System.Collections.Generic.IEnumerable<string> cropVarietyIds = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetCropVariety(string cropVarietyId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetCropVarietyAsync(string cropVarietyId, Azure.RequestContext context = null) { throw null; }
    }
    public partial class DeviceDataModels
    {
        protected DeviceDataModels() { }
        public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get { throw null; } }
        public virtual Azure.Response CreateOrUpdate(string sensorPartnerId, string deviceDataModelId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> CreateOrUpdateAsync(string sensorPartnerId, string deviceDataModelId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response Delete(string sensorPartnerId, string deviceDataModelId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> DeleteAsync(string sensorPartnerId, string deviceDataModelId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetDeviceDataModel(string sensorPartnerId, string deviceDataModelId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetDeviceDataModelAsync(string sensorPartnerId, string deviceDataModelId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetDeviceDataModels(string sensorPartnerId, System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetDeviceDataModelsAsync(string sensorPartnerId, System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
    }
    public partial class Devices
    {
        protected Devices() { }
        public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get { throw null; } }
        public virtual Azure.Response CreateOrUpdate(string sensorPartnerId, string deviceId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> CreateOrUpdateAsync(string sensorPartnerId, string deviceId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response Delete(string sensorPartnerId, string deviceId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> DeleteAsync(string sensorPartnerId, string deviceId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetDevice(string sensorPartnerId, string deviceId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetDeviceAsync(string sensorPartnerId, string deviceId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetDevices(string sensorPartnerId, System.Collections.Generic.IEnumerable<string> parentDeviceIds = null, System.Collections.Generic.IEnumerable<string> deviceDataModelIds = null, System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetDevicesAsync(string sensorPartnerId, System.Collections.Generic.IEnumerable<string> parentDeviceIds = null, System.Collections.Generic.IEnumerable<string> deviceDataModelIds = null, System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
    }
    public partial class FarmBeatsClient
    {
        protected FarmBeatsClient() { }
        public FarmBeatsClient(Azure.Core.TokenCredential credential) { }
        public FarmBeatsClient(Azure.Core.TokenCredential credential, System.Uri endpoint, Azure.Verticals.AgriFood.Farming.FarmBeatsClientOptions options) { }
        public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get { throw null; } }
        public virtual Azure.Verticals.AgriFood.Farming.ApplicationData GetApplicationDataClient(string apiVersion = "2021-07-31-preview") { throw null; }
        public virtual Azure.Verticals.AgriFood.Farming.Attachments GetAttachmentsClient(string apiVersion = "2021-07-31-preview") { throw null; }
        public virtual Azure.Verticals.AgriFood.Farming.Boundaries GetBoundariesClient(string apiVersion = "2021-07-31-preview") { throw null; }
        public virtual Azure.Verticals.AgriFood.Farming.Crops GetCropsClient(string apiVersion = "2021-07-31-preview") { throw null; }
        public virtual Azure.Verticals.AgriFood.Farming.CropVarieties GetCropVarietiesClient(string apiVersion = "2021-07-31-preview") { throw null; }
        public virtual Azure.Verticals.AgriFood.Farming.DeviceDataModels GetDeviceDataModelsClient(string apiVersion = "2021-07-31-preview") { throw null; }
        public virtual Azure.Verticals.AgriFood.Farming.Devices GetDevicesClient(string apiVersion = "2021-07-31-preview") { throw null; }
        public virtual Azure.Verticals.AgriFood.Farming.FarmerOAuthTokens GetFarmerOAuthTokensClient(string apiVersion = "2021-07-31-preview") { throw null; }
        public virtual Azure.Verticals.AgriFood.Farming.Farmers GetFarmersClient(string apiVersion = "2021-07-31-preview") { throw null; }
        public virtual Azure.Verticals.AgriFood.Farming.FarmOperationsDataIngestion GetFarmOperationsDataIngestionClient(string apiVersion = "2021-07-31-preview") { throw null; }
        public virtual Azure.Verticals.AgriFood.Farming.Farms GetFarmsClient(string apiVersion = "2021-07-31-preview") { throw null; }
        public virtual Azure.Verticals.AgriFood.Farming.Fields GetFieldsClient(string apiVersion = "2021-07-31-preview") { throw null; }
        public virtual Azure.Verticals.AgriFood.Farming.HarvestData GetHarvestDataClient(string apiVersion = "2021-07-31-preview") { throw null; }
        public virtual Azure.Verticals.AgriFood.Farming.ImageProcessing GetImageProcessingClient(string apiVersion = "2021-07-31-preview") { throw null; }
        public virtual Azure.Verticals.AgriFood.Farming.InsightAttachments GetInsightAttachmentsClient(string apiVersion = "2021-07-31-preview") { throw null; }
        public virtual Azure.Verticals.AgriFood.Farming.Insights GetInsightsClient(string apiVersion = "2021-07-31-preview") { throw null; }
        public virtual Azure.Verticals.AgriFood.Farming.ManagementZones GetManagementZonesClient(string apiVersion = "2021-07-31-preview") { throw null; }
        public virtual Azure.Verticals.AgriFood.Farming.ModelInference GetModelInferenceClient(string apiVersion = "2021-07-31-preview") { throw null; }
        public virtual Azure.Verticals.AgriFood.Farming.NutrientAnalyses GetNutrientAnalysesClient(string apiVersion = "2021-07-31-preview") { throw null; }
        public virtual Azure.Verticals.AgriFood.Farming.OAuthProviders GetOAuthProvidersClient(string apiVersion = "2021-07-31-preview") { throw null; }
        public virtual Azure.Verticals.AgriFood.Farming.PlantingData GetPlantingDataClient(string apiVersion = "2021-07-31-preview") { throw null; }
        public virtual Azure.Verticals.AgriFood.Farming.PlantTissueAnalyses GetPlantTissueAnalysesClient(string apiVersion = "2021-07-31-preview") { throw null; }
        public virtual Azure.Verticals.AgriFood.Farming.PrescriptionMaps GetPrescriptionMapsClient(string apiVersion = "2021-07-31-preview") { throw null; }
        public virtual Azure.Verticals.AgriFood.Farming.Prescriptions GetPrescriptionsClient(string apiVersion = "2021-07-31-preview") { throw null; }
        public virtual Azure.Verticals.AgriFood.Farming.Scenes GetScenesClient(string apiVersion = "2021-07-31-preview") { throw null; }
        public virtual Azure.Verticals.AgriFood.Farming.SeasonalFields GetSeasonalFieldsClient(string apiVersion = "2021-07-31-preview") { throw null; }
        public virtual Azure.Verticals.AgriFood.Farming.Seasons GetSeasonsClient(string apiVersion = "2021-07-31-preview") { throw null; }
        public virtual Azure.Verticals.AgriFood.Farming.SensorDataModels GetSensorDataModelsClient(string apiVersion = "2021-07-31-preview") { throw null; }
        public virtual Azure.Verticals.AgriFood.Farming.SensorEvents GetSensorEventsClient(string apiVersion = "2021-07-31-preview") { throw null; }
        public virtual Azure.Verticals.AgriFood.Farming.SensorMappings GetSensorMappingsClient(string apiVersion = "2021-07-31-preview") { throw null; }
        public virtual Azure.Verticals.AgriFood.Farming.SensorPartnerIntegrations GetSensorPartnerIntegrationsClient(string apiVersion = "2021-07-31-preview") { throw null; }
        public virtual Azure.Verticals.AgriFood.Farming.Sensors GetSensorsClient(string apiVersion = "2021-07-31-preview") { throw null; }
        public virtual Azure.Verticals.AgriFood.Farming.SolutionInference GetSolutionInferenceClient(string apiVersion = "2021-07-31-preview") { throw null; }
        public virtual Azure.Verticals.AgriFood.Farming.TillageData GetTillageDataClient(string apiVersion = "2021-07-31-preview") { throw null; }
        public virtual Azure.Verticals.AgriFood.Farming.Weather GetWeatherClient(string apiVersion = "2021-07-31-preview") { throw null; }
        public virtual Azure.Verticals.AgriFood.Farming.Zones GetZonesClient(string apiVersion = "2021-07-31-preview") { throw null; }
    }
    public partial class FarmBeatsClientOptions : Azure.Core.ClientOptions
    {
        public FarmBeatsClientOptions(Azure.Verticals.AgriFood.Farming.FarmBeatsClientOptions.ServiceVersion version = Azure.Verticals.AgriFood.Farming.FarmBeatsClientOptions.ServiceVersion.V2021_07_31_Preview) { }
        public enum ServiceVersion
        {
            V2021_07_31_Preview = 1,
        }
    }
    public partial class FarmerOAuthTokens
    {
        protected FarmerOAuthTokens() { }
        public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get { throw null; } }
        public virtual Azure.Operation<System.BinaryData> CreateCascadeDeleteJob(Azure.WaitUntil waitUntil, string jobId, string farmerId, string oauthProviderId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Operation<System.BinaryData>> CreateCascadeDeleteJobAsync(Azure.WaitUntil waitUntil, string jobId, string farmerId, string oauthProviderId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetAuthenticatedFarmersDetails(System.Collections.Generic.IEnumerable<string> authProviderIds = null, System.Collections.Generic.IEnumerable<string> farmerIds = null, bool? isValid = default(bool?), System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetAuthenticatedFarmersDetailsAsync(System.Collections.Generic.IEnumerable<string> authProviderIds = null, System.Collections.Generic.IEnumerable<string> farmerIds = null, bool? isValid = default(bool?), System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetCascadeDeleteJobDetails(string jobId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetCascadeDeleteJobDetailsAsync(string jobId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetOAuthConnectionLink(Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetOAuthConnectionLinkAsync(Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
    }
    public partial class Farmers
    {
        protected Farmers() { }
        public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get { throw null; } }
        public virtual Azure.Operation<System.BinaryData> CreateCascadeDeleteJob(Azure.WaitUntil waitUntil, string jobId, string farmerId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Operation<System.BinaryData>> CreateCascadeDeleteJobAsync(Azure.WaitUntil waitUntil, string jobId, string farmerId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response CreateOrUpdate(string farmerId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> CreateOrUpdateAsync(string farmerId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response Delete(string farmerId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> DeleteAsync(string farmerId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetCascadeDeleteJobDetails(string jobId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetCascadeDeleteJobDetailsAsync(string jobId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetFarmer(string farmerId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetFarmerAsync(string farmerId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetFarmers(System.Collections.Generic.IEnumerable<string> farmerIds = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetFarmersAsync(System.Collections.Generic.IEnumerable<string> farmerIds = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
    }
    public partial class FarmOperationsDataIngestion
    {
        protected FarmOperationsDataIngestion() { }
        public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get { throw null; } }
        public virtual Azure.Operation<System.BinaryData> CreateJob(Azure.WaitUntil waitUntil, string jobId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Operation<System.BinaryData>> CreateJobAsync(Azure.WaitUntil waitUntil, string jobId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetJobDetails(string jobId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetJobDetailsAsync(string jobId, Azure.RequestContext context = null) { throw null; }
    }
    public partial class Farms
    {
        protected Farms() { }
        public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get { throw null; } }
        public virtual Azure.Operation<System.BinaryData> CreateCascadeDeleteJob(Azure.WaitUntil waitUntil, string jobId, string farmerId, string farmId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Operation<System.BinaryData>> CreateCascadeDeleteJobAsync(Azure.WaitUntil waitUntil, string jobId, string farmerId, string farmId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response CreateOrUpdate(string farmerId, string farmId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> CreateOrUpdateAsync(string farmerId, string farmId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response Delete(string farmerId, string farmId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> DeleteAsync(string farmerId, string farmId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetCascadeDeleteJobDetails(string jobId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetCascadeDeleteJobDetailsAsync(string jobId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetFarm(string farmerId, string farmId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetFarmAsync(string farmerId, string farmId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetFarms(System.Collections.Generic.IEnumerable<string> farmIds = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetFarmsAsync(System.Collections.Generic.IEnumerable<string> farmIds = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetFarmsByFarmerId(string farmerId, System.Collections.Generic.IEnumerable<string> farmIds = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetFarmsByFarmerIdAsync(string farmerId, System.Collections.Generic.IEnumerable<string> farmIds = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
    }
    public partial class Fields
    {
        protected Fields() { }
        public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get { throw null; } }
        public virtual Azure.Operation<System.BinaryData> CreateCascadeDeleteJob(Azure.WaitUntil waitUntil, string jobId, string farmerId, string fieldId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Operation<System.BinaryData>> CreateCascadeDeleteJobAsync(Azure.WaitUntil waitUntil, string jobId, string farmerId, string fieldId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response CreateOrUpdate(string farmerId, string fieldId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> CreateOrUpdateAsync(string farmerId, string fieldId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response Delete(string farmerId, string fieldId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> DeleteAsync(string farmerId, string fieldId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetCascadeDeleteJobDetails(string jobId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetCascadeDeleteJobDetailsAsync(string jobId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetField(string farmerId, string fieldId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetFieldAsync(string farmerId, string fieldId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetFields(System.Collections.Generic.IEnumerable<string> farmIds = null, System.Collections.Generic.IEnumerable<string> fieldIds = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetFieldsAsync(System.Collections.Generic.IEnumerable<string> farmIds = null, System.Collections.Generic.IEnumerable<string> fieldIds = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetFieldsByFarmerId(string farmerId, System.Collections.Generic.IEnumerable<string> farmIds = null, System.Collections.Generic.IEnumerable<string> fieldIds = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetFieldsByFarmerIdAsync(string farmerId, System.Collections.Generic.IEnumerable<string> farmIds = null, System.Collections.Generic.IEnumerable<string> fieldIds = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
    }
    public partial class HarvestData
    {
        protected HarvestData() { }
        public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get { throw null; } }
        public virtual Azure.Operation<System.BinaryData> CreateCascadeDeleteJob(Azure.WaitUntil waitUntil, string jobId, string farmerId, string harvestDataId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Operation<System.BinaryData>> CreateCascadeDeleteJobAsync(Azure.WaitUntil waitUntil, string jobId, string farmerId, string harvestDataId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response CreateOrUpdate(string farmerId, string harvestDataId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> CreateOrUpdateAsync(string farmerId, string harvestDataId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response Delete(string farmerId, string harvestDataId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> DeleteAsync(string farmerId, string harvestDataId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetAllHarvestData(double? minTotalYield = default(double?), double? maxTotalYield = default(double?), double? minAvgYield = default(double?), double? maxAvgYield = default(double?), double? minTotalWetMass = default(double?), double? maxTotalWetMass = default(double?), double? minAvgWetMass = default(double?), double? maxAvgWetMass = default(double?), double? minAvgMoisture = default(double?), double? maxAvgMoisture = default(double?), double? minAvgSpeed = default(double?), double? maxAvgSpeed = default(double?), System.Collections.Generic.IEnumerable<string> sources = null, System.Collections.Generic.IEnumerable<string> associatedBoundaryIds = null, System.DateTimeOffset? minOperationStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minOperationEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minOperationModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationModifiedDateTime = default(System.DateTimeOffset?), double? minArea = default(double?), double? maxArea = default(double?), System.Collections.Generic.IEnumerable<string> harvestDataIds = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetAllHarvestDataAsync(double? minTotalYield = default(double?), double? maxTotalYield = default(double?), double? minAvgYield = default(double?), double? maxAvgYield = default(double?), double? minTotalWetMass = default(double?), double? maxTotalWetMass = default(double?), double? minAvgWetMass = default(double?), double? maxAvgWetMass = default(double?), double? minAvgMoisture = default(double?), double? maxAvgMoisture = default(double?), double? minAvgSpeed = default(double?), double? maxAvgSpeed = default(double?), System.Collections.Generic.IEnumerable<string> sources = null, System.Collections.Generic.IEnumerable<string> associatedBoundaryIds = null, System.DateTimeOffset? minOperationStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minOperationEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minOperationModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationModifiedDateTime = default(System.DateTimeOffset?), double? minArea = default(double?), double? maxArea = default(double?), System.Collections.Generic.IEnumerable<string> harvestDataIds = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetAllHarvestDataByFarmerId(string farmerId, double? minTotalYield = default(double?), double? maxTotalYield = default(double?), double? minAvgYield = default(double?), double? maxAvgYield = default(double?), double? minTotalWetMass = default(double?), double? maxTotalWetMass = default(double?), double? minAvgWetMass = default(double?), double? maxAvgWetMass = default(double?), double? minAvgMoisture = default(double?), double? maxAvgMoisture = default(double?), double? minAvgSpeed = default(double?), double? maxAvgSpeed = default(double?), System.Collections.Generic.IEnumerable<string> sources = null, System.Collections.Generic.IEnumerable<string> associatedBoundaryIds = null, System.DateTimeOffset? minOperationStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minOperationEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minOperationModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationModifiedDateTime = default(System.DateTimeOffset?), double? minArea = default(double?), double? maxArea = default(double?), System.Collections.Generic.IEnumerable<string> harvestDataIds = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetAllHarvestDataByFarmerIdAsync(string farmerId, double? minTotalYield = default(double?), double? maxTotalYield = default(double?), double? minAvgYield = default(double?), double? maxAvgYield = default(double?), double? minTotalWetMass = default(double?), double? maxTotalWetMass = default(double?), double? minAvgWetMass = default(double?), double? maxAvgWetMass = default(double?), double? minAvgMoisture = default(double?), double? maxAvgMoisture = default(double?), double? minAvgSpeed = default(double?), double? maxAvgSpeed = default(double?), System.Collections.Generic.IEnumerable<string> sources = null, System.Collections.Generic.IEnumerable<string> associatedBoundaryIds = null, System.DateTimeOffset? minOperationStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minOperationEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minOperationModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationModifiedDateTime = default(System.DateTimeOffset?), double? minArea = default(double?), double? maxArea = default(double?), System.Collections.Generic.IEnumerable<string> harvestDataIds = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetCascadeDeleteJobDetails(string jobId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetCascadeDeleteJobDetailsAsync(string jobId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetHarvestData(string farmerId, string harvestDataId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetHarvestDataAsync(string farmerId, string harvestDataId, Azure.RequestContext context = null) { throw null; }
    }
    public partial class ImageProcessing
    {
        protected ImageProcessing() { }
        public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get { throw null; } }
        public virtual Azure.Operation<System.BinaryData> CreateRasterizeJob(Azure.WaitUntil waitUntil, string jobId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Operation<System.BinaryData>> CreateRasterizeJobAsync(Azure.WaitUntil waitUntil, string jobId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetRasterizeJob(string jobId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetRasterizeJobAsync(string jobId, Azure.RequestContext context = null) { throw null; }
    }
    public partial class InsightAttachments
    {
        protected InsightAttachments() { }
        public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get { throw null; } }
        public virtual Azure.Response CreateOrUpdate(string farmerId, string modelId, string resourceType, string resourceId, string insightAttachmentId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> CreateOrUpdateAsync(string farmerId, string modelId, string resourceType, string resourceId, string insightAttachmentId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response Delete(string farmerId, string modelId, string resourceType, string resourceId, string insightAttachmentId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> DeleteAsync(string farmerId, string modelId, string resourceType, string resourceId, string insightAttachmentId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response Download(string farmerId, string modelId, string resourceType, string resourceId, string insightAttachmentId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> DownloadAsync(string farmerId, string modelId, string resourceType, string resourceId, string insightAttachmentId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetInsightAttachment(string farmerId, string modelId, string resourceType, string resourceId, string insightAttachmentId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetInsightAttachmentAsync(string farmerId, string modelId, string resourceType, string resourceId, string insightAttachmentId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetInsightAttachmentsByFarmerIdModelIdAndResource(string farmerId, string modelId, string resourceType, string resourceId, System.Collections.Generic.IEnumerable<string> insightIds = null, System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetInsightAttachmentsByFarmerIdModelIdAndResourceAsync(string farmerId, string modelId, string resourceType, string resourceId, System.Collections.Generic.IEnumerable<string> insightIds = null, System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
    }
    public partial class Insights
    {
        protected Insights() { }
        public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get { throw null; } }
        public virtual Azure.Operation<System.BinaryData> CreateCascadeDeleteJob(Azure.WaitUntil waitUntil, string jobId, string farmerId, string modelId, string resourceType, string resourceId, string insightId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Operation<System.BinaryData>> CreateCascadeDeleteJobAsync(Azure.WaitUntil waitUntil, string jobId, string farmerId, string modelId, string resourceType, string resourceId, string insightId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response CreateOrUpdate(string farmerId, string modelId, string resourceType, string resourceId, string insightId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> CreateOrUpdateAsync(string farmerId, string modelId, string resourceType, string resourceId, string insightId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response Delete(string farmerId, string modelId, string resourceType, string resourceId, string insightId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> DeleteAsync(string farmerId, string modelId, string resourceType, string resourceId, string insightId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetCascadeDeleteJobDetails(string jobId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetCascadeDeleteJobDetailsAsync(string jobId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetInsight(string farmerId, string modelId, string resourceType, string resourceId, string insightId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetInsightAsync(string farmerId, string modelId, string resourceType, string resourceId, string insightId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetInsightsByFarmerIdModelIdAndResource(string farmerId, string modelId, string resourceType, string resourceId, System.DateTimeOffset? minInsightStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxInsightStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minInsightEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxInsightEndDateTime = default(System.DateTimeOffset?), System.Collections.Generic.IEnumerable<string> measureFilters = null, System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetInsightsByFarmerIdModelIdAndResourceAsync(string farmerId, string modelId, string resourceType, string resourceId, System.DateTimeOffset? minInsightStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxInsightStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minInsightEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxInsightEndDateTime = default(System.DateTimeOffset?), System.Collections.Generic.IEnumerable<string> measureFilters = null, System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
    }
    public partial class ManagementZones
    {
        protected ManagementZones() { }
        public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get { throw null; } }
        public virtual Azure.Operation<System.BinaryData> CreateCascadeDeleteJob(Azure.WaitUntil waitUntil, string jobId, string farmerId, string managementZoneId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Operation<System.BinaryData>> CreateCascadeDeleteJobAsync(Azure.WaitUntil waitUntil, string jobId, string farmerId, string managementZoneId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response CreateOrUpdate(string farmerId, string managementZoneId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> CreateOrUpdateAsync(string farmerId, string managementZoneId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response Delete(string farmerId, string managementZoneId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> DeleteAsync(string farmerId, string managementZoneId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetCascadeDeleteJobDetails(string jobId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetCascadeDeleteJobDetailsAsync(string jobId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetManagementZone(string farmerId, string managementZoneId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetManagementZoneAsync(string farmerId, string managementZoneId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetManagementZones(System.Collections.Generic.IEnumerable<string> types = null, System.Collections.Generic.IEnumerable<string> cropIds = null, System.Collections.Generic.IEnumerable<string> seasonIds = null, System.Collections.Generic.IEnumerable<string> fieldIds = null, System.Collections.Generic.IEnumerable<string> sources = null, System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetManagementZonesAsync(System.Collections.Generic.IEnumerable<string> types = null, System.Collections.Generic.IEnumerable<string> cropIds = null, System.Collections.Generic.IEnumerable<string> seasonIds = null, System.Collections.Generic.IEnumerable<string> fieldIds = null, System.Collections.Generic.IEnumerable<string> sources = null, System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetManagementZonesByFarmerId(string farmerId, System.Collections.Generic.IEnumerable<string> types = null, System.Collections.Generic.IEnumerable<string> cropIds = null, System.Collections.Generic.IEnumerable<string> seasonIds = null, System.Collections.Generic.IEnumerable<string> fieldIds = null, System.Collections.Generic.IEnumerable<string> sources = null, System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetManagementZonesByFarmerIdAsync(string farmerId, System.Collections.Generic.IEnumerable<string> types = null, System.Collections.Generic.IEnumerable<string> cropIds = null, System.Collections.Generic.IEnumerable<string> seasonIds = null, System.Collections.Generic.IEnumerable<string> fieldIds = null, System.Collections.Generic.IEnumerable<string> sources = null, System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
    }
    public partial class ModelInference
    {
        protected ModelInference() { }
        public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get { throw null; } }
        public virtual Azure.Operation<System.BinaryData> CreateBiomassModelJob(Azure.WaitUntil waitUntil, string jobId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Operation<System.BinaryData>> CreateBiomassModelJobAsync(Azure.WaitUntil waitUntil, string jobId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Operation<System.BinaryData> CreateSoilMoistureModelJob(Azure.WaitUntil waitUntil, string jobId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Operation<System.BinaryData>> CreateSoilMoistureModelJobAsync(Azure.WaitUntil waitUntil, string jobId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetBiomassModelJob(string jobId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetBiomassModelJobAsync(string jobId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetSoilMoistureModelJob(string jobId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetSoilMoistureModelJobAsync(string jobId, Azure.RequestContext context = null) { throw null; }
    }
    public partial class NutrientAnalyses
    {
        protected NutrientAnalyses() { }
        public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get { throw null; } }
        public virtual Azure.Response CreateOrUpdate(string farmerId, string nutrientAnalysisId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> CreateOrUpdateAsync(string farmerId, string nutrientAnalysisId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response Delete(string farmerId, string nutrientAnalysisId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> DeleteAsync(string farmerId, string nutrientAnalysisId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetNutrientAnalyses(string parentType = null, System.Collections.Generic.IEnumerable<string> parentIds = null, System.Collections.Generic.IEnumerable<string> classifications = null, System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetNutrientAnalysesAsync(string parentType = null, System.Collections.Generic.IEnumerable<string> parentIds = null, System.Collections.Generic.IEnumerable<string> classifications = null, System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetNutrientAnalysesByFarmerId(string farmerId, string parentType = null, System.Collections.Generic.IEnumerable<string> parentIds = null, System.Collections.Generic.IEnumerable<string> classifications = null, System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetNutrientAnalysesByFarmerIdAsync(string farmerId, string parentType = null, System.Collections.Generic.IEnumerable<string> parentIds = null, System.Collections.Generic.IEnumerable<string> classifications = null, System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetNutrientAnalysis(string farmerId, string nutrientAnalysisId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetNutrientAnalysisAsync(string farmerId, string nutrientAnalysisId, Azure.RequestContext context = null) { throw null; }
    }
    public partial class OAuthProviders
    {
        protected OAuthProviders() { }
        public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get { throw null; } }
        public virtual Azure.Operation<System.BinaryData> CreateCascadeDeleteJob(Azure.WaitUntil waitUntil, string jobId, string oauthProviderId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Operation<System.BinaryData>> CreateCascadeDeleteJobAsync(Azure.WaitUntil waitUntil, string jobId, string oauthProviderId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response CreateOrUpdate(string oauthProviderId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> CreateOrUpdateAsync(string oauthProviderId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response Delete(string oauthProviderId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> DeleteAsync(string oauthProviderId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetCascadeDeleteJobDetails(string jobId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetCascadeDeleteJobDetailsAsync(string jobId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetOAuthProvider(string oauthProviderId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetOAuthProviderAsync(string oauthProviderId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetOAuthProviders(System.Collections.Generic.IEnumerable<string> providerIds = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetOAuthProvidersAsync(System.Collections.Generic.IEnumerable<string> providerIds = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
    }
    public partial class PlantingData
    {
        protected PlantingData() { }
        public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get { throw null; } }
        public virtual Azure.Operation<System.BinaryData> CreateCascadeDeleteJob(Azure.WaitUntil waitUntil, string jobId, string farmerId, string plantingDataId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Operation<System.BinaryData>> CreateCascadeDeleteJobAsync(Azure.WaitUntil waitUntil, string jobId, string farmerId, string plantingDataId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response CreateOrUpdate(string farmerId, string plantingDataId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> CreateOrUpdateAsync(string farmerId, string plantingDataId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response Delete(string farmerId, string plantingDataId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> DeleteAsync(string farmerId, string plantingDataId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetAllPlantingData(double? minAvgPlantingRate = default(double?), double? maxAvgPlantingRate = default(double?), double? minTotalMaterial = default(double?), double? maxTotalMaterial = default(double?), double? minAvgMaterial = default(double?), double? maxAvgMaterial = default(double?), System.Collections.Generic.IEnumerable<string> sources = null, System.Collections.Generic.IEnumerable<string> associatedBoundaryIds = null, System.DateTimeOffset? minOperationStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minOperationEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minOperationModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationModifiedDateTime = default(System.DateTimeOffset?), double? minArea = default(double?), double? maxArea = default(double?), System.Collections.Generic.IEnumerable<string> plantingDataIds = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetAllPlantingDataAsync(double? minAvgPlantingRate = default(double?), double? maxAvgPlantingRate = default(double?), double? minTotalMaterial = default(double?), double? maxTotalMaterial = default(double?), double? minAvgMaterial = default(double?), double? maxAvgMaterial = default(double?), System.Collections.Generic.IEnumerable<string> sources = null, System.Collections.Generic.IEnumerable<string> associatedBoundaryIds = null, System.DateTimeOffset? minOperationStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minOperationEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minOperationModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationModifiedDateTime = default(System.DateTimeOffset?), double? minArea = default(double?), double? maxArea = default(double?), System.Collections.Generic.IEnumerable<string> plantingDataIds = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetAllPlantingDataByFarmerId(string farmerId, double? minAvgPlantingRate = default(double?), double? maxAvgPlantingRate = default(double?), double? minTotalMaterial = default(double?), double? maxTotalMaterial = default(double?), double? minAvgMaterial = default(double?), double? maxAvgMaterial = default(double?), System.Collections.Generic.IEnumerable<string> sources = null, System.Collections.Generic.IEnumerable<string> associatedBoundaryIds = null, System.DateTimeOffset? minOperationStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minOperationEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minOperationModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationModifiedDateTime = default(System.DateTimeOffset?), double? minArea = default(double?), double? maxArea = default(double?), System.Collections.Generic.IEnumerable<string> plantingDataIds = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetAllPlantingDataByFarmerIdAsync(string farmerId, double? minAvgPlantingRate = default(double?), double? maxAvgPlantingRate = default(double?), double? minTotalMaterial = default(double?), double? maxTotalMaterial = default(double?), double? minAvgMaterial = default(double?), double? maxAvgMaterial = default(double?), System.Collections.Generic.IEnumerable<string> sources = null, System.Collections.Generic.IEnumerable<string> associatedBoundaryIds = null, System.DateTimeOffset? minOperationStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minOperationEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minOperationModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationModifiedDateTime = default(System.DateTimeOffset?), double? minArea = default(double?), double? maxArea = default(double?), System.Collections.Generic.IEnumerable<string> plantingDataIds = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetCascadeDeleteJobDetails(string jobId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetCascadeDeleteJobDetailsAsync(string jobId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetPlantingData(string farmerId, string plantingDataId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetPlantingDataAsync(string farmerId, string plantingDataId, Azure.RequestContext context = null) { throw null; }
    }
    public partial class PlantTissueAnalyses
    {
        protected PlantTissueAnalyses() { }
        public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get { throw null; } }
        public virtual Azure.Operation<System.BinaryData> CreateCascadeDeleteJob(Azure.WaitUntil waitUntil, string jobId, string farmerId, string plantTissueAnalysisId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Operation<System.BinaryData>> CreateCascadeDeleteJobAsync(Azure.WaitUntil waitUntil, string jobId, string farmerId, string plantTissueAnalysisId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response CreateOrUpdate(string farmerId, string plantTissueAnalysisId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> CreateOrUpdateAsync(string farmerId, string plantTissueAnalysisId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response Delete(string farmerId, string plantTissueAnalysisId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> DeleteAsync(string farmerId, string plantTissueAnalysisId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetCascadeDeleteJobDetails(string jobId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetCascadeDeleteJobDetailsAsync(string jobId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetPlantTissueAnalyses(System.Collections.Generic.IEnumerable<string> seasonIds = null, System.Collections.Generic.IEnumerable<string> cropIds = null, System.Collections.Generic.IEnumerable<string> cropVarietiesIds = null, System.Collections.Generic.IEnumerable<string> fieldIds = null, System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetPlantTissueAnalysesAsync(System.Collections.Generic.IEnumerable<string> seasonIds = null, System.Collections.Generic.IEnumerable<string> cropIds = null, System.Collections.Generic.IEnumerable<string> cropVarietiesIds = null, System.Collections.Generic.IEnumerable<string> fieldIds = null, System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetPlantTissueAnalysesByFarmerId(string farmerId, System.Collections.Generic.IEnumerable<string> seasonIds = null, System.Collections.Generic.IEnumerable<string> cropIds = null, System.Collections.Generic.IEnumerable<string> cropVarietiesIds = null, System.Collections.Generic.IEnumerable<string> fieldIds = null, System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetPlantTissueAnalysesByFarmerIdAsync(string farmerId, System.Collections.Generic.IEnumerable<string> seasonIds = null, System.Collections.Generic.IEnumerable<string> cropIds = null, System.Collections.Generic.IEnumerable<string> cropVarietiesIds = null, System.Collections.Generic.IEnumerable<string> fieldIds = null, System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetPlantTissueAnalysis(string farmerId, string plantTissueAnalysisId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetPlantTissueAnalysisAsync(string farmerId, string plantTissueAnalysisId, Azure.RequestContext context = null) { throw null; }
    }
    public partial class PrescriptionMaps
    {
        protected PrescriptionMaps() { }
        public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get { throw null; } }
        public virtual Azure.Operation<System.BinaryData> CreateCascadeDeleteJob(Azure.WaitUntil waitUntil, string jobId, string farmerId, string prescriptionMapId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Operation<System.BinaryData>> CreateCascadeDeleteJobAsync(Azure.WaitUntil waitUntil, string jobId, string farmerId, string prescriptionMapId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response CreateOrUpdate(string farmerId, string prescriptionMapId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> CreateOrUpdateAsync(string farmerId, string prescriptionMapId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response Delete(string farmerId, string prescriptionMapId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> DeleteAsync(string farmerId, string prescriptionMapId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetCascadeDeleteJobDetails(string jobId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetCascadeDeleteJobDetailsAsync(string jobId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetPrescriptionMap(string farmerId, string prescriptionMapId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetPrescriptionMapAsync(string farmerId, string prescriptionMapId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetPrescriptionMaps(System.Collections.Generic.IEnumerable<string> types = null, System.Collections.Generic.IEnumerable<string> cropIds = null, System.Collections.Generic.IEnumerable<string> seasonIds = null, System.Collections.Generic.IEnumerable<string> fieldIds = null, System.Collections.Generic.IEnumerable<string> sources = null, System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetPrescriptionMapsAsync(System.Collections.Generic.IEnumerable<string> types = null, System.Collections.Generic.IEnumerable<string> cropIds = null, System.Collections.Generic.IEnumerable<string> seasonIds = null, System.Collections.Generic.IEnumerable<string> fieldIds = null, System.Collections.Generic.IEnumerable<string> sources = null, System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetPrescriptionMapsByFarmerId(string farmerId, System.Collections.Generic.IEnumerable<string> types = null, System.Collections.Generic.IEnumerable<string> cropIds = null, System.Collections.Generic.IEnumerable<string> seasonIds = null, System.Collections.Generic.IEnumerable<string> fieldIds = null, System.Collections.Generic.IEnumerable<string> sources = null, System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetPrescriptionMapsByFarmerIdAsync(string farmerId, System.Collections.Generic.IEnumerable<string> types = null, System.Collections.Generic.IEnumerable<string> cropIds = null, System.Collections.Generic.IEnumerable<string> seasonIds = null, System.Collections.Generic.IEnumerable<string> fieldIds = null, System.Collections.Generic.IEnumerable<string> sources = null, System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
    }
    public partial class Prescriptions
    {
        protected Prescriptions() { }
        public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get { throw null; } }
        public virtual Azure.Operation<System.BinaryData> CreateCascadeDeleteJob(Azure.WaitUntil waitUntil, string jobId, string farmerId, string prescriptionId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Operation<System.BinaryData>> CreateCascadeDeleteJobAsync(Azure.WaitUntil waitUntil, string jobId, string farmerId, string prescriptionId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response CreateOrUpdate(string farmerId, string prescriptionId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> CreateOrUpdateAsync(string farmerId, string prescriptionId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response Delete(string farmerId, string prescriptionId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> DeleteAsync(string farmerId, string prescriptionId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetCascadeDeleteJobDetails(string jobId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetCascadeDeleteJobDetailsAsync(string jobId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetPrescription(string farmerId, string prescriptionId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetPrescriptionAsync(string farmerId, string prescriptionId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetPrescriptions(System.Collections.Generic.IEnumerable<string> prescriptionMapIds = null, System.Collections.Generic.IEnumerable<string> types = null, System.Collections.Generic.IEnumerable<string> productCodes = null, System.Collections.Generic.IEnumerable<string> productNames = null, System.Collections.Generic.IEnumerable<string> sources = null, System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetPrescriptionsAsync(System.Collections.Generic.IEnumerable<string> prescriptionMapIds = null, System.Collections.Generic.IEnumerable<string> types = null, System.Collections.Generic.IEnumerable<string> productCodes = null, System.Collections.Generic.IEnumerable<string> productNames = null, System.Collections.Generic.IEnumerable<string> sources = null, System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetPrescriptionsByFarmerId(string farmerId, System.Collections.Generic.IEnumerable<string> prescriptionMapIds = null, System.Collections.Generic.IEnumerable<string> types = null, System.Collections.Generic.IEnumerable<string> productCodes = null, System.Collections.Generic.IEnumerable<string> productNames = null, System.Collections.Generic.IEnumerable<string> sources = null, System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetPrescriptionsByFarmerIdAsync(string farmerId, System.Collections.Generic.IEnumerable<string> prescriptionMapIds = null, System.Collections.Generic.IEnumerable<string> types = null, System.Collections.Generic.IEnumerable<string> productCodes = null, System.Collections.Generic.IEnumerable<string> productNames = null, System.Collections.Generic.IEnumerable<string> sources = null, System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
    }
    public partial class Scenes
    {
        protected Scenes() { }
        public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get { throw null; } }
        public virtual Azure.Operation<System.BinaryData> CreateSatelliteDataIngestionJob(Azure.WaitUntil waitUntil, string jobId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Operation<System.BinaryData>> CreateSatelliteDataIngestionJobAsync(Azure.WaitUntil waitUntil, string jobId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response Download(string filePath, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> DownloadAsync(string filePath, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetSatelliteDataIngestionJobDetails(string jobId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetSatelliteDataIngestionJobDetailsAsync(string jobId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetScenes(string provider, string farmerId, string boundaryId, string source = null, System.DateTimeOffset? startDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? endDateTime = default(System.DateTimeOffset?), double? maxCloudCoveragePercentage = default(double?), double? maxDarkPixelCoveragePercentage = default(double?), System.Collections.Generic.IEnumerable<string> imageNames = null, System.Collections.Generic.IEnumerable<double> imageResolutions = null, System.Collections.Generic.IEnumerable<string> imageFormats = null, int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetScenesAsync(string provider, string farmerId, string boundaryId, string source = null, System.DateTimeOffset? startDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? endDateTime = default(System.DateTimeOffset?), double? maxCloudCoveragePercentage = default(double?), double? maxDarkPixelCoveragePercentage = default(double?), System.Collections.Generic.IEnumerable<string> imageNames = null, System.Collections.Generic.IEnumerable<double> imageResolutions = null, System.Collections.Generic.IEnumerable<string> imageFormats = null, int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
    }
    public partial class SeasonalFields
    {
        protected SeasonalFields() { }
        public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get { throw null; } }
        public virtual Azure.Operation<System.BinaryData> CreateCascadeDeleteJob(Azure.WaitUntil waitUntil, string jobId, string farmerId, string seasonalFieldId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Operation<System.BinaryData>> CreateCascadeDeleteJobAsync(Azure.WaitUntil waitUntil, string jobId, string farmerId, string seasonalFieldId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response CreateOrUpdate(string farmerId, string seasonalFieldId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> CreateOrUpdateAsync(string farmerId, string seasonalFieldId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response Delete(string farmerId, string seasonalFieldId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> DeleteAsync(string farmerId, string seasonalFieldId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetCascadeDeleteJobDetails(string jobId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetCascadeDeleteJobDetailsAsync(string jobId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetSeasonalField(string farmerId, string seasonalFieldId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetSeasonalFieldAsync(string farmerId, string seasonalFieldId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetSeasonalFields(System.Collections.Generic.IEnumerable<string> farmIds = null, System.Collections.Generic.IEnumerable<string> fieldIds = null, System.Collections.Generic.IEnumerable<string> seasonIds = null, System.Collections.Generic.IEnumerable<string> cropVarietyIds = null, System.Collections.Generic.IEnumerable<string> cropIds = null, double? minAvgYieldValue = default(double?), double? maxAvgYieldValue = default(double?), string avgYieldUnit = null, double? minAvgSeedPopulationValue = default(double?), double? maxAvgSeedPopulationValue = default(double?), string avgSeedPopulationUnit = null, System.DateTimeOffset? minPlantingDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxPlantingDateTime = default(System.DateTimeOffset?), System.Collections.Generic.IEnumerable<string> seasonalFieldIds = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetSeasonalFieldsAsync(System.Collections.Generic.IEnumerable<string> farmIds = null, System.Collections.Generic.IEnumerable<string> fieldIds = null, System.Collections.Generic.IEnumerable<string> seasonIds = null, System.Collections.Generic.IEnumerable<string> cropVarietyIds = null, System.Collections.Generic.IEnumerable<string> cropIds = null, double? minAvgYieldValue = default(double?), double? maxAvgYieldValue = default(double?), string avgYieldUnit = null, double? minAvgSeedPopulationValue = default(double?), double? maxAvgSeedPopulationValue = default(double?), string avgSeedPopulationUnit = null, System.DateTimeOffset? minPlantingDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxPlantingDateTime = default(System.DateTimeOffset?), System.Collections.Generic.IEnumerable<string> seasonalFieldIds = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetSeasonalFieldsByFarmerId(string farmerId, System.Collections.Generic.IEnumerable<string> farmIds = null, System.Collections.Generic.IEnumerable<string> fieldIds = null, System.Collections.Generic.IEnumerable<string> seasonIds = null, System.Collections.Generic.IEnumerable<string> cropVarietyIds = null, System.Collections.Generic.IEnumerable<string> cropIds = null, double? minAvgYieldValue = default(double?), double? maxAvgYieldValue = default(double?), string avgYieldUnit = null, double? minAvgSeedPopulationValue = default(double?), double? maxAvgSeedPopulationValue = default(double?), string avgSeedPopulationUnit = null, System.DateTimeOffset? minPlantingDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxPlantingDateTime = default(System.DateTimeOffset?), System.Collections.Generic.IEnumerable<string> seasonalFieldIds = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetSeasonalFieldsByFarmerIdAsync(string farmerId, System.Collections.Generic.IEnumerable<string> farmIds = null, System.Collections.Generic.IEnumerable<string> fieldIds = null, System.Collections.Generic.IEnumerable<string> seasonIds = null, System.Collections.Generic.IEnumerable<string> cropVarietyIds = null, System.Collections.Generic.IEnumerable<string> cropIds = null, double? minAvgYieldValue = default(double?), double? maxAvgYieldValue = default(double?), string avgYieldUnit = null, double? minAvgSeedPopulationValue = default(double?), double? maxAvgSeedPopulationValue = default(double?), string avgSeedPopulationUnit = null, System.DateTimeOffset? minPlantingDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxPlantingDateTime = default(System.DateTimeOffset?), System.Collections.Generic.IEnumerable<string> seasonalFieldIds = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
    }
    public partial class Seasons
    {
        protected Seasons() { }
        public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get { throw null; } }
        public virtual Azure.Response CreateOrUpdate(string seasonId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> CreateOrUpdateAsync(string seasonId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response Delete(string seasonId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> DeleteAsync(string seasonId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetSeason(string seasonId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetSeasonAsync(string seasonId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetSeasons(System.DateTimeOffset? minStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxEndDateTime = default(System.DateTimeOffset?), System.Collections.Generic.IEnumerable<int> years = null, System.Collections.Generic.IEnumerable<string> seasonIds = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetSeasonsAsync(System.DateTimeOffset? minStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxEndDateTime = default(System.DateTimeOffset?), System.Collections.Generic.IEnumerable<int> years = null, System.Collections.Generic.IEnumerable<string> seasonIds = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
    }
    public partial class SensorDataModels
    {
        protected SensorDataModels() { }
        public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get { throw null; } }
        public virtual Azure.Response CreateOrUpdate(string sensorPartnerId, string sensorDataModelId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> CreateOrUpdateAsync(string sensorPartnerId, string sensorDataModelId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response Delete(string sensorPartnerId, string sensorDataModelId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> DeleteAsync(string sensorPartnerId, string sensorDataModelId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetSensorDataModel(string sensorPartnerId, string sensorDataModelId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetSensorDataModelAsync(string sensorPartnerId, string sensorDataModelId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetSensorDataModels(string sensorPartnerId, System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetSensorDataModelsAsync(string sensorPartnerId, System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
    }
    public partial class SensorEvents
    {
        protected SensorEvents() { }
        public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get { throw null; } }
        public virtual Azure.Response GetSensorEvents(string sensorId, string sensorPartnerId, System.DateTimeOffset? startDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? endDateTime = default(System.DateTimeOffset?), bool? excludeDuplicateEvents = default(bool?), Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetSensorEventsAsync(string sensorId, string sensorPartnerId, System.DateTimeOffset? startDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? endDateTime = default(System.DateTimeOffset?), bool? excludeDuplicateEvents = default(bool?), Azure.RequestContext context = null) { throw null; }
    }
    public partial class SensorMappings
    {
        protected SensorMappings() { }
        public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get { throw null; } }
        public virtual Azure.Response CreateOrUpdate(string sensorMappingId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> CreateOrUpdateAsync(string sensorMappingId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response Delete(string sensorMappingId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> DeleteAsync(string sensorMappingId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetSensorMapping(string sensorMappingId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetSensorMappingAsync(string sensorMappingId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetSensorMappings(System.Collections.Generic.IEnumerable<string> sensorIds = null, System.Collections.Generic.IEnumerable<string> sensorPartnerIds = null, System.Collections.Generic.IEnumerable<string> farmerIds = null, System.Collections.Generic.IEnumerable<string> boundaryIds = null, System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetSensorMappingsAsync(System.Collections.Generic.IEnumerable<string> sensorIds = null, System.Collections.Generic.IEnumerable<string> sensorPartnerIds = null, System.Collections.Generic.IEnumerable<string> farmerIds = null, System.Collections.Generic.IEnumerable<string> boundaryIds = null, System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
    }
    public partial class SensorPartnerIntegrations
    {
        protected SensorPartnerIntegrations() { }
        public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get { throw null; } }
        public virtual Azure.Response CheckConsent(string sensorPartnerId, string integrationId, string key, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> CheckConsentAsync(string sensorPartnerId, string integrationId, string key, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response CreateOrUpdate(string sensorPartnerId, string integrationId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> CreateOrUpdateAsync(string sensorPartnerId, string integrationId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response Delete(string sensorPartnerId, string integrationId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> DeleteAsync(string sensorPartnerId, string integrationId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GenerateConsentLink(string sensorPartnerId, string integrationId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GenerateConsentLinkAsync(string sensorPartnerId, string integrationId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetSensorPartnerIntegration(string sensorPartnerId, string integrationId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetSensorPartnerIntegrationAsync(string sensorPartnerId, string integrationId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetSensorPartnerIntegrations(string sensorPartnerId, System.Collections.Generic.IEnumerable<string> integrationIds = null, System.Collections.Generic.IEnumerable<string> farmerIds = null, System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetSensorPartnerIntegrationsAsync(string sensorPartnerId, System.Collections.Generic.IEnumerable<string> integrationIds = null, System.Collections.Generic.IEnumerable<string> farmerIds = null, System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
    }
    public partial class Sensors
    {
        protected Sensors() { }
        public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get { throw null; } }
        public virtual Azure.Response CreateOrUpdate(string sensorPartnerId, string sensorId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> CreateOrUpdateAsync(string sensorPartnerId, string sensorId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response Delete(string sensorPartnerId, string sensorId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> DeleteAsync(string sensorPartnerId, string sensorId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetConnectionString(string sensorPartnerId, string sensorId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetConnectionStringAsync(string sensorPartnerId, string sensorId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetSensor(string sensorPartnerId, string sensorId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetSensorAsync(string sensorPartnerId, string sensorId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetSensors(string sensorPartnerId, System.Collections.Generic.IEnumerable<string> sensorDataModelIds = null, System.Collections.Generic.IEnumerable<string> sensorMappingIds = null, System.Collections.Generic.IEnumerable<string> deviceIds = null, System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetSensorsAsync(string sensorPartnerId, System.Collections.Generic.IEnumerable<string> sensorDataModelIds = null, System.Collections.Generic.IEnumerable<string> sensorMappingIds = null, System.Collections.Generic.IEnumerable<string> deviceIds = null, System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response RenewConnectionString(string sensorPartnerId, string sensorId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> RenewConnectionStringAsync(string sensorPartnerId, string sensorId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
    }
    public partial class SolutionInference
    {
        protected SolutionInference() { }
        public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get { throw null; } }
        public virtual Azure.Response Cancel(string solutionId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> CancelAsync(string solutionId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Operation<System.BinaryData> CreateOrUpdate(Azure.WaitUntil waitUntil, string solutionId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Operation<System.BinaryData>> CreateOrUpdateAsync(Azure.WaitUntil waitUntil, string solutionId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response Fetch(string solutionId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> FetchAsync(string solutionId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
    }
    public partial class TillageData
    {
        protected TillageData() { }
        public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get { throw null; } }
        public virtual Azure.Operation<System.BinaryData> CreateCascadeDeleteJob(Azure.WaitUntil waitUntil, string jobId, string farmerId, string tillageDataId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Operation<System.BinaryData>> CreateCascadeDeleteJobAsync(Azure.WaitUntil waitUntil, string jobId, string farmerId, string tillageDataId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response CreateOrUpdate(string farmerId, string tillageDataId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> CreateOrUpdateAsync(string farmerId, string tillageDataId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response Delete(string farmerId, string tillageDataId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> DeleteAsync(string farmerId, string tillageDataId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetAllTillageData(double? minTillageDepth = default(double?), double? maxTillageDepth = default(double?), double? minTillagePressure = default(double?), double? maxTillagePressure = default(double?), System.Collections.Generic.IEnumerable<string> sources = null, System.Collections.Generic.IEnumerable<string> associatedBoundaryIds = null, System.DateTimeOffset? minOperationStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minOperationEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minOperationModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationModifiedDateTime = default(System.DateTimeOffset?), double? minArea = default(double?), double? maxArea = default(double?), System.Collections.Generic.IEnumerable<string> tillageDataIds = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetAllTillageDataAsync(double? minTillageDepth = default(double?), double? maxTillageDepth = default(double?), double? minTillagePressure = default(double?), double? maxTillagePressure = default(double?), System.Collections.Generic.IEnumerable<string> sources = null, System.Collections.Generic.IEnumerable<string> associatedBoundaryIds = null, System.DateTimeOffset? minOperationStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minOperationEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minOperationModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationModifiedDateTime = default(System.DateTimeOffset?), double? minArea = default(double?), double? maxArea = default(double?), System.Collections.Generic.IEnumerable<string> tillageDataIds = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetAllTillageDataByFarmerId(string farmerId, double? minTillageDepth = default(double?), double? maxTillageDepth = default(double?), double? minTillagePressure = default(double?), double? maxTillagePressure = default(double?), System.Collections.Generic.IEnumerable<string> sources = null, System.Collections.Generic.IEnumerable<string> associatedBoundaryIds = null, System.DateTimeOffset? minOperationStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minOperationEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minOperationModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationModifiedDateTime = default(System.DateTimeOffset?), double? minArea = default(double?), double? maxArea = default(double?), System.Collections.Generic.IEnumerable<string> tillageDataIds = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetAllTillageDataByFarmerIdAsync(string farmerId, double? minTillageDepth = default(double?), double? maxTillageDepth = default(double?), double? minTillagePressure = default(double?), double? maxTillagePressure = default(double?), System.Collections.Generic.IEnumerable<string> sources = null, System.Collections.Generic.IEnumerable<string> associatedBoundaryIds = null, System.DateTimeOffset? minOperationStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationStartDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minOperationEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationEndDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minOperationModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxOperationModifiedDateTime = default(System.DateTimeOffset?), double? minArea = default(double?), double? maxArea = default(double?), System.Collections.Generic.IEnumerable<string> tillageDataIds = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetCascadeDeleteJobDetails(string jobId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetCascadeDeleteJobDetailsAsync(string jobId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetTillageData(string farmerId, string tillageDataId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetTillageDataAsync(string farmerId, string tillageDataId, Azure.RequestContext context = null) { throw null; }
    }
    public partial class Weather
    {
        protected Weather() { }
        public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get { throw null; } }
        public virtual Azure.Operation<System.BinaryData> CreateDataDeleteJob(Azure.WaitUntil waitUntil, string jobId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Operation<System.BinaryData>> CreateDataDeleteJobAsync(Azure.WaitUntil waitUntil, string jobId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Operation<System.BinaryData> CreateDataIngestionJob(Azure.WaitUntil waitUntil, string jobId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Operation<System.BinaryData>> CreateDataIngestionJobAsync(Azure.WaitUntil waitUntil, string jobId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetDataDeleteJobDetails(string jobId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetDataDeleteJobDetailsAsync(string jobId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetDataIngestionJobDetails(string jobId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetDataIngestionJobDetailsAsync(string jobId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetWeathers(string farmerId, string boundaryId, string extensionId, string weatherDataType, string granularity, System.DateTimeOffset? startDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? endDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetWeathersAsync(string farmerId, string boundaryId, string extensionId, string weatherDataType, string granularity, System.DateTimeOffset? startDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? endDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
    }
    public partial class Zones
    {
        protected Zones() { }
        public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get { throw null; } }
        public virtual Azure.Operation<System.BinaryData> CreateCascadeDeleteJob(Azure.WaitUntil waitUntil, string jobId, string farmerId, string zoneId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Operation<System.BinaryData>> CreateCascadeDeleteJobAsync(Azure.WaitUntil waitUntil, string jobId, string farmerId, string zoneId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response CreateOrUpdate(string farmerId, string zoneId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> CreateOrUpdateAsync(string farmerId, string zoneId, Azure.Core.RequestContent content, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response Delete(string farmerId, string zoneId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> DeleteAsync(string farmerId, string zoneId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetCascadeDeleteJobDetails(string jobId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetCascadeDeleteJobDetailsAsync(string jobId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Response GetZone(string farmerId, string zoneId, Azure.RequestContext context = null) { throw null; }
        public virtual System.Threading.Tasks.Task<Azure.Response> GetZoneAsync(string farmerId, string zoneId, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetZones(System.Collections.Generic.IEnumerable<string> types = null, System.Collections.Generic.IEnumerable<string> managementZoneIds = null, System.Collections.Generic.IEnumerable<string> sources = null, System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetZonesAsync(System.Collections.Generic.IEnumerable<string> types = null, System.Collections.Generic.IEnumerable<string> managementZoneIds = null, System.Collections.Generic.IEnumerable<string> sources = null, System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.Pageable<System.BinaryData> GetZonesByFarmerId(string farmerId, System.Collections.Generic.IEnumerable<string> types = null, System.Collections.Generic.IEnumerable<string> managementZoneIds = null, System.Collections.Generic.IEnumerable<string> sources = null, System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
        public virtual Azure.AsyncPageable<System.BinaryData> GetZonesByFarmerIdAsync(string farmerId, System.Collections.Generic.IEnumerable<string> types = null, System.Collections.Generic.IEnumerable<string> managementZoneIds = null, System.Collections.Generic.IEnumerable<string> sources = null, System.Collections.Generic.IEnumerable<string> ids = null, System.Collections.Generic.IEnumerable<string> names = null, System.Collections.Generic.IEnumerable<string> propertyFilters = null, System.Collections.Generic.IEnumerable<string> statuses = null, System.DateTimeOffset? minCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxCreatedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? minLastModifiedDateTime = default(System.DateTimeOffset?), System.DateTimeOffset? maxLastModifiedDateTime = default(System.DateTimeOffset?), int? maxPageSize = default(int?), string skipToken = null, Azure.RequestContext context = null) { throw null; }
    }
}
