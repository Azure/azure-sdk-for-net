// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;
using Azure.ResourceManager.Core;

namespace Azure.ResourceManager.DesktopVirtualization
{
    /// <summary> A class representing collection of UserSession and their operations over its parent. </summary>
    public partial class UserSessionCollection : ArmCollection, IEnumerable<UserSession>, IAsyncEnumerable<UserSession>
    {
        private readonly ClientDiagnostics _userSessionClientDiagnostics;
        private readonly UserSessionsRestOperations _userSessionRestClient;

        /// <summary> Initializes a new instance of the <see cref="UserSessionCollection"/> class for mocking. </summary>
        protected UserSessionCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="UserSessionCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal UserSessionCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _userSessionClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.DesktopVirtualization", UserSession.ResourceType.Namespace, DiagnosticOptions);
            TryGetApiVersion(UserSession.ResourceType, out string userSessionApiVersion);
            _userSessionRestClient = new UserSessionsRestOperations(_userSessionClientDiagnostics, Pipeline, DiagnosticOptions.ApplicationId, BaseUri, userSessionApiVersion);
#if DEBUG
			ValidateResourceId(Id);
#endif
        }

        internal static void ValidateResourceId(ResourceIdentifier id)
        {
            if (id.ResourceType != SessionHost.ResourceType)
                throw new ArgumentException(string.Format(CultureInfo.CurrentCulture, "Invalid resource type {0} expected {1}", id.ResourceType, SessionHost.ResourceType), nameof(id));
        }

        /// <summary>
        /// Get a userSession.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/sessionHosts/{sessionHostName}/userSessions/{userSessionId}
        /// Operation Id: UserSessions_Get
        /// </summary>
        /// <param name="userSessionId"> The name of the user session within the specified session host. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="userSessionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="userSessionId"/> is null. </exception>
        public async virtual Task<Response<UserSession>> GetAsync(string userSessionId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(userSessionId, nameof(userSessionId));

            using var scope = _userSessionClientDiagnostics.CreateScope("UserSessionCollection.Get");
            scope.Start();
            try
            {
                var response = await _userSessionRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, userSessionId, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw await _userSessionClientDiagnostics.CreateRequestFailedExceptionAsync(response.GetRawResponse()).ConfigureAwait(false);
                return Response.FromValue(new UserSession(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get a userSession.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/sessionHosts/{sessionHostName}/userSessions/{userSessionId}
        /// Operation Id: UserSessions_Get
        /// </summary>
        /// <param name="userSessionId"> The name of the user session within the specified session host. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="userSessionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="userSessionId"/> is null. </exception>
        public virtual Response<UserSession> Get(string userSessionId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(userSessionId, nameof(userSessionId));

            using var scope = _userSessionClientDiagnostics.CreateScope("UserSessionCollection.Get");
            scope.Start();
            try
            {
                var response = _userSessionRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, userSessionId, cancellationToken);
                if (response.Value == null)
                    throw _userSessionClientDiagnostics.CreateRequestFailedException(response.GetRawResponse());
                return Response.FromValue(new UserSession(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// List userSessions.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/sessionHosts/{sessionHostName}/userSessions
        /// Operation Id: UserSessions_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="UserSession" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<UserSession> GetAllAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<UserSession>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _userSessionClientDiagnostics.CreateScope("UserSessionCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _userSessionRestClient.ListAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new UserSession(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<UserSession>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _userSessionClientDiagnostics.CreateScope("UserSessionCollection.GetAll");
                scope.Start();
                try
                {
                    var response = await _userSessionRestClient.ListNextPageAsync(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new UserSession(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// List userSessions.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/sessionHosts/{sessionHostName}/userSessions
        /// Operation Id: UserSessions_List
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="UserSession" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<UserSession> GetAll(CancellationToken cancellationToken = default)
        {
            Page<UserSession> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = _userSessionClientDiagnostics.CreateScope("UserSessionCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _userSessionRestClient.List(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new UserSession(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<UserSession> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = _userSessionClientDiagnostics.CreateScope("UserSessionCollection.GetAll");
                scope.Start();
                try
                {
                    var response = _userSessionRestClient.ListNextPage(nextLink, Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new UserSession(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/sessionHosts/{sessionHostName}/userSessions/{userSessionId}
        /// Operation Id: UserSessions_Get
        /// </summary>
        /// <param name="userSessionId"> The name of the user session within the specified session host. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="userSessionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="userSessionId"/> is null. </exception>
        public async virtual Task<Response<bool>> ExistsAsync(string userSessionId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(userSessionId, nameof(userSessionId));

            using var scope = _userSessionClientDiagnostics.CreateScope("UserSessionCollection.Exists");
            scope.Start();
            try
            {
                var response = await GetIfExistsAsync(userSessionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/sessionHosts/{sessionHostName}/userSessions/{userSessionId}
        /// Operation Id: UserSessions_Get
        /// </summary>
        /// <param name="userSessionId"> The name of the user session within the specified session host. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="userSessionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="userSessionId"/> is null. </exception>
        public virtual Response<bool> Exists(string userSessionId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(userSessionId, nameof(userSessionId));

            using var scope = _userSessionClientDiagnostics.CreateScope("UserSessionCollection.Exists");
            scope.Start();
            try
            {
                var response = GetIfExists(userSessionId, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/sessionHosts/{sessionHostName}/userSessions/{userSessionId}
        /// Operation Id: UserSessions_Get
        /// </summary>
        /// <param name="userSessionId"> The name of the user session within the specified session host. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="userSessionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="userSessionId"/> is null. </exception>
        public async virtual Task<Response<UserSession>> GetIfExistsAsync(string userSessionId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(userSessionId, nameof(userSessionId));

            using var scope = _userSessionClientDiagnostics.CreateScope("UserSessionCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = await _userSessionRestClient.GetAsync(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, userSessionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    return Response.FromValue<UserSession>(null, response.GetRawResponse());
                return Response.FromValue(new UserSession(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Tries to get details for this resource from the service.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}/sessionHosts/{sessionHostName}/userSessions/{userSessionId}
        /// Operation Id: UserSessions_Get
        /// </summary>
        /// <param name="userSessionId"> The name of the user session within the specified session host. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="userSessionId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="userSessionId"/> is null. </exception>
        public virtual Response<UserSession> GetIfExists(string userSessionId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(userSessionId, nameof(userSessionId));

            using var scope = _userSessionClientDiagnostics.CreateScope("UserSessionCollection.GetIfExists");
            scope.Start();
            try
            {
                var response = _userSessionRestClient.Get(Id.SubscriptionId, Id.ResourceGroupName, Id.Parent.Name, Id.Name, userSessionId, cancellationToken: cancellationToken);
                if (response.Value == null)
                    return Response.FromValue<UserSession>(null, response.GetRawResponse());
                return Response.FromValue(new UserSession(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<UserSession> IEnumerable<UserSession>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<UserSession> IAsyncEnumerable<UserSession>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
