// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.DesktopVirtualization.Models
{
    /// <summary> Represents the Health state of the health check we performed. </summary>
    public readonly partial struct HealthCheckResult : IEquatable<HealthCheckResult>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="HealthCheckResult"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public HealthCheckResult(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "Unknown";
        private const string HealthCheckSucceededValue = "HealthCheckSucceeded";
        private const string HealthCheckFailedValue = "HealthCheckFailed";
        private const string SessionHostShutdownValue = "SessionHostShutdown";

        /// <summary> Health check result is not currently known. </summary>
        public static HealthCheckResult Unknown { get; } = new HealthCheckResult(UnknownValue);
        /// <summary> Health check passed. </summary>
        public static HealthCheckResult HealthCheckSucceeded { get; } = new HealthCheckResult(HealthCheckSucceededValue);
        /// <summary> Health check failed. </summary>
        public static HealthCheckResult HealthCheckFailed { get; } = new HealthCheckResult(HealthCheckFailedValue);
        /// <summary> We received a Shutdown notification. </summary>
        public static HealthCheckResult SessionHostShutdown { get; } = new HealthCheckResult(SessionHostShutdownValue);
        /// <summary> Determines if two <see cref="HealthCheckResult"/> values are the same. </summary>
        public static bool operator ==(HealthCheckResult left, HealthCheckResult right) => left.Equals(right);
        /// <summary> Determines if two <see cref="HealthCheckResult"/> values are not the same. </summary>
        public static bool operator !=(HealthCheckResult left, HealthCheckResult right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="HealthCheckResult"/>. </summary>
        public static implicit operator HealthCheckResult(string value) => new HealthCheckResult(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is HealthCheckResult other && Equals(other);
        /// <inheritdoc />
        public bool Equals(HealthCheckResult other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
