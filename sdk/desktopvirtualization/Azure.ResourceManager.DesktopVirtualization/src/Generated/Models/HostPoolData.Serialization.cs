// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.ResourceManager.DesktopVirtualization.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.DesktopVirtualization
{
    public partial class HostPoolData : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(ManagedBy))
            {
                writer.WritePropertyName("managedBy"u8);
                writer.WriteStringValue(ManagedBy);
            }
            if (Core.Optional.IsDefined(Kind))
            {
                writer.WritePropertyName("kind"u8);
                writer.WriteStringValue(Kind);
            }
            if (Core.Optional.IsDefined(Identity))
            {
                writer.WritePropertyName("identity"u8);
                JsonSerializer.Serialize(writer, Identity);
            }
            if (Core.Optional.IsDefined(Sku))
            {
                writer.WritePropertyName("sku"u8);
                writer.WriteObjectValue(Sku);
            }
            if (Core.Optional.IsDefined(Plan))
            {
                writer.WritePropertyName("plan"u8);
                JsonSerializer.Serialize(writer, Plan);
            }
            if (Core.Optional.IsCollectionDefined(Tags))
            {
                writer.WritePropertyName("tags"u8);
                writer.WriteStartObject();
                foreach (var item in Tags)
                {
                    writer.WritePropertyName(item.Key);
                    writer.WriteStringValue(item.Value);
                }
                writer.WriteEndObject();
            }
            writer.WritePropertyName("location"u8);
            writer.WriteStringValue(Location);
            writer.WritePropertyName("properties"u8);
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(FriendlyName))
            {
                writer.WritePropertyName("friendlyName"u8);
                writer.WriteStringValue(FriendlyName);
            }
            if (Core.Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description"u8);
                writer.WriteStringValue(Description);
            }
            writer.WritePropertyName("hostPoolType"u8);
            writer.WriteStringValue(HostPoolType.ToString());
            if (Core.Optional.IsDefined(PersonalDesktopAssignmentType))
            {
                writer.WritePropertyName("personalDesktopAssignmentType"u8);
                writer.WriteStringValue(PersonalDesktopAssignmentType.Value.ToString());
            }
            if (Core.Optional.IsDefined(CustomRdpProperty))
            {
                writer.WritePropertyName("customRdpProperty"u8);
                writer.WriteStringValue(CustomRdpProperty);
            }
            if (Core.Optional.IsDefined(MaxSessionLimit))
            {
                writer.WritePropertyName("maxSessionLimit"u8);
                writer.WriteNumberValue(MaxSessionLimit.Value);
            }
            writer.WritePropertyName("loadBalancerType"u8);
            writer.WriteStringValue(LoadBalancerType.ToString());
            if (Core.Optional.IsDefined(Ring))
            {
                writer.WritePropertyName("ring"u8);
                writer.WriteNumberValue(Ring.Value);
            }
            if (Core.Optional.IsDefined(IsValidationEnvironment))
            {
                writer.WritePropertyName("validationEnvironment"u8);
                writer.WriteBooleanValue(IsValidationEnvironment.Value);
            }
            if (Core.Optional.IsDefined(RegistrationInfo))
            {
                writer.WritePropertyName("registrationInfo"u8);
                writer.WriteObjectValue(RegistrationInfo);
            }
            if (Core.Optional.IsDefined(VmTemplate))
            {
                writer.WritePropertyName("vmTemplate"u8);
                writer.WriteStringValue(VmTemplate);
            }
            if (Core.Optional.IsDefined(SsoAdfsAuthority))
            {
                writer.WritePropertyName("ssoadfsAuthority"u8);
                writer.WriteStringValue(SsoAdfsAuthority);
            }
            if (Core.Optional.IsDefined(SsoClientId))
            {
                writer.WritePropertyName("ssoClientId"u8);
                writer.WriteStringValue(SsoClientId);
            }
            if (Core.Optional.IsDefined(SsoClientSecretKeyVaultPath))
            {
                writer.WritePropertyName("ssoClientSecretKeyVaultPath"u8);
                writer.WriteStringValue(SsoClientSecretKeyVaultPath);
            }
            if (Core.Optional.IsDefined(SsoSecretType))
            {
                writer.WritePropertyName("ssoSecretType"u8);
                writer.WriteStringValue(SsoSecretType.Value.ToString());
            }
            writer.WritePropertyName("preferredAppGroupType"u8);
            writer.WriteStringValue(PreferredAppGroupType.ToString());
            if (Core.Optional.IsDefined(StartVmOnConnect))
            {
                writer.WritePropertyName("startVMOnConnect"u8);
                writer.WriteBooleanValue(StartVmOnConnect.Value);
            }
            if (Core.Optional.IsDefined(AgentUpdate))
            {
                writer.WritePropertyName("agentUpdate"u8);
                writer.WriteObjectValue(AgentUpdate);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static HostPoolData DeserializeHostPoolData(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<ResourceIdentifier> managedBy = default;
            Core.Optional<string> kind = default;
            Core.Optional<ETag> etag = default;
            Core.Optional<ManagedServiceIdentity> identity = default;
            Core.Optional<DesktopVirtualizationSku> sku = default;
            Core.Optional<ArmPlan> plan = default;
            Core.Optional<IDictionary<string, string>> tags = default;
            AzureLocation location = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Core.Optional<SystemData> systemData = default;
            Core.Optional<string> objectId = default;
            Core.Optional<string> friendlyName = default;
            Core.Optional<string> description = default;
            HostPoolType hostPoolType = default;
            Core.Optional<PersonalDesktopAssignmentType> personalDesktopAssignmentType = default;
            Core.Optional<string> customRdpProperty = default;
            Core.Optional<int> maxSessionLimit = default;
            HostPoolLoadBalancerType loadBalancerType = default;
            Core.Optional<int> ring = default;
            Core.Optional<bool> validationEnvironment = default;
            Core.Optional<HostPoolRegistrationInfo> registrationInfo = default;
            Core.Optional<string> vmTemplate = default;
            Core.Optional<IReadOnlyList<string>> applicationGroupReferences = default;
            Core.Optional<string> ssoadfsAuthority = default;
            Core.Optional<string> ssoClientId = default;
            Core.Optional<string> ssoClientSecretKeyVaultPath = default;
            Core.Optional<HostPoolSsoSecretType> ssoSecretType = default;
            PreferredAppGroupType preferredAppGroupType = default;
            Core.Optional<bool> startVmOnConnect = default;
            Core.Optional<bool> cloudPCResource = default;
            Core.Optional<SessionHostAgentUpdateProperties> agentUpdate = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("managedBy"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    managedBy = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("kind"u8))
                {
                    kind = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("etag"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    etag = new ETag(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("identity"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    identity = JsonSerializer.Deserialize<ManagedServiceIdentity>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("sku"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sku = DesktopVirtualizationSku.DeserializeDesktopVirtualizationSku(property.Value);
                    continue;
                }
                if (property.NameEquals("plan"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    plan = JsonSerializer.Deserialize<ArmPlan>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("tags"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("location"u8))
                {
                    location = new AzureLocation(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("objectId"u8))
                        {
                            objectId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("friendlyName"u8))
                        {
                            friendlyName = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("description"u8))
                        {
                            description = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("hostPoolType"u8))
                        {
                            hostPoolType = new HostPoolType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("personalDesktopAssignmentType"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            personalDesktopAssignmentType = new PersonalDesktopAssignmentType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("customRdpProperty"u8))
                        {
                            customRdpProperty = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("maxSessionLimit"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            maxSessionLimit = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("loadBalancerType"u8))
                        {
                            loadBalancerType = new HostPoolLoadBalancerType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("ring"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            ring = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("validationEnvironment"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            validationEnvironment = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("registrationInfo"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            registrationInfo = HostPoolRegistrationInfo.DeserializeHostPoolRegistrationInfo(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("vmTemplate"u8))
                        {
                            vmTemplate = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("applicationGroupReferences"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(item.GetString());
                            }
                            applicationGroupReferences = array;
                            continue;
                        }
                        if (property0.NameEquals("ssoadfsAuthority"u8))
                        {
                            ssoadfsAuthority = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("ssoClientId"u8))
                        {
                            ssoClientId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("ssoClientSecretKeyVaultPath"u8))
                        {
                            ssoClientSecretKeyVaultPath = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("ssoSecretType"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            ssoSecretType = new HostPoolSsoSecretType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("preferredAppGroupType"u8))
                        {
                            preferredAppGroupType = new PreferredAppGroupType(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("startVMOnConnect"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            startVmOnConnect = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("cloudPcResource"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            cloudPCResource = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("agentUpdate"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            agentUpdate = SessionHostAgentUpdateProperties.DeserializeSessionHostAgentUpdateProperties(property0.Value);
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new HostPoolData(id, name, type, systemData.Value, Core.Optional.ToDictionary(tags), location, objectId.Value, friendlyName.Value, description.Value, hostPoolType, Core.Optional.ToNullable(personalDesktopAssignmentType), customRdpProperty.Value, Core.Optional.ToNullable(maxSessionLimit), loadBalancerType, Core.Optional.ToNullable(ring), Core.Optional.ToNullable(validationEnvironment), registrationInfo.Value, vmTemplate.Value, Core.Optional.ToList(applicationGroupReferences), ssoadfsAuthority.Value, ssoClientId.Value, ssoClientSecretKeyVaultPath.Value, Core.Optional.ToNullable(ssoSecretType), preferredAppGroupType, Core.Optional.ToNullable(startVmOnConnect), Core.Optional.ToNullable(cloudPCResource), agentUpdate.Value, managedBy.Value, kind.Value, Core.Optional.ToNullable(etag), identity, sku.Value, plan);
        }
    }
}
