// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.DesktopVirtualization.Models
{
    /// <summary> Update state of a SessionHost. </summary>
    public readonly partial struct UpdateState : IEquatable<UpdateState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="UpdateState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public UpdateState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string InitialValue = "Initial";
        private const string PendingValue = "Pending";
        private const string StartedValue = "Started";
        private const string SucceededValue = "Succeeded";
        private const string FailedValue = "Failed";

        /// <summary> Initial. </summary>
        public static UpdateState Initial { get; } = new UpdateState(InitialValue);
        /// <summary> Pending. </summary>
        public static UpdateState Pending { get; } = new UpdateState(PendingValue);
        /// <summary> Started. </summary>
        public static UpdateState Started { get; } = new UpdateState(StartedValue);
        /// <summary> Succeeded. </summary>
        public static UpdateState Succeeded { get; } = new UpdateState(SucceededValue);
        /// <summary> Failed. </summary>
        public static UpdateState Failed { get; } = new UpdateState(FailedValue);
        /// <summary> Determines if two <see cref="UpdateState"/> values are the same. </summary>
        public static bool operator ==(UpdateState left, UpdateState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="UpdateState"/> values are not the same. </summary>
        public static bool operator !=(UpdateState left, UpdateState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="UpdateState"/>. </summary>
        public static implicit operator UpdateState(string value) => new UpdateState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is UpdateState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(UpdateState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
