// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.DesktopVirtualization.Models
{
    public partial class SessionHostAgentUpdatePatchProperties : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(UpdateType))
            {
                writer.WritePropertyName("type"u8);
                writer.WriteStringValue(UpdateType.Value.ToString());
            }
            if (Core.Optional.IsDefined(DoesUseSessionHostLocalTime))
            {
                writer.WritePropertyName("useSessionHostLocalTime"u8);
                writer.WriteBooleanValue(DoesUseSessionHostLocalTime.Value);
            }
            if (Core.Optional.IsDefined(MaintenanceWindowTimeZone))
            {
                writer.WritePropertyName("maintenanceWindowTimeZone"u8);
                writer.WriteStringValue(MaintenanceWindowTimeZone);
            }
            if (Core.Optional.IsCollectionDefined(MaintenanceWindows))
            {
                writer.WritePropertyName("maintenanceWindows"u8);
                writer.WriteStartArray();
                foreach (var item in MaintenanceWindows)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static SessionHostAgentUpdatePatchProperties DeserializeSessionHostAgentUpdatePatchProperties(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<SessionHostComponentUpdateType> type = default;
            Core.Optional<bool> useSessionHostLocalTime = default;
            Core.Optional<string> maintenanceWindowTimeZone = default;
            Core.Optional<IList<MaintenanceWindowPatchProperties>> maintenanceWindows = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("type"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    type = new SessionHostComponentUpdateType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("useSessionHostLocalTime"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    useSessionHostLocalTime = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("maintenanceWindowTimeZone"u8))
                {
                    maintenanceWindowTimeZone = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("maintenanceWindows"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<MaintenanceWindowPatchProperties> array = new List<MaintenanceWindowPatchProperties>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(MaintenanceWindowPatchProperties.DeserializeMaintenanceWindowPatchProperties(item));
                    }
                    maintenanceWindows = array;
                    continue;
                }
            }
            return new SessionHostAgentUpdatePatchProperties(Core.Optional.ToNullable(type), Core.Optional.ToNullable(useSessionHostLocalTime), maintenanceWindowTimeZone.Value, Core.Optional.ToList(maintenanceWindows));
        }
    }
}
