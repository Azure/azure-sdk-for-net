// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.DesktopVirtualization.Models
{
    /// <summary> The type of operation for migration. </summary>
    public readonly partial struct Operation : IEquatable<Operation>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Operation"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Operation(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string StartValue = "Start";
        private const string RevokeValue = "Revoke";
        private const string CompleteValue = "Complete";
        private const string HideValue = "Hide";
        private const string UnhideValue = "Unhide";

        /// <summary> Start the migration. </summary>
        public static Operation Start { get; } = new Operation(StartValue);
        /// <summary> Revoke the migration. </summary>
        public static Operation Revoke { get; } = new Operation(RevokeValue);
        /// <summary> Complete the migration. </summary>
        public static Operation Complete { get; } = new Operation(CompleteValue);
        /// <summary> Hide the hostpool. </summary>
        public static Operation Hide { get; } = new Operation(HideValue);
        /// <summary> Unhide the hostpool. </summary>
        public static Operation Unhide { get; } = new Operation(UnhideValue);
        /// <summary> Determines if two <see cref="Operation"/> values are the same. </summary>
        public static bool operator ==(Operation left, Operation right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Operation"/> values are not the same. </summary>
        public static bool operator !=(Operation left, Operation right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Operation"/>. </summary>
        public static implicit operator Operation(string value) => new Operation(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Operation other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Operation other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
