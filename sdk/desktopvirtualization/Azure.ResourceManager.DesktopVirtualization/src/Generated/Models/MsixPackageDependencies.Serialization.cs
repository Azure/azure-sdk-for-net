// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;
using Azure.Core.Serialization;

namespace Azure.ResourceManager.DesktopVirtualization.Models
{
    public partial class MsixPackageDependencies : IUtf8JsonSerializable, Core.IModelSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer) => ((Core.IModelSerializable)this).Serialize(writer, new Core.Serialization.SerializableOptions());

        void Core.IModelSerializable.Serialize(Utf8JsonWriter writer, Core.Serialization.SerializableOptions options)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(DependencyName))
            {
                writer.WritePropertyName("dependencyName"u8);
                writer.WriteStringValue(DependencyName);
            }
            if (Optional.IsDefined(Publisher))
            {
                writer.WritePropertyName("publisher"u8);
                writer.WriteStringValue(Publisher);
            }
            if (Optional.IsDefined(MinVersion))
            {
                writer.WritePropertyName("minVersion"u8);
                writer.WriteStringValue(MinVersion);
            }
            writer.WriteEndObject();
        }

        internal static MsixPackageDependencies DeserializeMsixPackageDependencies(JsonElement element, Core.Serialization.SerializableOptions options = default)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> dependencyName = default;
            Optional<string> publisher = default;
            Optional<string> minVersion = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("dependencyName"u8))
                {
                    dependencyName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("publisher"u8))
                {
                    publisher = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("minVersion"u8))
                {
                    minVersion = property.Value.GetString();
                    continue;
                }
            }
            return new MsixPackageDependencies(dependencyName.Value, publisher.Value, minVersion.Value);
        }
    }
}
