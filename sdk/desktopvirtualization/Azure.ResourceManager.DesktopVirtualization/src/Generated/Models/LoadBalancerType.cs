// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.DesktopVirtualization.Models
{
    /// <summary> The type of the load balancer. </summary>
    public readonly partial struct LoadBalancerType : IEquatable<LoadBalancerType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="LoadBalancerType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public LoadBalancerType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string BreadthFirstValue = "BreadthFirst";
        private const string DepthFirstValue = "DepthFirst";
        private const string PersistentValue = "Persistent";

        /// <summary> BreadthFirst. </summary>
        public static LoadBalancerType BreadthFirst { get; } = new LoadBalancerType(BreadthFirstValue);
        /// <summary> DepthFirst. </summary>
        public static LoadBalancerType DepthFirst { get; } = new LoadBalancerType(DepthFirstValue);
        /// <summary> Persistent. </summary>
        public static LoadBalancerType Persistent { get; } = new LoadBalancerType(PersistentValue);
        /// <summary> Determines if two <see cref="LoadBalancerType"/> values are the same. </summary>
        public static bool operator ==(LoadBalancerType left, LoadBalancerType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="LoadBalancerType"/> values are not the same. </summary>
        public static bool operator !=(LoadBalancerType left, LoadBalancerType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="LoadBalancerType"/>. </summary>
        public static implicit operator LoadBalancerType(string value) => new LoadBalancerType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is LoadBalancerType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(LoadBalancerType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
