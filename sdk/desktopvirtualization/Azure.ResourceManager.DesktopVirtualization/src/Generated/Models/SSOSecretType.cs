// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.DesktopVirtualization.Models
{
    /// <summary> The type of single sign on Secret Type. </summary>
    public readonly partial struct SSOSecretType : IEquatable<SSOSecretType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SSOSecretType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SSOSecretType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SharedKeyValue = "SharedKey";
        private const string CertificateValue = "Certificate";
        private const string SharedKeyInKeyVaultValue = "SharedKeyInKeyVault";
        private const string CertificateInKeyVaultValue = "CertificateInKeyVault";

        /// <summary> SharedKey. </summary>
        public static SSOSecretType SharedKey { get; } = new SSOSecretType(SharedKeyValue);
        /// <summary> Certificate. </summary>
        public static SSOSecretType Certificate { get; } = new SSOSecretType(CertificateValue);
        /// <summary> SharedKeyInKeyVault. </summary>
        public static SSOSecretType SharedKeyInKeyVault { get; } = new SSOSecretType(SharedKeyInKeyVaultValue);
        /// <summary> CertificateInKeyVault. </summary>
        public static SSOSecretType CertificateInKeyVault { get; } = new SSOSecretType(CertificateInKeyVaultValue);
        /// <summary> Determines if two <see cref="SSOSecretType"/> values are the same. </summary>
        public static bool operator ==(SSOSecretType left, SSOSecretType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SSOSecretType"/> values are not the same. </summary>
        public static bool operator !=(SSOSecretType left, SSOSecretType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SSOSecretType"/>. </summary>
        public static implicit operator SSOSecretType(string value) => new SSOSecretType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SSOSecretType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SSOSecretType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
