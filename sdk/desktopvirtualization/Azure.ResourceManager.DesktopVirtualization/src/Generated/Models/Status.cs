// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.DesktopVirtualization.Models
{
    /// <summary> Status for a SessionHost. </summary>
    public readonly partial struct Status : IEquatable<Status>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Status"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Status(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AvailableValue = "Available";
        private const string UnavailableValue = "Unavailable";
        private const string ShutdownValue = "Shutdown";
        private const string DisconnectedValue = "Disconnected";
        private const string UpgradingValue = "Upgrading";
        private const string UpgradeFailedValue = "UpgradeFailed";
        private const string NoHeartbeatValue = "NoHeartbeat";
        private const string NotJoinedToDomainValue = "NotJoinedToDomain";
        private const string DomainTrustRelationshipLostValue = "DomainTrustRelationshipLost";
        private const string SxSStackListenerNotReadyValue = "SxSStackListenerNotReady";
        private const string FSLogixNotHealthyValue = "FSLogixNotHealthy";
        private const string NeedsAssistanceValue = "NeedsAssistance";

        /// <summary> Session Host has passed all the health checks and is available to handle connections. </summary>
        public static Status Available { get; } = new Status(AvailableValue);
        /// <summary> Session Host is either turned off or has failed critical health checks which is causing service not to be able to route connections to this session host. Note this replaces previous &apos;NoHeartBeat&apos; status. </summary>
        public static Status Unavailable { get; } = new Status(UnavailableValue);
        /// <summary> Session Host is shutdown - RD Agent reported session host to be stopped or deallocated. </summary>
        public static Status Shutdown { get; } = new Status(ShutdownValue);
        /// <summary> The Session Host is unavailable because it is currently disconnected. </summary>
        public static Status Disconnected { get; } = new Status(DisconnectedValue);
        /// <summary> Session Host is unavailable because currently an upgrade of RDAgent/side-by-side stack is in progress. Note: this state will be removed once the upgrade completes and the host is able to accept connections. </summary>
        public static Status Upgrading { get; } = new Status(UpgradingValue);
        /// <summary> Session Host is unavailable because the critical component upgrade (agent, side-by-side stack, etc.) failed. </summary>
        public static Status UpgradeFailed { get; } = new Status(UpgradeFailedValue);
        /// <summary> The Session Host is not heart beating. </summary>
        public static Status NoHeartbeat { get; } = new Status(NoHeartbeatValue);
        /// <summary> SessionHost is not joined to domain. </summary>
        public static Status NotJoinedToDomain { get; } = new Status(NotJoinedToDomainValue);
        /// <summary> SessionHost&apos;s domain trust relationship lost. </summary>
        public static Status DomainTrustRelationshipLost { get; } = new Status(DomainTrustRelationshipLostValue);
        /// <summary> SxS stack installed on the SessionHost is not ready to receive connections. </summary>
        public static Status SxSStackListenerNotReady { get; } = new Status(SxSStackListenerNotReadyValue);
        /// <summary> FSLogix is in an unhealthy state on the session host. </summary>
        public static Status FSLogixNotHealthy { get; } = new Status(FSLogixNotHealthyValue);
        /// <summary> New status to inform admins that the health on their endpoint needs to be fixed. The connections might not fail, as these issues are not fatal. </summary>
        public static Status NeedsAssistance { get; } = new Status(NeedsAssistanceValue);
        /// <summary> Determines if two <see cref="Status"/> values are the same. </summary>
        public static bool operator ==(Status left, Status right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Status"/> values are not the same. </summary>
        public static bool operator !=(Status left, Status right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Status"/>. </summary>
        public static implicit operator Status(string value) => new Status(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Status other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Status other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
