// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.DesktopVirtualization.Models
{
    /// <summary> Specifies whether this published application can be launched with command line arguments provided by the client, command line arguments specified at publish time, or no command line arguments at all. </summary>
    public readonly partial struct CommandLineSetting : IEquatable<CommandLineSetting>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="CommandLineSetting"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public CommandLineSetting(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string DoNotAllowValue = "DoNotAllow";
        private const string AllowValue = "Allow";
        private const string RequireValue = "Require";

        /// <summary> DoNotAllow. </summary>
        public static CommandLineSetting DoNotAllow { get; } = new CommandLineSetting(DoNotAllowValue);
        /// <summary> Allow. </summary>
        public static CommandLineSetting Allow { get; } = new CommandLineSetting(AllowValue);
        /// <summary> Require. </summary>
        public static CommandLineSetting Require { get; } = new CommandLineSetting(RequireValue);
        /// <summary> Determines if two <see cref="CommandLineSetting"/> values are the same. </summary>
        public static bool operator ==(CommandLineSetting left, CommandLineSetting right) => left.Equals(right);
        /// <summary> Determines if two <see cref="CommandLineSetting"/> values are not the same. </summary>
        public static bool operator !=(CommandLineSetting left, CommandLineSetting right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="CommandLineSetting"/>. </summary>
        public static implicit operator CommandLineSetting(string value) => new CommandLineSetting(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is CommandLineSetting other && Equals(other);
        /// <inheritdoc />
        public bool Equals(CommandLineSetting other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
