// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.ResourceManager.DesktopVirtualization.Models
{
    /// <summary> Scaling plan schedule. </summary>
    public partial class ScalingSchedule
    {
        /// <summary> Initializes a new instance of ScalingSchedule. </summary>
        public ScalingSchedule()
        {
            DaysOfWeek = new ChangeTrackingList<ScalingScheduleDaysOfWeekItem>();
        }

        /// <summary> Initializes a new instance of ScalingSchedule. </summary>
        /// <param name="name"> Name of the scaling schedule. </param>
        /// <param name="daysOfWeek"> Set of days of the week on which this schedule is active. </param>
        /// <param name="rampUpStartOn"> Starting time for ramp up period. </param>
        /// <param name="rampUpLoadBalancingAlgorithm"> Load balancing algorithm for ramp up period. </param>
        /// <param name="rampUpMinimumHostsPct"> Minimum host percentage for ramp up period. </param>
        /// <param name="rampUpCapacityThresholdPct"> Capacity threshold for ramp up period. </param>
        /// <param name="peakStartOn"> Starting time for peak period. </param>
        /// <param name="peakLoadBalancingAlgorithm"> Load balancing algorithm for peak period. </param>
        /// <param name="rampDownStartOn"> Starting time for ramp down period. </param>
        /// <param name="rampDownLoadBalancingAlgorithm"> Load balancing algorithm for ramp down period. </param>
        /// <param name="rampDownMinimumHostsPct"> Minimum host percentage for ramp down period. </param>
        /// <param name="rampDownCapacityThresholdPct"> Capacity threshold for ramp down period. </param>
        /// <param name="rampDownForceLogoffUsers"> Should users be logged off forcefully from hosts. </param>
        /// <param name="rampDownStopHostsWhen"> Specifies when to stop hosts during ramp down period. </param>
        /// <param name="rampDownWaitTimeMinutes"> Number of minutes to wait to stop hosts during ramp down period. </param>
        /// <param name="rampDownNotificationMessage"> Notification message for users during ramp down period. </param>
        /// <param name="offPeakStartOn"> Starting time for off-peak period. </param>
        /// <param name="offPeakLoadBalancingAlgorithm"> Load balancing algorithm for off-peak period. </param>
        internal ScalingSchedule(string name, IList<ScalingScheduleDaysOfWeekItem> daysOfWeek, DateTimeOffset? rampUpStartOn, SessionHostLoadBalancingAlgorithm? rampUpLoadBalancingAlgorithm, int? rampUpMinimumHostsPct, int? rampUpCapacityThresholdPct, DateTimeOffset? peakStartOn, SessionHostLoadBalancingAlgorithm? peakLoadBalancingAlgorithm, DateTimeOffset? rampDownStartOn, SessionHostLoadBalancingAlgorithm? rampDownLoadBalancingAlgorithm, int? rampDownMinimumHostsPct, int? rampDownCapacityThresholdPct, bool? rampDownForceLogoffUsers, DesktopVirtualizationStopHostsWhen? rampDownStopHostsWhen, int? rampDownWaitTimeMinutes, string rampDownNotificationMessage, DateTimeOffset? offPeakStartOn, SessionHostLoadBalancingAlgorithm? offPeakLoadBalancingAlgorithm)
        {
            Name = name;
            DaysOfWeek = daysOfWeek;
            RampUpStartOn = rampUpStartOn;
            RampUpLoadBalancingAlgorithm = rampUpLoadBalancingAlgorithm;
            RampUpMinimumHostsPct = rampUpMinimumHostsPct;
            RampUpCapacityThresholdPct = rampUpCapacityThresholdPct;
            PeakStartOn = peakStartOn;
            PeakLoadBalancingAlgorithm = peakLoadBalancingAlgorithm;
            RampDownStartOn = rampDownStartOn;
            RampDownLoadBalancingAlgorithm = rampDownLoadBalancingAlgorithm;
            RampDownMinimumHostsPct = rampDownMinimumHostsPct;
            RampDownCapacityThresholdPct = rampDownCapacityThresholdPct;
            RampDownForceLogoffUsers = rampDownForceLogoffUsers;
            RampDownStopHostsWhen = rampDownStopHostsWhen;
            RampDownWaitTimeMinutes = rampDownWaitTimeMinutes;
            RampDownNotificationMessage = rampDownNotificationMessage;
            OffPeakStartOn = offPeakStartOn;
            OffPeakLoadBalancingAlgorithm = offPeakLoadBalancingAlgorithm;
        }

        /// <summary> Name of the scaling schedule. </summary>
        public string Name { get; set; }
        /// <summary> Set of days of the week on which this schedule is active. </summary>
        public IList<ScalingScheduleDaysOfWeekItem> DaysOfWeek { get; }
        /// <summary> Starting time for ramp up period. </summary>
        public DateTimeOffset? RampUpStartOn { get; set; }
        /// <summary> Load balancing algorithm for ramp up period. </summary>
        public SessionHostLoadBalancingAlgorithm? RampUpLoadBalancingAlgorithm { get; set; }
        /// <summary> Minimum host percentage for ramp up period. </summary>
        public int? RampUpMinimumHostsPct { get; set; }
        /// <summary> Capacity threshold for ramp up period. </summary>
        public int? RampUpCapacityThresholdPct { get; set; }
        /// <summary> Starting time for peak period. </summary>
        public DateTimeOffset? PeakStartOn { get; set; }
        /// <summary> Load balancing algorithm for peak period. </summary>
        public SessionHostLoadBalancingAlgorithm? PeakLoadBalancingAlgorithm { get; set; }
        /// <summary> Starting time for ramp down period. </summary>
        public DateTimeOffset? RampDownStartOn { get; set; }
        /// <summary> Load balancing algorithm for ramp down period. </summary>
        public SessionHostLoadBalancingAlgorithm? RampDownLoadBalancingAlgorithm { get; set; }
        /// <summary> Minimum host percentage for ramp down period. </summary>
        public int? RampDownMinimumHostsPct { get; set; }
        /// <summary> Capacity threshold for ramp down period. </summary>
        public int? RampDownCapacityThresholdPct { get; set; }
        /// <summary> Should users be logged off forcefully from hosts. </summary>
        public bool? RampDownForceLogoffUsers { get; set; }
        /// <summary> Specifies when to stop hosts during ramp down period. </summary>
        public DesktopVirtualizationStopHostsWhen? RampDownStopHostsWhen { get; set; }
        /// <summary> Number of minutes to wait to stop hosts during ramp down period. </summary>
        public int? RampDownWaitTimeMinutes { get; set; }
        /// <summary> Notification message for users during ramp down period. </summary>
        public string RampDownNotificationMessage { get; set; }
        /// <summary> Starting time for off-peak period. </summary>
        public DateTimeOffset? OffPeakStartOn { get; set; }
        /// <summary> Load balancing algorithm for off-peak period. </summary>
        public SessionHostLoadBalancingAlgorithm? OffPeakLoadBalancingAlgorithm { get; set; }
    }
}
