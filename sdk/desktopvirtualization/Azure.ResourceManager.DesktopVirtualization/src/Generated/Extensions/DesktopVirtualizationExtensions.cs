// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.DesktopVirtualization
{
    /// <summary> A class to add extension methods to Azure.ResourceManager.DesktopVirtualization. </summary>
    public static partial class DesktopVirtualizationExtensions
    {
        private static SubscriptionExtensionClient GetExtensionClient(Subscription subscription)
        {
            return subscription.GetCachedClient((client) =>
            {
                return new SubscriptionExtensionClient(client, subscription.Id);
            }
            );
        }

        /// <summary>
        /// List workspaces in subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DesktopVirtualization/workspaces
        /// Operation Id: Workspaces_ListBySubscription
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="VirtualWorkspace" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<VirtualWorkspace> GetVirtualWorkspacesAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetVirtualWorkspacesAsync(cancellationToken);
        }

        /// <summary>
        /// List workspaces in subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DesktopVirtualization/workspaces
        /// Operation Id: Workspaces_ListBySubscription
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="VirtualWorkspace" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<VirtualWorkspace> GetVirtualWorkspaces(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetVirtualWorkspaces(cancellationToken);
        }

        /// <summary>
        /// List scaling plans in subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DesktopVirtualization/scalingPlans
        /// Operation Id: ScalingPlans_ListBySubscription
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ScalingPlan" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<ScalingPlan> GetScalingPlansAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetScalingPlansAsync(cancellationToken);
        }

        /// <summary>
        /// List scaling plans in subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DesktopVirtualization/scalingPlans
        /// Operation Id: ScalingPlans_ListBySubscription
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ScalingPlan" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<ScalingPlan> GetScalingPlans(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetScalingPlans(cancellationToken);
        }

        /// <summary>
        /// List applicationGroups in subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DesktopVirtualization/applicationGroups
        /// Operation Id: ApplicationGroups_ListBySubscription
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="filter"> OData filter expression. Valid properties for filtering are applicationGroupType. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="VirtualApplicationGroup" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<VirtualApplicationGroup> GetVirtualApplicationGroupsAsync(this Subscription subscription, string filter = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetVirtualApplicationGroupsAsync(filter, cancellationToken);
        }

        /// <summary>
        /// List applicationGroups in subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DesktopVirtualization/applicationGroups
        /// Operation Id: ApplicationGroups_ListBySubscription
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="filter"> OData filter expression. Valid properties for filtering are applicationGroupType. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="VirtualApplicationGroup" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<VirtualApplicationGroup> GetVirtualApplicationGroups(this Subscription subscription, string filter = null, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetVirtualApplicationGroups(filter, cancellationToken);
        }

        /// <summary>
        /// List hostPools in subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DesktopVirtualization/hostPools
        /// Operation Id: HostPools_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="HostPool" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<HostPool> GetHostPoolsAsync(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetHostPoolsAsync(cancellationToken);
        }

        /// <summary>
        /// List hostPools in subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.DesktopVirtualization/hostPools
        /// Operation Id: HostPools_List
        /// </summary>
        /// <param name="subscription"> The <see cref="Subscription" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="HostPool" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<HostPool> GetHostPools(this Subscription subscription, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscription).GetHostPools(cancellationToken);
        }

        private static ResourceGroupExtensionClient GetExtensionClient(ResourceGroup resourceGroup)
        {
            return resourceGroup.GetCachedClient((client) =>
            {
                return new ResourceGroupExtensionClient(client, resourceGroup.Id);
            }
            );
        }

        /// <summary> Gets a collection of VirtualWorkspaces in the VirtualWorkspace. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of VirtualWorkspaces and their operations over a VirtualWorkspace. </returns>
        public static VirtualWorkspaceCollection GetVirtualWorkspaces(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetVirtualWorkspaces();
        }

        /// <summary>
        /// Get a workspace.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/workspaces/{workspaceName}
        /// Operation Id: Workspaces_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="workspaceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="workspaceName"/> is null. </exception>
        public static async Task<Response<VirtualWorkspace>> GetVirtualWorkspaceAsync(this ResourceGroup resourceGroup, string workspaceName, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetVirtualWorkspaces().GetAsync(workspaceName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a workspace.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/workspaces/{workspaceName}
        /// Operation Id: Workspaces_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="workspaceName"> The name of the workspace. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="workspaceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="workspaceName"/> is null. </exception>
        public static Response<VirtualWorkspace> GetVirtualWorkspace(this ResourceGroup resourceGroup, string workspaceName, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetVirtualWorkspaces().Get(workspaceName, cancellationToken);
        }

        /// <summary> Gets a collection of ScalingPlans in the ScalingPlan. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of ScalingPlans and their operations over a ScalingPlan. </returns>
        public static ScalingPlanCollection GetScalingPlans(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetScalingPlans();
        }

        /// <summary>
        /// Get a scaling plan.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/scalingPlans/{scalingPlanName}
        /// Operation Id: ScalingPlans_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="scalingPlanName"> The name of the scaling plan. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="scalingPlanName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="scalingPlanName"/> is null. </exception>
        public static async Task<Response<ScalingPlan>> GetScalingPlanAsync(this ResourceGroup resourceGroup, string scalingPlanName, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetScalingPlans().GetAsync(scalingPlanName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a scaling plan.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/scalingPlans/{scalingPlanName}
        /// Operation Id: ScalingPlans_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="scalingPlanName"> The name of the scaling plan. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="scalingPlanName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="scalingPlanName"/> is null. </exception>
        public static Response<ScalingPlan> GetScalingPlan(this ResourceGroup resourceGroup, string scalingPlanName, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetScalingPlans().Get(scalingPlanName, cancellationToken);
        }

        /// <summary> Gets a collection of VirtualApplicationGroups in the VirtualApplicationGroup. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of VirtualApplicationGroups and their operations over a VirtualApplicationGroup. </returns>
        public static VirtualApplicationGroupCollection GetVirtualApplicationGroups(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetVirtualApplicationGroups();
        }

        /// <summary>
        /// Get an application group.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/applicationGroups/{applicationGroupName}
        /// Operation Id: ApplicationGroups_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="applicationGroupName"> The name of the application group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="applicationGroupName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="applicationGroupName"/> is null. </exception>
        public static async Task<Response<VirtualApplicationGroup>> GetVirtualApplicationGroupAsync(this ResourceGroup resourceGroup, string applicationGroupName, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetVirtualApplicationGroups().GetAsync(applicationGroupName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get an application group.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/applicationGroups/{applicationGroupName}
        /// Operation Id: ApplicationGroups_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="applicationGroupName"> The name of the application group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="applicationGroupName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="applicationGroupName"/> is null. </exception>
        public static Response<VirtualApplicationGroup> GetVirtualApplicationGroup(this ResourceGroup resourceGroup, string applicationGroupName, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetVirtualApplicationGroups().Get(applicationGroupName, cancellationToken);
        }

        /// <summary> Gets a collection of HostPools in the HostPool. </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of HostPools and their operations over a HostPool. </returns>
        public static HostPoolCollection GetHostPools(this ResourceGroup resourceGroup)
        {
            return GetExtensionClient(resourceGroup).GetHostPools();
        }

        /// <summary>
        /// Get a host pool.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}
        /// Operation Id: HostPools_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="hostPoolName"> The name of the host pool within the specified resource group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="hostPoolName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="hostPoolName"/> is null. </exception>
        public static async Task<Response<HostPool>> GetHostPoolAsync(this ResourceGroup resourceGroup, string hostPoolName, CancellationToken cancellationToken = default)
        {
            return await resourceGroup.GetHostPools().GetAsync(hostPoolName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get a host pool.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}
        /// Operation Id: HostPools_Get
        /// </summary>
        /// <param name="resourceGroup"> The <see cref="ResourceGroup" /> instance the method will execute against. </param>
        /// <param name="hostPoolName"> The name of the host pool within the specified resource group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="hostPoolName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="hostPoolName"/> is null. </exception>
        public static Response<HostPool> GetHostPool(this ResourceGroup resourceGroup, string hostPoolName, CancellationToken cancellationToken = default)
        {
            return resourceGroup.GetHostPools().Get(hostPoolName, cancellationToken);
        }

        #region VirtualWorkspace
        /// <summary> Gets an object representing a VirtualWorkspace along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="VirtualWorkspace" /> object. </returns>
        public static VirtualWorkspace GetVirtualWorkspace(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                VirtualWorkspace.ValidateResourceId(id);
                return new VirtualWorkspace(client, id);
            }
            );
        }
        #endregion

        #region ScalingPlan
        /// <summary> Gets an object representing a ScalingPlan along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ScalingPlan" /> object. </returns>
        public static ScalingPlan GetScalingPlan(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ScalingPlan.ValidateResourceId(id);
                return new ScalingPlan(client, id);
            }
            );
        }
        #endregion

        #region VirtualApplicationGroup
        /// <summary> Gets an object representing a VirtualApplicationGroup along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="VirtualApplicationGroup" /> object. </returns>
        public static VirtualApplicationGroup GetVirtualApplicationGroup(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                VirtualApplicationGroup.ValidateResourceId(id);
                return new VirtualApplicationGroup(client, id);
            }
            );
        }
        #endregion

        #region VirtualApplication
        /// <summary> Gets an object representing a VirtualApplication along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="VirtualApplication" /> object. </returns>
        public static VirtualApplication GetVirtualApplication(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                VirtualApplication.ValidateResourceId(id);
                return new VirtualApplication(client, id);
            }
            );
        }
        #endregion

        #region VirtualDesktop
        /// <summary> Gets an object representing a VirtualDesktop along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="VirtualDesktop" /> object. </returns>
        public static VirtualDesktop GetVirtualDesktop(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                VirtualDesktop.ValidateResourceId(id);
                return new VirtualDesktop(client, id);
            }
            );
        }
        #endregion

        #region HostPool
        /// <summary> Gets an object representing a HostPool along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="HostPool" /> object. </returns>
        public static HostPool GetHostPool(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                HostPool.ValidateResourceId(id);
                return new HostPool(client, id);
            }
            );
        }
        #endregion

        #region UserSession
        /// <summary> Gets an object representing a UserSession along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="UserSession" /> object. </returns>
        public static UserSession GetUserSession(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                UserSession.ValidateResourceId(id);
                return new UserSession(client, id);
            }
            );
        }
        #endregion

        #region SessionHost
        /// <summary> Gets an object representing a SessionHost along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SessionHost" /> object. </returns>
        public static SessionHost GetSessionHost(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SessionHost.ValidateResourceId(id);
                return new SessionHost(client, id);
            }
            );
        }
        #endregion

        #region MsixPackage
        /// <summary> Gets an object representing a MsixPackage along with the instance operations that can be performed on it but with no data. </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="MsixPackage" /> object. </returns>
        public static MsixPackage GetMsixPackage(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                MsixPackage.ValidateResourceId(id);
                return new MsixPackage(client, id);
            }
            );
        }
        #endregion
    }
}
