// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.CostManagement.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The filter expression to be used in the report.
    /// </summary>
    public partial class ReportConfigFilter
    {
        /// <summary>
        /// Initializes a new instance of the ReportConfigFilter class.
        /// </summary>
        public ReportConfigFilter()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ReportConfigFilter class.
        /// </summary>
        /// <param name="and">The logical "AND" expression. Must have at least
        /// 2 items.</param>
        /// <param name="or">The logical "OR" expression. Must have at least 2
        /// items.</param>
        /// <param name="dimensions">Has comparison expression for a
        /// dimension</param>
        /// <param name="tags">Has comparison expression for a tag</param>
        /// <param name="tagKey">Has comparison expression for a tag
        /// key</param>
        /// <param name="tagValue">Has comparison expression for a tag
        /// value</param>
        public ReportConfigFilter(IList<ReportConfigFilter> and = default(IList<ReportConfigFilter>), IList<ReportConfigFilter> or = default(IList<ReportConfigFilter>), ReportConfigComparisonExpression dimensions = default(ReportConfigComparisonExpression), ReportConfigComparisonExpression tags = default(ReportConfigComparisonExpression), ReportConfigComparisonExpression tagKey = default(ReportConfigComparisonExpression), ReportConfigComparisonExpression tagValue = default(ReportConfigComparisonExpression))
        {
            And = and;
            Or = or;
            Dimensions = dimensions;
            Tags = tags;
            TagKey = tagKey;
            TagValue = tagValue;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the logical "AND" expression. Must have at least 2
        /// items.
        /// </summary>
        [JsonProperty(PropertyName = "and")]
        public IList<ReportConfigFilter> And { get; set; }

        /// <summary>
        /// Gets or sets the logical "OR" expression. Must have at least 2
        /// items.
        /// </summary>
        [JsonProperty(PropertyName = "or")]
        public IList<ReportConfigFilter> Or { get; set; }

        /// <summary>
        /// Gets or sets has comparison expression for a dimension
        /// </summary>
        [JsonProperty(PropertyName = "dimensions")]
        public ReportConfigComparisonExpression Dimensions { get; set; }

        /// <summary>
        /// Gets or sets has comparison expression for a tag
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public ReportConfigComparisonExpression Tags { get; set; }

        /// <summary>
        /// Gets or sets has comparison expression for a tag key
        /// </summary>
        [JsonProperty(PropertyName = "tagKey")]
        public ReportConfigComparisonExpression TagKey { get; set; }

        /// <summary>
        /// Gets or sets has comparison expression for a tag value
        /// </summary>
        [JsonProperty(PropertyName = "tagValue")]
        public ReportConfigComparisonExpression TagValue { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (And != null)
            {
                if (And.Count < 2)
                {
                    throw new ValidationException(ValidationRules.MinItems, "And", 2);
                }
                foreach (var element in And)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Or != null)
            {
                if (Or.Count < 2)
                {
                    throw new ValidationException(ValidationRules.MinItems, "Or", 2);
                }
                foreach (var element1 in Or)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
            if (Dimensions != null)
            {
                Dimensions.Validate();
            }
            if (Tags != null)
            {
                Tags.Validate();
            }
            if (TagKey != null)
            {
                TagKey.Validate();
            }
            if (TagValue != null)
            {
                TagValue.Validate();
            }
        }
    }
}
