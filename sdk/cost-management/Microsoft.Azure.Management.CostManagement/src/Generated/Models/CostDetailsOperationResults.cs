// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.CostManagement.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The result of the long running operation for cost details Api.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class CostDetailsOperationResults
    {
        /// <summary>
        /// Initializes a new instance of the CostDetailsOperationResults
        /// class.
        /// </summary>
        public CostDetailsOperationResults()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CostDetailsOperationResults
        /// class.
        /// </summary>
        /// <param name="id">The id of the long running operation.</param>
        /// <param name="name">The name of the long running operation.</param>
        /// <param name="type">The type of the long running operation.</param>
        /// <param name="status">The status of the cost details operation.
        /// Possible values include: 'CompletedCostDetailsStatusType',
        /// 'NoDataFoundCostDetailsStatusType',
        /// 'FailedCostDetailsStatusType'</param>
        /// <param name="manifestVersion">The Manifest version.</param>
        /// <param name="dataFormat">The data format of the report. Possible
        /// values include: 'CsvCostDetailsDataFormat'</param>
        /// <param name="byteCount">The total number of bytes in all
        /// blobs.</param>
        /// <param name="blobCount">The total number of blobs.</param>
        /// <param name="compressData">Is the data in compressed
        /// format.</param>
        /// <param name="requestScope">The request scope of the
        /// request.</param>
        /// <param name="requestBody">The request payload body provided in Cost
        /// Details call</param>
        /// <param name="blobs">List of blob information generated by this
        /// operation.</param>
        /// <param name="validTill">The time at which report URL becomes
        /// invalid/expires in UTC e.g. 2020-12-08T05:55:59.4394737Z.</param>
        /// <param name="error">The details of the error.</param>
        public CostDetailsOperationResults(string id = default(string), string name = default(string), string type = default(string), string status = default(string), string manifestVersion = default(string), string dataFormat = default(string), long? byteCount = default(long?), int? blobCount = default(int?), bool? compressData = default(bool?), string requestScope = default(string), GenerateCostDetailsReportRequestDefinition requestBody = default(GenerateCostDetailsReportRequestDefinition), IList<BlobInfo> blobs = default(IList<BlobInfo>), System.DateTime? validTill = default(System.DateTime?), ErrorDetails error = default(ErrorDetails))
        {
            Id = id;
            Name = name;
            Type = type;
            Status = status;
            ManifestVersion = manifestVersion;
            DataFormat = dataFormat;
            ByteCount = byteCount;
            BlobCount = blobCount;
            CompressData = compressData;
            RequestScope = requestScope;
            RequestBody = requestBody;
            Blobs = blobs;
            ValidTill = validTill;
            Error = error;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the id of the long running operation.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the name of the long running operation.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the type of the long running operation.
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets the status of the cost details operation. Possible
        /// values include: 'CompletedCostDetailsStatusType',
        /// 'NoDataFoundCostDetailsStatusType', 'FailedCostDetailsStatusType'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets the Manifest version.
        /// </summary>
        [JsonProperty(PropertyName = "manifest.manifestVersion")]
        public string ManifestVersion { get; set; }

        /// <summary>
        /// Gets or sets the data format of the report. Possible values
        /// include: 'CsvCostDetailsDataFormat'
        /// </summary>
        [JsonProperty(PropertyName = "manifest.dataFormat")]
        public string DataFormat { get; set; }

        /// <summary>
        /// Gets or sets the total number of bytes in all blobs.
        /// </summary>
        [JsonProperty(PropertyName = "manifest.byteCount")]
        public long? ByteCount { get; set; }

        /// <summary>
        /// Gets or sets the total number of blobs.
        /// </summary>
        [JsonProperty(PropertyName = "manifest.blobCount")]
        public int? BlobCount { get; set; }

        /// <summary>
        /// Gets or sets is the data in compressed format.
        /// </summary>
        [JsonProperty(PropertyName = "manifest.compressData")]
        public bool? CompressData { get; set; }

        /// <summary>
        /// Gets or sets the request scope of the request.
        /// </summary>
        [JsonProperty(PropertyName = "manifest.requestContext.requestScope")]
        public string RequestScope { get; set; }

        /// <summary>
        /// Gets or sets the request payload body provided in Cost Details call
        /// </summary>
        [JsonProperty(PropertyName = "manifest.requestContext.requestBody")]
        public GenerateCostDetailsReportRequestDefinition RequestBody { get; set; }

        /// <summary>
        /// Gets or sets list of blob information generated by this operation.
        /// </summary>
        [JsonProperty(PropertyName = "manifest.blobs")]
        public IList<BlobInfo> Blobs { get; set; }

        /// <summary>
        /// Gets or sets the time at which report URL becomes invalid/expires
        /// in UTC e.g. 2020-12-08T05:55:59.4394737Z.
        /// </summary>
        [JsonProperty(PropertyName = "validTill")]
        public System.DateTime? ValidTill { get; set; }

        /// <summary>
        /// Gets or sets the details of the error.
        /// </summary>
        [JsonProperty(PropertyName = "error")]
        public ErrorDetails Error { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (RequestBody != null)
            {
                RequestBody.Validate();
            }
        }
    }
}
