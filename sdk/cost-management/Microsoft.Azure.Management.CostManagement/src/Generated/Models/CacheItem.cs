// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.CostManagement.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class CacheItem
    {
        /// <summary>
        /// Initializes a new instance of the CacheItem class.
        /// </summary>
        public CacheItem()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CacheItem class.
        /// </summary>
        /// <param name="id">Resource ID used by Resource Manager to uniquely
        /// identify the scope.</param>
        /// <param name="name">Display name for the scope.</param>
        /// <param name="channel">Indicates the account type. Allowed values
        /// include: EA, PAYG, Modern, Internal, Unknown.</param>
        /// <param name="subchannel">Indicates the type of modern account.
        /// Allowed values include: Individual, Enterprise, Partner, Indirect,
        /// NotApplicable</param>
        /// <param name="parent">Resource ID of the parent scope. For instance,
        /// subscription's resource ID for a resource group or a management
        /// group resource ID for a subscription.</param>
        /// <param name="status">Indicates the status of the scope. Status only
        /// applies to subscriptions and billing accounts.</param>
        public CacheItem(string id, string name, string channel, string subchannel, string parent = default(string), string status = default(string))
        {
            Id = id;
            Name = name;
            Channel = channel;
            Subchannel = subchannel;
            Parent = parent;
            Status = status;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets resource ID used by Resource Manager to uniquely
        /// identify the scope.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets display name for the scope.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets indicates the account type. Allowed values include:
        /// EA, PAYG, Modern, Internal, Unknown.
        /// </summary>
        [JsonProperty(PropertyName = "channel")]
        public string Channel { get; set; }

        /// <summary>
        /// Gets or sets indicates the type of modern account. Allowed values
        /// include: Individual, Enterprise, Partner, Indirect, NotApplicable
        /// </summary>
        [JsonProperty(PropertyName = "subchannel")]
        public string Subchannel { get; set; }

        /// <summary>
        /// Gets or sets resource ID of the parent scope. For instance,
        /// subscription's resource ID for a resource group or a management
        /// group resource ID for a subscription.
        /// </summary>
        [JsonProperty(PropertyName = "parent")]
        public string Parent { get; set; }

        /// <summary>
        /// Gets or sets indicates the status of the scope. Status only applies
        /// to subscriptions and billing accounts.
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Id == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Id");
            }
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Channel == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Channel");
            }
            if (Subchannel == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Subchannel");
            }
        }
    }
}
