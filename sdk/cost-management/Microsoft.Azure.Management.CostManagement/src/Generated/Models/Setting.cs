// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.CostManagement.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// State of the myscope setting.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class Setting : ProxySettingResource
    {
        /// <summary>
        /// Initializes a new instance of the Setting class.
        /// </summary>
        public Setting()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Setting class.
        /// </summary>
        /// <param name="scope">Sets the default scope the current user will
        /// see when they sign into Azure Cost Management in the Azure
        /// portal.</param>
        /// <param name="id">Resource Id.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="kind">Resource kind.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="startOn">Indicates what scope Cost Management in the
        /// Azure portal should default to. Allowed values: LastUsed. Possible
        /// values include: 'LastUsed', 'ScopePicker', 'SpecificScope'</param>
        public Setting(string scope, string id = default(string), string name = default(string), string kind = default(string), string type = default(string), string startOn = default(string), IList<CacheItem> cache = default(IList<CacheItem>))
            : base(id, name, kind, type)
        {
            Scope = scope;
            StartOn = startOn;
            Cache = cache;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets sets the default scope the current user will see when
        /// they sign into Azure Cost Management in the Azure portal.
        /// </summary>
        [JsonProperty(PropertyName = "properties.scope")]
        public string Scope { get; set; }

        /// <summary>
        /// Gets or sets indicates what scope Cost Management in the Azure
        /// portal should default to. Allowed values: LastUsed. Possible values
        /// include: 'LastUsed', 'ScopePicker', 'SpecificScope'
        /// </summary>
        [JsonProperty(PropertyName = "properties.startOn")]
        public string StartOn { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.cache")]
        public IList<CacheItem> Cache { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (Scope == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Scope");
            }
            if (Cache != null)
            {
                foreach (var element in Cache)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
