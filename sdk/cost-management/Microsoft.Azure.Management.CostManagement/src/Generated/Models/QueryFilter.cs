// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.CostManagement.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The filter expression to be used in the export.
    /// </summary>
    public partial class QueryFilter
    {
        /// <summary>
        /// Initializes a new instance of the QueryFilter class.
        /// </summary>
        public QueryFilter()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the QueryFilter class.
        /// </summary>
        /// <param name="and">The logical "AND" expression. Must have at least
        /// 2 items.</param>
        /// <param name="or">The logical "OR" expression. Must have at least 2
        /// items.</param>
        /// <param name="not">The logical "NOT" expression.</param>
        /// <param name="dimension">Has comparison expression for a
        /// dimension</param>
        /// <param name="tag">Has comparison expression for a tag</param>
        public QueryFilter(IList<QueryFilter> and = default(IList<QueryFilter>), IList<QueryFilter> or = default(IList<QueryFilter>), QueryFilter not = default(QueryFilter), QueryComparisonExpression dimension = default(QueryComparisonExpression), QueryComparisonExpression tag = default(QueryComparisonExpression))
        {
            And = and;
            Or = or;
            Not = not;
            Dimension = dimension;
            Tag = tag;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the logical "AND" expression. Must have at least 2
        /// items.
        /// </summary>
        [JsonProperty(PropertyName = "and")]
        public IList<QueryFilter> And { get; set; }

        /// <summary>
        /// Gets or sets the logical "OR" expression. Must have at least 2
        /// items.
        /// </summary>
        [JsonProperty(PropertyName = "or")]
        public IList<QueryFilter> Or { get; set; }

        /// <summary>
        /// Gets or sets the logical "NOT" expression.
        /// </summary>
        [JsonProperty(PropertyName = "not")]
        public QueryFilter Not { get; set; }

        /// <summary>
        /// Gets or sets has comparison expression for a dimension
        /// </summary>
        [JsonProperty(PropertyName = "dimension")]
        public QueryComparisonExpression Dimension { get; set; }

        /// <summary>
        /// Gets or sets has comparison expression for a tag
        /// </summary>
        [JsonProperty(PropertyName = "tag")]
        public QueryComparisonExpression Tag { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (And != null)
            {
                if (And.Count < 2)
                {
                    throw new ValidationException(ValidationRules.MinItems, "And", 2);
                }
                foreach (var element in And)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Or != null)
            {
                if (Or.Count < 2)
                {
                    throw new ValidationException(ValidationRules.MinItems, "Or", 2);
                }
                foreach (var element1 in Or)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
            if (Not != null)
            {
                Not.Validate();
            }
            if (Dimension != null)
            {
                Dimension.Validate();
            }
            if (Tag != null)
            {
                Tag.Validate();
            }
        }
    }
}
