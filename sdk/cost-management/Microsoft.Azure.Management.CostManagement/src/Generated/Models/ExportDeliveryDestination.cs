// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.CostManagement.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// This represents the blob storage account location where exports of
    /// costs will be delivered. There are two ways to configure the
    /// destination. The approach recommended for most customers is to specify
    /// the resourceId of the storage account. This requires a one-time
    /// registration of the account's subscription with the
    /// Microsoft.CostManagementExports resource provider in order to give Cost
    /// Management services access to the storage. When creating an export in
    /// the Azure portal this registration is performed automatically but API
    /// users may need to register the subscription explicitly (for more
    /// information see
    /// https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-supported-services
    /// ). Another way to configure the destination is available ONLY to
    /// Partners with a Microsoft Partner Agreement plan who are global admins
    /// of their billing account. These Partners, instead of specifying the
    /// resourceId of a storage account, can specify the storage account name
    /// along with a SAS token for the account. This allows exports of costs to
    /// a storage account in any tenant. The SAS token should be created for
    /// the blob service with Service/Container/Object resource types and with
    /// Read/Write/Delete/List/Add/Create permissions (for more information see
    /// https://docs.microsoft.com/en-us/azure/cost-management-billing/costs/export-cost-data-storage-account-sas-key
    /// ).
    /// </summary>
    public partial class ExportDeliveryDestination
    {
        /// <summary>
        /// Initializes a new instance of the ExportDeliveryDestination class.
        /// </summary>
        public ExportDeliveryDestination()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ExportDeliveryDestination class.
        /// </summary>
        /// <param name="container">The name of the container where exports
        /// will be uploaded. If the container does not exist it will be
        /// created.</param>
        /// <param name="resourceId">The resource id of the storage account
        /// where exports will be delivered. This is not required if a sasToken
        /// and storageAccount are specified.</param>
        /// <param name="rootFolderPath">The name of the directory where
        /// exports will be uploaded.</param>
        /// <param name="sasToken">A SAS token for the storage account. For a
        /// restricted set of Azure customers this together with storageAccount
        /// can be specified instead of resourceId. Note: the value returned by
        /// the API for this property will always be obfuscated. Returning this
        /// same obfuscated value will not result in the SAS token being
        /// updated. To update this value a new SAS token must be
        /// specified.</param>
        /// <param name="storageAccount">The storage account where exports will
        /// be uploaded. For a restricted set of Azure customers this together
        /// with sasToken can be specified instead of resourceId.</param>
        public ExportDeliveryDestination(string container, string resourceId = default(string), string rootFolderPath = default(string), string sasToken = default(string), string storageAccount = default(string))
        {
            ResourceId = resourceId;
            Container = container;
            RootFolderPath = rootFolderPath;
            SasToken = sasToken;
            StorageAccount = storageAccount;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the resource id of the storage account where exports
        /// will be delivered. This is not required if a sasToken and
        /// storageAccount are specified.
        /// </summary>
        [JsonProperty(PropertyName = "resourceId")]
        public string ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the name of the container where exports will be
        /// uploaded. If the container does not exist it will be created.
        /// </summary>
        [JsonProperty(PropertyName = "container")]
        public string Container { get; set; }

        /// <summary>
        /// Gets or sets the name of the directory where exports will be
        /// uploaded.
        /// </summary>
        [JsonProperty(PropertyName = "rootFolderPath")]
        public string RootFolderPath { get; set; }

        /// <summary>
        /// Gets or sets a SAS token for the storage account. For a restricted
        /// set of Azure customers this together with storageAccount can be
        /// specified instead of resourceId. Note: the value returned by the
        /// API for this property will always be obfuscated. Returning this
        /// same obfuscated value will not result in the SAS token being
        /// updated. To update this value a new SAS token must be specified.
        /// </summary>
        [JsonProperty(PropertyName = "sasToken")]
        public string SasToken { get; set; }

        /// <summary>
        /// Gets or sets the storage account where exports will be uploaded.
        /// For a restricted set of Azure customers this together with sasToken
        /// can be specified instead of resourceId.
        /// </summary>
        [JsonProperty(PropertyName = "storageAccount")]
        public string StorageAccount { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Container == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Container");
            }
        }
    }
}
