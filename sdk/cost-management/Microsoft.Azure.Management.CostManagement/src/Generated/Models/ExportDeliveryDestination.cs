// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.CostManagement.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The destination information for the delivery of the export. To allow
    /// access to a storage account, you must register the account's
    /// subscription with the Microsoft.CostManagementExports resource
    /// provider. This is required once per subscription. When creating an
    /// export in the Azure portal, it is done automatically, however API users
    /// need to register the subscription. For more information see
    /// https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-supported-services
    /// .
    /// </summary>
    public partial class ExportDeliveryDestination
    {
        /// <summary>
        /// Initializes a new instance of the ExportDeliveryDestination class.
        /// </summary>
        public ExportDeliveryDestination()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ExportDeliveryDestination class.
        /// </summary>
        /// <param name="resourceId">The resource id of the storage account
        /// where exports will be delivered.</param>
        /// <param name="container">The name of the container where exports
        /// will be uploaded.</param>
        /// <param name="rootFolderPath">The name of the directory where
        /// exports will be uploaded.</param>
        public ExportDeliveryDestination(string resourceId, string container, string rootFolderPath = default(string))
        {
            ResourceId = resourceId;
            Container = container;
            RootFolderPath = rootFolderPath;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the resource id of the storage account where exports
        /// will be delivered.
        /// </summary>
        [JsonProperty(PropertyName = "resourceId")]
        public string ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the name of the container where exports will be
        /// uploaded.
        /// </summary>
        [JsonProperty(PropertyName = "container")]
        public string Container { get; set; }

        /// <summary>
        /// Gets or sets the name of the directory where exports will be
        /// uploaded.
        /// </summary>
        [JsonProperty(PropertyName = "rootFolderPath")]
        public string RootFolderPath { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ResourceId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ResourceId");
            }
            if (Container == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Container");
            }
        }
    }
}
