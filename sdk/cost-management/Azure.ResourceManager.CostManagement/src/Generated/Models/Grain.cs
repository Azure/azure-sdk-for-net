// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.CostManagement.Models
{
    /// <summary> Grain which corresponds to value. </summary>
    public readonly partial struct Grain : IEquatable<Grain>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="Grain"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Grain(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string HourlyValue = "Hourly";
        private const string DailyValue = "Daily";
        private const string MonthlyValue = "Monthly";

        /// <summary> Hourly grain corresponds to value per hour. </summary>
        public static Grain Hourly { get; } = new Grain(HourlyValue);
        /// <summary> Hourly grain corresponds to value per day. </summary>
        public static Grain Daily { get; } = new Grain(DailyValue);
        /// <summary> Hourly grain corresponds to value per month. </summary>
        public static Grain Monthly { get; } = new Grain(MonthlyValue);
        /// <summary> Determines if two <see cref="Grain"/> values are the same. </summary>
        public static bool operator ==(Grain left, Grain right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Grain"/> values are not the same. </summary>
        public static bool operator !=(Grain left, Grain right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Grain"/>. </summary>
        public static implicit operator Grain(string value) => new Grain(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Grain other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Grain other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
