// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.CostManagement.Models
{
    /// <summary> Weeks of month. </summary>
    public readonly partial struct WeeksOfMonth : IEquatable<WeeksOfMonth>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="WeeksOfMonth"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public WeeksOfMonth(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string FirstValue = "First";
        private const string SecondValue = "Second";
        private const string ThirdValue = "Third";
        private const string FourthValue = "Fourth";
        private const string LastValue = "Last";

        /// <summary> First. </summary>
        public static WeeksOfMonth First { get; } = new WeeksOfMonth(FirstValue);
        /// <summary> Second. </summary>
        public static WeeksOfMonth Second { get; } = new WeeksOfMonth(SecondValue);
        /// <summary> Third. </summary>
        public static WeeksOfMonth Third { get; } = new WeeksOfMonth(ThirdValue);
        /// <summary> Fourth. </summary>
        public static WeeksOfMonth Fourth { get; } = new WeeksOfMonth(FourthValue);
        /// <summary> Last. </summary>
        public static WeeksOfMonth Last { get; } = new WeeksOfMonth(LastValue);
        /// <summary> Determines if two <see cref="WeeksOfMonth"/> values are the same. </summary>
        public static bool operator ==(WeeksOfMonth left, WeeksOfMonth right) => left.Equals(right);
        /// <summary> Determines if two <see cref="WeeksOfMonth"/> values are not the same. </summary>
        public static bool operator !=(WeeksOfMonth left, WeeksOfMonth right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="WeeksOfMonth"/>. </summary>
        public static implicit operator WeeksOfMonth(string value) => new WeeksOfMonth(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is WeeksOfMonth other && Equals(other);
        /// <inheritdoc />
        public bool Equals(WeeksOfMonth other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
