// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;
using Azure.ResourceManager.CostManagement.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.CostManagement
{
    public partial class CostDetailsOperationResultData
    {
        internal static CostDetailsOperationResultData DeserializeCostDetailsOperationResultData(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<CostDetailsStatusType> status = default;
            Optional<DateTimeOffset> validTill = default;
            Optional<ErrorDetails> error = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            Optional<SystemData> systemData = default;
            Optional<string> manifestVersion = default;
            Optional<CostDetailsDataFormat> dataFormat = default;
            Optional<long> byteCount = default;
            Optional<int> blobCount = default;
            Optional<bool> compressData = default;
            Optional<IReadOnlyList<BlobInfo>> blobs = default;
            Optional<string> requestScope = default;
            Optional<GenerateCostDetailsReportRequestDefinition> requestBody = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("status"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    status = new CostDetailsStatusType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("validTill"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    validTill = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("error"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    error = ErrorDetails.DeserializeErrorDetails(property.Value);
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.GetRawText());
                    continue;
                }
                if (property.NameEquals("manifest"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("manifestVersion"u8))
                        {
                            manifestVersion = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("dataFormat"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            dataFormat = new CostDetailsDataFormat(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("byteCount"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            byteCount = property0.Value.GetInt64();
                            continue;
                        }
                        if (property0.NameEquals("blobCount"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            blobCount = property0.Value.GetInt32();
                            continue;
                        }
                        if (property0.NameEquals("compressData"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            compressData = property0.Value.GetBoolean();
                            continue;
                        }
                        if (property0.NameEquals("blobs"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<BlobInfo> array = new List<BlobInfo>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                array.Add(BlobInfo.DeserializeBlobInfo(item));
                            }
                            blobs = array;
                            continue;
                        }
                        if (property0.NameEquals("requestContext"u8))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            foreach (var property1 in property0.Value.EnumerateObject())
                            {
                                if (property1.NameEquals("requestScope"u8))
                                {
                                    requestScope = property1.Value.GetString();
                                    continue;
                                }
                                if (property1.NameEquals("requestBody"u8))
                                {
                                    if (property1.Value.ValueKind == JsonValueKind.Null)
                                    {
                                        continue;
                                    }
                                    requestBody = GenerateCostDetailsReportRequestDefinition.DeserializeGenerateCostDetailsReportRequestDefinition(property1.Value);
                                    continue;
                                }
                            }
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new CostDetailsOperationResultData(id, name, type, systemData.Value, Optional.ToNullable(status), Optional.ToNullable(validTill), error.Value, manifestVersion.Value, Optional.ToNullable(dataFormat), Optional.ToNullable(byteCount), Optional.ToNullable(blobCount), Optional.ToNullable(compressData), Optional.ToList(blobs), requestScope.Value, requestBody.Value);
        }
    }
}
