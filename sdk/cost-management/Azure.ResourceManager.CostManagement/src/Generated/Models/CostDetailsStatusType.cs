// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.CostManagement.Models
{
    /// <summary> The status of the cost details operation. </summary>
    public readonly partial struct CostDetailsStatusType : IEquatable<CostDetailsStatusType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="CostDetailsStatusType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public CostDetailsStatusType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string CompletedCostDetailsStatusTypeValue = "Completed";
        private const string NoDataFoundCostDetailsStatusTypeValue = "NoDataFound";
        private const string FailedCostDetailsStatusTypeValue = "Failed";

        /// <summary> Operation is Completed. </summary>
        public static CostDetailsStatusType CompletedCostDetailsStatusType { get; } = new CostDetailsStatusType(CompletedCostDetailsStatusTypeValue);
        /// <summary> Operation is Completed and no cost data found. </summary>
        public static CostDetailsStatusType NoDataFoundCostDetailsStatusType { get; } = new CostDetailsStatusType(NoDataFoundCostDetailsStatusTypeValue);
        /// <summary> Operation Failed. </summary>
        public static CostDetailsStatusType FailedCostDetailsStatusType { get; } = new CostDetailsStatusType(FailedCostDetailsStatusTypeValue);
        /// <summary> Determines if two <see cref="CostDetailsStatusType"/> values are the same. </summary>
        public static bool operator ==(CostDetailsStatusType left, CostDetailsStatusType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="CostDetailsStatusType"/> values are not the same. </summary>
        public static bool operator !=(CostDetailsStatusType left, CostDetailsStatusType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="CostDetailsStatusType"/>. </summary>
        public static implicit operator CostDetailsStatusType(string value) => new CostDetailsStatusType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is CostDetailsStatusType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(CostDetailsStatusType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
