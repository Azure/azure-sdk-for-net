// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.CostManagement.Models
{
    /// <summary> Chart type of the main view in Cost Analysis. Required. </summary>
    public readonly partial struct ChartType : IEquatable<ChartType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ChartType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ChartType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AreaValue = "Area";
        private const string LineValue = "Line";
        private const string StackedColumnValue = "StackedColumn";
        private const string GroupedColumnValue = "GroupedColumn";
        private const string TableValue = "Table";

        /// <summary> Area. </summary>
        public static ChartType Area { get; } = new ChartType(AreaValue);
        /// <summary> Line. </summary>
        public static ChartType Line { get; } = new ChartType(LineValue);
        /// <summary> StackedColumn. </summary>
        public static ChartType StackedColumn { get; } = new ChartType(StackedColumnValue);
        /// <summary> GroupedColumn. </summary>
        public static ChartType GroupedColumn { get; } = new ChartType(GroupedColumnValue);
        /// <summary> Table. </summary>
        public static ChartType Table { get; } = new ChartType(TableValue);
        /// <summary> Determines if two <see cref="ChartType"/> values are the same. </summary>
        public static bool operator ==(ChartType left, ChartType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ChartType"/> values are not the same. </summary>
        public static bool operator !=(ChartType left, ChartType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ChartType"/>. </summary>
        public static implicit operator ChartType(string value) => new ChartType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ChartType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ChartType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
