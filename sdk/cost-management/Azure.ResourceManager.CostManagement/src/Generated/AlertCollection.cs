// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace Azure.ResourceManager.CostManagement
{
    /// <summary>
    /// A class representing a collection of <see cref="AlertResource" /> and their operations.
    /// Each <see cref="AlertResource" /> in the collection will belong to the same instance of <see cref="ArmResource" />.
    /// To get an <see cref="AlertCollection" /> instance call the GetAlerts method from an instance of <see cref="ArmResource" />.
    /// </summary>
    public partial class AlertCollection : ArmCollection, IEnumerable<AlertResource>, IAsyncEnumerable<AlertResource>
    {
        private readonly ClientDiagnostics _alertClientDiagnostics;
        private readonly AlertsRestOperations _alertRestClient;

        /// <summary> Initializes a new instance of the <see cref="AlertCollection"/> class for mocking. </summary>
        protected AlertCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="AlertCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal AlertCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _alertClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.CostManagement", AlertResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(AlertResource.ResourceType, out string alertApiVersion);
            _alertRestClient = new AlertsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, alertApiVersion);
        }

        /// <summary>
        /// Gets the alert for the scope by alert ID.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{scope}/providers/Microsoft.CostManagement/alerts/{alertId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Alerts_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="alertId"> Alert ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="alertId"/> is null. </exception>
        public virtual async Task<Response<AlertResource>> GetAsync(string alertId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(alertId, nameof(alertId));

            using var scope = _alertClientDiagnostics.CreateScope("AlertCollection.Get");
            scope.Start();
            try
            {
                var response = await _alertRestClient.GetAsync(Id, alertId, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new AlertResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Gets the alert for the scope by alert ID.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{scope}/providers/Microsoft.CostManagement/alerts/{alertId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Alerts_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="alertId"> Alert ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="alertId"/> is null. </exception>
        public virtual Response<AlertResource> Get(string alertId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(alertId, nameof(alertId));

            using var scope = _alertClientDiagnostics.CreateScope("AlertCollection.Get");
            scope.Start();
            try
            {
                var response = _alertRestClient.Get(Id, alertId, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new AlertResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Lists the alerts for scope defined.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{scope}/providers/Microsoft.CostManagement/alerts</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Alerts_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="AlertResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<AlertResource> GetAllAsync(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _alertRestClient.CreateListRequest(Id);
            return PageableHelpers.CreateAsyncPageable(FirstPageRequest, null, e => new AlertResource(Client, AlertData.DeserializeAlertData(e)), _alertClientDiagnostics, Pipeline, "AlertCollection.GetAll", "value", null, cancellationToken);
        }

        /// <summary>
        /// Lists the alerts for scope defined.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{scope}/providers/Microsoft.CostManagement/alerts</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Alerts_List</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="AlertResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<AlertResource> GetAll(CancellationToken cancellationToken = default)
        {
            HttpMessage FirstPageRequest(int? pageSizeHint) => _alertRestClient.CreateListRequest(Id);
            return PageableHelpers.CreatePageable(FirstPageRequest, null, e => new AlertResource(Client, AlertData.DeserializeAlertData(e)), _alertClientDiagnostics, Pipeline, "AlertCollection.GetAll", "value", null, cancellationToken);
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{scope}/providers/Microsoft.CostManagement/alerts/{alertId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Alerts_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="alertId"> Alert ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="alertId"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string alertId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(alertId, nameof(alertId));

            using var scope = _alertClientDiagnostics.CreateScope("AlertCollection.Exists");
            scope.Start();
            try
            {
                var response = await _alertRestClient.GetAsync(Id, alertId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{scope}/providers/Microsoft.CostManagement/alerts/{alertId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>Alerts_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="alertId"> Alert ID. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="alertId"/> is null. </exception>
        public virtual Response<bool> Exists(string alertId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNull(alertId, nameof(alertId));

            using var scope = _alertClientDiagnostics.CreateScope("AlertCollection.Exists");
            scope.Start();
            try
            {
                var response = _alertRestClient.Get(Id, alertId, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        IEnumerator<AlertResource> IEnumerable<AlertResource>.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetAll().GetEnumerator();
        }

        IAsyncEnumerator<AlertResource> IAsyncEnumerable<AlertResource>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAllAsync(cancellationToken: cancellationToken).GetAsyncEnumerator(cancellationToken);
        }
    }
}
