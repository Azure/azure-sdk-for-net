// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace Azure.ResourceManager.CostManagement
{
    /// <summary>
    /// A class representing a collection of <see cref="CostDetailsOperationResultResource" /> and their operations.
    /// Each <see cref="CostDetailsOperationResultResource" /> in the collection will belong to the same instance of <see cref="ArmResource" />.
    /// To get a <see cref="CostDetailsOperationResultCollection" /> instance call the GetCostDetailsOperationResults method from an instance of <see cref="ArmResource" />.
    /// </summary>
    public partial class CostDetailsOperationResultCollection : ArmCollection
    {
        private readonly ClientDiagnostics _costDetailsOperationResultGenerateCostDetailsReportClientDiagnostics;
        private readonly GenerateCostDetailsReportRestOperations _costDetailsOperationResultGenerateCostDetailsReportRestClient;

        /// <summary> Initializes a new instance of the <see cref="CostDetailsOperationResultCollection"/> class for mocking. </summary>
        protected CostDetailsOperationResultCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="CostDetailsOperationResultCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal CostDetailsOperationResultCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _costDetailsOperationResultGenerateCostDetailsReportClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.CostManagement", CostDetailsOperationResultResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(CostDetailsOperationResultResource.ResourceType, out string costDetailsOperationResultGenerateCostDetailsReportApiVersion);
            _costDetailsOperationResultGenerateCostDetailsReportRestClient = new GenerateCostDetailsReportRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, costDetailsOperationResultGenerateCostDetailsReportApiVersion);
        }

        /// <summary>
        /// Get the result of the specified operation. This link is provided in the CostDetails creation request response Location header.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{scope}/providers/Microsoft.CostManagement/costDetailsOperationResults/{operationId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GenerateCostDetailsReport_GetOperationResults</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="operationId"> The target operation Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="operationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/> is null. </exception>
        public virtual async Task<ArmOperation<CostDetailsOperationResultResource>> GetAsync(WaitUntil waitUntil, string operationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(operationId, nameof(operationId));

            using var scope = _costDetailsOperationResultGenerateCostDetailsReportClientDiagnostics.CreateScope("CostDetailsOperationResultCollection.Get");
            scope.Start();
            try
            {
                var response = await _costDetailsOperationResultGenerateCostDetailsReportRestClient.GetOperationResultsAsync(Id, operationId, cancellationToken).ConfigureAwait(false);
                var operation = new CostManagementArmOperation<CostDetailsOperationResultResource>(new CostDetailsOperationResultOperationSource(Client), _costDetailsOperationResultGenerateCostDetailsReportClientDiagnostics, Pipeline, _costDetailsOperationResultGenerateCostDetailsReportRestClient.CreateGetOperationResultsRequest(Id, operationId).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    await operation.WaitForCompletionAsync(cancellationToken).ConfigureAwait(false);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get the result of the specified operation. This link is provided in the CostDetails creation request response Location header.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{scope}/providers/Microsoft.CostManagement/costDetailsOperationResults/{operationId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GenerateCostDetailsReport_GetOperationResults</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="operationId"> The target operation Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="operationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/> is null. </exception>
        public virtual ArmOperation<CostDetailsOperationResultResource> Get(WaitUntil waitUntil, string operationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(operationId, nameof(operationId));

            using var scope = _costDetailsOperationResultGenerateCostDetailsReportClientDiagnostics.CreateScope("CostDetailsOperationResultCollection.Get");
            scope.Start();
            try
            {
                var response = _costDetailsOperationResultGenerateCostDetailsReportRestClient.GetOperationResults(Id, operationId, cancellationToken);
                var operation = new CostManagementArmOperation<CostDetailsOperationResultResource>(new CostDetailsOperationResultOperationSource(Client), _costDetailsOperationResultGenerateCostDetailsReportClientDiagnostics, Pipeline, _costDetailsOperationResultGenerateCostDetailsReportRestClient.CreateGetOperationResultsRequest(Id, operationId).Request, response, OperationFinalStateVia.Location);
                if (waitUntil == WaitUntil.Completed)
                    operation.WaitForCompletion(cancellationToken);
                return operation;
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{scope}/providers/Microsoft.CostManagement/costDetailsOperationResults/{operationId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GenerateCostDetailsReport_GetOperationResults</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="operationId"> The target operation Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="operationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/> is null. </exception>
        public virtual async Task<ArmOperation<bool>> ExistsAsync(WaitUntil waitUntil, string operationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(operationId, nameof(operationId));

            using var scope = _costDetailsOperationResultGenerateCostDetailsReportClientDiagnostics.CreateScope("CostDetailsOperationResultCollection.Exists");
            scope.Start();
            try
            {
                var response = await _costDetailsOperationResultGenerateCostDetailsReportRestClient.GetOperationResultsAsync(Id, operationId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{scope}/providers/Microsoft.CostManagement/costDetailsOperationResults/{operationId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GenerateCostDetailsReport_GetOperationResults</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="waitUntil"> <see cref="WaitUntil.Completed"/> if the method should wait to return until the long-running operation has completed on the service; <see cref="WaitUntil.Started"/> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        /// <param name="operationId"> The target operation Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="operationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/> is null. </exception>
        public virtual ArmOperation<bool> Exists(WaitUntil waitUntil, string operationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(operationId, nameof(operationId));

            using var scope = _costDetailsOperationResultGenerateCostDetailsReportClientDiagnostics.CreateScope("CostDetailsOperationResultCollection.Exists");
            scope.Start();
            try
            {
                var response = _costDetailsOperationResultGenerateCostDetailsReportRestClient.GetOperationResults(Id, operationId, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
