// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace Azure.ResourceManager.CostManagement
{
    /// <summary>
    /// A class representing a collection of <see cref="GenerateDetailedCostReportOperationStatusResource" /> and their operations.
    /// Each <see cref="GenerateDetailedCostReportOperationStatusResource" /> in the collection will belong to the same instance of <see cref="ArmResource" />.
    /// To get a <see cref="GenerateDetailedCostReportOperationStatusCollection" /> instance call the GetGenerateDetailedCostReportOperationStatuses method from an instance of <see cref="ArmResource" />.
    /// </summary>
    public partial class GenerateDetailedCostReportOperationStatusCollection : ArmCollection
    {
        private readonly ClientDiagnostics _generateDetailedCostReportOperationStatusGenerateDetailedCostReportOperationStatusClientDiagnostics;
        private readonly GenerateDetailedCostReportOperationStatusRestOperations _generateDetailedCostReportOperationStatusGenerateDetailedCostReportOperationStatusRestClient;

        /// <summary> Initializes a new instance of the <see cref="GenerateDetailedCostReportOperationStatusCollection"/> class for mocking. </summary>
        protected GenerateDetailedCostReportOperationStatusCollection()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="GenerateDetailedCostReportOperationStatusCollection"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the parent resource that is the target of operations. </param>
        internal GenerateDetailedCostReportOperationStatusCollection(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
            _generateDetailedCostReportOperationStatusGenerateDetailedCostReportOperationStatusClientDiagnostics = new ClientDiagnostics("Azure.ResourceManager.CostManagement", GenerateDetailedCostReportOperationStatusResource.ResourceType.Namespace, Diagnostics);
            TryGetApiVersion(GenerateDetailedCostReportOperationStatusResource.ResourceType, out string generateDetailedCostReportOperationStatusGenerateDetailedCostReportOperationStatusApiVersion);
            _generateDetailedCostReportOperationStatusGenerateDetailedCostReportOperationStatusRestClient = new GenerateDetailedCostReportOperationStatusRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, generateDetailedCostReportOperationStatusGenerateDetailedCostReportOperationStatusApiVersion);
        }

        /// <summary>
        /// Get the status of the specified operation. This link is provided in the GenerateDetailedCostReport creation request response header.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{scope}/providers/Microsoft.CostManagement/operationStatus/{operationId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GenerateDetailedCostReportOperationStatus_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="operationId"> The target operation Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="operationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/> is null. </exception>
        public virtual async Task<Response<GenerateDetailedCostReportOperationStatusResource>> GetAsync(string operationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(operationId, nameof(operationId));

            using var scope = _generateDetailedCostReportOperationStatusGenerateDetailedCostReportOperationStatusClientDiagnostics.CreateScope("GenerateDetailedCostReportOperationStatusCollection.Get");
            scope.Start();
            try
            {
                var response = await _generateDetailedCostReportOperationStatusGenerateDetailedCostReportOperationStatusRestClient.GetAsync(Id, operationId, cancellationToken).ConfigureAwait(false);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new GenerateDetailedCostReportOperationStatusResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Get the status of the specified operation. This link is provided in the GenerateDetailedCostReport creation request response header.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{scope}/providers/Microsoft.CostManagement/operationStatus/{operationId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GenerateDetailedCostReportOperationStatus_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="operationId"> The target operation Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="operationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/> is null. </exception>
        public virtual Response<GenerateDetailedCostReportOperationStatusResource> Get(string operationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(operationId, nameof(operationId));

            using var scope = _generateDetailedCostReportOperationStatusGenerateDetailedCostReportOperationStatusClientDiagnostics.CreateScope("GenerateDetailedCostReportOperationStatusCollection.Get");
            scope.Start();
            try
            {
                var response = _generateDetailedCostReportOperationStatusGenerateDetailedCostReportOperationStatusRestClient.Get(Id, operationId, cancellationToken);
                if (response.Value == null)
                    throw new RequestFailedException(response.GetRawResponse());
                return Response.FromValue(new GenerateDetailedCostReportOperationStatusResource(Client, response.Value), response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{scope}/providers/Microsoft.CostManagement/operationStatus/{operationId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GenerateDetailedCostReportOperationStatus_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="operationId"> The target operation Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="operationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/> is null. </exception>
        public virtual async Task<Response<bool>> ExistsAsync(string operationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(operationId, nameof(operationId));

            using var scope = _generateDetailedCostReportOperationStatusGenerateDetailedCostReportOperationStatusClientDiagnostics.CreateScope("GenerateDetailedCostReportOperationStatusCollection.Exists");
            scope.Start();
            try
            {
                var response = await _generateDetailedCostReportOperationStatusGenerateDetailedCostReportOperationStatusRestClient.GetAsync(Id, operationId, cancellationToken: cancellationToken).ConfigureAwait(false);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <summary>
        /// Checks to see if the resource exists in azure.
        /// <list type="bullet">
        /// <item>
        /// <term>Request Path</term>
        /// <description>/{scope}/providers/Microsoft.CostManagement/operationStatus/{operationId}</description>
        /// </item>
        /// <item>
        /// <term>Operation Id</term>
        /// <description>GenerateDetailedCostReportOperationStatus_Get</description>
        /// </item>
        /// </list>
        /// </summary>
        /// <param name="operationId"> The target operation Id. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="operationId"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="operationId"/> is null. </exception>
        public virtual Response<bool> Exists(string operationId, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(operationId, nameof(operationId));

            using var scope = _generateDetailedCostReportOperationStatusGenerateDetailedCostReportOperationStatusClientDiagnostics.CreateScope("GenerateDetailedCostReportOperationStatusCollection.Exists");
            scope.Start();
            try
            {
                var response = _generateDetailedCostReportOperationStatusGenerateDetailedCostReportOperationStatusRestClient.Get(Id, operationId, cancellationToken: cancellationToken);
                return Response.FromValue(response.Value != null, response.GetRawResponse());
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }
    }
}
