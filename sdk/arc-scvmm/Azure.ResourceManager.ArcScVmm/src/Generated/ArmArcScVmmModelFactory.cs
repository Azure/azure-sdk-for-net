// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;
using Azure.Core;
using Azure.ResourceManager.ArcScVmm;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Resources.Models;

namespace Azure.ResourceManager.ArcScVmm.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class ArmArcScVmmModelFactory
    {
        /// <summary> Initializes a new instance of ScVmmServerData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="extendedLocation"> The extended location. </param>
        /// <param name="credentials"> Credentials to connect to VMMServer. </param>
        /// <param name="fqdn"> Fqdn is the hostname/ip of the vmmServer. </param>
        /// <param name="port"> Port is the port on which the vmmServer is listening. </param>
        /// <param name="connectionStatus"> Gets the connection status to the vmmServer. </param>
        /// <param name="errorMessage"> Gets any error message if connection to vmmServer is having any issue. </param>
        /// <param name="uuid"> Unique ID of vmmServer. </param>
        /// <param name="version"> Version is the version of the vmmSever. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <returns> A new <see cref="ArcScVmm.ScVmmServerData"/> instance for mocking. </returns>
        public static ScVmmServerData ScVmmServerData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ExtendedLocation extendedLocation = null, VmmCredential credentials = null, string fqdn = null, int? port = null, string connectionStatus = null, string errorMessage = null, string uuid = null, string version = null, ProvisioningState? provisioningState = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ScVmmServerData(id, name, resourceType, systemData, tags, location, extendedLocation, credentials, fqdn, port, connectionStatus, errorMessage, uuid, version, provisioningState);
        }

        /// <summary> Initializes a new instance of ScVmmCloudData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="extendedLocation"> The extended location. </param>
        /// <param name="inventoryItemId"> Gets or sets the inventory Item ID for the resource. </param>
        /// <param name="uuid"> Unique ID of the cloud. </param>
        /// <param name="vmmServerId"> ARM Id of the vmmServer resource in which this resource resides. </param>
        /// <param name="cloudName"> Name of the cloud in VMMServer. </param>
        /// <param name="cloudCapacity"> Capacity of the cloud. </param>
        /// <param name="storageQoSPolicies"> List of QoS policies available for the cloud. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <returns> A new <see cref="ArcScVmm.ScVmmCloudData"/> instance for mocking. </returns>
        public static ScVmmCloudData ScVmmCloudData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ExtendedLocation extendedLocation = null, string inventoryItemId = null, string uuid = null, ResourceIdentifier vmmServerId = null, string cloudName = null, CloudCapacity cloudCapacity = null, IEnumerable<StorageQoSPolicy> storageQoSPolicies = null, ProvisioningState? provisioningState = null)
        {
            tags ??= new Dictionary<string, string>();
            storageQoSPolicies ??= new List<StorageQoSPolicy>();

            return new ScVmmCloudData(id, name, resourceType, systemData, tags, location, extendedLocation, inventoryItemId, uuid, vmmServerId, cloudName, cloudCapacity, storageQoSPolicies?.ToList(), provisioningState);
        }

        /// <summary> Initializes a new instance of CloudCapacity. </summary>
        /// <param name="cpuCount"> CPUCount specifies the maximum number of CPUs that can be allocated in the cloud. </param>
        /// <param name="memoryMB"> MemoryMB specifies a memory usage limit in megabytes. </param>
        /// <param name="vmCount"> VMCount gives the max number of VMs that can be deployed in the cloud. </param>
        /// <returns> A new <see cref="Models.CloudCapacity"/> instance for mocking. </returns>
        public static CloudCapacity CloudCapacity(long? cpuCount = null, long? memoryMB = null, long? vmCount = null)
        {
            return new CloudCapacity(cpuCount, memoryMB, vmCount);
        }

        /// <summary> Initializes a new instance of StorageQoSPolicy. </summary>
        /// <param name="name"> The name of the policy. </param>
        /// <param name="id"> The ID of the QoS policy. </param>
        /// <param name="iopsMaximum"> The maximum IO operations per second. </param>
        /// <param name="iopsMinimum"> The minimum IO operations per second. </param>
        /// <param name="bandwidthLimit"> The Bandwidth Limit for internet traffic. </param>
        /// <param name="policyId"> The underlying policy. </param>
        /// <returns> A new <see cref="Models.StorageQoSPolicy"/> instance for mocking. </returns>
        public static StorageQoSPolicy StorageQoSPolicy(string name = null, string id = null, long? iopsMaximum = null, long? iopsMinimum = null, long? bandwidthLimit = null, string policyId = null)
        {
            return new StorageQoSPolicy(name, id, iopsMaximum, iopsMinimum, bandwidthLimit, policyId);
        }

        /// <summary> Initializes a new instance of ScVmmVirtualNetworkData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="extendedLocation"> The extended location. </param>
        /// <param name="inventoryItemId"> Gets or sets the inventory Item ID for the resource. </param>
        /// <param name="uuid"> Unique ID of the virtual network. </param>
        /// <param name="vmmServerId"> ARM Id of the vmmServer resource in which this resource resides. </param>
        /// <param name="networkName"> Name of the virtual network in vmmServer. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <returns> A new <see cref="ArcScVmm.ScVmmVirtualNetworkData"/> instance for mocking. </returns>
        public static ScVmmVirtualNetworkData ScVmmVirtualNetworkData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ExtendedLocation extendedLocation = null, string inventoryItemId = null, string uuid = null, ResourceIdentifier vmmServerId = null, string networkName = null, ProvisioningState? provisioningState = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ScVmmVirtualNetworkData(id, name, resourceType, systemData, tags, location, extendedLocation, inventoryItemId, uuid, vmmServerId, networkName, provisioningState);
        }

        /// <summary> Initializes a new instance of ScVmmVirtualMachineTemplateData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="extendedLocation"> The extended location. </param>
        /// <param name="inventoryItemId"> Gets or sets the inventory Item ID for the resource. </param>
        /// <param name="uuid"> Unique ID of the virtual machine template. </param>
        /// <param name="vmmServerId"> ARM Id of the vmmServer resource in which this resource resides. </param>
        /// <param name="osType"> Gets the type of the os. </param>
        /// <param name="osName"> Gets os name. </param>
        /// <param name="computerName"> Gets computer name. </param>
        /// <param name="memoryMB"> MemoryMB is the desired size of a virtual machine's memory, in MB. </param>
        /// <param name="cpuCount"> Gets the desired number of vCPUs for the vm. </param>
        /// <param name="limitCpuForMigration"> Gets a value indicating whether to enable processor compatibility mode for live migration of VMs. </param>
        /// <param name="dynamicMemoryEnabled"> Gets a value indicating whether to enable dynamic memory or not. </param>
        /// <param name="isCustomizable"> Gets a value indicating whether the vm template is customizable or not. </param>
        /// <param name="dynamicMemoryMaxMB"> Gets the max dynamic memory for the vm. </param>
        /// <param name="dynamicMemoryMinMB"> Gets the min dynamic memory for the vm. </param>
        /// <param name="isHighlyAvailable"> Gets highly available property. </param>
        /// <param name="generation"> Gets the generation for the vm. </param>
        /// <param name="networkInterfaces"> Gets the network interfaces of the template. </param>
        /// <param name="disks"> Gets the disks of the template. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <returns> A new <see cref="ArcScVmm.ScVmmVirtualMachineTemplateData"/> instance for mocking. </returns>
        public static ScVmmVirtualMachineTemplateData ScVmmVirtualMachineTemplateData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ExtendedLocation extendedLocation = null, string inventoryItemId = null, string uuid = null, ResourceIdentifier vmmServerId = null, OSType? osType = null, string osName = null, string computerName = null, int? memoryMB = null, int? cpuCount = null, LimitCpuForMigration? limitCpuForMigration = null, DynamicMemoryEnabled? dynamicMemoryEnabled = null, IsCustomizable? isCustomizable = null, int? dynamicMemoryMaxMB = null, int? dynamicMemoryMinMB = null, IsHighlyAvailable? isHighlyAvailable = null, int? generation = null, IEnumerable<NetworkInterface> networkInterfaces = null, IEnumerable<VirtualDisk> disks = null, ProvisioningState? provisioningState = null)
        {
            tags ??= new Dictionary<string, string>();
            networkInterfaces ??= new List<NetworkInterface>();
            disks ??= new List<VirtualDisk>();

            return new ScVmmVirtualMachineTemplateData(id, name, resourceType, systemData, tags, location, extendedLocation, inventoryItemId, uuid, vmmServerId, osType, osName, computerName, memoryMB, cpuCount, limitCpuForMigration, dynamicMemoryEnabled, isCustomizable, dynamicMemoryMaxMB, dynamicMemoryMinMB, isHighlyAvailable, generation, networkInterfaces?.ToList(), disks?.ToList(), provisioningState);
        }

        /// <summary> Initializes a new instance of NetworkInterface. </summary>
        /// <param name="name"> Gets or sets the name of the network interface. </param>
        /// <param name="displayName"> Gets the display name of the network interface as shown in the vmmServer. This is the fallback label for a NIC when the name is not set. </param>
        /// <param name="ipv4Addresses"> Gets the nic ipv4 addresses. </param>
        /// <param name="ipv6Addresses"> Gets the nic ipv6 addresses. </param>
        /// <param name="macAddress"> Gets or sets the nic MAC address. </param>
        /// <param name="virtualNetworkId"> Gets or sets the ARM Id of the Microsoft.ScVmm/virtualNetwork resource to connect the nic. </param>
        /// <param name="networkName"> Gets the name of the virtual network in vmmServer that the nic is connected to. </param>
        /// <param name="ipv4AddressType"> Gets or sets the ipv4 address type. </param>
        /// <param name="ipv6AddressType"> Gets or sets the ipv6 address type. </param>
        /// <param name="macAddressType"> Gets or sets the mac address type. </param>
        /// <param name="nicId"> Gets or sets the nic id. </param>
        /// <returns> A new <see cref="Models.NetworkInterface"/> instance for mocking. </returns>
        public static NetworkInterface NetworkInterface(string name = null, string displayName = null, IEnumerable<string> ipv4Addresses = null, IEnumerable<string> ipv6Addresses = null, string macAddress = null, ResourceIdentifier virtualNetworkId = null, string networkName = null, AllocationMethod? ipv4AddressType = null, AllocationMethod? ipv6AddressType = null, AllocationMethod? macAddressType = null, string nicId = null)
        {
            ipv4Addresses ??= new List<string>();
            ipv6Addresses ??= new List<string>();

            return new NetworkInterface(name, displayName, ipv4Addresses?.ToList(), ipv6Addresses?.ToList(), macAddress, virtualNetworkId, networkName, ipv4AddressType, ipv6AddressType, macAddressType, nicId);
        }

        /// <summary> Initializes a new instance of VirtualDisk. </summary>
        /// <param name="name"> Gets or sets the name of the disk. </param>
        /// <param name="displayName"> Gets the display name of the virtual disk as shown in the vmmServer. This is the fallback label for a disk when the name is not set. </param>
        /// <param name="diskId"> Gets or sets the disk id. </param>
        /// <param name="diskSizeGB"> Gets or sets the disk total size. </param>
        /// <param name="maxDiskSizeGB"> Gets the max disk size. </param>
        /// <param name="bus"> Gets or sets the disk bus. </param>
        /// <param name="lun"> Gets or sets the disk lun. </param>
        /// <param name="busType"> Gets or sets the disk bus type. </param>
        /// <param name="vhdType"> Gets or sets the disk vhd type. </param>
        /// <param name="volumeType"> Gets the disk volume type. </param>
        /// <param name="vhdFormatType"> Gets the disk vhd format type. </param>
        /// <param name="templateDiskId"> Gets or sets the disk id in the template. </param>
        /// <param name="storageQoSPolicy"> The QoS policy for the disk. </param>
        /// <param name="createDiffDisk"> Gets or sets a value indicating diff disk. </param>
        /// <returns> A new <see cref="Models.VirtualDisk"/> instance for mocking. </returns>
        public static VirtualDisk VirtualDisk(string name = null, string displayName = null, string diskId = null, int? diskSizeGB = null, int? maxDiskSizeGB = null, int? bus = null, int? lun = null, string busType = null, string vhdType = null, string volumeType = null, string vhdFormatType = null, string templateDiskId = null, StorageQoSPolicyDetails storageQoSPolicy = null, CreateDiffDisk? createDiffDisk = null)
        {
            return new VirtualDisk(name, displayName, diskId, diskSizeGB, maxDiskSizeGB, bus, lun, busType, vhdType, volumeType, vhdFormatType, templateDiskId, storageQoSPolicy, createDiffDisk);
        }

        /// <summary> Initializes a new instance of ScVmmAvailabilitySetData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="tags"> The tags. </param>
        /// <param name="location"> The location. </param>
        /// <param name="extendedLocation"> The extended location. </param>
        /// <param name="availabilitySetName"> Name of the availability set. </param>
        /// <param name="vmmServerId"> ARM Id of the vmmServer resource in which this resource resides. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <returns> A new <see cref="ArcScVmm.ScVmmAvailabilitySetData"/> instance for mocking. </returns>
        public static ScVmmAvailabilitySetData ScVmmAvailabilitySetData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, IDictionary<string, string> tags = null, AzureLocation location = default, ExtendedLocation extendedLocation = null, string availabilitySetName = null, ResourceIdentifier vmmServerId = null, ProvisioningState? provisioningState = null)
        {
            tags ??= new Dictionary<string, string>();

            return new ScVmmAvailabilitySetData(id, name, resourceType, systemData, tags, location, extendedLocation, availabilitySetName, vmmServerId, provisioningState);
        }

        /// <summary> Initializes a new instance of VirtualMachineInstanceData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="extendedLocation"> Gets or sets the extended location. </param>
        /// <param name="availabilitySets"> Availability Sets in vm. </param>
        /// <param name="osProfile"> OS properties. </param>
        /// <param name="hardwareProfile"> Hardware properties. </param>
        /// <param name="networkInterfaces"> Network properties. </param>
        /// <param name="storageDisks"> Storage properties. </param>
        /// <param name="infrastructureProfile"> Gets the infrastructure profile. </param>
        /// <param name="powerState"> Gets the power state of the virtual machine. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <returns> A new <see cref="ArcScVmm.VirtualMachineInstanceData"/> instance for mocking. </returns>
        public static VirtualMachineInstanceData VirtualMachineInstanceData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, ExtendedLocation extendedLocation = null, IEnumerable<AvailabilitySetListItem> availabilitySets = null, OSProfileForVmInstance osProfile = null, HardwareProfile hardwareProfile = null, IEnumerable<NetworkInterface> networkInterfaces = null, IEnumerable<VirtualDisk> storageDisks = null, InfrastructureProfile infrastructureProfile = null, string powerState = null, ProvisioningState? provisioningState = null)
        {
            availabilitySets ??= new List<AvailabilitySetListItem>();
            networkInterfaces ??= new List<NetworkInterface>();
            storageDisks ??= new List<VirtualDisk>();

            return new VirtualMachineInstanceData(id, name, resourceType, systemData, extendedLocation, availabilitySets?.ToList(), osProfile, hardwareProfile, networkInterfaces != null ? new NetworkProfile(networkInterfaces?.ToList()) : null, storageDisks != null ? new StorageProfile(storageDisks?.ToList()) : null, infrastructureProfile, powerState, provisioningState);
        }

        /// <summary> Initializes a new instance of OSProfileForVmInstance. </summary>
        /// <param name="adminPassword"> Admin password of the virtual machine. </param>
        /// <param name="computerName"> Gets or sets computer name. </param>
        /// <param name="osType"> Gets the type of the os. </param>
        /// <param name="osSku"> Gets os sku. </param>
        /// <param name="osVersion"> Gets os version. </param>
        /// <returns> A new <see cref="Models.OSProfileForVmInstance"/> instance for mocking. </returns>
        public static OSProfileForVmInstance OSProfileForVmInstance(string adminPassword = null, string computerName = null, OSType? osType = null, string osSku = null, string osVersion = null)
        {
            return new OSProfileForVmInstance(adminPassword, computerName, osType, osSku, osVersion);
        }

        /// <summary> Initializes a new instance of HardwareProfile. </summary>
        /// <param name="memoryMB"> MemoryMB is the size of a virtual machine's memory, in MB. </param>
        /// <param name="cpuCount"> Gets or sets the number of vCPUs for the vm. </param>
        /// <param name="limitCpuForMigration"> Gets or sets a value indicating whether to enable processor compatibility mode for live migration of VMs. </param>
        /// <param name="dynamicMemoryEnabled"> Gets or sets a value indicating whether to enable dynamic memory or not. </param>
        /// <param name="dynamicMemoryMaxMB"> Gets or sets the max dynamic memory for the vm. </param>
        /// <param name="dynamicMemoryMinMB"> Gets or sets the min dynamic memory for the vm. </param>
        /// <param name="isHighlyAvailable"> Gets highly available property. </param>
        /// <returns> A new <see cref="Models.HardwareProfile"/> instance for mocking. </returns>
        public static HardwareProfile HardwareProfile(int? memoryMB = null, int? cpuCount = null, LimitCpuForMigration? limitCpuForMigration = null, DynamicMemoryEnabled? dynamicMemoryEnabled = null, int? dynamicMemoryMaxMB = null, int? dynamicMemoryMinMB = null, IsHighlyAvailable? isHighlyAvailable = null)
        {
            return new HardwareProfile(memoryMB, cpuCount, limitCpuForMigration, dynamicMemoryEnabled, dynamicMemoryMaxMB, dynamicMemoryMinMB, isHighlyAvailable);
        }

        /// <summary> Initializes a new instance of InfrastructureProfile. </summary>
        /// <param name="inventoryItemId"> Gets or sets the inventory Item ID for the resource. </param>
        /// <param name="vmmServerId"> ARM Id of the vmmServer resource in which this resource resides. </param>
        /// <param name="cloudId"> ARM Id of the cloud resource to use for deploying the vm. </param>
        /// <param name="templateId"> ARM Id of the template resource to use for deploying the vm. </param>
        /// <param name="vmName"> VMName is the name of VM on the SCVMM server. </param>
        /// <param name="uuid"> Unique ID of the virtual machine. </param>
        /// <param name="lastRestoredVmCheckpoint"> Last restored checkpoint in the vm. </param>
        /// <param name="checkpoints"> Checkpoints in the vm. </param>
        /// <param name="checkpointType"> Type of checkpoint supported for the vm. </param>
        /// <param name="generation"> Gets or sets the generation for the vm. </param>
        /// <param name="biosGuid"> Gets or sets the bios guid for the vm. </param>
        /// <returns> A new <see cref="Models.InfrastructureProfile"/> instance for mocking. </returns>
        public static InfrastructureProfile InfrastructureProfile(string inventoryItemId = null, ResourceIdentifier vmmServerId = null, ResourceIdentifier cloudId = null, ResourceIdentifier templateId = null, string vmName = null, string uuid = null, Checkpoint lastRestoredVmCheckpoint = null, IEnumerable<Checkpoint> checkpoints = null, string checkpointType = null, int? generation = null, string biosGuid = null)
        {
            checkpoints ??= new List<Checkpoint>();

            return new InfrastructureProfile(inventoryItemId, vmmServerId, cloudId, templateId, vmName, uuid, lastRestoredVmCheckpoint, checkpoints?.ToList(), checkpointType, generation, biosGuid);
        }

        /// <summary> Initializes a new instance of VmInstanceHybridIdentityMetadataData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="resourceUid"> The unique identifier for the resource. </param>
        /// <param name="publicKey"> Gets or sets the Public Key. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <returns> A new <see cref="ArcScVmm.VmInstanceHybridIdentityMetadataData"/> instance for mocking. </returns>
        public static VmInstanceHybridIdentityMetadataData VmInstanceHybridIdentityMetadataData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string resourceUid = null, string publicKey = null, ProvisioningState? provisioningState = null)
        {
            return new VmInstanceHybridIdentityMetadataData(id, name, resourceType, systemData, resourceUid, publicKey, provisioningState);
        }

        /// <summary> Initializes a new instance of GuestAgentData. </summary>
        /// <param name="id"> The id. </param>
        /// <param name="name"> The name. </param>
        /// <param name="resourceType"> The resourceType. </param>
        /// <param name="systemData"> The systemData. </param>
        /// <param name="uuid"> Gets a unique identifier for this resource. </param>
        /// <param name="credentials"> Username / Password Credentials to provision guest agent. </param>
        /// <param name="httpsProxy"> HTTP Proxy configuration for the VM. </param>
        /// <param name="provisioningAction"> Gets or sets the guest agent provisioning action. </param>
        /// <param name="status"> Gets the guest agent status. </param>
        /// <param name="customResourceName"> Gets the name of the corresponding resource in Kubernetes. </param>
        /// <param name="provisioningState"> Provisioning state of the resource. </param>
        /// <returns> A new <see cref="ArcScVmm.GuestAgentData"/> instance for mocking. </returns>
        public static GuestAgentData GuestAgentData(ResourceIdentifier id = null, string name = null, ResourceType resourceType = default, SystemData systemData = null, string uuid = null, GuestCredential credentials = null, string httpsProxy = null, ProvisioningAction? provisioningAction = null, string status = null, string customResourceName = null, ProvisioningState? provisioningState = null)
        {
            return new GuestAgentData(id, name, resourceType, systemData, uuid, credentials, httpsProxy != null ? new HttpProxyConfiguration(httpsProxy) : null, provisioningAction, status, customResourceName, provisioningState);
        }
    }
}
