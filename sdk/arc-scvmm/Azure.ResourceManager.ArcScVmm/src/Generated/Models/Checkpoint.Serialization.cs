// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace Azure.ResourceManager.ArcScVmm.Models
{
    public partial class Checkpoint : Core.IUtf8JsonSerializable
    {
        void Core.IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Core.Optional.IsDefined(ParentCheckpointId))
            {
                writer.WritePropertyName("parentCheckpointID"u8);
                writer.WriteStringValue(ParentCheckpointId);
            }
            if (Core.Optional.IsDefined(CheckpointId))
            {
                writer.WritePropertyName("checkpointID"u8);
                writer.WriteStringValue(CheckpointId);
            }
            if (Core.Optional.IsDefined(Name))
            {
                writer.WritePropertyName("name"u8);
                writer.WriteStringValue(Name);
            }
            if (Core.Optional.IsDefined(Description))
            {
                writer.WritePropertyName("description"u8);
                writer.WriteStringValue(Description);
            }
            writer.WriteEndObject();
        }

        internal static Checkpoint DeserializeCheckpoint(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Core.Optional<string> parentCheckpointId = default;
            Core.Optional<string> checkpointId = default;
            Core.Optional<string> name = default;
            Core.Optional<string> description = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("parentCheckpointID"u8))
                {
                    parentCheckpointId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("checkpointID"u8))
                {
                    checkpointId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("description"u8))
                {
                    description = property.Value.GetString();
                    continue;
                }
            }
            return new Checkpoint(parentCheckpointId.Value, checkpointId.Value, name.Value, description.Value);
        }
    }
}
