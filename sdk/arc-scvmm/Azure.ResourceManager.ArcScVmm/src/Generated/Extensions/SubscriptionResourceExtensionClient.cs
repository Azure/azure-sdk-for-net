// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.ResourceManager;

namespace Azure.ResourceManager.ArcScVmm
{
    /// <summary> A class to add extension methods to SubscriptionResource. </summary>
    internal partial class SubscriptionResourceExtensionClient : ArmResource
    {
        private ClientDiagnostics _scVmmServerVmmServersClientDiagnostics;
        private VmmServersRestOperations _scVmmServerVmmServersRestClient;
        private ClientDiagnostics _scVmmCloudCloudsClientDiagnostics;
        private CloudsRestOperations _scVmmCloudCloudsRestClient;
        private ClientDiagnostics _scVmmVirtualNetworkVirtualNetworksClientDiagnostics;
        private VirtualNetworksRestOperations _scVmmVirtualNetworkVirtualNetworksRestClient;
        private ClientDiagnostics _scVmmVirtualMachineVirtualMachinesClientDiagnostics;
        private VirtualMachinesRestOperations _scVmmVirtualMachineVirtualMachinesRestClient;
        private ClientDiagnostics _scVmmVirtualMachineTemplateVirtualMachineTemplatesClientDiagnostics;
        private VirtualMachineTemplatesRestOperations _scVmmVirtualMachineTemplateVirtualMachineTemplatesRestClient;
        private ClientDiagnostics _scVmmAvailabilitySetAvailabilitySetsClientDiagnostics;
        private AvailabilitySetsRestOperations _scVmmAvailabilitySetAvailabilitySetsRestClient;

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class for mocking. </summary>
        protected SubscriptionResourceExtensionClient()
        {
        }

        /// <summary> Initializes a new instance of the <see cref="SubscriptionResourceExtensionClient"/> class. </summary>
        /// <param name="client"> The client parameters to use in these operations. </param>
        /// <param name="id"> The identifier of the resource that is the target of operations. </param>
        internal SubscriptionResourceExtensionClient(ArmClient client, ResourceIdentifier id) : base(client, id)
        {
        }

        private ClientDiagnostics ScVmmServerVmmServersClientDiagnostics => _scVmmServerVmmServersClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.ArcScVmm", ScVmmServerResource.ResourceType.Namespace, Diagnostics);
        private VmmServersRestOperations ScVmmServerVmmServersRestClient => _scVmmServerVmmServersRestClient ??= new VmmServersRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(ScVmmServerResource.ResourceType));
        private ClientDiagnostics ScVmmCloudCloudsClientDiagnostics => _scVmmCloudCloudsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.ArcScVmm", ScVmmCloudResource.ResourceType.Namespace, Diagnostics);
        private CloudsRestOperations ScVmmCloudCloudsRestClient => _scVmmCloudCloudsRestClient ??= new CloudsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(ScVmmCloudResource.ResourceType));
        private ClientDiagnostics ScVmmVirtualNetworkVirtualNetworksClientDiagnostics => _scVmmVirtualNetworkVirtualNetworksClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.ArcScVmm", ScVmmVirtualNetworkResource.ResourceType.Namespace, Diagnostics);
        private VirtualNetworksRestOperations ScVmmVirtualNetworkVirtualNetworksRestClient => _scVmmVirtualNetworkVirtualNetworksRestClient ??= new VirtualNetworksRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(ScVmmVirtualNetworkResource.ResourceType));
        private ClientDiagnostics ScVmmVirtualMachineVirtualMachinesClientDiagnostics => _scVmmVirtualMachineVirtualMachinesClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.ArcScVmm", ScVmmVirtualMachineResource.ResourceType.Namespace, Diagnostics);
        private VirtualMachinesRestOperations ScVmmVirtualMachineVirtualMachinesRestClient => _scVmmVirtualMachineVirtualMachinesRestClient ??= new VirtualMachinesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(ScVmmVirtualMachineResource.ResourceType));
        private ClientDiagnostics ScVmmVirtualMachineTemplateVirtualMachineTemplatesClientDiagnostics => _scVmmVirtualMachineTemplateVirtualMachineTemplatesClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.ArcScVmm", ScVmmVirtualMachineTemplateResource.ResourceType.Namespace, Diagnostics);
        private VirtualMachineTemplatesRestOperations ScVmmVirtualMachineTemplateVirtualMachineTemplatesRestClient => _scVmmVirtualMachineTemplateVirtualMachineTemplatesRestClient ??= new VirtualMachineTemplatesRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(ScVmmVirtualMachineTemplateResource.ResourceType));
        private ClientDiagnostics ScVmmAvailabilitySetAvailabilitySetsClientDiagnostics => _scVmmAvailabilitySetAvailabilitySetsClientDiagnostics ??= new ClientDiagnostics("Azure.ResourceManager.ArcScVmm", ScVmmAvailabilitySetResource.ResourceType.Namespace, Diagnostics);
        private AvailabilitySetsRestOperations ScVmmAvailabilitySetAvailabilitySetsRestClient => _scVmmAvailabilitySetAvailabilitySetsRestClient ??= new AvailabilitySetsRestOperations(Pipeline, Diagnostics.ApplicationId, Endpoint, GetApiVersionOrNull(ScVmmAvailabilitySetResource.ResourceType));

        private string GetApiVersionOrNull(ResourceType resourceType)
        {
            TryGetApiVersion(resourceType, out string apiVersion);
            return apiVersion;
        }

        /// <summary>
        /// List of VmmServers in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ScVmm/vmmServers
        /// Operation Id: VmmServers_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ScVmmServerResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ScVmmServerResource> GetScVmmServersAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<ScVmmServerResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ScVmmServerVmmServersClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetScVmmServers");
                scope.Start();
                try
                {
                    var response = await ScVmmServerVmmServersRestClient.ListBySubscriptionAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ScVmmServerResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ScVmmServerResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ScVmmServerVmmServersClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetScVmmServers");
                scope.Start();
                try
                {
                    var response = await ScVmmServerVmmServersRestClient.ListBySubscriptionNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ScVmmServerResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// List of VmmServers in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ScVmm/vmmServers
        /// Operation Id: VmmServers_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ScVmmServerResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ScVmmServerResource> GetScVmmServers(CancellationToken cancellationToken = default)
        {
            Page<ScVmmServerResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ScVmmServerVmmServersClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetScVmmServers");
                scope.Start();
                try
                {
                    var response = ScVmmServerVmmServersRestClient.ListBySubscription(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ScVmmServerResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ScVmmServerResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ScVmmServerVmmServersClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetScVmmServers");
                scope.Start();
                try
                {
                    var response = ScVmmServerVmmServersRestClient.ListBySubscriptionNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ScVmmServerResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// List of Clouds in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ScVmm/clouds
        /// Operation Id: Clouds_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ScVmmCloudResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ScVmmCloudResource> GetScVmmCloudsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<ScVmmCloudResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ScVmmCloudCloudsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetScVmmClouds");
                scope.Start();
                try
                {
                    var response = await ScVmmCloudCloudsRestClient.ListBySubscriptionAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ScVmmCloudResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ScVmmCloudResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ScVmmCloudCloudsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetScVmmClouds");
                scope.Start();
                try
                {
                    var response = await ScVmmCloudCloudsRestClient.ListBySubscriptionNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ScVmmCloudResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// List of Clouds in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ScVmm/clouds
        /// Operation Id: Clouds_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ScVmmCloudResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ScVmmCloudResource> GetScVmmClouds(CancellationToken cancellationToken = default)
        {
            Page<ScVmmCloudResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ScVmmCloudCloudsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetScVmmClouds");
                scope.Start();
                try
                {
                    var response = ScVmmCloudCloudsRestClient.ListBySubscription(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ScVmmCloudResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ScVmmCloudResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ScVmmCloudCloudsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetScVmmClouds");
                scope.Start();
                try
                {
                    var response = ScVmmCloudCloudsRestClient.ListBySubscriptionNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ScVmmCloudResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// List of VirtualNetworks in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ScVmm/virtualNetworks
        /// Operation Id: VirtualNetworks_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ScVmmVirtualNetworkResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ScVmmVirtualNetworkResource> GetScVmmVirtualNetworksAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<ScVmmVirtualNetworkResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ScVmmVirtualNetworkVirtualNetworksClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetScVmmVirtualNetworks");
                scope.Start();
                try
                {
                    var response = await ScVmmVirtualNetworkVirtualNetworksRestClient.ListBySubscriptionAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ScVmmVirtualNetworkResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ScVmmVirtualNetworkResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ScVmmVirtualNetworkVirtualNetworksClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetScVmmVirtualNetworks");
                scope.Start();
                try
                {
                    var response = await ScVmmVirtualNetworkVirtualNetworksRestClient.ListBySubscriptionNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ScVmmVirtualNetworkResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// List of VirtualNetworks in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ScVmm/virtualNetworks
        /// Operation Id: VirtualNetworks_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ScVmmVirtualNetworkResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ScVmmVirtualNetworkResource> GetScVmmVirtualNetworks(CancellationToken cancellationToken = default)
        {
            Page<ScVmmVirtualNetworkResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ScVmmVirtualNetworkVirtualNetworksClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetScVmmVirtualNetworks");
                scope.Start();
                try
                {
                    var response = ScVmmVirtualNetworkVirtualNetworksRestClient.ListBySubscription(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ScVmmVirtualNetworkResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ScVmmVirtualNetworkResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ScVmmVirtualNetworkVirtualNetworksClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetScVmmVirtualNetworks");
                scope.Start();
                try
                {
                    var response = ScVmmVirtualNetworkVirtualNetworksRestClient.ListBySubscriptionNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ScVmmVirtualNetworkResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// List of VirtualMachines in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ScVmm/virtualMachines
        /// Operation Id: VirtualMachines_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ScVmmVirtualMachineResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ScVmmVirtualMachineResource> GetScVmmVirtualMachinesAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<ScVmmVirtualMachineResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ScVmmVirtualMachineVirtualMachinesClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetScVmmVirtualMachines");
                scope.Start();
                try
                {
                    var response = await ScVmmVirtualMachineVirtualMachinesRestClient.ListBySubscriptionAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ScVmmVirtualMachineResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ScVmmVirtualMachineResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ScVmmVirtualMachineVirtualMachinesClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetScVmmVirtualMachines");
                scope.Start();
                try
                {
                    var response = await ScVmmVirtualMachineVirtualMachinesRestClient.ListBySubscriptionNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ScVmmVirtualMachineResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// List of VirtualMachines in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ScVmm/virtualMachines
        /// Operation Id: VirtualMachines_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ScVmmVirtualMachineResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ScVmmVirtualMachineResource> GetScVmmVirtualMachines(CancellationToken cancellationToken = default)
        {
            Page<ScVmmVirtualMachineResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ScVmmVirtualMachineVirtualMachinesClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetScVmmVirtualMachines");
                scope.Start();
                try
                {
                    var response = ScVmmVirtualMachineVirtualMachinesRestClient.ListBySubscription(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ScVmmVirtualMachineResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ScVmmVirtualMachineResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ScVmmVirtualMachineVirtualMachinesClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetScVmmVirtualMachines");
                scope.Start();
                try
                {
                    var response = ScVmmVirtualMachineVirtualMachinesRestClient.ListBySubscriptionNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ScVmmVirtualMachineResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// List of VirtualMachineTemplates in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ScVmm/virtualMachineTemplates
        /// Operation Id: VirtualMachineTemplates_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ScVmmVirtualMachineTemplateResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ScVmmVirtualMachineTemplateResource> GetScVmmVirtualMachineTemplatesAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<ScVmmVirtualMachineTemplateResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ScVmmVirtualMachineTemplateVirtualMachineTemplatesClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetScVmmVirtualMachineTemplates");
                scope.Start();
                try
                {
                    var response = await ScVmmVirtualMachineTemplateVirtualMachineTemplatesRestClient.ListBySubscriptionAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ScVmmVirtualMachineTemplateResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ScVmmVirtualMachineTemplateResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ScVmmVirtualMachineTemplateVirtualMachineTemplatesClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetScVmmVirtualMachineTemplates");
                scope.Start();
                try
                {
                    var response = await ScVmmVirtualMachineTemplateVirtualMachineTemplatesRestClient.ListBySubscriptionNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ScVmmVirtualMachineTemplateResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// List of VirtualMachineTemplates in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ScVmm/virtualMachineTemplates
        /// Operation Id: VirtualMachineTemplates_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ScVmmVirtualMachineTemplateResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ScVmmVirtualMachineTemplateResource> GetScVmmVirtualMachineTemplates(CancellationToken cancellationToken = default)
        {
            Page<ScVmmVirtualMachineTemplateResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ScVmmVirtualMachineTemplateVirtualMachineTemplatesClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetScVmmVirtualMachineTemplates");
                scope.Start();
                try
                {
                    var response = ScVmmVirtualMachineTemplateVirtualMachineTemplatesRestClient.ListBySubscription(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ScVmmVirtualMachineTemplateResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ScVmmVirtualMachineTemplateResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ScVmmVirtualMachineTemplateVirtualMachineTemplatesClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetScVmmVirtualMachineTemplates");
                scope.Start();
                try
                {
                    var response = ScVmmVirtualMachineTemplateVirtualMachineTemplatesRestClient.ListBySubscriptionNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ScVmmVirtualMachineTemplateResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// List of AvailabilitySets in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ScVmm/availabilitySets
        /// Operation Id: AvailabilitySets_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="ScVmmAvailabilitySetResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual AsyncPageable<ScVmmAvailabilitySetResource> GetScVmmAvailabilitySetsAsync(CancellationToken cancellationToken = default)
        {
            async Task<Page<ScVmmAvailabilitySetResource>> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ScVmmAvailabilitySetAvailabilitySetsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetScVmmAvailabilitySets");
                scope.Start();
                try
                {
                    var response = await ScVmmAvailabilitySetAvailabilitySetsRestClient.ListBySubscriptionAsync(Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ScVmmAvailabilitySetResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            async Task<Page<ScVmmAvailabilitySetResource>> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ScVmmAvailabilitySetAvailabilitySetsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetScVmmAvailabilitySets");
                scope.Start();
                try
                {
                    var response = await ScVmmAvailabilitySetAvailabilitySetsRestClient.ListBySubscriptionNextPageAsync(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken).ConfigureAwait(false);
                    return Page.FromValues(response.Value.Value.Select(value => new ScVmmAvailabilitySetResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateAsyncEnumerable(FirstPageFunc, NextPageFunc);
        }

        /// <summary>
        /// List of AvailabilitySets in a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.ScVmm/availabilitySets
        /// Operation Id: AvailabilitySets_ListBySubscription
        /// </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="ScVmmAvailabilitySetResource" /> that may take multiple service requests to iterate over. </returns>
        public virtual Pageable<ScVmmAvailabilitySetResource> GetScVmmAvailabilitySets(CancellationToken cancellationToken = default)
        {
            Page<ScVmmAvailabilitySetResource> FirstPageFunc(int? pageSizeHint)
            {
                using var scope = ScVmmAvailabilitySetAvailabilitySetsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetScVmmAvailabilitySets");
                scope.Start();
                try
                {
                    var response = ScVmmAvailabilitySetAvailabilitySetsRestClient.ListBySubscription(Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ScVmmAvailabilitySetResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            Page<ScVmmAvailabilitySetResource> NextPageFunc(string nextLink, int? pageSizeHint)
            {
                using var scope = ScVmmAvailabilitySetAvailabilitySetsClientDiagnostics.CreateScope("SubscriptionResourceExtensionClient.GetScVmmAvailabilitySets");
                scope.Start();
                try
                {
                    var response = ScVmmAvailabilitySetAvailabilitySetsRestClient.ListBySubscriptionNextPage(nextLink, Id.SubscriptionId, cancellationToken: cancellationToken);
                    return Page.FromValues(response.Value.Value.Select(value => new ScVmmAvailabilitySetResource(Client, value)), response.Value.NextLink, response.GetRawResponse());
                }
                catch (Exception e)
                {
                    scope.Failed(e);
                    throw;
                }
            }
            return PageableHelpers.CreateEnumerable(FirstPageFunc, NextPageFunc);
        }
    }
}
