// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Workloads
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for MonitorsOperations.
    /// </summary>
    public static partial class MonitorsOperationsExtensions
    {
            /// <summary>
            /// Gets a list of SAP monitors in the specified subscription.
            /// </summary>
            /// <remarks>
            /// Gets a list of SAP monitors in the specified subscription. The operations
            /// returns various properties of each SAP monitor.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<Monitor> List(this IMonitorsOperations operations)
            {
                return operations.ListAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of SAP monitors in the specified subscription.
            /// </summary>
            /// <remarks>
            /// Gets a list of SAP monitors in the specified subscription. The operations
            /// returns various properties of each SAP monitor.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Monitor>> ListAsync(this IMonitorsOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of SAP monitors
            /// </summary>
            /// <remarks>
            /// Gets a list of SAP monitors in the specified resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            public static IPage<Monitor> ListByResourceGroup(this IMonitorsOperations operations, string resourceGroupName)
            {
                return operations.ListByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of SAP monitors
            /// </summary>
            /// <remarks>
            /// Gets a list of SAP monitors in the specified resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Monitor>> ListByResourceGroupAsync(this IMonitorsOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets properties of a SAP monitor.
            /// </summary>
            /// <remarks>
            /// Gets properties of a SAP monitor for the specified subscription, resource
            /// group, and resource name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='monitorName'>
            /// Name of the SAP monitor resource.
            /// </param>
            public static Monitor Get(this IMonitorsOperations operations, string resourceGroupName, string monitorName)
            {
                return operations.GetAsync(resourceGroupName, monitorName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets properties of a SAP monitor.
            /// </summary>
            /// <remarks>
            /// Gets properties of a SAP monitor for the specified subscription, resource
            /// group, and resource name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='monitorName'>
            /// Name of the SAP monitor resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Monitor> GetAsync(this IMonitorsOperations operations, string resourceGroupName, string monitorName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, monitorName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a SAP monitor.
            /// </summary>
            /// <remarks>
            /// Creates a SAP monitor for the specified subscription, resource group, and
            /// resource name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='monitorName'>
            /// Name of the SAP monitor resource.
            /// </param>
            /// <param name='monitorParameter'>
            /// Request body representing a SAP monitor
            /// </param>
            public static Monitor Create(this IMonitorsOperations operations, string resourceGroupName, string monitorName, Monitor monitorParameter)
            {
                return operations.CreateAsync(resourceGroupName, monitorName, monitorParameter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a SAP monitor.
            /// </summary>
            /// <remarks>
            /// Creates a SAP monitor for the specified subscription, resource group, and
            /// resource name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='monitorName'>
            /// Name of the SAP monitor resource.
            /// </param>
            /// <param name='monitorParameter'>
            /// Request body representing a SAP monitor
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Monitor> CreateAsync(this IMonitorsOperations operations, string resourceGroupName, string monitorName, Monitor monitorParameter, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, monitorName, monitorParameter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a SAP monitor.
            /// </summary>
            /// <remarks>
            /// Deletes a SAP monitor with the specified subscription, resource group, and
            /// SAP monitor name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='monitorName'>
            /// Name of the SAP monitor resource.
            /// </param>
            public static OperationStatusResult Delete(this IMonitorsOperations operations, string resourceGroupName, string monitorName)
            {
                return operations.DeleteAsync(resourceGroupName, monitorName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a SAP monitor.
            /// </summary>
            /// <remarks>
            /// Deletes a SAP monitor with the specified subscription, resource group, and
            /// SAP monitor name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='monitorName'>
            /// Name of the SAP monitor resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationStatusResult> DeleteAsync(this IMonitorsOperations operations, string resourceGroupName, string monitorName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, monitorName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Patches the Tags field of a SAP monitor.
            /// </summary>
            /// <remarks>
            /// Patches the Tags field of a SAP monitor for the specified subscription,
            /// resource group, and SAP monitor name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='monitorName'>
            /// Name of the SAP monitor resource.
            /// </param>
            /// <param name='body'>
            /// The Update SAP workload monitor request body.
            /// </param>
            public static Monitor Update(this IMonitorsOperations operations, string resourceGroupName, string monitorName, UpdateMonitorRequest body)
            {
                return operations.UpdateAsync(resourceGroupName, monitorName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Patches the Tags field of a SAP monitor.
            /// </summary>
            /// <remarks>
            /// Patches the Tags field of a SAP monitor for the specified subscription,
            /// resource group, and SAP monitor name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='monitorName'>
            /// Name of the SAP monitor resource.
            /// </param>
            /// <param name='body'>
            /// The Update SAP workload monitor request body.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Monitor> UpdateAsync(this IMonitorsOperations operations, string resourceGroupName, string monitorName, UpdateMonitorRequest body, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, monitorName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a SAP monitor.
            /// </summary>
            /// <remarks>
            /// Creates a SAP monitor for the specified subscription, resource group, and
            /// resource name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='monitorName'>
            /// Name of the SAP monitor resource.
            /// </param>
            /// <param name='monitorParameter'>
            /// Request body representing a SAP monitor
            /// </param>
            public static Monitor BeginCreate(this IMonitorsOperations operations, string resourceGroupName, string monitorName, Monitor monitorParameter)
            {
                return operations.BeginCreateAsync(resourceGroupName, monitorName, monitorParameter).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a SAP monitor.
            /// </summary>
            /// <remarks>
            /// Creates a SAP monitor for the specified subscription, resource group, and
            /// resource name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='monitorName'>
            /// Name of the SAP monitor resource.
            /// </param>
            /// <param name='monitorParameter'>
            /// Request body representing a SAP monitor
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Monitor> BeginCreateAsync(this IMonitorsOperations operations, string resourceGroupName, string monitorName, Monitor monitorParameter, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateWithHttpMessagesAsync(resourceGroupName, monitorName, monitorParameter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a SAP monitor.
            /// </summary>
            /// <remarks>
            /// Deletes a SAP monitor with the specified subscription, resource group, and
            /// SAP monitor name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='monitorName'>
            /// Name of the SAP monitor resource.
            /// </param>
            public static OperationStatusResult BeginDelete(this IMonitorsOperations operations, string resourceGroupName, string monitorName)
            {
                return operations.BeginDeleteAsync(resourceGroupName, monitorName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a SAP monitor.
            /// </summary>
            /// <remarks>
            /// Deletes a SAP monitor with the specified subscription, resource group, and
            /// SAP monitor name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='monitorName'>
            /// Name of the SAP monitor resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationStatusResult> BeginDeleteAsync(this IMonitorsOperations operations, string resourceGroupName, string monitorName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, monitorName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of SAP monitors in the specified subscription.
            /// </summary>
            /// <remarks>
            /// Gets a list of SAP monitors in the specified subscription. The operations
            /// returns various properties of each SAP monitor.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Monitor> ListNext(this IMonitorsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of SAP monitors in the specified subscription.
            /// </summary>
            /// <remarks>
            /// Gets a list of SAP monitors in the specified subscription. The operations
            /// returns various properties of each SAP monitor.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Monitor>> ListNextAsync(this IMonitorsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of SAP monitors
            /// </summary>
            /// <remarks>
            /// Gets a list of SAP monitors in the specified resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Monitor> ListByResourceGroupNext(this IMonitorsOperations operations, string nextPageLink)
            {
                return operations.ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of SAP monitors
            /// </summary>
            /// <remarks>
            /// Gets a list of SAP monitors in the specified resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Monitor>> ListByResourceGroupNextAsync(this IMonitorsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
