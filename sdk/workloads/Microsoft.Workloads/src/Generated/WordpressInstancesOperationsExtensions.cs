// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Workloads
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for WordpressInstancesOperations.
    /// </summary>
    public static partial class WordpressInstancesOperationsExtensions
    {
            /// <summary>
            /// Lists WordPress instance resources under a phpWorkload resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='phpWorkloadName'>
            /// Php workload name
            /// </param>
            public static IPage<WordpressInstanceResource> List(this IWordpressInstancesOperations operations, string resourceGroupName, string phpWorkloadName)
            {
                return operations.ListAsync(resourceGroupName, phpWorkloadName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists WordPress instance resources under a phpWorkload resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='phpWorkloadName'>
            /// Php workload name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<WordpressInstanceResource>> ListAsync(this IWordpressInstancesOperations operations, string resourceGroupName, string phpWorkloadName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, phpWorkloadName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the WordPress instance resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='phpWorkloadName'>
            /// Php workload name
            /// </param>
            public static WordpressInstanceResource Get(this IWordpressInstancesOperations operations, string resourceGroupName, string phpWorkloadName)
            {
                return operations.GetAsync(resourceGroupName, phpWorkloadName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the WordPress instance resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='phpWorkloadName'>
            /// Php workload name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WordpressInstanceResource> GetAsync(this IWordpressInstancesOperations operations, string resourceGroupName, string phpWorkloadName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, phpWorkloadName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or updated WordPress instance resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='phpWorkloadName'>
            /// Php workload name
            /// </param>
            /// <param name='wordpressInstanceResource'>
            /// Resource create or update request payload
            /// </param>
            public static WordpressInstanceResource CreateOrUpdate(this IWordpressInstancesOperations operations, string resourceGroupName, string phpWorkloadName, WordpressInstanceResource wordpressInstanceResource)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, phpWorkloadName, wordpressInstanceResource).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or updated WordPress instance resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='phpWorkloadName'>
            /// Php workload name
            /// </param>
            /// <param name='wordpressInstanceResource'>
            /// Resource create or update request payload
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WordpressInstanceResource> CreateOrUpdateAsync(this IWordpressInstancesOperations operations, string resourceGroupName, string phpWorkloadName, WordpressInstanceResource wordpressInstanceResource, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, phpWorkloadName, wordpressInstanceResource, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete WordPress instance resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='phpWorkloadName'>
            /// Php workload name
            /// </param>
            public static void Delete(this IWordpressInstancesOperations operations, string resourceGroupName, string phpWorkloadName)
            {
                operations.DeleteAsync(resourceGroupName, phpWorkloadName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete WordPress instance resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='phpWorkloadName'>
            /// Php workload name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IWordpressInstancesOperations operations, string resourceGroupName, string phpWorkloadName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, phpWorkloadName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Create or updated WordPress instance resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='phpWorkloadName'>
            /// Php workload name
            /// </param>
            /// <param name='wordpressInstanceResource'>
            /// Resource create or update request payload
            /// </param>
            public static WordpressInstanceResource BeginCreateOrUpdate(this IWordpressInstancesOperations operations, string resourceGroupName, string phpWorkloadName, WordpressInstanceResource wordpressInstanceResource)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, phpWorkloadName, wordpressInstanceResource).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or updated WordPress instance resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='phpWorkloadName'>
            /// Php workload name
            /// </param>
            /// <param name='wordpressInstanceResource'>
            /// Resource create or update request payload
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WordpressInstanceResource> BeginCreateOrUpdateAsync(this IWordpressInstancesOperations operations, string resourceGroupName, string phpWorkloadName, WordpressInstanceResource wordpressInstanceResource, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, phpWorkloadName, wordpressInstanceResource, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists WordPress instance resources under a phpWorkload resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<WordpressInstanceResource> ListNext(this IWordpressInstancesOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists WordPress instance resources under a phpWorkload resource.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<WordpressInstanceResource>> ListNextAsync(this IWordpressInstancesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
