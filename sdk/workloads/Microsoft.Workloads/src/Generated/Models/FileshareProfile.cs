// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Workloads.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// File share profile
    /// </summary>
    public partial class FileshareProfile
    {
        /// <summary>
        /// Initializes a new instance of the FileshareProfile class.
        /// </summary>
        public FileshareProfile()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the FileshareProfile class.
        /// </summary>
        /// <param name="shareType">Share type. Possible values include:
        /// 'NfsOnController', 'AzureFiles'</param>
        /// <param name="storageType">File share backing storage type. Possible
        /// values include: 'Standard_LRS', 'Standard_GRS', 'Standard_ZRS',
        /// 'Premium_LRS'</param>
        /// <param name="shareSizeInGB">File share size in GB</param>
        /// <param name="storageResourceId">File share storage resource
        /// id</param>
        /// <param name="shareName">File share name</param>
        public FileshareProfile(string shareType, string storageType, long? shareSizeInGB = default(long?), string storageResourceId = default(string), string shareName = default(string))
        {
            ShareType = shareType;
            StorageType = storageType;
            ShareSizeInGB = shareSizeInGB;
            StorageResourceId = storageResourceId;
            ShareName = shareName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets share type. Possible values include:
        /// 'NfsOnController', 'AzureFiles'
        /// </summary>
        [JsonProperty(PropertyName = "shareType")]
        public string ShareType { get; set; }

        /// <summary>
        /// Gets or sets file share backing storage type. Possible values
        /// include: 'Standard_LRS', 'Standard_GRS', 'Standard_ZRS',
        /// 'Premium_LRS'
        /// </summary>
        [JsonProperty(PropertyName = "storageType")]
        public string StorageType { get; set; }

        /// <summary>
        /// Gets or sets file share size in GB
        /// </summary>
        [JsonProperty(PropertyName = "shareSizeInGB")]
        public long? ShareSizeInGB { get; set; }

        /// <summary>
        /// Gets file share storage resource id
        /// </summary>
        [JsonProperty(PropertyName = "storageResourceId")]
        public string StorageResourceId { get; private set; }

        /// <summary>
        /// Gets file share name
        /// </summary>
        [JsonProperty(PropertyName = "shareName")]
        public string ShareName { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ShareType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ShareType");
            }
            if (StorageType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "StorageType");
            }
            if (ShareSizeInGB < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "ShareSizeInGB", 1);
            }
        }
    }
}
