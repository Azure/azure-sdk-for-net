// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Workloads.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Backup profile
    /// </summary>
    public partial class BackupProfile
    {
        /// <summary>
        /// Initializes a new instance of the BackupProfile class.
        /// </summary>
        public BackupProfile()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the BackupProfile class.
        /// </summary>
        /// <param name="backupEnabled">Whether to enable Azure backup for the
        /// workload. Possible values include: 'Enabled', 'Disabled'</param>
        /// <param name="vaultResourceId">Backup vault resource Id</param>
        public BackupProfile(string backupEnabled, string vaultResourceId = default(string))
        {
            BackupEnabled = backupEnabled;
            VaultResourceId = vaultResourceId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets whether to enable Azure backup for the workload.
        /// Possible values include: 'Enabled', 'Disabled'
        /// </summary>
        [JsonProperty(PropertyName = "backupEnabled")]
        public string BackupEnabled { get; set; }

        /// <summary>
        /// Gets backup vault resource Id
        /// </summary>
        [JsonProperty(PropertyName = "vaultResourceId")]
        public string VaultResourceId { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (BackupEnabled == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "BackupEnabled");
            }
        }
    }
}
