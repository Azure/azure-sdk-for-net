// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Workloads.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Workload database profile
    /// </summary>
    public partial class DatabaseProfile
    {
        /// <summary>
        /// Initializes a new instance of the DatabaseProfile class.
        /// </summary>
        public DatabaseProfile()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DatabaseProfile class.
        /// </summary>
        /// <param name="sku">The name of the server SKU, e.g.
        /// Standard_D32s_v4</param>
        /// <param name="tier">Tier of the server SKU. Possible values include:
        /// 'Burstable', 'GeneralPurpose', 'MemoryOptimized'</param>
        /// <param name="serverName">Database server name</param>
        /// <param name="version">Database version</param>
        /// <param name="haEnabled">Whether to enable HA for the server.
        /// Possible values include: 'Enabled', 'Disabled'</param>
        /// <param name="storageSku">SKU name for database storage</param>
        /// <param name="storageInGB">Database storage size in GB</param>
        /// <param name="storageIops">Storage IOPS for the server</param>
        /// <param name="backupRetentionDays">Backup retention days for the
        /// server</param>
        /// <param name="sslEnforcementEnabled">Whether to enable SSL
        /// enforcement on the database. Possible values include: 'Enabled',
        /// 'Disabled'</param>
        /// <param name="serverResourceId">Azure Database Server resource
        /// Id</param>
        public DatabaseProfile(string sku, DatabaseTier tier, string serverName = default(string), string version = default(string), string haEnabled = default(string), string storageSku = default(string), long? storageInGB = default(long?), long? storageIops = default(long?), int? backupRetentionDays = default(int?), string sslEnforcementEnabled = default(string), string serverResourceId = default(string))
        {
            ServerName = serverName;
            Version = version;
            Sku = sku;
            Tier = tier;
            HaEnabled = haEnabled;
            StorageSku = storageSku;
            StorageInGB = storageInGB;
            StorageIops = storageIops;
            BackupRetentionDays = backupRetentionDays;
            SslEnforcementEnabled = sslEnforcementEnabled;
            ServerResourceId = serverResourceId;
            CustomInit();
        }
        /// <summary>
        /// Static constructor for DatabaseProfile class.
        /// </summary>
        static DatabaseProfile()
        {
            Type = "MySql";
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets database server name
        /// </summary>
        [JsonProperty(PropertyName = "serverName")]
        public string ServerName { get; set; }

        /// <summary>
        /// Gets or sets database version
        /// </summary>
        [JsonProperty(PropertyName = "version")]
        public string Version { get; set; }

        /// <summary>
        /// Gets or sets the name of the server SKU, e.g. Standard_D32s_v4
        /// </summary>
        [JsonProperty(PropertyName = "sku")]
        public string Sku { get; set; }

        /// <summary>
        /// Gets or sets tier of the server SKU. Possible values include:
        /// 'Burstable', 'GeneralPurpose', 'MemoryOptimized'
        /// </summary>
        [JsonProperty(PropertyName = "tier")]
        public DatabaseTier Tier { get; set; }

        /// <summary>
        /// Gets or sets whether to enable HA for the server. Possible values
        /// include: 'Enabled', 'Disabled'
        /// </summary>
        [JsonProperty(PropertyName = "haEnabled")]
        public string HaEnabled { get; set; }

        /// <summary>
        /// Gets or sets SKU name for database storage
        /// </summary>
        [JsonProperty(PropertyName = "storageSku")]
        public string StorageSku { get; set; }

        /// <summary>
        /// Gets or sets database storage size in GB
        /// </summary>
        [JsonProperty(PropertyName = "storageInGB")]
        public long? StorageInGB { get; set; }

        /// <summary>
        /// Gets or sets storage IOPS for the server
        /// </summary>
        [JsonProperty(PropertyName = "storageIops")]
        public long? StorageIops { get; set; }

        /// <summary>
        /// Gets or sets backup retention days for the server
        /// </summary>
        [JsonProperty(PropertyName = "backupRetentionDays")]
        public int? BackupRetentionDays { get; set; }

        /// <summary>
        /// Gets or sets whether to enable SSL enforcement on the database.
        /// Possible values include: 'Enabled', 'Disabled'
        /// </summary>
        [JsonProperty(PropertyName = "sslEnforcementEnabled")]
        public string SslEnforcementEnabled { get; set; }

        /// <summary>
        /// Gets azure Database Server resource Id
        /// </summary>
        [JsonProperty(PropertyName = "serverResourceId")]
        public string ServerResourceId { get; private set; }

        /// <summary>
        /// Database type
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public static string Type { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Sku == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Sku");
            }
            if (StorageInGB < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "StorageInGB", 1);
            }
        }
    }
}
