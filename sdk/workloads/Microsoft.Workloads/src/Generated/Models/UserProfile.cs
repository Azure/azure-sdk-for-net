// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Workloads.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// User profile to configure on a compute resources such as VM, VMSS
    /// </summary>
    public partial class UserProfile
    {
        /// <summary>
        /// Initializes a new instance of the UserProfile class.
        /// </summary>
        public UserProfile()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the UserProfile class.
        /// </summary>
        /// <param name="userName">User name</param>
        /// <param name="sshPublicKey">SSH public key data</param>
        public UserProfile(string userName, string sshPublicKey)
        {
            UserName = userName;
            SshPublicKey = sshPublicKey;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets user name
        /// </summary>
        [JsonProperty(PropertyName = "userName")]
        public string UserName { get; set; }

        /// <summary>
        /// Gets or sets SSH public key data
        /// </summary>
        [JsonProperty(PropertyName = "sshPublicKey")]
        public string SshPublicKey { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (UserName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "UserName");
            }
            if (SshPublicKey == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SshPublicKey");
            }
        }
    }
}
