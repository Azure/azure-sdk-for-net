// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Workloads.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Php workload resource
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class PhpWorkloadResource : TrackedResource
    {
        /// <summary>
        /// Initializes a new instance of the PhpWorkloadResource class.
        /// </summary>
        public PhpWorkloadResource()
        {
            DatabaseProfile = new DatabaseProfile();
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PhpWorkloadResource class.
        /// </summary>
        /// <param name="location">The geo-location where the resource
        /// lives</param>
        /// <param name="appLocation">The infra resources for PHP workload will
        /// be created in this location</param>
        /// <param name="adminUserProfile">Admin user profile used for VM and
        /// VMSS</param>
        /// <param name="webNodesProfile">VMSS web nodes profile</param>
        /// <param name="controllerProfile">Controller VM profile</param>
        /// <param name="databaseProfile">Database profile</param>
        /// <param name="id">Fully qualified resource ID for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}</param>
        /// <param name="name">The name of the resource</param>
        /// <param name="type">The type of the resource. E.g.
        /// "Microsoft.Compute/virtualMachines" or
        /// "Microsoft.Storage/storageAccounts"</param>
        /// <param name="systemData">Azure Resource Manager metadata containing
        /// createdBy and modifiedBy information.</param>
        /// <param name="tags">Resource tags.</param>
        /// <param name="managedResourceGroupConfiguration">Managed resource
        /// group configuration of the workload</param>
        /// <param name="networkProfile">Network profile</param>
        /// <param name="siteProfile">Site profile</param>
        /// <param name="fileshareProfile">File share profile</param>
        /// <param name="phpProfile">PHP profile</param>
        /// <param name="searchProfile">Search profile</param>
        /// <param name="cacheProfile">Cache profile</param>
        /// <param name="backupProfile">Backup profile</param>
        /// <param name="provisioningState">Php workload resource provisioning
        /// state. Possible values include: 'NotSpecified', 'Accepted',
        /// 'Created', 'Succeeded', 'Failed', 'Canceled', 'Provisioning',
        /// 'Deleting'</param>
        /// <param name="sku">Php workloads SKU</param>
        /// <param name="identity">Identity for the resource. Currently not
        /// supported</param>
        public PhpWorkloadResource(string location, string appLocation, UserProfile adminUserProfile, VmssNodesProfile webNodesProfile, NodeProfile controllerProfile, DatabaseProfile databaseProfile, string id = default(string), string name = default(string), string type = default(string), SystemData systemData = default(SystemData), IDictionary<string, string> tags = default(IDictionary<string, string>), ManagedRGConfiguration managedResourceGroupConfiguration = default(ManagedRGConfiguration), NetworkProfile networkProfile = default(NetworkProfile), SiteProfile siteProfile = default(SiteProfile), FileshareProfile fileshareProfile = default(FileshareProfile), PhpProfile phpProfile = default(PhpProfile), SearchProfile searchProfile = default(SearchProfile), CacheProfile cacheProfile = default(CacheProfile), BackupProfile backupProfile = default(BackupProfile), string provisioningState = default(string), Sku sku = default(Sku), PhpWorkloadResourceIdentity identity = default(PhpWorkloadResourceIdentity))
            : base(location, id, name, type, systemData, tags)
        {
            AppLocation = appLocation;
            ManagedResourceGroupConfiguration = managedResourceGroupConfiguration;
            AdminUserProfile = adminUserProfile;
            WebNodesProfile = webNodesProfile;
            ControllerProfile = controllerProfile;
            NetworkProfile = networkProfile;
            DatabaseProfile = databaseProfile;
            SiteProfile = siteProfile;
            FileshareProfile = fileshareProfile;
            PhpProfile = phpProfile;
            SearchProfile = searchProfile;
            CacheProfile = cacheProfile;
            BackupProfile = backupProfile;
            ProvisioningState = provisioningState;
            Sku = sku;
            Identity = identity;
            CustomInit();
        }
        /// <summary>
        /// Static constructor for PhpWorkloadResource class.
        /// </summary>
        static PhpWorkloadResource()
        {
            Kind = "WordPress";
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the infra resources for PHP workload will be created
        /// in this location
        /// </summary>
        [JsonProperty(PropertyName = "properties.appLocation")]
        public string AppLocation { get; set; }

        /// <summary>
        /// Gets or sets managed resource group configuration of the workload
        /// </summary>
        [JsonProperty(PropertyName = "properties.managedResourceGroupConfiguration")]
        public ManagedRGConfiguration ManagedResourceGroupConfiguration { get; set; }

        /// <summary>
        /// Gets or sets admin user profile used for VM and VMSS
        /// </summary>
        [JsonProperty(PropertyName = "properties.adminUserProfile")]
        public UserProfile AdminUserProfile { get; set; }

        /// <summary>
        /// Gets or sets VMSS web nodes profile
        /// </summary>
        [JsonProperty(PropertyName = "properties.webNodesProfile")]
        public VmssNodesProfile WebNodesProfile { get; set; }

        /// <summary>
        /// Gets or sets controller VM profile
        /// </summary>
        [JsonProperty(PropertyName = "properties.controllerProfile")]
        public NodeProfile ControllerProfile { get; set; }

        /// <summary>
        /// Gets or sets network profile
        /// </summary>
        [JsonProperty(PropertyName = "properties.networkProfile")]
        public NetworkProfile NetworkProfile { get; set; }

        /// <summary>
        /// Gets or sets database profile
        /// </summary>
        [JsonProperty(PropertyName = "properties.databaseProfile")]
        public DatabaseProfile DatabaseProfile { get; set; }

        /// <summary>
        /// Gets or sets site profile
        /// </summary>
        [JsonProperty(PropertyName = "properties.siteProfile")]
        public SiteProfile SiteProfile { get; set; }

        /// <summary>
        /// Gets or sets file share profile
        /// </summary>
        [JsonProperty(PropertyName = "properties.fileshareProfile")]
        public FileshareProfile FileshareProfile { get; set; }

        /// <summary>
        /// Gets or sets PHP profile
        /// </summary>
        [JsonProperty(PropertyName = "properties.phpProfile")]
        public PhpProfile PhpProfile { get; set; }

        /// <summary>
        /// Gets or sets search profile
        /// </summary>
        [JsonProperty(PropertyName = "properties.searchProfile")]
        public SearchProfile SearchProfile { get; set; }

        /// <summary>
        /// Gets or sets cache profile
        /// </summary>
        [JsonProperty(PropertyName = "properties.cacheProfile")]
        public CacheProfile CacheProfile { get; set; }

        /// <summary>
        /// Gets or sets backup profile
        /// </summary>
        [JsonProperty(PropertyName = "properties.backupProfile")]
        public BackupProfile BackupProfile { get; set; }

        /// <summary>
        /// Gets php workload resource provisioning state. Possible values
        /// include: 'NotSpecified', 'Accepted', 'Created', 'Succeeded',
        /// 'Failed', 'Canceled', 'Provisioning', 'Deleting'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets php workloads SKU
        /// </summary>
        [JsonProperty(PropertyName = "sku")]
        public Sku Sku { get; set; }

        /// <summary>
        /// Gets or sets identity for the resource. Currently not supported
        /// </summary>
        [JsonProperty(PropertyName = "identity")]
        public PhpWorkloadResourceIdentity Identity { get; set; }

        /// <summary>
        /// Indicates which kind of php workload this resource represent e.g
        /// WordPress
        /// </summary>
        [JsonProperty(PropertyName = "kind")]
        public static string Kind { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (AppLocation == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AppLocation");
            }
            if (AdminUserProfile == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AdminUserProfile");
            }
            if (WebNodesProfile == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "WebNodesProfile");
            }
            if (ControllerProfile == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ControllerProfile");
            }
            if (DatabaseProfile == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DatabaseProfile");
            }
            if (AdminUserProfile != null)
            {
                AdminUserProfile.Validate();
            }
            if (WebNodesProfile != null)
            {
                WebNodesProfile.Validate();
            }
            if (ControllerProfile != null)
            {
                ControllerProfile.Validate();
            }
            if (NetworkProfile != null)
            {
                NetworkProfile.Validate();
            }
            if (DatabaseProfile != null)
            {
                DatabaseProfile.Validate();
            }
            if (FileshareProfile != null)
            {
                FileshareProfile.Validate();
            }
            if (PhpProfile != null)
            {
                PhpProfile.Validate();
            }
            if (SearchProfile != null)
            {
                SearchProfile.Validate();
            }
            if (CacheProfile != null)
            {
                CacheProfile.Validate();
            }
            if (BackupProfile != null)
            {
                BackupProfile.Validate();
            }
            if (Sku != null)
            {
                Sku.Validate();
            }
            if (Identity != null)
            {
                Identity.Validate();
            }
        }
    }
}
