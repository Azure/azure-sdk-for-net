// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Workloads
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for SAPVirtualInstancesOperations.
    /// </summary>
    public static partial class SAPVirtualInstancesOperationsExtensions
    {
            /// <summary>
            /// Creates a Virtual Instance for SAP solutions (VIS) resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='sapVirtualInstanceName'>
            /// The name of the Virtual Instances for SAP solutions resource
            /// </param>
            /// <param name='body'>
            /// Virtual Instance for SAP solutions resource request body.
            /// </param>
            public static SAPVirtualInstance Create(this ISAPVirtualInstancesOperations operations, string resourceGroupName, string sapVirtualInstanceName, SAPVirtualInstance body = default(SAPVirtualInstance))
            {
                return operations.CreateAsync(resourceGroupName, sapVirtualInstanceName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a Virtual Instance for SAP solutions (VIS) resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='sapVirtualInstanceName'>
            /// The name of the Virtual Instances for SAP solutions resource
            /// </param>
            /// <param name='body'>
            /// Virtual Instance for SAP solutions resource request body.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SAPVirtualInstance> CreateAsync(this ISAPVirtualInstancesOperations operations, string resourceGroupName, string sapVirtualInstanceName, SAPVirtualInstance body = default(SAPVirtualInstance), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, sapVirtualInstanceName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a Virtual Instance for SAP solutions resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='sapVirtualInstanceName'>
            /// The name of the Virtual Instances for SAP solutions resource
            /// </param>
            public static SAPVirtualInstance Get(this ISAPVirtualInstancesOperations operations, string resourceGroupName, string sapVirtualInstanceName)
            {
                return operations.GetAsync(resourceGroupName, sapVirtualInstanceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a Virtual Instance for SAP solutions resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='sapVirtualInstanceName'>
            /// The name of the Virtual Instances for SAP solutions resource
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SAPVirtualInstance> GetAsync(this ISAPVirtualInstancesOperations operations, string resourceGroupName, string sapVirtualInstanceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, sapVirtualInstanceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a Virtual Instance for SAP solutions resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='sapVirtualInstanceName'>
            /// The name of the Virtual Instances for SAP solutions resource
            /// </param>
            /// <param name='body'>
            /// Request body to update a Virtual Instance for SAP solutions resource.
            /// </param>
            public static SAPVirtualInstance Update(this ISAPVirtualInstancesOperations operations, string resourceGroupName, string sapVirtualInstanceName, UpdateSAPVirtualInstanceRequest body = default(UpdateSAPVirtualInstanceRequest))
            {
                return operations.UpdateAsync(resourceGroupName, sapVirtualInstanceName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a Virtual Instance for SAP solutions resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='sapVirtualInstanceName'>
            /// The name of the Virtual Instances for SAP solutions resource
            /// </param>
            /// <param name='body'>
            /// Request body to update a Virtual Instance for SAP solutions resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SAPVirtualInstance> UpdateAsync(this ISAPVirtualInstancesOperations operations, string resourceGroupName, string sapVirtualInstanceName, UpdateSAPVirtualInstanceRequest body = default(UpdateSAPVirtualInstanceRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, sapVirtualInstanceName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a Virtual Instance for SAP solutions resource and its child
            /// resources, that is the associated Central Services Instance, Application
            /// Server Instances and Database Instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='sapVirtualInstanceName'>
            /// The name of the Virtual Instances for SAP solutions resource
            /// </param>
            public static OperationStatusResult Delete(this ISAPVirtualInstancesOperations operations, string resourceGroupName, string sapVirtualInstanceName)
            {
                return operations.DeleteAsync(resourceGroupName, sapVirtualInstanceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a Virtual Instance for SAP solutions resource and its child
            /// resources, that is the associated Central Services Instance, Application
            /// Server Instances and Database Instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='sapVirtualInstanceName'>
            /// The name of the Virtual Instances for SAP solutions resource
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationStatusResult> DeleteAsync(this ISAPVirtualInstancesOperations operations, string resourceGroupName, string sapVirtualInstanceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, sapVirtualInstanceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all Virtual Instances for SAP solutions resources in a Resource Group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            public static IPage<SAPVirtualInstance> ListByResourceGroup(this ISAPVirtualInstancesOperations operations, string resourceGroupName)
            {
                return operations.ListByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all Virtual Instances for SAP solutions resources in a Resource Group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SAPVirtualInstance>> ListByResourceGroupAsync(this ISAPVirtualInstancesOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all Virtual Instances for SAP solutions resources in a Subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<SAPVirtualInstance> ListBySubscription(this ISAPVirtualInstancesOperations operations)
            {
                return operations.ListBySubscriptionAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all Virtual Instances for SAP solutions resources in a Subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SAPVirtualInstance>> ListBySubscriptionAsync(this ISAPVirtualInstancesOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Starts the SAP application, that is the Central Services instance and
            /// Application server instances.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='sapVirtualInstanceName'>
            /// The name of the Virtual Instances for SAP solutions resource
            /// </param>
            public static OperationStatusResult Start(this ISAPVirtualInstancesOperations operations, string resourceGroupName, string sapVirtualInstanceName)
            {
                return operations.StartAsync(resourceGroupName, sapVirtualInstanceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Starts the SAP application, that is the Central Services instance and
            /// Application server instances.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='sapVirtualInstanceName'>
            /// The name of the Virtual Instances for SAP solutions resource
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationStatusResult> StartAsync(this ISAPVirtualInstancesOperations operations, string resourceGroupName, string sapVirtualInstanceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StartWithHttpMessagesAsync(resourceGroupName, sapVirtualInstanceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Stops the SAP Application, that is the Application server instances and
            /// Central Services instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='sapVirtualInstanceName'>
            /// The name of the Virtual Instances for SAP solutions resource
            /// </param>
            /// <param name='hardStop'>
            /// A boolean to specify if the SAP system should be hard-stopped.
            /// </param>
            public static OperationStatusResult Stop(this ISAPVirtualInstancesOperations operations, string resourceGroupName, string sapVirtualInstanceName, bool? hardStop = false)
            {
                return operations.StopAsync(resourceGroupName, sapVirtualInstanceName, hardStop).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Stops the SAP Application, that is the Application server instances and
            /// Central Services instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='sapVirtualInstanceName'>
            /// The name of the Virtual Instances for SAP solutions resource
            /// </param>
            /// <param name='hardStop'>
            /// A boolean to specify if the SAP system should be hard-stopped.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationStatusResult> StopAsync(this ISAPVirtualInstancesOperations operations, string resourceGroupName, string sapVirtualInstanceName, bool? hardStop = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StopWithHttpMessagesAsync(resourceGroupName, sapVirtualInstanceName, hardStop, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a Virtual Instance for SAP solutions (VIS) resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='sapVirtualInstanceName'>
            /// The name of the Virtual Instances for SAP solutions resource
            /// </param>
            /// <param name='body'>
            /// Virtual Instance for SAP solutions resource request body.
            /// </param>
            public static SAPVirtualInstance BeginCreate(this ISAPVirtualInstancesOperations operations, string resourceGroupName, string sapVirtualInstanceName, SAPVirtualInstance body = default(SAPVirtualInstance))
            {
                return operations.BeginCreateAsync(resourceGroupName, sapVirtualInstanceName, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a Virtual Instance for SAP solutions (VIS) resource
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='sapVirtualInstanceName'>
            /// The name of the Virtual Instances for SAP solutions resource
            /// </param>
            /// <param name='body'>
            /// Virtual Instance for SAP solutions resource request body.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SAPVirtualInstance> BeginCreateAsync(this ISAPVirtualInstancesOperations operations, string resourceGroupName, string sapVirtualInstanceName, SAPVirtualInstance body = default(SAPVirtualInstance), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateWithHttpMessagesAsync(resourceGroupName, sapVirtualInstanceName, body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a Virtual Instance for SAP solutions resource and its child
            /// resources, that is the associated Central Services Instance, Application
            /// Server Instances and Database Instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='sapVirtualInstanceName'>
            /// The name of the Virtual Instances for SAP solutions resource
            /// </param>
            public static OperationStatusResult BeginDelete(this ISAPVirtualInstancesOperations operations, string resourceGroupName, string sapVirtualInstanceName)
            {
                return operations.BeginDeleteAsync(resourceGroupName, sapVirtualInstanceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a Virtual Instance for SAP solutions resource and its child
            /// resources, that is the associated Central Services Instance, Application
            /// Server Instances and Database Instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='sapVirtualInstanceName'>
            /// The name of the Virtual Instances for SAP solutions resource
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationStatusResult> BeginDeleteAsync(this ISAPVirtualInstancesOperations operations, string resourceGroupName, string sapVirtualInstanceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, sapVirtualInstanceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Starts the SAP application, that is the Central Services instance and
            /// Application server instances.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='sapVirtualInstanceName'>
            /// The name of the Virtual Instances for SAP solutions resource
            /// </param>
            public static OperationStatusResult BeginStart(this ISAPVirtualInstancesOperations operations, string resourceGroupName, string sapVirtualInstanceName)
            {
                return operations.BeginStartAsync(resourceGroupName, sapVirtualInstanceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Starts the SAP application, that is the Central Services instance and
            /// Application server instances.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='sapVirtualInstanceName'>
            /// The name of the Virtual Instances for SAP solutions resource
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationStatusResult> BeginStartAsync(this ISAPVirtualInstancesOperations operations, string resourceGroupName, string sapVirtualInstanceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginStartWithHttpMessagesAsync(resourceGroupName, sapVirtualInstanceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Stops the SAP Application, that is the Application server instances and
            /// Central Services instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='sapVirtualInstanceName'>
            /// The name of the Virtual Instances for SAP solutions resource
            /// </param>
            /// <param name='hardStop'>
            /// A boolean to specify if the SAP system should be hard-stopped.
            /// </param>
            public static OperationStatusResult BeginStop(this ISAPVirtualInstancesOperations operations, string resourceGroupName, string sapVirtualInstanceName, bool? hardStop = false)
            {
                return operations.BeginStopAsync(resourceGroupName, sapVirtualInstanceName, hardStop).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Stops the SAP Application, that is the Application server instances and
            /// Central Services instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='sapVirtualInstanceName'>
            /// The name of the Virtual Instances for SAP solutions resource
            /// </param>
            /// <param name='hardStop'>
            /// A boolean to specify if the SAP system should be hard-stopped.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationStatusResult> BeginStopAsync(this ISAPVirtualInstancesOperations operations, string resourceGroupName, string sapVirtualInstanceName, bool? hardStop = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginStopWithHttpMessagesAsync(resourceGroupName, sapVirtualInstanceName, hardStop, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all Virtual Instances for SAP solutions resources in a Resource Group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<SAPVirtualInstance> ListByResourceGroupNext(this ISAPVirtualInstancesOperations operations, string nextPageLink)
            {
                return operations.ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all Virtual Instances for SAP solutions resources in a Resource Group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SAPVirtualInstance>> ListByResourceGroupNextAsync(this ISAPVirtualInstancesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all Virtual Instances for SAP solutions resources in a Subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<SAPVirtualInstance> ListBySubscriptionNext(this ISAPVirtualInstancesOperations operations, string nextPageLink)
            {
                return operations.ListBySubscriptionNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all Virtual Instances for SAP solutions resources in a Subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SAPVirtualInstance>> ListBySubscriptionNextAsync(this ISAPVirtualInstancesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
