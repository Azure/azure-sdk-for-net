// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.ResourceManager;
using Azure.ResourceManager.Compute.Workloads.Models;
using Azure.ResourceManager.Resources;

namespace Azure.ResourceManager.Compute.Workloads
{
    /// <summary> A class to add extension methods to Azure.ResourceManager.Compute.Workloads. </summary>
    public static partial class WorkloadsExtensions
    {
        private static SubscriptionResourceExtensionClient GetExtensionClient(SubscriptionResource subscriptionResource)
        {
            return subscriptionResource.GetCachedClient((client) =>
            {
                return new SubscriptionResourceExtensionClient(client, subscriptionResource.Id);
            }
            );
        }

        /// <summary>
        /// Lists PHP workload resources for a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Workloads/phpWorkloads
        /// Operation Id: PhpWorkloads_ListBySubscription
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="PhpWorkloadResource" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<PhpWorkloadResource> GetPhpWorkloadResourcesAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetPhpWorkloadResourcesAsync(cancellationToken);
        }

        /// <summary>
        /// Lists PHP workload resources for a subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Workloads/phpWorkloads
        /// Operation Id: PhpWorkloads_ListBySubscription
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="PhpWorkloadResource" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<PhpWorkloadResource> GetPhpWorkloadResources(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetPhpWorkloadResources(cancellationToken);
        }

        /// <summary>
        /// Get SAP sizing recommendations.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Workloads/locations/{location}/sapVirtualInstanceMetadata/default/getSizingRecommendations
        /// Operation Id: SAPSizingRecommendations
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="location"> The name of Azure region. </param>
        /// <param name="content"> SAP Sizing Recommendation Request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> is null. </exception>
        public static async Task<Response<SAPSizingRecommendationResult>> SAPSizingRecommendationsAsync(this SubscriptionResource subscriptionResource, string location, SAPSizingRecommendationContent content = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(location, nameof(location));

            return await GetExtensionClient(subscriptionResource).SAPSizingRecommendationsAsync(location, content, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get SAP sizing recommendations.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Workloads/locations/{location}/sapVirtualInstanceMetadata/default/getSizingRecommendations
        /// Operation Id: SAPSizingRecommendations
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="location"> The name of Azure region. </param>
        /// <param name="content"> SAP Sizing Recommendation Request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> is null. </exception>
        public static Response<SAPSizingRecommendationResult> SAPSizingRecommendations(this SubscriptionResource subscriptionResource, string location, SAPSizingRecommendationContent content = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(location, nameof(location));

            return GetExtensionClient(subscriptionResource).SAPSizingRecommendations(location, content, cancellationToken);
        }

        /// <summary>
        /// Get SAP supported SKUs.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Workloads/locations/{location}/sapVirtualInstanceMetadata/default/getSapSupportedSku
        /// Operation Id: SAPSupportedSku
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="location"> The name of Azure region. </param>
        /// <param name="content"> SAP Supported SKU Request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> is null. </exception>
        public static async Task<Response<SAPSupportedResourceSkusResult>> SAPSupportedSkuAsync(this SubscriptionResource subscriptionResource, string location, SAPSupportedSkusContent content = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(location, nameof(location));

            return await GetExtensionClient(subscriptionResource).SAPSupportedSkuAsync(location, content, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get SAP supported SKUs.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Workloads/locations/{location}/sapVirtualInstanceMetadata/default/getSapSupportedSku
        /// Operation Id: SAPSupportedSku
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="location"> The name of Azure region. </param>
        /// <param name="content"> SAP Supported SKU Request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> is null. </exception>
        public static Response<SAPSupportedResourceSkusResult> SAPSupportedSku(this SubscriptionResource subscriptionResource, string location, SAPSupportedSkusContent content = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(location, nameof(location));

            return GetExtensionClient(subscriptionResource).SAPSupportedSku(location, content, cancellationToken);
        }

        /// <summary>
        /// Get SAP Disk Configurations.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Workloads/locations/{location}/sapVirtualInstanceMetadata/default/getDiskConfigurations
        /// Operation Id: SAPDiskConfigurations
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="location"> The name of Azure region. </param>
        /// <param name="content"> SAP Disk Configurations Request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> is null. </exception>
        public static async Task<Response<SAPDiskConfigurationsResult>> SAPDiskConfigurationsAsync(this SubscriptionResource subscriptionResource, string location, SAPDiskConfigurationsContent content = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(location, nameof(location));

            return await GetExtensionClient(subscriptionResource).SAPDiskConfigurationsAsync(location, content, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get SAP Disk Configurations.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Workloads/locations/{location}/sapVirtualInstanceMetadata/default/getDiskConfigurations
        /// Operation Id: SAPDiskConfigurations
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="location"> The name of Azure region. </param>
        /// <param name="content"> SAP Disk Configurations Request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> is null. </exception>
        public static Response<SAPDiskConfigurationsResult> SAPDiskConfigurations(this SubscriptionResource subscriptionResource, string location, SAPDiskConfigurationsContent content = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(location, nameof(location));

            return GetExtensionClient(subscriptionResource).SAPDiskConfigurations(location, content, cancellationToken);
        }

        /// <summary>
        /// Get SAP Availability Zone Details.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Workloads/locations/{location}/sapVirtualInstanceMetadata/default/getAvailabilityZoneDetails
        /// Operation Id: SAPAvailabilityZoneDetails
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="location"> The name of Azure region. </param>
        /// <param name="content"> SAP Availability Zone Details Request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> is null. </exception>
        public static async Task<Response<SAPAvailabilityZoneDetailsResult>> SAPAvailabilityZoneDetailsAsync(this SubscriptionResource subscriptionResource, string location, SAPAvailabilityZoneDetailsContent content = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(location, nameof(location));

            return await GetExtensionClient(subscriptionResource).SAPAvailabilityZoneDetailsAsync(location, content, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get SAP Availability Zone Details.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Workloads/locations/{location}/sapVirtualInstanceMetadata/default/getAvailabilityZoneDetails
        /// Operation Id: SAPAvailabilityZoneDetails
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="location"> The name of Azure region. </param>
        /// <param name="content"> SAP Availability Zone Details Request body. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="location"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="location"/> is null. </exception>
        public static Response<SAPAvailabilityZoneDetailsResult> SAPAvailabilityZoneDetails(this SubscriptionResource subscriptionResource, string location, SAPAvailabilityZoneDetailsContent content = null, CancellationToken cancellationToken = default)
        {
            Argument.AssertNotNullOrEmpty(location, nameof(location));

            return GetExtensionClient(subscriptionResource).SAPAvailabilityZoneDetails(location, content, cancellationToken);
        }

        /// <summary>
        /// Gets all Virtual Instances for SAP in the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Workloads/sapVirtualInstances
        /// Operation Id: SAPVirtualInstances_ListBySubscription
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SAPVirtualInstanceResource" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<SAPVirtualInstanceResource> GetSAPVirtualInstancesAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetSAPVirtualInstancesAsync(cancellationToken);
        }

        /// <summary>
        /// Gets all Virtual Instances for SAP in the subscription.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Workloads/sapVirtualInstances
        /// Operation Id: SAPVirtualInstances_ListBySubscription
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SAPVirtualInstanceResource" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<SAPVirtualInstanceResource> GetSAPVirtualInstances(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetSAPVirtualInstances(cancellationToken);
        }

        /// <summary>
        /// Gets a list of SAP monitors in the specified subscription. The operations returns various properties of each SAP monitor.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Workloads/monitors
        /// Operation Id: monitors_List
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="MonitorResource" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<MonitorResource> GetMonitorsAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetMonitorsAsync(cancellationToken);
        }

        /// <summary>
        /// Gets a list of SAP monitors in the specified subscription. The operations returns various properties of each SAP monitor.
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Workloads/monitors
        /// Operation Id: monitors_List
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="MonitorResource" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<MonitorResource> GetMonitors(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetMonitors(cancellationToken);
        }

        /// <summary>
        /// Lists all the available SKUs under this PR
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Workloads/skus
        /// Operation Id: Skus_List
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> An async collection of <see cref="SkuDefinition" /> that may take multiple service requests to iterate over. </returns>
        public static AsyncPageable<SkuDefinition> GetSkusAsync(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetSkusAsync(cancellationToken);
        }

        /// <summary>
        /// Lists all the available SKUs under this PR
        /// Request Path: /subscriptions/{subscriptionId}/providers/Microsoft.Workloads/skus
        /// Operation Id: Skus_List
        /// </summary>
        /// <param name="subscriptionResource"> The <see cref="SubscriptionResource" /> instance the method will execute against. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <returns> A collection of <see cref="SkuDefinition" /> that may take multiple service requests to iterate over. </returns>
        public static Pageable<SkuDefinition> GetSkus(this SubscriptionResource subscriptionResource, CancellationToken cancellationToken = default)
        {
            return GetExtensionClient(subscriptionResource).GetSkus(cancellationToken);
        }

        private static ResourceGroupResourceExtensionClient GetExtensionClient(ResourceGroupResource resourceGroupResource)
        {
            return resourceGroupResource.GetCachedClient((client) =>
            {
                return new ResourceGroupResourceExtensionClient(client, resourceGroupResource.Id);
            }
            );
        }

        /// <summary> Gets a collection of PhpWorkloadResources in the ResourceGroupResource. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of PhpWorkloadResources and their operations over a PhpWorkloadResource. </returns>
        public static PhpWorkloadResourceCollection GetPhpWorkloadResources(this ResourceGroupResource resourceGroupResource)
        {
            return GetExtensionClient(resourceGroupResource).GetPhpWorkloadResources();
        }

        /// <summary>
        /// Gets the PHP workload resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/phpWorkloads/{phpWorkloadName}
        /// Operation Id: PhpWorkloads_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="phpWorkloadName"> Php workload name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="phpWorkloadName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="phpWorkloadName"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<PhpWorkloadResource>> GetPhpWorkloadResourceAsync(this ResourceGroupResource resourceGroupResource, string phpWorkloadName, CancellationToken cancellationToken = default)
        {
            return await resourceGroupResource.GetPhpWorkloadResources().GetAsync(phpWorkloadName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets the PHP workload resource.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/phpWorkloads/{phpWorkloadName}
        /// Operation Id: PhpWorkloads_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="phpWorkloadName"> Php workload name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="phpWorkloadName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="phpWorkloadName"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<PhpWorkloadResource> GetPhpWorkloadResource(this ResourceGroupResource resourceGroupResource, string phpWorkloadName, CancellationToken cancellationToken = default)
        {
            return resourceGroupResource.GetPhpWorkloadResources().Get(phpWorkloadName, cancellationToken);
        }

        /// <summary> Gets a collection of SAPVirtualInstanceResources in the ResourceGroupResource. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of SAPVirtualInstanceResources and their operations over a SAPVirtualInstanceResource. </returns>
        public static SAPVirtualInstanceCollection GetSAPVirtualInstances(this ResourceGroupResource resourceGroupResource)
        {
            return GetExtensionClient(resourceGroupResource).GetSAPVirtualInstances();
        }

        /// <summary>
        /// Gets an Virtual Instance for SAP.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/sapVirtualInstances/{sapVirtualInstanceName}
        /// Operation Id: SAPVirtualInstances_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="sapVirtualInstanceName"> The name of the Virtual Instances for SAP. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="sapVirtualInstanceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="sapVirtualInstanceName"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<SAPVirtualInstanceResource>> GetSAPVirtualInstanceAsync(this ResourceGroupResource resourceGroupResource, string sapVirtualInstanceName, CancellationToken cancellationToken = default)
        {
            return await resourceGroupResource.GetSAPVirtualInstances().GetAsync(sapVirtualInstanceName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets an Virtual Instance for SAP.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/sapVirtualInstances/{sapVirtualInstanceName}
        /// Operation Id: SAPVirtualInstances_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="sapVirtualInstanceName"> The name of the Virtual Instances for SAP. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="sapVirtualInstanceName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="sapVirtualInstanceName"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<SAPVirtualInstanceResource> GetSAPVirtualInstance(this ResourceGroupResource resourceGroupResource, string sapVirtualInstanceName, CancellationToken cancellationToken = default)
        {
            return resourceGroupResource.GetSAPVirtualInstances().Get(sapVirtualInstanceName, cancellationToken);
        }

        /// <summary> Gets a collection of MonitorResources in the ResourceGroupResource. </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <returns> An object representing collection of MonitorResources and their operations over a MonitorResource. </returns>
        public static MonitorCollection GetMonitors(this ResourceGroupResource resourceGroupResource)
        {
            return GetExtensionClient(resourceGroupResource).GetMonitors();
        }

        /// <summary>
        /// Gets properties of a SAP monitor for the specified subscription, resource group, and resource name.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/monitors/{monitorName}
        /// Operation Id: monitors_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="monitorName"> Name of the SAP monitor resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="monitorName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="monitorName"/> is null. </exception>
        [ForwardsClientCalls]
        public static async Task<Response<MonitorResource>> GetMonitorAsync(this ResourceGroupResource resourceGroupResource, string monitorName, CancellationToken cancellationToken = default)
        {
            return await resourceGroupResource.GetMonitors().GetAsync(monitorName, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Gets properties of a SAP monitor for the specified subscription, resource group, and resource name.
        /// Request Path: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/monitors/{monitorName}
        /// Operation Id: monitors_Get
        /// </summary>
        /// <param name="resourceGroupResource"> The <see cref="ResourceGroupResource" /> instance the method will execute against. </param>
        /// <param name="monitorName"> Name of the SAP monitor resource. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentException"> <paramref name="monitorName"/> is an empty string, and was expected to be non-empty. </exception>
        /// <exception cref="ArgumentNullException"> <paramref name="monitorName"/> is null. </exception>
        [ForwardsClientCalls]
        public static Response<MonitorResource> GetMonitor(this ResourceGroupResource resourceGroupResource, string monitorName, CancellationToken cancellationToken = default)
        {
            return resourceGroupResource.GetMonitors().Get(monitorName, cancellationToken);
        }

        #region PhpWorkloadResource
        /// <summary>
        /// Gets an object representing a <see cref="PhpWorkloadResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="PhpWorkloadResource.CreateResourceIdentifier" /> to create a <see cref="PhpWorkloadResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="PhpWorkloadResource" /> object. </returns>
        public static PhpWorkloadResource GetPhpWorkloadResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                PhpWorkloadResource.ValidateResourceId(id);
                return new PhpWorkloadResource(client, id);
            }
            );
        }
        #endregion

        #region WordpressInstanceResource
        /// <summary>
        /// Gets an object representing a <see cref="WordpressInstanceResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="WordpressInstanceResource.CreateResourceIdentifier" /> to create a <see cref="WordpressInstanceResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="WordpressInstanceResource" /> object. </returns>
        public static WordpressInstanceResource GetWordpressInstanceResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                WordpressInstanceResource.ValidateResourceId(id);
                return new WordpressInstanceResource(client, id);
            }
            );
        }
        #endregion

        #region SAPVirtualInstanceResource
        /// <summary>
        /// Gets an object representing a <see cref="SAPVirtualInstanceResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SAPVirtualInstanceResource.CreateResourceIdentifier" /> to create a <see cref="SAPVirtualInstanceResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SAPVirtualInstanceResource" /> object. </returns>
        public static SAPVirtualInstanceResource GetSAPVirtualInstanceResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SAPVirtualInstanceResource.ValidateResourceId(id);
                return new SAPVirtualInstanceResource(client, id);
            }
            );
        }
        #endregion

        #region SAPCentralServerInstanceResource
        /// <summary>
        /// Gets an object representing a <see cref="SAPCentralServerInstanceResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SAPCentralServerInstanceResource.CreateResourceIdentifier" /> to create a <see cref="SAPCentralServerInstanceResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SAPCentralServerInstanceResource" /> object. </returns>
        public static SAPCentralServerInstanceResource GetSAPCentralServerInstanceResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SAPCentralServerInstanceResource.ValidateResourceId(id);
                return new SAPCentralServerInstanceResource(client, id);
            }
            );
        }
        #endregion

        #region SAPDatabaseInstanceResource
        /// <summary>
        /// Gets an object representing a <see cref="SAPDatabaseInstanceResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SAPDatabaseInstanceResource.CreateResourceIdentifier" /> to create a <see cref="SAPDatabaseInstanceResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SAPDatabaseInstanceResource" /> object. </returns>
        public static SAPDatabaseInstanceResource GetSAPDatabaseInstanceResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SAPDatabaseInstanceResource.ValidateResourceId(id);
                return new SAPDatabaseInstanceResource(client, id);
            }
            );
        }
        #endregion

        #region SAPApplicationServerInstanceResource
        /// <summary>
        /// Gets an object representing a <see cref="SAPApplicationServerInstanceResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="SAPApplicationServerInstanceResource.CreateResourceIdentifier" /> to create a <see cref="SAPApplicationServerInstanceResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="SAPApplicationServerInstanceResource" /> object. </returns>
        public static SAPApplicationServerInstanceResource GetSAPApplicationServerInstanceResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                SAPApplicationServerInstanceResource.ValidateResourceId(id);
                return new SAPApplicationServerInstanceResource(client, id);
            }
            );
        }
        #endregion

        #region MonitorResource
        /// <summary>
        /// Gets an object representing a <see cref="MonitorResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="MonitorResource.CreateResourceIdentifier" /> to create a <see cref="MonitorResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="MonitorResource" /> object. </returns>
        public static MonitorResource GetMonitorResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                MonitorResource.ValidateResourceId(id);
                return new MonitorResource(client, id);
            }
            );
        }
        #endregion

        #region ProviderInstanceResource
        /// <summary>
        /// Gets an object representing a <see cref="ProviderInstanceResource" /> along with the instance operations that can be performed on it but with no data.
        /// You can use <see cref="ProviderInstanceResource.CreateResourceIdentifier" /> to create a <see cref="ProviderInstanceResource" /> <see cref="ResourceIdentifier" /> from its components.
        /// </summary>
        /// <param name="client"> The <see cref="ArmClient" /> instance the method will execute against. </param>
        /// <param name="id"> The resource ID of the resource to get. </param>
        /// <returns> Returns a <see cref="ProviderInstanceResource" /> object. </returns>
        public static ProviderInstanceResource GetProviderInstanceResource(this ArmClient client, ResourceIdentifier id)
        {
            return client.GetResourceClient(() =>
            {
                ProviderInstanceResource.ValidateResourceId(id);
                return new ProviderInstanceResource(client, id);
            }
            );
        }
        #endregion
    }
}
