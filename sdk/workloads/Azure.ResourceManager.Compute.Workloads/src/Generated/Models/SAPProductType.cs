// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Compute.Workloads.Models
{
    /// <summary> Defines the SAP Product type. </summary>
    public readonly partial struct SAPProductType : IEquatable<SAPProductType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SAPProductType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SAPProductType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string ECCValue = "ECC";
        private const string S4HanaValue = "S4HANA";
        private const string OtherValue = "Other";

        /// <summary> ECC. </summary>
        public static SAPProductType ECC { get; } = new SAPProductType(ECCValue);
        /// <summary> S4HANA. </summary>
        public static SAPProductType S4Hana { get; } = new SAPProductType(S4HanaValue);
        /// <summary> Other. </summary>
        public static SAPProductType Other { get; } = new SAPProductType(OtherValue);
        /// <summary> Determines if two <see cref="SAPProductType"/> values are the same. </summary>
        public static bool operator ==(SAPProductType left, SAPProductType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SAPProductType"/> values are not the same. </summary>
        public static bool operator !=(SAPProductType left, SAPProductType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SAPProductType"/>. </summary>
        public static implicit operator SAPProductType(string value) => new SAPProductType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SAPProductType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SAPProductType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
