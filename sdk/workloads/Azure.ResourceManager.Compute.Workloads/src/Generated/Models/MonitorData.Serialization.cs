// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure;
using Azure.Core;
using Azure.ResourceManager.Compute.Workloads.Models;
using Azure.ResourceManager.Models;

namespace Azure.ResourceManager.Compute.Workloads
{
    public partial class MonitorData : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("tags");
            writer.WriteStartObject();
            foreach (var item in Tags)
            {
                writer.WritePropertyName(item.Key);
                writer.WriteStringValue(item.Value);
            }
            writer.WriteEndObject();
            writer.WritePropertyName("location");
            writer.WriteStringValue(Location);
            writer.WritePropertyName("properties");
            writer.WriteStartObject();
            if (Optional.IsDefined(AppLocation))
            {
                writer.WritePropertyName("appLocation");
                writer.WriteStringValue(AppLocation);
            }
            if (Optional.IsDefined(RoutingPreference))
            {
                writer.WritePropertyName("routingPreference");
                writer.WriteStringValue(RoutingPreference.Value.ToString());
            }
            if (Optional.IsDefined(ManagedResourceGroupConfiguration))
            {
                writer.WritePropertyName("managedResourceGroupConfiguration");
                writer.WriteObjectValue(ManagedResourceGroupConfiguration);
            }
            if (Optional.IsDefined(LogAnalyticsWorkspaceArmId))
            {
                writer.WritePropertyName("logAnalyticsWorkspaceArmId");
                writer.WriteStringValue(LogAnalyticsWorkspaceArmId);
            }
            if (Optional.IsDefined(MonitorSubnet))
            {
                writer.WritePropertyName("monitorSubnet");
                writer.WriteStringValue(MonitorSubnet);
            }
            writer.WriteEndObject();
            writer.WriteEndObject();
        }

        internal static MonitorData DeserializeMonitorData(JsonElement element)
        {
            IDictionary<string, string> tags = default;
            AzureLocation location = default;
            ResourceIdentifier id = default;
            string name = default;
            ResourceType type = default;
            SystemData systemData = default;
            Optional<WorkloadMonitorProvisioningState> provisioningState = default;
            Optional<ResponseError> errors = default;
            Optional<string> appLocation = default;
            Optional<RoutingPreference> routingPreference = default;
            Optional<ManagedRGConfiguration> managedResourceGroupConfiguration = default;
            Optional<string> logAnalyticsWorkspaceArmId = default;
            Optional<string> monitorSubnet = default;
            Optional<string> msiArmId = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("tags"))
                {
                    Dictionary<string, string> dictionary = new Dictionary<string, string>();
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        dictionary.Add(property0.Name, property0.Value.GetString());
                    }
                    tags = dictionary;
                    continue;
                }
                if (property.NameEquals("location"))
                {
                    location = new AzureLocation(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("id"))
                {
                    id = new ResourceIdentifier(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"))
                {
                    type = new ResourceType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("systemData"))
                {
                    systemData = JsonSerializer.Deserialize<SystemData>(property.Value.ToString());
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("provisioningState"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            provisioningState = new WorkloadMonitorProvisioningState(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("errors"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            errors = JsonSerializer.Deserialize<ResponseError>(property0.Value.ToString());
                            continue;
                        }
                        if (property0.NameEquals("appLocation"))
                        {
                            appLocation = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("routingPreference"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            routingPreference = new RoutingPreference(property0.Value.GetString());
                            continue;
                        }
                        if (property0.NameEquals("managedResourceGroupConfiguration"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                property0.ThrowNonNullablePropertyIsNull();
                                continue;
                            }
                            managedResourceGroupConfiguration = ManagedRGConfiguration.DeserializeManagedRGConfiguration(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("logAnalyticsWorkspaceArmId"))
                        {
                            logAnalyticsWorkspaceArmId = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("monitorSubnet"))
                        {
                            monitorSubnet = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("msiArmId"))
                        {
                            msiArmId = property0.Value.GetString();
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new MonitorData(id, name, type, systemData, tags, location, Optional.ToNullable(provisioningState), errors.Value, appLocation.Value, Optional.ToNullable(routingPreference), managedResourceGroupConfiguration.Value, logAnalyticsWorkspaceArmId.Value, monitorSubnet.Value, msiArmId.Value);
        }
    }
}
