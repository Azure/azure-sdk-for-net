// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Compute.Workloads.Models
{
    /// <summary> The high availability Type. AvailabilitySet guarantees 99.95% availability. Availability Zone guarantees 99.99% availability. </summary>
    public readonly partial struct SAPHighAvailabilityType : IEquatable<SAPHighAvailabilityType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SAPHighAvailabilityType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SAPHighAvailabilityType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AvailabilitySetValue = "AvailabilitySet";
        private const string AvailabilityZoneValue = "AvailabilityZone";

        /// <summary> AvailabilitySet. </summary>
        public static SAPHighAvailabilityType AvailabilitySet { get; } = new SAPHighAvailabilityType(AvailabilitySetValue);
        /// <summary> AvailabilityZone. </summary>
        public static SAPHighAvailabilityType AvailabilityZone { get; } = new SAPHighAvailabilityType(AvailabilityZoneValue);
        /// <summary> Determines if two <see cref="SAPHighAvailabilityType"/> values are the same. </summary>
        public static bool operator ==(SAPHighAvailabilityType left, SAPHighAvailabilityType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SAPHighAvailabilityType"/> values are not the same. </summary>
        public static bool operator !=(SAPHighAvailabilityType left, SAPHighAvailabilityType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SAPHighAvailabilityType"/>. </summary>
        public static implicit operator SAPHighAvailabilityType(string value) => new SAPHighAvailabilityType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SAPHighAvailabilityType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SAPHighAvailabilityType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
