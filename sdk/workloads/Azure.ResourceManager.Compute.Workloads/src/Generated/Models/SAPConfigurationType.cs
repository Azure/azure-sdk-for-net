// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Compute.Workloads.Models
{
    /// <summary> The configuration Type. </summary>
    internal readonly partial struct SAPConfigurationType : IEquatable<SAPConfigurationType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SAPConfigurationType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SAPConfigurationType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string DeploymentValue = "Deployment";
        private const string DiscoveryValue = "Discovery";
        private const string DeploymentWithOSConfigValue = "DeploymentWithOSConfig";

        /// <summary> Deployment. </summary>
        public static SAPConfigurationType Deployment { get; } = new SAPConfigurationType(DeploymentValue);
        /// <summary> Discovery. </summary>
        public static SAPConfigurationType Discovery { get; } = new SAPConfigurationType(DiscoveryValue);
        /// <summary> DeploymentWithOSConfig. </summary>
        public static SAPConfigurationType DeploymentWithOSConfig { get; } = new SAPConfigurationType(DeploymentWithOSConfigValue);
        /// <summary> Determines if two <see cref="SAPConfigurationType"/> values are the same. </summary>
        public static bool operator ==(SAPConfigurationType left, SAPConfigurationType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SAPConfigurationType"/> values are not the same. </summary>
        public static bool operator !=(SAPConfigurationType left, SAPConfigurationType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SAPConfigurationType"/>. </summary>
        public static implicit operator SAPConfigurationType(string value) => new SAPConfigurationType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SAPConfigurationType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SAPConfigurationType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
