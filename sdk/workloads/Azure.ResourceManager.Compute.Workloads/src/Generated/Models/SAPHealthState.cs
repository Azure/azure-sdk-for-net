// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.ResourceManager.Compute.Workloads.Models
{
    /// <summary> Defines the SAP Instance health. </summary>
    public readonly partial struct SAPHealthState : IEquatable<SAPHealthState>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="SAPHealthState"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public SAPHealthState(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string UnknownValue = "Unknown";
        private const string HealthyValue = "Healthy";
        private const string UnhealthyValue = "Unhealthy";
        private const string DegradedValue = "Degraded";

        /// <summary> Unknown. </summary>
        public static SAPHealthState Unknown { get; } = new SAPHealthState(UnknownValue);
        /// <summary> Healthy. </summary>
        public static SAPHealthState Healthy { get; } = new SAPHealthState(HealthyValue);
        /// <summary> Unhealthy. </summary>
        public static SAPHealthState Unhealthy { get; } = new SAPHealthState(UnhealthyValue);
        /// <summary> Degraded. </summary>
        public static SAPHealthState Degraded { get; } = new SAPHealthState(DegradedValue);
        /// <summary> Determines if two <see cref="SAPHealthState"/> values are the same. </summary>
        public static bool operator ==(SAPHealthState left, SAPHealthState right) => left.Equals(right);
        /// <summary> Determines if two <see cref="SAPHealthState"/> values are not the same. </summary>
        public static bool operator !=(SAPHealthState left, SAPHealthState right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="SAPHealthState"/>. </summary>
        public static implicit operator SAPHealthState(string value) => new SAPHealthState(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is SAPHealthState other && Equals(other);
        /// <inheritdoc />
        public bool Equals(SAPHealthState other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
