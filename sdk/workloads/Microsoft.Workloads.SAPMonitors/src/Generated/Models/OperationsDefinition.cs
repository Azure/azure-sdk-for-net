// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Workloads.SAPMonitors.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Properties of an Operation.
    /// </summary>
    public partial class OperationsDefinition
    {
        /// <summary>
        /// Initializes a new instance of the OperationsDefinition class.
        /// </summary>
        public OperationsDefinition()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the OperationsDefinition class.
        /// </summary>
        /// <param name="name">Name of the operation.</param>
        /// <param name="display">Display information of the operation.</param>
        /// <param name="isDataAction">Indicates whether the operation applies
        /// to data-plane.</param>
        /// <param name="origin">Defines the workload operation origin.
        /// Possible values include: 'NotSpecified', 'User', 'System'</param>
        /// <param name="actionType">Defines the action type of workload
        /// operation. Possible values include: 'NotSpecified',
        /// 'Internal'</param>
        /// <param name="properties">Defines the workload operation
        /// properties.</param>
        public OperationsDefinition(string name, OperationsDefinitionDisplay display, bool? isDataAction = default(bool?), string origin = default(string), string actionType = default(string), object properties = default(object))
        {
            Name = name;
            IsDataAction = isDataAction;
            Origin = origin;
            Display = display;
            ActionType = actionType;
            Properties = properties;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets name of the operation.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets indicates whether the operation applies to data-plane.
        /// </summary>
        [JsonProperty(PropertyName = "isDataAction")]
        public bool? IsDataAction { get; set; }

        /// <summary>
        /// Gets or sets defines the workload operation origin. Possible values
        /// include: 'NotSpecified', 'User', 'System'
        /// </summary>
        [JsonProperty(PropertyName = "origin")]
        public string Origin { get; set; }

        /// <summary>
        /// Gets or sets display information of the operation.
        /// </summary>
        [JsonProperty(PropertyName = "display")]
        public OperationsDefinitionDisplay Display { get; set; }

        /// <summary>
        /// Gets or sets defines the action type of workload operation.
        /// Possible values include: 'NotSpecified', 'Internal'
        /// </summary>
        [JsonProperty(PropertyName = "actionType")]
        public string ActionType { get; set; }

        /// <summary>
        /// Gets or sets defines the workload operation properties.
        /// </summary>
        [JsonProperty(PropertyName = "properties.properties")]
        public object Properties { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Display == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Display");
            }
            if (Display != null)
            {
                Display.Validate();
            }
        }
    }
}
