// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Workloads.SAPMonitors
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ProviderInstancesOperations.
    /// </summary>
    public static partial class ProviderInstancesOperationsExtensions
    {
            /// <summary>
            /// Gets a list of provider instances in the specified SAP monitor.
            /// </summary>
            /// <remarks>
            /// Gets a list of provider instances in the specified SAP monitor. The
            /// operations returns various properties of each provider instances.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='monitorName'>
            /// Name of the SAP monitor resource.
            /// </param>
            public static IPage<ProviderInstance> List(this IProviderInstancesOperations operations, string resourceGroupName, string monitorName)
            {
                return operations.ListAsync(resourceGroupName, monitorName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of provider instances in the specified SAP monitor.
            /// </summary>
            /// <remarks>
            /// Gets a list of provider instances in the specified SAP monitor. The
            /// operations returns various properties of each provider instances.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='monitorName'>
            /// Name of the SAP monitor resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ProviderInstance>> ListAsync(this IProviderInstancesOperations operations, string resourceGroupName, string monitorName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, monitorName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets properties of a provider instance.
            /// </summary>
            /// <remarks>
            /// Gets properties of a provider instance for the specified subscription,
            /// resource group, SAP monitor name, and resource name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='monitorName'>
            /// Name of the SAP monitor resource.
            /// </param>
            /// <param name='providerInstanceName'>
            /// Name of the provider instance.
            /// </param>
            public static ProviderInstance Get(this IProviderInstancesOperations operations, string resourceGroupName, string monitorName, string providerInstanceName)
            {
                return operations.GetAsync(resourceGroupName, monitorName, providerInstanceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets properties of a provider instance.
            /// </summary>
            /// <remarks>
            /// Gets properties of a provider instance for the specified subscription,
            /// resource group, SAP monitor name, and resource name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='monitorName'>
            /// Name of the SAP monitor resource.
            /// </param>
            /// <param name='providerInstanceName'>
            /// Name of the provider instance.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProviderInstance> GetAsync(this IProviderInstancesOperations operations, string resourceGroupName, string monitorName, string providerInstanceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, monitorName, providerInstanceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a provider instance.
            /// </summary>
            /// <remarks>
            /// Creates a provider instance for the specified subscription, resource group,
            /// SAP monitor name, and resource name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='monitorName'>
            /// Name of the SAP monitor resource.
            /// </param>
            /// <param name='providerInstanceName'>
            /// Name of the provider instance.
            /// </param>
            /// <param name='providerSettings'>
            /// Defines the provider specific properties.
            /// </param>
            public static ProviderInstance Create(this IProviderInstancesOperations operations, string resourceGroupName, string monitorName, string providerInstanceName, ProviderSpecificProperties providerSettings = default(ProviderSpecificProperties))
            {
                return operations.CreateAsync(resourceGroupName, monitorName, providerInstanceName, providerSettings).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a provider instance.
            /// </summary>
            /// <remarks>
            /// Creates a provider instance for the specified subscription, resource group,
            /// SAP monitor name, and resource name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='monitorName'>
            /// Name of the SAP monitor resource.
            /// </param>
            /// <param name='providerInstanceName'>
            /// Name of the provider instance.
            /// </param>
            /// <param name='providerSettings'>
            /// Defines the provider specific properties.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProviderInstance> CreateAsync(this IProviderInstancesOperations operations, string resourceGroupName, string monitorName, string providerInstanceName, ProviderSpecificProperties providerSettings = default(ProviderSpecificProperties), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, monitorName, providerInstanceName, providerSettings, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a provider instance.
            /// </summary>
            /// <remarks>
            /// Deletes a provider instance for the specified subscription, resource group,
            /// SAP monitor name, and resource name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='monitorName'>
            /// Name of the SAP monitor resource.
            /// </param>
            /// <param name='providerInstanceName'>
            /// Name of the provider instance.
            /// </param>
            public static ProviderInstancesDeleteHeaders Delete(this IProviderInstancesOperations operations, string resourceGroupName, string monitorName, string providerInstanceName)
            {
                return operations.DeleteAsync(resourceGroupName, monitorName, providerInstanceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a provider instance.
            /// </summary>
            /// <remarks>
            /// Deletes a provider instance for the specified subscription, resource group,
            /// SAP monitor name, and resource name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='monitorName'>
            /// Name of the SAP monitor resource.
            /// </param>
            /// <param name='providerInstanceName'>
            /// Name of the provider instance.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProviderInstancesDeleteHeaders> DeleteAsync(this IProviderInstancesOperations operations, string resourceGroupName, string monitorName, string providerInstanceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, monitorName, providerInstanceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Creates a provider instance.
            /// </summary>
            /// <remarks>
            /// Creates a provider instance for the specified subscription, resource group,
            /// SAP monitor name, and resource name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='monitorName'>
            /// Name of the SAP monitor resource.
            /// </param>
            /// <param name='providerInstanceName'>
            /// Name of the provider instance.
            /// </param>
            /// <param name='providerSettings'>
            /// Defines the provider specific properties.
            /// </param>
            public static ProviderInstance BeginCreate(this IProviderInstancesOperations operations, string resourceGroupName, string monitorName, string providerInstanceName, ProviderSpecificProperties providerSettings = default(ProviderSpecificProperties))
            {
                return operations.BeginCreateAsync(resourceGroupName, monitorName, providerInstanceName, providerSettings).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a provider instance.
            /// </summary>
            /// <remarks>
            /// Creates a provider instance for the specified subscription, resource group,
            /// SAP monitor name, and resource name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='monitorName'>
            /// Name of the SAP monitor resource.
            /// </param>
            /// <param name='providerInstanceName'>
            /// Name of the provider instance.
            /// </param>
            /// <param name='providerSettings'>
            /// Defines the provider specific properties.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProviderInstance> BeginCreateAsync(this IProviderInstancesOperations operations, string resourceGroupName, string monitorName, string providerInstanceName, ProviderSpecificProperties providerSettings = default(ProviderSpecificProperties), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateWithHttpMessagesAsync(resourceGroupName, monitorName, providerInstanceName, providerSettings, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a provider instance.
            /// </summary>
            /// <remarks>
            /// Deletes a provider instance for the specified subscription, resource group,
            /// SAP monitor name, and resource name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='monitorName'>
            /// Name of the SAP monitor resource.
            /// </param>
            /// <param name='providerInstanceName'>
            /// Name of the provider instance.
            /// </param>
            public static ProviderInstancesDeleteHeaders BeginDelete(this IProviderInstancesOperations operations, string resourceGroupName, string monitorName, string providerInstanceName)
            {
                return operations.BeginDeleteAsync(resourceGroupName, monitorName, providerInstanceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a provider instance.
            /// </summary>
            /// <remarks>
            /// Deletes a provider instance for the specified subscription, resource group,
            /// SAP monitor name, and resource name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='monitorName'>
            /// Name of the SAP monitor resource.
            /// </param>
            /// <param name='providerInstanceName'>
            /// Name of the provider instance.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProviderInstancesDeleteHeaders> BeginDeleteAsync(this IProviderInstancesOperations operations, string resourceGroupName, string monitorName, string providerInstanceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, monitorName, providerInstanceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Gets a list of provider instances in the specified SAP monitor.
            /// </summary>
            /// <remarks>
            /// Gets a list of provider instances in the specified SAP monitor. The
            /// operations returns various properties of each provider instances.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ProviderInstance> ListNext(this IProviderInstancesOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of provider instances in the specified SAP monitor.
            /// </summary>
            /// <remarks>
            /// Gets a list of provider instances in the specified SAP monitor. The
            /// operations returns various properties of each provider instances.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ProviderInstance>> ListNextAsync(this IProviderInstancesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
