// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.Workloads.Models;

namespace Azure.ResourceManager.Workloads
{
    public partial class Sample_SapProviderInstanceCollection
    {
        // List all SAP monitors providers in a subscription
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_ListAllSAPMonitorsProvidersInASubscription()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/preview/2021-12-01-preview/examples/workloadmonitor/ProviderInstances_List.json
            // this example is just showing the usage of "ProviderInstances_List" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this SapMonitorResource created on azure
            // for more information of creating SapMonitorResource, please refer to the document of SapMonitorResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string monitorName = "mySapMonitor";
            ResourceIdentifier sapMonitorResourceId = SapMonitorResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, monitorName);
            SapMonitorResource sapMonitor = client.GetSapMonitorResource(sapMonitorResourceId);

            // get the collection of this SapProviderInstanceResource
            SapProviderInstanceCollection collection = sapMonitor.GetSapProviderInstances();

            // invoke the operation and iterate over the result
            await foreach (SapProviderInstanceResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                SapProviderInstanceData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // Get properties of a Db2 provider
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetPropertiesOfADb2Provider()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/preview/2021-12-01-preview/examples/workloadmonitor/Db2ProviderInstances_Get.json
            // this example is just showing the usage of "ProviderInstances_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this SapMonitorResource created on azure
            // for more information of creating SapMonitorResource, please refer to the document of SapMonitorResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string monitorName = "mySapMonitor";
            ResourceIdentifier sapMonitorResourceId = SapMonitorResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, monitorName);
            SapMonitorResource sapMonitor = client.GetSapMonitorResource(sapMonitorResourceId);

            // get the collection of this SapProviderInstanceResource
            SapProviderInstanceCollection collection = sapMonitor.GetSapProviderInstances();

            // invoke the operation
            string providerInstanceName = "myProviderInstance";
            SapProviderInstanceResource result = await collection.GetAsync(providerInstanceName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapProviderInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Get properties of a Db2 provider
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_GetPropertiesOfADb2Provider()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/preview/2021-12-01-preview/examples/workloadmonitor/Db2ProviderInstances_Get.json
            // this example is just showing the usage of "ProviderInstances_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this SapMonitorResource created on azure
            // for more information of creating SapMonitorResource, please refer to the document of SapMonitorResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string monitorName = "mySapMonitor";
            ResourceIdentifier sapMonitorResourceId = SapMonitorResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, monitorName);
            SapMonitorResource sapMonitor = client.GetSapMonitorResource(sapMonitorResourceId);

            // get the collection of this SapProviderInstanceResource
            SapProviderInstanceCollection collection = sapMonitor.GetSapProviderInstances();

            // invoke the operation
            string providerInstanceName = "myProviderInstance";
            bool result = await collection.ExistsAsync(providerInstanceName);

            Console.WriteLine($"Succeeded: {result}");
        }

        // Get properties of a MsSqlServer provider
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetPropertiesOfAMsSqlServerProvider()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/preview/2021-12-01-preview/examples/workloadmonitor/MsSqlServerProviderInstance_Get.json
            // this example is just showing the usage of "ProviderInstances_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this SapMonitorResource created on azure
            // for more information of creating SapMonitorResource, please refer to the document of SapMonitorResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string monitorName = "mySapMonitor";
            ResourceIdentifier sapMonitorResourceId = SapMonitorResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, monitorName);
            SapMonitorResource sapMonitor = client.GetSapMonitorResource(sapMonitorResourceId);

            // get the collection of this SapProviderInstanceResource
            SapProviderInstanceCollection collection = sapMonitor.GetSapProviderInstances();

            // invoke the operation
            string providerInstanceName = "myProviderInstance";
            SapProviderInstanceResource result = await collection.GetAsync(providerInstanceName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapProviderInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Get properties of a MsSqlServer provider
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_GetPropertiesOfAMsSqlServerProvider()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/preview/2021-12-01-preview/examples/workloadmonitor/MsSqlServerProviderInstance_Get.json
            // this example is just showing the usage of "ProviderInstances_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this SapMonitorResource created on azure
            // for more information of creating SapMonitorResource, please refer to the document of SapMonitorResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string monitorName = "mySapMonitor";
            ResourceIdentifier sapMonitorResourceId = SapMonitorResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, monitorName);
            SapMonitorResource sapMonitor = client.GetSapMonitorResource(sapMonitorResourceId);

            // get the collection of this SapProviderInstanceResource
            SapProviderInstanceCollection collection = sapMonitor.GetSapProviderInstances();

            // invoke the operation
            string providerInstanceName = "myProviderInstance";
            bool result = await collection.ExistsAsync(providerInstanceName);

            Console.WriteLine($"Succeeded: {result}");
        }

        // Get properties of a OS provider
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetPropertiesOfAOSProvider()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/preview/2021-12-01-preview/examples/workloadmonitor/PrometheusOSProviderInstances_Get.json
            // this example is just showing the usage of "ProviderInstances_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this SapMonitorResource created on azure
            // for more information of creating SapMonitorResource, please refer to the document of SapMonitorResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string monitorName = "mySapMonitor";
            ResourceIdentifier sapMonitorResourceId = SapMonitorResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, monitorName);
            SapMonitorResource sapMonitor = client.GetSapMonitorResource(sapMonitorResourceId);

            // get the collection of this SapProviderInstanceResource
            SapProviderInstanceCollection collection = sapMonitor.GetSapProviderInstances();

            // invoke the operation
            string providerInstanceName = "myProviderInstance";
            SapProviderInstanceResource result = await collection.GetAsync(providerInstanceName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapProviderInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Get properties of a OS provider
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_GetPropertiesOfAOSProvider()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/preview/2021-12-01-preview/examples/workloadmonitor/PrometheusOSProviderInstances_Get.json
            // this example is just showing the usage of "ProviderInstances_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this SapMonitorResource created on azure
            // for more information of creating SapMonitorResource, please refer to the document of SapMonitorResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string monitorName = "mySapMonitor";
            ResourceIdentifier sapMonitorResourceId = SapMonitorResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, monitorName);
            SapMonitorResource sapMonitor = client.GetSapMonitorResource(sapMonitorResourceId);

            // get the collection of this SapProviderInstanceResource
            SapProviderInstanceCollection collection = sapMonitor.GetSapProviderInstances();

            // invoke the operation
            string providerInstanceName = "myProviderInstance";
            bool result = await collection.ExistsAsync(providerInstanceName);

            Console.WriteLine($"Succeeded: {result}");
        }

        // Get properties of a PrometheusHaCluster provider
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetPropertiesOfAPrometheusHaClusterProvider()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/preview/2021-12-01-preview/examples/workloadmonitor/PrometheusHaClusterProviderInstances_Get.json
            // this example is just showing the usage of "ProviderInstances_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this SapMonitorResource created on azure
            // for more information of creating SapMonitorResource, please refer to the document of SapMonitorResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string monitorName = "mySapMonitor";
            ResourceIdentifier sapMonitorResourceId = SapMonitorResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, monitorName);
            SapMonitorResource sapMonitor = client.GetSapMonitorResource(sapMonitorResourceId);

            // get the collection of this SapProviderInstanceResource
            SapProviderInstanceCollection collection = sapMonitor.GetSapProviderInstances();

            // invoke the operation
            string providerInstanceName = "myProviderInstance";
            SapProviderInstanceResource result = await collection.GetAsync(providerInstanceName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapProviderInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Get properties of a PrometheusHaCluster provider
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_GetPropertiesOfAPrometheusHaClusterProvider()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/preview/2021-12-01-preview/examples/workloadmonitor/PrometheusHaClusterProviderInstances_Get.json
            // this example is just showing the usage of "ProviderInstances_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this SapMonitorResource created on azure
            // for more information of creating SapMonitorResource, please refer to the document of SapMonitorResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string monitorName = "mySapMonitor";
            ResourceIdentifier sapMonitorResourceId = SapMonitorResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, monitorName);
            SapMonitorResource sapMonitor = client.GetSapMonitorResource(sapMonitorResourceId);

            // get the collection of this SapProviderInstanceResource
            SapProviderInstanceCollection collection = sapMonitor.GetSapProviderInstances();

            // invoke the operation
            string providerInstanceName = "myProviderInstance";
            bool result = await collection.ExistsAsync(providerInstanceName);

            Console.WriteLine($"Succeeded: {result}");
        }

        // Get properties of a SAP monitor Hana provider
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetPropertiesOfASAPMonitorHanaProvider()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/preview/2021-12-01-preview/examples/workloadmonitor/ProviderInstances_Get.json
            // this example is just showing the usage of "ProviderInstances_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this SapMonitorResource created on azure
            // for more information of creating SapMonitorResource, please refer to the document of SapMonitorResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string monitorName = "mySapMonitor";
            ResourceIdentifier sapMonitorResourceId = SapMonitorResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, monitorName);
            SapMonitorResource sapMonitor = client.GetSapMonitorResource(sapMonitorResourceId);

            // get the collection of this SapProviderInstanceResource
            SapProviderInstanceCollection collection = sapMonitor.GetSapProviderInstances();

            // invoke the operation
            string providerInstanceName = "myProviderInstance";
            SapProviderInstanceResource result = await collection.GetAsync(providerInstanceName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapProviderInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Get properties of a SAP monitor Hana provider
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_GetPropertiesOfASAPMonitorHanaProvider()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/preview/2021-12-01-preview/examples/workloadmonitor/ProviderInstances_Get.json
            // this example is just showing the usage of "ProviderInstances_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this SapMonitorResource created on azure
            // for more information of creating SapMonitorResource, please refer to the document of SapMonitorResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string monitorName = "mySapMonitor";
            ResourceIdentifier sapMonitorResourceId = SapMonitorResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, monitorName);
            SapMonitorResource sapMonitor = client.GetSapMonitorResource(sapMonitorResourceId);

            // get the collection of this SapProviderInstanceResource
            SapProviderInstanceCollection collection = sapMonitor.GetSapProviderInstances();

            // invoke the operation
            string providerInstanceName = "myProviderInstance";
            bool result = await collection.ExistsAsync(providerInstanceName);

            Console.WriteLine($"Succeeded: {result}");
        }

        // Get properties of a SAP monitor NetWeaver provider
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetPropertiesOfASAPMonitorNetWeaverProvider()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/preview/2021-12-01-preview/examples/workloadmonitor/NetWeaverProviderInstances_Get.json
            // this example is just showing the usage of "ProviderInstances_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this SapMonitorResource created on azure
            // for more information of creating SapMonitorResource, please refer to the document of SapMonitorResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string monitorName = "mySapMonitor";
            ResourceIdentifier sapMonitorResourceId = SapMonitorResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, monitorName);
            SapMonitorResource sapMonitor = client.GetSapMonitorResource(sapMonitorResourceId);

            // get the collection of this SapProviderInstanceResource
            SapProviderInstanceCollection collection = sapMonitor.GetSapProviderInstances();

            // invoke the operation
            string providerInstanceName = "myProviderInstance";
            SapProviderInstanceResource result = await collection.GetAsync(providerInstanceName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapProviderInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Get properties of a SAP monitor NetWeaver provider
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_GetPropertiesOfASAPMonitorNetWeaverProvider()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/preview/2021-12-01-preview/examples/workloadmonitor/NetWeaverProviderInstances_Get.json
            // this example is just showing the usage of "ProviderInstances_Get" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this SapMonitorResource created on azure
            // for more information of creating SapMonitorResource, please refer to the document of SapMonitorResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string monitorName = "mySapMonitor";
            ResourceIdentifier sapMonitorResourceId = SapMonitorResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, monitorName);
            SapMonitorResource sapMonitor = client.GetSapMonitorResource(sapMonitorResourceId);

            // get the collection of this SapProviderInstanceResource
            SapProviderInstanceCollection collection = sapMonitor.GetSapProviderInstances();

            // invoke the operation
            string providerInstanceName = "myProviderInstance";
            bool result = await collection.ExistsAsync(providerInstanceName);

            Console.WriteLine($"Succeeded: {result}");
        }

        // Create a Db2 provider
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreateADb2Provider()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/preview/2021-12-01-preview/examples/workloadmonitor/Db2ProviderInstances_Create.json
            // this example is just showing the usage of "ProviderInstances_Create" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this SapMonitorResource created on azure
            // for more information of creating SapMonitorResource, please refer to the document of SapMonitorResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string monitorName = "mySapMonitor";
            ResourceIdentifier sapMonitorResourceId = SapMonitorResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, monitorName);
            SapMonitorResource sapMonitor = client.GetSapMonitorResource(sapMonitorResourceId);

            // get the collection of this SapProviderInstanceResource
            SapProviderInstanceCollection collection = sapMonitor.GetSapProviderInstances();

            // invoke the operation
            string providerInstanceName = "myProviderInstance";
            SapProviderInstanceData data = new SapProviderInstanceData()
            {
                ProviderSettings = new ProviderSpecificProperties()
                {
                    ProviderType = "Db2",
                },
            };
            ArmOperation<SapProviderInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, providerInstanceName, data);
            SapProviderInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapProviderInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Create a MsSqlServer provider
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreateAMsSqlServerProvider()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/preview/2021-12-01-preview/examples/workloadmonitor/MsSqlServerProviderInstance_Create.json
            // this example is just showing the usage of "ProviderInstances_Create" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this SapMonitorResource created on azure
            // for more information of creating SapMonitorResource, please refer to the document of SapMonitorResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string monitorName = "mySapMonitor";
            ResourceIdentifier sapMonitorResourceId = SapMonitorResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, monitorName);
            SapMonitorResource sapMonitor = client.GetSapMonitorResource(sapMonitorResourceId);

            // get the collection of this SapProviderInstanceResource
            SapProviderInstanceCollection collection = sapMonitor.GetSapProviderInstances();

            // invoke the operation
            string providerInstanceName = "myProviderInstance";
            SapProviderInstanceData data = new SapProviderInstanceData()
            {
                ProviderSettings = new ProviderSpecificProperties()
                {
                    ProviderType = "MsSqlServer",
                },
            };
            ArmOperation<SapProviderInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, providerInstanceName, data);
            SapProviderInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapProviderInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Create a OS provider
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreateAOSProvider()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/preview/2021-12-01-preview/examples/workloadmonitor/PrometheusOSProviderInstances_Create.json
            // this example is just showing the usage of "ProviderInstances_Create" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this SapMonitorResource created on azure
            // for more information of creating SapMonitorResource, please refer to the document of SapMonitorResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string monitorName = "mySapMonitor";
            ResourceIdentifier sapMonitorResourceId = SapMonitorResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, monitorName);
            SapMonitorResource sapMonitor = client.GetSapMonitorResource(sapMonitorResourceId);

            // get the collection of this SapProviderInstanceResource
            SapProviderInstanceCollection collection = sapMonitor.GetSapProviderInstances();

            // invoke the operation
            string providerInstanceName = "myProviderInstance";
            SapProviderInstanceData data = new SapProviderInstanceData()
            {
                ProviderSettings = new ProviderSpecificProperties()
                {
                    ProviderType = "PrometheusOS",
                },
            };
            ArmOperation<SapProviderInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, providerInstanceName, data);
            SapProviderInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapProviderInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Create a PrometheusHaCluster provider
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreateAPrometheusHaClusterProvider()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/preview/2021-12-01-preview/examples/workloadmonitor/PrometheusHaClusterProviderInstances_Create.json
            // this example is just showing the usage of "ProviderInstances_Create" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this SapMonitorResource created on azure
            // for more information of creating SapMonitorResource, please refer to the document of SapMonitorResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string monitorName = "mySapMonitor";
            ResourceIdentifier sapMonitorResourceId = SapMonitorResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, monitorName);
            SapMonitorResource sapMonitor = client.GetSapMonitorResource(sapMonitorResourceId);

            // get the collection of this SapProviderInstanceResource
            SapProviderInstanceCollection collection = sapMonitor.GetSapProviderInstances();

            // invoke the operation
            string providerInstanceName = "myProviderInstance";
            SapProviderInstanceData data = new SapProviderInstanceData()
            {
                ProviderSettings = new ProviderSpecificProperties()
                {
                    ProviderType = "PrometheusHaCluster",
                },
            };
            ArmOperation<SapProviderInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, providerInstanceName, data);
            SapProviderInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapProviderInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Create a SAP monitor Hana provider
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreateASAPMonitorHanaProvider()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/preview/2021-12-01-preview/examples/workloadmonitor/ProviderInstances_Create.json
            // this example is just showing the usage of "ProviderInstances_Create" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this SapMonitorResource created on azure
            // for more information of creating SapMonitorResource, please refer to the document of SapMonitorResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string monitorName = "mySapMonitor";
            ResourceIdentifier sapMonitorResourceId = SapMonitorResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, monitorName);
            SapMonitorResource sapMonitor = client.GetSapMonitorResource(sapMonitorResourceId);

            // get the collection of this SapProviderInstanceResource
            SapProviderInstanceCollection collection = sapMonitor.GetSapProviderInstances();

            // invoke the operation
            string providerInstanceName = "myProviderInstance";
            SapProviderInstanceData data = new SapProviderInstanceData()
            {
                ProviderSettings = new ProviderSpecificProperties()
                {
                    ProviderType = "SapHana",
                },
            };
            ArmOperation<SapProviderInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, providerInstanceName, data);
            SapProviderInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapProviderInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Create a SAP monitor NetWeaver provider
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreateASAPMonitorNetWeaverProvider()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/preview/2021-12-01-preview/examples/workloadmonitor/NetWeaverProviderInstances_Create.json
            // this example is just showing the usage of "ProviderInstances_Create" operation, for the dependent resources, they will have to be created separately.

            // authenticate your client
            ArmClient client = new ArmClient(new DefaultAzureCredential());

            // this example assumes you already have this SapMonitorResource created on azure
            // for more information of creating SapMonitorResource, please refer to the document of SapMonitorResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string monitorName = "mySapMonitor";
            ResourceIdentifier sapMonitorResourceId = SapMonitorResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, monitorName);
            SapMonitorResource sapMonitor = client.GetSapMonitorResource(sapMonitorResourceId);

            // get the collection of this SapProviderInstanceResource
            SapProviderInstanceCollection collection = sapMonitor.GetSapProviderInstances();

            // invoke the operation
            string providerInstanceName = "myProviderInstance";
            SapProviderInstanceData data = new SapProviderInstanceData()
            {
                ProviderSettings = new ProviderSpecificProperties()
                {
                    ProviderType = "SapNetWeaver",
                },
            };
            ArmOperation<SapProviderInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, providerInstanceName, data);
            SapProviderInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapProviderInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }
    }
}
