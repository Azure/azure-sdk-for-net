// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.Models;
using Azure.ResourceManager.Workloads;
using Azure.ResourceManager.Workloads.Models;

namespace Azure.ResourceManager.Workloads.Samples
{
    public partial class Sample_SapProviderInstanceResource
    {
        // Get properties of a Db2 provider
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetPropertiesOfADb2Provider()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/stable/2023-04-01/examples/workloadmonitor/Db2ProviderInstances_Get.json
            // this example is just showing the usage of "ProviderInstances_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SapProviderInstanceResource created on azure
            // for more information of creating SapProviderInstanceResource, please refer to the document of SapProviderInstanceResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string monitorName = "mySapMonitor";
            string providerInstanceName = "myProviderInstance";
            ResourceIdentifier sapProviderInstanceResourceId = SapProviderInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, monitorName, providerInstanceName);
            SapProviderInstanceResource sapProviderInstance = client.GetSapProviderInstanceResource(sapProviderInstanceResourceId);

            // invoke the operation
            SapProviderInstanceResource result = await sapProviderInstance.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapProviderInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Get properties of a MsSqlServer provider
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetPropertiesOfAMsSqlServerProvider()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/stable/2023-04-01/examples/workloadmonitor/MsSqlServerProviderInstance_Get.json
            // this example is just showing the usage of "ProviderInstances_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SapProviderInstanceResource created on azure
            // for more information of creating SapProviderInstanceResource, please refer to the document of SapProviderInstanceResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string monitorName = "mySapMonitor";
            string providerInstanceName = "myProviderInstance";
            ResourceIdentifier sapProviderInstanceResourceId = SapProviderInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, monitorName, providerInstanceName);
            SapProviderInstanceResource sapProviderInstance = client.GetSapProviderInstanceResource(sapProviderInstanceResourceId);

            // invoke the operation
            SapProviderInstanceResource result = await sapProviderInstance.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapProviderInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Get properties of a OS provider
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetPropertiesOfAOSProvider()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/stable/2023-04-01/examples/workloadmonitor/PrometheusOSProviderInstances_Get.json
            // this example is just showing the usage of "ProviderInstances_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SapProviderInstanceResource created on azure
            // for more information of creating SapProviderInstanceResource, please refer to the document of SapProviderInstanceResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string monitorName = "mySapMonitor";
            string providerInstanceName = "myProviderInstance";
            ResourceIdentifier sapProviderInstanceResourceId = SapProviderInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, monitorName, providerInstanceName);
            SapProviderInstanceResource sapProviderInstance = client.GetSapProviderInstanceResource(sapProviderInstanceResourceId);

            // invoke the operation
            SapProviderInstanceResource result = await sapProviderInstance.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapProviderInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Get properties of a PrometheusHaCluster provider
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetPropertiesOfAPrometheusHaClusterProvider()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/stable/2023-04-01/examples/workloadmonitor/PrometheusHaClusterProviderInstances_Get.json
            // this example is just showing the usage of "ProviderInstances_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SapProviderInstanceResource created on azure
            // for more information of creating SapProviderInstanceResource, please refer to the document of SapProviderInstanceResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string monitorName = "mySapMonitor";
            string providerInstanceName = "myProviderInstance";
            ResourceIdentifier sapProviderInstanceResourceId = SapProviderInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, monitorName, providerInstanceName);
            SapProviderInstanceResource sapProviderInstance = client.GetSapProviderInstanceResource(sapProviderInstanceResourceId);

            // invoke the operation
            SapProviderInstanceResource result = await sapProviderInstance.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapProviderInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Get properties of a SAP monitor Hana provider
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetPropertiesOfASAPMonitorHanaProvider()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/stable/2023-04-01/examples/workloadmonitor/ProviderInstances_Get.json
            // this example is just showing the usage of "ProviderInstances_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SapProviderInstanceResource created on azure
            // for more information of creating SapProviderInstanceResource, please refer to the document of SapProviderInstanceResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string monitorName = "mySapMonitor";
            string providerInstanceName = "myProviderInstance";
            ResourceIdentifier sapProviderInstanceResourceId = SapProviderInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, monitorName, providerInstanceName);
            SapProviderInstanceResource sapProviderInstance = client.GetSapProviderInstanceResource(sapProviderInstanceResourceId);

            // invoke the operation
            SapProviderInstanceResource result = await sapProviderInstance.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapProviderInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Get properties of a SAP monitor NetWeaver provider
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_GetPropertiesOfASAPMonitorNetWeaverProvider()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/stable/2023-04-01/examples/workloadmonitor/NetWeaverProviderInstances_Get.json
            // this example is just showing the usage of "ProviderInstances_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SapProviderInstanceResource created on azure
            // for more information of creating SapProviderInstanceResource, please refer to the document of SapProviderInstanceResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string monitorName = "mySapMonitor";
            string providerInstanceName = "myProviderInstance";
            ResourceIdentifier sapProviderInstanceResourceId = SapProviderInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, monitorName, providerInstanceName);
            SapProviderInstanceResource sapProviderInstance = client.GetSapProviderInstanceResource(sapProviderInstanceResourceId);

            // invoke the operation
            SapProviderInstanceResource result = await sapProviderInstance.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapProviderInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Create a Db2 provider
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_CreateADb2Provider()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/stable/2023-04-01/examples/workloadmonitor/Db2ProviderInstances_Create.json
            // this example is just showing the usage of "ProviderInstances_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SapProviderInstanceResource created on azure
            // for more information of creating SapProviderInstanceResource, please refer to the document of SapProviderInstanceResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string monitorName = "mySapMonitor";
            string providerInstanceName = "myProviderInstance";
            ResourceIdentifier sapProviderInstanceResourceId = SapProviderInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, monitorName, providerInstanceName);
            SapProviderInstanceResource sapProviderInstance = client.GetSapProviderInstanceResource(sapProviderInstanceResourceId);

            // invoke the operation
            SapProviderInstanceData data = new SapProviderInstanceData()
            {
                ProviderSettings = new DB2ProviderInstanceProperties()
                {
                    Hostname = "hostname",
                    DBName = "dbName",
                    DBPort = "dbPort",
                    DBUsername = "username",
                    DBPassword = "password",
                    DBPasswordUri = new Uri(""),
                    SapSid = "SID",
                    SslPreference = SapSslPreference.ServerCertificate,
                    SslCertificateUri = new Uri("https://storageaccount.blob.core.windows.net/containername/filename"),
                },
            };
            ArmOperation<SapProviderInstanceResource> lro = await sapProviderInstance.UpdateAsync(WaitUntil.Completed, data);
            SapProviderInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapProviderInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Create a Db2 provider with Root Certificate
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_CreateADb2ProviderWithRootCertificate()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/stable/2023-04-01/examples/workloadmonitor/Db2ProviderInstances_Create_Root_Certificate.json
            // this example is just showing the usage of "ProviderInstances_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SapProviderInstanceResource created on azure
            // for more information of creating SapProviderInstanceResource, please refer to the document of SapProviderInstanceResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string monitorName = "mySapMonitor";
            string providerInstanceName = "myProviderInstance";
            ResourceIdentifier sapProviderInstanceResourceId = SapProviderInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, monitorName, providerInstanceName);
            SapProviderInstanceResource sapProviderInstance = client.GetSapProviderInstanceResource(sapProviderInstanceResourceId);

            // invoke the operation
            SapProviderInstanceData data = new SapProviderInstanceData()
            {
                ProviderSettings = new DB2ProviderInstanceProperties()
                {
                    Hostname = "hostname",
                    DBName = "dbName",
                    DBPort = "dbPort",
                    DBUsername = "username",
                    DBPassword = "password",
                    DBPasswordUri = new Uri(""),
                    SapSid = "SID",
                    SslPreference = SapSslPreference.RootCertificate,
                },
            };
            ArmOperation<SapProviderInstanceResource> lro = await sapProviderInstance.UpdateAsync(WaitUntil.Completed, data);
            SapProviderInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapProviderInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Create a MsSqlServer provider
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_CreateAMsSqlServerProvider()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/stable/2023-04-01/examples/workloadmonitor/MsSqlServerProviderInstance_Create.json
            // this example is just showing the usage of "ProviderInstances_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SapProviderInstanceResource created on azure
            // for more information of creating SapProviderInstanceResource, please refer to the document of SapProviderInstanceResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string monitorName = "mySapMonitor";
            string providerInstanceName = "myProviderInstance";
            ResourceIdentifier sapProviderInstanceResourceId = SapProviderInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, monitorName, providerInstanceName);
            SapProviderInstanceResource sapProviderInstance = client.GetSapProviderInstanceResource(sapProviderInstanceResourceId);

            // invoke the operation
            SapProviderInstanceData data = new SapProviderInstanceData()
            {
                ProviderSettings = new MsSqlServerProviderInstanceProperties()
                {
                    Hostname = "hostname",
                    DBPort = "5912",
                    DBUsername = "user",
                    DBPassword = "****",
                    DBPasswordUri = new Uri(""),
                    SapSid = "sid",
                    SslPreference = SapSslPreference.ServerCertificate,
                    SslCertificateUri = new Uri("https://storageaccount.blob.core.windows.net/containername/filename"),
                },
            };
            ArmOperation<SapProviderInstanceResource> lro = await sapProviderInstance.UpdateAsync(WaitUntil.Completed, data);
            SapProviderInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapProviderInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Create a MsSqlServer provider with Root Certificate
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_CreateAMsSqlServerProviderWithRootCertificate()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/stable/2023-04-01/examples/workloadmonitor/MsSqlServerProviderInstance_Create_Root_Certificate.json
            // this example is just showing the usage of "ProviderInstances_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SapProviderInstanceResource created on azure
            // for more information of creating SapProviderInstanceResource, please refer to the document of SapProviderInstanceResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string monitorName = "mySapMonitor";
            string providerInstanceName = "myProviderInstance";
            ResourceIdentifier sapProviderInstanceResourceId = SapProviderInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, monitorName, providerInstanceName);
            SapProviderInstanceResource sapProviderInstance = client.GetSapProviderInstanceResource(sapProviderInstanceResourceId);

            // invoke the operation
            SapProviderInstanceData data = new SapProviderInstanceData()
            {
                ProviderSettings = new MsSqlServerProviderInstanceProperties()
                {
                    Hostname = "hostname",
                    DBPort = "5912",
                    DBUsername = "user",
                    DBPassword = "****",
                    DBPasswordUri = new Uri(""),
                    SapSid = "sid",
                    SslPreference = SapSslPreference.RootCertificate,
                },
            };
            ArmOperation<SapProviderInstanceResource> lro = await sapProviderInstance.UpdateAsync(WaitUntil.Completed, data);
            SapProviderInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapProviderInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Create a OS provider
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_CreateAOSProvider()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/stable/2023-04-01/examples/workloadmonitor/PrometheusOSProviderInstances_Create.json
            // this example is just showing the usage of "ProviderInstances_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SapProviderInstanceResource created on azure
            // for more information of creating SapProviderInstanceResource, please refer to the document of SapProviderInstanceResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string monitorName = "mySapMonitor";
            string providerInstanceName = "myProviderInstance";
            ResourceIdentifier sapProviderInstanceResourceId = SapProviderInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, monitorName, providerInstanceName);
            SapProviderInstanceResource sapProviderInstance = client.GetSapProviderInstanceResource(sapProviderInstanceResourceId);

            // invoke the operation
            SapProviderInstanceData data = new SapProviderInstanceData()
            {
                ProviderSettings = new PrometheusOSProviderInstanceProperties()
                {
                    PrometheusUri = new Uri("http://192.168.0.0:9090/metrics"),
                    SslPreference = SapSslPreference.ServerCertificate,
                    SslCertificateUri = new Uri("https://storageaccount.blob.core.windows.net/containername/filename"),
                    SapSid = "SID",
                },
            };
            ArmOperation<SapProviderInstanceResource> lro = await sapProviderInstance.UpdateAsync(WaitUntil.Completed, data);
            SapProviderInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapProviderInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Create a OS provider with Root Certificate
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_CreateAOSProviderWithRootCertificate()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/stable/2023-04-01/examples/workloadmonitor/PrometheusOSProviderInstances_Create_Root_Certificate.json
            // this example is just showing the usage of "ProviderInstances_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SapProviderInstanceResource created on azure
            // for more information of creating SapProviderInstanceResource, please refer to the document of SapProviderInstanceResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string monitorName = "mySapMonitor";
            string providerInstanceName = "myProviderInstance";
            ResourceIdentifier sapProviderInstanceResourceId = SapProviderInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, monitorName, providerInstanceName);
            SapProviderInstanceResource sapProviderInstance = client.GetSapProviderInstanceResource(sapProviderInstanceResourceId);

            // invoke the operation
            SapProviderInstanceData data = new SapProviderInstanceData()
            {
                ProviderSettings = new PrometheusOSProviderInstanceProperties()
                {
                    PrometheusUri = new Uri("http://192.168.0.0:9090/metrics"),
                    SslPreference = SapSslPreference.RootCertificate,
                    SapSid = "SID",
                },
            };
            ArmOperation<SapProviderInstanceResource> lro = await sapProviderInstance.UpdateAsync(WaitUntil.Completed, data);
            SapProviderInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapProviderInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Create a PrometheusHaCluster provider
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_CreateAPrometheusHaClusterProvider()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/stable/2023-04-01/examples/workloadmonitor/PrometheusHaClusterProviderInstances_Create.json
            // this example is just showing the usage of "ProviderInstances_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SapProviderInstanceResource created on azure
            // for more information of creating SapProviderInstanceResource, please refer to the document of SapProviderInstanceResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string monitorName = "mySapMonitor";
            string providerInstanceName = "myProviderInstance";
            ResourceIdentifier sapProviderInstanceResourceId = SapProviderInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, monitorName, providerInstanceName);
            SapProviderInstanceResource sapProviderInstance = client.GetSapProviderInstanceResource(sapProviderInstanceResourceId);

            // invoke the operation
            SapProviderInstanceData data = new SapProviderInstanceData()
            {
                ProviderSettings = new PrometheusHAClusterProviderInstanceProperties()
                {
                    PrometheusUri = new Uri("http://192.168.0.0:9090/metrics"),
                    Hostname = "hostname",
                    Sid = "sid",
                    ClusterName = "clusterName",
                    SslPreference = SapSslPreference.ServerCertificate,
                    SslCertificateUri = new Uri("https://storageaccount.blob.core.windows.net/containername/filename"),
                },
            };
            ArmOperation<SapProviderInstanceResource> lro = await sapProviderInstance.UpdateAsync(WaitUntil.Completed, data);
            SapProviderInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapProviderInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Create a PrometheusHaCluster provider with Root Certificate
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_CreateAPrometheusHaClusterProviderWithRootCertificate()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/stable/2023-04-01/examples/workloadmonitor/PrometheusHaClusterProviderInstances_Create_Root_Certificate.json
            // this example is just showing the usage of "ProviderInstances_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SapProviderInstanceResource created on azure
            // for more information of creating SapProviderInstanceResource, please refer to the document of SapProviderInstanceResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string monitorName = "mySapMonitor";
            string providerInstanceName = "myProviderInstance";
            ResourceIdentifier sapProviderInstanceResourceId = SapProviderInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, monitorName, providerInstanceName);
            SapProviderInstanceResource sapProviderInstance = client.GetSapProviderInstanceResource(sapProviderInstanceResourceId);

            // invoke the operation
            SapProviderInstanceData data = new SapProviderInstanceData()
            {
                ProviderSettings = new PrometheusHAClusterProviderInstanceProperties()
                {
                    PrometheusUri = new Uri("http://192.168.0.0:9090/metrics"),
                    Hostname = "hostname",
                    Sid = "sid",
                    ClusterName = "clusterName",
                    SslPreference = SapSslPreference.RootCertificate,
                },
            };
            ArmOperation<SapProviderInstanceResource> lro = await sapProviderInstance.UpdateAsync(WaitUntil.Completed, data);
            SapProviderInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapProviderInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Create a SAP monitor Hana provider
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_CreateASAPMonitorHanaProvider()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/stable/2023-04-01/examples/workloadmonitor/ProviderInstances_Create.json
            // this example is just showing the usage of "ProviderInstances_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SapProviderInstanceResource created on azure
            // for more information of creating SapProviderInstanceResource, please refer to the document of SapProviderInstanceResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string monitorName = "mySapMonitor";
            string providerInstanceName = "myProviderInstance";
            ResourceIdentifier sapProviderInstanceResourceId = SapProviderInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, monitorName, providerInstanceName);
            SapProviderInstanceResource sapProviderInstance = client.GetSapProviderInstanceResource(sapProviderInstanceResourceId);

            // invoke the operation
            SapProviderInstanceData data = new SapProviderInstanceData()
            {
                ProviderSettings = new HanaDBProviderInstanceProperties()
                {
                    Hostname = "name",
                    DBName = "db",
                    SqlPort = "0000",
                    InstanceNumber = "00",
                    DBUsername = "user",
                    DBPassword = "****",
                    DBPasswordUri = new Uri(""),
                    SslCertificateUri = new Uri("https://storageaccount.blob.core.windows.net/containername/filename"),
                    SslHostNameInCertificate = "xyz.domain.com",
                    SslPreference = SapSslPreference.ServerCertificate,
                    SapSid = "SID",
                },
            };
            ArmOperation<SapProviderInstanceResource> lro = await sapProviderInstance.UpdateAsync(WaitUntil.Completed, data);
            SapProviderInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapProviderInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Create a SAP monitor Hana provider with Root Certificate
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_CreateASAPMonitorHanaProviderWithRootCertificate()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/stable/2023-04-01/examples/workloadmonitor/ProviderInstances_Create_Root_Certificate.json
            // this example is just showing the usage of "ProviderInstances_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SapProviderInstanceResource created on azure
            // for more information of creating SapProviderInstanceResource, please refer to the document of SapProviderInstanceResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string monitorName = "mySapMonitor";
            string providerInstanceName = "myProviderInstance";
            ResourceIdentifier sapProviderInstanceResourceId = SapProviderInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, monitorName, providerInstanceName);
            SapProviderInstanceResource sapProviderInstance = client.GetSapProviderInstanceResource(sapProviderInstanceResourceId);

            // invoke the operation
            SapProviderInstanceData data = new SapProviderInstanceData()
            {
                ProviderSettings = new HanaDBProviderInstanceProperties()
                {
                    Hostname = "name",
                    DBName = "db",
                    SqlPort = "0000",
                    InstanceNumber = "00",
                    DBUsername = "user",
                    DBPassword = "****",
                    DBPasswordUri = new Uri(""),
                    SslHostNameInCertificate = "xyz.domain.com",
                    SslPreference = SapSslPreference.RootCertificate,
                    SapSid = "SID",
                },
            };
            ArmOperation<SapProviderInstanceResource> lro = await sapProviderInstance.UpdateAsync(WaitUntil.Completed, data);
            SapProviderInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapProviderInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Create a SAP monitor NetWeaver provider
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_CreateASAPMonitorNetWeaverProvider()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/stable/2023-04-01/examples/workloadmonitor/NetWeaverProviderInstances_Create.json
            // this example is just showing the usage of "ProviderInstances_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SapProviderInstanceResource created on azure
            // for more information of creating SapProviderInstanceResource, please refer to the document of SapProviderInstanceResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string monitorName = "mySapMonitor";
            string providerInstanceName = "myProviderInstance";
            ResourceIdentifier sapProviderInstanceResourceId = SapProviderInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, monitorName, providerInstanceName);
            SapProviderInstanceResource sapProviderInstance = client.GetSapProviderInstanceResource(sapProviderInstanceResourceId);

            // invoke the operation
            SapProviderInstanceData data = new SapProviderInstanceData()
            {
                ProviderSettings = new SapNetWeaverProviderInstanceProperties()
                {
                    SapSid = "SID",
                    SapHostname = "name",
                    SapInstanceNr = "00",
                    SapHostFileEntries =
{
"127.0.0.1 name fqdn"
},
                    SapUsername = "username",
                    SapPassword = "****",
                    SapPasswordUri = new Uri(""),
                    SapClientId = "111",
                    SapPortNumber = "1234",
                    SslCertificateUri = new Uri("https://storageaccount.blob.core.windows.net/containername/filename"),
                    SslPreference = SapSslPreference.ServerCertificate,
                },
            };
            ArmOperation<SapProviderInstanceResource> lro = await sapProviderInstance.UpdateAsync(WaitUntil.Completed, data);
            SapProviderInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapProviderInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Create a SAP monitor NetWeaver provider with Root Certificate
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_CreateASAPMonitorNetWeaverProviderWithRootCertificate()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/stable/2023-04-01/examples/workloadmonitor/NetWeaverProviderInstances_Create_Root_Certificate.json
            // this example is just showing the usage of "ProviderInstances_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SapProviderInstanceResource created on azure
            // for more information of creating SapProviderInstanceResource, please refer to the document of SapProviderInstanceResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string monitorName = "mySapMonitor";
            string providerInstanceName = "myProviderInstance";
            ResourceIdentifier sapProviderInstanceResourceId = SapProviderInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, monitorName, providerInstanceName);
            SapProviderInstanceResource sapProviderInstance = client.GetSapProviderInstanceResource(sapProviderInstanceResourceId);

            // invoke the operation
            SapProviderInstanceData data = new SapProviderInstanceData()
            {
                ProviderSettings = new SapNetWeaverProviderInstanceProperties()
                {
                    SapSid = "SID",
                    SapHostname = "name",
                    SapInstanceNr = "00",
                    SapHostFileEntries =
{
"127.0.0.1 name fqdn"
},
                    SapUsername = "username",
                    SapPassword = "****",
                    SapPasswordUri = new Uri(""),
                    SapClientId = "111",
                    SapPortNumber = "1234",
                    SslPreference = SapSslPreference.RootCertificate,
                },
            };
            ArmOperation<SapProviderInstanceResource> lro = await sapProviderInstance.UpdateAsync(WaitUntil.Completed, data);
            SapProviderInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapProviderInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Deletes a SAP monitor provider
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_DeletesASAPMonitorProvider()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/stable/2023-04-01/examples/workloadmonitor/ProviderInstances_Delete.json
            // this example is just showing the usage of "ProviderInstances_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SapProviderInstanceResource created on azure
            // for more information of creating SapProviderInstanceResource, please refer to the document of SapProviderInstanceResource
            string subscriptionId = "00000000-0000-0000-0000-000000000000";
            string resourceGroupName = "myResourceGroup";
            string monitorName = "mySapMonitor";
            string providerInstanceName = "myProviderInstance";
            ResourceIdentifier sapProviderInstanceResourceId = SapProviderInstanceResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, monitorName, providerInstanceName);
            SapProviderInstanceResource sapProviderInstance = client.GetSapProviderInstanceResource(sapProviderInstanceResourceId);

            // invoke the operation
            ArmOperation<OperationStatusResult> lro = await sapProviderInstance.DeleteAsync(WaitUntil.Completed);
            OperationStatusResult result = lro.Value;

            Console.WriteLine($"Succeeded: {result}");
        }
    }
}
