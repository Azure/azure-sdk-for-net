// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Workloads;
using Azure.ResourceManager.Workloads.Models;

namespace Azure.ResourceManager.Workloads.Samples
{
    public partial class Sample_PhpWorkloadResource
    {
        // Workloads
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetPhpWorkloadResources_Workloads()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/preview/2021-12-01-preview/examples/phpworkloads/PhpWorkloads_ListBySubscription.json
            // this example is just showing the usage of "PhpWorkloads_ListBySubscription" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this SubscriptionResource created on azure
            // for more information of creating SubscriptionResource, please refer to the document of SubscriptionResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            ResourceIdentifier subscriptionResourceId = SubscriptionResource.CreateResourceIdentifier(subscriptionId);
            SubscriptionResource subscriptionResource = client.GetSubscriptionResource(subscriptionResourceId);

            // invoke the operation and iterate over the result
            await foreach (PhpWorkloadResource item in subscriptionResource.GetPhpWorkloadResourcesAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                PhpWorkloadResourceData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }

        // Workloads
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_Workloads()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/preview/2021-12-01-preview/examples/phpworkloads/PhpWorkloads_Get.json
            // this example is just showing the usage of "PhpWorkloads_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PhpWorkloadResource created on azure
            // for more information of creating PhpWorkloadResource, please refer to the document of PhpWorkloadResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            string resourceGroupName = "test-rg";
            string phpWorkloadName = "wp39";
            ResourceIdentifier phpWorkloadResourceId = PhpWorkloadResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, phpWorkloadName);
            PhpWorkloadResource phpWorkloadResource = client.GetPhpWorkloadResource(phpWorkloadResourceId);

            // invoke the operation
            PhpWorkloadResource result = await phpWorkloadResource.GetAsync();

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            PhpWorkloadResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Workloads
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Update_Workloads()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/preview/2021-12-01-preview/examples/phpworkloads/PhpWorkloads_Update.json
            // this example is just showing the usage of "PhpWorkloads_Update" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PhpWorkloadResource created on azure
            // for more information of creating PhpWorkloadResource, please refer to the document of PhpWorkloadResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            string resourceGroupName = "test-rg";
            string phpWorkloadName = "wp39";
            ResourceIdentifier phpWorkloadResourceId = PhpWorkloadResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, phpWorkloadName);
            PhpWorkloadResource phpWorkloadResource = client.GetPhpWorkloadResource(phpWorkloadResourceId);

            // invoke the operation
            PhpWorkloadResourcePatch patch = new PhpWorkloadResourcePatch()
            {
                Tags =
{
["tag_name"] = "tag_value",
},
                Identity = new PatchResourceRequestBodyIdentity(ManagedServiceIdentityType.None),
            };
            PhpWorkloadResource result = await phpWorkloadResource.UpdateAsync(patch);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            PhpWorkloadResourceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Workloads
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Delete_Workloads()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/preview/2021-12-01-preview/examples/phpworkloads/PhpWorkloads_Delete.json
            // this example is just showing the usage of "PhpWorkloads_Delete" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this PhpWorkloadResource created on azure
            // for more information of creating PhpWorkloadResource, please refer to the document of PhpWorkloadResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            string resourceGroupName = "test-rg";
            string phpWorkloadName = "wp39";
            ResourceIdentifier phpWorkloadResourceId = PhpWorkloadResource.CreateResourceIdentifier(subscriptionId, resourceGroupName, phpWorkloadName);
            PhpWorkloadResource phpWorkloadResource = client.GetPhpWorkloadResource(phpWorkloadResourceId);

            // invoke the operation
            string deleteInfra = "false";
            await phpWorkloadResource.DeleteAsync(WaitUntil.Completed, deleteInfra: deleteInfra);

            Console.WriteLine($"Succeeded");
        }
    }
}
