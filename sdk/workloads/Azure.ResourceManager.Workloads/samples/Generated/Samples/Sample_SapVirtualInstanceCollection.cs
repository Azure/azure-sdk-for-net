// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Workloads;
using Azure.ResourceManager.Workloads.Models;

namespace Azure.ResourceManager.Workloads.Samples
{
    public partial class Sample_SapVirtualInstanceCollection
    {
        // Create Infrastructure (with OS configuration) with custom resource names for Distributed System
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreateInfrastructureWithOSConfigurationWithCustomResourceNamesForDistributedSystem()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/stable/2023-04-01/examples/sapvirtualinstances/SAPVirtualInstances_Create_CustomFullResourceNames_Distributed.json
            // this example is just showing the usage of "SAPVirtualInstances_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("westcentralus"), SapEnvironmentType.Prod, SapProductType.S4Hana, new DeploymentWithOSConfiguration()
            {
                AppLocation = new AzureLocation("eastus"),
                InfrastructureConfiguration = new ThreeTierConfiguration("X00-RG", new CentralServerConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet"), new SapVirtualMachineConfiguration("Standard_E16ds_v4", new SapImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "84sapha-gen2",
                    Version = "latest",
                }, new SapOSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new SapLinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshKeyPair = new SapSshKeyPair()
                        {
                            PublicKey = "abc",
                            PrivateKey = "xyz",
                        },
                    },
                }), 1), new ApplicationServerConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet"), new SapVirtualMachineConfiguration("Standard_E32ds_v4", new SapImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "84sapha-gen2",
                    Version = "latest",
                }, new SapOSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new SapLinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshKeyPair = new SapSshKeyPair()
                        {
                            PublicKey = "abc",
                            PrivateKey = "xyz",
                        },
                    },
                }), 6), new DatabaseConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/dbsubnet"), new SapVirtualMachineConfiguration("Standard_M32ts", new SapImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "84sapha-gen2",
                    Version = "latest",
                }, new SapOSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new SapLinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshKeyPair = new SapSshKeyPair()
                        {
                            PublicKey = "abc",
                            PrivateKey = "xyz",
                        },
                    },
                }), 1)
                {
                    DatabaseType = SapDatabaseType.Hana,
                })
                {
                    CustomResourceNames = new ThreeTierFullResourceNames()
                    {
                        CentralServer = new CentralServerFullResourceNames()
                        {
                            VirtualMachines =
{
new VirtualMachineResourceNames()
{
VmName = "ascsvm",
HostName = "ascshostName",
NetworkInterfaces =
{
new NetworkInterfaceResourceNames()
{
NetworkInterfaceName = "ascsnic",
}
},
OSDiskName = "ascsosdisk",
DataDiskNames =
{
["default"] = new string[]
{
"ascsdisk0"
},
},
}
},
                        },
                        ApplicationServer = new ApplicationServerFullResourceNames()
                        {
                            VirtualMachines =
{
new VirtualMachineResourceNames()
{
VmName = "appvm0",
HostName = "apphostName0",
NetworkInterfaces =
{
new NetworkInterfaceResourceNames()
{
NetworkInterfaceName = "appnic0",
}
},
OSDiskName = "app0osdisk",
DataDiskNames =
{
["default"] = new string[]
{
"app0disk0"
},
},
},new VirtualMachineResourceNames()
{
VmName = "appvm1",
HostName = "apphostName1",
NetworkInterfaces =
{
new NetworkInterfaceResourceNames()
{
NetworkInterfaceName = "appnic1",
}
},
OSDiskName = "app1osdisk",
DataDiskNames =
{
["default"] = new string[]
{
"app1disk0"
},
},
}
},
                            AvailabilitySetName = "appAvSet",
                        },
                        DatabaseServer = new DatabaseServerFullResourceNames()
                        {
                            VirtualMachines =
{
new VirtualMachineResourceNames()
{
VmName = "dbvm",
HostName = "dbhostName",
NetworkInterfaces =
{
new NetworkInterfaceResourceNames()
{
NetworkInterfaceName = "dbnic",
}
},
OSDiskName = "dbosdisk",
DataDiskNames =
{
["hanaData"] = new string[]
{
"hanadata0","hanadata1"
},
["hanaLog"] = new string[]
{
"hanalog0","hanalog1","hanalog2"
},
["hanaShared"] = new string[]
{
"hanashared0","hanashared1"
},
["usrSap"] = new string[]
{
"usrsap0"
},
},
}
},
                        },
                        SharedStorage = new SharedStorageResourceNames()
                        {
                            SharedStorageAccountName = "storageacc",
                            SharedStorageAccountPrivateEndPointName = "peForxNFS",
                        },
                    },
                },
                OSSapConfiguration = new OSSapConfiguration()
                {
                    SapFqdn = "xyz.test.com",
                },
            })
            {
                Tags =
{
},
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Create Infrastructure (with OS configuration) with custom resource names for HA System with Availability Set
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreateInfrastructureWithOSConfigurationWithCustomResourceNamesForHASystemWithAvailabilitySet()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/stable/2023-04-01/examples/sapvirtualinstances/SAPVirtualInstances_Create_CustomFullResourceNames_HA_AvSet.json
            // this example is just showing the usage of "SAPVirtualInstances_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("westcentralus"), SapEnvironmentType.Prod, SapProductType.S4Hana, new DeploymentWithOSConfiguration()
            {
                AppLocation = new AzureLocation("eastus"),
                InfrastructureConfiguration = new ThreeTierConfiguration("X00-RG", new CentralServerConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet"), new SapVirtualMachineConfiguration("Standard_E16ds_v4", new SapImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "84sapha-gen2",
                    Version = "latest",
                }, new SapOSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new SapLinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshKeyPair = new SapSshKeyPair()
                        {
                            PublicKey = "abc",
                            PrivateKey = "xyz",
                        },
                    },
                }), 2), new ApplicationServerConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet"), new SapVirtualMachineConfiguration("Standard_E32ds_v4", new SapImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "84sapha-gen2",
                    Version = "latest",
                }, new SapOSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new SapLinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshKeyPair = new SapSshKeyPair()
                        {
                            PublicKey = "abc",
                            PrivateKey = "xyz",
                        },
                    },
                }), 6), new DatabaseConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/dbsubnet"), new SapVirtualMachineConfiguration("Standard_M32ts", new SapImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "84sapha-gen2",
                    Version = "latest",
                }, new SapOSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new SapLinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshKeyPair = new SapSshKeyPair()
                        {
                            PublicKey = "abc",
                            PrivateKey = "xyz",
                        },
                    },
                }), 2)
                {
                    DatabaseType = SapDatabaseType.Hana,
                })
                {
                    HighAvailabilityType = SapHighAvailabilityType.AvailabilitySet,
                    CustomResourceNames = new ThreeTierFullResourceNames()
                    {
                        CentralServer = new CentralServerFullResourceNames()
                        {
                            VirtualMachines =
{
new VirtualMachineResourceNames()
{
VmName = "ascsvm",
HostName = "ascshostName",
NetworkInterfaces =
{
new NetworkInterfaceResourceNames()
{
NetworkInterfaceName = "ascsnic",
}
},
OSDiskName = "ascsosdisk",
},new VirtualMachineResourceNames()
{
VmName = "ersvm",
HostName = "ershostName",
NetworkInterfaces =
{
new NetworkInterfaceResourceNames()
{
NetworkInterfaceName = "ersnic",
}
},
OSDiskName = "ersosdisk",
}
},
                            AvailabilitySetName = "csAvSet",
                            LoadBalancer = new LoadBalancerResourceNames()
                            {
                                LoadBalancerName = "ascslb",
                                FrontendIPConfigurationNames =
{
"ascsip0","ersip0"
},
                                BackendPoolNames =
{
"ascsBackendPool"
},
                                HealthProbeNames =
{
"ascsHealthProbe","ersHealthProbe"
},
                            },
                        },
                        ApplicationServer = new ApplicationServerFullResourceNames()
                        {
                            VirtualMachines =
{
new VirtualMachineResourceNames()
{
VmName = "appvm0",
HostName = "apphostName0",
NetworkInterfaces =
{
new NetworkInterfaceResourceNames()
{
NetworkInterfaceName = "appnic0",
}
},
OSDiskName = "app0osdisk",
DataDiskNames =
{
["default"] = new string[]
{
"app0disk0"
},
},
},new VirtualMachineResourceNames()
{
VmName = "appvm1",
HostName = "apphostName1",
NetworkInterfaces =
{
new NetworkInterfaceResourceNames()
{
NetworkInterfaceName = "appnic1",
}
},
OSDiskName = "app1osdisk",
DataDiskNames =
{
["default"] = new string[]
{
"app1disk0"
},
},
}
},
                            AvailabilitySetName = "appAvSet",
                        },
                        DatabaseServer = new DatabaseServerFullResourceNames()
                        {
                            VirtualMachines =
{
new VirtualMachineResourceNames()
{
VmName = "dbvmpr",
HostName = "dbprhostName",
NetworkInterfaces =
{
new NetworkInterfaceResourceNames()
{
NetworkInterfaceName = "dbprnic",
}
},
OSDiskName = "dbprosdisk",
DataDiskNames =
{
["hanaData"] = new string[]
{
"hanadatapr0","hanadatapr1"
},
["hanaLog"] = new string[]
{
"hanalogpr0","hanalogpr1","hanalogpr2"
},
["hanaShared"] = new string[]
{
"hanasharedpr0","hanasharedpr1"
},
["usrSap"] = new string[]
{
"usrsappr0"
},
},
},new VirtualMachineResourceNames()
{
VmName = "dbvmsr",
HostName = "dbsrhostName",
NetworkInterfaces =
{
new NetworkInterfaceResourceNames()
{
NetworkInterfaceName = "dbsrnic",
}
},
OSDiskName = "dbsrosdisk",
DataDiskNames =
{
["hanaData"] = new string[]
{
"hanadatasr0","hanadatasr1"
},
["hanaLog"] = new string[]
{
"hanalogsr0","hanalogsr1","hanalogsr2"
},
["hanaShared"] = new string[]
{
"hanasharedsr0","hanasharedsr1"
},
["usrSap"] = new string[]
{
"usrsapsr0"
},
},
}
},
                            AvailabilitySetName = "dbAvSet",
                            LoadBalancer = new LoadBalancerResourceNames()
                            {
                                LoadBalancerName = "dblb",
                                FrontendIPConfigurationNames =
{
"dbip"
},
                                BackendPoolNames =
{
"dbBackendPool"
},
                                HealthProbeNames =
{
"dbHealthProbe"
},
                            },
                        },
                        SharedStorage = new SharedStorageResourceNames()
                        {
                            SharedStorageAccountName = "storageacc",
                            SharedStorageAccountPrivateEndPointName = "peForxNFS",
                        },
                    },
                },
                OSSapConfiguration = new OSSapConfiguration()
                {
                    SapFqdn = "xyz.test.com",
                },
            })
            {
                Tags =
{
},
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Create Infrastructure (with OS configuration) with custom resource names for HA system with Availability Zone
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreateInfrastructureWithOSConfigurationWithCustomResourceNamesForHASystemWithAvailabilityZone()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/stable/2023-04-01/examples/sapvirtualinstances/SAPVirtualInstances_Create_CustomFullResourceNames_HA_AvZone.json
            // this example is just showing the usage of "SAPVirtualInstances_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("westcentralus"), SapEnvironmentType.Prod, SapProductType.S4Hana, new DeploymentWithOSConfiguration()
            {
                AppLocation = new AzureLocation("eastus"),
                InfrastructureConfiguration = new ThreeTierConfiguration("X00-RG", new CentralServerConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet"), new SapVirtualMachineConfiguration("Standard_E16ds_v4", new SapImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "84sapha-gen2",
                    Version = "latest",
                }, new SapOSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new SapLinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshKeyPair = new SapSshKeyPair()
                        {
                            PublicKey = "abc",
                            PrivateKey = "xyz",
                        },
                    },
                }), 2), new ApplicationServerConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet"), new SapVirtualMachineConfiguration("Standard_E32ds_v4", new SapImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "84sapha-gen2",
                    Version = "latest",
                }, new SapOSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new SapLinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshKeyPair = new SapSshKeyPair()
                        {
                            PublicKey = "abc",
                            PrivateKey = "xyz",
                        },
                    },
                }), 6), new DatabaseConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/dbsubnet"), new SapVirtualMachineConfiguration("Standard_M32ts", new SapImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "84sapha-gen2",
                    Version = "latest",
                }, new SapOSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new SapLinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshKeyPair = new SapSshKeyPair()
                        {
                            PublicKey = "abc",
                            PrivateKey = "xyz",
                        },
                    },
                }), 2)
                {
                    DatabaseType = SapDatabaseType.Hana,
                })
                {
                    HighAvailabilityType = SapHighAvailabilityType.AvailabilityZone,
                    CustomResourceNames = new ThreeTierFullResourceNames()
                    {
                        CentralServer = new CentralServerFullResourceNames()
                        {
                            VirtualMachines =
{
new VirtualMachineResourceNames()
{
VmName = "ascsvm",
HostName = "ascshostName",
NetworkInterfaces =
{
new NetworkInterfaceResourceNames()
{
NetworkInterfaceName = "ascsnic",
}
},
OSDiskName = "ascsosdisk",
},new VirtualMachineResourceNames()
{
VmName = "ersvm",
HostName = "ershostName",
NetworkInterfaces =
{
new NetworkInterfaceResourceNames()
{
NetworkInterfaceName = "ersnic",
}
},
OSDiskName = "ersosdisk",
}
},
                            LoadBalancer = new LoadBalancerResourceNames()
                            {
                                LoadBalancerName = "ascslb",
                                FrontendIPConfigurationNames =
{
"ascsip0","ersip0"
},
                                BackendPoolNames =
{
"ascsBackendPool"
},
                                HealthProbeNames =
{
"ascsHealthProbe","ersHealthProbe"
},
                            },
                        },
                        ApplicationServer = new ApplicationServerFullResourceNames()
                        {
                            VirtualMachines =
{
new VirtualMachineResourceNames()
{
VmName = "appvm0",
HostName = "apphostName0",
NetworkInterfaces =
{
new NetworkInterfaceResourceNames()
{
NetworkInterfaceName = "appnic0",
}
},
OSDiskName = "app0osdisk",
DataDiskNames =
{
["default"] = new string[]
{
"app0disk0"
},
},
},new VirtualMachineResourceNames()
{
VmName = "appvm1",
HostName = "apphostName1",
NetworkInterfaces =
{
new NetworkInterfaceResourceNames()
{
NetworkInterfaceName = "appnic1",
}
},
OSDiskName = "app1osdisk",
DataDiskNames =
{
["default"] = new string[]
{
"app1disk0"
},
},
}
},
                        },
                        DatabaseServer = new DatabaseServerFullResourceNames()
                        {
                            VirtualMachines =
{
new VirtualMachineResourceNames()
{
VmName = "dbvmpr",
HostName = "dbprhostName",
NetworkInterfaces =
{
new NetworkInterfaceResourceNames()
{
NetworkInterfaceName = "dbprnic",
}
},
OSDiskName = "dbprosdisk",
DataDiskNames =
{
["hanaData"] = new string[]
{
"hanadatapr0","hanadatapr1"
},
["hanaLog"] = new string[]
{
"hanalogpr0","hanalogpr1","hanalogpr2"
},
["hanaShared"] = new string[]
{
"hanasharedpr0","hanasharedpr1"
},
["usrSap"] = new string[]
{
"usrsappr0"
},
},
},new VirtualMachineResourceNames()
{
VmName = "dbvmsr",
HostName = "dbsrhostName",
NetworkInterfaces =
{
new NetworkInterfaceResourceNames()
{
NetworkInterfaceName = "dbsrnic",
}
},
OSDiskName = "dbsrosdisk",
DataDiskNames =
{
["hanaData"] = new string[]
{
"hanadatasr0","hanadatasr1"
},
["hanaLog"] = new string[]
{
"hanalogsr0","hanalogsr1","hanalogsr2"
},
["hanaShared"] = new string[]
{
"hanasharedsr0","hanasharedsr1"
},
["usrSap"] = new string[]
{
"usrsapsr0"
},
},
}
},
                            LoadBalancer = new LoadBalancerResourceNames()
                            {
                                LoadBalancerName = "dblb",
                                FrontendIPConfigurationNames =
{
"dbip"
},
                                BackendPoolNames =
{
"dbBackendPool"
},
                                HealthProbeNames =
{
"dbHealthProbe"
},
                            },
                        },
                        SharedStorage = new SharedStorageResourceNames()
                        {
                            SharedStorageAccountName = "storageacc",
                            SharedStorageAccountPrivateEndPointName = "peForxNFS",
                        },
                    },
                },
                OSSapConfiguration = new OSSapConfiguration()
                {
                    SapFqdn = "xyz.test.com",
                },
            })
            {
                Tags =
{
},
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Create Infrastructure (with OS configuration) with custom resource names for Single Server System
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreateInfrastructureWithOSConfigurationWithCustomResourceNamesForSingleServerSystem()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/stable/2023-04-01/examples/sapvirtualinstances/SAPVirtualInstances_Create_CustomFullResourceNames_SingleServer.json
            // this example is just showing the usage of "SAPVirtualInstances_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("westcentralus"), SapEnvironmentType.NonProd, SapProductType.S4Hana, new DeploymentWithOSConfiguration()
            {
                AppLocation = new AzureLocation("eastus"),
                InfrastructureConfiguration = new SingleServerConfiguration("X00-RG", new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet"), new SapVirtualMachineConfiguration("Standard_E32ds_v4", new SapImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "84sapha-gen2",
                    Version = "latest",
                }, new SapOSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new SapLinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshKeyPair = new SapSshKeyPair()
                        {
                            PublicKey = "abc",
                            PrivateKey = "xyz",
                        },
                    },
                }))
                {
                    IsSecondaryIPEnabled = true,
                    DatabaseType = SapDatabaseType.Hana,
                },
                OSSapConfiguration = new OSSapConfiguration()
                {
                    SapFqdn = "xyz.test.com",
                },
            })
            {
                Tags =
{
},
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Create Infrastructure only for Distributed System
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreateInfrastructureOnlyForDistributedSystem()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/stable/2023-04-01/examples/sapvirtualinstances/SAPVirtualInstances_Create_Distributed.json
            // this example is just showing the usage of "SAPVirtualInstances_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("westcentralus"), SapEnvironmentType.Prod, SapProductType.S4Hana, new DeploymentConfiguration()
            {
                AppLocation = new AzureLocation("eastus"),
                InfrastructureConfiguration = new ThreeTierConfiguration("X00-RG", new CentralServerConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet"), new SapVirtualMachineConfiguration("Standard_E16ds_v4", new SapImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "84sapha-gen2",
                    Version = "latest",
                }, new SapOSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new SapLinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshPublicKeys =
{
new SapSshPublicKey()
{
KeyData = "ssh-rsa public key",
}
},
                    },
                }), 1), new ApplicationServerConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet"), new SapVirtualMachineConfiguration("Standard_E32ds_v4", new SapImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "84sapha-gen2",
                    Version = "latest",
                }, new SapOSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new SapLinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshPublicKeys =
{
new SapSshPublicKey()
{
KeyData = "ssh-rsa public key",
}
},
                    },
                }), 6), new DatabaseConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/dbsubnet"), new SapVirtualMachineConfiguration("Standard_M32ts", new SapImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "84sapha-gen2",
                    Version = "latest",
                }, new SapOSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new SapLinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshPublicKeys =
{
new SapSshPublicKey()
{
KeyData = "ssh-rsa public key",
}
},
                    },
                }), 1)
                {
                    DatabaseType = SapDatabaseType.Hana,
                }),
            })
            {
                Tags =
{
},
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Create Infrastructure only for HA System with Availability Set
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreateInfrastructureOnlyForHASystemWithAvailabilitySet()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/stable/2023-04-01/examples/sapvirtualinstances/SAPVirtualInstances_Create_HA_AvSet.json
            // this example is just showing the usage of "SAPVirtualInstances_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("westcentralus"), SapEnvironmentType.Prod, SapProductType.S4Hana, new DeploymentConfiguration()
            {
                AppLocation = new AzureLocation("eastus"),
                InfrastructureConfiguration = new ThreeTierConfiguration("X00-RG", new CentralServerConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet"), new SapVirtualMachineConfiguration("Standard_E16ds_v4", new SapImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "84sapha-gen2",
                    Version = "latest",
                }, new SapOSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new SapLinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshPublicKeys =
{
new SapSshPublicKey()
{
KeyData = "ssh-rsa public key",
}
},
                    },
                }), 2), new ApplicationServerConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet"), new SapVirtualMachineConfiguration("Standard_E32ds_v4", new SapImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "84sapha-gen2",
                    Version = "latest",
                }, new SapOSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new SapLinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshPublicKeys =
{
new SapSshPublicKey()
{
KeyData = "ssh-rsa public key",
}
},
                    },
                }), 5), new DatabaseConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/dbsubnet"), new SapVirtualMachineConfiguration("Standard_M32ts", new SapImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "84sapha-gen2",
                    Version = "latest",
                }, new SapOSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new SapLinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshPublicKeys =
{
new SapSshPublicKey()
{
KeyData = "ssh-rsa public key",
}
},
                    },
                }), 2)
                {
                    DatabaseType = SapDatabaseType.Hana,
                })
                {
                    HighAvailabilityType = SapHighAvailabilityType.AvailabilitySet,
                },
            })
            {
                Tags =
{
},
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Create Infrastructure only for HA System with Availability Zone
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreateInfrastructureOnlyForHASystemWithAvailabilityZone()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/stable/2023-04-01/examples/sapvirtualinstances/SAPVirtualInstances_Create_HA_AvZone.json
            // this example is just showing the usage of "SAPVirtualInstances_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("westcentralus"), SapEnvironmentType.Prod, SapProductType.S4Hana, new DeploymentConfiguration()
            {
                AppLocation = new AzureLocation("eastus"),
                InfrastructureConfiguration = new ThreeTierConfiguration("X00-RG", new CentralServerConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet"), new SapVirtualMachineConfiguration("Standard_E16ds_v4", new SapImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "84sapha-gen2",
                    Version = "latest",
                }, new SapOSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new SapLinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshPublicKeys =
{
new SapSshPublicKey()
{
KeyData = "ssh-rsa public key",
}
},
                    },
                }), 2), new ApplicationServerConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet"), new SapVirtualMachineConfiguration("Standard_E32ds_v4", new SapImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "84sapha-gen2",
                    Version = "latest",
                }, new SapOSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new SapLinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshPublicKeys =
{
new SapSshPublicKey()
{
KeyData = "ssh-rsa public key",
}
},
                    },
                }), 6), new DatabaseConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/dbsubnet"), new SapVirtualMachineConfiguration("Standard_M32ts", new SapImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "84sapha-gen2",
                    Version = "latest",
                }, new SapOSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new SapLinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshPublicKeys =
{
new SapSshPublicKey()
{
KeyData = "ssh-rsa public key",
}
},
                    },
                }), 2)
                {
                    DatabaseType = SapDatabaseType.Hana,
                })
                {
                    HighAvailabilityType = SapHighAvailabilityType.AvailabilityZone,
                },
            })
            {
                Tags =
{
},
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Create Infrastructure only for Single Server System
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreateInfrastructureOnlyForSingleServerSystem()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/stable/2023-04-01/examples/sapvirtualinstances/SAPVirtualInstances_Create_SingleServer.json
            // this example is just showing the usage of "SAPVirtualInstances_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("westcentralus"), SapEnvironmentType.NonProd, SapProductType.S4Hana, new DeploymentConfiguration()
            {
                AppLocation = new AzureLocation("eastus"),
                InfrastructureConfiguration = new SingleServerConfiguration("X00-RG", new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet"), new SapVirtualMachineConfiguration("Standard_E32ds_v4", new SapImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "84sapha-gen2",
                    Version = "latest",
                }, new SapOSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new SapLinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshPublicKeys =
{
new SapSshPublicKey()
{
KeyData = "ssh-rsa public key",
}
},
                    },
                }))
                {
                    IsSecondaryIPEnabled = true,
                    DatabaseType = SapDatabaseType.Hana,
                },
            })
            {
                Tags =
{
},
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Create Infrastructure with Disk and OS configuration for Distributed System (Recommended)
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreateInfrastructureWithDiskAndOSConfigurationForDistributedSystemRecommended()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/stable/2023-04-01/examples/sapvirtualinstances/SAPVirtualInstances_Create_DiskDetails_Distributed.json
            // this example is just showing the usage of "SAPVirtualInstances_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("westcentralus"), SapEnvironmentType.Prod, SapProductType.S4Hana, new DeploymentWithOSConfiguration()
            {
                AppLocation = new AzureLocation("eastus"),
                InfrastructureConfiguration = new ThreeTierConfiguration("X00-RG", new CentralServerConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/dindurkhya-e2etesting/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet"), new SapVirtualMachineConfiguration("Standard_E16ds_v4", new SapImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "84sapha-gen2",
                    Version = "latest",
                }, new SapOSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new SapLinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshKeyPair = new SapSshKeyPair()
                        {
                            PublicKey = "abc",
                            PrivateKey = "xyz",
                        },
                    },
                }), 1), new ApplicationServerConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/dindurkhya-e2etesting/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet"), new SapVirtualMachineConfiguration("Standard_E32ds_v4", new SapImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "84sapha-gen2",
                    Version = "latest",
                }, new SapOSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new SapLinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshKeyPair = new SapSshKeyPair()
                        {
                            PublicKey = "abc",
                            PrivateKey = "xyz",
                        },
                    },
                }), 6), new DatabaseConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/dindurkhya-e2etesting/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/dbsubnet"), new SapVirtualMachineConfiguration("Standard_M32ts", new SapImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "84sapha-gen2",
                    Version = "latest",
                }, new SapOSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new SapLinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshKeyPair = new SapSshKeyPair()
                        {
                            PublicKey = "abc",
                            PrivateKey = "xyz",
                        },
                    },
                }), 1)
                {
                    DatabaseType = SapDatabaseType.Hana,
                    DiskVolumeConfigurations =
{
["backup"] = new DiskVolumeConfiguration()
{
Count = 2,
SizeInGB = 256,
SkuName = DiskDetailsDiskSkuName.StandardSsdLrs,
},
["hana/data"] = new DiskVolumeConfiguration()
{
Count = 4,
SizeInGB = 128,
SkuName = DiskDetailsDiskSkuName.PremiumLrs,
},
["hana/log"] = new DiskVolumeConfiguration()
{
Count = 3,
SizeInGB = 128,
SkuName = DiskDetailsDiskSkuName.PremiumLrs,
},
["hana/shared"] = new DiskVolumeConfiguration()
{
Count = 1,
SizeInGB = 256,
SkuName = DiskDetailsDiskSkuName.StandardSsdLrs,
},
["os"] = new DiskVolumeConfiguration()
{
Count = 1,
SizeInGB = 64,
SkuName = DiskDetailsDiskSkuName.StandardSsdLrs,
},
["usr/sap"] = new DiskVolumeConfiguration()
{
Count = 1,
SizeInGB = 128,
SkuName = DiskDetailsDiskSkuName.PremiumLrs,
},
},
                }),
                OSSapConfiguration = new OSSapConfiguration()
                {
                    SapFqdn = "xyz.test.com",
                },
            })
            {
                Tags =
{
},
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Create Infrastructure with Disk and OS configuration for HA System with Availability Set (Recommended)
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreateInfrastructureWithDiskAndOSConfigurationForHASystemWithAvailabilitySetRecommended()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/stable/2023-04-01/examples/sapvirtualinstances/SAPVirtualInstances_Create_DiskDetails_HA_AvSet.json
            // this example is just showing the usage of "SAPVirtualInstances_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("westcentralus"), SapEnvironmentType.Prod, SapProductType.S4Hana, new DeploymentWithOSConfiguration()
            {
                AppLocation = new AzureLocation("eastus"),
                InfrastructureConfiguration = new ThreeTierConfiguration("X00-RG", new CentralServerConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/dindurkhya-e2etesting/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet"), new SapVirtualMachineConfiguration("Standard_E16ds_v4", new SapImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "84sapha-gen2",
                    Version = "latest",
                }, new SapOSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new SapLinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshKeyPair = new SapSshKeyPair()
                        {
                            PublicKey = "abc",
                            PrivateKey = "xyz",
                        },
                    },
                }), 2), new ApplicationServerConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/dindurkhya-e2etesting/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet"), new SapVirtualMachineConfiguration("Standard_E32ds_v4", new SapImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "84sapha-gen2",
                    Version = "latest",
                }, new SapOSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new SapLinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshKeyPair = new SapSshKeyPair()
                        {
                            PublicKey = "abc",
                            PrivateKey = "xyz",
                        },
                    },
                }), 6), new DatabaseConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/dindurkhya-e2etesting/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/dbsubnet"), new SapVirtualMachineConfiguration("Standard_M32ts", new SapImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "84sapha-gen2",
                    Version = "latest",
                }, new SapOSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new SapLinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshKeyPair = new SapSshKeyPair()
                        {
                            PublicKey = "abc",
                            PrivateKey = "xyz",
                        },
                    },
                }), 2)
                {
                    DatabaseType = SapDatabaseType.Hana,
                    DiskVolumeConfigurations =
{
["backup"] = new DiskVolumeConfiguration()
{
Count = 2,
SizeInGB = 256,
SkuName = DiskDetailsDiskSkuName.StandardSsdLrs,
},
["hana/data"] = new DiskVolumeConfiguration()
{
Count = 4,
SizeInGB = 128,
SkuName = DiskDetailsDiskSkuName.PremiumLrs,
},
["hana/log"] = new DiskVolumeConfiguration()
{
Count = 3,
SizeInGB = 128,
SkuName = DiskDetailsDiskSkuName.PremiumLrs,
},
["hana/shared"] = new DiskVolumeConfiguration()
{
Count = 1,
SizeInGB = 256,
SkuName = DiskDetailsDiskSkuName.StandardSsdLrs,
},
["os"] = new DiskVolumeConfiguration()
{
Count = 1,
SizeInGB = 64,
SkuName = DiskDetailsDiskSkuName.StandardSsdLrs,
},
["usr/sap"] = new DiskVolumeConfiguration()
{
Count = 1,
SizeInGB = 128,
SkuName = DiskDetailsDiskSkuName.PremiumLrs,
},
},
                })
                {
                    HighAvailabilityType = SapHighAvailabilityType.AvailabilitySet,
                },
                OSSapConfiguration = new OSSapConfiguration()
                {
                    SapFqdn = "xyz.test.com",
                },
            })
            {
                Tags =
{
},
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Create Infrastructure with Disk and OS configuration for HA System with Availability Zone (Recommended)
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreateInfrastructureWithDiskAndOSConfigurationForHASystemWithAvailabilityZoneRecommended()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/stable/2023-04-01/examples/sapvirtualinstances/SAPVirtualInstances_Create_DiskDetails_HA_AvZone.json
            // this example is just showing the usage of "SAPVirtualInstances_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("westcentralus"), SapEnvironmentType.Prod, SapProductType.S4Hana, new DeploymentWithOSConfiguration()
            {
                AppLocation = new AzureLocation("eastus"),
                InfrastructureConfiguration = new ThreeTierConfiguration("X00-RG", new CentralServerConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/dindurkhya-e2etesting/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet"), new SapVirtualMachineConfiguration("Standard_E16ds_v4", new SapImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "84sapha-gen2",
                    Version = "latest",
                }, new SapOSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new SapLinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshKeyPair = new SapSshKeyPair()
                        {
                            PublicKey = "abc",
                            PrivateKey = "xyz",
                        },
                    },
                }), 2), new ApplicationServerConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/dindurkhya-e2etesting/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet"), new SapVirtualMachineConfiguration("Standard_E32ds_v4", new SapImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "84sapha-gen2",
                    Version = "latest",
                }, new SapOSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new SapLinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshKeyPair = new SapSshKeyPair()
                        {
                            PublicKey = "abc",
                            PrivateKey = "xyz",
                        },
                    },
                }), 6), new DatabaseConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/dindurkhya-e2etesting/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/dbsubnet"), new SapVirtualMachineConfiguration("Standard_M32ts", new SapImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "84sapha-gen2",
                    Version = "latest",
                }, new SapOSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new SapLinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshKeyPair = new SapSshKeyPair()
                        {
                            PublicKey = "abc",
                            PrivateKey = "xyz",
                        },
                    },
                }), 2)
                {
                    DatabaseType = SapDatabaseType.Hana,
                    DiskVolumeConfigurations =
{
["backup"] = new DiskVolumeConfiguration()
{
Count = 2,
SizeInGB = 256,
SkuName = DiskDetailsDiskSkuName.StandardSsdLrs,
},
["hana/data"] = new DiskVolumeConfiguration()
{
Count = 4,
SizeInGB = 128,
SkuName = DiskDetailsDiskSkuName.PremiumLrs,
},
["hana/log"] = new DiskVolumeConfiguration()
{
Count = 3,
SizeInGB = 128,
SkuName = DiskDetailsDiskSkuName.PremiumLrs,
},
["hana/shared"] = new DiskVolumeConfiguration()
{
Count = 1,
SizeInGB = 256,
SkuName = DiskDetailsDiskSkuName.StandardSsdLrs,
},
["os"] = new DiskVolumeConfiguration()
{
Count = 1,
SizeInGB = 64,
SkuName = DiskDetailsDiskSkuName.StandardSsdLrs,
},
["usr/sap"] = new DiskVolumeConfiguration()
{
Count = 1,
SizeInGB = 128,
SkuName = DiskDetailsDiskSkuName.PremiumLrs,
},
},
                })
                {
                    HighAvailabilityType = SapHighAvailabilityType.AvailabilityZone,
                },
                OSSapConfiguration = new OSSapConfiguration()
                {
                    SapFqdn = "xyz.test.com",
                },
            })
            {
                Tags =
{
},
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Create Infrastructure with Disk and OS configurations for Single Server System (Recommended)
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreateInfrastructureWithDiskAndOSConfigurationsForSingleServerSystemRecommended()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/stable/2023-04-01/examples/sapvirtualinstances/SAPVirtualInstances_Create_DiskDetails_SingleServer.json
            // this example is just showing the usage of "SAPVirtualInstances_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("westcentralus"), SapEnvironmentType.NonProd, SapProductType.S4Hana, new DeploymentWithOSConfiguration()
            {
                AppLocation = new AzureLocation("eastus"),
                InfrastructureConfiguration = new SingleServerConfiguration("X00-RG", new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/dindurkhya-e2etesting/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet"), new SapVirtualMachineConfiguration("Standard_E32ds_v4", new SapImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "84sapha-gen2",
                    Version = "latest",
                }, new SapOSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new SapLinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshKeyPair = new SapSshKeyPair()
                        {
                            PublicKey = "abc",
                            PrivateKey = "xyz",
                        },
                    },
                }))
                {
                    IsSecondaryIPEnabled = true,
                    DatabaseType = SapDatabaseType.Hana,
                    DiskVolumeConfigurations =
{
["backup"] = new DiskVolumeConfiguration()
{
Count = 2,
SizeInGB = 256,
SkuName = DiskDetailsDiskSkuName.StandardSsdLrs,
},
["hana/data"] = new DiskVolumeConfiguration()
{
Count = 4,
SizeInGB = 128,
SkuName = DiskDetailsDiskSkuName.PremiumLrs,
},
["hana/log"] = new DiskVolumeConfiguration()
{
Count = 3,
SizeInGB = 128,
SkuName = DiskDetailsDiskSkuName.PremiumLrs,
},
["hana/shared"] = new DiskVolumeConfiguration()
{
Count = 1,
SizeInGB = 256,
SkuName = DiskDetailsDiskSkuName.StandardSsdLrs,
},
["os"] = new DiskVolumeConfiguration()
{
Count = 1,
SizeInGB = 64,
SkuName = DiskDetailsDiskSkuName.StandardSsdLrs,
},
["usr/sap"] = new DiskVolumeConfiguration()
{
Count = 1,
SizeInGB = 128,
SkuName = DiskDetailsDiskSkuName.PremiumLrs,
},
},
                },
                OSSapConfiguration = new OSSapConfiguration()
                {
                    SapFqdn = "xyz.test.com",
                },
            })
            {
                Tags =
{
},
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Create Infrastructure with OS configuration for Distributed System (Recommended)
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreateInfrastructureWithOSConfigurationForDistributedSystemRecommended()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/stable/2023-04-01/examples/sapvirtualinstances/SAPVirtualInstances_Create_WithOSConfig_Distributed.json
            // this example is just showing the usage of "SAPVirtualInstances_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("westcentralus"), SapEnvironmentType.Prod, SapProductType.S4Hana, new DeploymentWithOSConfiguration()
            {
                AppLocation = new AzureLocation("eastus"),
                InfrastructureConfiguration = new ThreeTierConfiguration("X00-RG", new CentralServerConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet"), new SapVirtualMachineConfiguration("Standard_E16ds_v4", new SapImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "84sapha-gen2",
                    Version = "latest",
                }, new SapOSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new SapLinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshKeyPair = new SapSshKeyPair()
                        {
                            PublicKey = "abc",
                            PrivateKey = "xyz",
                        },
                    },
                }), 1), new ApplicationServerConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet"), new SapVirtualMachineConfiguration("Standard_E32ds_v4", new SapImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "84sapha-gen2",
                    Version = "latest",
                }, new SapOSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new SapLinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshKeyPair = new SapSshKeyPair()
                        {
                            PublicKey = "abc",
                            PrivateKey = "xyz",
                        },
                    },
                }), 6), new DatabaseConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/dbsubnet"), new SapVirtualMachineConfiguration("Standard_M32ts", new SapImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "84sapha-gen2",
                    Version = "latest",
                }, new SapOSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new SapLinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshKeyPair = new SapSshKeyPair()
                        {
                            PublicKey = "abc",
                            PrivateKey = "xyz",
                        },
                    },
                }), 1)
                {
                    DatabaseType = SapDatabaseType.Hana,
                }),
                OSSapConfiguration = new OSSapConfiguration()
                {
                    SapFqdn = "xyz.test.com",
                },
            })
            {
                Tags =
{
},
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Create Infrastructure with OS configuration for HA System with Availability Set (Recommended)
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreateInfrastructureWithOSConfigurationForHASystemWithAvailabilitySetRecommended()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/stable/2023-04-01/examples/sapvirtualinstances/SAPVirtualInstances_Create_WithOSConfig_HA_AvSet.json
            // this example is just showing the usage of "SAPVirtualInstances_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("westcentralus"), SapEnvironmentType.Prod, SapProductType.S4Hana, new DeploymentWithOSConfiguration()
            {
                AppLocation = new AzureLocation("eastus"),
                InfrastructureConfiguration = new ThreeTierConfiguration("X00-RG", new CentralServerConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet"), new SapVirtualMachineConfiguration("Standard_E16ds_v4", new SapImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "84sapha-gen2",
                    Version = "latest",
                }, new SapOSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new SapLinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshKeyPair = new SapSshKeyPair()
                        {
                            PublicKey = "abc",
                            PrivateKey = "xyz",
                        },
                    },
                }), 2), new ApplicationServerConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet"), new SapVirtualMachineConfiguration("Standard_E32ds_v4", new SapImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "84sapha-gen2",
                    Version = "latest",
                }, new SapOSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new SapLinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshKeyPair = new SapSshKeyPair()
                        {
                            PublicKey = "abc",
                            PrivateKey = "xyz",
                        },
                    },
                }), 6), new DatabaseConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/dbsubnet"), new SapVirtualMachineConfiguration("Standard_M32ts", new SapImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "84sapha-gen2",
                    Version = "latest",
                }, new SapOSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new SapLinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshKeyPair = new SapSshKeyPair()
                        {
                            PublicKey = "abc",
                            PrivateKey = "xyz",
                        },
                    },
                }), 2)
                {
                    DatabaseType = SapDatabaseType.Hana,
                })
                {
                    HighAvailabilityType = SapHighAvailabilityType.AvailabilitySet,
                },
                OSSapConfiguration = new OSSapConfiguration()
                {
                    SapFqdn = "xyz.test.com",
                },
            })
            {
                Tags =
{
},
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Create Infrastructure with OS configuration for HA System with Availability Zone (Recommended)
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreateInfrastructureWithOSConfigurationForHASystemWithAvailabilityZoneRecommended()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/stable/2023-04-01/examples/sapvirtualinstances/SAPVirtualInstances_Create_WithOSConfig_HA_AvZone.json
            // this example is just showing the usage of "SAPVirtualInstances_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("westcentralus"), SapEnvironmentType.Prod, SapProductType.S4Hana, new DeploymentWithOSConfiguration()
            {
                AppLocation = new AzureLocation("eastus"),
                InfrastructureConfiguration = new ThreeTierConfiguration("X00-RG", new CentralServerConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet"), new SapVirtualMachineConfiguration("Standard_E16ds_v4", new SapImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "84sapha-gen2",
                    Version = "latest",
                }, new SapOSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new SapLinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshKeyPair = new SapSshKeyPair()
                        {
                            PublicKey = "abc",
                            PrivateKey = "xyz",
                        },
                    },
                }), 2), new ApplicationServerConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet"), new SapVirtualMachineConfiguration("Standard_E32ds_v4", new SapImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "84sapha-gen2",
                    Version = "latest",
                }, new SapOSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new SapLinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshKeyPair = new SapSshKeyPair()
                        {
                            PublicKey = "abc",
                            PrivateKey = "xyz",
                        },
                    },
                }), 6), new DatabaseConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/dbsubnet"), new SapVirtualMachineConfiguration("Standard_M32ts", new SapImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "84sapha-gen2",
                    Version = "latest",
                }, new SapOSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new SapLinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshKeyPair = new SapSshKeyPair()
                        {
                            PublicKey = "abc",
                            PrivateKey = "xyz",
                        },
                    },
                }), 2)
                {
                    DatabaseType = SapDatabaseType.Hana,
                })
                {
                    HighAvailabilityType = SapHighAvailabilityType.AvailabilityZone,
                },
                OSSapConfiguration = new OSSapConfiguration()
                {
                    SapFqdn = "xyz.test.com",
                },
            })
            {
                Tags =
{
},
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Create Infrastructure with OS configuration for Single Server System (Recommended)
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreateInfrastructureWithOSConfigurationForSingleServerSystemRecommended()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/stable/2023-04-01/examples/sapvirtualinstances/SAPVirtualInstances_Create_WithOSConfig_SingleServer.json
            // this example is just showing the usage of "SAPVirtualInstances_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("westcentralus"), SapEnvironmentType.NonProd, SapProductType.S4Hana, new DeploymentWithOSConfiguration()
            {
                AppLocation = new AzureLocation("eastus"),
                InfrastructureConfiguration = new SingleServerConfiguration("X00-RG", new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet"), new SapVirtualMachineConfiguration("Standard_E32ds_v4", new SapImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "84sapha-gen2",
                    Version = "latest",
                }, new SapOSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new SapLinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshKeyPair = new SapSshKeyPair()
                        {
                            PublicKey = "abc",
                            PrivateKey = "xyz",
                        },
                    },
                }))
                {
                    IsSecondaryIPEnabled = true,
                    DatabaseType = SapDatabaseType.Hana,
                },
                OSSapConfiguration = new OSSapConfiguration()
                {
                    SapFqdn = "xyz.test.com",
                },
            })
            {
                Tags =
{
},
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Create Infrastructure with a new SAP Transport Directory Fileshare
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreateInfrastructureWithANewSAPTransportDirectoryFileshare()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/stable/2023-04-01/examples/sapvirtualinstances/SAPVirtualInstances_Create_Distributed_CreateTransport.json
            // this example is just showing the usage of "SAPVirtualInstances_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("westcentralus"), SapEnvironmentType.Prod, SapProductType.S4Hana, new DeploymentWithOSConfiguration()
            {
                AppLocation = new AzureLocation("eastus"),
                InfrastructureConfiguration = new ThreeTierConfiguration("X00-RG", new CentralServerConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet"), new SapVirtualMachineConfiguration("Standard_E16ds_v4", new SapImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "84sapha-gen2",
                    Version = "latest",
                }, new SapOSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new SapLinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshKeyPair = new SapSshKeyPair()
                        {
                            PublicKey = "abc",
                            PrivateKey = "xyz",
                        },
                    },
                }), 1), new ApplicationServerConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet"), new SapVirtualMachineConfiguration("Standard_E32ds_v4", new SapImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "84sapha-gen2",
                    Version = "latest",
                }, new SapOSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new SapLinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshKeyPair = new SapSshKeyPair()
                        {
                            PublicKey = "abc",
                            PrivateKey = "xyz",
                        },
                    },
                }), 6), new DatabaseConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/dbsubnet"), new SapVirtualMachineConfiguration("Standard_M32ts", new SapImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "84sapha-gen2",
                    Version = "latest",
                }, new SapOSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new SapLinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshKeyPair = new SapSshKeyPair()
                        {
                            PublicKey = "abc",
                            PrivateKey = "xyz",
                        },
                    },
                }), 1)
                {
                    DatabaseType = SapDatabaseType.Hana,
                })
                {
                    StorageTransportFileShareConfiguration = new CreateAndMountFileShareConfiguration()
                    {
                        ResourceGroup = "rgName",
                        StorageAccountName = "storageName",
                    },
                },
                OSSapConfiguration = new OSSapConfiguration()
                {
                    SapFqdn = "xyz.test.com",
                },
            })
            {
                Tags =
{
},
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Create Infrastructure with an existing SAP Transport Directory Fileshare
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreateInfrastructureWithAnExistingSAPTransportDirectoryFileshare()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/stable/2023-04-01/examples/sapvirtualinstances/SAPVirtualInstances_Create_Distributed_MountTransport.json
            // this example is just showing the usage of "SAPVirtualInstances_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("westcentralus"), SapEnvironmentType.Prod, SapProductType.S4Hana, new DeploymentWithOSConfiguration()
            {
                AppLocation = new AzureLocation("eastus"),
                InfrastructureConfiguration = new ThreeTierConfiguration("X00-RG", new CentralServerConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet"), new SapVirtualMachineConfiguration("Standard_E16ds_v4", new SapImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "84sapha-gen2",
                    Version = "latest",
                }, new SapOSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new SapLinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshKeyPair = new SapSshKeyPair()
                        {
                            PublicKey = "abc",
                            PrivateKey = "xyz",
                        },
                    },
                }), 1), new ApplicationServerConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet"), new SapVirtualMachineConfiguration("Standard_E32ds_v4", new SapImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "84sapha-gen2",
                    Version = "latest",
                }, new SapOSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new SapLinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshKeyPair = new SapSshKeyPair()
                        {
                            PublicKey = "abc",
                            PrivateKey = "xyz",
                        },
                    },
                }), 6), new DatabaseConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/dbsubnet"), new SapVirtualMachineConfiguration("Standard_M32ts", new SapImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "84sapha-gen2",
                    Version = "latest",
                }, new SapOSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new SapLinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshKeyPair = new SapSshKeyPair()
                        {
                            PublicKey = "abc",
                            PrivateKey = "xyz",
                        },
                    },
                }), 1)
                {
                    DatabaseType = SapDatabaseType.Hana,
                })
                {
                    StorageTransportFileShareConfiguration = new MountFileShareConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e888-4c46-a868-1936802b762c/resourceGroups/testrg/providers/Microsoft.Network/privateEndpoints/endpoint"), new ResourceIdentifier("/subscriptions/49d64d54-e888-4c46-a868-1936802b762c/resourceGroups/testrg/providers/Microsoft.Network/privateEndpoints/endpoint")),
                },
                OSSapConfiguration = new OSSapConfiguration()
                {
                    SapFqdn = "xyz.test.com",
                },
            })
            {
                Tags =
{
},
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Create Infrastructure without a SAP Transport Directory Fileshare
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_CreateInfrastructureWithoutASAPTransportDirectoryFileshare()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/stable/2023-04-01/examples/sapvirtualinstances/SAPVirtualInstances_Create_Distributed_SkipTransport.json
            // this example is just showing the usage of "SAPVirtualInstances_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("westcentralus"), SapEnvironmentType.Prod, SapProductType.S4Hana, new DeploymentWithOSConfiguration()
            {
                AppLocation = new AzureLocation("eastus"),
                InfrastructureConfiguration = new ThreeTierConfiguration("X00-RG", new CentralServerConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet"), new SapVirtualMachineConfiguration("Standard_E16ds_v4", new SapImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "84sapha-gen2",
                    Version = "latest",
                }, new SapOSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new SapLinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshKeyPair = new SapSshKeyPair()
                        {
                            PublicKey = "abc",
                            PrivateKey = "xyz",
                        },
                    },
                }), 1), new ApplicationServerConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet"), new SapVirtualMachineConfiguration("Standard_E32ds_v4", new SapImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "84sapha-gen2",
                    Version = "latest",
                }, new SapOSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new SapLinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshKeyPair = new SapSshKeyPair()
                        {
                            PublicKey = "abc",
                            PrivateKey = "xyz",
                        },
                    },
                }), 6), new DatabaseConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/dbsubnet"), new SapVirtualMachineConfiguration("Standard_M32ts", new SapImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "84sapha-gen2",
                    Version = "latest",
                }, new SapOSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new SapLinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshKeyPair = new SapSshKeyPair()
                        {
                            PublicKey = "abc",
                            PrivateKey = "xyz",
                        },
                    },
                }), 1)
                {
                    DatabaseType = SapDatabaseType.Hana,
                })
                {
                    StorageTransportFileShareConfiguration = new SkipFileShareConfiguration(),
                },
                OSSapConfiguration = new OSSapConfiguration()
                {
                    SapFqdn = "xyz.test.com",
                },
            })
            {
                Tags =
{
},
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Detect SAP Software Installation on a Distributed System
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_DetectSAPSoftwareInstallationOnADistributedSystem()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/stable/2023-04-01/examples/sapvirtualinstances/SAPVirtualInstances_DetectInstallation_Distributed.json
            // this example is just showing the usage of "SAPVirtualInstances_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("eastus2"), SapEnvironmentType.Prod, SapProductType.S4Hana, new DeploymentWithOSConfiguration()
            {
                AppLocation = new AzureLocation("eastus"),
                InfrastructureConfiguration = new ThreeTierConfiguration("{{resourcegrp}}", new CentralServerConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/app"), new SapVirtualMachineConfiguration("Standard_E4ds_v4", new SapImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP-HA",
                    Sku = "84sapha-gen2",
                    Version = "latest",
                }, new SapOSProfile()
                {
                    AdminUsername = "azureuser",
                    OSConfiguration = new SapLinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshKeyPair = new SapSshKeyPair()
                        {
                            PublicKey = "{{sshkey}}",
                            PrivateKey = "{{privateKey}}",
                        },
                    },
                }), 1), new ApplicationServerConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/app"), new SapVirtualMachineConfiguration("Standard_E4ds_v4", new SapImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP-HA",
                    Sku = "84sapha-gen2",
                    Version = "latest",
                }, new SapOSProfile()
                {
                    AdminUsername = "azureuser",
                    OSConfiguration = new SapLinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshKeyPair = new SapSshKeyPair()
                        {
                            PublicKey = "{{sshkey}}",
                            PrivateKey = "{{privateKey}}",
                        },
                    },
                }), 2), new DatabaseConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/app"), new SapVirtualMachineConfiguration("Standard_M32ts", new SapImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP-HA",
                    Sku = "84sapha-gen2",
                    Version = "latest",
                }, new SapOSProfile()
                {
                    AdminUsername = "azureuser",
                    OSConfiguration = new SapLinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshKeyPair = new SapSshKeyPair()
                        {
                            PublicKey = "{{sshkey}}",
                            PrivateKey = "{{privateKey}}",
                        },
                    },
                }), 1))
                {
                    IsSecondaryIPEnabled = true,
                },
                SoftwareConfiguration = new ExternalInstallationSoftwareConfiguration()
                {
                    CentralServerVmId = new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Compute/virtualMachines/sapq20scsvm0"),
                },
                OSSapConfiguration = new OSSapConfiguration()
                {
                    SapFqdn = "sap.bpaas.com",
                },
            })
            {
                Tags =
{
["created by"] = "azureuser",
},
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Detect SAP Software Installation on a Single Server System
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_DetectSAPSoftwareInstallationOnASingleServerSystem()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/stable/2023-04-01/examples/sapvirtualinstances/SAPVirtualInstances_DetectInstallation_SingleServer.json
            // this example is just showing the usage of "SAPVirtualInstances_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("westcentralus"), SapEnvironmentType.NonProd, SapProductType.S4Hana, new DeploymentWithOSConfiguration()
            {
                AppLocation = new AzureLocation("eastus"),
                InfrastructureConfiguration = new SingleServerConfiguration("X00-RG", new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet"), new SapVirtualMachineConfiguration("Standard_E32ds_v4", new SapImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP-HA",
                    Sku = "84sapha-gen2",
                    Version = "latest",
                }, new SapOSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new SapLinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshKeyPair = new SapSshKeyPair()
                        {
                            PublicKey = "abc",
                            PrivateKey = "xyz",
                        },
                    },
                }))
                {
                    IsSecondaryIPEnabled = true,
                    DatabaseType = SapDatabaseType.Hana,
                },
                SoftwareConfiguration = new ExternalInstallationSoftwareConfiguration()
                {
                    CentralServerVmId = new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Compute/virtualMachines/sapq20scsvm0"),
                },
                OSSapConfiguration = new OSSapConfiguration()
                {
                    SapFqdn = "xyz.test.com",
                },
            })
            {
                Tags =
{
},
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Detect SAP Software Installation on an HA System with Availability Set
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_DetectSAPSoftwareInstallationOnAnHASystemWithAvailabilitySet()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/stable/2023-04-01/examples/sapvirtualinstances/SAPVirtualInstances_DetectInstallation_HA_AvSet.json
            // this example is just showing the usage of "SAPVirtualInstances_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("westcentralus"), SapEnvironmentType.Prod, SapProductType.S4Hana, new DeploymentWithOSConfiguration()
            {
                AppLocation = new AzureLocation("eastus"),
                InfrastructureConfiguration = new ThreeTierConfiguration("X00-RG", new CentralServerConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet"), new SapVirtualMachineConfiguration("Standard_E16ds_v4", new SapImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP-HA",
                    Sku = "84sapha-gen2",
                    Version = "latest",
                }, new SapOSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new SapLinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshKeyPair = new SapSshKeyPair()
                        {
                            PublicKey = "abc",
                            PrivateKey = "xyz",
                        },
                    },
                }), 2), new ApplicationServerConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet"), new SapVirtualMachineConfiguration("Standard_E32ds_v4", new SapImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP-HA",
                    Sku = "84sapha-gen2",
                    Version = "latest",
                }, new SapOSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new SapLinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshKeyPair = new SapSshKeyPair()
                        {
                            PublicKey = "abc",
                            PrivateKey = "xyz",
                        },
                    },
                }), 6), new DatabaseConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/dbsubnet"), new SapVirtualMachineConfiguration("Standard_M32ts", new SapImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP-HA",
                    Sku = "84sapha-gen2",
                    Version = "latest",
                }, new SapOSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new SapLinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshKeyPair = new SapSshKeyPair()
                        {
                            PublicKey = "abc",
                            PrivateKey = "xyz",
                        },
                    },
                }), 2)
                {
                    DatabaseType = SapDatabaseType.Hana,
                })
                {
                    HighAvailabilityType = SapHighAvailabilityType.AvailabilitySet,
                },
                SoftwareConfiguration = new ExternalInstallationSoftwareConfiguration()
                {
                    CentralServerVmId = new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Compute/virtualMachines/sapq20scsvm0"),
                },
                OSSapConfiguration = new OSSapConfiguration()
                {
                    SapFqdn = "xyz.test.com",
                },
            })
            {
                Tags =
{
},
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Detect SAP Software Installation on an HA System with Availability Zone
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_DetectSAPSoftwareInstallationOnAnHASystemWithAvailabilityZone()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/stable/2023-04-01/examples/sapvirtualinstances/SAPVirtualInstances_DetectInstallation_HA_AvZone.json
            // this example is just showing the usage of "SAPVirtualInstances_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("westcentralus"), SapEnvironmentType.Prod, SapProductType.S4Hana, new DeploymentWithOSConfiguration()
            {
                AppLocation = new AzureLocation("eastus"),
                InfrastructureConfiguration = new ThreeTierConfiguration("X00-RG", new CentralServerConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet"), new SapVirtualMachineConfiguration("Standard_E16ds_v4", new SapImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP-HA",
                    Sku = "84sapha-gen2",
                    Version = "latest",
                }, new SapOSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new SapLinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshKeyPair = new SapSshKeyPair()
                        {
                            PublicKey = "abc",
                            PrivateKey = "xyz",
                        },
                    },
                }), 2), new ApplicationServerConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet"), new SapVirtualMachineConfiguration("Standard_E32ds_v4", new SapImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP-HA",
                    Sku = "84sapha-gen2",
                    Version = "latest",
                }, new SapOSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new SapLinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshKeyPair = new SapSshKeyPair()
                        {
                            PublicKey = "abc",
                            PrivateKey = "xyz",
                        },
                    },
                }), 6), new DatabaseConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/dbsubnet"), new SapVirtualMachineConfiguration("Standard_M32ts", new SapImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP-HA",
                    Sku = "84sapha-gen2",
                    Version = "latest",
                }, new SapOSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new SapLinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshKeyPair = new SapSshKeyPair()
                        {
                            PublicKey = "abc",
                            PrivateKey = "xyz",
                        },
                    },
                }), 2)
                {
                    DatabaseType = SapDatabaseType.Hana,
                })
                {
                    HighAvailabilityType = SapHighAvailabilityType.AvailabilityZone,
                },
                SoftwareConfiguration = new ExternalInstallationSoftwareConfiguration()
                {
                    CentralServerVmId = new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/test-rg/providers/Microsoft.Compute/virtualMachines/sapq20scsvm0"),
                },
                OSSapConfiguration = new OSSapConfiguration()
                {
                    SapFqdn = "xyz.test.com",
                },
            })
            {
                Tags =
{
},
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Install SAP Software on Distributed System
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_InstallSAPSoftwareOnDistributedSystem()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/stable/2023-04-01/examples/sapvirtualinstances/SAPVirtualInstances_Install_Distributed.json
            // this example is just showing the usage of "SAPVirtualInstances_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("eastus2"), SapEnvironmentType.Prod, SapProductType.S4Hana, new DeploymentWithOSConfiguration()
            {
                AppLocation = new AzureLocation("eastus"),
                InfrastructureConfiguration = new ThreeTierConfiguration("{{resourcegrp}}", new CentralServerConfiguration(new ResourceIdentifier("/subscriptions/8e17e36c-42e9-4cd5-a078-7b44883414e0/resourceGroups/test-rg/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/app"), new SapVirtualMachineConfiguration("Standard_E4ds_v4", new SapImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP-HA",
                    Sku = "8.2",
                    Version = "8.2.2021091201",
                }, new SapOSProfile()
                {
                    AdminUsername = "azureuser",
                    OSConfiguration = new SapLinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshKeyPair = new SapSshKeyPair()
                        {
                            PublicKey = "{{sshkey}}",
                            PrivateKey = "{{privateKey}}",
                        },
                    },
                }), 1), new ApplicationServerConfiguration(new ResourceIdentifier("/subscriptions/8e17e36c-42e9-4cd5-a078-7b44883414e0/resourceGroups/test-rg/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/app"), new SapVirtualMachineConfiguration("Standard_E4ds_v4", new SapImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP-HA",
                    Sku = "8.2",
                    Version = "8.2.2021091201",
                }, new SapOSProfile()
                {
                    AdminUsername = "azureuser",
                    OSConfiguration = new SapLinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshKeyPair = new SapSshKeyPair()
                        {
                            PublicKey = "{{sshkey}}",
                            PrivateKey = "{{privateKey}}",
                        },
                    },
                }), 2), new DatabaseConfiguration(new ResourceIdentifier("/subscriptions/8e17e36c-42e9-4cd5-a078-7b44883414e0/resourceGroups/test-rg/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/app"), new SapVirtualMachineConfiguration("Standard_M32ts", new SapImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP-HA",
                    Sku = "8.2",
                    Version = "8.2.2021091201",
                }, new SapOSProfile()
                {
                    AdminUsername = "azureuser",
                    OSConfiguration = new SapLinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshKeyPair = new SapSshKeyPair()
                        {
                            PublicKey = "{{sshkey}}",
                            PrivateKey = "{{privateKey}}",
                        },
                    },
                }), 1))
                {
                    IsSecondaryIPEnabled = true,
                },
                SoftwareConfiguration = new SapInstallWithoutOSConfigSoftwareConfiguration(new Uri("https://teststorageaccount.blob.core.windows.net/sapbits/sapfiles/boms/S41909SPS03_v0011ms/S41909SPS03_v0011ms.yaml"), "/subscriptions/8e17e36c-42e9-4cd5-a078-7b44883414e0/resourceGroups/test-rg/providers/Microsoft.Storage/storageAccounts/teststorageaccount", "SAP S/4HANA 1909 SPS 03"),
                OSSapConfiguration = new OSSapConfiguration()
                {
                    SapFqdn = "sap.bpaas.com",
                },
            })
            {
                Tags =
{
["created by"] = "azureuser",
},
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Install SAP Software on Single Server System
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_InstallSAPSoftwareOnSingleServerSystem()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/stable/2023-04-01/examples/sapvirtualinstances/SAPVirtualInstances_Install_SingleServer.json
            // this example is just showing the usage of "SAPVirtualInstances_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("eastus2"), SapEnvironmentType.NonProd, SapProductType.S4Hana, new DeploymentWithOSConfiguration()
            {
                AppLocation = new AzureLocation("eastus"),
                InfrastructureConfiguration = new SingleServerConfiguration("test-rg", new ResourceIdentifier("/subscriptions/8e17e36c-42e9-4cd5-a078-7b44883414e0/resourceGroups/test-rg/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/testsubnet"), new SapVirtualMachineConfiguration("Standard_E32ds_v4", new SapImageReference()
                {
                    Publisher = "SUSE",
                    Offer = "SLES-SAP",
                    Sku = "12-sp4-gen2",
                    Version = "2022.02.01",
                }, new SapOSProfile()
                {
                    AdminUsername = "azureappadmin",
                    OSConfiguration = new SapLinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshKeyPair = new SapSshKeyPair()
                        {
                            PublicKey = "{{sshkey}}",
                            PrivateKey = "{{privateKey}}",
                        },
                    },
                })),
                SoftwareConfiguration = new SapInstallWithoutOSConfigSoftwareConfiguration(new Uri("https://teststorageaccount.blob.core.windows.net/sapbits/sapfiles/boms/S41909SPS03_v0011ms/S41909SPS03_v0011ms.yaml"), "/subscriptions/8e17e36c-42e9-4cd5-a078-7b44883414e0/resourceGroups/test-rg/providers/Microsoft.Storage/storageAccounts/teststorageaccount", "SAP S/4HANA 1909 SPS 03"),
                OSSapConfiguration = new OSSapConfiguration()
                {
                    SapFqdn = "sap.bpaas.com",
                },
            })
            {
                Tags =
{
},
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Register existing SAP system as Virtual Instance for SAP solutions with optional customizations.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_RegisterExistingSAPSystemAsVirtualInstanceForSAPSolutionsWithOptionalCustomizations()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/stable/2023-04-01/examples/sapvirtualinstances/SAPVirtualInstances_Create_Discover_CustomMrgStorageAccountName.json
            // this example is just showing the usage of "SAPVirtualInstances_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("northeurope"), SapEnvironmentType.NonProd, SapProductType.S4Hana, new DiscoveryConfiguration()
            {
                CentralServerVmId = new ResourceIdentifier("/subscriptions/8e17e36c-42e9-4cd5-a078-7b44883414e0/resourceGroups/test-rg/providers/Microsoft.Compute/virtualMachines/sapq20scsvm0"),
                ManagedRgStorageAccountName = "q20saacssgrs",
            })
            {
                Tags =
{
["createdby"] = "abc@microsoft.com",
["test"] = "abc",
},
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // Register existing SAP system as Virtual Instance for SAP solutions.
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_RegisterExistingSAPSystemAsVirtualInstanceForSAPSolutions()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/stable/2023-04-01/examples/sapvirtualinstances/SAPVirtualInstances_Create_Discover.json
            // this example is just showing the usage of "SAPVirtualInstances_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("northeurope"), SapEnvironmentType.NonProd, SapProductType.S4Hana, new DiscoveryConfiguration()
            {
                CentralServerVmId = new ResourceIdentifier("/subscriptions/8e17e36c-42e9-4cd5-a078-7b44883414e0/resourceGroups/test-rg/providers/Microsoft.Compute/virtualMachines/sapq20scsvm0"),
            })
            {
                Tags =
{
["createdby"] = "abc@microsoft.com",
["test"] = "abc",
},
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // SAPVirtualInstances_Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_SAPVirtualInstancesGet()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/stable/2023-04-01/examples/sapvirtualinstances/SAPVirtualInstances_Get.json
            // this example is just showing the usage of "SAPVirtualInstances_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceResource result = await collection.GetAsync(sapVirtualInstanceName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // SAPVirtualInstances_Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_SAPVirtualInstancesGet()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/stable/2023-04-01/examples/sapvirtualinstances/SAPVirtualInstances_Get.json
            // this example is just showing the usage of "SAPVirtualInstances_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            bool result = await collection.ExistsAsync(sapVirtualInstanceName);

            Console.WriteLine($"Succeeded: {result}");
        }

        // SAPVirtualInstances_Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetIfExists_SAPVirtualInstancesGet()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/stable/2023-04-01/examples/sapvirtualinstances/SAPVirtualInstances_Get.json
            // this example is just showing the usage of "SAPVirtualInstances_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            NullableResponse<SapVirtualInstanceResource> response = await collection.GetIfExistsAsync(sapVirtualInstanceName);
            SapVirtualInstanceResource result = response.HasValue ? response.Value : null;

            if (result == null)
            {
                Console.WriteLine($"Succeeded with null as result");
            }
            else
            {
                // the variable result is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                SapVirtualInstanceData resourceData = result.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }
        }

        // SAPVirtualInstances_ListByResourceGroup
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_SAPVirtualInstancesListByResourceGroup()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/stable/2023-04-01/examples/sapvirtualinstances/SAPVirtualInstances_ListByResourceGroup.json
            // this example is just showing the usage of "SAPVirtualInstances_ListByResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "6d875e77-e412-4d7d-9af4-8895278b4443";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation and iterate over the result
            await foreach (SapVirtualInstanceResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                SapVirtualInstanceData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }
    }
}
