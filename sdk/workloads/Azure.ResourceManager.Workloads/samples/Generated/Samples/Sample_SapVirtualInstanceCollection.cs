// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Identity;
using Azure.ResourceManager;
using Azure.ResourceManager.Resources;
using Azure.ResourceManager.Workloads;
using Azure.ResourceManager.Workloads.Models;

namespace Azure.ResourceManager.Workloads.Samples
{
    public partial class Sample_SapVirtualInstanceCollection
    {
        // SAPVirtualInstances_Create_Distributed
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_SAPVirtualInstancesCreateDistributed()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/preview/2021-12-01-preview/examples/sapvirtualinstances/SAPVirtualInstances_Create_Distributed.json
            // this example is just showing the usage of "SAPVirtualInstances_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("westcentralus"), SapEnvironmentType.Prod, SapProductType.S4Hana, new DeploymentConfiguration()
            {
                AppLocation = new AzureLocation("eastus"),
                InfrastructureConfiguration = new ThreeTierConfiguration("X00-RG", new CentralServerConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/dindurkhya-e2etesting/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet"), new VirtualMachineConfiguration("Standard_E16ds_v4", new ImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "7.4",
                    Version = "7.4.2019062505",
                }, new OSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new LinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshPublicKeys =
{
new SshPublicKey()
{
KeyData = "ssh-rsa public key",
}
},
                    },
                }), 1), new ApplicationServerConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/dindurkhya-e2etesting/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet"), new VirtualMachineConfiguration("Standard_E32ds_v4", new ImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "7.4",
                    Version = "7.4.2019062505",
                }, new OSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new LinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshPublicKeys =
{
new SshPublicKey()
{
KeyData = "ssh-rsa public key",
}
},
                    },
                }), 6), new DatabaseConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/dindurkhya-e2etesting/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/dbsubnet"), new VirtualMachineConfiguration("Standard_M32ts", new ImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "7.4",
                    Version = "7.4.2019062505",
                }, new OSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new LinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshPublicKeys =
{
new SshPublicKey()
{
KeyData = "ssh-rsa public key",
}
},
                    },
                }), 1)
                {
                    DatabaseType = SapDatabaseType.Hana,
                }),
            })
            {
                Tags =
{
},
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // SAPVirtualInstances_Create_HA_AvSet
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_SAPVirtualInstancesCreateHAAvSet()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/preview/2021-12-01-preview/examples/sapvirtualinstances/SAPVirtualInstances_Create_HA_AvSet.json
            // this example is just showing the usage of "SAPVirtualInstances_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("westcentralus"), SapEnvironmentType.Prod, SapProductType.S4Hana, new DeploymentConfiguration()
            {
                AppLocation = new AzureLocation("eastus"),
                InfrastructureConfiguration = new ThreeTierConfiguration("X00-RG", new CentralServerConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/dindurkhya-e2etesting/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet"), new VirtualMachineConfiguration("Standard_E16ds_v4", new ImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "7.4",
                    Version = "7.4.2019062505",
                }, new OSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new LinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshPublicKeys =
{
new SshPublicKey()
{
KeyData = "ssh-rsa public key",
}
},
                    },
                }), 2), new ApplicationServerConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/dindurkhya-e2etesting/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet"), new VirtualMachineConfiguration("Standard_E32ds_v4", new ImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "7.4",
                    Version = "7.4.2019062505",
                }, new OSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new LinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshPublicKeys =
{
new SshPublicKey()
{
KeyData = "ssh-rsa public key",
}
},
                    },
                }), 5), new DatabaseConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/dindurkhya-e2etesting/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/dbsubnet"), new VirtualMachineConfiguration("Standard_M32ts", new ImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "7.4",
                    Version = "7.4.2019062505",
                }, new OSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new LinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshPublicKeys =
{
new SshPublicKey()
{
KeyData = "ssh-rsa public key",
}
},
                    },
                }), 2)
                {
                    DatabaseType = SapDatabaseType.Hana,
                })
                {
                    HighAvailabilityType = SapHighAvailabilityType.AvailabilitySet,
                },
            })
            {
                Tags =
{
},
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // SAPVirtualInstances_Create_HA_AvZone
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_SAPVirtualInstancesCreateHAAvZone()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/preview/2021-12-01-preview/examples/sapvirtualinstances/SAPVirtualInstances_Create_HA_AvZone.json
            // this example is just showing the usage of "SAPVirtualInstances_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("westcentralus"), SapEnvironmentType.Prod, SapProductType.S4Hana, new DeploymentConfiguration()
            {
                AppLocation = new AzureLocation("eastus"),
                InfrastructureConfiguration = new ThreeTierConfiguration("X00-RG", new CentralServerConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/dindurkhya-e2etesting/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet"), new VirtualMachineConfiguration("Standard_E16ds_v4", new ImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "7.4",
                    Version = "7.4.2019062505",
                }, new OSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new LinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshPublicKeys =
{
new SshPublicKey()
{
KeyData = "ssh-rsa public key",
}
},
                    },
                }), 2), new ApplicationServerConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/dindurkhya-e2etesting/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet"), new VirtualMachineConfiguration("Standard_E32ds_v4", new ImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "7.4",
                    Version = "7.4.2019062505",
                }, new OSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new LinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshPublicKeys =
{
new SshPublicKey()
{
KeyData = "ssh-rsa public key",
}
},
                    },
                }), 6), new DatabaseConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/dindurkhya-e2etesting/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/dbsubnet"), new VirtualMachineConfiguration("Standard_M32ts", new ImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "7.4",
                    Version = "7.4.2019062505",
                }, new OSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new LinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshPublicKeys =
{
new SshPublicKey()
{
KeyData = "ssh-rsa public key",
}
},
                    },
                }), 2)
                {
                    DatabaseType = SapDatabaseType.Hana,
                })
                {
                    HighAvailabilityType = SapHighAvailabilityType.AvailabilityZone,
                },
            })
            {
                Tags =
{
},
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // SAPVirtualInstances_Create_SingleServer
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_SAPVirtualInstancesCreateSingleServer()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/preview/2021-12-01-preview/examples/sapvirtualinstances/SAPVirtualInstances_Create_SingleServer.json
            // this example is just showing the usage of "SAPVirtualInstances_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("westcentralus"), SapEnvironmentType.NonProd, SapProductType.S4Hana, new DeploymentConfiguration()
            {
                AppLocation = new AzureLocation("eastus"),
                InfrastructureConfiguration = new SingleServerConfiguration("X00-RG", new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/dindurkhya-e2etesting/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet"), new VirtualMachineConfiguration("Standard_E32ds_v4", new ImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "7.4",
                    Version = "7.4.2019062505",
                }, new OSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new LinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshPublicKeys =
{
new SshPublicKey()
{
KeyData = "ssh-rsa public key",
}
},
                    },
                }))
                {
                    IsSecondaryIPEnabled = true,
                    DatabaseType = SapDatabaseType.Hana,
                },
            })
            {
                Tags =
{
},
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // SAPVirtualInstances_Create_WithOSConfig_Distributed
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_SAPVirtualInstancesCreateWithOSConfigDistributed()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/preview/2021-12-01-preview/examples/sapvirtualinstances/SAPVirtualInstances_Create_WithOSConfig_Distributed.json
            // this example is just showing the usage of "SAPVirtualInstances_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("westcentralus"), SapEnvironmentType.Prod, SapProductType.S4Hana, new DeploymentWithOSConfiguration()
            {
                AppLocation = new AzureLocation("eastus"),
                InfrastructureConfiguration = new ThreeTierConfiguration("X00-RG", new CentralServerConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/dindurkhya-e2etesting/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet"), new VirtualMachineConfiguration("Standard_E16ds_v4", new ImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "7.4",
                    Version = "7.4.2019062505",
                }, new OSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new LinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshKeyPair = new SshKeyPair()
                        {
                            PublicKey = "abc",
                            PrivateKey = "xyz",
                        },
                    },
                }), 1), new ApplicationServerConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/dindurkhya-e2etesting/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet"), new VirtualMachineConfiguration("Standard_E32ds_v4", new ImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "7.4",
                    Version = "7.4.2019062505",
                }, new OSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new LinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshKeyPair = new SshKeyPair()
                        {
                            PublicKey = "abc",
                            PrivateKey = "xyz",
                        },
                    },
                }), 6), new DatabaseConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/dindurkhya-e2etesting/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/dbsubnet"), new VirtualMachineConfiguration("Standard_M32ts", new ImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "7.4",
                    Version = "7.4.2019062505",
                }, new OSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new LinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshKeyPair = new SshKeyPair()
                        {
                            PublicKey = "abc",
                            PrivateKey = "xyz",
                        },
                    },
                }), 1)
                {
                    DatabaseType = SapDatabaseType.Hana,
                }),
                OSSapConfiguration = new OSSapConfiguration()
                {
                    DeployerVmPackages = new DeployerVmPackages()
                    {
                        Uri = new Uri("https://ybteststorageaccount.blob.core.windows.net/sapbits/deployervmpackages/DeployerVMPackages.zip"),
                        StorageAccountId = "/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/yb-SapInstall/providers/Microsoft.Storage/storageAccounts/ybteststorageaccount",
                    },
                    SapFqdn = "xyz.test.com",
                },
            })
            {
                Tags =
{
},
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // SAPVirtualInstances_Create_WithOSConfig_HA_AvSet
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_SAPVirtualInstancesCreateWithOSConfigHAAvSet()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/preview/2021-12-01-preview/examples/sapvirtualinstances/SAPVirtualInstances_Create_WithOSConfig_HA_AvSet.json
            // this example is just showing the usage of "SAPVirtualInstances_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("westcentralus"), SapEnvironmentType.Prod, SapProductType.S4Hana, new DeploymentWithOSConfiguration()
            {
                AppLocation = new AzureLocation("eastus"),
                InfrastructureConfiguration = new ThreeTierConfiguration("X00-RG", new CentralServerConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/dindurkhya-e2etesting/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet"), new VirtualMachineConfiguration("Standard_E16ds_v4", new ImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "7.4",
                    Version = "7.4.2019062505",
                }, new OSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new LinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshKeyPair = new SshKeyPair()
                        {
                            PublicKey = "abc",
                            PrivateKey = "xyz",
                        },
                    },
                }), 2), new ApplicationServerConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/dindurkhya-e2etesting/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet"), new VirtualMachineConfiguration("Standard_E32ds_v4", new ImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "7.4",
                    Version = "7.4.2019062505",
                }, new OSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new LinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshKeyPair = new SshKeyPair()
                        {
                            PublicKey = "abc",
                            PrivateKey = "xyz",
                        },
                    },
                }), 6), new DatabaseConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/dindurkhya-e2etesting/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/dbsubnet"), new VirtualMachineConfiguration("Standard_M32ts", new ImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "7.4",
                    Version = "7.4.2019062505",
                }, new OSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new LinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshKeyPair = new SshKeyPair()
                        {
                            PublicKey = "abc",
                            PrivateKey = "xyz",
                        },
                    },
                }), 2)
                {
                    DatabaseType = SapDatabaseType.Hana,
                })
                {
                    HighAvailabilityType = SapHighAvailabilityType.AvailabilitySet,
                },
                OSSapConfiguration = new OSSapConfiguration()
                {
                    DeployerVmPackages = new DeployerVmPackages()
                    {
                        Uri = new Uri("https://ybteststorageaccount.blob.core.windows.net/sapbits/deployervmpackages/DeployerVMPackages.zip"),
                        StorageAccountId = "/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/yb-SapInstall/providers/Microsoft.Storage/storageAccounts/ybteststorageaccount",
                    },
                    SapFqdn = "xyz.test.com",
                },
            })
            {
                Tags =
{
},
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // SAPVirtualInstances_Create_WithOSConfig_HA_AvZone
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_SAPVirtualInstancesCreateWithOSConfigHAAvZone()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/preview/2021-12-01-preview/examples/sapvirtualinstances/SAPVirtualInstances_Create_WithOSConfig_HA_AvZone.json
            // this example is just showing the usage of "SAPVirtualInstances_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("westcentralus"), SapEnvironmentType.Prod, SapProductType.S4Hana, new DeploymentWithOSConfiguration()
            {
                AppLocation = new AzureLocation("eastus"),
                InfrastructureConfiguration = new ThreeTierConfiguration("X00-RG", new CentralServerConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/dindurkhya-e2etesting/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet"), new VirtualMachineConfiguration("Standard_E16ds_v4", new ImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "7.4",
                    Version = "7.4.2019062505",
                }, new OSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new LinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshKeyPair = new SshKeyPair()
                        {
                            PublicKey = "abc",
                            PrivateKey = "xyz",
                        },
                    },
                }), 2), new ApplicationServerConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/dindurkhya-e2etesting/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet"), new VirtualMachineConfiguration("Standard_E32ds_v4", new ImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "7.4",
                    Version = "7.4.2019062505",
                }, new OSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new LinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshKeyPair = new SshKeyPair()
                        {
                            PublicKey = "abc",
                            PrivateKey = "xyz",
                        },
                    },
                }), 6), new DatabaseConfiguration(new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/dindurkhya-e2etesting/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/dbsubnet"), new VirtualMachineConfiguration("Standard_M32ts", new ImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "7.4",
                    Version = "7.4.2019062505",
                }, new OSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new LinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshKeyPair = new SshKeyPair()
                        {
                            PublicKey = "abc",
                            PrivateKey = "xyz",
                        },
                    },
                }), 2)
                {
                    DatabaseType = SapDatabaseType.Hana,
                })
                {
                    HighAvailabilityType = SapHighAvailabilityType.AvailabilityZone,
                },
                OSSapConfiguration = new OSSapConfiguration()
                {
                    DeployerVmPackages = new DeployerVmPackages()
                    {
                        Uri = new Uri("https://ybteststorageaccount.blob.core.windows.net/sapbits/deployervmpackages/DeployerVMPackages.zip"),
                        StorageAccountId = "/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/yb-SapInstall/providers/Microsoft.Storage/storageAccounts/ybteststorageaccount",
                    },
                    SapFqdn = "xyz.test.com",
                },
            })
            {
                Tags =
{
},
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // SAPVirtualInstances_Create_WithOSConfig_SingleServer
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task CreateOrUpdate_SAPVirtualInstancesCreateWithOSConfigSingleServer()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/preview/2021-12-01-preview/examples/sapvirtualinstances/SAPVirtualInstances_Create_WithOSConfig_SingleServer.json
            // this example is just showing the usage of "SAPVirtualInstances_Create" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceData data = new SapVirtualInstanceData(new AzureLocation("westcentralus"), SapEnvironmentType.NonProd, SapProductType.S4Hana, new DeploymentWithOSConfiguration()
            {
                AppLocation = new AzureLocation("eastus"),
                InfrastructureConfiguration = new SingleServerConfiguration("X00-RG", new ResourceIdentifier("/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/dindurkhya-e2etesting/providers/Microsoft.Networks/virtualNetworks/test-vnet/subnets/appsubnet"), new VirtualMachineConfiguration("Standard_E32ds_v4", new ImageReference()
                {
                    Publisher = "RedHat",
                    Offer = "RHEL-SAP",
                    Sku = "7.4",
                    Version = "7.4.2019062505",
                }, new OSProfile()
                {
                    AdminUsername = "{your-username}",
                    OSConfiguration = new LinuxConfiguration()
                    {
                        DisablePasswordAuthentication = true,
                        SshKeyPair = new SshKeyPair()
                        {
                            PublicKey = "abc",
                            PrivateKey = "xyz",
                        },
                    },
                }))
                {
                    IsSecondaryIPEnabled = true,
                    DatabaseType = SapDatabaseType.Hana,
                },
                OSSapConfiguration = new OSSapConfiguration()
                {
                    DeployerVmPackages = new DeployerVmPackages()
                    {
                        Uri = new Uri("https://ybteststorageaccount.blob.core.windows.net/sapbits/deployervmpackages/DeployerVMPackages.zip"),
                        StorageAccountId = "/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/yb-SapInstall/providers/Microsoft.Storage/storageAccounts/ybteststorageaccount",
                    },
                    SapFqdn = "xyz.test.com",
                },
            })
            {
                Tags =
{
},
            };
            ArmOperation<SapVirtualInstanceResource> lro = await collection.CreateOrUpdateAsync(WaitUntil.Completed, sapVirtualInstanceName, data);
            SapVirtualInstanceResource result = lro.Value;

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // SAPVirtualInstances_Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Get_SAPVirtualInstancesGet()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/preview/2021-12-01-preview/examples/sapvirtualinstances/SAPVirtualInstances_Get.json
            // this example is just showing the usage of "SAPVirtualInstances_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            SapVirtualInstanceResource result = await collection.GetAsync(sapVirtualInstanceName);

            // the variable result is a resource, you could call other operations on this instance as well
            // but just for demo, we get its data from this resource instance
            SapVirtualInstanceData resourceData = result.Data;
            // for demo we just print out the id
            Console.WriteLine($"Succeeded on id: {resourceData.Id}");
        }

        // SAPVirtualInstances_Get
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task Exists_SAPVirtualInstancesGet()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/preview/2021-12-01-preview/examples/sapvirtualinstances/SAPVirtualInstances_Get.json
            // this example is just showing the usage of "SAPVirtualInstances_Get" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "8e17e36c-42e9-4cd5-a078-7b44883414e0";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation
            string sapVirtualInstanceName = "X00";
            bool result = await collection.ExistsAsync(sapVirtualInstanceName);

            Console.WriteLine($"Succeeded: {result}");
        }

        // SAPVirtualInstances_ListByResourceGroup
        [NUnit.Framework.Test]
        [NUnit.Framework.Ignore("Only verifying that the sample builds")]
        public async Task GetAll_SAPVirtualInstancesListByResourceGroup()
        {
            // Generated from example definition: specification/workloads/resource-manager/Microsoft.Workloads/preview/2021-12-01-preview/examples/sapvirtualinstances/SAPVirtualInstances_ListByResourceGroup.json
            // this example is just showing the usage of "SAPVirtualInstances_ListByResourceGroup" operation, for the dependent resources, they will have to be created separately.

            // get your azure access token, for more details of how Azure SDK get your access token, please refer to https://learn.microsoft.com/en-us/dotnet/azure/sdk/authentication?tabs=command-line
            TokenCredential cred = new DefaultAzureCredential();
            // authenticate your client
            ArmClient client = new ArmClient(cred);

            // this example assumes you already have this ResourceGroupResource created on azure
            // for more information of creating ResourceGroupResource, please refer to the document of ResourceGroupResource
            string subscriptionId = "6d875e77-e412-4d7d-9af4-8895278b4443";
            string resourceGroupName = "test-rg";
            ResourceIdentifier resourceGroupResourceId = ResourceGroupResource.CreateResourceIdentifier(subscriptionId, resourceGroupName);
            ResourceGroupResource resourceGroupResource = client.GetResourceGroupResource(resourceGroupResourceId);

            // get the collection of this SapVirtualInstanceResource
            SapVirtualInstanceCollection collection = resourceGroupResource.GetSapVirtualInstances();

            // invoke the operation and iterate over the result
            await foreach (SapVirtualInstanceResource item in collection.GetAllAsync())
            {
                // the variable item is a resource, you could call other operations on this instance as well
                // but just for demo, we get its data from this resource instance
                SapVirtualInstanceData resourceData = item.Data;
                // for demo we just print out the id
                Console.WriteLine($"Succeeded on id: {resourceData.Id}");
            }

            Console.WriteLine($"Succeeded");
        }
    }
}
